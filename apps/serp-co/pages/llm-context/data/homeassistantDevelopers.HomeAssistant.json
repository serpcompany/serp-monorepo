[
  {
    "owner": "home-assistant",
    "repo": "developers.home-assistant",
    "content": "TITLE: Defining Basic Config Flow Class in Python\nDESCRIPTION: This snippet shows how to create a basic config flow class for a Home Assistant integration. It defines the class, inherits from ConfigFlow, and sets the domain and version.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant import config_entries\nfrom .const import DOMAIN\n\n\nclass ExampleConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):\n    \"\"\"Example config flow.\"\"\"\n    # The schema version of the entries that it creates\n    # Home Assistant will call your migrate method if the version changes\n    VERSION = 1\n    MINOR_VERSION = 1\n```\n\n----------------------------------------\n\nTITLE: Implementing async_check_significant_change function for Home Assistant\nDESCRIPTION: This code defines a callback function that determines whether a state change is significant. The function compares old and new states and attributes to decide if the change is meaningful enough to report to external services. It should return True for significant changes, False for insignificant ones, or None if unable to determine.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/significant_change.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Optional\nfrom homeassistant.core import HomeAssistant, callback\n\n@callback\ndef async_check_significant_change(\n    hass: HomeAssistant,\n    old_state: str,\n    old_attrs: dict,\n    new_state: str,\n    new_attrs: dict,\n    **kwargs: Any,\n) -> bool | None:\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Integration Manifest in JSON for Home Assistant\nDESCRIPTION: This snippet shows a comprehensive example of a manifest.json file for a Home Assistant integration. It includes all possible fields such as domain, name, dependencies, codeowners, and integration type.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"hue\",\n  \"name\": \"Philips Hue\",\n  \"after_dependencies\": [\"http\"],\n  \"codeowners\": [\"@balloob\"],\n  \"dependencies\": [\"mqtt\"],\n  \"documentation\": \"https://www.home-assistant.io/components/hue\",\n  \"integration_type\": \"hub\",\n  \"iot_class\": \"local_polling\",\n  \"issue_tracker\": \"https://github.com/balloob/hue/issues\",\n  \"loggers\": [\"aiohue\"],\n  \"requirements\": [\"aiohue==1.9.1\"],\n  \"quality_scale\": \"platinum\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Set Value Methods for DateTimeEntity in Home Assistant\nDESCRIPTION: Example showing how to implement the required methods for updating the value of a DateTimeEntity. Developers must implement either set_value() or async_set_value() to handle updates from users or automations. The input datetime will always be in UTC.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/datetime.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyDateTime(DateTimeEntity):\n    # Implement one of these methods.\n\n    def set_value(self, value: datetime) -> None:\n        \"\"\"Update the current value.\"\"\"\n\n    async def async_set_value(self, value: datetime) -> None:\n        \"\"\"Update the current value.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Set Value Method for Text Entity in Python\nDESCRIPTION: This code snippet demonstrates how to implement the set_value method for a custom TextEntity in Home Assistant. It shows both synchronous and asynchronous implementations, allowing developers to choose based on their integration's needs.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/text.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyTextEntity(TextEntity):\n    # Implement one of these methods.\n\n    def set_value(self, value: str) -> None:\n        \"\"\"Set the text value.\"\"\"\n\n    async def async_set_value(self, value: str) -> None:\n        \"\"\"Set the text value.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Flow with Unique Identifier Validation in Python\nDESCRIPTION: Example implementation of a config flow that uses a unique identifier to prevent duplicate device setup. The flow fetches a unique ID from the device and checks if it already exists before allowing configuration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/unique-config-entry.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_step_user(\n    self, user_input: dict[str, Any] | None = None\n) -> ConfigFlowResult:\n    \"\"\"Handle a flow initialized by the user.\"\"\"\n    errors: dict[str, str] = {}\n    if user_input:\n        client = MyClient(user_input[CONF_HOST])\n        try:\n            identifier = await client.get_identifier()\n        except MyException:\n            errors[\"base\"] = \"cannot_connect\"\n        except Exception:  # noqa: BLE001\n            LOGGER.exception(\"Unexpected exception\")\n            errors[\"base\"] = \"unknown\"\n        else:\n            await self.async_set_unique_id(identifier)\n            self._abort_if_unique_id_configured()\n            return self.async_create_entry(\n                title=\"MyIntegration\",\n                data=user_input,\n            )\n    return self.async_show_form(\n        step_id=\"user\",\n        data_schema=vol.Schema({vol.Required(CONF_HOST): TextSelector()}),\n        errors=errors,\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Reconfiguration Flow in Home Assistant\nDESCRIPTION: Example implementation of a reconfiguration step in a config flow class that allows users to change config entry data. The method processes user input, validates the unique ID, and updates the existing entry without creating a new one.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport voluptuous as vol\n\nclass ExampleConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):\n    \"\"\"Config flow for Example integration.\"\"\"\n\n    async def async_step_reconfigure(self, user_input: dict[str, Any] | None = None):\n        if user_input is not None:\n            # TODO: process user input\n            self.async_set_unique_id(user_id)\n            self._abort_if_unique_id_mismatch()\n            return self.async_update_reload_and_abort(\n                self._get_reconfigure_entry(),\n                data_updates=data,\n            )\n\n        return self.async_show_form(\n            step_id=\"reconfigure\",\n            data_schema=vol.Schema({vol.Required(\"input_parameter\"): str}),\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Set Value Method for Number Entity in Python\nDESCRIPTION: This snippet shows how to implement the set_native_value method for a NumberEntity class in Home Assistant. It allows updating the current value of the number entity, either synchronously or asynchronously.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/number.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyNumber(NumberEntity):\n    # Implement one of these methods.\n\n    def set_native_value(self, value: float) -> None:\n        \"\"\"Update the current value.\"\"\"\n\n    async def async_set_native_value(self, value: float) -> None:\n        \"\"\"Update the current value.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Function in Python for Home Assistant\nDESCRIPTION: This snippet shows how to define a callback function in Home Assistant using the @callback decorator. It demonstrates handling a service call and scheduling coroutine tasks.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_categorizing_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import callback\n\n\n@callback\ndef async_trigger_service_handler(service_call):\n    \"\"\"Handle automation trigger service action call.\"\"\"\n    vars = service_call.data.get(ATTR_VARIABLES)\n    for entity in component.async_extract_from_service(service_call):\n        hass.loop.create_task(entity.async_trigger(vars, True))\n```\n\n----------------------------------------\n\nTITLE: Converting Synchronous Entity Update Method to Asynchronous in Home Assistant\nDESCRIPTION: Shows how to convert an entity's update method to an asynchronous version. This requires that the dependencies of the entity also be async-compatible.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_working_with_async.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyEntity(Entity):\n    def update(self):\n        \"\"\"Retrieve latest state.\"\"\"\n        self._state = fetch_state()\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyEntity(Entity):\n    async def async_update(self):\n        \"\"\"Retrieve latest state.\"\"\"\n        self._state = await async_fetch_state()\n```\n\n----------------------------------------\n\nTITLE: Implementing Turn On Method for Home Assistant Climate Entity in Python\nDESCRIPTION: This code demonstrates how to implement the turn on method for a Climate entity. It includes both synchronous and asynchronous versions and notes on setting the HVAC mode.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/climate.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    # Implement one of these methods.\n    # The `turn_on` method should set `hvac_mode` to any other than\n    # `HVACMode.OFF` by optimistically setting it from the service action\n    # handler or with the next state update\n\n    def turn_on(self):\n        \"\"\"Turn the entity on.\"\"\"\n\n    async def async_turn_on(self):\n        \"\"\"Turn the entity on.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Token Refresh in Home Assistant Config Entry\nDESCRIPTION: Example of handling authentication token refresh in a config entry setup, including error handling for expired tokens. Demonstrates proper exception handling and raising of ConfigEntryAuthFailed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.config_entries import SOURCE_REAUTH, ConfigEntry\nfrom homeassistant.core import HomeAssistant\nfrom . import api\n\nasync def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry):\n    \"\"\"Setup up a config entry.\"\"\"\n\n    # TODO: Replace with actual API setup and exception\n    auth = api.AsyncConfigEntryAuth(...)\n    try:\n        await auth.refresh_tokens()\n    except TokenExpiredError as err:\n        raise ConfigEntryAuthFailed(err) from err\n\n    # TODO: Proceed with integration setup\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Information in a Home Assistant Sensor Entity\nDESCRIPTION: This code demonstrates how to add device information to a sensor entity in Home Assistant. It shows how to create a DeviceInfo object with properties like connections, name, serial number, hardware/software versions, manufacturer, and model information. This ensures the device appears properly in the Home Assistant device registry.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/devices.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySensor(SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n\n    _attr_has_entity_name = True\n\n    def __init__(self, device: MyDevice) -> None:\n        \"\"\"Initialize the sensor.\"\"\"\n        self._attr_device_info = DeviceInfo(\n            connections={(CONNECTION_NETWORK_MAC, device.mac)},\n            name=device.name,\n            serial_number=device.serial,\n            hw_version=device.rev,\n            sw_version=device.version,\n            manufacturer=\"My Company\",\n            model=\"My Sensor\",\n            model_id=\"ABC-123\",\n            via_device=(DOMAIN, device.hub_id),\n        )\n```\n\n----------------------------------------\n\nTITLE: Initializing Home Assistant Integration Scaffold\nDESCRIPTION: Command to generate a basic integration structure using Home Assistant's scaffold script\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_component_index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m script.scaffold integration\n```\n\n----------------------------------------\n\nTITLE: Zeroconf Discovery Configuration in manifest.json\nDESCRIPTION: Example of Zeroconf discovery configuration in a manifest.json file to match Google Cast devices. This enables automatic triggering of the integration's config flow when matching Zeroconf/mDNS services are discovered.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"zeroconf\": [\"_googlecast._tcp.local.\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vacuum Entity Features in Python for Home Assistant\nDESCRIPTION: Demonstrates how to define supported features for a vacuum entity using the VacuumEntityFeature enum. Features are combined using the bitwise OR operator.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/vacuum.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.vacuum import VacuumEntityFeature\n\nsupported_features = VacuumEntityFeature.STATE | VacuumEntityFeature.BATTERY | VacuumEntityFeature.CLEAN_SPOT\n```\n\n----------------------------------------\n\nTITLE: Authentication Message with Access Token in Home Assistant WebSocket API\nDESCRIPTION: Client message for authenticating with the WebSocket API using an access token. This is the proper format for responding to an auth_required message.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"auth\",\n  \"access_token\": \"ABCDEFGH\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Events in Home Assistant Python Component\nDESCRIPTION: Example showing how to listen for custom events in a Home Assistant component. It sets up an event listener for 'example_component_my_cool_event' and increments a counter each time the event is received.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_events.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDOMAIN = \"example_component\"\n\n\ndef setup(hass, config):\n    \"\"\"Set up is called when Home Assistant is loading our component.\"\"\"\n    count = 0\n\n    # Listener to handle fired events\n    def handle_event(event):\n        nonlocal count\n        count += 1\n        print(f\"Answer {count} is: {event.data.get('answer')}\")\n\n    # Listen for when example_component_my_cool_event is fired\n    hass.bus.listen(\"example_component_my_cool_event\", handle_event)\n\n    # Return successful setup\n    return True\n```\n\n----------------------------------------\n\nTITLE: Registering Service Actions in async_setup Method for Home Assistant Integration in Python\nDESCRIPTION: This snippet demonstrates the recommended pattern for registering service actions in the async_setup method of a Home Assistant integration. It includes validation logic to check if the referenced configuration entry exists and is loaded, raising appropriate ServiceValidationError messages when validation fails.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/action-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:\n    \"\"\"Set up my integration.\"\"\"\n\n    async def async_get_schedule(call: ServiceCall) -> ServiceResponse:\n        \"\"\"Get the schedule for a specific range.\"\"\"\n        if not (entry := hass.config_entries.async_get_entry(call.data[ATTR_CONFIG_ENTRY_ID])):\n            raise ServiceValidationError(\"Entry not found\")\n        if entry.state is not ConfigEntryState.LOADED:\n            raise ServiceValidationError(\"Entry not loaded\")\n        client = cast(MyConfigEntry, entry).runtime_data\n        ...\n\n    hass.services.async_register(\n        DOMAIN,\n        SERVICE_GET_SCHEDULE,\n        async_get_schedule,\n        schema=SERVICE_GET_SCHEDULE_SCHEMA,\n        supports_response=SupportsResponse.ONLY,\n    )\n```\n\n----------------------------------------\n\nTITLE: Running development server for Home Assistant frontend\nDESCRIPTION: Build the frontend and run a development server that automatically rebuilds on source file changes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/development.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnvm use\nscript/develop\n```\n\n----------------------------------------\n\nTITLE: Implementing DataUpdateCoordinator for Home Assistant Integration\nDESCRIPTION: Example implementation of a Home Assistant integration using DataUpdateCoordinator to manage efficient polling of API data. Includes setup, coordination, and entity management with proper error handling and state updates.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/integration_fetching_data.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Example integration using DataUpdateCoordinator.\"\"\"\n\nfrom datetime import timedelta\nimport logging\n\nimport async_timeout\n\nfrom homeassistant.components.light import LightEntity\nfrom homeassistant.core import callback\nfrom homeassistant.exceptions import ConfigEntryAuthFailed\nfrom homeassistant.helpers.update_coordinator import (\n    CoordinatorEntity,\n    DataUpdateCoordinator,\n    UpdateFailed,\n)\n\nfrom .const import DOMAIN\n\n_LOGGER = logging.getLogger(__name__)\n\n\nasync def async_setup_entry(hass, config_entry, async_add_entities):\n    \"\"\"Config entry example.\"\"\"\n    # assuming API object stored here by __init__.py\n    my_api = hass.data[DOMAIN][config_entry.entry_id]\n    coordinator = MyCoordinator(hass, config_entry, my_api)\n\n    # Fetch initial data so we have data when entities subscribe\n    #\n    # If the refresh fails, async_config_entry_first_refresh will\n    # raise ConfigEntryNotReady and setup will try again later\n    #\n    # If you do not want to retry setup on failure, use\n    # coordinator.async_refresh() instead\n    #\n    await coordinator.async_config_entry_first_refresh()\n\n    async_add_entities(\n        MyEntity(coordinator, idx) for idx, ent in enumerate(coordinator.data)\n    )\n\n\nclass MyCoordinator(DataUpdateCoordinator):\n    \"\"\"My custom coordinator.\"\"\"\n\n    def __init__(self, hass, config_entry, my_api):\n        \"\"\"Initialize my coordinator.\"\"\"\n        super().__init__(\n            hass,\n            _LOGGER,\n            # Name of the data. For logging purposes.\n            name=\"My sensor\",\n            config_entry=config_entry,\n            # Polling interval. Will only be polled if there are subscribers.\n            update_interval=timedelta(seconds=30),\n            # Set always_update to `False` if the data returned from the\n            # api can be compared via `__eq__` to avoid duplicate updates\n            # being dispatched to listeners\n            always_update=True\n        )\n        self.my_api = my_api\n        self._device: MyDevice | None = None\n\n    async def _async_setup(self):\n        \"\"\"Set up the coordinator\n\n        This is the place to set up your coordinator,\n        or to load data, that only needs to be loaded once.\n\n        This method will be called automatically during\n        coordinator.async_config_entry_first_refresh.\n        \"\"\"\n        self._device = await self.my_api.get_device()\n\n    async def _async_update_data(self):\n        \"\"\"Fetch data from API endpoint.\n\n        This is the place to pre-process the data to lookup tables\n        so entities can quickly look up their data.\n        \"\"\"\n        try:\n            # Note: asyncio.TimeoutError and aiohttp.ClientError are already\n            # handled by the data update coordinator.\n            async with async_timeout.timeout(10):\n                # Grab active context variables to limit data required to be fetched from API\n                # Note: using context is not required if there is no need or ability to limit\n                # data retrieved from API.\n                listening_idx = set(self.async_contexts())\n                return await self.my_api.fetch_data(listening_idx)\n        except ApiAuthError as err:\n            # Raising ConfigEntryAuthFailed will cancel future updates\n            # and start a config flow with SOURCE_REAUTH (async_step_reauth)\n            raise ConfigEntryAuthFailed from err\n        except ApiError as err:\n            raise UpdateFailed(f\"Error communicating with API: {err}\")\n\n\nclass MyEntity(CoordinatorEntity, LightEntity):\n    \"\"\"An entity using CoordinatorEntity.\n\n    The CoordinatorEntity class provides:\n      should_poll\n      async_update\n      async_added_to_hass\n      available\n\n    \"\"\"\n\n    def __init__(self, coordinator, idx):\n        \"\"\"Pass coordinator to CoordinatorEntity.\"\"\"\n        super().__init__(coordinator, context=idx)\n        self.idx = idx\n\n    @callback\n    def _handle_coordinator_update(self) -> None:\n        \"\"\"Handle updated data from the coordinator.\"\"\"\n        self._attr_is_on = self.coordinator.data[self.idx][\"state\"]\n        self.async_write_ha_state()\n\n    async def async_turn_on(self, **kwargs):\n        \"\"\"Turn the light on.\n\n        Example method how to request data updates.\n        \"\"\"\n        # Do the turning on.\n        # ...\n\n        # Update the data\n        await self.coordinator.async_request_refresh()\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Flow with mDNS Discovery in Home Assistant\nDESCRIPTION: This Python code demonstrates the implementation of a config flow for a Home Assistant integration with mDNS discovery. It includes methods for handling zeroconf discovery, confirming discovery, and manual user setup.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/discovery.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyConfigFlow(ConfigFlow, domain=DOMAIN):\n    \"\"\"My config flow.\"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize the config flow.\"\"\"\n        self.data: dict[str, Any] = {}\n\n    async def async_step_zeroconf(\n        self, discovery_info: zeroconf.ZeroconfServiceInfo\n    ) -> ConfigFlowResult:\n        \"\"\"Handle zeroconf discovery.\"\"\"\n        self.data[CONF_HOST] = host = discovery_info.host\n\n        await self.async_set_unique_id(discovery_info.properties[\"serialno\"])\n        self._abort_if_unique_id_configured(updates={CONF_HOST: host})\n\n        client = MyClient(host)\n        try:\n            await client.get_data()\n        except MyClientError:\n            return self.async_abort(reason=\"cannot_connect\")\n\n        return await self.async_step_discovery_confirm()\n\n    async def async_step_discovery_confirm(\n        self, user_input: dict[str, Any] | None = None\n    ) -> ConfigFlowResult:\n        \"\"\"Confirm discovery.\"\"\"\n        if user_input is not None:\n            return self.async_create_entry(\n                title=\"MyIntegration\",\n                data={CONF_HOST: self.data[CONF_HOST]},\n            )\n\n        self._set_confirm_only()\n        return self.async_show_form(step_id=\"discovery_confirm\")\n\n    async def async_step_user(\n        self, user_input: dict[str, Any] | None = None\n    ) -> ConfigFlowResult:\n        \"\"\"Handle a flow initialized by the user.\"\"\"\n        errors: dict[str, str] = {}\n        if user_input:\n            client = MyClient(user_input[CONF_HOST])\n            try:\n                serial_number = await client.check_connection()\n            except MyException as exception:\n                errors[\"base\"] = \"cannot_connect\"\n            else:\n                await self.async_set_unique_id(\n                    serial_number, raise_on_progress=False\n                )\n                self._abort_if_unique_id_configured()\n                return self.async_create_entry(\n                    title=\"MyIntegration\",\n                    data=user_input,\n                )\n        return self.async_show_form(\n            step_id=\"user\",\n            data_schema=vol.Schema(\n                {\n                    vol.Required(CONF_HOST): TextSelector(),\n                }\n            ),\n            errors=errors,\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Entry and Device Diagnostics in Python for Home Assistant\nDESCRIPTION: This code snippet demonstrates how to implement diagnostics for both config entries and device entries in a Home Assistant integration. It uses the async_redact_data function to safely remove sensitive information from the diagnostics output.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration_diagnostics.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTO_REDACT = [\n    CONF_API_KEY,\n    APPLIANCE_CODE\n]\n\nasync def async_get_config_entry_diagnostics(\n    hass: HomeAssistant, entry: MyConfigEntry\n) -> dict[str, Any]:\n    \"\"\"Return diagnostics for a config entry.\"\"\"\n\n    return {\n        \"entry_data\": async_redact_data(entry.data, TO_REDACT),\n        \"data\": entry.runtime_data.data,\n    }\n\nasync def async_get_device_diagnostics(\n    hass: HomeAssistant, entry: MyConfigEntry, device: DeviceEntry\n) -> dict[str, Any]:\n    \"\"\"Return diagnostics for a device.\"\"\"\n    appliance = _get_appliance_by_device_id(hass, device.id)\n    return {\n        \"details\": async_redact_data(appliance.raw_data, TO_REDACT),\n        \"data\": appliance.data,\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Device Info for an Entity in Home Assistant (Python)\nDESCRIPTION: This code demonstrates how to define device information for an entity in Home Assistant by implementing the device_info property in a LightEntity class. This allows Home Assistant to register the device automatically through the entity.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_registry_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Inside a platform\nclass HueLight(LightEntity):\n    @property\n    def device_info(self) -> DeviceInfo:\n        \"\"\"Return the device info.\"\"\"\n        return DeviceInfo(\n            identifiers={\n                # Serial numbers are unique identifiers within a specific domain\n                (hue.DOMAIN, self.unique_id)\n            },\n            name=self.name,\n            manufacturer=self.light.manufacturername,\n            model=self.light.productname,\n            model_id=self.light.modelid,\n            sw_version=self.light.swversion,\n            via_device=(hue.DOMAIN, self.api.bridgeid),\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Entity Methods for Preset Mode\nDESCRIPTION: Code snippet showing how to implement the methods for setting fan preset modes. This should be implemented when the FanEntityFeature.PRESET_MODE flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/fan.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass FanEntity(ToggleEntity):\n    # Implement one of these methods.\n\n    def set_preset_mode(self, preset_mode: str) -> None:\n        \"\"\"Set the preset mode of the fan.\"\"\"\n\n    async def async_set_preset_mode(self, preset_mode: str) -> None:\n        \"\"\"Set the preset mode of the fan.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing async_create_event Method for Calendar Entity\nDESCRIPTION: Method to add new events to a calendar. Must handle RFC5545 fields and preserve unknown fields. Requires CREATE_EVENT feature flag to be set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/calendar.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.calendar import CalendarEntity\n\nclass MyCalendar(CalendarEntity):\n\n    async def async_create_event(self, **kwargs: Any) -> None:\n        \"\"\"Add a new event to calendar.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Entity Class in Python for Home Assistant\nDESCRIPTION: This code snippet demonstrates how to implement a custom weather entity class in Python for Home Assistant. It includes methods for retrieving daily, twice daily, and hourly weather forecasts.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/weather.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyWeatherEntity(WeatherEntity):\n    \"\"\"Represent a Weather entity.\"\"\"\n\n    async def async_forecast_daily(self) -> list[Forecast] | None:\n        \"\"\"Return the daily forecast in native units.\n        \n        Only implement this method if `WeatherEntityFeature.FORECAST_DAILY` is set\n        \"\"\"\n\n    async def async_forecast_twice_daily(self) -> list[Forecast] | None:\n        \"\"\"Return the twice daily forecast in native units.\n        \n        Only implement this method if `WeatherEntityFeature.FORECAST_TWICE_DAILY` is set\n        \"\"\"\n\n    async def async_forecast_hourly(self) -> list[Forecast] | None:\n        \"\"\"Return the hourly forecast in native units.\n        \n        Only implement this method if `WeatherEntityFeature.FORECAST_HOURLY` is set\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Switch Entity in Python for Home Assistant\nDESCRIPTION: This code snippet demonstrates how to create a basic switch entity in Home Assistant. It includes properties for tracking the switch state and methods for turning the switch on and off. The entity uses in-memory state tracking and represents the main feature of a device.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.switch import SwitchEntity\n\n\nclass MySwitch(SwitchEntity):\n    _attr_has_entity_name = True\n\n    def __init__(self):\n        self._is_on = False\n        self._attr_device_info = ...  # For automatic device registration\n        self._attr_unique_id = ...\n\n    @property\n    def is_on(self):\n        \"\"\"If the switch is currently on or off.\"\"\"\n        return self._is_on\n\n    def turn_on(self, **kwargs):\n        \"\"\"Turn the switch on.\"\"\"\n        self._is_on = True\n\n    def turn_off(self, **kwargs):\n        \"\"\"Turn the switch off.\"\"\"\n        self._is_on = False\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests with Python\nDESCRIPTION: An example of making an authenticated HTTP request to the Home Assistant API using Python's requests library. It shows how to set up the proper authorization header with the bearer token.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"https://your.awesome.home/api/error/all\"\nheaders = {\n    \"Authorization\": \"Bearer ABCDEFGH\",\n}\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Defining User Options with YAML in Home Assistant Add-ons\nDESCRIPTION: Example of user-configurable options in a Home Assistant add-on. Shows how to define custom message text, login credentials, random lists, links, and numeric values that users can set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmessage: \"custom things\"\nlogins:\n  - username: beer\n    password: \"123456\"\n  - username: cheep\n    password: \"654321\"\nrandom:\n  - haha\n  - hihi\nlink: \"http://example.com/\"\nsize: 15\ncount: 1.2\n```\n\n----------------------------------------\n\nTITLE: Implementing turn_off Methods for Home Assistant Switch Entity in Python\nDESCRIPTION: Code showing how to implement either the synchronous turn_off or asynchronous async_turn_off method in a custom Switch entity class. These methods handle turning the entity off and can accept additional keyword arguments.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/switch.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MySwitch(SwitchEntity):\n    # Implement one of these methods.\n\n    def turn_off(self, **kwargs):\n        \"\"\"Turn the entity off.\"\"\"\n\n    async def async_turn_off(self, **kwargs):\n        \"\"\"Turn the entity off.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Home Assistant Integration\nDESCRIPTION: Basic synchronous integration implementation that sets up a state in Home Assistant. Creates a simple state with domain 'hello_state' and entity 'world'.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_component_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDOMAIN = \"hello_state\"\n\n\ndef setup(hass, config):\n    hass.states.set(\"hello_state.world\", \"Paulus\")\n\n    # Return boolean to indicate that initialization was successful.\n    return True\n```\n\n----------------------------------------\n\nTITLE: Registering Callbacks for Nespresso Prodigio Bluetooth Devices in Python\nDESCRIPTION: This example demonstrates registering for callbacks when Nespresso Prodigio devices are discovered, using a wildcard pattern to match device names. The callback registration is automatically canceled when the configuration entry is unloaded.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\n...\n\nentry.async_on_unload(\n    bluetooth.async_register_callback(\n        hass, _async_nespresso_found, {\"local_name\": \"Prodigio_*\")}, bluetooth.BluetoothScanningMode.ACTIVE\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Set Value Methods for DateEntity in Python\nDESCRIPTION: Demonstrates how to implement the required methods for updating a date entity's value. Developers must implement either the synchronous `set_value()` or asynchronous `async_set_value()` method to handle user or automation updates to the date value.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/date.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyDate(DateEntity):\n    # Implement one of these methods.\n\n    def set_value(self, value: date) -> None:\n        \"\"\"Update the current value.\"\"\"\n\n    async def async_set_value(self, value: date) -> None:\n        \"\"\"Update the current value.\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing close_valve Methods in Python for Home Assistant Valve Entities\nDESCRIPTION: These methods control closing a valve. Implement either the synchronous or asynchronous version based on your integration needs, but only if the SUPPORT_CLOSE flag is set. For valves that support position setting, use set_valve_position instead.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/valve.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyValve(ValveEntity):\n    # Implement one of these methods.\n\n    def close_valve(self) -> None:\n        \"\"\"Close valve.\"\"\"\n\n    async def async_close_valve(self) -> None:\n        \"\"\"Close valve.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Blocking Calls in Executor with Home Assistant\nDESCRIPTION: Example showing how to properly run blocking code in Home Assistant by using async_add_executor_job and loop.run_in_executor, including handling functions with arguments and keyword arguments.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_blocking_operations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\n\ndef blocking_code(some_arg: str):\n    ...\n\ndef blocking_code_with_kwargs(kwarg: bool = False):\n    ...\n\n# When calling a blocking function inside Home Assistant\nresult = await hass.async_add_executor_job(blocking_code, \"something\")\n\nresult = await hass.async_add_executor_job(partial(blocking_code_with_kwargs, kwarg=True))\n\n# When calling a blocking function in your library code\nloop = asyncio.get_running_loop()\n\nresult = await loop.run_in_executor(None, blocking_code, \"something\")\n\nresult = await loop.run_in_executor(None, partial(blocking_code_with_kwargs, kwarg=True))\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Flow Handler Implementation for Reauthentication\nDESCRIPTION: Implementation of an OAuth2 flow handler that supports reauthentication, including steps for confirmation, flow handling, and entry updates. Contains methods for handling reauth confirmations and creating/updating OAuth entries.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass OAuth2FlowHandler(\n    config_entry_oauth2_flow.AbstractOAuth2FlowHandler, domain=DOMAIN\n):\n    \"\"\"Config flow to handle OAuth2 authentication.\"\"\"\n\n    async def async_step_reauth(\n        self, entry_data: Mapping[str, Any]\n    ) -> ConfigFlowResult:\n        \"\"\"Perform reauth upon an API authentication error.\"\"\"\n        return await self.async_step_reauth_confirm()\n\n    async def async_step_reauth_confirm(\n        self, user_input: dict[str, Any] | None = None\n    ) -> ConfigFlowResult:\n        \"\"\"Dialog that informs the user that reauth is required.\"\"\"\n        if user_input is None:\n            return self.async_show_form(\n                step_id=\"reauth_confirm\",\n                data_schema=vol.Schema({}),\n            )\n        return await self.async_step_user()\n\n    async def async_oauth_create_entry(self, data: dict) -> dict:\n        \"\"\"Create an oauth config entry or update existing entry for reauth.\"\"\"\n        self.async_set_unique_id(user_id)\n        if self.source == SOURCE_REAUTH:\n            self._abort_if_unique_id_mismatch()\n            return self.async_update_reload_and_abort(\n                self._get_reauth_entry(),\n                data_updates=data,\n            )\n        self._abort_if_unique_id_configured()\n        return await super().async_oauth_create_entry(data)\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Discovery Configuration in manifest.json\nDESCRIPTION: Example of Bluetooth discovery configuration in a manifest.json file to match Nespresso Prodigio machines by local name pattern. This enables automatic triggering of the integration's config flow when matching devices are discovered.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bluetooth\": [\n    {\n      \"local_name\": \"Prodigio_*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Voluptuous Schema for Platform Configuration in Python\nDESCRIPTION: This code snippet demonstrates how to create a PLATFORM_SCHEMA for a Home Assistant platform that extends the base schema with custom configuration options. It includes required and optional parameters with default values.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_platform_code_review.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport voluptuous as vol\n\nfrom homeassistant.const import CONF_FILENAME, CONF_HOST\nfrom homeassistant.components.light import PLATFORM_SCHEMA\nimport homeassistant.helpers.config_validation as cv\n\nCONF_ALLOW_UNREACHABLE = \"allow_unreachable\"\nDEFAULT_UNREACHABLE = False\n\nPLATFORM_SCHEMA = PLATFORM_SCHEMA.extend(\n    {\n        vol.Required(CONF_HOST): cv.string,\n        vol.Optional(CONF_ALLOW_UNREACHABLE, default=DEFAULT_UNREACHABLE): cv.boolean,\n        vol.Optional(CONF_FILENAME): cv.string,\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dynamic Device Detection in Home Assistant\nDESCRIPTION: Implementation of automatic device detection and entity creation for new devices. The code monitors for new devices and creates corresponding sensor entities automatically when detected.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/dynamic-devices.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_entry(\n    hass: HomeAssistant,\n    entry: MyConfigEntry,\n    async_add_entities: AddEntitiesCallback,\n) -> None:\n    \"\"\"Set up My integration from a config entry.\"\"\"\n    coordinator = entry.runtime_data\n\n    known_devices: set[str] = set()\n\n    def _check_device() -> None:\n        current_devices = set(coordinator.data)\n        new_devices = current_devices - known_devices\n        if new_devices:\n            known_devices.update(new_devices)\n            async_add_entities([MySensor(coordinator, device_id) for device_id in new_devices])\n\n    _check_device()\n    entry.async_on_unload(\n        coordinator.async_add_listener(_check_device)\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Reconfigure Flow in Home Assistant Config Flow\nDESCRIPTION: Implementation of a configuration flow class that handles both initial setup and reconfiguration of a Home Assistant integration. It includes methods for validating API tokens, checking connections, and ensuring the same account is used during reconfiguration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/reconfiguration-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyConfigFlow(ConfigFlow, domain=DOMAIN):\n    \"\"\"My config flow.\"\"\"\n\n    async def async_step_reconfigure(\n        self, user_input: dict[str, Any] | None = None\n    ) -> ConfigFlowResult:\n        \"\"\"Handle reconfiguration of the integration.\"\"\"\n        errors: dict[str, str] = {}\n        if user_input:\n            client = MyClient(user_input[CONF_HOST], user_input[CONF_API_TOKEN])\n            try:\n                user_id = await client.check_connection()\n            except MyException as exception:\n                errors[\"base\"] = \"cannot_connect\"\n            else:\n                await self.async_set_unique_id(user_id)\n                self._abort_if_unique_id_mismatch(reason=\"wrong_account\")\n                return self.async_update_reload_and_abort(\n                    self._get_reconfigure_entry(),\n                    data_updates=user_input,\n                )\n        return self.async_show_form(\n            step_id=\"reconfigure\",\n            data_schema=vol.Schema(\n                {\n                    vol.Required(CONF_HOST): TextSelector(),\n                    vol.Required(CONF_API_TOKEN): TextSelector(),\n                }\n            ),\n            errors=errors,\n        )\n\n    async def async_step_user(\n        self, user_input: dict[str, Any] | None = None\n    ) -> ConfigFlowResult:\n        \"\"\"Handle a flow initialized by the user.\"\"\"\n        errors: dict[str, str] = {}\n        if user_input:\n            client = MyClient(user_input[CONF_HOST], user_input[CONF_API_TOKEN])\n            try:\n                user_id = await client.check_connection()\n            except MyException as exception:\n                errors[\"base\"] = \"cannot_connect\"\n            else:\n                await self.async_set_unique_id(user_id)\n                self._abort_if_unique_id_configured()\n                return self.async_create_entry(\n                    title=\"MyIntegration\",\n                    data=user_input,\n                )\n        return self.async_show_form(\n            step_id=\"user\",\n            data_schema=vol.Schema(\n                {\n                    vol.Required(CONF_HOST): TextSelector(),\n                    vol.Required(CONF_API_TOKEN): TextSelector(),\n                }\n            ),\n            errors=errors,\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Home Assistant Integration Manifest\nDESCRIPTION: Required manifest.json file for Home Assistant integration defining the domain and name of the integration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_component_index.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"hello_state\",\n  \"name\": \"Hello, state!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sensor Entity Properties in Python for Home Assistant\nDESCRIPTION: This code snippet shows the properties that can be implemented for a sensor entity in Home Assistant. It includes type hints and descriptions for each property, such as device_class, last_reset, native_unit_of_measurement, and native_value.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/sensor.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SensorEntity:\n    device_class: SensorDeviceClass | None = None\n    last_reset: datetime.datetime | None = None\n    native_unit_of_measurement: str | None = None\n    native_value: str | int | float | date | datetime | Decimal | None\n    options: list[str] | None = None\n    state_class: SensorStateClass | str | None = None\n    suggested_display_precision: int | None = None\n    suggested_unit_of_measurement: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Media Browsing and Playback in Python\nDESCRIPTION: Comprehensive implementation of media browsing and playback with URL support and media source integration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/media-player.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import media_source\nfrom homeassistant.components.media_player.browse_media import (\n    async_process_play_media_url,\n)\n\nclass MyMediaPlayer(MediaPlayerEntity):\n\n    async def async_browse_media(\n        self, media_content_type: str | None = None, media_content_id: str | None = None\n    ) -> BrowseMedia:\n        \"\"\"Implement the websocket media browsing helper.\"\"\"\n        return await media_source.async_browse_media(\n            self.hass,\n            media_content_id,\n            content_filter=lambda item: item.media_content_type.startswith(\"audio/\"),\n        )\n\n    async def async_play_media(\n        self,\n        media_type: str,\n        media_id: str,\n        enqueue: MediaPlayerEnqueue | None = None,\n        announce: bool | None = None, **kwargs: Any\n    ) -> None:\n        \"\"\"Play a piece of media.\"\"\"\n        if media_source.is_media_source_id(media_id):\n            media_type = MediaType.MUSIC\n            play_item = await media_source.async_resolve_media(self.hass, media_id, self.entity_id)\n            media_id = async_process_play_media_url(self.hass, play_item.url)\n\n        await self._media_player.play_url(media_id)\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests with NodeJS\nDESCRIPTION: An example of making an authenticated HTTP request to the Home Assistant API using JavaScript fetch API. It demonstrates proper error handling and how to set the authorization header.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://your.awesome.home/api/error/all', {\n  headers: { Authorization: 'Bearer ABCDEFGH' }\n}).then(function (response) {\n  if (!response.ok) {\n    return Promise.reject(response);\n  }\n  return response.text();\n}).then(function (body ) {\n  console.log(body);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Home Assistant Integration\nDESCRIPTION: Basic asynchronous integration implementation that sets up a state in Home Assistant. Creates a simple state with domain 'hello_state' and entity 'world'.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_component_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDOMAIN = \"hello_state\"\n\n\nasync def async_setup(hass, config):\n    hass.states.async_set(\"hello_state.world\", \"Paulus\")\n\n    # Return boolean to indicate that initialization was successful.\n    return True\n```\n\n----------------------------------------\n\nTITLE: Example Add-on Configuration YAML\nDESCRIPTION: Sample configuration for a Home Assistant add-on, including metadata, architecture support, networking, and filesystem mappings. This defines how the add-on integrates with Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Hello world\"\nversion: \"1.1.0\"\nslug: folder\ndescription: >\n  \"Long description\"\narch:\n  - amd64\nurl: \"website with more information about the add-on (e.g., a forum thread for support)\"\nports:\n  123/tcp: 123\nmap:\n  - type: share\n    read_only: False\n  - type: ssl\n  - type: homeassistant_config\n    read_only: False\n    path: /custom/config/path\nimage: repo/{arch}-my-custom-addon\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hello World Service Action in Python\nDESCRIPTION: Basic Python implementation of a custom Home Assistant service action that sets a state with a customizable name parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_services.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDOMAIN = \"hello_action\"\n\nATTR_NAME = \"name\"\nDEFAULT_NAME = \"World\"\n\n\ndef setup(hass, config):\n    \"\"\"Set up is called when Home Assistant is loading our component.\"\"\"\n\n    def handle_hello(call):\n        \"\"\"Handle the service action call.\"\"\"\n        name = call.data.get(ATTR_NAME, DEFAULT_NAME)\n\n        hass.states.set(\"hello_action.hello\", name)\n\n    hass.services.register(DOMAIN, \"hello\", handle_hello)\n\n    # Return boolean to indicate that initialization was successful.\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OAuth2 in Python\nDESCRIPTION: Provide a custom AbstractOAuth2Implementation in application_credentials.py by implementing the OAuth2Impl class and async_get_auth_implementation function.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/application_credentials.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.helpers import config_entry_oauth2_flow\nfrom homeassistant.components.application_credentials import AuthImplementation, AuthorizationServer, ClientCredential\n\n\nclass OAuth2Impl(AuthImplementation):\n    \"\"\"Custom OAuth2 implementation.\"\"\"\n    # ... Override AbstractOAuth2Implementation details\n\nasync def async_get_auth_implementation(\n    hass: HomeAssistant, auth_domain: str, credential: ClientCredential\n) -> config_entry_oauth2_flow.AbstractOAuth2Implementation:\n    \"\"\"Return auth implementation for a custom auth implementation.\"\"\"\n    return OAuth2Impl(\n        hass,\n        auth_domain,\n        credential,\n        AuthorizationServer(\n            authorize_url=\"https://example.com/auth\",\n            token_url=\"https://example.com/oauth2/v4/token\"\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Testing in Home Assistant Config Flow with Python\nDESCRIPTION: This code demonstrates how to test a connection in a Home Assistant config flow by making a test call to the API client. It includes error handling for connection failures and unexpected exceptions, providing appropriate error messages to the user.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/test-before-configure.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyConfigFlow(ConfigFlow, domain=DOMAIN):\n    \"\"\"My config flow.\"\"\"\n\n    async def async_step_user(\n        self, user_input: dict[str, Any] | None = None\n    ) -> ConfigFlowResult:\n        \"\"\"Handle a flow initialized by the user.\"\"\"\n        errors: dict[str, str] = {}\n        if user_input:\n            client = MyClient(user_input[CONF_HOST])\n            try:\n                await client.get_data()\n            except MyException:\n                errors[\"base\"] = \"cannot_connect\"\n            except Exception:  # noqa: BLE001\n                LOGGER.exception(\"Unexpected exception\")\n                errors[\"base\"] = \"unknown\"\n            else:\n                return self.async_create_entry(\n                    title=\"MyIntegration\",\n                    data=user_input,\n                )\n        return self.async_show_form(\n            step_id=\"user\",\n            data_schema=vol.Schema({vol.Required(CONF_HOST): TextSelector()}),\n            errors=errors,\n        )\n```\n\n----------------------------------------\n\nTITLE: Using the ExampleHub API Library\nDESCRIPTION: Example code showing how to use the ExampleHubAPI and Light classes to interact with the API, including getting all lights, displaying their states, and controlling a light.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_data_models.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport aiohttp\n\nfrom my_package import Auth, ExampleHubAPI\n\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        auth = Auth(session, \"http://example.com/api\", \"secret_access_token\")\n        api = ExampleHubAPI(auth)\n\n        lights = await api.async_get_lights()\n\n        # Print light states\n        for light in lights:\n            print(f\"The light {light.name} is {light.is_on}\")\n\n        # Control a light.\n        light = lights[0]\n        await light.async_control(not light.is_on)\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Documenting Integration Configuration Options with configuration_basic Tag in Markdown\nDESCRIPTION: Example implementation showing how to document integration configuration options using the configuration_basic tag. This snippet includes option flow and documents two configuration options: Country code and Timeframe.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-configuration-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include integrations/option_flow.md %}\n\n{% configuration_basic %}\nCountry code:\n  description: You can specify the country code (NL or BE) of the country to display on the camera.\nTimeframe:\n  description: Minutes to look ahead for precipitation forecast sensors (minimum 5, maximum 120).\n{% endconfiguration_basic %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Flow with Unique Data Validation in Python\nDESCRIPTION: Example implementation of a config flow that validates configuration uniqueness based on specific data fields (host and password). The flow checks if any existing entries match the provided host before allowing setup.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/unique-config-entry.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def async_step_user(\n    self, user_input: dict[str, Any] | None = None\n) -> ConfigFlowResult:\n    \"\"\"Handle a flow initialized by the user.\"\"\"\n    errors: dict[str, str] = {}\n    if user_input:\n        self._async_abort_entries_match({CONF_HOST: user_input[CONF_HOST]})\n        client = MyClient(user_input[CONF_HOST], user_input[CONF_PASSWORD])\n        try:\n            await client.get_data()\n        except MyException:\n            errors[\"base\"] = \"cannot_connect\"\n        except Exception:  # noqa: BLE001\n            LOGGER.exception(\"Unexpected exception\")\n            errors[\"base\"] = \"unknown\"\n        else:\n            return self.async_create_entry(\n                title=\"MyIntegration\",\n                data=user_input,\n            )\n    return self.async_show_form(\n        step_id=\"user\",\n        data_schema=vol.Schema(\n            {\n                vol.Required(CONF_HOST): TextSelector(),\n                vol.Required(CONF_PASSWORD): TextSelector(),\n            }\n        ),\n        errors=errors,\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Diagnostics with Data Redaction in Home Assistant\nDESCRIPTION: This code snippet demonstrates how to implement diagnostics for a Home Assistant integration. It defines sensitive configuration fields to redact and implements an async function that returns diagnostics data including the redacted configuration and runtime data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/diagnostics.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTO_REDACT = [\n    CONF_API_KEY,\n    CONF_LATITUDE,\n    CONF_LONGITUDE,\n]\n\nasync def async_get_config_entry_diagnostics(\n    hass: HomeAssistant, entry: MyConfigEntry\n) -> dict[str, Any]:\n    \"\"\"Return diagnostics for a config entry.\"\"\"\n\n    return {\n        \"entry_data\": async_redact_data(entry.data, TO_REDACT),\n        \"data\": entry.runtime_data.data,\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Toggle Method in Python\nDESCRIPTION: Example code for implementing the toggle and async_toggle methods in a custom Remote entity. These methods toggle the state of a device, with an optional activity parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/remote.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyRemote(RemoteEntity):\n\n    def toggle(self, activity: str = None, **kwargs):\n         \"\"\"Toggle a device.\"\"\"\n\n    async def async_toggle(self, activity: str = None, **kwargs):\n         \"\"\"Toggle a device.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Reauthentication in Home Assistant Config Flow\nDESCRIPTION: Example implementation of a configuration flow with reauthentication support for Home Assistant integrations. This code demonstrates how to handle cases where a user needs to update their API token, including validation of the new credentials and updating the configuration entry.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/reauthentication-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyConfigFlow(ConfigFlow, domain=DOMAIN):\n    \"\"\"My config flow.\"\"\"\n    \n    host: str\n\n    async def async_step_reauth(\n        self, entry_data: Mapping[str, Any]\n    ) -> ConfigFlowResult:\n        \"\"\"Perform reauthentication upon an API authentication error.\"\"\"\n        self.host = entry_data[CONF_HOST]\n        return await self.async_step_reauth_confirm()\n\n    async def async_step_reauth_confirm(\n        self, user_input: dict[str, Any] | None = None\n    ) -> ConfigFlowResult:\n        \"\"\"Confirm reauthentication dialog.\"\"\"\n        errors: dict[str, str] = {}\n        if user_input:\n            client = MyClient(self.host, user_input[CONF_API_TOKEN])\n            try:\n                user_id = await client.check_connection()\n            except MyException as exception:\n                errors[\"base\"] = \"cannot_connect\"\n            else:\n                await self.async_set_unique_id(user_id)\n                self._abort_if_unique_id_mismatch(reason=\"wrong_account\")\n                return self.async_update_reload_and_abort(\n                    self._get_reauth_entry(),\n                    data_updates={CONF_API_TOKEN: user_input[CONF_API_TOKEN]},\n                )\n        return self.async_show_form(\n            step_id=\"reauth_confirm\",\n            data_schema=vol.Schema({vol.Required(CONF_API_TOKEN): TextSelector()}),\n            errors=errors,\n        )\n\n    async def async_step_user(\n        self, user_input: dict[str, Any] | None = None\n    ) -> ConfigFlowResult:\n        \"\"\"Handle a flow initialized by the user.\"\"\"\n        errors: dict[str, str] = {}\n        if user_input:\n            client = MyClient(user_input[CONF_HOST], user_input[CONF_API_TOKEN])\n            try:\n                user_id = await client.check_connection()\n            except MyException as exception:\n                errors[\"base\"] = \"cannot_connect\"\n            else:\n                await self.async_set_unique_id(user_id)\n                self._abort_if_unique_id_configured()\n                return self.async_create_entry(\n                    title=\"MyIntegration\",\n                    data=user_input,\n                )\n        return self.async_show_form(\n            step_id=\"user\",\n            data_schema=vol.Schema(\n                {\n                    vol.Required(CONF_HOST): TextSelector(),\n                    vol.Required(CONF_API_TOKEN): TextSelector(),\n                }\n            ),\n            errors=errors,\n        )\n```\n\n----------------------------------------\n\nTITLE: Extending ConfigEntry Type and Using runtime_data in Home Assistant Integration\nDESCRIPTION: This code demonstrates how to extend the ConfigEntry type with a custom client type and use the runtime_data attribute to store an instance of the client. It shows the proper setup for a Home Assistant integration with type hints and runtime data storage.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/runtime-data.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntype MyIntegrationConfigEntry = ConfigEntry[MyClient]\n\n\nasync def async_setup_entry(hass: HomeAssistant, entry: MyIntegrationConfigEntry) -> bool:\n    \"\"\"Set up my integration from a config entry.\"\"\"\n\n    client = MyClient(entry.data[CONF_HOST])\n\n    entry.runtime_data = client\n\n    await hass.config_entries.async_forward_entry_setups(entry, PLATFORMS)\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementing a Temperature Sensor Entity with Device Class in Home Assistant\nDESCRIPTION: This code snippet demonstrates how to implement a temperature sensor entity that properly uses the temperature device class. The entity is configured with has_entity_name=True for automatic naming and includes device_info for proper device registry integration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-device-class.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyTemperatureSensor(SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n\n    _attr_has_entity_name = True\n    _attr_device_class = SensorDeviceClass.TEMPERATURE\n\n    def __init__(self, device: Device) -> None:\n        \"\"\"Initialize the sensor.\"\"\"\n        self._attr_device_info = DeviceInfo(\n            identifiers={(DOMAIN, device.id)},\n            name=\"My device\",\n        )\n```\n\n----------------------------------------\n\nTITLE: Manual Device Registration in Home Assistant (Python)\nDESCRIPTION: This code shows how to manually register a device in Home Assistant's device registry. This approach is useful for components that need to register devices without corresponding entities, such as hubs that communicate with other devices.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_registry_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Inside a component\nfrom homeassistant.helpers import device_registry as dr\n\ndevice_registry = dr.async_get(hass)\n\ndevice_registry.async_get_or_create(\n    config_entry_id=entry.entry_id,\n    connections={(dr.CONNECTION_NETWORK_MAC, config.mac)},\n    identifiers={(DOMAIN, config.bridgeid)},\n    manufacturer=\"Signify\",\n    suggested_area=\"Kitchen\",\n    name=config.name,\n    model=config.modelname,\n    model_id=config.modelid,\n    sw_version=config.swversion,\n    hw_version=config.hwversion,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sync Authentication Class in Python\nDESCRIPTION: This snippet shows how to create a synchronous authentication class using the requests library. It handles authenticated requests by adding an authorization header to each request.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_auth.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\n\nclass Auth:\n    \"\"\"Class to make authenticated requests.\"\"\"\n\n    def __init__(self, host: str, access_token: str):\n        \"\"\"Initialize the auth.\"\"\"\n        self.host = host\n        self.access_token = access_token\n\n    def request(self, method: str, path: str, **kwargs) -> requests.Response:\n        \"\"\"Make a request.\"\"\"\n        if headers := kwargs.pop(\"headers\", {}):\n            headers = dict(headers)\n        headers[\"authorization\"] = self.access_token\n\n        return requests.request(\n            method, f\"{self.host}/{path}\", **kwargs, headers=headers,\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket API for Wake Word Interception in JSON\nDESCRIPTION: Demonstrates the JSON structure for intercepting wake word detections via WebSocket API in Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/assist-satellite.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"assist_satellite/intercept_wake_word\",\n  \"entity_id\": \"assist_satellite.living_room\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"wake_word_phrase\": \"okay nabu\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _async_setup in DataUpdateCoordinator for Home Assistant\nDESCRIPTION: This snippet demonstrates how to implement the _async_setup method in a custom DataUpdateCoordinator class. It shows initialization, setup, and update methods, including handling of prerequisite data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-08-05-coordinator_async_setup.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyUpdateCoordinator(DataUpdateCoordinator[MyDataType]):\n\n    prereq_data: SomeData\n\n    def __init__(\n        self,\n        hass: HomeAssistant,\n    ) -> None:\n        \"\"\"Initialize coordinator.\"\"\"\n        super().__init__(hass, _LOGGER, name=DOMAIN, update_interval=SCAN_INTERVAL)\n        self.my_api = MyApi()\n\n\n    async def _async_setup(self) -> None:\n        \"\"\"Do initialization logic.\"\"\"\n        self.prereq_data = await self.my_api.get_initial_data()\n\n    async def _async_update_data(self) -> MyDataType:\n        \"\"\"Do the usual update\"\"\"\n        return await self.my_api.update(self.prereq_data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Flow in Python for Home Assistant Integration\nDESCRIPTION: This code snippet demonstrates how to create a basic config flow for a Home Assistant integration. It includes a user step that prompts for a host input and creates a config entry.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/config-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyConfigFlow(ConfigFlow, domain=DOMAIN):\n    \"\"\"My config flow.\"\"\"\n\n    async def async_step_user(\n        self, user_input: dict[str, Any] | None = None\n    ) -> ConfigFlowResult:\n        \"\"\"Handle a flow initialized by the user.\"\"\"\n        errors: dict[str, str] = {}\n        if user_input:\n            return self.async_create_entry(\n                title=\"MyIntegration\",\n                data=user_input,\n            )\n        return self.async_show_form(\n            step_id=\"user\",\n            data_schema=vol.Schema({vol.Required(CONF_HOST): str}),\n            errors=errors,\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Turn On Method in Python\nDESCRIPTION: Example code for implementing the turn_on and async_turn_on methods in a custom Remote entity. These methods send power on commands to the device, with an optional activity parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/remote.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyRemote(RemoteEntity):\n\n    def turn_on(self, activity: str = None, **kwargs):\n         \"\"\"Send the power on command.\"\"\"\n\n    async def async_turn_on(self, activity: str = None, **kwargs):\n         \"\"\"Send the power on command.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing System Health Registration in Python\nDESCRIPTION: This code shows how to create the basic structure for a system_health.py file with the async_register method that registers the info callback. This is the foundation for providing system health information.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration_system_health.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Provide info to system health.\"\"\"\n\nfrom homeassistant.components import system_health\nfrom homeassistant.core import HomeAssistant, callback\n\n@callback\ndef async_register(hass: HomeAssistant, register: system_health.SystemHealthRegistration) -> None:\n    \"\"\"Register system health callbacks.\"\"\"\n    register.async_register_info(system_health_info)\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Data Storage in Home Assistant Integration\nDESCRIPTION: This snippet demonstrates how to set up runtime data storage using 'entry.runtime_data' in a Home Assistant integration. It includes type alias definition, dataclass creation, and the async_setup_entry function implementation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-04-30-store-runtime-data-inside-config-entry.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# <integration>/__init__.py\n\n# The type alias needs to be suffixed with 'ConfigEntry'\ntype MyConfigEntry = ConfigEntry[MyData]\n\n@dataclass\nclass MyData:\n    client: MyClient\n    other_data: dict[str, Any]\n\nasync def async_setup_entry(\n    hass: HomeAssistant,\n    entry: MyConfigEntry,  # use type alias instead of ConfigEntry\n) -> bool:\n    client = MyClient(...)\n    \n    # Assign the runtime_data\n    entry.runtime_data = MyData(client, {...})\n```\n\n----------------------------------------\n\nTITLE: Implementing ActiveBluetoothDataUpdateCoordinator in Python for Home Assistant\nDESCRIPTION: This code snippet defines an ExampleActiveBluetoothDataUpdateCoordinator class that extends ActiveBluetoothDataUpdateCoordinator. It handles active Bluetooth data updates, allowing for polling and active connections to the device when needed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/bluetooth_fetching_data.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom typing import TYPE_CHECKING\n\nfrom homeassistant.components import bluetooth\nfrom homeassistant.components.bluetooth.active_update_coordinator import (\n    ActiveBluetoothDataUpdateCoordinator,\n)\nfrom homeassistant.core import CoreState, HomeAssistant, callback\n\nif TYPE_CHECKING:\n    from bleak.backends.device import BLEDevice\n\n\nclass ExampleActiveBluetoothDataUpdateCoordinator(\n    ActiveBluetoothDataUpdateCoordinator[None]\n):\n    \"\"\"Class to manage fetching example data.\"\"\"\n\n    def __init__(\n        self,\n        hass: HomeAssistant,\n        logger: logging.Logger,\n        ble_device: BLEDevice,\n        device: YourLibDevice,\n    ) -> None:\n        \"\"\"Initialize example data coordinator.\"\"\"\n        super().__init__(\n            hass=hass,\n            logger=logger,\n            address=ble_device.address,\n            needs_poll_method=self._needs_poll,\n            poll_method=self._async_update,\n            mode=bluetooth.BluetoothScanningMode.ACTIVE,\n            connectable=True,\n        )\n        self.device = device\n\n    @callback\n    def _needs_poll(\n        self,\n        service_info: bluetooth.BluetoothServiceInfoBleak,\n        seconds_since_last_poll: float | None,\n    ) -> bool:\n        # Only poll if hass is running, we need to poll,\n        # and we actually have a way to connect to the device\n        return (\n            self.hass.state == CoreState.running\n            and self.device.poll_needed(seconds_since_last_poll)\n            and bool(\n                bluetooth.async_ble_device_from_address(\n                    self.hass, service_info.device.address, connectable=True\n                )\n            )\n        )\n\n    async def _async_update(\n        self, service_info: bluetooth.BluetoothServiceInfoBleak\n    ) -> None:\n        \"\"\"Poll the device.\"\"\"\n\n    @callback\n    def _async_handle_unavailable(\n        self, service_info: bluetooth.BluetoothServiceInfoBleak\n    ) -> None:\n        \"\"\"Handle the device going unavailable.\"\"\"\n\n    @callback\n    def _async_handle_bluetooth_event(\n        self,\n        service_info: bluetooth.BluetoothServiceInfoBleak,\n        change: bluetooth.BluetoothChange,\n    ) -> None:\n        \"\"\"Handle a Bluetooth event.\"\"\"\n        # Your device should process incoming advertisement data\n```\n\n----------------------------------------\n\nTITLE: Managing Entity Availability in Home Assistant async_update Method\nDESCRIPTION: Example of handling entity availability directly in the async_update method. It sets the entity as unavailable when data fetching fails, and updates the entity state when successful.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-unavailable.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MySensor(SensorEntity):\n\n    async def async_update(self) -> None:\n        try:\n            data = await self.client.get_data()\n        except MyException as ex:\n            self._attr_available = False\n        else:\n            self._attr_available = True\n            self._attr_native_value = data.value\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Authentication Class in Python\nDESCRIPTION: This snippet demonstrates how to create an asynchronous authentication class using aiohttp. It handles authenticated requests by adding an authorization header to each request.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_auth.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import ClientSession, ClientResponse\n\n\nclass Auth:\n    \"\"\"Class to make authenticated requests.\"\"\"\n\n    def __init__(self, websession: ClientSession, host: str, access_token: str):\n        \"\"\"Initialize the auth.\"\"\"\n        self.websession = websession\n        self.host = host\n        self.access_token = access_token\n\n    async def request(self, method: str, path: str, **kwargs) -> ClientResponse:\n        \"\"\"Make a request.\"\"\"\n        if headers := kwargs.pop(\"headers\", {}):\n            headers = dict(headers)\n        headers[\"authorization\"] = self.access_token\n\n        return await self.websession.request(\n            method, f\"{self.host}/{path}\", **kwargs, headers=headers,\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Turn On Methods for Light Entities in Python\nDESCRIPTION: Code snippet showing the implementation of both synchronous and asynchronous turn_on methods for a Home Assistant light entity. These methods are responsible for turning the light device on with specified parameters.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/light.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyLightEntity(LightEntity):\n    def turn_on(self, **kwargs):\n        \"\"\"Turn the device on.\"\"\"\n\n    async def async_turn_on(self, **kwargs):\n        \"\"\"Turn device on.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Authentication Request in Home Assistant WebSocket API\nDESCRIPTION: JSON structure for authenticating with the WebSocket API using an access token. This is sent after receiving the auth_required message from the server.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"auth\",\n  \"access_token\": \"ABCDEFGHIJKLMNOPQ\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing async_delete_event Method for Calendar Entity\nDESCRIPTION: Method to delete calendar events, supporting deletion of single events, specific instances of recurring events, or entire recurring series. Requires DELETE_EVENT feature flag.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/calendar.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.calendar import CalendarEntity\n\n\nclass MyCalendar(CalendarEntity):\n\n    async def async_delete_event(\n        self,\n        uid: str,\n        recurrence_id: str | None = None,\n        recurrence_range: str | None = None,\n    ) -> None:\n        \"\"\"Delete an event on the calendar.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Bluetooth Devices and Advertisement Data By Adapter in Python\nDESCRIPTION: This code shows how to access the list of Bluetooth devices and advertisement data received by each adapter independently. It returns BluetoothScannerDevice objects that contain the device, advertisement data, and scanner information.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\ndevice = bluetooth.async_scanner_devices_by_address(hass, \"44:44:33:11:23:42\", connectable=True)\n# device.ble_device is a bleak `BLEDevice`\n# device.advertisement is a bleak `AdvertisementData`\n# device.scanner is the scanner that found the device\n```\n\n----------------------------------------\n\nTITLE: Implementing and Registering a Custom LLM API in Home Assistant\nDESCRIPTION: This snippet demonstrates how to create a custom API class that extends the LLM API in Home Assistant. It shows the implementation of MyAPI class with async_get_api_instance method that returns an APIInstance with tools, and how to register this API with Home Assistant so it's available to LLMs.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/llm/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.config_entries import ConfigEntry\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.helper import llm\nfrom homeassistant.util import dt as dt_util\nfrom homeassistant.util.json import JsonObjectType\n\n\nclass MyAPI(API):\n    \"\"\"My own API for LLMs.\"\"\"\n\n    async def async_get_api_instance(self, llm_context: LLMContext) -> APIInstance:\n        \"\"\"Return the instance of the API.\"\"\"\n        return APIInstance(\n            api=self,\n            api_prompt=\"Call the tools to fetch data from Home Assistant.\",\n            llm_context=llm_context,\n            tools=[TimeTool()],\n        )\n\n\nasync def async_setup_api(hass: HomeAssistant, entry: ConfigEntry) -> None:\n    \"\"\"Register the API with Home Assistant.\"\"\"\n    # If the API is associated with a Config Entry, the LLM API must be\n    # unregistered when the config entry is unloaded.\n    unreg = llm.async_register_api(\n        hass,\n        MyAPI(hass, f\"my_unique_key-{entry.entry_id}\", entry.title)\n    )\n    entry.async_on_unload(unreg)\n```\n\n----------------------------------------\n\nTITLE: Updating ConfigEntry with async_update_entry in Home Assistant\nDESCRIPTION: Example showing how to properly modify ConfigEntry attributes using hass.config_entries.async_update_entry instead of direct attribute assignment, which is deprecated in Home Assistant 2024.3 and will fail in version 2024.9.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-02-12-async_update_entry.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhass.config_entries.async_update_entry\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Entity Methods in Python\nDESCRIPTION: Example implementation of an image entity class showing the two alternative methods for returning image data. The class can implement either image() for synchronous returns or async_image() for asynchronous operations. Both methods should return image bytes or None.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/image.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyImage(ImageEntity):\n    # Implement one of these methods.\n\n    def image(self) -> bytes | None:\n        \"\"\"Return bytes of image.\"\"\"\n\n    async def async_image(self) -> bytes | None:\n        \"\"\"Return bytes of image.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Extending a Home Assistant Entity Class in Python\nDESCRIPTION: This code example shows how to properly extend an entity class (Light) for creating a custom platform entity (HueLight) in Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_platform_code_review.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.light import Light\n\n\nclass HueLight(Light):\n    \"\"\"Hue light component.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Converting Numeric Range Fan Speeds to Percentages\nDESCRIPTION: Utility code for converting between a numeric range of fan speeds and percentage values. This is useful for integrations that work with numeric speed ranges rather than direct percentages.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/fan.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.util.percentage import ranged_value_to_percentage, percentage_to_ranged_value\nfrom homeassistant.util.scaling import int_states_in_range\n\nSPEED_RANGE = (1, 255)  # off is not included\n\npercentage = ranged_value_to_percentage(SPEED_RANGE, 127)\n\nvalue_in_range = math.ceil(percentage_to_ranged_value(SPEED_RANGE, 50))\n\n...\n\n    @property\n    def percentage(self) -> Optional[int]:\n        \"\"\"Return the current speed percentage.\"\"\"\n        return ranged_value_to_percentage(SPEED_RANGE, current_speed)\n\n    @property\n    def speed_count(self) -> int:\n        \"\"\"Return the number of speeds the fan supports.\"\"\"\n        return int_states_in_range(SPEED_RANGE)\n```\n\n----------------------------------------\n\nTITLE: Defining a WebSocket Command Schema in Python for Home Assistant\nDESCRIPTION: This snippet shows how to define a simple WebSocket command schema and handler in Python. It includes defining the message type ('frontend/get_panels') and schema with required and optional fields, along with a callback function to handle the command and send a result back to the connection.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/extending/websocket-api.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import websocket_api\n\n@websocket_api.websocket_command(\n    {\n        vol.Required(\"type\"): \"frontend/get_panels\",\n        vol.Optional(\"preload_panels\"): bool,\n    }\n)\n@callback\ndef ws_get_panels(\n    hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict\n) -> None:\n    \"\"\"Handle the websocket command.\"\"\"\n    panels = ...\n    connection.send_result(msg[\"id\"], {\"panels\": panels})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tile Feature in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a custom tile feature for a button entity in the tile card. It specifies the card type as 'tile', sets the entity to 'button.push', and adds a custom feature of type 'button-press-tile-feature'.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-02-28-custom-tile-features.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: tile\nentity: button.push\nfeatures:\n  - type: custom:button-press-tile-feature\n```\n\n----------------------------------------\n\nTITLE: Implementing Async WebSocket Commands with I/O in Home Assistant\nDESCRIPTION: This code demonstrates how to create an asynchronous WebSocket command handler that performs I/O operations. It uses the @websocket_api.async_response decorator to handle delayed responses, and includes error handling for cases when the entity doesn't exist or when thumbnail fetching fails.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/extending/websocket-api.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import websocket_api\n\n@websocket_api.websocket_command(\n    {\n        vol.Required(\"type\"): \"camera/get_thumbnail\",\n        vol.Optional(\"entity_id\"): str,\n    }\n)\n@websocket_api.async_response\nasync def ws_handle_thumbnail(\n    hass: HomeAssistant, connection: ActiveConnection, msg: dict\n) -> None:\n    \"\"\"Handle get media player cover command.\"\"\"\n    # Retrieve media player using passed in entity id.\n    player = hass.data[DOMAIN].get_entity(msg[\"entity_id\"])\n\n    # If the player does not exist, send an error message.\n    if player is None:\n        connection.send_error(\n                msg[\"id\"], \"entity_not_found\", \"Entity not found\"\n        )\n        return\n\n    data, content_type = await player.async_get_media_image()\n\n    # No media player thumbnail available\n    if data is None:\n        connection.send_error(\n            msg[\"id\"], \"thumbnail_fetch_failed\", \"Failed to fetch thumbnail\"\n        )\n        return\n\n    connection.send_result(\n        msg[\"id\"],\n        {\n            \"content_type\": content_type,\n            \"content\": base64.b64encode(data).decode(\"utf-8\"),\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Image Methods in Home Assistant\nDESCRIPTION: Code showing how to implement camera_image or async_camera_image methods for a custom camera entity. These methods return bytes of the camera image and support optional width and height parameters for scaling.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/camera.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCamera(Camera):\n    # Implement one of these methods.\n\n    def camera_image(\n        self, width: int | None = None, height: int | None = None\n    ) -> bytes | None:\n        \"\"\"Return bytes of camera image.\"\"\"\n        raise NotImplementedError()\n\n    async def async_camera_image(\n        self, width: int | None = None, height: int | None = None\n    ) -> bytes | None:\n        \"\"\"Return bytes of camera image.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Subentry Flow Handlers\nDESCRIPTION: Example implementation of subentry flows for managing configurable sub-components within an integration, such as location-based weather forecasts. Shows both main config flow and subentry flow handler setup.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):\n    \"\"\"Config flow for Example integration.\"\"\"\n\n    ...\n\n    @classmethod\n    @callback\n    def async_get_supported_subentry_types(\n        cls, config_entry: ConfigEntry\n    ) -> dict[str, type[ConfigSubentryFlow]]:\n        \"\"\"Return subentries supported by this integration.\"\"\"\n        return {\"location\": LocationSubentryFlowHandler}\n\nclass LocationSubentryFlowHandler(ConfigSubentryFlow):\n    \"\"\"Handle subentry flow for adding and modifying a location.\"\"\"\n\n    async def async_step_user(\n        self, user_input: dict[str, Any] | None = None\n    ) -> SubentryFlowResult:\n        \"\"\"User flow to add a new location.\"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Service Description YAML Configuration\nDESCRIPTION: Comprehensive example of a services.yaml file showing how to describe service actions including fields, targets, and selectors.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_services.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Example services.yaml entry\n\n# Service ID\nset_speed:\n  target:\n    entity:\n      domain: fan\n      supported_features:\n        - fan.FanEntityFeature.SET_SPEED\n        - - fan.FanEntityFeature.SET_SPEED\n          - fan.FanEntityFeature.OSCILLATE\n  fields:\n    speed:\n      required: true\n      advanced: true\n      example: \"low\"\n      default: \"high\"\n      selector:\n        select:\n          translation_key: \"fan_speed\"\n          options:\n            - \"off\"\n            - \"low\"\n            - \"medium\"\n            - \"high\"\n    advanced_fields:\n      collapsed: true\n      fields:\n        speed_pct:\n          selector:\n            number:\n              min: 0\n              max: 100\n```\n\n----------------------------------------\n\nTITLE: Recommended Config Entry Platform Setup Call\nDESCRIPTION: New recommended async method for setting up config entry platforms that prevents reload conflicts during setup.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-07-08-config_entry_forwards.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhass.config_entries.async_forward_entry_setups\n```\n\n----------------------------------------\n\nTITLE: Implementing async_step_init Method for LoginFlow in Python\nDESCRIPTION: This snippet demonstrates the pattern for implementing the async_step_init method in the LoginFlow class for authentication providers. It handles the login form, validates user input, and either shows the form again with errors or finishes the authentication process.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_auth_provider.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_step_init(self, user_input=None):\n    if user_input is None:\n        return self.async_show_form(\n            step_id=\"init\", data_schema=\"some schema to construct ui form\"\n        )\n    if is_invalid(user_input):\n        return self.async_show_form(step_id=\"init\", errors=errors)\n    return await self.async_finish(user_input)\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Configuration Translations in Home Assistant\nDESCRIPTION: Example of a strings.json file for the Philips Hue Bridge integration that defines translations for config flow handlers under the 'config' key, including steps, error messages, and abort reasons.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Philips Hue Bridge\",\n  \"config\": {\n    \"step\": {\n      \"init\": {\n        \"title\": \"Pick Hue bridge\",\n        \"data\": {\n          \"host\": \"Host\"\n        }\n      },\n      \"link\": {\n        \"title\": \"Link Hub\",\n        \"description\": \"Press the button on the bridge to register Philips Hue with Home Assistant.\\n\\n![Location of button on bridge](/static/images/config_philips_hue.jpg)\"\n      }\n    },\n    \"error\": {\n      \"register_failed\": \"Failed to register, please try again\",\n      \"linking\": \"Unknown linking error occurred.\"\n    },\n    \"abort\": {\n      \"discover_timeout\": \"Unable to discover Hue bridges\",\n      \"no_bridges\": \"No Philips Hue bridges discovered\",\n      \"all_configured\": \"All Philips Hue bridges are already configured\",\n      \"unknown\": \"Unknown error occurred\",\n      \"cannot_connect\": \"Unable to connect to the bridge\",\n      \"already_configured\": \"Bridge is already configured\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Entity Service Action Function in Home Assistant\nDESCRIPTION: Example showing how to use a custom function instead of a method name when registering an entity service action. This provides more control over service call handling.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_services.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def custom_set_sleep_timer(entity, service_call):\n    await entity.set_sleep_timer(service_call.data['sleep_time'])\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailability Logging in a Coordinator-based Home Assistant Integration\nDESCRIPTION: Shows how to implement logging when a device becomes unavailable in a coordinator-based integration. The coordinator raises UpdateFailed exception when the device or service is unavailable, which triggers the built-in logging functionality.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/log-when-unavailable.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCoordinator(DataUpdateCoordinator[MyData]):\n    \"\"\"Class to manage fetching data.\"\"\"\n\n    def __init__(self, hass: HomeAssistant, client: MyClient) -> None:\n        \"\"\"Initialize coordinator.\"\"\"\n        super().__init__(\n            hass,\n            logger=LOGGER,\n            name=DOMAIN,\n            update_interval=timedelta(minutes=1),\n        )\n        self.client = client\n    \n    async def _async_update_data(self) -> MyData:\n        try:\n            return await self.client.get_data()\n        except MyException as ex:\n            raise UpdateFailed(f\"The device is unavailable: {ex}\")\n```\n\n----------------------------------------\n\nTITLE: Config Update and Reload in Home Assistant\nDESCRIPTION: Method for updating configuration with support for merging data updates with existing data. Includes new parameter data_updates for safer data handling and specific messaging for reconfigure flows.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-10-21-reauth-reconfigure-helpers.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.async_update_reload_and_abort(data_updates=updates)\n```\n\n----------------------------------------\n\nTITLE: Raising Repair Issue for Outdated Service Version in Home Assistant Integration (Python)\nDESCRIPTION: This code snippet demonstrates how to raise a repair issue in a Home Assistant integration when the version of a locally hosted service is outdated. It checks the service version on setup and creates a non-fixable repair issue if the version is below the minimum required.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/repair-issues.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_entry(hass: HomeAssistant, entry: MyConfigEntry) -> None:\n    \"\"\"Set up the integration from a config entry.\"\"\"\n    client = MyClient(entry.data[CONF_HOST])\n    version = await client.get_version()\n    if version < MINIMUM_VERSION:\n        ir.async_create_issue(\n            hass,\n            DOMAIN,\n            \"outdated_version\",\n            is_fixable=False,\n            issue_domain=DOMAIN,\n            severity=ir.IssueSeverity.ERROR,\n            translation_key=\"outdated_version\",\n        )\n        raise ConfigEntryError(\n            \"Version of MyService is %s, which is lower than minimum version %s\",\n            version,\n            MINIMUM_VERSION,\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Sync OAuth2 Authentication Class in Python\nDESCRIPTION: This snippet demonstrates a synchronous OAuth2 authentication class using requests_oauthlib. It handles token refresh and allows for custom token update logic.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_auth.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Union, Callable, Dict\n\nfrom requests import Response\nfrom requests_oauthlib import OAuth2Session\nfrom oauthlib.oauth2 import TokenExpiredError\n\n\nclass Auth:\n    def __init__(\n        self,\n        host: str,\n        token: Optional[Dict[str, str]] = None,\n        client_id: str = None,\n        client_secret: str = None,\n        token_updater: Optional[Callable[[str], None]] = None,\n    ):\n        self.host = host\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.token_updater = token_updater\n\n        extra = {\"client_id\": self.client_id, \"client_secret\": self.client_secret}\n\n        self._oauth = OAuth2Session(\n            auto_refresh_kwargs=extra,\n            client_id=client_id,\n            token=token,\n            token_updater=token_updater,\n        )\n\n    def refresh_tokens(self) -> Dict[str, Union[str, int]]:\n        \"\"\"Refresh and return new tokens.\"\"\"\n        token = self._oauth.refresh_token(f\"{self.host}/auth/token\")\n\n        if self.token_updater is not None:\n            self.token_updater(token)\n\n        return token\n\n    def request(self, method: str, path: str, **kwargs) -> Response:\n        \"\"\"Make a request.\n\n        We don't use the built-in token refresh mechanism of OAuth2 session because\n        we want to allow overriding the token refresh logic.\n        \"\"\"\n        url = f\"{self.host}/{path}\"\n        try:\n            return getattr(self._oauth, method)(url, **kwargs)\n        except TokenExpiredError:\n            self._oauth.token = self.refresh_tokens()\n\n            return getattr(self._oauth, method)(url, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Update Coordinator in Home Assistant\nDESCRIPTION: Example implementation of a coordinator class that manages data fetching for a Home Assistant integration. The coordinator centralizes data updates and is stored in coordinator.py, using a fixed update interval of 1 minute.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/common-modules.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCoordinator(DataUpdateCoordinator[MyData]):\n    \"\"\"Class to manage fetching data.\"\"\"\n\n    def __init__(self, hass: HomeAssistant, client: MyClient) -> None:\n        \"\"\"Initialize coordinator.\"\"\"\n        super().__init__(\n            hass,\n            logger=LOGGER,\n            name=DOMAIN,\n            update_interval=timedelta(minutes=1),\n        )\n        self.client = client\n```\n\n----------------------------------------\n\nTITLE: Implementing Unique ID for a Temperature Sensor in Home Assistant\nDESCRIPTION: Example of implementing a unique ID for a temperature sensor in Home Assistant. The unique ID is created by combining the device_id with '_temperature' to ensure it's unique within the integration domain and platform domain.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-unique-id.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySensor(SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n\n    def __init__(self, device_id: str) -> None:\n        \"\"\"Initialize the sensor.\"\"\"\n        self._attr_unique_id = f\"{device_id}_temperature\"\n```\n\n----------------------------------------\n\nTITLE: Writing a Unit Test with JUnit 5 and MockK in Kotlin for Android\nDESCRIPTION: This snippet demonstrates how to write a well-structured unit test using JUnit 5 and MockK for an Android project. It tests a user service's getUserDetails method, mocking the userRepository dependency.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/testing/unit_testing.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun `Given a valid user ID when fetching user details then return user data`() {\n    // Given\n    val userId = \"12345\"\n    val expectedUser = User(id = userId, name = \"John Doe\")\n    every { userRepository.getUser(userId) } returns expectedUser\n\n    // When\n    val result = userService.getUserDetails(userId)\n\n    // Then\n    assertEquals(expectedUser, result)\n}\n```\n\n----------------------------------------\n\nTITLE: Using recommended async_track_state_change_event in Home Assistant Python\nDESCRIPTION: Example showing how to use the recommended async_track_state_change_event method which improves performance. This approach directly handles state change events for specific entities without creating unnecessary listeners.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-04-13-deprecate_async_track_state_change.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import Event, EventStateChangedData, callback\nfrom homeassistant.helpers.event import async_track_state_change_event\n\n@callback\ndef _async_on_change(event: Event[EventStateChangedData]) -> None:\n    entity_id = event.data[\"entity_id\"]\n    old_state = event.data[\"old_state\"]\n    new_state = event.data[\"new_state\"]\n    ...\n\nunsub = async_track_state_change_event(hass, \"sensor.one\", _async_on_change)\nunsub()\n```\n\n----------------------------------------\n\nTITLE: Handling Offline Devices with ConfigEntryNotReady in async_setup_entry\nDESCRIPTION: This snippet demonstrates how to handle offline or unavailable devices in the async_setup_entry function of a Home Assistant integration. It raises a ConfigEntryNotReady exception when a timeout occurs during device setup, allowing Home Assistant to automatically retry the setup later.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/integration_setup_failures.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n    \"\"\"Setup the config entry for my device.\"\"\"\n    device = MyDevice(entry.data[CONF_HOST])\n    try:\n        await device.async_setup()\n    except (asyncio.TimeoutError, TimeoutException) as ex:\n        raise ConfigEntryNotReady(f\"Timeout while connecting to {device.ipaddr}\") from ex\n```\n\n----------------------------------------\n\nTITLE: Setting Polling Interval with SCAN_INTERVAL Constant in Python\nDESCRIPTION: This snippet demonstrates how to set a polling interval when using the built-in entity update method. The SCAN_INTERVAL constant is defined at the module level and set to timedelta(minutes=1), while the entity has should_poll attribute set to True.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/appropriate-polling.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSCAN_INTERVAL = timedelta(minutes=1)\n\nclass MySensor(SensorEntity):\n    \"\"\"Representation of a Sensor.\"\"\"\n\n    _attr_should_poll = True\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OAuth2 Authentication Class in Python\nDESCRIPTION: This example shows how to implement a custom OAuth2 authentication class by extending the abstract base class. It uses a token manager to handle token refresh and storage.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_auth.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom my_package import AbstractAuth\n\n\nclass Auth(AbstractAuth):\n    def __init__(self, websession: ClientSession, host: str, token_manager):\n        \"\"\"Initialize the auth.\"\"\"\n        super().__init__(websession, host)\n        self.token_manager = token_manager\n\n    async def async_get_access_token(self) -> str:\n        \"\"\"Return a valid access token.\"\"\"\n        if self.token_manager.is_token_valid():\n            return self.token_manager.access_token\n\n        await self.token_manager.fetch_access_token()\n        await self.token_manager.save_access_token()\n\n        return self.token_manager.access_token\n```\n\n----------------------------------------\n\nTITLE: Implementing Humidity Setting for Home Assistant Climate Entity in Python\nDESCRIPTION: This snippet shows how to implement the method for setting the humidity in a Climate entity. It provides both synchronous and asynchronous implementations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/climate.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    # Implement one of these methods.\n\n    def set_humidity(self, humidity):\n        \"\"\"Set new target humidity.\"\"\"\n\n    async def async_set_humidity(self, humidity):\n        \"\"\"Set new target humidity.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing async_get_events Method for Calendar Entity\nDESCRIPTION: Method to retrieve calendar events within a specified date range. Must handle both regular and recurring events, properly ordered including all-day events. Takes HomeAssistant instance and start/end datetime parameters.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/calendar.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.components.calendar import CalendarEntity\n\nclass MyCalendar(CalendarEntity):\n\n    async def async_get_events(\n        self,\n        hass: HomeAssistant,\n        start_date: datetime.datetime,\n        end_date: datetime.datetime,\n    ) -> list[CalendarEvent]:\n        \"\"\"Return calendar events within a datetime range.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Alarm Arm Vacation Method in Python\nDESCRIPTION: Methods for implementing arm vacation functionality. Developers must implement either the synchronous or asynchronous version of the method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/alarm-control-panel.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyAlarm(AlarmControlPanelEntity):\n    # Implement one of these methods.\n\n    def alarm_arm_vacation(self, code: str | None = None) -> None:\n        \"\"\"Send arm vacation command.\"\"\"\n\n    async def async_alarm_arm_vacation(self, code: str | None = None) -> None:\n        \"\"\"Send arm vacation command.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PassiveBluetoothDataProcessor with Custom Update Method in Python\nDESCRIPTION: This code shows how to set up a PassiveBluetoothDataProcessor with a custom update method. The method now receives the parsed data from the coordinator and returns a PassiveBluetoothDataUpdate object. This approach allows for more efficient data handling in multi-platform scenarios.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-08-08-bluetooth-api-changes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef sensor_update_to_bluetooth_data_update(\n    sensor_update: MyDataClass,\n) -> PassiveBluetoothDataUpdate:\n    \"\"\"Convert a sensor update to a bluetooth data update.\"\"\"\n    ...\n    return PassiveBluetoothDataUpdate( ... )\n\nprocessor = PassiveBluetoothDataProcessor(sensor_update_to_bluetooth_data_update)\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Playback Methods in Python\nDESCRIPTION: Defines synchronous and asynchronous methods for playing media with support for enqueuing and announcements. Includes parameters for media type, media ID, enqueue behavior, and announcement mode.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/media-player.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyMediaPlayer(MediaPlayerEntity):\n\n    def play_media(\n        self,\n        media_type: str,\n        media_id: str,\n        enqueue: MediaPlayerEnqueue | None = None,\n        announce: bool | None = None, **kwargs: Any\n    ) -> None:\n        \"\"\"Play a piece of media.\"\"\"\n\n    async def async_play_media(\n        self,\n        media_type: str,\n        media_id: str,\n        enqueue: MediaPlayerEnqueue | None = None,\n        announce: bool | None = None, **kwargs: Any\n    ) -> None:\n        \"\"\"Play a piece of media.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Icons Based on State in Home Assistant\nDESCRIPTION: Example class showing how to implement dynamic icons that change based on conditions or entity state. This approach uses the icon property to return different icons based on custom logic.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass MySwitch(SwitchEntity):\n\n    @property\n    def icon(self) -> str | None:\n        \"\"\"Icon of the entity, based on time.\"\"\"\n        if now().hour < 12:\n            return \"mdi:weather-night\"\n        return \"mdi:weather-sunny\"\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Stopping Cover Tilt Implementation in Python\nDESCRIPTION: Implementation of stop_cover_tilt methods for a cover entity. Only implement if SUPPORT_STOP_TILT flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/cover.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyCover(CoverEntity):\n    # Implement one of these methods.\n\n    def stop_cover_tilt(self, **kwargs):\n        \"\"\"Stop the cover.\"\"\"\n\n    async def async_stop_cover_tilt(self, **kwargs):\n        \"\"\"Stop the cover.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Getting Available Device Actions in Home Assistant\nDESCRIPTION: Function to list all actions that a specific device supports. This is used by Home Assistant to determine what actions are available for a device in the UI.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_action.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def async_get_actions(hass: HomeAssistant, device_id: str) -> list[dict]:\n    \"\"\"List device actions for devices.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Custom Panel with LitElement in JavaScript\nDESCRIPTION: A complete implementation of a custom panel using LitElement. This example shows how to create a panel that displays entity count, screen width status, and configuration details using wired-card components.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/creating-custom-panels.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport \"https://unpkg.com/wired-card@2.1.0/lib/wired-card.js?module\";\nimport {\n  LitElement,\n  html,\n  css,\n} from \"https://unpkg.com/lit-element@2.4.0/lit-element.js?module\";\n\nclass ExamplePanel extends LitElement {\n  static get properties() {\n    return {\n      hass: { type: Object },\n      narrow: { type: Boolean },\n      route: { type: Object },\n      panel: { type: Object },\n    };\n  }\n\n  render() {\n    return html`\n      <wired-card elevation=\"2\">\n        <p>There are ${Object.keys(this.hass.states).length} entities.</p>\n        <p>The screen is${this.narrow ? \"\" : \" not\"} narrow.</p>\n        Configured panel config\n        <pre>${JSON.stringify(this.panel.config, undefined, 2)}</pre>\n        Current route\n        <pre>${JSON.stringify(this.route, undefined, 2)}</pre>\n      </wired-card>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        background-color: #fafafa;\n        padding: 16px;\n        display: block;\n      }\n      wired-card {\n        background-color: white;\n        padding: 16px;\n        display: block;\n        font-size: 18px;\n        max-width: 600px;\n        margin: 0 auto;\n      }\n    `;\n  }\n}\ncustomElements.define(\"example-panel\", ExamplePanel);\n```\n\n----------------------------------------\n\nTITLE: Implementing async_update_todo_item Method in TodoListEntity\nDESCRIPTION: Implementation of the async_update_todo_item method for a To-do list entity that supports updating existing to-do items. This method is required when the UPDATE_TODO_ITEM feature is specified.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/todo.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.todo import TodoListEntity\n\nclass MyTodoListEntity(TodoListEntity):\n\n    async def async_update_todo_item(self, item: TodoItem) -> None:\n        \"\"\"Add an item to the To-do list.\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Backup Agent Class in Home Assistant\nDESCRIPTION: Example implementation of the BackupAgent abstract class, showing the required methods for handling backup operations such as download, upload, delete, list, and get. The agent must implement these methods to properly integrate with Home Assistant's backup system.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/backup.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.backup import BackupAgent, BackupAgentError\n\nfrom .const import DOMAIN\n\n\nclass ExampleBackupAgent(BackupAgent):\n    \"\"\"Backup agent interface.\"\"\"\n\n    domain = DOMAIN\n    name = \"Example Backup-Agent\"\n    unique_id = \"example_stable_id\"\n\n    async def async_download_backup(\n        self,\n        backup_id: str,\n        **kwargs: Any,\n    ) -> AsyncIterator[bytes]:\n        \"\"\"Download a backup file.\n\n        Raises BackupNotFound if the backup does not exist.\n\n        :param backup_id: The ID of the backup that was returned in async_list_backups.\n        :return: An async iterator that yields bytes.\n        \"\"\"\n\n    async def async_upload_backup(\n        self,\n        *,\n        open_stream: Callable[[], Coroutine[Any, Any, AsyncIterator[bytes]]],\n        backup: AgentBackup,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Upload a backup.\n\n        :param open_stream: A function returning an async iterator that yields bytes.\n        :param backup: Metadata about the backup that should be uploaded.\n        \"\"\"\n\n    async def async_delete_backup(\n        self,\n        backup_id: str,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"Delete a backup file.\n\n        Raises BackupNotFound if the backup does not exist.\n\n        :param backup_id: The ID of the backup that was returned in async_list_backups.\n        \"\"\"\n\n    async def async_list_backups(self, **kwargs: Any) -> list[AgentBackup]:\n        \"\"\"List backups.\"\"\"\n\n    async def async_get_backup(\n        self,\n        backup_id: str,\n        **kwargs: Any,\n    ) -> AgentBackup:\n        \"\"\"Return a backup.\n\n        Raises BackupNotFound if the backup does not exist.\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Firing Domain-Specific Events with Device Attribution in Home Assistant\nDESCRIPTION: This code demonstrates how to fire a domain-specific event in Home Assistant with proper device attribution. It creates an event with device_id and event type in the data payload, then uses the Home Assistant bus to fire the event with the domain prefix.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/integration_events.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nevent_data = {\n    \"device_id\": \"my-device-id\",\n    \"type\": \"motion_detected\",\n}\nhass.bus.async_fire(\"mydomain_event\", event_data)\n```\n\n----------------------------------------\n\nTITLE: Fetching the Latest Bluetooth Service Info in Python\nDESCRIPTION: This snippet shows how to get the latest advertisement and device data for a specific Bluetooth address. It returns a BluetoothServiceInfoBleak object from the scanner with the best RSSI of the requested connectable type.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\nservice_info = bluetooth.async_last_service_info(hass, \"44:44:33:11:23:42\", connectable=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Turn On Method for Siren Entity in Python\nDESCRIPTION: This snippet shows how to implement the turn_on method for a siren entity. It can be implemented as either a synchronous or asynchronous method, handling optional parameters for tone, duration, and volume level.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/siren.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySirenEntity(SirenEntity):\n    # Implement one of these methods.\n\n    def turn_on(self, **kwargs) -> None:\n        \"\"\"Turn the device on.\"\"\"\n\n    async def async_turn_on(self, **kwargs) -> None:\n        \"\"\"Turn the device on.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Entity with Callback Handler in Python\nDESCRIPTION: Example implementation of an event entity class that handles button events. The code demonstrates setting up device class, event types, and implementing event handling callbacks with device API integration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/event.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyEvent(EventEntity):\n\n    _attr_device_class = EventDeviceClass.BUTTON\n    _attr_event_types = [\"single_press\", \"double_press\"]\n\n    @callback\n    def _async_handle_event(self, event: str) -> None:\n        \"\"\"Handle the demo button event.\"\"\"\n        self._trigger_event(event, {\"extra_data\": 123})\n        self.async_write_ha_state()\n\n    async def async_added_to_hass(self) -> None:\n        \"\"\"Register callbacks with your device API/library.\"\"\"\n        my_device_api.listen(self._async_handle_event)\n```\n\n----------------------------------------\n\nTITLE: Implementing VacuumActivity in StateVacuumEntity Class in Python\nDESCRIPTION: Example showing how to implement the new activity property in a vacuum entity class using the VacuumActivity enum. The method returns different activity states based on the device's current operation, such as cleaning or docked status.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-12-08-new-vacuum-state-property.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.vacuum import VacuumActivity\n\nclass MyVacuumCleaner(StateVacuumEntity):\n    \"\"\"My vacuum cleaner.\"\"\"\n\n    @property\n    def activity(self) -> VacuumActivity | None:\n        \"\"\"Return the state of the vacuum.\"\"\"\n        if self.device.is_cleaning():\n            return VacuumActivity.CLEANING\n        return VacuumActivity.DOCKED\n```\n\n----------------------------------------\n\nTITLE: Executing Device Actions in Home Assistant\nDESCRIPTION: Function to execute a device action from a provided configuration. Takes the Home Assistant instance, the action configuration, variables for templating, and an optional context.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_action.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def async_call_action_from_config(\n    hass: HomeAssistant, config: dict, variables: dict, context: Context | None\n) -> None:\n    \"\"\"Execute a device action.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using async_get_clientsession in Home Assistant (New Method)\nDESCRIPTION: Demonstrates the new method of importing and using async_get_clientsession directly from the helpers package in Home Assistant. This approach passes the hass object as a parameter to the function.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-03-30-deprecate-hass-helpers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.helpers.aiohttp_client import async_get_clientsession\n\nasync def async_setup(hass: HomeAssistant, config):\n    \"\"\"Set up the component.\"\"\"\n    client = async_get_clientsession(hass)\n```\n\n----------------------------------------\n\nTITLE: Handling Offline Devices with PlatformNotReady in async_setup_platform\nDESCRIPTION: This example shows how to handle offline or unavailable devices in the async_setup_platform function. It raises a PlatformNotReady exception when a connection error occurs, allowing Home Assistant to automatically retry the setup later.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/integration_setup_failures.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_platform(\n    hass: HomeAssistant,\n    config: ConfigType,\n    async_add_entities: AddEntitiesCallback,\n    discovery_info: DiscoveryInfoType | None = None,\n) -> None:\n    \"\"\"Set up the platform.\"\"\"\n    device = MyDevice(conf[CONF_HOST])\n    try:\n        await device.async_setup()\n    except ConnectionError as ex:\n        raise PlatformNotReady(f\"Connection error while connecting to {device.ipaddr}: {ex}\") from ex\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Translation Placeholders in Python\nDESCRIPTION: Example implementation of a sensor entity that uses translation placeholders. The entity defines a translation key and provides a placeholder value that will be used in the translation string.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-01-19-entity-translations-placeholders.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TestEntity(SensorEntity):\n    \"\"\"Example entity.\"\"\"\n    \n    _attr_has_entity_name = True\n    _attr_translation_key = \"temperature\"\n    \n    def __init__(self) -> None:\n        \"\"\"Initialize example entity.\"\"\"\n        self._attr_translation_placeholders = {\"channel_id\": \"2\"}\n        self._attr_device_info = DeviceInfo(\n            name=\"Example device\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Using Async Time Zone Functions in Home Assistant\nDESCRIPTION: This snippet shows the recommended async-safe functions to use for time zone operations in Home Assistant, including the deprecated methods that should be avoided to prevent blocking the event loop.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-19-fix_zoneinfo_blocking_io.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Recommended async-safe function for getting time zones\ndt_util.async_get_time_zone  # Use this instead of dt_util.get_time_zone\n\n# Recommended async function for setting time zones\nhass.config.async_set_time_zone  # Use this instead of hass.config.set_time_zone (deprecated, to be removed in 2025.6)\n\n# Recommended function for accessing the default time zone\ndt_util.get_default_time_zone()  # Use this instead of directly accessing dt_util.DEFAULT_TIME_ZONE\n\n# For constructing ZoneInfo objects in the event loop\n# It is recommended to use the aiozoneinfo library\n```\n\n----------------------------------------\n\nTITLE: Implementing async_create_todo_item Method in TodoListEntity\nDESCRIPTION: Implementation of the async_create_todo_item method for a To-do list entity that supports creating new to-do items. This method is required when the CREATE_TODO_ITEM feature is specified.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/todo.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.todo import TodoListEntity\n\nclass MyTodoListEntity(TodoListEntity):\n\n    async def async_create_todo_item(self, item: TodoItem) -> None:\n        \"\"\"Add an item to the To-do list.\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing async_update_event Method for Calendar Entity\nDESCRIPTION: Method to update existing calendar events, supporting updates to single events, specific instances of recurring events, or entire recurring series. Requires UPDATE_EVENT feature flag.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/calendar.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.calendar import CalendarEntity\n\n\nclass MyCalendar(CalendarEntity):\n\n    async def async_update_event(\n        self,\n        uid: str,\n        event: dict[str, Any],\n        recurrence_id: str | None = None,\n        recurrence_range: str | None = None,\n    ) -> None:\n        \"\"\"Update an event on the calendar.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Property Using Property Function in Python\nDESCRIPTION: Shows how to implement an entity property using a property function, in this case setting the icon for a switch entity.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MySwitch(SwitchEntity):\n\n    @property\n    def icon(self) -> str | None:\n        \"\"\"Icon of the entity.\"\"\"\n        return \"mdi:door\"\n\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Registering Callbacks for a Specific Bluetooth Device Address in Python\nDESCRIPTION: This snippet shows how to register a callback function for a specific Bluetooth device identified by its MAC address. The registration is attached to the entry's unload method to ensure proper cleanup when the entry is unloaded.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\n...\n\nentry.async_on_unload(\n    bluetooth.async_register_callback(\n        hass, _async_specific_device_found, {\"address\": \"44:33:11:22:33:22\")}, bluetooth.BluetoothScanningMode.ACTIVE\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Registering External Bluetooth Scanner in Home Assistant\nDESCRIPTION: Shows how to register an external Bluetooth scanner using the bluetooth.async_register_scanner API. The scanner must inherit from BaseHaScanner and can specify connection slots to manage adapter load.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\ncancel = bluetooth.async_register_scanner(hass, scanner, connection_slots=slots)\n```\n\n----------------------------------------\n\nTITLE: Documenting Supported and Unsupported Devices for Home Assistant Integrations in Markdown\nDESCRIPTION: An example template for documenting which devices are supported and unsupported by a Home Assistant integration. This template helps users make informed purchasing decisions by clearly listing compatible devices, device categories, and specific incompatible devices.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-supported-devices.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Supported devices\n\nThe following devices are known to be supported by the integration:\n- Device 1\n- Device 2\n- Every appliance that runs MyOS\n\n## Unsupported devices\n\nThe following devices are not supported by the integration:\n- Device 3\n- Appliances built before 2010\n```\n\n----------------------------------------\n\nTITLE: Importing WaterHeaterEntity class in Python\nDESCRIPTION: Shows how to import the base class for water heater entities in Home Assistant. This class should be used as the parent for custom water heater implementations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/water-heater.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.water_heater import WaterHeaterEntity\n```\n\n----------------------------------------\n\nTITLE: Implementing TrackerEntity Properties for Home Assistant Device Tracker\nDESCRIPTION: Required properties for implementing a TrackerEntity class that tracks device location using GPS coordinates. Properties include battery level, latitude, longitude, location accuracy, location name and source type.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/device-tracker.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyTrackerEntity(TrackerEntity):\n    @property\n    def battery_level(self) -> int | None:\n        return None\n        \n    @property\n    def latitude(self) -> float | None:\n        return None\n        \n    @property\n    def location_accuracy(self) -> int:\n        return 0\n        \n    @property\n    def location_name(self) -> str | None:\n        return None\n        \n    @property\n    def longitude(self) -> float | None:\n        return None\n        \n    @property\n    def source_type(self) -> SourceType:\n        return SourceType.GPS\n```\n\n----------------------------------------\n\nTITLE: Implementing Backup Agent Methods in Home Assistant Integration\nDESCRIPTION: Example implementation of the async_get_backup_agents and async_register_backup_agents_listener methods in backup.py. These methods return a list of backup agents and register a listener for agent changes respectively.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/backup.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_get_backup_agents(\n    hass: HomeAssistant,\n) -> list[BackupAgent]:\n    \"\"\"Return a list of backup agents.\"\"\"\n    if not hass.config_entries.async_loaded_entries(DOMAIN):\n        LOGGER.debug(\"No config entry found or entry is not loaded\")\n        return []\n    return [ExampleBackupAgent()]\n\n\n@callback\ndef async_register_backup_agents_listener(\n    hass: HomeAssistant,\n    *,\n    listener: Callable[[], None],\n    **kwargs: Any,\n) -> Callable[[], None]:\n    \"\"\"Register a listener to be called when agents are added or removed.\n\n    :return: A function to unregister the listener.\n    \"\"\"\n    hass.data.setdefault(DATA_BACKUP_AGENT_LISTENERS, []).append(listener)\n\n    @callback\n    def remove_listener() -> None:\n        \"\"\"Remove the listener.\"\"\"\n        hass.data[DATA_BACKUP_AGENT_LISTENERS].remove(listener)\n\n    return remove_listener\n```\n\n----------------------------------------\n\nTITLE: Implementing async_delete_todo_items Method in TodoListEntity\nDESCRIPTION: Implementation of the async_delete_todo_items method for a To-do list entity that supports deleting to-do items. This method is required when the DELETE_TODO_ITEM feature is specified and must support deleting multiple items.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/todo.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.todo import TodoListEntity\n\nclass MyTodoListEntity(TodoListEntity):\n\n    async def async_delete_todo_items(self, uids: list[str]) -> None:\n        \"\"\"Delete an item from the to-do list.\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Default-Disabled Sensor Entity in Python for Home Assistant\nDESCRIPTION: Example implementation of a signal strength sensor entity that is disabled by default using Home Assistant's entity registry properties. The class demonstrates proper configuration of entity attributes including device class, measurement units, and registry settings.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-disabled-by-default.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySignalStrengthSensor(SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n\n    _attr_has_entity_name = True\n    _attr_entity_category = EntityCategory.DIAGNOSTIC\n    _attr_device_class = SensorDeviceClass.SIGNAL_STRENGTH\n    _attr_native_unit_of_measurement = SIGNAL_STRENGTH_DECIBELS_MILLIWATT\n    _attr_entity_registry_enabled_default = False\n\n    def __init__(self, device: Device) -> None:\n        \"\"\"Initialize the sensor.\"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Reauth Flow with Config Entry\nDESCRIPTION: Example of correct implementation of reauth flow using the entry.async_start_reauth helper method when a device requires password protection.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-11-04-reauth-reconfigure-entry-id.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    async def async_press(self) -> None:\n        \"\"\"Handle the button press.\"\"\"\n        try:\n            await self.device.press_button()\n        except DevicePasswordProtected as ex:\n            self.entry.async_start_reauth(self.hass)\n```\n\n----------------------------------------\n\nTITLE: Fetching a BLEDevice from a Bluetooth Address in Python\nDESCRIPTION: This code demonstrates how to get a BLEDevice object for a specific Bluetooth address without starting an additional scanner. It returns a device from the nearest configured adapter that can reach the device.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\nble_device = bluetooth.async_ble_device_from_address(hass, \"44:44:33:11:23:42\", connectable=True)\n```\n\n----------------------------------------\n\nTITLE: Adding User Configuration Options to Home Assistant Add-on\nDESCRIPTION: Configuration snippet that defines both default options and schema validation for a Home Assistant add-on. It demonstrates how to define boolean, string, and integer option types that users can modify in the add-on configuration interface.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n  beer: true\n  wine: true\n  liquor: false\n  name: \"world\"\n  year: 2017\nschema:\n  beer: bool\n  wine: bool\n  liquor: bool\n  name: str\n  year: int\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming TTS Audio Method\nDESCRIPTION: Implementation of the streaming audio generation method that accepts a TTSAudioRequest and returns a TTSAudioResponse. This method allows for streaming both input text and output audio.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/tts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyTextToSpeechEntity(TextToSpeechEntity):\n    \"\"\"Represent a Text To Speech entity.\"\"\"\n\n    async def async_stream_tts_audio(\n        self, request: TTSAudioRequest\n    ) -> TTSAudioResponse:\n        \"\"\"Generate speech from an incoming message.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining WaterHeaterEntityFeature enum values in Python\nDESCRIPTION: Demonstrates the use of the WaterHeaterEntityFeature enum to define supported features for a water heater entity. These values are combined using bitwise OR operations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/water-heater.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTARGET_TEMPERATURE = 1\nOPERATION_MODE = 2\nAWAY_MODE = 4\n```\n\n----------------------------------------\n\nTITLE: Implementing turn_on Methods for Home Assistant Switch Entity in Python\nDESCRIPTION: Code showing how to implement either the synchronous turn_on or asynchronous async_turn_on method in a custom Switch entity class. These methods handle turning the entity on and can accept additional keyword arguments.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/switch.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySwitch(SwitchEntity):\n    # Implement one of these methods.\n\n    def turn_on(self, **kwargs) -> None:\n        \"\"\"Turn the entity on.\"\"\"\n\n    async def async_turn_on(self, **kwargs):\n        \"\"\"Turn the entity on.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting up ActiveBluetoothProcessorCoordinator in Home Assistant Integration\nDESCRIPTION: Example implementation of async_setup_entry for an integration's __init__.py file using an ActiveBluetoothProcessorCoordinator. This demonstrates how to set up a device that requires active connections for polling data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/bluetooth_fetching_data.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.config_entries import ConfigEntry\nfrom homeassistant.const import Platform\nfrom homeassistant.core import CoreState, HomeAssistant\nfrom homeassistant.components.bluetooth import BluetoothScanningMode\n\nfrom homeassistant.components.bluetooth import (\n    BluetoothScanningMode,\n    BluetoothServiceInfoBleak,\n    async_ble_device_from_address,\n)\nfrom homeassistant.const import Platform\n\nfrom homeassistant.components.bluetooth.active_update_processor import (\n    ActiveBluetoothProcessorCoordinator,\n)\nPLATFORMS: list[Platform] = [Platform.SENSOR]\n\nfrom your_library import DataParser\n\n_LOGGER = logging.getLogger(__name__)\n\nasync def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n    \"\"\"Set up example BLE device from a config entry.\"\"\"\n    address = entry.unique_id\n    assert address is not None\n    data = DataParser()\n\n    def _needs_poll(\n        service_info: BluetoothServiceInfoBleak, last_poll: float | None\n    ) -> bool:\n        return (\n            hass.state == CoreState.running\n            and data.poll_needed(service_info, last_poll)\n            and bool(\n                async_ble_device_from_address(\n                    hass, service_info.device.address, connectable=True\n                )\n            )\n        )\n\n    async def _async_poll(service_info: BluetoothServiceInfoBleak):\n        if service_info.connectable:\n            connectable_device = service_info.device\n        elif device := async_ble_device_from_address(\n            hass, service_info.device.address, True\n        ):\n            connectable_device = device\n        else:\n            # We have no Bluetooth controller that is in range of\n            # the device to poll it\n            raise RuntimeError(\n                f\"No connectable device found for {service_info.device.address}\"\n            )\n        return await data.async_poll(connectable_device)\n\n    coordinator = hass.data.setdefault(DOMAIN, {})[\n        entry.entry_id\n    ] = ActiveBluetoothProcessorCoordinator(\n        hass,\n        _LOGGER,\n        address=address,\n        mode=BluetoothScanningMode.PASSIVE,\n        update_method=data.update,\n        needs_poll_method=_needs_poll,\n        poll_method=_async_poll,\n        # We will take advertisements from non-connectable devices\n        # since we will trade the BLEDevice for a connectable one\n        # if we need to poll it\n        connectable=False,\n    )\n    await hass.config_entries.async_forward_entry_setups(entry, PLATFORMS)\n    entry.async_on_unload(\n        # only start after all platforms have had a chance to subscribe\n        coordinator.async_start()\n    )\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementing async_reproduce_states Method for Home Assistant Integration\nDESCRIPTION: Code template for implementing the async_reproduce_states method in a reproduce_state.py file. This method is responsible for handling the reproduction of component states when a scene is activated in Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/reproduce_state.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import Iterable, Optional\nfrom homeassistant.core import Context, HomeAssistant, State\n\n\nasync def async_reproduce_states(\n    hass: HomeAssistant, states: Iterable[State], context: Optional[Context] = None\n) -> None:\n    \"\"\"Reproduce component states.\"\"\"\n    # TODO reproduce states\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Mode Setting for Home Assistant Climate Entity in Python\nDESCRIPTION: This code demonstrates how to implement the method for setting the fan mode in a Climate entity. It includes both synchronous and asynchronous versions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/climate.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    # Implement one of these methods.\n\n    def set_fan_mode(self, fan_mode):\n        \"\"\"Set new target fan mode.\"\"\"\n\n    async def async_set_fan_mode(self, fan_mode):\n        \"\"\"Set new target fan mode.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Translatable Service Action Exceptions in Python\nDESCRIPTION: This code demonstrates how to implement translatable exceptions in a Home Assistant service action. It shows two exception patterns: raising a ServiceValidationError for input validation and a HomeAssistantError for connection issues. Both exceptions include the translation domain and key to enable localization.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/exception-translations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_set_schedule(call: ServiceCall) -> ServiceResponse:\n    \"\"\"Set the schedule for a day.\"\"\"\n    start_date = call.data[ATTR_START_DATE]\n    end_date = call.data[ATTR_END_DATE]\n    if end_date < start_date:\n        raise ServiceValidationError(\n            translation_domain=DOMAIN,\n            translation_key=\"end_date_before_start_date\",\n        )\n    try:\n        await client.set_schedule(start_date, end_date)\n    except MyConnectionError as err:\n        raise HomeAssistantError(\n            translation_domain=DOMAIN,\n            translation_key=\"cannot_connect_to_schedule\",\n        ) from err\n```\n\n----------------------------------------\n\nTITLE: Fetching LLM Tools and Handling Conversations in Home Assistant\nDESCRIPTION: Implementation of a Conversation Entity that handles messages by updating LLM data, retrieving tools from the selected API, and interacting with the LLM to get responses. It also processes tool results and formats the final response.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/llm/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.const import CONF_LLM_HASS_API\nfrom homeassistant.core import HomeAssistant, callback\nfrom homeassistant.components import conversation\nfrom homeassistant.helpers import intent, llm\n\n\nclass MyConversationEntity(conversation.ConversationEntity):\n\n    def __init__(self, entry: ConfigEntry) -> None:\n        \"\"\"Initialize the agent.\"\"\"\n        self.entry = entry\n\n    ...\n\n    async def _async_handle_message(\n        self,\n        user_input: conversation.ConversationInput,\n        chat_log: conversation.ChatLog,\n    ) -> conversation.ConversationResult:\n        \"\"\"Call the API.\"\"\"\n\n        try:\n            await chat_log.async_update_llm_data(\n                DOMAIN,\n                user_input,\n                self.entry.options.get(CONF_LLM_HASS_API),\n                self.entry.options.get(CONF_PROMPT),\n            )\n        except conversation.ConverseError as err:\n            return err.as_conversation_result()\n\n        tools: list[dict[str, Any]] | None = None\n        if chat_log.llm_api:\n            tools = [\n                _format_tool(tool)  # TODO format the tools as your LLM expects\n                for tool in chat_log.llm_api.tools\n            ]\n\n        messages = [\n            m\n            for content in chat_log.content\n            for m in _convert_content(content)  # TODO format messages\n        ]\n\n        # Interact with LLM and pass tools\n        request = user_input.text\n        for _iteration in range(10):\n            response = ... # Send request to LLM and get streaming response\n\n            messages.extend(\n                [\n                    _convert_content(content)  # TODO format messages\n                    async for content in chat_log.async_add_delta_content_stream(\n                        user_input.agent_id, _transform_stream(response)  # TODO call tools and stream responses\n                    )\n                ]\n            )\n\n            if not chat_log.unresponded_tool_results:\n                break\n\n        # Send the final response to the user\n        intent_response = intent.IntentResponse(language=user_input.language)\n        intent_response.async_set_speech(chat_log.content[-1].content or \"\")\n        return conversation.ConversationResult(\n            response=intent_response,\n            conversation_id=chat_log.conversation_id,\n            continue_conversation=chat_log.continue_conversation,\n        )\n```\n\n----------------------------------------\n\nTITLE: Async Event Bus Direct Listening\nDESCRIPTION: Examples of listening to events directly on the event bus using async context\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/integration_listen_events.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncancel = hass.bus.async_listen_once(EVENT_HOMEASSISTANT_STOP, disconnect_service)\ncancel()\n```\n\nLANGUAGE: python\nCODE:\n```\ncancel = hass.bus.async_listen(EVENT_STATE_CHANGED, forward_event)\ncancel()\n```\n\n----------------------------------------\n\nTITLE: Implementing Intent Handler for Counting Invocations in Home Assistant\nDESCRIPTION: This code snippet demonstrates how to set up an intent handler in Home Assistant. It registers a CountInvocationIntent handler that keeps track of how many times it has been called. The handler extends the IntentHandler class and implements the async_handle method to process the intent.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_handling.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers import intent\n\nDATA_KEY = \"example_key\"\n\n\nasync def async_setup(hass, config):\n    hass.data[DATA_KEY] = 0\n    intent.async_register(hass, CountInvocationIntent())\n\n\nclass CountInvocationIntent(intent.IntentHandler):\n    \"\"\"Handle CountInvocationIntent intents.\"\"\"\n\n    # Type of intent to handle\n    intent_type = \"CountInvocationIntent\"\n\n    description = \"Count how often it has been called\"\n\n    # Optional. A validation schema for slots\n    # slot_schema = {\n    #     'item': cv.string\n    # }\n\n    async def async_handle(self, intent_obj):\n        \"\"\"Handle the intent.\"\"\"\n        intent_obj.hass.data[DATA_KEY] += 1\n        count = intent_obj.hass.data[DATA_KEY]\n\n        response = intent_obj.create_response()\n        response.async_set_speech(\n            f\"This intent has been invoked {count} times\"\n        )\n        return response\n```\n\n----------------------------------------\n\nTITLE: Customizing OAuth2 Token Refresh in Python\nDESCRIPTION: This example shows how to override the token refresh function in the OAuth2 authentication class to use a custom token manager for fetching and saving access tokens.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_auth.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom my_package import AbstractAuth\n\n\nclass Auth(AbstractAuth):\n    def refresh_tokens(self) -> Dict[str, Union[str, int]]:\n        \"\"\"Refresh and return new tokens.\"\"\"\n        self.token_manager.fetch_access_token()\n        self.token_manager.save_access_token()\n\n        return self.token_manager.access_token\n```\n\n----------------------------------------\n\nTITLE: Implementing Turn Off Methods for Light Entities in Python\nDESCRIPTION: Code snippet showing the implementation of both synchronous and asynchronous turn_off methods for a Home Assistant light entity. These methods are responsible for turning the light device off.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/light.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyLightEntity(LightEntity):\n    def turn_off(self, **kwargs):\n        \"\"\"Turn the device off.\"\"\"\n\n    async def async_turn_off(self, **kwargs):\n        \"\"\"Turn device off.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-factor Auth Module Methods in Python\nDESCRIPTION: This snippet outlines the required methods that must be implemented when extending the MultiFactorAuthModule class in Home Assistant. It includes methods for setup, validation, and user management.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_auth_module.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MultiFactorAuthModule:\n    @property\n    def input_schema(self):\n        # Return a schema defined the user input form.\n\n    async def async_setup_flow(self, user_id):\n        # Return a SetupFlow to handle the setup workflow.\n\n    async def async_setup_user(self, user_id, setup_data):\n        # Set up user for use this auth module.\n\n    async def async_depose_user(self, user_id):\n        # Remove user information from this auth module.\n\n    async def async_is_user_setup(self, user_id):\n        # Return whether user is set up.\n\n    async def async_validate(self, user_id, user_input):\n        # Given a user_id and user input, return validation result.\n\n    async def async_initialize_login_mfa_step(self, user_id):\n        # Will be called once before display the mfa step of login flow.\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Specific Bluetooth Advertisement in Python\nDESCRIPTION: This code shows how to wait for a specific Bluetooth advertisement that matches certain criteria. It uses a callback function to process advertisements and return True when the desired advertisement is found.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\ndef _process_more_advertisements(\n    service_info: BluetoothServiceInfoBleak,\n) -> bool:\n    \"\"\"Wait for an advertisement with 323 in the manufacturer_data.\"\"\"\n    return 323 in service_info.manufacturer_data\n\nservice_info = await bluetooth.async_process_advertisements(\n    hass,\n    _process_more_advertisements,\n    {\"address\": discovery_info.address, \"connectable\": False},\n    BluetoothScanningMode.ACTIVE,\n    ADDITIONAL_DISCOVERY_TIMEOUT\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Event Helper Usage in Python\nDESCRIPTION: Example showing how to subscribe and unsubscribe from state change events using event helpers\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/integration_listen_events.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nunsub = async_track_state_change_event(hass, entity_ids, state_automation_listener)\nunsub()\n```\n\n----------------------------------------\n\nTITLE: Implementing WebRTC Support for Camera Entities\nDESCRIPTION: Methods required to implement WebRTC streaming for camera entities. This enables direct connection with the Home Assistant frontend without using the stream component.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/camera.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyCamera(Camera):\n\n    async def async_handle_async_webrtc_offer(\n        self, offer_sdp: str, session_id: str, send_message: WebRTCSendMessage\n    ) -> None:\n        \"\"\"Handle the async WebRTC offer.\n\n        Async means that it could take some time to process the offer and responses/message\n        will be sent with the send_message callback.\n        This method is used by cameras with CameraEntityFeature.STREAM\n        An integration overriding this method must also implement async_on_webrtc_candidate.\n\n        Integrations can override with a native WebRTC implementation.\n        \"\"\"\n\n    async def async_on_webrtc_candidate(self, session_id: str, candidate: RTCIceCandidate) -> None:\n        \"\"\"Handle a WebRTC candidate.\"\"\"\n\n    @callback\n    def close_webrtc_session(self, session_id: str) -> None:\n        \"\"\"Close a WebRTC session.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Bluetooth Device Unavailable Callbacks in Python\nDESCRIPTION: This code shows how to register for callbacks when a Bluetooth device becomes unavailable. The callback will be triggered when the device is no longer seen, which may take up to five minutes for performance reasons.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\ndef _unavailable_callback(info: bluetooth.BluetoothServiceInfoBleak) -> None:\n    _LOGGER.debug(\"%s is no longer seen\", info.address)\n\ncancel = bluetooth.async_track_unavailable(hass, _unavailable_callback, \"44:44:33:11:23:42\", connectable=True)\n```\n\n----------------------------------------\n\nTITLE: Stopping Cover Implementation in Python\nDESCRIPTION: Implementation of stop_cover methods for a cover entity. Only implement if SUPPORT_STOP flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/cover.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyCover(CoverEntity):\n    # Implement one of these methods.\n\n    def stop_cover(self, **kwargs):\n        \"\"\"Stop the cover.\"\"\"\n\n    async def async_stop_cover(self, **kwargs):\n        \"\"\"Stop the cover.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Entity Press Methods in Python\nDESCRIPTION: Example implementation of the press methods for a custom button entity. Developers must implement either press() for synchronous operations or async_press() for asynchronous operations to handle button press actions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/button.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyButton(ButtonEntity):\n    # Implement one of these methods.\n\n    def press(self) -> None:\n        \"\"\"Handle the button press.\"\"\"\n\n    async def async_press(self) -> None:\n        \"\"\"Handle the button press.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Bluetooth Advertisement Callbacks\nDESCRIPTION: Demonstrates how to set up and use advertisement callbacks to feed Bluetooth data to the central manager using BluetoothServiceInfoBleak objects.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ncallback = bluetooth.async_get_advertisement_callback(hass)\n\ncallback(BluetoothServiceInfoBleak(...))\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dashboard Strategy in TypeScript\nDESCRIPTION: A simple TypeScript class that implements a dashboard strategy to generate a full dashboard configuration with a timestamp. This strategy creates a dashboard with a single view containing a markdown card.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-strategy.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass StrategyDemo {\n  static async generate(config, hass) {\n    return {\n      title: \"Generated Dashboard\",\n      views: [\n        {\n          \"cards\": [\n            {\n              \"type\": \"markdown\",\n              \"content\": `Generated at ${(new Date).toLocaleString()}`\n            }\n          ]\n        }\n      ]\n    };\n  }\n}\n\ncustomElements.define(\"ll-strategy-my-demo\", StrategyDemo);\n```\n\n----------------------------------------\n\nTITLE: Configuring DataUpdateCoordinator for Efficient Updates in Python\nDESCRIPTION: When creating a DataUpdateCoordinator, set always_update=False to avoid unnecessary callbacks if the API data can be compared using the Python __eq__ method. This is particularly useful for devices with infrequently changing states, such as lights that are rarely switched on.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-07-27-avoiding-unnecessary-callbacks-with-dataupdatecoordinator.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDataUpdateCoordinator(..., always_update=False)\n```\n\n----------------------------------------\n\nTITLE: Implementing CountrySelector in Home Assistant Config Flow\nDESCRIPTION: Demonstrates how to create a country selection form using CountrySelector with voluptuous schema. The example shows configuration for limiting available countries to Germany (DE) and United States (US) with automatic translation to country names in the frontend.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-10-12-country_selector.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvol.Schema(\n    {\n        vol.Optional(CONF_COUNTRY): CountrySelector(\n            CountrySelectorConfig(\n                countries=[\"DE\", \"US\"],\n            )\n        ),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Home Assistant Service Actions\nDESCRIPTION: This code demonstrates proper exception handling for a service action that sets a schedule. It raises ServiceValidationError for invalid input (when end date precedes start date) and HomeAssistantError for connection issues when trying to execute the service. Both exceptions provide clear error messages for users.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/action-exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.exceptions import HomeAssistantError, ServiceValidationError\n\nasync def async_set_schedule(call: ServiceCall) -> ServiceResponse:\n    \"\"\"Set the schedule for a day.\"\"\"\n    start_date = call.data[ATTR_START_DATE]\n    end_date = call.data[ATTR_END_DATE]\n    if end_date < start_date:\n        raise ServiceValidationError(\"End date must be after start date\")\n    try:\n        await client.set_schedule(start_date, end_date)\n    except MyConnectionError as err:\n        raise HomeAssistantError(\"Could not connect to the schedule\") from err\n```\n\n----------------------------------------\n\nTITLE: Calling WebSocket Commands from Home Assistant Frontend in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to call a custom WebSocket command from the Home Assistant frontend. It uses the hass.connection.sendMessagePromise method to send a request to the backend and handles both success and error responses with promises.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/extending/websocket-api.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhass.connection.sendMessagePromise({\n    type: 'media_player/thumbnail',\n    entity_id: 'media_player.living_room_tv',\n}).then(\n    (resp) => {\n        console.log('Message success!', resp.result);\n    },\n    (err) => {\n        console.error('Message failed!', err);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing HassKey for Type-Safe Data Storage\nDESCRIPTION: Demonstrates how to implement the new HassKey type for storing typed data in hass.data, including dataclass definition and setup function with proper type checking.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-01-improved-hass-data-typing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# <integration>/__init__.py\nfrom homeassistant.util.hass_dict import HassKey\n\nMY_KEY: HassKey[\"MyData\"] = HassKey(DOMAIN)\n\n@dataclass\nclass MyData:\n    client: MyClient\n    other_data: dict[str, Any]\n\nasync def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:\n    client = MyClient(...)\n\n    hass.data[MY_KEY] = MyData(client, {...})\n    hass.data[MY_KEY] = 1  # mypy error\n```\n\n----------------------------------------\n\nTITLE: Retrieving Home Assistant Configuration\nDESCRIPTION: Demonstrates how to retrieve the current Home Assistant configuration using the /api/config endpoint. The response includes various configuration details like components, location, and version.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" http://localhost:8123/api/config\n```\n\n----------------------------------------\n\nTITLE: Implementing Release Notes Methods for Update Entity\nDESCRIPTION: Methods to provide release notes for updates in a custom Update Entity. The returned string can contain markdown which will be formatted by the frontend. Requires UpdateEntityFeature.RELEASE_NOTES to be set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/update.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyUpdate(UpdateEntity):\n    # Implement one of these methods.\n\n    def release_notes(self) -> str | None:\n        \"\"\"Return the release notes.\"\"\"\n        return \"Lorem ipsum\"\n\n    async def async_release_notes(self) -> str | None:\n        \"\"\"Return the release notes.\"\"\"\n        return \"Lorem ipsum\"\n```\n\n----------------------------------------\n\nTITLE: Encrypted Webhook Payload Format in JSON\nDESCRIPTION: Format for sending encrypted webhook messages to Home Assistant. This structure is used when a secret was received during registration, requiring the message to be encrypted and included in the encrypted_data field.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"encrypted\",\n  \"encrypted\": true,\n  \"encrypted_data\": \"<encrypted message>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Proper API Communication Pattern in Home Assistant Python Code\nDESCRIPTION: This example illustrates the correct approach to communicate with external APIs in Home Assistant platforms. It demonstrates using a third-party library instead of making direct API calls.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_platform_code_review.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# bad\nstatus = requests.get(url(\"/status\"))\n# good\nfrom phue import Bridge\n\nbridge = Bridge(...)\nstatus = bridge.status()\n```\n\n----------------------------------------\n\nTITLE: Implementing Network Update Logic in Config Flow\nDESCRIPTION: Implements a config flow handler that processes zeroconf discovery information, sets unique device identifiers, and updates device IP addresses when they change. The highlighted code shows the critical part that updates the configuration with the new IP address.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/discovery-update-info.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyConfigFlow(ConfigFlow, domain=DOMAIN):\n    \"\"\"My config flow.\"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize the config flow.\"\"\"\n        self.data: dict[str, Any] = {}\n\n    async def async_step_zeroconf(\n        self, discovery_info: zeroconf.ZeroconfServiceInfo\n    ) -> ConfigFlowResult:\n        \"\"\"Handle zeroconf discovery.\"\"\"\n        self.data[CONF_HOST] = host = discovery_info.host\n\n        await self.async_set_unique_id(discovery_info.properties[\"serialno\"])\n        self._abort_if_unique_id_configured(updates={CONF_HOST: host})\n\n        client = MyClient(host)\n        try:\n            await client.get_data()\n        except MyClientError:\n            return self.async_abort(reason=\"cannot_connect\")\n\n        return await self.async_step_discovery_confirm()\n```\n\n----------------------------------------\n\nTITLE: Creating an API Wrapper Class in Python\nDESCRIPTION: Python class that serves as the main entry point for interacting with the ExampleHub API. It provides methods to fetch all lights or a specific light by ID.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_data_models.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nfrom .auth import Auth\nfrom .light import Light\n\n\nclass ExampleHubAPI:\n    \"\"\"Class to communicate with the ExampleHub API.\"\"\"\n\n    def __init__(self, auth: Auth):\n        \"\"\"Initialize the API and store the auth so we can make requests.\"\"\"\n        self.auth = auth\n\n    async def async_get_lights(self) -> List[Light]:\n        \"\"\"Return the lights.\"\"\"\n        resp = await self.auth.request(\"get\", \"lights\")\n        resp.raise_for_status()\n        return [Light(light_data, self.auth) for light_data in await resp.json()]\n\n    async def async_get_light(self, light_id) -> Light:\n        \"\"\"Return the lights.\"\"\"\n        resp = await self.auth.request(\"get\", f\"light/{light_id}\")\n        resp.raise_for_status()\n        return Light(await resp.json(), self.auth)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Command for Long-Lived Access Token\nDESCRIPTION: JSON request format for the WebSocket command to generate a long-lived access token. It requires a client name and can include an optional client icon and lifespan in days.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 11,\n    \"type\": \"auth/long_lived_access_token\",\n    \"client_name\": \"GPS Logger\",\n    \"client_icon\": null,\n    \"lifespan\": 365\n}\n```\n\n----------------------------------------\n\nTITLE: DHCP Discovery Configuration in manifest.json\nDESCRIPTION: Example of DHCP discovery configuration to match Rachio devices by hostname and MAC address patterns. This enables automatic triggering of the integration's config flow when matching DHCP announcements are detected.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dhcp\": [\n    {\n    \"hostname\": \"rachio-*\",\n    \"macaddress\": \"009D6B*\"\n    },\n    {\n    \"hostname\": \"[dp]achio-*\",\n    \"macaddress\": \"009D6B*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching the Shared BleakScanner Instance in Python\nDESCRIPTION: This code shows how to get the shared BleakScanner instance in Home Assistant. This API returns a wrapper around a single BleakScanner that allows integrations to share without overloading the system.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\nscanner = bluetooth.async_get_scanner(hass)\n```\n\n----------------------------------------\n\nTITLE: Creating Options Flow Method for Home Assistant Integration\nDESCRIPTION: Method to create and return an options flow handler instance for a config entry. This static method must be implemented in the config flow handler to support configuration options.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_options_flow_handler.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\n@callback\ndef async_get_options_flow(\n    config_entry: ConfigEntry,\n) -> OptionsFlowHandler:\n    \"\"\"Create the options flow.\"\"\"\n    return OptionsFlowHandler()\n```\n\n----------------------------------------\n\nTITLE: Setting Polling Interval with DataUpdateCoordinator in Python\nDESCRIPTION: This snippet shows how to set a polling interval of 1 minute when using the DataUpdateCoordinator class. The update_interval parameter is set to timedelta(minutes=1) in the coordinator's initialization method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/appropriate-polling.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCoordinator(DataUpdateCoordinator[MyData]):\n    \"\"\"Class to manage fetching data.\"\"\"\n\n    def __init__(self, hass: HomeAssistant) -> None:\n        \"\"\"Initialize coordinator.\"\"\"\n        super().__init__(\n            hass,\n            logger=LOGGER,\n            name=DOMAIN,\n            update_interval=timedelta(minutes=1),\n        )\n```\n\n----------------------------------------\n\nTITLE: Unique ID Validation in Home Assistant ConfigFlow\nDESCRIPTION: Method to validate and abort if unique_id doesn't match the config entry being reauthenticated or reconfigured. Should be used after setting unique_id and checking the source.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-10-21-reauth-reconfigure-helpers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself._abort_if_unique_id_mismatch\n```\n\n----------------------------------------\n\nTITLE: Closing Cover Implementation in Python\nDESCRIPTION: Implementation of close_cover methods for a cover entity. Only implement if SUPPORT_CLOSE flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/cover.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyCover(CoverEntity):\n    # Implement one of these methods.\n\n    def close_cover(self, **kwargs):\n        \"\"\"Close cover.\"\"\"\n\n    async def async_close_cover(self, **kwargs):\n        \"\"\"Close cover.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the async_process_audio_stream method for STT in Home Assistant\nDESCRIPTION: Example class showing how to implement the required async_process_audio_stream method for Speech-to-Text entities in Home Assistant. This method processes an audio stream and converts it to text, with the note that only streaming content is allowed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/stt.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySpeechToTextEntity(SpeechToTextEntity):\n    \"\"\"Represent a Speech To Text entity.\"\"\"\n\n    async def async_process_audio_stream(self) -> None:\n        \"\"\"Process an audio stream to STT service.\n\n        Only streaming content is allowed!\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Entry Migration in Home Assistant\nDESCRIPTION: Example migration function that handles the upgrading of config entry data when the schema changes. This function manages both major and minor version changes and returns True if migration is successful.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Example migration function\nasync def async_migrate_entry(hass, config_entry: ConfigEntry):\n    \"\"\"Migrate old entry.\"\"\"\n    _LOGGER.debug(\"Migrating configuration from version %s.%s\", config_entry.version, config_entry.minor_version)\n\n    if config_entry.version > 1:\n        # This means the user has downgraded from a future version\n        return False\n\n    if config_entry.version == 1:\n\n        new_data = {**config_entry.data}\n        if config_entry.minor_version < 2:\n            # TODO: modify Config Entry data with changes in version 1.2\n            pass\n        if config_entry.minor_version < 3:\n            # TODO: modify Config Entry data with changes in version 1.3\n            pass\n\n        hass.config_entries.async_update_entry(config_entry, data=new_data, minor_version=3, version=1)\n\n    _LOGGER.debug(\"Migration to configuration version %s.%s successful\", config_entry.version, config_entry.minor_version)\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Deriving Vacuum Entity in Python for Home Assistant\nDESCRIPTION: Shows how to derive a vacuum entity platform from the StateVacuumEntity class in Home Assistant. This is the base class for implementing vacuum entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/vacuum.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.vacuum import StateVacuumEntity\n```\n\n----------------------------------------\n\nTITLE: MQTT Discovery Configuration in manifest.json\nDESCRIPTION: Example of MQTT discovery configuration to subscribe to Tasmota discovery topics. This enables automatic triggering of the integration's config flow when matching MQTT messages are received.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mqtt\": [\n    \"tasmota/discovery/#\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling during Integration Setup in Python\nDESCRIPTION: This code snippet demonstrates how to implement error handling during the setup of an integration in Home Assistant. It checks for various error conditions and raises appropriate exceptions to handle temporary issues, authentication failures, and permanent errors.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/test-before-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_entry(hass: HomeAssistant, entry: MyIntegrationConfigEntry) -> bool:\n    \"\"\"Set up my integration from a config entry.\"\"\"\n\n    client = MyClient(entry.data[CONF_HOST])\n    \n    try:\n        await client.async_setup()\n    except OfflineException:\n        raise ConfigEntryNotReady(\"Device is offline\")\n    except InvalidAuthException:\n        raise ConfigEntryAuthFailed(\"Invalid authentication\")\n    except AccountClosedException:\n        raise ConfigEntryError(\"Account closed\")\n\n    entry.runtime_data = client\n\n    await hass.config_entries.async_forward_entry_setups(entry, PLATFORMS)\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Method in Home Assistant Lock Entity\nDESCRIPTION: Implementation of lock methods for a custom lock entity. Includes both synchronous and asynchronous implementations for locking functionality with optional code parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/lock.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyLock(LockEntity):\n\n    def lock(self, **kwargs):\n        \"\"\"Lock all or specified locks. A code to lock the lock with may optionally be specified.\"\"\"\n\n    async def async_lock(self, **kwargs):\n        \"\"\"Lock all or specified locks. A code to lock the lock with may optionally be specified.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Typed Data in Platform Setup\nDESCRIPTION: Shows how to access typed data from hass.data in a platform setup function, demonstrating automatic type inference by the type checker.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-01-improved-hass-data-typing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# <integration>/switch.py\nfrom . import MY_KEY\n\nasync def async_setup_platform(\n    hass: HomeAssistant,\n    config: ConfigType,\n    async_add_entities: AddEntitiesCallback,\n    discovery_info: DiscoveryInfoType | None = None,\n) -> None:\n    data = hass.data[MY_KEY]\n    reveal_type(data)  # MyData\n    \n    async_add_entities([MySwitch(data.client)])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Services\nDESCRIPTION: Demonstrates how to get a list of available services in Home Assistant using the /api/services endpoint. The response includes service domains and their associated services.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" http://localhost:8123/api/services\n```\n\n----------------------------------------\n\nTITLE: Implementing an Untranslated Switch Entity in Python\nDESCRIPTION: Demonstrates how to create a switch entity with an untranslated name, suitable for model names or proper nouns that should not be translated.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.switch import SwitchEntity\n\n\nclass MySwitch(SwitchEntity):\n    _attr_has_entity_name = True\n\n    @property\n    def name(self):\n        \"\"\"Name of the entity.\"\"\"\n        return \"Model X\"\n\n```\n\n----------------------------------------\n\nTITLE: Registering Callbacks for HomeKit Bluetooth Devices in Python\nDESCRIPTION: This code shows how to register a callback function for HomeKit devices by filtering based on manufacturer ID and data. The registration is tied to the entry's lifecycle to ensure proper cleanup when the entry is unloaded.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\n...\n\nentry.async_on_unload(\n    bluetooth.async_register_callback(\n        hass, _async_discovered_homekit_device, {\"manufacturer_id\": 76, \"manufacturer_data_first_byte\": 6}, bluetooth.BluetoothScanningMode.ACTIVE\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Integration Manifest JSON Configuration\nDESCRIPTION: Manifest file defining the integration's metadata including domain, name, documentation link, and version information.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_services.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"domain\": \"hello_action\",\n    \"name\": \"Hello Action\",\n    \"documentation\": \"https://developers.home-assistant.io/docs/dev_101_services\",\n    \"iot_class\": \"local_push\",\n    \"version\": \"0.1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wake Word Detection Entity in Python\nDESCRIPTION: Example implementation of a wake word detection entity showing how to process an audio stream and return detection results. This method handles 16kHz sample rate with 16-bit mono PCM samples and returns a DetectionResult or None.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/wake_word.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyWakeWordDetectionEntity(WakeWordDetectionEntity):\n    \"\"\"Represent a Wake Word Detection entity.\"\"\"\n\n    async def async_process_audio_stream(\n        self, stream: AsyncIterable[tuple[bytes, int]]\n    ) -> DetectionResult | None:\n        \"\"\"Try to detect wake word(s) in an audio stream with timestamps.\n\n        Audio must be 16Khz sample rate with 16-bit mono PCM samples.\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Converting Ranged Value to Percentage in Python\nDESCRIPTION: Utility function to convert a value within a specified range to a percentage value.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-12-05-scaling-utils.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef ranged_value_to_percentage(\n    low_high_range: tuple[float, float], value: float\n) -> int:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing HVAC Mode Setting in Python for Home Assistant Climate Entity\nDESCRIPTION: This snippet shows how to implement the method for setting the HVAC mode in a Climate entity. It provides both synchronous and asynchronous implementations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/climate.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    # Implement one of these methods.\n\n    def set_hvac_mode(self, hvac_mode):\n        \"\"\"Set new target hvac mode.\"\"\"\n\n    async def async_set_hvac_mode(self, hvac_mode):\n        \"\"\"Set new target hvac mode.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: USB Discovery Configuration in manifest.json\nDESCRIPTION: Example of USB discovery configuration to match devices by VID, PID, serial number, manufacturer, and description patterns. This enables automatic triggering of the integration's config flow when matching USB devices are connected.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"usb\": [\n    {\n    \"vid\": \"AAAA\",\n    \"pid\": \"AAAA\"\n    },\n    {\n    \"vid\": \"BBBB\",\n    \"pid\": \"BBBB\"\n    },\n    {\n    \"vid\": \"1234\",\n    \"pid\": \"ABCD\",\n    \"serial_number\": \"1234*\",\n    \"manufacturer\": \"*midway*\",\n    \"description\": \"*zigbee*\"\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom LLM Tool in Home Assistant\nDESCRIPTION: Implementation of a custom LLM Tool class that retrieves the current time. This example shows how to define a tool with parameters, description, and the async_call method that performs the actual operation when called by an LLM.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/llm/index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.helper import llm\nfrom homeassistant.util import dt as dt_util\nfrom homeassistant.util.json import JsonObjectType\n\n\nclass TimeTool(llm.Tool):\n    \"\"\"Tool to get the current time.\"\"\"\n\n    name = \"GetTime\"\n    description: \"Returns the current time.\"\n\n    # Optional. A voluptuous schema of the input parameters.\n    parameters = vol.Schema({\n      vol.Optional('timezone'): str,\n    })\n\n    async def async_call(\n        self, hass: HomeAssistant, tool_input: ToolInput, llm_context: LLMContext\n    ) -> JsonObjectType:\n        \"\"\"Call the tool.\"\"\"\n        if \"timezone\" in tool_input.tool_args:\n            tzinfo = dt_util.get_time_zone(tool_input.tool_args[\"timezone\"])\n        else:\n            tzinfo = dt_util.DEFAULT_TIME_ZONE\n\n        return dt_util.now(tzinfo).isoformat()\n```\n\n----------------------------------------\n\nTITLE: Querying Entity History\nDESCRIPTION: Shows how to retrieve historical state data for entities using the /api/history/period endpoint. This example demonstrates querying temperature sensor data with various optional parameters.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# History of the entity 'sensor.temperature' of the past day (default)\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  \"http://localhost:8123/api/history/period?filter_entity_id=sensor.temperature\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Minimal history of the entity 'sensor.temperature' and 'sensor.kitchen_temperature' of the past day where the beginning date is set manually to 2023-09-04\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  \"http://localhost:8123/api/history/period/2023-09-04T00:00:00+02:00?filter_entity_id=sensor.temperature,sensor.kitchen_temperature&minimal_response\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n# History of the entity 'sensor.temperature' during the period from 2021-09-04 to 2023-09-04\n```\n\n----------------------------------------\n\nTITLE: List Validation with Predefined Options in Python\nDESCRIPTION: Shows how to validate a list of monitored variables against predefined sensor types. Uses vol.All to combine multiple validators including ensure_list and checking against allowed values.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_validation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSENSOR_TYPES = {\n    \"article_cache\": (\"Article Cache\", \"MB\"),\n    \"average_download_rate\": (\"Average Speed\", \"MB/s\"),\n}\n\nPLATFORM_SCHEMA = PLATFORM_SCHEMA.extend(\n    {\n        # ...\n        vol.Optional(CONF_MONITORED_VARIABLES, default=[]): vol.All(\n            cv.ensure_list, [vol.In(SENSOR_TYPES)]\n        ),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Synchronous Component Setup to Asynchronous in Home Assistant\nDESCRIPTION: Shows the transformation from a synchronous setup function to an asynchronous version using Python's async/await syntax. This enables the component to operate inside Home Assistant's event loop.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_working_with_async.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef setup(hass, config):\n    \"\"\"Set up component.\"\"\"\n    # Code for setting up your component outside of the event loop.\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup(hass, config):\n    \"\"\"Set up component.\"\"\"\n    # Code for setting up your component inside of the event loop.\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Option Methods in Home Assistant's SelectEntity\nDESCRIPTION: This snippet shows how to implement the select_option method in a custom Select entity class. Developers must implement either the synchronous or asynchronous version of the method to handle when a user or automation changes the selected option.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/select.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySelect(SelectEntity):\n    # Implement one of these methods.\n\n    def select_option(self, option: str) -> None:\n        \"\"\"Change the selected option.\"\"\"\n\n    async def async_select_option(self, option: str) -> None:\n        \"\"\"Change the selected option.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Home Assistant Add-on\nDESCRIPTION: The config.yaml file defines the metadata and configuration for a Home Assistant add-on. This basic example sets the name, description, version, slug, initialization settings, and supported architectures.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Hello world\"\ndescription: \"My first real add-on!\"\nversion: \"1.0.0\"\nslug: \"hello_world\"\ninit: false\narch:\n  - aarch64\n  - amd64\n  - armhf\n  - armv7\n  - i386\n```\n\n----------------------------------------\n\nTITLE: Converting Named Fan Speeds to Percentages\nDESCRIPTION: Utility code for converting between named fan speeds and percentage values. This is useful for integrations that work with named speed levels rather than direct percentages.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/fan.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.util.percentage import ordered_list_item_to_percentage, percentage_to_ordered_list_item\n\nORDERED_NAMED_FAN_SPEEDS = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]  # off is not included\n\npercentage = ordered_list_item_to_percentage(ORDERED_NAMED_FAN_SPEEDS, \"three\")\n\nnamed_speed = percentage_to_ordered_list_item(ORDERED_NAMED_FAN_SPEEDS, 23)\n\n...\n\n    @property\n    def percentage(self) -> Optional[int]:\n        \"\"\"Return the current speed percentage.\"\"\"\n        return ordered_list_item_to_percentage(ORDERED_NAMED_FAN_SPEEDS, current_speed)\n\n    @property\n    def speed_count(self) -> int:\n        \"\"\"Return the number of speeds the fan supports.\"\"\"\n        return len(ORDERED_NAMED_FAN_SPEEDS)\n```\n\n----------------------------------------\n\nTITLE: Implementing Alarm Trigger Method in Python\nDESCRIPTION: Methods for implementing alarm trigger functionality. Developers must implement either the synchronous or asynchronous version of the method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/alarm-control-panel.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyAlarm(AlarmControlPanelEntity):\n    # Implement one of these methods.\n\n    def alarm_trigger(self, code: str | None = None) -> None:\n        \"\"\"Send alarm trigger command.\"\"\"\n\n    async def async_alarm_trigger(self, code: str | None = None) -> None:\n        \"\"\"Send alarm trigger command.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing open_valve Methods in Python for Home Assistant Valve Entities\nDESCRIPTION: These methods control opening a valve. Implement either the synchronous or asynchronous version based on your integration needs, but only if the SUPPORT_OPEN flag is set. For valves that support position setting, use set_valve_position instead.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/valve.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyValve(ValveEntity):\n    # Implement one of these methods.\n\n    def open_valve(self) -> None:\n        \"\"\"Open the valve.\"\"\"\n\n    async def async_open_valve(self) -> None:\n        \"\"\"Open the valve.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Translated Device Names in Home Assistant Sensor Entity (Python)\nDESCRIPTION: This snippet demonstrates how to create a sensor entity with a translated device name in Home Assistant. It shows the use of the translation_key and translation_placeholders attributes in the device_info dictionary.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-02-28-device-name-translations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TestEntity(SensorEntity):\n    \"\"\"Example entity.\"\"\"\n    \n    _attr_has_entity_name = True\n    \n    def __init__(self) -> None:\n        \"\"\"Initialize example entity.\"\"\"\n        self._attr_device_info = DeviceInfo(\n            translation_key=\"n_ch_power_strip\",\n            translation_placeholders={\"number_of_sockets\": \"2\"},\n        )\n```\n\n----------------------------------------\n\nTITLE: Registering a Sensor in Home Assistant Mobile App\nDESCRIPTION: JSON example for registering a new sensor via the mobile_app integration. Shows the required and optional fields including attributes, device_class, icon, name, state, type, unique_id, unit_of_measurement, state_class, entity_category, and disabled status.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sensors.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"attributes\": {\n      \"foo\": \"bar\"\n    },\n    \"device_class\": \"battery\",\n    \"icon\": \"mdi:battery\",\n    \"name\": \"Battery State\",\n    \"state\": \"12345\",\n    \"type\": \"sensor\",\n    \"unique_id\": \"battery_state\",\n    \"unit_of_measurement\": \"%\",\n    \"state_class\": \"measurement\",\n    \"entity_category\": \"diagnostic\",\n    \"disabled\": true\n  },\n  \"type\": \"register_sensor\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PassiveBluetoothDataUpdate with Dataclasses in Python\nDESCRIPTION: This code defines the structure for PassiveBluetoothDataUpdate and PassiveBluetoothEntityKey classes used by the Bluetooth processor coordinators to manage entity data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/bluetooth_fetching_data.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclasses.dataclass(frozen=True)\nclass PassiveBluetoothEntityKey:\n    \"\"\"Key for a passive bluetooth entity.\n\n    Example:\n    key: temperature\n    device_id: outdoor_sensor_1\n    \"\"\"\n\n    key: str\n    device_id: str | None\n\n@dataclasses.dataclass(frozen=True)\nclass PassiveBluetoothDataUpdate(Generic[_T]):\n    \"\"\"Generic bluetooth data.\"\"\"\n\n    devices: dict[str | None, DeviceInfo] = dataclasses.field(default_factory=dict)\n    entity_descriptions: Mapping[\n        PassiveBluetoothEntityKey, EntityDescription\n    ] = dataclasses.field(default_factory=dict)\n    entity_names: Mapping[PassiveBluetoothEntityKey, str | None] = dataclasses.field(\n        default_factory=dict\n    )\n    entity_data: Mapping[PassiveBluetoothEntityKey, _T] = dataclasses.field(\n        default_factory=dict\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Send Message Methods for Notify Entity in Python\nDESCRIPTION: Example showing how to implement the send_message or async_send_message methods required for a NotifyEntity class. These methods enable the entity to send messages with an optional title to external devices or services.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/notify.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyNotifier(NotifyEntity):\n    # Implement one of these methods.\n\n    def send_message(self, message: str, title: str | None = None) -> None:\n        \"\"\"Send a message.\"\"\"\n\n    async def async_send_message(self, message: str, title: str | None = None) -> None:\n        \"\"\"Send a message.\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing New OptionsFlow Pattern in Python\nDESCRIPTION: Demonstrates the new way to implement OptionsFlow using the built-in config entry properties. This approach removes the need to manually pass and set the config entry.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-11-12-options-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\n@callback\ndef async_get_options_flow(\n    config_entry: ConfigEntry,\n) -> OptionsFlowHandler:\n    \"\"\"Create the options flow.\"\"\"\n    return OptionsFlowHandler()\n\nclass OptionsFlowHandler(OptionsFlow):\n    \"\"\"Options flow handler.\"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize options flow.\"\"\"\n        self._conf_app_id: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Comparison Method in Update Entity\nDESCRIPTION: Custom method to override the default version comparison logic using AwesomeVersion library. This allows developers to specify how to determine if one version is newer than another using semantic versioning strategy.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/update.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef version_is_newer(self, latest_version: str, installed_version: str) -> bool:\n    \"\"\"Return True if latest_version is newer than installed_version.\"\"\"\n    return AwesomeVersion(\n        latest_version,\n        find_first_match=True,\n        ensure_strategy=[AwesomeVersionStrategy.SEMVER],\n    ) > AwesomeVersion(\n        installed_version,\n        find_first_match=True,\n        ensure_strategy=[AwesomeVersionStrategy.SEMVER],\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Entry Unloading in Python for Home Assistant\nDESCRIPTION: Example implementation of the async_unload_entry function that handles config entry unloading. It cleans up platform resources and removes listeners stored in the entry's runtime data. The function returns a boolean indicating successful unloading.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/config-entry-unloading.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_unload_entry(hass: HomeAssistant, entry: MyConfigEntry) -> bool:\n    \"\"\"Unload a config entry.\"\"\"\n    if (unload_ok := await hass.config_entries.async_unload_platforms(entry, PLATFORMS)):\n        entry.runtime_data.listener()\n    return unload_ok\n```\n\n----------------------------------------\n\nTITLE: Defining Port Description Translations in Home Assistant Add-ons\nDESCRIPTION: Translation configuration for network port descriptions in a Home Assistant add-on. Provides human-readable descriptions of what each port is used for in the UI.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nnetwork:\n  80/TCP: The webserver port (Not used for Ingress)\n```\n\n----------------------------------------\n\nTITLE: Creating Device Condition Function in Home Assistant\nDESCRIPTION: Callback function that creates a condition checker function from a configuration. Returns a function that evaluates the condition and returns a boolean.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_condition.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@callback\ndef async_condition_from_config(\n    config: ConfigType, config_validation: bool\n) -> condition.ConditionCheckerType:\n    \"\"\"Create a function to test a device condition.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Expired Credentials with ConfigEntryAuthFailed in async_setup_entry\nDESCRIPTION: This snippet demonstrates how to handle expired credentials in the async_setup_entry function. It raises a ConfigEntryAuthFailed exception when authentication fails, triggering Home Assistant to put the config entry in a failure state and start a reauth flow.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/integration_setup_failures.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n    \"\"\"Setup the config entry for my device.\"\"\"\n    device = MyDevice(entry.data[CONF_HOST])\n    try:\n        await device.async_setup()\n    except AuthFailed as ex:\n        raise ConfigEntryAuthFailed(f\"Credentials expired for {device.name}\") from ex\n    except (asyncio.TimeoutError, TimeoutException) as ex:\n        raise ConfigEntryNotReady(f\"Timed out while connecting to {device.ipaddr}\") from ex\n```\n\n----------------------------------------\n\nTITLE: Registering Callbacks for Switchbot Bluetooth Device Discovery in Python\nDESCRIPTION: This snippet demonstrates how to register a callback function that will be called when a Switchbot Bluetooth device is discovered. The function returns a callback that will cancel the registration when called, and it's attached to the entry's unload method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\n...\n\n@callback\ndef _async_discovered_device(service_info: bluetooth.BluetoothServiceInfoBleak, change: bluetooth.BluetoothChange) -> None:\n    \"\"\"Subscribe to bluetooth changes.\"\"\"\n    _LOGGER.warning(\"New service_info: %s\", service_info)\n\nentry.async_on_unload(\n    bluetooth.async_register_callback(\n        hass, _async_discovered_device, {\"service_uuid\": \"cba20d00-224d-11e6-9fb8-0002a5d5c51b\", \"connectable\": False}, bluetooth.BluetoothScanningMode.ACTIVE\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Intents in Python within Home Assistant Integration\nDESCRIPTION: Python code example demonstrating how to handle an intent within a Home Assistant integration. It includes intent type and slot definition, error handling for unknown intents, invalid slot data, and general intent errors.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_firing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers import intent\n\nintent_type = \"TurnLightOn\"\nslots = {\"entity\": {\"value\": \"Kitchen\"}}\n\ntry:\n    intent_response = await intent.async_handle(\n        hass, \"example_component\", intent_type, slots\n    )\n\nexcept intent.UnknownIntent as err:\n    _LOGGER.warning(\"Received unknown intent %s\", intent_type)\n\nexcept intent.InvalidSlotInfo as err:\n    _LOGGER.error(\"Received invalid slot data: %s\", err)\n\nexcept intent.IntentError:\n    _LOGGER.exception(\"Error handling request for %s\", intent_type)\n```\n\n----------------------------------------\n\nTITLE: Implementing Configuration Options in Python\nDESCRIPTION: Enhanced version of the Hello State component that includes configuration options and state setting functionality.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_states.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging\\n\\n_LOGGER = logging.getLogger(__name__)\\n\\nDOMAIN = \"hello_state\"\\n\\nCONF_TEXT = \"text\"\\nDEFAULT_TEXT = \"No text!\"\\n\\n\\ndef setup(hass, config):\\n    \"\"\"Set up the Hello State component. \"\"\"\\n    # Get the text from the configuration. Use DEFAULT_TEXT if no name is provided.\\n    text = config[DOMAIN].get(CONF_TEXT, DEFAULT_TEXT)\\n\\n    # States are in the format DOMAIN.OBJECT_ID\\n    hass.states.set(\"hello_state.Hello_State\", text)\\n\\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementing Unlock Method in Home Assistant Lock Entity\nDESCRIPTION: Implementation of unlock methods for a custom lock entity. Includes both synchronous and asynchronous implementations for unlocking functionality with optional code parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/lock.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyLock(LockEntity):\n\n    def unlock(self, **kwargs):\n        \"\"\"Unlock all or specified locks. A code to unlock the lock with may optionally be specified.\"\"\"\n\n    async def async_unlock(self, **kwargs):\n        \"\"\"Unlock all or specified locks. A code to unlock the lock with may optionally be specified.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Voice Support Method in Python TTS Entity\nDESCRIPTION: Method implementation for retrieving supported voices for a specific language in a Text-to-Speech entity. This callback method should return a list of supported voices or None.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/tts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyTextToSpeechEntity(TextToSpeechEntity):\n    \"\"\"Represent a Text To Speech entity.\"\"\"\n\n    @callback\n    def async_get_supported_voices(self, language: str) -> list[str] | None:\n        \"\"\"Return a list of supported voices for a language.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Prepare Method for Conversation Entity in Python\nDESCRIPTION: This code shows how to implement the optional async_prepare method for a ConversationEntity. This method is called before processing a request to load language models or other resources needed to handle the conversation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/conversation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyConversationEntity(ConversationEntity):\n    \"\"\"Represent a conversation entity.\"\"\"\n\n    async def async_prepare(self, language: str | None = None) -> None:\n        \"\"\"Prepare a language for processing.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Base Entity Class in Home Assistant\nDESCRIPTION: Implementation of a base entity class that inherits from CoordinatorEntity, providing common functionality for all entities in an integration. The base entity is stored in entity.py and includes device information setup.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/common-modules.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyEntity(CoordinatorEntity[MyCoordinator]):\n    \"\"\"Base entity for MyIntegration.\"\"\"\n\n    _attr_has_entity_name = True\n\n    def __init__(self, coordinator: MyCoordinator) -> None:\n        \"\"\"Initialize the entity.\"\"\"\n        super().__init__(coordinator)\n        self._attr_device_info = ...\n```\n\n----------------------------------------\n\nTITLE: Implementing State Change Event Tracking with Proper Thread Safety in Home Assistant\nDESCRIPTION: A code example showing how to correctly track state changes in Home Assistant using the async_track_state_change_event helper. This pattern ensures all operations run in the event loop thread and demonstrates proper use of the @callback decorator to prevent thread safety issues.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_thread_safety.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    async def async_added_to_hass(self) -> None:\n        \"\"\"Entity has been added to hass.\"\"\"\n        self.async_on_remove(\n            async_track_state_change_event(\n                self.hass,\n                [\"light.other\"],\n                self.async_update_event_state_callback,\n            )\n        )\n\n    @callback\n    def async_update_event_state_callback(self, event: Event[EventStateChangedData]) -> None:\n        \"\"\"Call when entity state changes.\"\"\"\n        new_state = event.data[\"new_state\"]\n        if new_state is None or new_state.state in (STATE_UNAVAILABLE, STATE_UNKNOWN):\n            return\n        self.async_write_ha_state()\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Entity Methods for Direction Control\nDESCRIPTION: Code snippet showing how to implement the methods for setting fan direction. This should be implemented when the FanEntityFeature.DIRECTION flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/fan.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FanEntity(ToggleEntity):\n    # Implement one of these methods.\n\n    def set_direction(self, direction: str) -> None:\n        \"\"\"Set the direction of the fan.\"\"\"\n\n    async def async_set_direction(self, direction: str) -> None:\n        \"\"\"Set the direction of the fan.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Turn Off Methods\nDESCRIPTION: Methods for disabling the camera. Implement either turn_off or async_turn_off to support the CameraEntityFeature.ON_OFF feature.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/camera.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyCamera(Camera):\n    # Implement one of these methods.\n\n    def turn_off(self) -> None:\n        \"\"\"Turn off camera.\"\"\"\n\n    async def async_turn_off(self) -> None:\n        \"\"\"Turn off camera.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Handle Message Method for Conversation Entity in Python\nDESCRIPTION: This code demonstrates how to implement the _async_handle_message method for a ConversationEntity in Home Assistant. It processes user input, adds a response to the chat log, and returns a ConversationResult with the appropriate speech and conversation state.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/conversation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.conversation import ChatLog, ConversationEntity\n\nclass MyConversationEntity(ConversationEntity):\n    \"\"\"Represent a conversation entity.\"\"\"\n\n    async def _async_handle_message(\n        self,\n        user_input: ConversationInput,\n        chat_log: ChatLog,\n    ) -> ConversationResult:\n        \"\"\"Call the API.\"\"\"\n        # Add the response to the chat log.\n        chat_log.async_add_assistant_content_without_tools(\n            AssistantContent(\n                agent_id=user_input.agent_id,\n                content=\"Test response\",\n            )\n        )\n        response = intent.IntentResponse(language=user_input.language)\n        response.async_set_speech(\"Test response\")\n        return agent.ConversationResult(\n            conversation_id=None,\n            response=response,\n            continue_conversation=False,\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailability Logging in a Home Assistant Sensor Using async_update\nDESCRIPTION: Demonstrates how to implement logging when a sensor becomes unavailable and when it reconnects using the async_update method. Uses an instance attribute to track if the unavailability message has been logged to prevent log spamming.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/log-when-unavailable.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MySensor(SensorEntity):\n\n    _unavailable_logged: bool = False\n\n    async def async_update(self) -> None:\n        try:\n            data = await self.client.get_data()\n        except MyException as ex:\n            self._attr_available = False\n            if not self._unavailable_logged:\n                _LOGGER.info(\"The sensor is unavailable: %s\", ex)\n                self._unavailable_logged = True\n        else:\n            self._attr_available = True\n            self._attr_native_value = data.value\n            if self._unavailable_logged:\n                _LOGGER.info(\"The sensor is back online\")\n                self._unavailable_logged = False\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Grouping in Python\nDESCRIPTION: Implements methods for grouping and ungrouping media players for synchronized playback.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/media-player.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyMediaPlayer(MediaPlayerEntity):\n    def join_players(self, group_members):\n        \"\"\"Join `group_members` as a player group with the current player.\"\"\"\n\n    async def async_join_players(self, group_members):\n        \"\"\"Join `group_members` as a player group with the current player.\"\"\"\n\n    def unjoin_player(self):\n        \"\"\"Remove this player from any group.\"\"\"\n\n    async def async_unjoin_player(self):\n        \"\"\"Remove this player from any group.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor Entity Properties Definition\nDESCRIPTION: Defines the required and optional properties for binary sensor entities in Home Assistant, including the is_on state and device_class.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/binary-sensor.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n| Name | Type | Default | Description\n| ---- | ---- | ------- | -----------\n| is_on| <code>bool &#124; None</code> | `None` | **Required**. If the binary sensor is currently on or off.\n| device_class | <code>BinarySensorDeviceClass &#124; None</code> | `None` | Type of binary sensor.\n```\n\n----------------------------------------\n\nTITLE: Implementing Bluetooth Sensor Platform with PassiveBluetoothProcessorEntity\nDESCRIPTION: Example implementation of a sensor.py file for a Bluetooth integration using the PassiveBluetoothProcessorEntity. This demonstrates how to convert sensor data into a format the framework can use to create entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/bluetooth_fetching_data.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant import config_entries\nfrom homeassistant.components.bluetooth.passive_update_processor import (\n    PassiveBluetoothDataProcessor,\n    PassiveBluetoothDataUpdate,\n    PassiveBluetoothEntityKey,\n    PassiveBluetoothProcessorCoordinator,\n    PassiveBluetoothProcessorEntity,\n)\nfrom homeassistant.components.sensor import SensorEntity\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.helpers.entity_platform import AddEntitiesCallback\n\nfrom .const import DOMAIN\n\n\ndef sensor_update_to_bluetooth_data_update(parsed_data):\n    \"\"\"Convert a sensor update to a Bluetooth data update.\"\"\"\n    # This function must convert the parsed_data\n    # from your library's update_method to a `PassiveBluetoothDataUpdate`\n    # See the structure above\n    return PassiveBluetoothDataUpdate(\n        devices={},\n        entity_descriptions={},\n        entity_data={},\n        entity_names={},\n    )\n\n\nasync def async_setup_entry(\n    hass: HomeAssistant,\n    entry: config_entries.ConfigEntry,\n    async_add_entities: AddEntitiesCallback,\n) -> None:\n    \"\"\"Set up the example BLE sensors.\"\"\"\n    coordinator: PassiveBluetoothProcessorCoordinator = hass.data[DOMAIN][\n        entry.entry_id\n    ]\n    processor = PassiveBluetoothDataProcessor(sensor_update_to_bluetooth_data_update)\n    entry.async_on_unload(\n        processor.async_add_entities_listener(\n            ExampleBluetoothSensorEntity, async_add_entities\n        )\n    )\n    entry.async_on_unload(coordinator.async_register_processor(processor))\n\n\nclass ExampleBluetoothSensorEntity(PassiveBluetoothProcessorEntity, SensorEntity):\n    \"\"\"Representation of an example BLE sensor.\"\"\"\n\n    @property\n    def native_value(self) -> float | int | str | None:\n        \"\"\"Return the native value.\"\"\"\n        return self.processor.entity_data.get(self.entity_key)\n```\n\n----------------------------------------\n\nTITLE: Implementing toggle Methods for Home Assistant Switch Entity in Python\nDESCRIPTION: Code showing how to implement optional toggle functionality with either the synchronous toggle or asynchronous async_toggle method. If not implemented, the default behavior uses the is_on property to determine which method to call.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/switch.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MySwitch(SwitchEntity):\n    # Implement one of these methods.\n\n    def toggle(self, **kwargs):\n        \"\"\"Toggle the entity.\"\"\"\n\n    async def async_toggle(self, **kwargs):\n        \"\"\"Toggle the entity.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to SSDP Device Discoveries by Service Type\nDESCRIPTION: Code to register a callback for when Sonos player devices are discovered via SSDP. The callback is automatically unloaded when the config entry is removed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import ssdp\n\n...\n\nentry.async_on_unload(\n    ssdp.async_register_callback(\n        hass, _async_discovered_player, {\"st\": \"urn:schemas-upnp-org:device:ZonePlayer:1\"}\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: HomeKit Discovery Configuration in manifest.json\nDESCRIPTION: Example of HomeKit discovery configuration to match LIFX devices. This enables automatic triggering of the integration's config flow when matching HomeKit-advertised devices are discovered.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homekit\": {\n    \"models\": [\n      \"LIFX\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PassiveBluetoothDataUpdateCoordinator in Python for Home Assistant\nDESCRIPTION: This code snippet defines an ExamplePassiveBluetoothDataUpdateCoordinator class that extends PassiveBluetoothDataUpdateCoordinator. It handles passive Bluetooth data updates, processing incoming advertisement data without actively connecting to the device.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/bluetooth_fetching_data.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom typing import TYPE_CHECKING\n\nfrom homeassistant.components import bluetooth\nfrom homeassistant.components.bluetooth.active_update_coordinator import (\n    PassiveBluetoothDataUpdateCoordinator,\n)\nfrom homeassistant.core import CoreState, HomeAssistant, callback\n\nif TYPE_CHECKING:\n    from bleak.backends.device import BLEDevice\n\n\nclass ExamplePassiveBluetoothDataUpdateCoordinator(\n    PassiveBluetoothDataUpdateCoordinator[None]\n):\n    \"\"\"Class to manage fetching example data.\"\"\"\n\n    def __init__(\n        self,\n        hass: HomeAssistant,\n        logger: logging.Logger,\n        ble_device: BLEDevice,\n        device: YourLibDevice,\n    ) -> None:\n        \"\"\"Initialize example data coordinator.\"\"\"\n        super().__init__(\n            hass=hass,\n            logger=logger,\n            address=ble_device.address,\n            mode=bluetooth.BluetoothScanningMode.ACTIVE,\n            connectable=False,\n        )\n        self.device = device\n\n    @callback\n    def _async_handle_unavailable(\n        self, service_info: bluetooth.BluetoothServiceInfoBleak\n    ) -> None:\n        \"\"\"Handle the device going unavailable.\"\"\"\n\n    @callback\n    def _async_handle_bluetooth_event(\n        self,\n        service_info: bluetooth.BluetoothServiceInfoBleak,\n        change: bluetooth.BluetoothChange,\n    ) -> None:\n        \"\"\"Handle a Bluetooth event.\"\"\"\n        # Your device should process incoming advertisement data\n```\n\n----------------------------------------\n\nTITLE: Implementing Temperature Setting for Home Assistant Climate Entity in Python\nDESCRIPTION: This code demonstrates how to implement the method for setting the temperature in a Climate entity. It includes both synchronous and asynchronous versions and notes on built-in validation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/climate.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    # Implement one of these methods.\n\n    def set_temperature(self, **kwargs):\n        \"\"\"Set new target temperature.\"\"\"\n\n    async def async_set_temperature(self, **kwargs):\n        \"\"\"Set new target temperature.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Open/Opening States in a Custom LockEntity in Python\nDESCRIPTION: This example shows the default implementation of the 'is_opening', 'is_open', and 'async_open' methods in a custom LockEntity class. The code demonstrates how to properly set and track the open/opening states of a lock entity.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-10-lock-supports-open-state.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyLock(LockEntity):\n\n    @property\n    def is_opening(self) -> bool:\n        \"\"\"Return true if lock is open.\"\"\"\n        return self._state == STATE_OPENING\n\n    @property\n    def is_open(self) -> bool:\n        \"\"\"Return true if lock is open.\"\"\"\n        return self._state == STATE_OPEN\n\n    async def async_open(self, **kwargs: Any) -> None:\n        \"\"\"Open the door latch.\"\"\"\n        self._state = STATE_OPEN\n        self.async_write_ha_state()\n```\n\n----------------------------------------\n\nTITLE: Attaching Device Triggers to Events in Python\nDESCRIPTION: Function to attach trigger configurations to event bus events and handle trigger activation\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_trigger.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def async_attach_trigger(hass, config, action, trigger_info):\n    \"\"\"Attach a trigger.\"\"\"\n    event_config = event_trigger.TRIGGER_SCHEMA(\n        {\n            event_trigger.CONF_PLATFORM: \"event\",\n            event_trigger.CONF_EVENT_TYPE: \"mydomain_event\",\n            event_trigger.CONF_EVENT_DATA: {\n                CONF_DEVICE_ID: config[CONF_DEVICE_ID],\n                CONF_TYPE: config[CONF_TYPE],\n            },\n        }\n    )\n    return await event_trigger.async_attach_trigger(\n        hass, event_config, action, trigger_info, platform_type=\"device\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Active Wake Words via WebSocket API in JSON\nDESCRIPTION: Illustrates the JSON structure for setting active wake words for an Assist satellite entity using the WebSocket API.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/assist-satellite.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"assist_satellite/set_wake_words\",\n  \"entity_id\": \"ENTITY_ID\",\n  \"wake_word_ids\": [\"1234\", \"5678\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract OAuth2 Authentication Class in Python\nDESCRIPTION: This snippet defines an abstract base class for OAuth2 authentication, allowing developers to implement their own token refresh logic. It uses aiohttp for asynchronous HTTP requests.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_auth.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom abc import ABC, abstractmethod\n\n\nclass AbstractAuth(ABC):\n    \"\"\"Abstract class to make authenticated requests.\"\"\"\n\n    def __init__(self, websession: ClientSession, host: str):\n        \"\"\"Initialize the auth.\"\"\"\n        self.websession = websession\n        self.host = host\n\n    @abstractmethod\n    async def async_get_access_token(self) -> str:\n        \"\"\"Return a valid access token.\"\"\"\n\n    async def request(self, method, url, **kwargs) -> ClientResponse:\n        \"\"\"Make a request.\"\"\"\n        if headers := kwargs.pop(\"headers\", {}):\n            headers = dict(headers)\n\n        access_token = await self.async_get_access_token()\n        headers[\"authorization\"] = f\"Bearer {access_token}\"\n\n        return await self.websession.request(\n            method, f\"{self.host}/{url}\", **kwargs, headers=headers,\n        )\n```\n\n----------------------------------------\n\nTITLE: Component Setup Function Signature in Home Assistant\nDESCRIPTION: Shows the function signature for setting up a component in Home Assistant, demonstrating where the hass object is passed into the setup function.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_hass.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsetup(hass, config)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync_setup(hass, config)\n```\n\n----------------------------------------\n\nTITLE: Backward Compatible Approach for ha-state-icon\nDESCRIPTION: A backward compatible approach that works with both pre-2024.2 and post-2024.2 versions of Home Assistant by passing all relevant properties to the ha-state-icon component.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-01-30-ha-state-icon-properties-changes.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ha-state-icon\n  .hass=${hass}\n  .stateObj=${stateObj}\n  .state=${stateObj}\n></ha-state-icon>\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Method for Home Assistant Climate Entity in Python\nDESCRIPTION: This code demonstrates how to implement the toggle method for a Climate entity. It notes that implementation is optional and explains how it should interact with the HVAC mode.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/climate.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    # It's not mandatory to implement the `toggle` method as the base implementation\n    # will call `turn_on`/`turn_off` according to the current HVAC mode.\n\n    # If implemented, the `toggle` method should set `hvac_mode` to the right `HVACMode` by\n    # optimistically setting it from the service action handler\n    # or with the next state update.\n\n    def toggle(self):\n        \"\"\"Toggle the entity.\"\"\"\n\n    async def async_toggle(self):\n        \"\"\"Toggle the entity.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Repair Flow in Home Assistant\nDESCRIPTION: This code defines a repair flow for fixing issues in Home Assistant. It includes a custom RepairsFlow class and a function to create the flow based on the issue ID.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/repairs.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nimport voluptuous as vol\n\nfrom homeassistant import data_entry_flow\nfrom homeassistant.components.repairs import ConfirmRepairFlow, RepairsFlow\nfrom homeassistant.core import HomeAssistant\n\n\nclass Issue1RepairFlow(RepairsFlow):\n    \"\"\"Handler for an issue fixing flow.\"\"\"\n\n    async def async_step_init(\n        self, user_input: dict[str, str] | None = None\n    ) -> data_entry_flow.FlowResult:\n        \"\"\"Handle the first step of a fix flow.\"\"\"\n\n        return await (self.async_step_confirm())\n\n    async def async_step_confirm(\n        self, user_input: dict[str, str] | None = None\n    ) -> data_entry_flow.FlowResult:\n        \"\"\"Handle the confirm step of a fix flow.\"\"\"\n        if user_input is not None:\n            return self.async_create_entry(title=\"\", data={})\n\n        return self.async_show_form(step_id=\"confirm\", data_schema=vol.Schema({}))\n\n\nasync def async_create_fix_flow(\n    hass: HomeAssistant,\n    issue_id: str,\n    data: dict[str, str | int | float | None] | None,\n) -> RepairsFlow:\n    \"\"\"Create flow.\"\"\"\n    if issue_id == \"issue_1\":\n        return Issue1RepairFlow()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dockerfile for Home Assistant Add-on\nDESCRIPTION: This Dockerfile sets up the basic structure for a Home Assistant add-on. It uses the build argument to specify the base image, copies the run script, makes it executable, and sets it as the container's entrypoint.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG BUILD_FROM\nFROM $BUILD_FROM\n\n# Copy data for add-on\nCOPY run.sh /\nRUN chmod a+x /run.sh\n\nCMD [ \"/run.sh\" ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Turn On Methods in Home Assistant Humidifier Entity\nDESCRIPTION: Methods for turning on the humidifier device. Developers must implement either the synchronous turn_on() or asynchronous async_turn_on() method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/humidifier.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyHumidifierEntity(HumidifierEntity):\n    # Implement one of these methods.\n\n    def turn_on(self, **kwargs):\n        \"\"\"Turn the device on.\"\"\"\n\n    async def async_turn_on(self, **kwargs):\n        \"\"\"Turn the device on.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Sending Text Input via POST Request in JSON\nDESCRIPTION: Example of how to send a text input to the Conversation API using a POST request to the /api/conversation/process endpoint. The request includes the text to process and the language.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_conversation_api.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"text\": \"turn on the lights in the living room\",\n  \"language\": \"en\"\n}\n```\n\n----------------------------------------\n\nTITLE: Backwards Compatible Unloading of Last Config Entry in Python for Home Assistant\nDESCRIPTION: This snippet shows a backwards compatible method for unloading the last config entry in a custom integration. It works with both older and newer versions of Home Assistant by explicitly checking for other loaded entries.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2025-02-19-new-config-entry-states.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n    \"\"\"Unload a config entry.\"\"\"\n    other_loaded_entries = [\n        _entry\n        for _entry in hass.config_entries.async_loaded_entries(DOMAIN)\n        if _entry.entry_id != entry.entry_id\n    ]\n    if not other_loaded_entries:\n        # The last config entry is being unloaded, release shared resources, unregister services etc.\n        ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Entity Activation Methods in Python\nDESCRIPTION: This code snippet demonstrates how to implement the required activation methods for a Home Assistant scene entity. Developers must implement either the synchronous 'activate' method or the asynchronous 'async_activate' method to define the behavior when a scene is activated.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/scene.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySwitch(Scene):\n    # Implement one of these methods.\n\n    def activate(self, **kwargs: Any) -> None:\n        \"\"\"Activate scene. Try to get entities into requested state.\"\"\"\n\n    async def async_activate(self, **kwargs: Any) -> None:\n        \"\"\"Activate scene. Try to get entities into requested state.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Sync Authentication Class in Python\nDESCRIPTION: This example demonstrates how to use the synchronous authentication class to make authenticated requests using the requests library.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_auth.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom my_package import Auth\n\n\nauth = Auth(\"http://example.com/api\", \"secret_access_token\")\n\n# This will fetch data from http://example.com/api/lights\nresp = auth.request(\"get\", \"lights\")\nprint(\"HTTP response status code\", resp.status_code)\nprint(\"HTTP response JSON content\", resp.json())\n```\n\n----------------------------------------\n\nTITLE: Subscribing to SSDP Device Discoveries by Header\nDESCRIPTION: Code to register a callback for any SSDP device that includes the x-rincon-bootseq header. MATCH_ALL is used to match any value for this header.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import ssdp\nfrom homeassistant.const import MATCH_ALL\n\n...\n\nentry.async_on_unload(\n    ssdp.async_register_callback(\n        hass, _async_discovered_player, {\"x-rincon-bootseq\": MATCH_ALL}\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre and Post Backup Methods in Home Assistant\nDESCRIPTION: Minimal implementation of async_pre_backup and async_post_backup methods for handling operations before and after backup processes. These methods allow integrations to pause operations or prepare data for proper backup and restoration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/backup.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\n\n\nasync def async_pre_backup(hass: HomeAssistant) -> None:\n    \"\"\"Perform operations before a backup starts.\"\"\"\n\nasync def async_post_backup(hass: HomeAssistant) -> None:\n    \"\"\"Perform operations after a backup finishes.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: WebSocket Response for Long-Lived Access Token\nDESCRIPTION: JSON response format from the WebSocket API when a long-lived access token is successfully created. It includes the request ID, success status, and the generated token.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 11,\n    \"type\": \"result\",\n    \"success\": true,\n    \"result\": \"ABCDEFGH\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Install Methods for Update Entity\nDESCRIPTION: Methods to implement update installation functionality in a custom Update Entity. Supports optional version specification and backup creation before installation. Requires UpdateEntityFeature.INSTALL to be set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/update.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyUpdate(UpdateEntity):\n    # Implement one of these methods.\n\n    def install(\n        self, version: str | None, backup: bool, **kwargs: Any\n    ) -> None:\n        \"\"\"Install an update.\"\"\"\n\n    async def async_install(\n        self, version: str | None, backup: bool, **kwargs: Any\n    ) -> None:\n        \"\"\"Install an update.\n\n        Version can be specified to install a specific version. When `None`, the\n        latest version needs to be installed.\n\n        The backup parameter indicates a backup should be taken before\n        installing the update.\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Registering for USB Device Connection Notifications\nDESCRIPTION: Code to register a callback function that will be called when new USB devices are detected. Useful for dynamically detecting compatible hardware.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import usb\nfrom homeassistant.core import callback\n\n...\n\n@callback\ndef _async_check_for_usb() -> None:\n    \"\"\"Check for new compatible bluetooth USB adapters.\"\"\"\n\nentry.async_on_unload(\n    bluetooth.async_register_scan_request_callback(hass, _async_check_for_usb)\n)\n```\n\n----------------------------------------\n\nTITLE: Filtered Zeroconf Discovery Configuration in manifest.json\nDESCRIPTION: Example of Zeroconf discovery with name and properties filters for more specific matching of generic Zeroconf service types.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"zeroconf\": [\n    {\"type\":\"_axis-video._tcp.local.\",\"properties\":{\"macaddress\":\"00408c*\"}},\n    {\"type\":\"_axis-video._tcp.local.\",\"name\":\"example*\"},\n    {\"type\":\"_airplay._tcp.local.\",\"properties\":{\"am\":\"audioaccessory*\"}},\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up PassiveBluetoothProcessorCoordinator in Home Assistant Integration\nDESCRIPTION: Example implementation of async_setup_entry for an integration's __init__.py file using a PassiveBluetoothProcessorCoordinator. This sets up a Bluetooth device that primarily uses advertisements for data updates.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/bluetooth_fetching_data.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom homeassistant.config_entries import ConfigEntry\nfrom homeassistant.const import Platform\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.components.bluetooth import BluetoothScanningMode\nfrom homeassistant.components.bluetooth.passive_update_processor import (\n    PassiveBluetoothProcessorCoordinator,\n)\nfrom .const import DOMAIN\nfrom homeassistant.const import Platform\n\nPLATFORMS: list[Platform] = [Platform.SENSOR]\n\nfrom your_library import DataParser\n\n_LOGGER = logging.getLogger(__name__)\n\nasync def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n    \"\"\"Set up example BLE device from a config entry.\"\"\"\n    address = entry.unique_id\n    data = DataParser()\n    coordinator = hass.data.setdefault(DOMAIN, {})[\n        entry.entry_id\n    ] = PassiveBluetoothProcessorCoordinator(\n        hass,\n        _LOGGER,\n        address=address,\n        mode=BluetoothScanningMode.ACTIVE,\n        update_method=data.update,\n    )\n    await hass.config_entries.async_forward_entry_setups(entry, PLATFORMS)\n    entry.async_on_unload(\n        # only start after all platforms have had a chance to subscribe\n        coordinator.async_start()\n    )\n    return True\n```\n\n----------------------------------------\n\nTITLE: Event Subscription Success Response in Home Assistant WebSocket API\nDESCRIPTION: Server confirmation of a successful event subscription. This response indicates that the client will now receive matched events.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 18,\n  \"type\": \"result\",\n  \"success\": true,\n  \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Reauthentication Flow with Conditional Reload in Home Assistant\nDESCRIPTION: This code demonstrates how to implement a reauthentication flow using OAuth2 in Home Assistant. It includes handling of reauth steps and shows how to conditionally reload a configuration entry only when it has been updated during reauthentication.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-04-25-always-reload-after-successful-reauth-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass OAuth2FlowHandler(\n    config_entry_oauth2_flow.AbstractOAuth2FlowHandler, domain=DOMAIN\n):\n    \"\"\"Config flow to handle OAuth2 authentication.\"\"\"\n\n    reauth_entry: ConfigEntry | None = None\n\n    async def async_step_reauth(self, user_input=None):\n        \"\"\"Perform reauth upon an API authentication error.\"\"\"\n        self.reauth_entry = self.hass.config_entries.async_get_entry(\n            self.context[\"entry_id\"]\n        )\n        return await self.async_step_reauth_confirm()\n\n    async def async_step_reauth_confirm(self, user_input=None):\n        \"\"\"Dialog that informs the user that reauth is required.\"\"\"\n        if user_input is None:\n            return self.async_show_form(\n                step_id=\"reauth_confirm\",\n                data_schema=vol.Schema({}),\n            )\n        return await self.async_step_user()\n\n    async def async_oauth_create_entry(self, data: dict) -> dict:\n        \"\"\"Create an oauth config entry or update existing entry for reauth.\"\"\"\n        if self.reauth_entry:\n            # Only reload if the entry was updated\n            return self.async_update_reload_and_abort(\n                self.reauth_entry,\n                data=data,\n                reload_even_if_entry_is_unchanged=False,\n            )\n        return await super().async_oauth_create_entry(data)\n```\n\n----------------------------------------\n\nTITLE: Registering WebSocket Commands in Home Assistant Component Setup\nDESCRIPTION: This snippet shows how to register WebSocket commands in a Home Assistant component's setup method. It imports the websocket_api module and registers previously defined command handlers during the component initialization.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/extending/websocket-api.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import websocket_api\n\nasync def async_setup(hass, config):\n    \"\"\"Setup of your component.\"\"\"\n    websocket_api.async_register_command(hass, ws_get_panels)\n    websocket_api.async_register_command(hass, ws_handle_thumbnail)\n```\n\n----------------------------------------\n\nTITLE: Implementing async_move_todo_item Method in TodoListEntity\nDESCRIPTION: Implementation of the async_move_todo_item method for a To-do list entity that supports reordering to-do items. This method is required when the MOVE_TODO_ITEM feature is specified.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/todo.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.todo import TodoListEntity\n\nclass MyTodoListEntity(TodoListEntity):\n\n    async def async_move_todo_item(\n        self,\n        uid: str,\n        previous_uid: str | None = None\n    ) -> None:\n        \"\"\"Move an item in the To-do list.\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Backup Agent Listeners in async_setup_entry\nDESCRIPTION: Code snippet showing how to notify backup listeners when configuration entry states change, implemented in the async_setup_entry method. This ensures backup agents are properly updated when configurations change.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/backup.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n    \"\"\"Set up config entry.\"\"\"\n    # do things to set up your config entry\n\n    # Notify backup listeners\n    def notify_backup_listeners() -> None:\n        for listener in hass.data.get(DATA_BACKUP_AGENT_LISTENERS, []):\n            listener()\n    entry.async_on_unload(entry.async_on_state_change(notify_backup_listeners))\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Creating System Health Info Callback in Python\nDESCRIPTION: This snippet demonstrates how to implement the system health info callback function which returns a dictionary of information. It includes examples of returning static values and coroutines for operations that might take time to complete.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration_system_health.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def system_health_info(hass: HomeAssistant) -> dict[str, Any]:\n    \"\"\"Get info for the info page.\"\"\"\n    config_entry: ExampleConfigEntry = hass.config_entries.async_entries(DOMAIN)[0]\n    quota_info = await config_entry.runtime_data.async_get_quota_info()\n\n    return {\n        \"consumed_requests\": quota_info.consumed_requests,\n        \"remaining_requests\": quota_info.requests_remaining,\n        # checking the url can take a while, so set the coroutine in the info dict\n        \"can_reach_server\": system_health.async_check_can_reach_url(hass, ENDPOINT),\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Virtual Integration with 'Supported by' in Manifest JSON\nDESCRIPTION: JSON manifest example for creating a virtual integration that points to another integration for implementation. This example shows Yale Home locks being supported by the August integration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"yale_home\",\n  \"name\": \"Yale Home\",\n  \"integration_type\": \"virtual\",\n  \"supported_by\": \"august\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous and Asynchronous TTS Audio Methods\nDESCRIPTION: Implementation of methods for non-streaming TTS audio generation, supporting both synchronous and asynchronous approaches for services that require complete messages.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/tts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyTextToSpeechEntity(TextToSpeechEntity):\n    \"\"\"Represent a Text To Speech entity.\"\"\"\n\n    def get_tts_audio(\n        self, message: str, language: str, options: dict[str, Any]\n    ) -> TtsAudioType:\n        \"\"\"Load tts audio file from the engine.\"\"\"\n\n    async def async_get_tts_audio(\n        self, message: str, language: str, options: dict[str, Any]\n    ) -> TtsAudioType:\n        \"\"\"Load tts audio file from the engine.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Unloading Config Entry in Python for Home Assistant\nDESCRIPTION: This snippet demonstrates the recommended pattern for unloading a config entry in Home Assistant. It uses async_unload_platforms to unload platform components and performs additional cleanup.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2025-02-19-new-config-entry-states.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_unload_entry(hass: HomeAssistant, entry: MyConfigEntry) -> bool:\n    \"\"\"Unload a config entry.\"\"\"\n    # async_unload_platforms returns False if at least one platform did not unload\n    if (unload_ok := await hass.config_entries.async_unload_platforms(entry, PLATFORMS)):\n        entry.runtime_data.listener()\n    # Finish cleanup not related to platforms\n    return unload_ok\n```\n\n----------------------------------------\n\nTITLE: Query Answer Response Example in JSON\nDESCRIPTION: Example of a response from the Conversation API for a query-type input. It includes the response type, language, speech output, and data about the entities involved in answering the query.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_conversation_api.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": {\n    \"response_type\": \"query_answer\",\n    \"language\": \"en\",\n    \"speech\": {\n      \"plain\": {\n        \"speech\": \"It is 65 degrees\"\n      }\n    },\n    \"data\": {\n      \"targets\": [\n        {\n          \"type\": \"domain\",\n          \"name\": \"climate\",\n          \"id\": \"climate\"\n        }\n      ],\n      \"success\": [\n        {\n          \"type\": \"entity\",\n          \"name\": \"Ecobee\",\n          \"id\": \"climate.ecobee\"\n        }\n      ],\n      \"failed\": []\n    }\n  },\n  \"conversation_id\": \"<generated-id-from-ha>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Turn Off Method in Python\nDESCRIPTION: Example code for implementing the turn_off and async_turn_off methods in a custom Remote entity. These methods send power off commands to the device, with an optional activity parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/remote.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyRemote(RemoteEntity):\n\n    def turn_off(self, activity: str = None, **kwargs):\n         \"\"\"Send the power off command.\"\"\"\n\n    async def async_turn_off(self, activity: str = None, **kwargs):\n         \"\"\"Send the power off command.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Mode Setting Methods in Home Assistant Humidifier Entity\nDESCRIPTION: Methods for setting the operation mode of a humidifier entity. Developers must implement either the synchronous set_mode() or asynchronous async_set_mode() method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/humidifier.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyHumidifierEntity(HumidifierEntity):\n    # Implement one of these methods.\n\n    def set_mode(self, mode):\n        \"\"\"Set new target preset mode.\"\"\"\n\n    async def async_set_mode(self, mode):\n        \"\"\"Set new target preset mode.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Example User Configuration in JSON Format\nDESCRIPTION: Example of a JSON configuration that would be stored in options.json and accessed by the add-on script. This shows how user preferences are structured.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"target\": \"beer\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Cover Position in Python\nDESCRIPTION: Implementation of set_cover_position methods for a cover entity. Only implement if SUPPORT_SET_POSITION flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/cover.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyCover(CoverEntity):\n    # Implement one of these methods.\n\n    def set_cover_position(self, **kwargs):\n        \"\"\"Move the cover to a specific position.\"\"\"\n\n    async def async_set_cover_position(self, **kwargs):\n        \"\"\"Move the cover to a specific position.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Obtaining AsyncZeroconf Object in Home Assistant\nDESCRIPTION: Code to get the AsyncZeroconf instance from the Home Assistant context. Requires adding zeroconf to dependencies in the integration's manifest.json.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import zeroconf\n\n...\naiozc = await zeroconf.async_get_async_instance(hass)\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Trigger Generator in Python\nDESCRIPTION: Async function that generates a list of supported triggers for a given device ID\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_trigger.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.const import (\n    CONF_DEVICE_ID,\n    CONF_DOMAIN,\n    CONF_PLATFORM,\n    CONF_TYPE,\n)\nfrom homeassistant.helpers import device_registry as dr\n\nasync def async_get_triggers(hass, device_id):\n    \"\"\"Return a list of triggers.\"\"\"\n\n    device_registry = dr.async_get(hass)\n    device = device_registry.async_get(device_id)\n\n    triggers = []\n\n    # Determine which triggers are supported by this device_id ...\n\n    triggers.append({\n        # Required fields of TRIGGER_BASE_SCHEMA\n        CONF_PLATFORM: \"device\",\n        CONF_DOMAIN: \"mydomain\",\n        CONF_DEVICE_ID: device_id,\n        # Required fields of TRIGGER_SCHEMA\n        CONF_TYPE: \"water_detected\",\n    })\n\n    return triggers\n```\n\n----------------------------------------\n\nTITLE: Implementing Options Update Listener in Home Assistant\nDESCRIPTION: Example of an update listener function that handles options updates. This async function is called whenever the configuration entry options are updated.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_options_flow_handler.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def update_listener(hass, entry):\n    \"\"\"Handle options update.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Virtual Integration with IoT Standards in Manifest JSON\nDESCRIPTION: JSON manifest example for creating a virtual integration that uses existing IoT standards. This example shows the ultraloq product working via Z-Wave with no dedicated integration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"ultraloq\",\n  \"name\": \"ultraloq\",\n  \"integration_type\": \"virtual\",\n  \"iot_standards\": [\"zwave\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Events in Home Assistant Python Component\nDESCRIPTION: An example of a basic Home Assistant component that fires a custom event when loaded. The event contains JSON serializable data in the form of a dictionary with an 'answer' key set to 42.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_events.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDOMAIN = \"example_component\"\n\n\ndef setup(hass, config):\n    \"\"\"Set up is called when Home Assistant is loading our component.\"\"\"\n\n    # Fire event example_component_my_cool_event with event data answer=42\n    hass.bus.fire(\"example_component_my_cool_event\", {\"answer\": 42})\n\n    # Return successful setup\n    return True\n```\n\n----------------------------------------\n\nTITLE: Event Unsubscription Request in Home Assistant WebSocket API\nDESCRIPTION: Client message for unsubscribing from previously created event subscriptions. It requires the original subscription ID.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"unsubscribe_events\",\n  \"subscription\": 18\n}\n```\n\n----------------------------------------\n\nTITLE: Raising ServiceValidationError with Translation Support in Python\nDESCRIPTION: This snippet demonstrates how to raise a ServiceValidationError with translation support in Home Assistant. It sets the translation domain, key, and placeholders, allowing the error message to be fetched from the translation cache.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-03-15-exception-translations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_select_index(hass: HomeAssistant, index: int) -> None:\n    \"\"\"Setup the config entry for my device.\"\"\"\n    try:\n        check_index(index)\n    except ValueError as exc:\n        raise ServiceValidationError(\n            translation_domain=DOMAIN,\n            translation_key=\"invalid_index\",\n            translation_placeholders={\n                \"index\": index,\n                \"expected\": expected,\n            },\n        ) from exc\n```\n\n----------------------------------------\n\nTITLE: Retrieving Network Adapter Information\nDESCRIPTION: Code to get information about all network adapters available to Home Assistant. Useful for integrations that need to discover devices on the network.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import network\n\n...\nadapters = await network.async_get_adapters(hass)\n```\n\n----------------------------------------\n\nTITLE: Example Exception Types in Home Assistant Services\nDESCRIPTION: Shows the recommended exception types to use in Home Assistant services. ServiceValidationError should be used for user input errors, while HomeAssistantError is for system-level failures like device communication issues.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/raising_exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# For user input validation errors\nraise ServiceValidationError(\"Invalid temperature value\")\n\n# For device communication or system errors\nraise HomeAssistantError(\"Failed to connect to device\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Entity Methods for Turning On\nDESCRIPTION: Code snippet showing how to implement the methods for turning on a fan. This should be implemented when the FanEntityFeature.TURN_ON flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/fan.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass FanEntity(ToggleEntity):\n    # Implement one of these methods.\n\n    def turn_on(self, speed: Optional[str] = None, percentage: Optional[int] = None, preset_mode: Optional[str] = None, **kwargs: Any) -> None:\n        \"\"\"Turn on the fan.\"\"\"\n\n    async def async_turn_on(self, speed: Optional[str] = None, percentage: Optional[int] = None, preset_mode: Optional[str] = None, **kwargs: Any) -> None:\n        \"\"\"Turn on the fan.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Entity Methods for Toggling\nDESCRIPTION: Code snippet showing how to implement the methods for toggling a fan on/off. This is optional and should be implemented when both TURN_ON and TURN_OFF flags are set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/fan.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass FanEntity(ToggleEntity):\n    # Implement one of these methods.\n\n    def toggle(self, **kwargs: Any) -> None:\n        \"\"\"Toggle the fan.\"\"\"\n\n    async def async_toggle(self, **kwargs: Any) -> None:\n        \"\"\"Toggle the fan.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Testing Diagnostics with Python Snapshot Testing in Home Assistant\nDESCRIPTION: Example test case demonstrating how to implement snapshot testing for diagnostics in a Home Assistant component. The test compares diagnostic output against a stored snapshot reference, using the Syrupy testing framework with Home Assistant-specific extensions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-02-20-snapshot-testing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# tests/components/example/test_diagnostics.py\nasync def test_diagnostics(\n    hass: HomeAssistant,\n    hass_client: ClientSessionGenerator,\n    init_integration: MockConfigEntry,\n    snapshot: SnapshotAssertion,\n) -> None:\n    \"\"\"Test diagnostics.\"\"\"\n    assert (\n        await get_diagnostics_for_config_entry(hass, hass_client, init_integration)\n        == snapshot\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Error Messages in strings.json for Home Assistant\nDESCRIPTION: This JSON snippet shows how to define error messages in the strings.json file for Home Assistant. It includes a translation key and message template with placeholders for dynamic content.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-03-15-exception-translations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"exceptions\": {\n        \"invalid_index\": {\n            \"message\": \"An invalid index is selected, expected: {expected}, got: {index}\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alarm Arm Home Method in Python\nDESCRIPTION: Methods for implementing arm home functionality. Developers must implement either the synchronous or asynchronous version of the method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/alarm-control-panel.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyAlarm(AlarmControlPanelEntity):\n    # Implement one of these methods.\n\n    def alarm_arm_home(self, code: str | None = None) -> None:\n        \"\"\"Send arm home command.\"\"\"\n\n    async def async_alarm_arm_home(self, code: str | None = None) -> None:\n        \"\"\"Send arm home command.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Calling Synchronous Functions from Asynchronous Context in Home Assistant\nDESCRIPTION: Shows how to call a synchronous function from an asynchronous context using the async_add_executor_job method, which runs the function in a separate thread pool to avoid blocking the event loop.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_working_with_async.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# hub.update() is a sync function.\nresult = await hass.async_add_executor_job(hub.update)\n```\n\n----------------------------------------\n\nTITLE: Implementing Alarm Arm Night Method in Python\nDESCRIPTION: Methods for implementing arm night functionality. Developers must implement either the synchronous or asynchronous version of the method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/alarm-control-panel.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyAlarm(AlarmControlPanelEntity):\n    # Implement one of these methods.\n\n    def alarm_arm_night(self, code: str | None = None) -> None:\n        \"\"\"Send arm night command.\"\"\"\n\n    async def async_alarm_arm_night(self, code: str | None = None) -> None:\n        \"\"\"Send arm night command.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: WebSocket Command Example\nDESCRIPTION: Demonstrates how to make a WebSocket call to create a new user.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/data.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.hass.callWS({\n  type: 'config/auth/create',\n  name: 'Paulus',\n}).then(userResponse =>\n  console.log(\"Created user\", userResponse.user.id));\n```\n\n----------------------------------------\n\nTITLE: TTS Audio Request/Response Data Classes\nDESCRIPTION: Definition of data classes for TTS audio requests and responses, specifying the structure for language, options, and message/data generators.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/tts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass TTSAudioRequest:\n    \"\"\"Request to get TTS audio.\"\"\"\n\n    language: str\n    options: dict[str, Any]\n    message_gen: AsyncGenerator[str]\n\n\n@dataclass\nclass TTSAudioResponse:\n    \"\"\"Response containing TTS audio stream.\"\"\"\n\n    extension: str\n    data_gen: AsyncGenerator[bytes]\n```\n\n----------------------------------------\n\nTITLE: Implementing stop_valve Methods in Python for Home Assistant Valve Entities\nDESCRIPTION: These methods control stopping a valve's current action. Implement either the synchronous or asynchronous version based on your integration needs, but only if the SUPPORT_STOP flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/valve.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyValve(ValveEntity):\n    # Implement one of these methods.\n\n    def stop_valve(self) -> None:\n        \"\"\"Stop the valve.\"\"\"\n\n    async def async_stop_valve(self) -> None:\n        \"\"\"Stop the valve.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Source Method for Camera Entity\nDESCRIPTION: Example of implementing the stream_source method to provide an RTSP URL or other source compatible with ffmpeg. This requires the CameraEntityFeature.STREAM feature flag.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/camera.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyCamera(Camera):\n\n    async def stream_source(self) -> str | None:\n        \"\"\"Return the source of the stream.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Token Response in Home Assistant\nDESCRIPTION: Code showing how external apps should respond to authentication token requests. The function passes back a success boolean and an object containing the access token and its expiration time in seconds.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// To be called by external app\nwindow.externalAuthSetToken(true, {\n  access_token: \"qwere\",\n  expires_in: 1800\n});\n\n// If unable to get new access token\nwindow.externalAuthSetToken(false);\n```\n\n----------------------------------------\n\nTITLE: Implementing ScannerEntity Properties for Home Assistant Device Tracker\nDESCRIPTION: Required properties for implementing a ScannerEntity class that reports device connection state on local network. Properties include battery level, hostname, IP address, connection state, MAC address, and source type.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/device-tracker.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyScannerEntity(ScannerEntity):\n    @property\n    def battery_level(self) -> int | None:\n        return None\n        \n    @property\n    def hostname(self) -> str | None:\n        return None\n        \n    @property\n    def ip_address(self) -> str | None:\n        return None\n        \n    @property\n    def is_connected(self) -> bool:\n        # Required property\n        return True\n        \n    @property\n    def mac_address(self) -> str | None:\n        return None\n        \n    @property\n    def source_type(self) -> SourceType:\n        return SourceType.ROUTER\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Stale Device Removal in Python for Home Assistant\nDESCRIPTION: This code snippet demonstrates how to implement automatic stale device removal using a DataUpdateCoordinator in Home Assistant. It checks for removed devices during data updates and removes them from the device registry.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/stale-devices.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCoordinator(DataUpdateCoordinator[dict[str, MyDevice]]):\n    \"\"\"Class to manage fetching data.\"\"\"\n\n    def __init__(self, hass: HomeAssistant, client: MyClient) -> None:\n        \"\"\"Initialize coordinator.\"\"\"\n        super().__init__(\n            hass,\n            logger=LOGGER,\n            name=DOMAIN,\n            update_interval=timedelta(minutes=1),\n        )\n        self.client = client\n        self.previous_devices: set[str] = set()\n\n    async def _async_update_data(self) -> dict[str, MyDevice]:\n        try:\n            data = await self.client.get_data()\n        except MyException as ex:\n            raise UpdateFailed(f\"The service is unavailable: {ex}\")\n        current_devices = set(data)\n        if (stale_devices := self.previous_devices - current_devices):\n            device_registry = dr.async_get(self.hass)\n            for device_id in stale_devices:\n                device = device_registry.async_get_device(identifiers={(DOMAIN, device_id)})\n                if device:\n                    device_registry.async_update_device(\n                        device_id=device.id,\n                        remove_config_entry_id=self.config_entry.entry_id,\n                    )\n        self.previous_devices = current_devices\n        return data\n```\n\n----------------------------------------\n\nTITLE: Authenticating REST API Requests with curl\nDESCRIPTION: Demonstrates how to make an authenticated REST API request to Home Assistant using curl. The request includes the required Authorization header with a bearer token.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  http://IP_ADDRESS:8123/ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching with UpdateFailed in Home Assistant Coordinator\nDESCRIPTION: Example of a DataUpdateCoordinator that raises UpdateFailed when the service is unavailable, which automatically marks dependent entities as unavailable.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-unavailable.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCoordinator(DataUpdateCoordinator[dict[str, MyDevice]]):\n    \"\"\"Class to manage fetching data.\"\"\"\n\n    def __init__(self, hass: HomeAssistant, client: MyClient) -> None:\n        \"\"\"Initialize coordinator.\"\"\"\n        super().__init__(\n            hass,\n            logger=LOGGER,\n            name=DOMAIN,\n            update_interval=timedelta(minutes=1),\n        )\n        self.client = client\n\n    async def _async_update_data(self) -> dict[str, MyDevice]:\n        try:\n            return await self.client.get_data()\n        except MyException as ex:\n            raise UpdateFailed(f\"The service is unavailable: {ex}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Entity Methods for Turning Off\nDESCRIPTION: Code snippet showing how to implement the methods for turning off a fan. This should be implemented when the FanEntityFeature.TURN_OFF flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/fan.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass FanEntity(ToggleEntity):\n    # Implement one of these methods.\n\n    def turn_off(self, **kwargs: Any) -> None:\n        \"\"\"Turn the fan off.\"\"\"\n\n    async def async_turn_off(self, **kwargs: Any) -> None:\n        \"\"\"Turn the fan off.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Area-Based Dashboard Strategy Implementation\nDESCRIPTION: A complete TypeScript implementation that creates a dashboard with views for each area in Home Assistant. The dashboard strategy fetches area, device, and entity data, while the view strategy generates cards for entities in each area.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-strategy.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass StrategyDashboardDemo {\n  static async generate(config, hass) {\n    // Query all data we need. We will make it available to views by storing it in strategy options.\n    const [areas, devices, entities] = await Promise.all([\n      hass.callWS({ type: \"config/area_registry/list\" }),\n      hass.callWS({ type: \"config/device_registry/list\" }),\n      hass.callWS({ type: \"config/entity_registry/list\" }),\n    ]);\n\n    // Each view is based on a strategy so we delay rendering until it's opened\n    return {\n      views: areas.map((area) => ({\n        strategy: {\n          type: \"custom:my-demo\",\n          area, \n          devices, \n          entities,\n        },\n        title: area.name,\n        path: area.area_id,\n      })),\n    };\n  }\n}\n\nclass StrategyViewDemo {\n  static async generate(config, hass) {\n    const { area, devices, entities } = config;\n\n    const areaDevices = new Set();\n\n    // Find all devices linked to this area\n    for (const device of devices) {\n      if (device.area_id === area.area_id) {\n        areaDevices.add(device.id);\n      }\n    }\n\n    const cards = [];\n\n    // Find all entities directly linked to this area\n    // or linked to a device linked to this area.\n    for (const entity of entities) {\n      if (\n        entity.area_id\n          ? entity.area_id === area.area_id\n          : areaDevices.has(entity.device_id)\n      ) {\n        cards.push({\n          type: \"button\",\n          entity: entity.entity_id,\n        });\n      }\n    }\n\n    return {\n      cards: [\n        {\n          type: \"grid\",\n          cards,\n        },\n      ],\n    };\n  }\n}\n\ncustomElements.define(\"ll-strategy-dashboard-my-demo\", StrategyDashboardDemo);\ncustomElements.define(\"ll-strategy-view-my-demo\", StrategyViewDemo);\n```\n\n----------------------------------------\n\nTITLE: Implementing async_track_unavailable in Python for Home Assistant Bluetooth API\nDESCRIPTION: This code snippet demonstrates how to use the updated async_track_unavailable API in Home Assistant Core 2022.10. It sets up a callback function to handle when a Bluetooth device becomes unavailable, using the BluetoothServiceInfoBleak object.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-09-16-bluetooth-unavailable-api-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\ndef _unavailable_callback(info: bluetooth.BluetoothServiceInfoBleak) -> None:\n    _LOGGER.debug(\"%s is no longer seen\", info.address)\n   \ncancel = bluetooth.async_track_unavailable(hass, _unavailable_callback, \"44:44:33:11:23:42\", connectable=True)\n```\n\n----------------------------------------\n\nTITLE: Validating Device Trigger Configuration in Python\nDESCRIPTION: Async function to validate device trigger configuration parameters before they are used\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_trigger.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_validate_trigger_config(hass: HomeAssistant, config: ConfigType) -> ConfigType:\n    \"\"\"Validate config.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Climate Entity Toggle Method in Python\nDESCRIPTION: Default implementation of the async_toggle method for ClimateEntity. This method checks if the current HVAC mode is OFF and calls turn_on if it is, otherwise it calls turn_off. This provides easy toggling functionality for climate entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-02-25-Climate-toggle-service.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_toggle(self) -> None:\n    \"\"\"Toggle the entity.\"\"\"\n    if self.hvac_mode == HVACMode.OFF:\n        await self.async_turn_on()\n    else:\n        await self.async_turn_off()\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Search in Python\nDESCRIPTION: Implements media search functionality with support for query parameters and filtering.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/media-player.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyMediaPlayer(MediaPlayerEntity):\n\n    async def async_search_media(\n        self,\n        query: SearchMediaQuery,\n    ) -> SearchMedia:\n        \"\"\"Search the media player.\"\"\"\n        result = await my_client.search(query=query.search_query)\n        return SearchMedia(result=result)\n```\n\n----------------------------------------\n\nTITLE: Type Checking Import Pattern\nDESCRIPTION: Shows how to handle imports that are only needed for type checking purposes. The imports are guarded by TYPE_CHECKING to prevent them from being imported during runtime execution.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_imports.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from some_module import SomeClass  # Only imported for type checking\n\ndef some_function() -> SomeClass:\n    # Function implementation\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Preset Mode Setting for Home Assistant Climate Entity in Python\nDESCRIPTION: This snippet shows how to implement the method for setting the preset mode in a Climate entity. It provides both synchronous and asynchronous implementations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/climate.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    # Implement one of these methods.\n\n    def set_preset_mode(self, preset_mode):\n        \"\"\"Set new target preset mode.\"\"\"\n\n    async def async_set_preset_mode(self, preset_mode):\n        \"\"\"Set new target preset mode.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Fetching All Discovered Bluetooth Devices in Python\nDESCRIPTION: This snippet shows how to access the list of previously discovered Bluetooth devices that are still present. It returns a list of BluetoothServiceInfoBleak objects for all currently known devices.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\nservice_infos = bluetooth.async_discovered_service_info(hass, connectable=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Store Class\nDESCRIPTION: Example of creating a custom Storage class that inherits from Store with a list of integers as the storage type.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-07-08-generic-store.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomStorage(Store[list[int]]):\n```\n\n----------------------------------------\n\nTITLE: Parsing User Configuration with Bashio\nDESCRIPTION: Shows how to use Bashio to parse user configuration from the options.json file. This script demonstrates accessing configuration values from a persistent storage location.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCONFIG_PATH=/data/options.json\n\nTARGET=\"$(bashio::config 'target')\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Secondary Device Triggers in Python for Home Assistant\nDESCRIPTION: Example code demonstrating how to implement device triggers with secondary flag marking in Home Assistant integrations. Shows async function that returns a list of triggers for a device, including configuration of required fields and metadata for secondary triggers.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.const import (\n    CONF_DEVICE_ID,\n    CONF_DOMAIN,\n    CONF_PLATFORM,\n    CONF_TYPE,\n)\nfrom homeassistant.helpers import device_registry as dr\n\nasync def async_get_triggers(hass, device_id):\n    \"\"\"Return a list of triggers.\"\"\"\n\n    device_registry = dr.async_get(hass)\n    device = device_registry.async_get(device_id)\n\n    triggers = []\n\n    # Determine which triggers are supported by this device_id ...\n\n    triggers.append({\n        # Required fields of TRIGGER_BASE_SCHEMA\n        CONF_PLATFORM: \"device\",\n        CONF_DOMAIN: \"mydomain\",\n        CONF_DEVICE_ID: device_id,\n        # Required fields of TRIGGER_SCHEMA\n        CONF_TYPE: \"less_important_trigger\",\n        # Mark the trigger as secondary\n        \"metadata\": {\"secondary\": True},\n    })\n\n    return triggers\n```\n\n----------------------------------------\n\nTITLE: Permission Checking Implementation in Python\nDESCRIPTION: Demonstrates how to check user permissions using the Home Assistant permissions API.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_permissions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.exceptions import Unauthorized\nfrom homeassistant.permissions.const import POLICY_READ, POLICY_CONTROL, POLICY_EDIT\n\n# Raise error if user is not an admin\nif not user.is_admin:\n    raise Unauthorized()\n\n\n# Raise error if user does not have access to control an entity\n# Available policies: POLICY_READ, POLICY_CONTROL, POLICY_EDIT\nif not user.permissions.check_entity(entity_id, POLICY_CONTROL):\n    raise Unauthorized()\n```\n\n----------------------------------------\n\nTITLE: Implementing DEFROSTING HVACAction in Home Assistant Climate Entity\nDESCRIPTION: Example implementation of a climate entity that returns DEFROSTING as its HVAC action. This demonstrates how to use the new HVACAction.DEFROSTING state to indicate when a climate system is in defrost mode to remove accumulated ice.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-07-07-climate-hvacaction-defrosting.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.climate.const import HVACAction\n\nclass MyClimateEntity(ClimateEntity):\n    \"\"\"Implementation of my climate entity.\"\"\"\n\n    def hvac_action(self) -> HVACAction | None:\n        \"\"\"Return the current running hvac operation if supported.\"\"\"\n        return HVACAction.DEFROSTING\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Translated Entity Name in Python for Home Assistant Sensor\nDESCRIPTION: This Python code snippet shows how to set up a sensor entity with a translated name in Home Assistant. It demonstrates the use of '_attr_has_entity_name' and '_attr_translation_key' to enable translation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-translations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySensor(SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n\n    _attr_has_entity_name = True\n    _attr_translation_key = \"phase_voltage\"\n\n    def __init__(self, device_id: str) -> None:\n        \"\"\"Initialize the sensor.\"\"\"\n        self._attr_device_info = DeviceInfo(\n            identifiers={(DOMAIN, device_id)},\n            name=\"My device\",\n        )\n```\n\n----------------------------------------\n\nTITLE: Calling a Service in Home Assistant via WebSocket API\nDESCRIPTION: Example of calling a service action through the WebSocket API with optional service_data and target parameters. The return_response flag must be included for service actions that return data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 24,\n  \"type\": \"call_service\",\n  \"domain\": \"light\",\n  \"service\": \"turn_on\",\n  // Optional\n  \"service_data\": {\n    \"color_name\": \"beige\",\n    \"brightness\": \"101\"\n  }\n  // Optional\n  \"target\": {\n    \"entity_id\": \"light.kitchen\"\n  }\n  // Must be included for service actions that return response data\n  \"return_response\": true\n}\n```\n\n----------------------------------------\n\nTITLE: REST API Endpoint with Permissions in Python\nDESCRIPTION: Implementation of a REST API endpoint that checks for admin permissions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_permissions.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import Context\nfrom homeassistant.components.http.view import HomeAssistantView\nfrom homeassistant.exceptions import Unauthorized\n\n\nclass MyView(HomeAssistantView):\n    \"\"\"View to handle Status requests.\"\"\"\n\n    url = \"/api/my-component/my-api\"\n    name = \"api:my-component:my-api\"\n\n    async def post(self, request):\n        \"\"\"Notify that the API is running.\"\"\"\n        hass = request.app[\"hass\"]\n        user = request[\"hass_user\"]\n\n        if not user.is_admin:\n            raise Unauthorized()\n\n        hass.bus.async_fire(\n            \"my-component-api-running\", context=Context(user_id=user.id)\n        )\n\n        return self.json_message(\"Done.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing User Step in Config Flow\nDESCRIPTION: This code demonstrates how to implement the 'user' step in a config flow. It shows a form with a password field and handles user input.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport voluptuous as vol\n\nclass ExampleConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):\n    async def async_step_user(self, info):\n        if info is not None:\n            pass  # TODO: process info\n\n        return self.async_show_form(\n            step_id=\"user\", data_schema=vol.Schema({vol.Required(\"password\"): str})\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Humidity Setting Methods in Home Assistant Humidifier Entity\nDESCRIPTION: Methods for setting the target humidity level. If the current mode doesn't support humidity adjustment, the device should change to a mode that does.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/humidifier.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyHumidifierEntity(HumidifierEntity):\n    # Implement one of these methods.\n\n    def set_humidity(self, humidity):\n        \"\"\"Set new target humidity.\"\"\"\n\n    async def async_set_humidity(self, humidity):\n        \"\"\"Set new target humidity.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Comprehensive Strategy\nDESCRIPTION: YAML configuration that applies the comprehensive area-based dashboard strategy to a Home Assistant dashboard. This simple configuration references the custom strategy by its type name.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-strategy.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\n  type: custom:my-demo\n```\n\n----------------------------------------\n\nTITLE: Implementing Alarm Disarm Method in Python\nDESCRIPTION: Methods for implementing alarm disarm functionality. Developers must implement either the synchronous or asynchronous version of the method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/alarm-control-panel.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyAlarm(AlarmControlPanelEntity):\n    # Implement one of these methods.\n\n    def alarm_disarm(self, code: str | None = None) -> None:\n        \"\"\"Send disarm command.\"\"\"\n\n    async def async_alarm_disarm(self, code: str | None = None) -> None:\n        \"\"\"Send disarm command.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Entity Methods for Oscillation\nDESCRIPTION: Code snippet showing how to implement the methods for controlling fan oscillation. This should be implemented when the FanEntityFeature.OSCILLATE flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/fan.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass FanEntity(ToggleEntity):\n    # Implement one of these methods.\n\n    def oscillate(self, oscillating: bool) -> None:\n        \"\"\"Oscillate the fan.\"\"\"\n\n    async def async_oscillate(self, oscillating: bool) -> None:\n        \"\"\"Oscillate the fan.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Entity State with Localization in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the new 'formatEntityState' method of the 'hass' object to format an entity state with localization support. The method returns the formatted state based on the user's language settings.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-08-29-hass-format-state.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhass.formatEntityState(hass.states[\"cover.living_room_shutter\"]);\n```\n\n----------------------------------------\n\nTITLE: Entity Service Handler with Permissions in Python\nDESCRIPTION: Implementation of a service handler that checks entity permissions before execution.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_permissions.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.exceptions import Unauthorized, UnknownUser\nfrom homeassistant.auth.permissions.const import POLICY_CONTROL\n\n\nasync def handle_entity_service(call):\n    \"\"\"Handle a service action call.\"\"\"\n    entity_ids = call.data[\"entity_id\"]\n\n    for entity_id in entity_ids:\n        if call.context.user_id:\n            user = await hass.auth.async_get_user(call.context.user_id)\n\n            if user is None:\n                raise UnknownUser(\n                    context=call.context,\n                    entity_id=entity_id,\n                    permission=POLICY_CONTROL,\n                )\n\n            if not user.permissions.check_entity(entity_id, POLICY_CONTROL):\n                raise Unauthorized(\n                    context=call.context,\n                    entity_id=entity_id,\n                    permission=POLICY_CONTROL,\n                )\n\n        # Do action on entity\n\n\nasync def async_setup(hass, config):\n    hass.services.async_register(DOMAIN, \"my_service\", handle_entity_service)\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementing Motion Detection Enable Methods\nDESCRIPTION: Methods for enabling motion detection functionality in a camera entity. Implement either enable_motion_detection or the async version.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/camera.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyCamera(Camera):\n    # Implement one of these methods.\n\n    def enable_motion_detection(self) -> None:\n        \"\"\"Enable motion detection in the camera.\"\"\"\n\n    async def async_enable_motion_detection(self) -> None:\n        \"\"\"Enable motion detection in the camera.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Calling Asynchronous Functions from Thread Context in Home Assistant\nDESCRIPTION: Demonstrates how to call an async function from a synchronous context using asyncio.run_coroutine_threadsafe. This example shows a wrapper function that blocks until the async function completes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_working_with_async.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\n\ndef say_hello(hass, target):\n    return asyncio.run_coroutine_threadsafe(\n        async_say_hello(hass, target), hass.loop\n    ).result()\n\n\nasync def async_say_hello(hass, target):\n    return f\"Hello {target}!\"\n```\n\n----------------------------------------\n\nTITLE: Defining Context Requirements for Intent Matching in YAML\nDESCRIPTION: This snippet demonstrates how to use requires_context and excludes_context to differentiate between similar sentences based on entity domains or to provide different responses within the same intent.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/template-sentence-syntax.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: \"en\"\nintents:\n  HassLightSet:\n    data:\n      - sentences:\n          - \"set {name} brightness to maximum\"\n        requires_context:\n          domain: \"light\"\n        slots:\n          brightness: 100\n      - sentences:\n          - \"set {area} brightness to maximum\"\n        slots:\n          brightness: 100\n\n  HassTurnOn:\n    data:\n      - sentences:\n          - \"activate {name}\"\n        excludes_context:\n          domain: \"cover\"\n        response: \"default\"\n      - sentences:\n          - \"activate {name}\"\n        requires_context:\n          domain: \"cover\"\n        response: \"cover\"\n```\n\n----------------------------------------\n\nTITLE: Getting Learned Bluetooth Advertising Interval in Python\nDESCRIPTION: This snippet demonstrates how to get the learned advertising interval for a Bluetooth device. This interval is automatically determined based on the device's regular broadcasting pattern and is used for availability tracking.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\nlearned_interval = bluetooth.async_get_learned_advertising_interval(hass, \"44:44:33:11:23:42\")\n```\n\n----------------------------------------\n\nTITLE: Managing Unique IDs in Config Flow Steps\nDESCRIPTION: This Python code shows how to set a unique ID for a config flow and abort if a configuration with the same ID already exists.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Assign a unique ID to the flow and abort the flow\n# if another flow with the same unique ID is in progress\nawait self.async_set_unique_id(device_unique_id)\n\n# Abort the flow if a config entry with the same unique ID exists\nself._abort_if_unique_id_configured()\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Minimum/Maximum Color Temperature in Kelvin\nDESCRIPTION: Example of how to define dynamic property methods for minimum and maximum color temperature in Kelvin, converting from mireds when necessary using the color utility functions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-12-14-kelvin-preferred-color-temperature-unit.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.util import color as color_util\n\nclass MyLight(LightEntity):\n    \"\"\"Representation of a light.\"\"\"\n\n    # Old\n    # def min_mireds(self) -> int:\n    #     \"\"\"Return the coldest color_temp that this light supports.\"\"\"\n    #     return device.coldest_temperature\n    #\n    # def max_mireds(self) -> int:\n    #     \"\"\"Return the warmest color_temp that this light supports.\"\"\"\n    #     return device.warmest_temperature\n\n    # New\n    def min_color_temp_kelvin(self) -> int:\n        \"\"\"Return the warmest color_temp that this light supports.\"\"\"\n        return color_util.color_temperature_mired_to_kelvin(device.warmest_temperature)\n\n    def max_color_temp_kelvin(self) -> int:\n        \"\"\"Return the coldest color_temp that this light supports.\"\"\"\n        return color_util.color_temperature_mired_to_kelvin(device.coldest_temperature)\n```\n\n----------------------------------------\n\nTITLE: Looking up SSDP Devices by Service Type\nDESCRIPTION: Code to retrieve all SSDP devices matching a specific Service Type (ST). Returns a list of discovery_info objects, such as all Sonos players on the network.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import ssdp\n\n...\n\ndiscovery_infos = await ssdp.async_get_discovery_info_by_st(hass, \"urn:schemas-upnp-org:device:ZonePlayer:1\")\nfor discovery_info in discovery_infos:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Determining if a Bluetooth Scanner is Running in Python\nDESCRIPTION: This snippet demonstrates how to check if there's a scanner running that can receive advertisements or generate BLEDevice objects. This is useful for raising helpful error messages during setup if no connectable scanners are available.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\ncount = bluetooth.async_scanner_count(hass, connectable=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Removal Function for Home Assistant Integrations\nDESCRIPTION: Function to implement in the integration's __init__.py module to enable device removal from the UI. When implemented, this allows users to delete a device through the interface, and the integration can perform necessary cleanup before the device is removed from the registry.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_registry_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def async_remove_config_entry_device(\n    hass: HomeAssistant, config_entry: ConfigEntry, device_entry: DeviceEntry\n) -> bool:\n    \"\"\"Remove a config entry from a device.\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Removing External Bluetooth Scanner\nDESCRIPTION: Shows how to permanently remove an external Bluetooth scanner and its associated advertisement history using the bluetooth.async_remove_scanner API.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\nbluetooth.async_remove_scanner(hass, source)\n```\n\n----------------------------------------\n\nTITLE: Custom Version Comparison for Shelly Gen1 Devices in Home Assistant (Python)\nDESCRIPTION: A custom implementation of the version_is_newer() method for Shelly gen1 devices. It uses AwesomeVersion with specific strategies to ensure proper comparison of semantic versioning.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-09-28-update-version-compare.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef version_is_newer(self, latest_version: str, installed_version: str) -> bool:\n    \"\"\"Return True if available version is newer then installed version.\"\"\"\n    return AwesomeVersion(\n        latest_version,\n        find_first_match=True,\n        ensure_strategy=[AwesomeVersionStrategy.SEMVER],\n    ) > AwesomeVersion(\n        installed_version,\n        find_first_match=True,\n        ensure_strategy=[AwesomeVersionStrategy.SEMVER],\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Availability in Home Assistant CoordinatorEntity\nDESCRIPTION: Example of a SensorEntity that extends CoordinatorEntity to handle availability. It checks both the coordinator's availability and whether the entity's identifier exists in the data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-unavailable.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MySensor(SensorEntity, CoordinatorEntity[MyCoordinator]):\n\n    @property\n    def available(self) -> bool:\n        \"\"\"Return True if entity is available.\"\"\"\n        return super().available and self.identifier in self.coordinator.data\n```\n\n----------------------------------------\n\nTITLE: Fetching Services Response in Home Assistant WebSocket API\nDESCRIPTION: Response format for a successful service actions retrieval request, containing all available services in the result object.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"result\",\n  \"success\": true,\n  \"result\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Cover Implementation in Python\nDESCRIPTION: Implementation of open_cover methods for a cover entity. Only implement if SUPPORT_OPEN flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/cover.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCover(CoverEntity):\n    # Implement one of these methods.\n\n    def open_cover(self, **kwargs):\n        \"\"\"Open the cover.\"\"\"\n\n    async def async_open_cover(self, **kwargs):\n        \"\"\"Open the cover.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Context Creation for Service Calls in Python\nDESCRIPTION: Shows how to create and use context objects for service calls with user permissions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_permissions.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import Context\n\nawait hass.services.async_call(\n    \"homeassistant\", \"stop\", context=Context(user_id=user.id), blocking=True\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Config Entry with New Device Details\nDESCRIPTION: This Python snippet demonstrates how to update a config entry's data when device access details change, using the unique ID to identify the correct entry.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait self.async_set_unique_id(serial_number)\nself._abort_if_unique_id_configured(updates={CONF_HOST: host, CONF_PORT: port})\n```\n\n----------------------------------------\n\nTITLE: Implementing set_valve_position Methods in Python for Home Assistant Valve Entities\nDESCRIPTION: These methods control moving a valve to a specific position. Implement either the synchronous or asynchronous version, but only if the SUPPORT_SET_POSITION flag is set. This method is required for valves that support position control.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/valve.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyValve(ValveEntity):\n    # Implement one of these methods.\n\n    def set_valve_position(self, position: int) -> None:\n        \"\"\"Move the valve to a specific position.\"\"\"\n\n    async def async_set_valve_position(self, position: int) -> None:\n        \"\"\"Move the valve to a specific position.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Converting Brightness to Value in Python\nDESCRIPTION: Utility function to convert a brightness value (1-255) to a scaled value within a specified range. Particularly useful for light brightness conversions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-12-05-scaling-utils.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef brightness_to_value(low_high_range: tuple[float, float], brightness: int) -> float:\n    \"\"\"Given a brightness_scale convert a brightness to a single value.\n\n    Do not include 0 if the light is off for value 0.\n\n    Given a brightness low_high_range of (1,100) this function\n    will return:\n\n    255: 100.0\n    127: ~49.8039\n    10: ~3.9216\n    \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Turn Off Methods in Home Assistant Humidifier Entity\nDESCRIPTION: Methods for turning off the humidifier device. Developers must implement either the synchronous turn_off() or asynchronous async_turn_off() method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/humidifier.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyHumidifierEntity(HumidifierEntity):\n    # Implement one of these methods.\n\n    def turn_off(self, **kwargs):\n        \"\"\"Turn the device off.\"\"\"\n\n    async def async_turn_off(self, **kwargs):\n        \"\"\"Turn the device off.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Learn Command Method in Python\nDESCRIPTION: Example code for implementing the learn_command and async_learn_command methods in a custom Remote entity. These methods are only required if the SUPPORT_LEARN_COMMAND flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/remote.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyRemote(RemoteEntity):\n\n    def learn_command(self, **kwargs):\n        \"\"\"Learn a command from a device.\"\"\"\n\n    async def async_learn_command(self, **kwargs):\n        \"\"\"Learn a command from a device.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with MediaPlayerEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Media Player are replaced with the MediaPlayerEntityFeature enum. This enum provides equivalent functionality for supported features in media player entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.media_player import MediaPlayerEntityFeature\n\n# Use MediaPlayerEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Implementing Coroutine Function in Python for Home Assistant\nDESCRIPTION: This snippet demonstrates how to define and use a coroutine function in Home Assistant. It shows the async/await syntax and how to schedule the coroutine on the event loop.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_categorizing_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_look_my_coroutine(target):\n    result = await entity.async_turn_on()\n    if result:\n        print(f\"hello {target}\")\n\n\nhass.loop.create_task(async_look_my_coroutine(\"world\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Switch Entity as Main Device Feature in Python\nDESCRIPTION: Demonstrates how to create a switch entity that represents the main feature of a device using class attributes. The entity name is set to None as it's the primary feature.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.switch import SwitchEntity\n\n\nclass MySwitch(SwitchEntity):\n    _attr_has_entity_name = True\n    _attr_name = None\n\n```\n\n----------------------------------------\n\nTITLE: Implementing hass-action Events in Home Assistant Custom Cards\nDESCRIPTION: Demonstrates how to create and dispatch hass-action events for handling tap and hold actions in custom cards. The example shows configuration for both more-info and assist actions, including event creation and dispatching with proper bubbling and composition.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-07-07-action-event-custom-cards.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Define the action config\nconst actionConfig = {\n  entity: \"sensor.temperature\",\n  tap_action: {\n    action: \"more-info\",\n  },\n  hold_action: {\n    action: \"assist\",\n    start_listening: true,\n  },\n};\n\n// Open more info on tap action\nconst event = new Event(\"hass-action\", {\n  bubbles: true,\n  composed: true,\n});\nevent.detail = {\n  config: actionConfig,\n  action: \"tap\",\n};\nthis.dispatchEvent(event);\n\n// Open assist dialog on hold action\nconst event = new Event(\"hass-action\", {\n  bubbles: true,\n  composed: true,\n});\nevent.detail = {\n  config: actionConfig,\n  action: \"hold\",\n};\nthis.dispatchEvent(event);\n```\n\n----------------------------------------\n\nTITLE: Light Control with Python Requests\nDESCRIPTION: Example of using Python's Requests library to turn on a light entity via the Home Assistant API.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nfrom requests import post\n\nurl = \"http://localhost:8123/api/services/light/turn_on\"\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\ndata = {\"entity_id\": \"light.study_light\"}\n\nresponse = post(url, headers=headers, json=data)\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Handling HomeAssistant Constructor Change in Python\nDESCRIPTION: Demonstrates how to handle the breaking change in HomeAssistant.__init__ constructor that now requires a config_dir parameter. Includes a try-except block for backward compatibility support between old and new versions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-08-29-homeassistant-changed-signature.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    try:\n        hass = HomeAssistant()  # pylint: disable=no-value-for-parameter\n    except TypeError:\n        hass = HomeAssistant(config_dir)  # pylint: disable=too-many-function-args\n```\n\n----------------------------------------\n\nTITLE: Running linters on individual files\nDESCRIPTION: Commands to run specific linters (ruff and pylint) on individual files to check for issues.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_testing.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nruff check homeassistant/core.py\npylint homeassistant/core.py\n```\n\n----------------------------------------\n\nTITLE: Implementing a Button Press Card Feature in JavaScript\nDESCRIPTION: This code creates a custom button press card feature for button entities in Home Assistant. It defines a LitElement component with properties for the Home Assistant instance, configuration, and state object. The feature includes styling with CSS variables for better integration with Home Assistant's design.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-card-feature.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  LitElement,\n  html,\n  css,\n} from \"https://unpkg.com/lit-element@2.0.1/lit-element.js?module\";\n\nconst supportsButtonPressCardFeature = (stateObj) => {\n  const domain = stateObj.entity_id.split(\".\")[0];\n  return domain === \"button\";\n};\n\nclass ButtonPressCardFeature extends LitElement {\n  static get properties() {\n    return {\n      hass: undefined,\n      config: undefined,\n      stateObj: undefined,\n    };\n  }\n\n  static getStubConfig() {\n    return {\n      type: \"custom:button-press-card-feature\",\n      label: \"Press\",\n    };\n  }\n\n  setConfig(config) {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this.config = config;\n  }\n\n  _press(ev) {\n    ev.stopPropagation();\n    this.hass.callService(\"button\", \"press\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  render() {\n    if (\n      !this.config ||\n      !this.hass ||\n      !this.stateObj ||\n      !supportsButtonPressCardFeature(this.stateObj)\n    ) {\n      return null;\n    }\n\n    return html`\n      <button class=\"button\" @click=${this._press}>\n        ${this.config.label || \"Press\"}\n      </button>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      .button {\n        display: block;\n        height: var(--feature-height, 42px);\n        width: 100%;\n        border-radius: var(--feature-border-radius, 12px);\n        border: none;\n        background-color: #eeeeee;\n        cursor: pointer;\n        transition: background-color 180ms ease-in-out;\n      }\n      .button:hover {\n        background-color: #dddddd;\n      }\n      .button:focus {\n        background-color: #cdcdcd;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"button-press-card-feature\", ButtonPressCardFeature);\n\nwindow.customCardFeatures = window.customCardFeatures || [];\nwindow.customCardFeatures.push({\n  type: \"button-press-card-feature\",\n  name: \"Button press\",\n  supported: supportsButtonPressCardFeature, // Optional\n  configurable: true, // Optional - defaults to false\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Entity Service Actions in Home Assistant\nDESCRIPTION: Example code for setting up a media player platform for Sonos that registers an entity service action to set a sleep timer with a required time parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_services.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers import config_validation as cv, entity_platform, service\n\nasync def async_setup_entry(hass, entry):\n    \"\"\"Set up the media player platform for Sonos.\"\"\"\n\n    platform = entity_platform.async_get_current_platform()\n\n    # This will call Entity.set_sleep_timer(sleep_time=VALUE)\n    platform.async_register_entity_service(\n        SERVICE_SET_TIMER,\n        {\n            vol.Required('sleep_time'): cv.time_period,\n        },\n        \"set_sleep_timer\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Registering Options Update Listener in Home Assistant\nDESCRIPTION: Code example showing how to register an update listener for options changes in the integration's setup. The listener is attached during entry load and detached during unload.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_options_flow_handler.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nentry.async_on_unload(entry.add_update_listener(update_listener))\n```\n\n----------------------------------------\n\nTITLE: Obtaining Zeroconf Object in Home Assistant\nDESCRIPTION: Code to get the Zeroconf instance from the Home Assistant context. Requires adding zeroconf to dependencies in the integration's manifest.json.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import zeroconf\n\n...\nzc = await zeroconf.async_get_instance(hass)\n```\n\n----------------------------------------\n\nTITLE: Implementing Motion Detection Disable Methods\nDESCRIPTION: Methods for disabling motion detection functionality in a camera entity. Implement either disable_motion_detection or the async version.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/camera.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MyCamera(Camera):\n    # Implement one of these methods.\n\n    def disable_motion_detection(self) -> None:\n        \"\"\"Disable motion detection in camera.\"\"\"\n\n    async def async_disable_motion_detection(self) -> None:\n        \"\"\"Disable motion detection in camera.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Assist Pipeline via WebSocket API\nDESCRIPTION: Example WebSocket message for starting an assist pipeline. Shows how to configure the pipeline stages and input parameters for speech processing.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/pipelines/index.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"assist_pipeline/run\",\n  \"start_stage\": \"stt\",\n  \"end_stage\": \"tts\",\n  \"input\": {\n    \"sample_rate\": 16000,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LLM API Options Flow in Home Assistant\nDESCRIPTION: Code for creating an options flow that allows users to select which LLM APIs should be used in their Home Assistant integration. The function retrieves available APIs and creates a schema with a selector for the user.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/llm/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom types import MappingProxyType\n\nfrom homeassistant.const import CONF_LLM_HASS_API\nfrom homeassistant.core import HomeAssistant, callback\nfrom homeassistant.helpers import llm\nfrom homeassistant.helpers.selector import (\n    SelectOptionDict,\n    SelectSelector,\n    SelectSelectorConfig,\n)\n\n\n@callback\ndef async_get_options_schema(\n    hass: HomeAssistant,\n    options: MappingProxyType[str, Any],\n) -> vol.Schema:\n    \"\"\"Return the options schema.\"\"\"\n    apis: list[SelectOptionDict] = [\n        SelectOptionDict(\n            label=api.name,\n            value=api.id,\n        )\n        for api in llm.async_get_apis(hass)\n    ]\n\n    return vol.Schema(\n        {\n            vol.Optional(\n                CONF_LLM_HASS_API,\n                description={\"suggested_value\": options.get(CONF_LLM_HASS_API)},\n            ): SelectSelector(SelectSelectorConfig(options=apis, multiple=True)),\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Reconfigure Step in Config Flow\nDESCRIPTION: Example implementation of a reconfigure step in a Home Assistant config flow. The code demonstrates how to add a reconfiguration form that allows users to update configuration settings after initial setup. The example shows a basic password reconfiguration schema using voluptuous for data validation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-03-21-config-entry-reconfigure-step.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport voluptuous as vol\n\nclass ExampleConfigFlow(ConfigFlow, domain=DOMAIN):\n    \"\"\"Config flow for Example integration.\"\"\"\n\n    async def async_step_reconfigure(self, user_input: dict[str, Any] | None = None):\n        \"\"\"Add reconfigure step to allow to reconfigure a config entry.\"\"\"\n        if user_input is not None:\n            pass  # TODO: process user input\n\n        return self.async_show_form(\n            step_id=\"reconfigure\",\n            data_schema=vol.Schema({vol.Required(\"password\"): str}),\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing getGridOptions method for custom card sizing in Home Assistant\nDESCRIPTION: This code snippet demonstrates how to implement the getGridOptions method in a custom card to specify default dimensions and minimum size constraints. The example sets a default size of 6 columns by 2 rows with minimum dimensions of 3 columns by 2 rows in the sections view grid.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-11-06-custom-card-sections-support.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npublic getGridOptions() {\n  return {\n    rows: 2,\n    columns: 6,\n    min_rows: 2,\n    min_columns: 3,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Content Type Property in Python\nDESCRIPTION: Implements the required media_content_type property to identify the type of media being played.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/media-player.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyMediaPlayer(MediaPlayerEntity):\n    @property\n    def media_content_type(self):\n    \"\"\"Content type of current playing media.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Swing Mode Setting for Home Assistant Climate Entity in Python\nDESCRIPTION: This code demonstrates how to implement the method for setting the swing mode in a Climate entity. It includes both synchronous and asynchronous versions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/climate.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    # Implement one of these methods.\n\n    def set_swing_mode(self, swing_mode):\n        \"\"\"Set new target swing operation.\"\"\"\n\n    async def async_set_swing_mode(self, swing_mode):\n        \"\"\"Set new target swing operation.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Device Registration Payload for Home Assistant Mobile App\nDESCRIPTION: JSON payload for registering a device with the Home Assistant mobile_app component. Includes device and app information, sent as a POST request to /api/mobile_app/registrations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/setup.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"device_id\": \"ABCDEFGH\",\n  \"app_id\": \"awesome_home\",\n  \"app_name\": \"Awesome Home\",\n  \"app_version\": \"1.2.0\",\n  \"device_name\": \"Robbies iPhone\",\n  \"manufacturer\": \"Apple, Inc.\",\n  \"model\": \"iPhone X\",\n  \"os_name\": \"iOS\",\n  \"os_version\": \"iOS 10.12\",\n  \"supports_encryption\": true,\n  \"app_data\": {\n    \"push_notification_key\": \"abcdef\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Turn Off Method for Siren Entity in Python\nDESCRIPTION: This snippet demonstrates how to implement the turn_off method for a siren entity. It can be implemented as either a synchronous or asynchronous method to turn off the siren device.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/siren.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MySirenEntity(SirenEntity):\n    # Implement one of these methods.\n\n    def turn_off(self, **kwargs):\n        \"\"\"Turn the device off.\"\"\"\n\n    async def async_turn_off(self, **kwargs):\n        \"\"\"Turn the device off.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using MAC Address as Unique ID in Home Assistant\nDESCRIPTION: This code shows the recommended way to format a MAC address for use as a unique ID in Home Assistant, using the built-in helper function format_mac from the device_registry module.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/entity_registry_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhomeassistant.helpers.device_registry.format_mac\n```\n\n----------------------------------------\n\nTITLE: Defining Google Brand with Multiple Integrations in Home Assistant\nDESCRIPTION: JSON configuration for the Google brand that specifies multiple integrations including Google Calendar and Google Sheets. This demonstrates how to collect multiple integrations under a single brand for better discoverability.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_brand.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"google\",\n  \"name\": \"Google\",\n  \"integrations\": [\"google\", \"google_sheets\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom MQTT Integration by Overriding Built-in Integration\nDESCRIPTION: Example showing how to create a custom version of the MQTT integration by copying the original files, renaming the domain in manifest.json and __init__.py, and updating configuration references.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2019-04-12-new-integration-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- Copy the content of the `mqtt` folder from [the Home Assistant repository](https://github.com/home-assistant/core/tree/dev/homeassistant/components/mqtt) to a new folder `<config>/custom_components/mqtt_custom/`\n- Open `mqtt_custom/manifest.json` and change the value for `domain` from `mqtt` to `mqtt_custom`\n- Open `mqtt_custom/__init__.py` and change the value of `DOMAIN` from `mqtt` to `mqtt_custom`\n- Anywhere in your config where you referenced `mqtt`, reference `mqtt_custom`. So use `mqtt_custom:` to specify the host and use `platform: mqtt_custom` when specifying platforms.\n```\n\n----------------------------------------\n\nTITLE: Event Firing Request in Home Assistant WebSocket API\nDESCRIPTION: Client message for firing an event on the Home Assistant event bus. Includes the event type and optional event data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 24,\n  \"type\": \"fire_event\",\n  \"event_type\": \"mydomain_event\",\n  // Optional\n  \"event_data\": {\n    \"device_id\": \"my-device-id\",\n    \"type\": \"motion_detected\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Config Entries in Home Assistant ConfigFlow\nDESCRIPTION: Helper methods for retrieving configuration entries during reauth and reconfigure flows. These methods provide safer access to config entries compared to direct access through hass.config_entries.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-10-21-reauth-reconfigure-helpers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself._get_reauth_entry()\nself._get_reconfigure_entry()\n```\n\n----------------------------------------\n\nTITLE: Deriving Media Player Entity in Python\nDESCRIPTION: Shows how to derive a platform entity from the MediaPlayerEntity class in Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/media-player.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.media_player import MediaPlayerEntity\n\nclass MyMediaPlayer(MediaPlayerEntity):\n    # Implement required properties and methods here\n```\n\n----------------------------------------\n\nTITLE: Implementing a Secondary Switch Entity with Translation Key in Python\nDESCRIPTION: Shows how to create a switch entity that is not the main feature of a device or is not part of a device. It uses a translation key for the entity's name and states.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.switch import SwitchEntity\n\n\nclass MySwitch(SwitchEntity):\n    _attr_has_entity_name = True\n\n    @property\n    def translation_key(self):\n        \"\"\"Return the translation key to translate the entity's name and states.\"\"\"\n        return my_switch\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notification URL in Gradle Properties\nDESCRIPTION: This snippet shows how to set the push notification URL in the gradle.properties file. It defines the URL for the deployed FCM push notification service.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/tips/fcm_push_notification.md#2025-04-21_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nhomeAssistantAndroidPushUrl=https://mydomain.cloudfunctions.net/androidV1\n```\n\n----------------------------------------\n\nTITLE: Implementing EntityCategory for Diagnostic Sensor in Home Assistant\nDESCRIPTION: Example showing how to set the entity_category attribute to DIAGNOSTIC for a sensor entity class. This categorization helps in proper entity classification and impacts how the entity is displayed in auto-generated dashboards.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-category.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySensor(SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n\n    _attr_entity_category = EntityCategory.DIAGNOSTIC\n\n    def __init__(self, ...) -> None:\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Session in Home Assistant Integration Setup\nDESCRIPTION: Demonstrates how to set up a client with a passed-in aiohttp session during integration configuration. The code shows the recommended way to initialize a client with a shared web session using async_get_clientsession.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/inject-websession.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_entry(hass: HomeAssistant, entry: MyConfigEntry) -> bool:\n    \"\"\"Set up my integration from a config entry.\"\"\"\n\n    client = MyClient(entry.data[CONF_HOST], async_get_clientsession(hass))\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Data for Service Actions in Home Assistant\nDESCRIPTION: Example demonstrating how to set up a service that returns response data for advanced automations. The service searches for items in a date range and returns formatted results as JSON-serializable data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_services.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport voluptuous as vol\nfrom homeassistant.config_entries import ConfigEntry\nfrom homeassistant.core import HomeAssistant, ServiceCall, ServiceResponse, SupportsResponse\nfrom homeassistant.helpers import config_validation as cv, entity_platform, service\nfrom homeassistant.util.json import JsonObjectType\n\n\nSEARCH_ITEMS_SERVICE_NAME = \"search_items\"\nSEARCH_ITEMS_SCHEMA = vol.Schema({\n    vol.Required(\"start\"): datetime.datetime,\n    vol.Required(\"end\"): datetime.datetime,\n})\n\n\nasync def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n    \"\"\"Set up the platform.\"\"\"\n\n    async def search_items(call: ServiceCall) -> ServiceResponse:\n        \"\"\"Search in the date range and return the matching items.\"\"\"\n        items = await my_client.search(call.data[\"start\"], call.data[\"end\"])\n        return {\n            \"items\": [\n                {\n                    \"summary\": item[\"summary\"],\n                    \"description\": item[\"description\"],\n                } for item in items\n            ],\n        }\n\n      hass.services.async_register(\n          DOMAIN,\n          SEARCH_ITEMS_SERVICE_NAME,\n          search_items,\n          schema=SEARCH_ITEMS_SCHEMA,\n          supports_response=SupportsResponse.ONLY,\n      )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Configuration with Bashio\nDESCRIPTION: This example shows how to use Bashio to extract MQTT service configuration details such as host, username, and password for use in an add-on initialization script.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/communication.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMQTT_HOST=$(bashio::services mqtt \"host\")\nMQTT_USER=$(bashio::services mqtt \"username\")\nMQTT_PASSWORD=$(bashio::services mqtt \"password\")\n```\n\n----------------------------------------\n\nTITLE: Implementing LawnMowerActivity.RETURNING in async_dock Method\nDESCRIPTION: This snippet demonstrates how to set the LawnMowerActivity.RETURNING state in the async_dock method of a LawnMowerEntity. It sets the _attr_activity attribute and calls async_write_ha_state to update the entity state.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-08-23-lawn-mower-activity-returning.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_dock(self) -> None:\n    \"\"\"Start docking.\"\"\"\n    self._attr_activity = LawnMowerActivity.RETURNING\n    self.async_write_ha_state()\n```\n\n----------------------------------------\n\nTITLE: Translating System Health Keys with strings.json\nDESCRIPTION: This JSON example shows how to translate the system health information keys in the strings.json file. This allows providing user-friendly descriptions for the technical information displayed in the system health page.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration_system_health.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"system_health\": {\n    \"info\": {\n      \"can_reach_server\": \"Reach Example server\",\n      \"remaining_requests\": \"Remaining allowed requests\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Update Device Location Webhook in JSON\nDESCRIPTION: JSON payload for updating a device's location in Home Assistant. This webhook message includes GPS coordinates, accuracy, and battery level, with optional fields for location name, speed, altitude, course, and vertical accuracy.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"update_location\",\n  \"data\": {\n    \"gps\": [12.34, 56.78],\n    \"gps_accuracy\": 120,\n    \"battery\": 45\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Static Paths Asynchronously in Home Assistant\nDESCRIPTION: Example of using the new async_register_static_paths method to register multiple static file paths simultaneously. The code imports the StaticPathConfig dataclass, sets up paths for static content directories, and registers them asynchronously with the HTTP component while specifying caching behavior.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-06-18-async_register_static_paths.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom homeassistant.components.http import StaticPathConfig\n\nshould_cache = False\nfiles_path = Path(__file__).parent / \"static\"\nfiles2_path = Path(__file__).parent / \"static2\"\n\nawait hass.http.async_register_static_paths([\n    StaticPathConfig(\"/api/my_integration/static\", str(files_path), should_cache),\n    StaticPathConfig(\"/api/my_integration/static2\", str(files2_path), should_cache)\n])\n```\n\n----------------------------------------\n\nTITLE: API Call Examples\nDESCRIPTION: Shows how to make GET and DELETE API calls to Home Assistant endpoints.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/data.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nhass.callApi('get', 'hassio/backups')\n  .then(backups => console.log('Received backups!', backups));\n\nhass.callApi('delete', 'notify.html5', { subscription: 'abcdefgh' });\n```\n\n----------------------------------------\n\nTITLE: Implementing PassiveBluetoothProcessorCoordinator with Custom Parser in Python\nDESCRIPTION: This snippet demonstrates how to set up a PassiveBluetoothProcessorCoordinator with a custom parser function. The parser receives BluetoothServiceInfoBleak and returns a custom data class. The coordinator is initialized with the parser as the update_method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-08-08-bluetooth-api-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef my_parser(service_info: BluetoothServiceInfoBleak) -> MyDataClass:\n    ...\n\n    return MyDataClass(\n        a=some_parsed_data,\n        b=some_other_parsed_data,\n    )\n\n\ncoordinator = PassiveBluetoothProcessorCoordinator(\n    hass,\n    _LOGGER,\n    address=address,\n    mode=BluetoothScanningMode.PASSIVE,\n    update_method=my_parser,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Home Assistant Core API using cURL with Supervisor Token\nDESCRIPTION: This snippet demonstrates how to make an authenticated GET request to the Home Assistant Core API through the internal proxy using the SUPERVISOR_TOKEN as the bearer token.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/communication.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET -H \"Authorization: Bearer ${SUPERVISOR_TOKEN}\" -H \"Content-Type: application/json\" http://supervisor/core/api/config\n```\n\n----------------------------------------\n\nTITLE: Retrieving Satellite Configuration via WebSocket API in JSON\nDESCRIPTION: Shows the JSON structure for getting the current configuration of an Assist satellite entity, including wake words and pipeline information.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/assist-satellite.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"assist_satellite/get_configuration\",\n  \"entity_id\": \"ENTITY_ID\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active_wake_words\": [\n    \"1234\"\n  ],\n  \"available_wake_words\": [\n    {\n      \"id\": \"1234\",\n      \"trained_languages\": [\n        \"en\"\n      ],\n      \"wake_word\": \"okay nabu\"\n    },\n    {\n      \"id\": \"5678\",\n      \"trained_languages\": [\n        \"en\"\n      ],\n      \"wake_word\": \"hey jarvis\"\n    }\n  ],\n  \"max_active_wake_words\": 1,\n  \"pipeline_entity_id\": \"select.pipeline_entity\",\n  \"vad_entity_id\": \"select.vad_entity\"\n}\n```\n\n----------------------------------------\n\nTITLE: Event Subscription Request in Home Assistant WebSocket API\nDESCRIPTION: Client message for subscribing to events, optionally filtering by event type. This allows receiving notifications when specified events occur.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 18,\n  \"type\": \"subscribe_events\",\n  // Optional\n  \"event_type\": \"state_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Policy Merging Example in Python\nDESCRIPTION: Shows how multiple permission policies are merged together during runtime.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_permissions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"entities\": {\n        \"entity_ids\": {\n            \"light.kitchen\": True\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"entities\": {\n        \"entity_ids\": True\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"entities\": {\n        \"entity_ids\": True\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing System Health Reporting in Home Assistant Integrations\nDESCRIPTION: This code demonstrates how to implement the new system health reporting method in Home Assistant integrations. It shows how to create a system_health.py file with callbacks that provide both immediate information and asynchronous health checks that take longer to resolve.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-11-09-system-health-and-templates.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Provide info to system health.\"\"\"\nfrom homeassistant.components import system_health\nfrom homeassistant.core import HomeAssistant, callback\n\nfrom .const import DOMAIN\n\n\n@callback\ndef async_register(\n    hass: HomeAssistant, register: system_health.RegisterSystemHealth\n) -> None:\n    \"\"\"Register system health callbacks.\"\"\"\n    register.async_register_info(system_health_info)\n\n\nasync def system_health_info(hass):\n    \"\"\"Get info for the info page.\"\"\"\n    client = hass.data[DOMAIN]\n\n    return {\n      \"server_version\": client.server_version,\n      \"can_reach_server\": system_health.async_check_can_reach_url(\n          hass, client.server_url\n      )\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Device Conditions in Home Assistant\nDESCRIPTION: Function that returns a list of supported conditions for a specific device, identified by device_id.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_condition.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def async_get_conditions(\n    hass: HomeAssistant, device_id: str\n) -> list[dict[str, str]]:\n    \"\"\"List device conditions for devices.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating snapshot tests with Syrupy in Python\nDESCRIPTION: Example of writing a snapshot test for a sensor entity state using Syrupy assertion library with pytest.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_testing.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# tests/components/example/test_sensor.py\nfrom homeassistant.core import HomeAssistant\nfrom syrupy.assertion import SnapshotAssertion\n\n\nasync def test_sensor(\n    hass: HomeAssistant,\n    snapshot: SnapshotAssertion,\n) -> None:\n    \"\"\"Test the sensor state.\"\"\"\n    state = hass.states.get(\"sensor.whatever\")\n    assert state == snapshot\n```\n\n----------------------------------------\n\nTITLE: Implementing has_entity_name for a Lock Entity in Python\nDESCRIPTION: This snippet demonstrates how to implement has_entity_name for a lock entity, which is typically the main feature of a device. It shows how to set the name to None to use the device name as the entity name.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/has-entity-name.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyLock(LockEntity):\n    \"\"\"Representation of a lock.\"\"\"\n\n    _attr_has_entity_name = True\n    _attr_name = None\n\n    def __init__(self, device: Device) -> None:\n        \"\"\"Initialize the lock.\"\"\"\n        self._attr_device_info = DeviceInfo(\n            identifiers={(DOMAIN, device.id)},\n            name=device.name,\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Text Badge in JavaScript\nDESCRIPTION: This code defines a custom 'TextBadge' element that displays the state of a specified entity. It includes methods for setting configuration and updating content based on Home Assistant state changes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-badge.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextBadge extends HTMLElement {\n  // Whenever the state changes, a new `hass` object is set. Use this to\n  // update your content.\n  set hass(hass) {\n    this._hass = hass;\n    this.updateContent();\n  }\n\n  // The user supplied configuration. Throw an exception and Home Assistant\n  // will render an error badge.\n  setConfig(config) {\n    if (!config.entity) {\n      throw new Error(\"You need to define an entity\");\n    }\n    this.config = config;\n    this.updateContent();\n  }\n\n  updateContent() {\n    if (!this.config || !this._hass) return;\n\n    const entityId = this.config.entity;\n    const state = this._hass.states[entityId];\n    const stateStr = state ? state.state : \"unavailable\";\n\n    this.innerHTML = `<p>${stateStr}</p>`;\n  }\n}\n\ncustomElements.define(\"text-badge\", TextBadge);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Card Management Events in JavaScript\nDESCRIPTION: JavaScript code example demonstrating how to trigger a card editing dialog by dispatching a custom event. Similar events exist for deleting cards and creating new ones.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-view.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Delete 4th card in the current view\nthis.dispatchEvent(new CustomEvent(\"ll-edit-card\", { detail: { path: [3] } })) // this refers to the card element\n```\n\n----------------------------------------\n\nTITLE: Scaling Brightness for Light Entities in Python\nDESCRIPTION: Utility code for handling brightness conversion in Home Assistant light entities. The first example shows how to scale device brightness to Home Assistant's range using value_to_brightness, while the second demonstrates converting Home Assistant brightness to device-specific range.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/light.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.util.color import value_to_brightness\n\nBRIGHTNESS_SCALE = (1, 1023)\n\n...\n\n    @property\n    def brightness(self) -> Optional[int]:\n        \"\"\"Return the current brightness.\"\"\"\n        return value_to_brightness(BRIGHTNESS_SCALE, self._device.brightness)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.util.percentage import percentage_to_ranged_value\nBRIGHTNESS_SCALE = (1, 1023)\n\n...\n\nclass MyLightEntity(LightEntity):\n    async def async_turn_on(self, **kwargs) -> None:\n        \"\"\"Turn device on.\"\"\"\n\n        ...\n\n        value_in_range = math.ceil(percentage_to_ranged_value(BRIGHTNESS_SCALE, kwargs[ATTR_BRIGHTNESS]))\n```\n\n----------------------------------------\n\nTITLE: Conversation API Response Example in JSON\nDESCRIPTION: Example of a response from the Conversation API after processing a text input. It includes the response type, language, data about the action performed, and speech output.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_conversation_api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": {\n    \"response_type\": \"action_done\",\n    \"language\": \"en\",\n    \"data\": {\n      \"targets\": [\n        {\n          \"type\": \"area\",\n          \"name\": \"Living Room\",\n          \"id\": \"living_room\"\n        },\n        {\n          \"type\": \"domain\",\n          \"name\": \"light\",\n          \"id\": \"light\"\n        }\n      ],\n      \"success\": [\n        {\n          \"type\": \"entity\",\n          \"name\": \"My Light\",\n          \"id\": \"light.my_light\"\n        }\n      ],\n      \"failed\": []\n    },\n    \"speech\": {\n      \"plain\": {\n        \"speech\": \"Turned Living Room lights on\"\n      }\n    }\n  },\n  \"conversation_id\": \"<generated-id-from-ha>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Custom Icon Set in JavaScript\nDESCRIPTION: Example of implementing a custom icon set called 'custom' with a single icon. The implementation provides an async function that returns the SVG path data when called with an icon name.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-05-09-custom-iconsets.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nasync function getIcon(name) {\n  return {\n    path: \"M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z\",\n  };\n}\nwindow.customIconsets = window.customIconsets || {};\nwindow.customIconsets[\"custom\"] = getIcon;\n```\n\n----------------------------------------\n\nTITLE: Defining Store with Dictionary Type\nDESCRIPTION: Example of creating a Store instance with a dictionary mapping strings to integers as the storage type.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-07-08-generic-store.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself._store = Store[dict[str, int]](hass, STORAGE_VERSION, STORAGE_KEY)\n```\n\n----------------------------------------\n\nTITLE: Call Service Action Webhook in JSON\nDESCRIPTION: JSON structure for calling a service action in Home Assistant. This webhook message specifies the service domain, service name, and service data, allowing mobile apps to trigger Home Assistant services remotely.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"call_service\",\n  \"data\": {\n    \"domain\": \"light\",\n    \"service\": \"turn_on\",\n    \"service_data\": {\n      \"entity_id\": \"light.kitchen\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token from External Authentication in Home Assistant\nDESCRIPTION: Code for requesting an access token from external authentication in Home Assistant. This can be called via either the Android or iOS method, with an options object containing a callback method name and an optional force boolean to refresh the token regardless of expiration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.externalApp.getExternalAuth({\n  callback: \"externalAuthSetToken\",\n  force: true\n});\n// or\nwindow.webkit.messageHandlers.getExternalAuth.postMessage({\n  callback: \"externalAuthSetToken\",\n  force: true\n});\n```\n\n----------------------------------------\n\nTITLE: WebSocket API Endpoint with Permissions in Python\nDESCRIPTION: Shows how to implement a WebSocket API endpoint with admin permission requirements.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_permissions.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import websocket_api\n\n\nasync def async_setup(hass, config):\n    websocket_api.async_register_command(hass, websocket_create)\n    return True\n\n\n@websocket_api.require_admin\n@websocket_api.async_response\n@websocket_api.websocket_command(\n    {vol.Required(\"type\"): \"my-component/my-action\",}\n)\nasync def websocket_create(hass, connection, msg):\n    \"\"\"Create a user.\"\"\"\n    # Do action\n```\n\n----------------------------------------\n\nTITLE: Checking if USB Device is Connected\nDESCRIPTION: Code to verify if a specific USB device is connected to the system. Useful for integrations that depend on USB hardware.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import usb\n\n...\n\nif not usb.async_is_plugged_in(hass, {\"serial_number\": \"A1234\", \"manufacturer\": \"xtech\"}):\n   raise ConfigEntryNotReady(\"The USB device is missing\")\n```\n\n----------------------------------------\n\nTITLE: Updating ServiceInfo Import Statements in Python\nDESCRIPTION: Example showing how to update import statements for ServiceInfo models and their usage in a config flow class. Demonstrates both old (deprecated) and new import paths, along with implementation examples for handling different types of service discoveries.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2025-01-15-service-info.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old\n# from homeassistant.components.dhcp import DhcpServiceInfo\n# from homeassistant.components.ssdp import SsdpServiceInfo\n# from homeassistant.components.usb import UsbServiceInfo\n# from homeassistant.components.zeroconf import ZeroconfServiceInfo\n\n# New\nfrom homeassistant.helpers.service_info.dhcp import DhcpServiceInfo\nfrom homeassistant.helpers.service_info.ssdp import SsdpServiceInfo\nfrom homeassistant.helpers.service_info.usb import UsbServiceInfo\nfrom homeassistant.helpers.service_info.zeroconf import ZeroconfServiceInfo\n\nclass MyConfigFlow(ConfigFlow, domain=DOMAIN):\n    \"\"\"Handle a config flow.\"\"\"\n\n    async def async_step_dhcp(self, discovery_info: DhcpServiceInfo) -> ConfigFlowResult:\n        \"\"\"Handle dhcp discovery.\"\"\"\n        ...\n\n    async def async_step_ssdp(self, discovery_info: SsdpServiceInfo) -> ConfigFlowResult:\n        \"\"\"Handle ssdp discovery.\"\"\"\n        ...\n\n    async def async_step_usb(self, discovery_info: UsbServiceInfo) -> ConfigFlowResult:\n        \"\"\"Handle usb discovery.\"\"\"\n        ...\n\n    async def async_step_zeroconf(self, discovery_info: ZeroconfServiceInfo) -> ConfigFlowResult:\n        \"\"\"Handle zeroconf discovery.\"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Querying API Status\nDESCRIPTION: Shows how to check if the Home Assistant API is running by making a GET request to the root API endpoint. The response includes a simple status message.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" http://localhost:8123/api/\n```\n\n----------------------------------------\n\nTITLE: Using HassEntryKey for Config Entry Data\nDESCRIPTION: Demonstrates using HassEntryKey for storing typed data associated with config entries, showing proper initialization and storage patterns.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-01-improved-hass-data-typing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# <integration>/__init__.py\nfrom homeassistant.util.hass_dict import HassEntryKey\n\nMY_KEY: HassEntryKey[\"MyData\"] = HassEntryKey(DOMAIN)\n\nasync def async_setup_entry(\n    hass: HomeAssistant,\n    entry: ConfigEntry,\n) -> bool:\n    client = MyClient(...)\n    \n    hass.data.setdefault(MY_KEY, {})[entry.entry_id] = MyData(client, {...})\n```\n\n----------------------------------------\n\nTITLE: Returning LawnMowerActivity.RETURNING in activity Property\nDESCRIPTION: This snippet shows how to return the LawnMowerActivity.RETURNING state in the activity property of a LawnMowerEntity. It checks the mower's state and returns the appropriate LawnMowerActivity enum value.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-08-23-lawn-mower-activity-returning.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef activity(self) -> LawnMowerActivity:\n    \"\"\"Return the state of the mower.\"\"\"\n    mower = self.mower\n    if mower.state is RETURNING:\n        return LawnMowerActivity.RETURNING\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Configuration Validation in Python\nDESCRIPTION: Configuration validation setup using voluptuous to ensure required parameters are provided.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_states.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport voluptuous as vol\\n\\nimport homeassistant.helpers.config_validation as cv\\n\\nCONFIG_SCHEMA = vol.Schema(\\n    {DOMAIN: vol.Schema({vol.Required(CONF_TEXT): cv.string,})}, extra=vol.ALLOW_EXTRA\\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound Mode Selection in Python\nDESCRIPTION: Defines methods for changing the sound mode of a media player entity.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/media-player.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyMediaPlayer(MediaPlayerEntity):\n    def select_sound_mode(self, sound_mode):\n        \"\"\"Switch the sound mode of the entity.\"\"\"\n\n    def async_select_sound_mode(self, sound_mode):\n        \"\"\"Switch the sound mode of the entity.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Assigning a User to a Custom Group in Home Assistant\nDESCRIPTION: JSON snippet showing how to update a user's group_ids in the auth storage file to assign them to a custom permission group. This allows for granular control over what entities and functions the user can access.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2019-03-11-user-permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"group_ids\": [\n    \"my-custom-group\"\n],\n```\n\n----------------------------------------\n\nTITLE: Service Section Icons JSON Configuration\nDESCRIPTION: Example of defining icons for service sections in icons.json.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_services.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"services\": {\n    \"start_brewing\": {\n      \"service\": \"mdi:flask\",\n      \"sections\": {\n        \"advanced_options\": \"mdi:test-tube\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Conversation Agent in Home Assistant Python API\nDESCRIPTION: Code snippet showing the updated method for setting a conversation agent, which now requires a config entry as a parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-01-24-conversation-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconversation.async_set_agent(hass, config_entry, agent)\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Entity Methods in Python\nDESCRIPTION: Example implementation of a time entity class showing the required methods for setting time values. Developers can implement either synchronous set_value() or asynchronous async_set_value() method to handle time updates.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/time.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyTime(TimeEntity):\n    # Implement one of these methods.\n\n    def set_value(self, value: time) -> None:\n        \"\"\"Update the current value.\"\"\"\n\n    async def async_set_value(self, value: time) -> None:\n        \"\"\"Update the current value.\"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Simplified Unloading of Last Config Entry in Python for Home Assistant\nDESCRIPTION: This snippet demonstrates a simplified method for unloading the last config entry in a custom integration, using the new async_loaded_entries method. It requires Home Assistant version 2025.3.0 or later.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2025-02-19-new-config-entry-states.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n    \"\"\"Unload a config entry.\"\"\"\n    if not hass.config_entries.async_loaded_entries(DOMAIN):\n        # The last config entry is being unloaded, release shared resources, unregister services etc.\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for external frontend development\nDESCRIPTION: Add CORS configuration to allow connecting a development frontend to an existing Home Assistant instance.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/development.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  cors_allowed_origins:\n    - http://localhost:8124\n```\n\n----------------------------------------\n\nTITLE: Obtaining IP Networks from Network Adapters\nDESCRIPTION: Code to extract IP network information from adapter data. Creates IP network objects that can be used for network operations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ipaddress import ip_network\nfrom homeassistant.components import network\n\n...\n\nadapters = await network.async_get_adapters(hass)\n\nfor adapter in adapters:\n    for ip_info in adapter[\"ipv4\"]:\n        local_ip = ip_info[\"address\"]\n        network_prefix = ip_info[\"network_prefix\"]\n        ip_net = ip_network(f\"{local_ip}/{network_prefix}\", False)\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Integration Manifest in JSON for Home Assistant\nDESCRIPTION: This snippet demonstrates a minimal manifest.json configuration for a Home Assistant integration. It includes only the essential fields required for a basic setup.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"your_domain_name\",\n  \"name\": \"Your Integration\",\n  \"codeowners\": [],\n  \"dependencies\": [],\n  \"documentation\": \"https://www.example.com\",\n  \"integration_type\": \"hub\",\n  \"iot_class\": \"cloud_polling\",\n  \"requirements\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Platform Module Using Async Import Helper\nDESCRIPTION: Demonstrates how to safely import a platform module asynchronously using Home Assistant's import helper. This approach is recommended when modules may be imported from multiple different paths.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_imports.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers.importlib import async_import_module\n\nplatform = await async_import_module(hass, f\"homeassistant.components.homeassistant.triggers.{platform_name}\")\n```\n\n----------------------------------------\n\nTITLE: Basic Webhook Interaction Format in JSON\nDESCRIPTION: The common base format for all webhook interactions with Home Assistant. This JSON structure includes a type field specifying the message type and a data object that contains message-specific information.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"<type of message>\",\n  \"data\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Ranged Value to Integer Range in Python\nDESCRIPTION: Utility function to convert a value from one range to another, returning an integer result. Useful for scaling between different value ranges.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-12-05-scaling-utils.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef scale_ranged_value_to_int_range(\n    source_low_high_range: tuple[float, float],\n    target_low_high_range: tuple[float, float],\n    value: float,\n) -> int:\n    \"\"\"Given a range of low and high values convert a single value to another range.\n\n    Given a source low value of 1 and a high value of 255 and\n    a target range from 1 to 100 this function\n    will return:\n\n    (1,255), 255: 100\n    (1,255), 127: 50\n    (1,255), 10: 4\n    \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies on Arch/Manjaro\nDESCRIPTION: This shell command installs the necessary core dependencies for developing Home Assistant on Arch or Manjaro Linux systems. It includes Python-related packages, build tools, and media libraries specific to Arch-based distributions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_environment.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Sy base-devel python python-pip python-virtualenv autoconf libxml2 libxslt libjpeg-turbo libffi systemd zlib pkgconf ffmpeg gcc cmake\n```\n\n----------------------------------------\n\nTITLE: Creating a Websocket Push Notification Channel in Home Assistant\nDESCRIPTION: JSON payload for establishing a websocket channel to receive push notifications. The webhook_id identifies the device, and support_confirm is an optional parameter to enable notification confirmation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/notifications.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2,\n  \"type\": \"mobile_app/push_notification_channel\",\n  \"webhook_id\": \"abcdefghkj\",\n  \"support_confirm\": true // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Command Result Message in Home Assistant WebSocket API\nDESCRIPTION: Server response to a command indicating success or failure. Includes context information about the command execution.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 6,\n  \"type\": \"result\",\n  \"success\": true,\n  \"result\": {\n    \"context\": {\n      \"id\": \"326ef27d19415c60c492fe330945f954\",\n      \"parent_id\": null,\n      \"user_id\": \"31ddb597e03147118cf8d2f8fbea5553\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Status Update Payload in TypeScript\nDESCRIPTION: This code defines the payload structure for the 'connection-status' message type. It specifies the possible connection event types that can be sent from the frontend to the external app.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  event: \"connected\" | \"auth-invalid\" | \"disconnected\";\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Add-on Dockerfile Structure\nDESCRIPTION: Template for a Home Assistant add-on Dockerfile that installs required packages and sets up the entry point script. Uses the BUILD_FROM argument for architecture compatibility.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG BUILD_FROM\nFROM $BUILD_FROM\n\n# Install requirements for add-on\nRUN \\\n  apk add --no-cache \\\n    example_alpine_package\n\n# Copy data for add-on\nCOPY run.sh /\nRUN chmod a+x /run.sh\n\nCMD [ \"/run.sh\" ]\n```\n\n----------------------------------------\n\nTITLE: States Response Format - JSON\nDESCRIPTION: Example response format showing state objects for entities with their attributes\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"attributes\": {},\n        \"entity_id\": \"sun.sun\",\n        \"last_changed\": \"2016-05-30T21:43:32.418320+00:00\",\n        \"state\": \"below_horizon\"\n    },\n    {\n        \"attributes\": {},\n        \"entity_id\": \"process.Dropbox\",\n        \"last_changed\": \"22016-05-30T21:43:32.418320+00:00\",\n        \"state\": \"on\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Turn On Methods\nDESCRIPTION: Methods for enabling the camera. Implement either turn_on or async_turn_on to support the CameraEntityFeature.ON_OFF feature.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/camera.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyCamera(Camera):\n    # Implement one of these methods.\n\n    def turn_on(self) -> None:\n        \"\"\"Turn on camera.\"\"\"\n\n    async def async_turn_on(self) -> None:\n        \"\"\"Turn on camera.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using async_track_template_result for Template Tracking in Home Assistant\nDESCRIPTION: This snippet demonstrates how to use the new async_track_template_result method from the Event helper instead of the deprecated extract_entities method. It shows how to track template results dynamically, ensuring all touched entities are correctly monitored.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-11-09-system-health-and-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers.event import async_track_template_result, TrackTemplate\n\ntemplate = \"{{ light.kitchen.state == 'on' }}\"\n\nasync_track_template_result(\n    hass,\n    [TrackTemplate(template, None)],\n    lambda event, updates: print(event, updates),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Browsing in Python\nDESCRIPTION: Implements media browsing functionality with support for filtering content types. Shows basic implementation for browsing media sources.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/media-player.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyMediaPlayer(MediaPlayerEntity):\n\n    async def async_browse_media(\n        self, media_content_type: str | None = None, media_content_id: str | None = None\n    ) -> BrowseMedia:\n        \"\"\"Implement the websocket media browsing helper.\"\"\"\n        return await media_source.async_browse_media(\n            self.hass,\n            media_content_id,\n            content_filter=lambda item: item.media_content_type.startswith(\"audio/\"),\n        )\n```\n\n----------------------------------------\n\nTITLE: Installing test dependencies with uv pip\nDESCRIPTION: Command to install all test dependencies using uv pip package manager within the virtual environment.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_testing.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv pip install -r requirements_test_all.txt\n```\n\n----------------------------------------\n\nTITLE: Service Icons JSON Configuration\nDESCRIPTION: Example of defining service icons in icons.json for use in the Home Assistant UI.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_services.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"services\": {\n    \"turn_on\": {\"service\": \"mdi:lightbulb-on\"},\n    \"turn_off\": {\"service\": \"mdi:lightbulb-off\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Source Selection in Python\nDESCRIPTION: Defines methods for selecting input sources on a media player entity.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/media-player.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MyMediaPlayer(MediaPlayerEntity):\n    def select_source(self, source):\n        \"\"\"Select input source.\"\"\"\n\n    def async_select_source(self, source):\n        \"\"\"Select input source.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring mDNS Discovery in Home Assistant Manifest\nDESCRIPTION: This JSON snippet shows how to configure mDNS discovery for a Home Assistant integration in the manifest.json file. It specifies the mDNS service type to listen for.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/discovery.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"zeroconf\": [\"_mydevice._tcp.local.\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Color Mode Enumeration Values\nDESCRIPTION: Defines the available color modes for light entities, including ONOFF, BRIGHTNESS, COLOR_TEMP, HS, RGB, RGBW, RGBWW, WHITE, and XY modes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/light.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nColorMode.UNKNOWN     // Color mode not known\nColorMode.ONOFF       // Basic on/off control\nColorMode.BRIGHTNESS  // Dimmable light\nColorMode.COLOR_TEMP  // Dimmable with color temperature\nColorMode.HS          // Dimmable with hue/saturation\nColorMode.RGB         // Dimmable with RGB color\nColorMode.RGBW        // Dimmable with RGBW color\nColorMode.RGBWW       // Dimmable with RGBWW color\nColorMode.WHITE       // Dimmable white mode\nColorMode.XY          // Dimmable with XY color\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Updates with Coordinator in Python\nDESCRIPTION: This example shows how to set parallel updates when using a coordinator in Home Assistant. For read-only platforms using a coordinator, parallel updates can be set to 0 as data updates are centralized.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/parallel-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Coordinator is used to centralize the data updates\nPARALLEL_UPDATES = 0\n\nclass MySensor(CoordinatorEntity, SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n\n    def __init__(self, device: Device) -> None:\n        \"\"\"Initialize the sensor.\"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using async_create_background_task for coroutine functions in other contexts\nDESCRIPTION: For coroutine functions running from places other than config entries, use hass.async_create_background_task or hass.async_create_task as alternatives to the deprecated methods.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-03-13-deprecate_add_run_job.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhass.async_create_background_task\n```\n\nLANGUAGE: python\nCODE:\n```\nhass.async_create_task\n```\n\n----------------------------------------\n\nTITLE: Home Assistant User Object Structure\nDESCRIPTION: Example of the hass.user object showing user authentication and permission data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/data.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"758186e6a1854ee2896efbd593cb542c\",\n  \"name\": \"Paulus\",\n  \"is_owner\": true,\n  \"is_admin\": true,\n  \"credentials\": [\n    {\n      \"auth_provider_type\": \"homeassistant\",\n      \"auth_provider_id\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Percentage to Ranged Value in Python\nDESCRIPTION: Utility function to convert a percentage value to a value within a specified range.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-12-05-scaling-utils.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef percentage_to_ranged_value(\n    low_high_range: tuple[float, float], percentage: int\n) -> float:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Graphical Configuration for Custom Badge in JavaScript\nDESCRIPTION: This code extends the TextBadge class to include methods for graphical configuration. It defines getConfigElement and getStubConfig methods, and registers the badge with customBadges for the badge picker dialog.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-badge.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./text-badge-editor.js\";\n\nclass TextBadge extends HTMLElement {\n  \n  ...\n\n  static getConfigElement() {\n    return document.createElement(\"text-badge-editor\");\n  }\n\n  static getStubConfig() {\n    return { entity: \"sun.sun\" };\n  }\n}\n\ncustomElements.define(\"text-badge\", TextBadge);\n```\n\n----------------------------------------\n\nTITLE: Admin Service Handler Registration in Python\nDESCRIPTION: Shows how to register a service that requires admin permissions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_permissions.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def handle_admin_service(call):\n    \"\"\"Handle a service action call.\"\"\"\n    # Do admin action\n\n\nasync def async_setup(hass, config):\n    hass.helpers.service.async_register_admin_service(\n        DOMAIN, \"my_service\", handle_admin_service, vol.Schema({})\n    )\n    return True\n```\n\n----------------------------------------\n\nTITLE: Config Validation Command in Home Assistant WebSocket API\nDESCRIPTION: Command to validate triggers, conditions and action configurations as if they were part of an automation. All fields are optional and only included fields will be validated.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"validate_config\",\n  \"trigger\": ...,\n  \"condition\": ...,\n  \"action\": ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updated UnitOfConductivity Enum Definition in Python\nDESCRIPTION: This snippet presents the new definition of the UnitOfConductivity enum in Home Assistant. It renames the enum members to be more descriptive, using SIEMENS_PER_CM, MICROSIEMENS_PER_CM, and MILLISIEMENS_PER_CM.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-10-08-unit-of-conductivity-changes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n  class UnitOfConductivity(StrEnum):\n    \"\"\"Conductivity units.\"\"\"\n\n    SIEMENS_PER_CM = \"S/cm\"\n    MICROSIEMENS_PER_CM = \"µS/cm\"\n    MILLISIEMENS_PER_CM = \"mS/cm\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Subentry Reconfiguration\nDESCRIPTION: Example of implementing reconfiguration support for subentries, showing how to access parent config entries and handle existing subentry modifications.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass LocationSubentryFlowHandler(ConfigSubentryFlow):\n    \"\"\"Handle subentry flow for adding and modifying a location.\"\"\"\n\n    async def async_step_user(\n        self, user_input: dict[str, Any] | None = None\n    ) -> SubentryFlowResult:\n        \"\"\"User flow to add a new location.\"\"\"\n        ...\n\n    async def async_step_reconfigure(\n        self, user_input: dict[str, Any] | None = None\n    ) -> SubentryFlowResult:\n        \"\"\"User flow to modify an existing location.\"\"\"\n        # Retrieve the parent config entry for reference.\n        config_entry = self._get_reconfigure_entry()\n        # Retrieve the specific subentry targeted for update.\n        config_subentry = self._get_reconfigure_subentry()\n        ...\n```\n\n----------------------------------------\n\nTITLE: Querying Network Information via Supervisor API\nDESCRIPTION: Makes an HTTP GET request to retrieve network configuration information from the Home Assistant Supervisor API. Requires authentication via SUPERVISOR_TOKEN in the Authorization header.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/supervisor/examples.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL -H \"Authorization: Bearer $SUPERVISOR_TOKEN\" http://supervisor/network/info\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": \"ok\",\n  \"data\": {\n    \"interfaces\": {\n      \"eth0\": {\n        \"ip_address\": \"192.168.1.100/24\",\n        \"gateway\": \"192.168.1.1\",\n        \"id\": \"Wired connection 1\",\n        \"type\": \"802-3-ethernet\",\n        \"nameservers\": [\"192.168.1.1\"],\n        \"method\": \"static\",\n        \"primary\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Static Paths in Home Assistant Custom Integration\nDESCRIPTION: Example of how to properly serve static files in a Home Assistant custom integration using async_register_static_paths. This method is the recommended secure way to make resources like images, panels, or Lovelace enhancements available to users.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2021-01-29-custom-integration-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom homeassisant.components.http import StaticPathConfig\n\nshould_cache = False\nfiles_path = Path(__file__).parent / \"static\"\nfiles2_path = Path(__file__).parent / \"static2\"\n\nawait hass.http.async_register_static_paths([\n    StaticPathConfig(\"/api/my_integration/static\", str(files_path), should_cache),\n    StaticPathConfig(\"/api/my_integration/static2\", str(files2_path), should_cache)\n])\n```\n\n----------------------------------------\n\nTITLE: Updating FlowHandler.async_show_progress Usage in Python\nDESCRIPTION: The FlowHandler.async_show_progress method has been updated with a new mandatory argument 'progress_task'. The 'step_id' parameter is deprecated and will be removed in Home Assistant core release 2024.8. FlowManager now handles the interaction between the progress task state and the UI.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-01-11-async-show-progress-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFlowHandler.async_show_progress(progress_task=task)\n```\n\n----------------------------------------\n\nTITLE: Authentication Headers for Ingress Implementation\nDESCRIPTION: HTTP headers used for identifying authenticated users when accessing add-ons through the supervisor's ingress. These headers provide user identification information including user ID, username, and display name.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/security.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Header name                | Description                                 |\n| -------------------------- | ------------------------------------------- |\n| X-Remote-User-Id           | ID of the authenticated Home Assistant user |\n| X-Remote-User-Name         | The username of the authenticated user      |\n| X-Remote-User-Display-Name | The display name of the authenticated user  |\n```\n\n----------------------------------------\n\nTITLE: Using Async Authentication Class in Python\nDESCRIPTION: This example shows how to use the asynchronous authentication class with aiohttp ClientSession to make authenticated requests.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_auth.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport aiohttp\n\nfrom my_package import Auth\n\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        auth = Auth(session, \"http://example.com/api\", \"secret_access_token\")\n\n        # This will fetch data from http://example.com/api/lights\n        resp = await auth.request(\"get\", \"lights\")\n        print(\"HTTP response status code\", resp.status)\n        print(\"HTTP response JSON content\", await resp.json())\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Accessing Existing Store\nDESCRIPTION: Example of accessing an existing Store instance from Home Assistant's data dictionary with Any type annotation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-07-08-generic-store.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstore: Store[dict[str, Any]] = hass.data[DOMAIN][DATA_STORE]\n```\n\n----------------------------------------\n\nTITLE: Cloning and Initializing HAOS Repository with Git\nDESCRIPTION: Commands to clone the main Home Assistant Operating System repository and initialize its submodules. This sets up the development environment with the necessary source code.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/home-assistant/operating-system/\ncd operating-system/\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Implementing Independent Swing Control in Home Assistant Climate Entity\nDESCRIPTION: Example implementation of a climate entity supporting both vertical swing (swing_mode) and horizontal swing (swing_horizontal_mode) features in Home Assistant. The class demonstrates the required properties and methods for independent control of both swing dimensions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-12-03-climate-horizontal-swing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    \"\"\"Implementation of my climate entity.\"\"\"\n\n    @property\n    def supported_features(self) -> ClimateEntityFeature:\n        \"\"\"Return the list of supported features.\"\"\"\n        return ClimateEntityFeature.SWING_MODE | ClimateEntityFeature.SWING_HORIZONTAL_MODE\n\n    @property\n    def swing_mode(self) -> str | None:\n        \"\"\"Return the swing setting.\n\n        Requires ClimateEntityFeature.SWING_MODE.\n        \"\"\"\n        return self._attr_swing_mode\n\n    @property\n    def swing_modes(self) -> list[str] | None:\n        \"\"\"Return the list of available swing modes.\n\n        Requires ClimateEntityFeature.SWING_MODE.\n        \"\"\"\n        return self._attr_swing_modes\n\n    @property\n    def swing_horizontal_mode(self) -> str | None:\n        \"\"\"Return the swing setting.\n\n        Requires ClimateEntityFeature.SWING_HORIZONTAL_MODE.\n        \"\"\"\n        return self._attr_swing_horizontal_mode\n\n    @property\n    def swing_horizontal_modes(self) -> list[str] | None:\n        \"\"\"Return the list of available swing modes.\n\n        Requires ClimateEntityFeature.SWING_HORIZONTAL_MODE.\n        \"\"\"\n        return self._attr_swing_horizontal_modes\n\n    async def async_set_swing_mode(self, swing_mode: str) -> None:\n        \"\"\"Set new target swing operation.\"\"\"\n        await self.api.set_swing_mode(swing_mode)\n\n    async def async_set_swing_horizontal_mode(self, swing_horizontal_mode: str) -> None:\n        \"\"\"Set new target horizontal swing operation.\"\"\"\n        await self.api.set_swing_horizontal_mode(swing_horizontal_mode)\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Variables with YAML\nDESCRIPTION: This snippet demonstrates the proper format for documenting configuration variables in Home Assistant using the configuration tag. It shows how to document a configuration key with its description, requirement status, type, and default value.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/standards.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% configuration %}\nsome_key:\n  description: This is a description of what this key is for.\n  required: false\n  type: string\n  default: Optional default value - leave out if there isn't one\n{% endconfiguration %}\n```\n\n----------------------------------------\n\nTITLE: Confirming Push Notifications in Home Assistant Websocket API\nDESCRIPTION: JSON payload for confirming receipt of a push notification when confirmation is enabled. This requires the webhook_id that identifies the device and the confirm_id from the received notification.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/notifications.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 3,\n  \"type\": \"mobile_app/push_notification_confirm\",\n  \"webhook_id\": \"abcdefghkj\",\n  \"confirm_id\": \"12345\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Name Schema Validation in Python\nDESCRIPTION: Demonstrates how to set up a default name for a sensor with voluptuous validation schema. Uses PLATFORM_SCHEMA extension to define optional configuration with a default value.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_validation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_NAME = \"Sensor name\"\n\nPLATFORM_SCHEMA = PLATFORM_SCHEMA.extend(\n    {\n        # ...\n        vol.Optional(CONF_NAME, default=DEFAULT_NAME): cv.string,\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Successful Token Request\nDESCRIPTION: This shows the JSON response format when successfully exchanging an authorization code for tokens. It includes the access token, refresh token, token type, and expiration time in seconds.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"ABCDEFGH\",\n    \"expires_in\": 1800,\n    \"refresh_token\": \"IJKLMNOPQRST\",\n    \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Cover Tilt Implementation in Python\nDESCRIPTION: Implementation of open_cover_tilt methods for a cover entity. Only implement if SUPPORT_OPEN_TILT flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/cover.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyCover(CoverEntity):\n    # Implement one of these methods.\n\n    def open_cover_tilt(self, **kwargs):\n        \"\"\"Open the cover tilt.\"\"\"\n\n    async def async_open_cover_tilt(self, **kwargs):\n        \"\"\"Open the cover tilt.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Badge Editor in JavaScript\nDESCRIPTION: This code defines a TextBadgeEditor element for editing the badge configuration. It includes methods for setting the config and dispatching config changes, and registers the badge with customBadges for the badge picker.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-badge.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextBadgeEditor extends HTMLElement {\n  setConfig(config) {\n    this._config = config;\n  }\n\n  configChanged(newConfig) {\n    const event = new Event(\"config-changed\", {\n      bubbles: true,\n      composed: true,\n    });\n    event.detail = { config: newConfig };\n    this.dispatchEvent(event);\n  }\n}\n\ncustomElements.define(\"text-badge-editor\", TextBadgeEditor);\nwindow.customBadges = window.customBadges || [];\nwindow.customBadges.push({\n  type: \"text-badge\",\n  name: \"Text badge\",\n  preview: false, // Optional - defaults to false\n  description: \"A custom badge made by me!\", // Optional\n  documentationURL:\n    \"https://developers.home-assistant.io/docs/frontend/custom-ui/custom-badge\", // Adds a help link in the frontend badge editor\n});\n```\n\n----------------------------------------\n\nTITLE: Forwarding Config Entry Setup to Platforms\nDESCRIPTION: Code for forwarding config entry setup to multiple platform components in Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait hass.config_entries.async_forward_entry_setups(config_entry, [\"light\", \"sensor\", \"switch\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing PKCE Support in Python\nDESCRIPTION: Return the LocalOAuth2ImplementationWithPkce in application_credentials.py to support PKCE (Proof Key for Code Exchange).\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/application_credentials.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.helpers.config_entry_oauth2_flow import AbstractOAuth2Implementation, LocalOAuth2ImplementationWithPkce\nfrom homeassistant.components.application_credentials import AuthImplementation, ClientCredential\n\n\nasync def async_get_auth_implementation(\n    hass: HomeAssistant, auth_domain: str, credential: ClientCredential\n) -> AbstractOAuth2Implementation:\n    \"\"\"Return auth implementation for a custom auth implementation.\"\"\"\n    return LocalOAuth2ImplementationWithPkce(\n        hass,\n        auth_domain,\n        credential.client_id,\n        authorize_url=\"https://example.com/auth\",\n        token_url=\"https://example.com/oauth2/v4/token\",\n        client_secret=credential.client_secret, # optional `\"\"` is default\n        code_verifier_length=128 # optional\n    )\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Lovelace View Element Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Lovelace custom view elements. It outlines the required properties and methods that custom view components must implement, including hass, lovelace, index, cards, badges, and setConfig.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-view.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LovelaceViewElement {\n  hass?: HomeAssistant;\n  lovelace?: Lovelace;\n  index?: number;\n  cards?: Array<LovelaceCard | HuiErrorCard>;\n  badges?: LovelaceBadge[];\n  setConfig(config: LovelaceViewConfig): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Config Entry Migration Function\nDESCRIPTION: Function signature for migrating config entries to a new version.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def async_migrate_entry(hass: HomeAssistant, config_entry: ConfigEntry) -> bool:\n    \"\"\"Migrate old entry.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Property Type Definitions for Light Entity\nDESCRIPTION: Defines the core properties of a light entity including brightness, color modes, temperature, and effects. Each property includes type definitions and default values.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/light.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbrightness: int | None = None           // Brightness between 1..255\ncolor_mode: ColorMode | None = None     // Current color mode\ncolor_temp_kelvin: int | None = None    // CT color value in K\neffect: str | None = None               // Current effect\neffect_list: list[str] | None = None    // List of supported effects\nhs_color: tuple[float, float] | None = None // Hue and saturation\nis_on: bool | None = None                // Light state\nmax_color_temp_kelvin: int | None = None // Maximum color temperature\nmin_color_temp_kelvin: int | None = None // Minimum color temperature\nrgb_color: tuple[int, int, int] | None = None // RGB color value\nrgbw_color: tuple[int, int, int, int] | None = None // RGBW color value\nrgbww_color: tuple[int, int, int, int, int] | None = None // RGBWW color value\nsupported_color_modes: set[ColorMode] | None = None // Supported modes\nxy_color: tuple[float, float] | None = None // XY color value\n```\n\n----------------------------------------\n\nTITLE: Updating Android Lint Baseline with Gradle\nDESCRIPTION: Command to regenerate the Android lint baseline XML file, which is used to ignore pre-existing issues when new lint checks are added or updated.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/linter.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew updateLintBaseline\n```\n\n----------------------------------------\n\nTITLE: Checking if a Bluetooth Device is Present in Python\nDESCRIPTION: This code demonstrates how to check if a specific Bluetooth device is still present. This is useful for integrations that need to know if a device is available before performing operations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\nbluetooth.async_address_present(hass, \"44:44:33:11:23:42\", connectable=True)\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Response for Push Notifications in Home Assistant\nDESCRIPTION: Example JSON response from a server implementing rate limiting for push notifications. Includes counters for successful and failed notifications, the maximum allowed, and when the limit resets.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/notifications.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rateLimits\": {\n    \"successful\": 1,\n    \"errors\": 5,\n    \"maximum\": 150,\n    \"resetsAt\": \"2019-04-08T00:00:00.000Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sensor Entity Group Exclusion\nDESCRIPTION: Example implementation of async_describe_on_off_states for sensor entities, demonstrating how to exclude an entity platform from group integration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-10-group-integration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Describe group states.\"\"\"\n\nfrom typing import TYPE_CHECKING\n\nfrom homeassistant.core import HomeAssistant, callback\n\nif TYPE_CHECKING:\n    from homeassistant.components.group import GroupIntegrationRegistry\n\nfrom .const import DOMAIN\n\n\n@callback\ndef async_describe_on_off_states(\n    hass: HomeAssistant, registry: \"GroupIntegrationRegistry\"\n) -> None:\n    \"\"\"Describe group on off states.\"\"\"\n    registry.exclude_domain(DOMAIN)\n```\n\n----------------------------------------\n\nTITLE: Binary Sensor Device Classes Enumeration\nDESCRIPTION: Lists all available device classes for binary sensors in Home Assistant with their semantic meanings for the on/off states. Each device class defines a specific type of binary sensor with corresponding state interpretations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/binary-sensor.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n| Constant | Description\n| ----- | -----------\n| `BinarySensorDeviceClass.BATTERY` | On means low, Off means normal.\n| `BinarySensorDeviceClass.BATTERY_CHARGING` | On means charging, Off means not charging.\n| `BinarySensorDeviceClass.CO` | On means carbon monoxide detected, Off means no carbon monoxide (clear).\n| `BinarySensorDeviceClass.COLD` | On means cold, Off means normal.\n| `BinarySensorDeviceClass.CONNECTIVITY` | On means connected, Off means disconnected.\n| `BinarySensorDeviceClass.DOOR` | On means open, Off means closed.\n| `BinarySensorDeviceClass.GARAGE_DOOR` | On means open, Off means closed.\n| `BinarySensorDeviceClass.GAS` | On means gas detected, Off means no gas (clear).\n| `BinarySensorDeviceClass.HEAT` | On means hot, Off means normal.\n| `BinarySensorDeviceClass.LIGHT` | On means light detected, Off means no light.\n| `BinarySensorDeviceClass.LOCK` | On means open (unlocked), Off means closed (locked).\n| `BinarySensorDeviceClass.MOISTURE` | On means wet, Off means dry.\n| `BinarySensorDeviceClass.MOTION` | On means motion detected, Off means no motion (clear).\n| `BinarySensorDeviceClass.MOVING` | On means moving, Off means not moving (stopped).\n| `BinarySensorDeviceClass.OCCUPANCY` | On means occupied, Off means not occupied (clear).\n| `BinarySensorDeviceClass.OPENING` | On means open, Off means closed.\n| `BinarySensorDeviceClass.PLUG` | On means plugged in, Off means unplugged.\n| `BinarySensorDeviceClass.POWER` | On means power detected, Off means no power.\n| `BinarySensorDeviceClass.PRESENCE` | On means home, Off means away.\n| `BinarySensorDeviceClass.PROBLEM` | On means problem detected, Off means no problem (OK).\n| `BinarySensorDeviceClass.RUNNING` | On means running, Off means not running.\n| `BinarySensorDeviceClass.SAFETY` | On means unsafe, Off means safe.\n| `BinarySensorDeviceClass.SMOKE` | On means smoke detected, Off means no smoke (clear).\n| `BinarySensorDeviceClass.SOUND` | On means sound detected, Off means no sound (clear).\n| `BinarySensorDeviceClass.TAMPER` | On means tampering detected, Off means no tampering (clear)\n| `BinarySensorDeviceClass.UPDATE` | On means update available, Off means up-to-date. The use of this device class should be avoided, please consider using the [`update`](/docs/core/entity/update) entity instead.\n| `BinarySensorDeviceClass.VIBRATION` | On means vibration detected, Off means no vibration.\n| `BinarySensorDeviceClass.WINDOW` | On means open, Off means closed.\n```\n\n----------------------------------------\n\nTITLE: Implementing Album Art Proxy in Python\nDESCRIPTION: Implements image proxying for album art when accessing media player from external networks.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/media-player.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MyMediaPlayer(MediaPlayerEntity):\n\n    async def async_get_browse_image(self, media_content_type, media_content_id, media_image_id=None):\n    \"\"\"Serve album art. Returns (content, content_type).\"\"\"\n    image_url = ...\n    return await self._async_fetch_image(image_url)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Server in Python\nDESCRIPTION: Create an application_credentials.py file in the integration folder and implement the async_get_authorization_server function to return an AuthorizationServer object.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/application_credentials.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.components.application_credentials import AuthorizationServer\n\n\nasync def async_get_authorization_server(hass: HomeAssistant) -> AuthorizationServer:\n    \"\"\"Return authorization server.\"\"\"\n    return AuthorizationServer(\n        authorize_url=\"https://example.com/auth\",\n        token_url=\"https://example.com/oauth2/v4/token\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with RemoteEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Remote are replaced with the RemoteEntityFeature enum. This enum provides equivalent functionality for supported features in remote entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.remote import RemoteEntityFeature\n\n# Use RemoteEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Calendar Events Response Format - JSON\nDESCRIPTION: Example response format for calendar events showing both all-day and timed events\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"summary\": \"Cinco de Mayo\",\n    \"start\": {\n      \"date\": \"2022-05-05\"\n    },\n    \"end\": {\n      \"date\": \"2022-05-06\"\n    },\n  },\n  {\n    \"summary\": \"Birthday Party\",\n    \"start\": {\n      \"dateTime\": \"2022-05-06T20:00:00-07:00\"\n    },\n    \"end\": {\n      \"dateTime\": \"2022-05-06T23:00:00-07:00\"\n    },\n    \"description\": \"Don't forget to bring balloons\",\n    \"location\": \"Brian's House\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Update Registration Webhook in JSON\nDESCRIPTION: JSON payload for updating app registration details in Home Assistant. This webhook allows apps to update information like push notification tokens, app version, device details, and other registration information after initial registration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"update_registration\",\n  \"data\": {\n    \"app_data\": {\n      \"push_token\": \"abcd\",\n      \"push_url\": \"https://push.mycool.app/push\"\n    },\n    \"app_version\": \"2.0.0\",\n    \"device_name\": \"Robbies iPhone\",\n    \"manufacturer\": \"Apple, Inc.\",\n    \"model\": \"iPhone XR\",\n    \"os_version\": \"23.02\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Supported Intents Documentation in JavaScript\nDESCRIPTION: This code generates the documentation for supported intents. It filters the intents object, then maps each intent to its description, slots, and integration information.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_builtin.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  Object.entries(intents)\n  .filter(([intent, info]) => info[\"supported\"])\n  .map(\n    ([intent, info]) =>\n      <>\n        <h3>{intent}</h3>\n        <p>{info.description}</p>\n        {info.slots &&\n          (<b>Slots</b>) && (\n          <ul>\n            {Object.entries(info.slots).map(([slot, slotInfo]) => (\n              <li>\n                <b>{slot}</b> - {slotInfo.description + (slotInfo.required ? \" (required)\" : \"\")}\n              </li>\n            ))}\n          </ul>\n        )}\n        <p><small>\n          <a href={`https://www.home-assistant.io/integrations/${info.domain}`}>Provided by the <code>{info.domain}</code> integration.</a>\n        </small></p>\n      </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Frontend from External App in TypeScript\nDESCRIPTION: This snippet demonstrates how external apps can send messages to the Home Assistant frontend. It shows the function to call with a serialized JSON message as the parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.externalBus(message: string)\n```\n\n----------------------------------------\n\nTITLE: Processing Conversation in Home Assistant WebSocket API\nDESCRIPTION: This endpoint processes a sentence with the conversation integration. It requires Home Assistant 2023.2.0 or later. Parameters include 'text' for the sentence, 'language' for the language code, and 'conversation_id' for tracking the conversation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"conversation_process\",\n  \"data\": {\n    \"text\": \"Turn on the lights\",\n    \"language\": \"en\",\n    \"conversation_id\": \"ABCD\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extra State Attributes in Python\nDESCRIPTION: Example of how to expose additional state attributes for a platform using a property decorator.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_states.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@property\\ndef extra_state_attributes(self):\\n    \"\"\"Return entity specific state attributes.\"\"\"\\n    return self._attributes\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Definitions for Home Assistant API Models\nDESCRIPTION: Comprehensive markdown tables defining the data structures and types for various Home Assistant Supervisor API models including add-ons, applications, audio configurations, networking interfaces, and system services.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/supervisor/models.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| key              | type           | description                                           |\n| ---------------- | -------------- | ----------------------------------------------------- |\n| name             | string         | The name of the add-on                                |\n| slug             | string         | The slug for the add-on                               |\n| advanced         | boolean        | `true` if it should only be visible to advanced users |\n| description      | string         | The description of the add-on                         |\n| repository       | string         | The repository the add-on came from                   |\n| version          | string or null | The installed version of the add-on                   |\n| version_latest   | string         | The latest published version of the add-on            |\n| update_available | boolean        | `true` if an update is available                      |\n| installed        | string         | `true` if the the add-on is installed                 |\n| available        | boolean        | `false` if you can not install the add-on             |\n| icon             | bool           | The add-on has an icon file                           |\n| logo             | bool           | The add-on has a logo file                            |\n| state            | string         | The state of the add-on (started, stopped)            |\n| system_managed   | bool           | Indicates whether the add-on is managed by Home Assistant |\n```\n\n----------------------------------------\n\nTITLE: Registering Custom View Element\nDESCRIPTION: Code snippet showing how to register a custom view element with the browser's Custom Element Registry, making it available for use in Home Assistant configurations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-view.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncustomElements.define(\"my-new-view\", MyNewView);\n```\n\n----------------------------------------\n\nTITLE: Using async_add_executor_job for running callables in the executor\nDESCRIPTION: For callables that should run in the executor, use hass.async_add_executor_job as an alternative to the deprecated methods.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-03-13-deprecate_add_run_job.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhass.async_add_executor_job\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-wide KTLint Rule Suppression in EditorConfig\nDESCRIPTION: Example showing how to disable KTLint rules globally in the .editorconfig file. This demonstrates disabling trailing comma rules while still allowing them to be used.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/linter.md#2025-04-21_snippet_1\n\nLANGUAGE: editorconfig\nCODE:\n```\n...\n# Allow trailing commas but do not enfoce it to follow Kotlin convention\nktlint_standard_trailing-comma-on-call-site = disabled\nij_kotlin_allow_trailing_comma_on_call_site = true\nktlint_standard_trailing-comma-on-declaration-site = disabled\nij_kotlin_allow_trailing_comma = true\n```\n\n----------------------------------------\n\nTITLE: Scaling to Ranged Value in Python\nDESCRIPTION: Utility function to convert a value from one range to another, returning a float result. Particularly useful for continuous value scaling.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-12-05-scaling-utils.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef scale_to_ranged_value(\n    source_low_high_range: tuple[float, float],\n    target_low_high_range: tuple[float, float],\n    value: int,\n) -> float:\n    \"\"\"Given a range of low and high values convert a single value to another range.\n\n    Do not include 0 in a range if 0 means off,\n    e.g. for brightness or fan speed.\n\n    Given a source low value of 1 and a high value of 255 and\n    a target range from 1 to 100 this function\n    will return:\n\n    (1,255), 255: 100\n    (1,255), 127: ~49.8039\n    (1,255), 10: ~3.9216\n    \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Light Class in Python\nDESCRIPTION: Python class to represent a Light object from the ExampleHub API. It provides properties for each data field and methods to control and update the light state through API requests.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_data_models.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom .auth import Auth\n\n\nclass Light:\n    \"\"\"Class that represents a Light object in the ExampleHub API.\"\"\"\n\n    def __init__(self, raw_data: dict, auth: Auth):\n        \"\"\"Initialize a light object.\"\"\"\n        self.raw_data = raw_data\n        self.auth = auth\n\n    # Note: each property name maps the name in the returned data\n\n    @property\n    def id(self) -> int:\n        \"\"\"Return the ID of the light.\"\"\"\n        return self.raw_data[\"id\"]\n\n    @property\n    def name(self) -> str:\n        \"\"\"Return the name of the light.\"\"\"\n        return self.raw_data[\"name\"]\n\n    @property\n    def is_on(self) -> bool:\n        \"\"\"Return if the light is on.\"\"\"\n        return self.raw_data[\"id\"]\n\n    async def async_control(self, is_on: bool):\n        \"\"\"Control the light.\"\"\"\n        resp = await self.auth.request(\n            \"post\", f\"light/{self.id}\", json={\"is_on\": is_on}\n        )\n        resp.raise_for_status()\n        self.raw_data = await resp.json()\n\n    async def async_update(self):\n        \"\"\"Update the light data.\"\"\"\n        resp = await self.auth.request(\"get\", f\"light/{self.id}\")\n        resp.raise_for_status()\n        self.raw_data = await resp.json()\n```\n\n----------------------------------------\n\nTITLE: Looking up SSDP Device by UDN and ST\nDESCRIPTION: Code to look up a specific SSDP device using its UDN (Unique Device Name) and ST (Service Type). Returns discovery_info or None if not found.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import ssdp\n\n...\n\ndiscovery_info = await ssdp.async_get_discovery_info_by_udn_st(hass, udn, st)\n```\n\n----------------------------------------\n\nTITLE: Updating Sensor States in Home Assistant Mobile App\nDESCRIPTION: JSON example showing how to update previously registered sensors. Demonstrates how to update multiple sensors in a single request with attributes, icon, state, type, and unique_id fields.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sensors.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"attributes\": {\n        \"hello\": \"world\"\n      },\n      \"icon\": \"mdi:battery\",\n      \"state\": 123,\n      \"type\": \"sensor\",\n      \"unique_id\": \"battery_state\"\n    }\n  ],\n  \"type\": \"update_sensor_states\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Add-on Repository in YAML\nDESCRIPTION: This YAML snippet shows the structure of the required 'repository.yaml' file for a Home Assistant add-on repository. It includes fields for the repository name, URL, and maintainer contact information.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/repository.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Name of repository\nurl: http://www.example/addons\nmaintainer: HomeAssistant Team <info@home-assistant.io>\n```\n\n----------------------------------------\n\nTITLE: Excluding Domain Registry Method Signature\nDESCRIPTION: Method signature for excluding a domain from group integration. Takes domain as the only parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-10-group-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    @callback\n    def exclude_domain(self, domain: str) -> None:\n        \"\"\"Exclude the current domain.\"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Custom Component Import Example - Python\nDESCRIPTION: Example demonstrating the recommended way to use relative imports in custom components to maintain compatibility during Home Assistant upgrades.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2019-02-19-the-great-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom . import DATA_BRIDGE\n```\n\n----------------------------------------\n\nTITLE: Using deprecated async_track_state_change in Home Assistant Python\nDESCRIPTION: Example showing how to use the deprecated async_track_state_change method to track state changes for a specific entity. This approach creates a top-level listener that filters events.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-04-13-deprecate_async_track_state_change.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import State, callback\nfrom homeassistant.helpers.event import async_track_state_change\n\n@callback\ndef _async_on_change(entity_id: str, old_state: State | None, new_state: State | None) -> None:\n    ...\n\nunsub = async_track_state_change(hass, \"sensor.one\", _async_on_change)\nunsub()\n```\n\n----------------------------------------\n\nTITLE: Building Home Assistant Add-on Using Official Build Tool\nDESCRIPTION: This command uses the official Home Assistant build tool to create Docker images for an add-on across all supported architectures. It mounts the add-on directory and Docker socket, enabling local building and testing.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n  --rm \\\n  -it \\\n  --name builder \\\n  --privileged \\\n  -v /path/to/addon:/data \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  ghcr.io/home-assistant/amd64-builder \\\n  -t /data \\\n  --all \\\n  --test \\\n  -i my-test-addon-{arch} \\\n  -d local\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan Entity Methods for Speed Percentage\nDESCRIPTION: Code snippet showing how to implement the methods for setting fan speed percentage. This should be implemented when the FanEntityFeature.SET_SPEED flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/fan.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass FanEntity(ToggleEntity):\n    # Implement one of these methods.\n\n    def set_percentage(self, percentage: int) -> None:\n        \"\"\"Set the speed percentage of the fan.\"\"\"\n\n    async def async_set_percentage(self, percentage: int) -> None:\n        \"\"\"Set the speed percentage of the fan.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Converting Synchronous Platform Setup to Asynchronous in Home Assistant\nDESCRIPTION: Demonstrates how to convert a synchronous platform setup function to an asynchronous version. The key difference is the async_add_entities callback replacing the original add_entities function.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_working_with_async.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef setup_platform(hass, config, add_entities, discovery_info=None):\n    \"\"\"Set up platform.\"\"\"\n    # Code for setting up your platform outside of the event loop.\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_platform(hass, config, async_add_entities, discovery_info=None):\n    \"\"\"Set up platform.\"\"\"\n    # Code for setting up your platform inside of the event loop.\n```\n\n----------------------------------------\n\nTITLE: Defining Integration Quality Scale in Manifest JSON\nDESCRIPTION: JSON manifest snippet for specifying the quality scale of an integration. This example shows how to declare a silver-tier integration according to Home Assistant's Integration Quality Scale.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n \"quality_scale\": \"silver\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Updates Constant in RFLink Platform\nDESCRIPTION: Example of how to define the PARALLEL_UPDATES constant in a Home Assistant platform file to override the default parallel request limit. This setting controls how many simultaneous updates or service calls the platform can handle.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/integration_fetching_data.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPARALLEL_UPDATES = 1\n```\n\n----------------------------------------\n\nTITLE: Looking up SSDP Devices by UDN\nDESCRIPTION: Code to retrieve all SSDP services provided by a specific UDN (Unique Device Name). Returns a list of discovery_info objects for all services of the device.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/network_discovery.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import ssdp\n\n...\n\ndiscovery_infos = await ssdp.async_get_discovery_info_by_udn(hass, udn)\nfor discovery_info in discovery_infos:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Platform Config Entry Setup Function\nDESCRIPTION: Basic async function signature for setting up a platform config entry in Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_entry(hass, config_entry, async_add_entities):\n    \"\"\"Set up entry.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Interacting with API Objects in Python\nDESCRIPTION: Shows the correct way to interact with API objects using a third-party library instead of making direct API calls in Home Assistant components.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_component_code_review.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# bad\nstatus = requests.get(url(\"/status\"))\n# good\nfrom phue import Bridge\n\nbridge = Bridge(...)\nstatus = bridge.status()\n```\n\n----------------------------------------\n\nTITLE: Setting Scan Interval for Home Assistant Integration\nDESCRIPTION: Example of setting a custom scan interval for a Home Assistant integration polling mechanism. Defines minimum polling time of 5 seconds using timedelta.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/integration_fetching_data.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\n\nSCAN_INTERVAL = timedelta(seconds=5)\n```\n\n----------------------------------------\n\nTITLE: Setting Cover Tilt Position in Python\nDESCRIPTION: Implementation of set_cover_tilt_position methods for a cover entity. Only implement if SUPPORT_SET_TILT_POSITION flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/cover.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MyCover(CoverEntity):\n    # Implement one of these methods.\n\n    def set_cover_tilt_position(self, **kwargs):\n        \"\"\"Move the cover tilt to a specific position.\"\"\"\n\n    async def async_set_cover_tilt_position(self, **kwargs):\n        \"\"\"Move the cover tilt to a specific position.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Home Assistant State Object Structure\nDESCRIPTION: Example of the hass.states object structure showing state data for sun and light entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/data.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sun.sun\": {\n    \"entity_id\": \"sun.sun\",\n    \"state\": \"above_horizon\",\n    \"attributes\": {\n      \"next_dawn\": \"2018-08-18T05:39:19+00:00\",\n      \"next_dusk\": \"2018-08-17T18:28:52+00:00\",\n      \"next_midnight\": \"2018-08-18T00:03:51+00:00\",\n      \"next_noon\": \"2018-08-18T12:03:58+00:00\",\n      \"next_rising\": \"2018-08-18T06:00:33+00:00\",\n      \"next_setting\": \"2018-08-17T18:07:37+00:00\",\n      \"elevation\": 60.74,\n      \"azimuth\": 297.69,\n      \"friendly_name\": \"Sun\"\n    },\n    \"last_changed\": \"2018-08-17T13:46:59.083836+00:00\",\n    \"last_updated\": \"2018-08-17T13:49:30.378101+00:00\",\n    \"context\": {\n      \"id\": \"74c2b3b429c844f18e59669e4b41ec6f\",\n      \"user_id\": null\n    },\n  },\n  \"light.ceiling_lights\": {\n    \"entity_id\": \"light.ceiling_lights\",\n    \"state\": \"on\",\n    \"attributes\": {\n      \"min_mireds\": 153,\n      \"max_mireds\": 500,\n      \"brightness\": 180,\n      \"color_temp\": 380,\n      \"hs_color\": [\n        56,\n        86\n      ],\n      \"rgb_color\": [\n        255,\n        240,\n        35\n      ],\n      \"xy_color\": [\n        0.459,\n        0.496\n      ],\n      \"white_value\": 200,\n      \"friendly_name\": \"Ceiling Lights\",\n      \"supported_features\": 151\n    },\n    \"last_changed\": \"2018-08-17T13:46:59.129248+00:00\",\n    \"last_updated\": \"2018-08-17T13:46:59.129248+00:00\",\n    \"context\": {\n      \"id\": \"2c6bbbbb66a84a9dae097b6ed6c93383\",\n      \"user_id\": null\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Python's asyncio Module for Home Assistant Core\nDESCRIPTION: This snippet highlights the use of Python's built-in asyncio module as the foundation for Home Assistant's new core architecture. It enables asynchronous task execution in the event loop, eliminating the need for locks and improving overall system consistency.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n**asyncio**\n```\n\n----------------------------------------\n\nTITLE: Setting Import Executor Flag in Home Assistant Manifest\nDESCRIPTION: Configuration setting in manifest.json to opt-out of executor-based importing, reverting to event loop importing for integrations that create loop-bound objects at import time.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-03-09-import_executor_default.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"import_executor\": false\n```\n\n----------------------------------------\n\nTITLE: Importing YAML Credentials in Python\nDESCRIPTION: Example of importing YAML credentials using the async_import_client_credential API provided by the application credentials integration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/application_credentials.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.application_credentials import (\n    ClientCredential,\n    async_import_client_credential,\n)\n\n# Example configuration.yaml schema for an integration\nCONFIG_SCHEMA = vol.Schema(\n    {\n        DOMAIN: vol.Schema(\n            {\n                vol.Required(CONF_CLIENT_ID): cv.string,\n                vol.Required(CONF_CLIENT_SECRET): cv.string,\n            }\n        )\n    },\n)\n\nasync def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:\n    \"\"\"Set up the component.\"\"\"\n    if DOMAIN not in config:\n        return True\n\n    await async_import_client_credential(\n        hass,\n        DOMAIN,\n        ClientCredential(\n            config[DOMAIN][CONF_CLIENT_ID],\n            config[DOMAIN][CONF_CLIENT_SECRET],\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Handling Service Calls with Kelvin Color Temperature\nDESCRIPTION: Example of processing light.turn_on service calls with the new ATTR_COLOR_TEMP_KELVIN attribute, converting to mireds when needed for device compatibility.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-12-14-kelvin-preferred-color-temperature-unit.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.light import ATTR_COLOR_TEMP_KELVIN\nfrom homeassistant.util import color as color_util\n\nclass MyLight(LightEntity):\n    \"\"\"Representation of a light.\"\"\"\n    def turn_on(self, **kwargs: Any) -> None:\n        \"\"\"Turn on the light.\"\"\"\n        # Old\n        # if ATTR_COLOR_TEMP in kwargs:\n        #     color_temp_mired = kwargs[ATTR_COLOR_TEMP]\n        #     color_temp_kelvin = color_util.color_temperature_mired_to_kelvin(color_temp_mired)\n\n        # Old\n        # if ATTR_KELVIN in kwargs:\n        #     color_temp_kelvin = kwargs[ATTR_KELVIN]\n        #     color_temp_mired = color_util.color_temperature_kelvin_to_mired(color_temp_kelvin)\n\n        # New\n        if ATTR_COLOR_TEMP_KELVIN in kwargs:\n            color_temp_kelvin = kwargs[ATTR_COLOR_TEMP_KELVIN]\n            color_temp_mired = color_util.color_temperature_kelvin_to_mired(color_temp_kelvin)\n```\n\n----------------------------------------\n\nTITLE: Translation String Configuration in JSON\nDESCRIPTION: Configuration of translation strings in strings.json that defines how the placeholder will be used in the entity name. The {channel_id} placeholder will be replaced with the value provided by the entity.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-01-19-entity-translations-placeholders.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"sensor\": {\n      \"temperature\": {\n        \"name\": \"Temperature channel {channel_id}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Custom View\nDESCRIPTION: Example YAML configuration that uses a custom view layout in a Home Assistant dashboard. The configuration includes the view title, type specifier for the custom element, and placeholder arrays for badges and cards.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-view.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- title: Home View\n  type: custom:my-new-view\n  badges: [...]\n  cards: [...]\n```\n\n----------------------------------------\n\nTITLE: Using REST Command in Home Assistant Automation\nDESCRIPTION: Demonstrates how to use the RESTful Command integration in a Home Assistant automation or script to make API calls. This example shows turning on a light via the API.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nturn_light_on:\n  url: http://localhost:8123/api/states/light.study_light\n  method: POST\n  headers:\n    authorization: 'Bearer TOKEN'\n    content-type: 'application/json'\n  payload: '{\"state\":\"on\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining Lists and Expansion Rules in YAML\nDESCRIPTION: This snippet shows how to define lists and expansion rules in the common file. It includes examples of color lists, brightness ranges, and common expansion rules.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/template-sentence-syntax.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlists:\n  color:\n    values:\n      - \"white\"\n      - \"red\"\n      - \"orange\"\n  brightness:\n    range:\n      type: \"percentage\"\n      from: 0\n      to: 100\n  brightness_level:\n    values:\n      - in: (max | maximum | highest)\n        out: 100\n      - in: ( minimum | lowest)\n        out: 1\n\nexpansion_rules:\n  name: \"[the] {name}\"\n  area: \"[the] {area}\"\n  what_is: \"(what's | whats | what is)\"\n  brightness: \"{brightness} [percent]\"\n  turn: \"(turn | switch)\"\n\nskip_words:\n  - \"please\"\n  - \"can you\"\n```\n\n----------------------------------------\n\nTITLE: Template API Example\nDESCRIPTION: Example JSON request and response for rendering a Home Assistant template via the API.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"template\": \"Paulus is at {{ states('device_tracker.paulus') }}!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using hass.helpers for async_get_clientsession in Home Assistant (Deprecated Method)\nDESCRIPTION: Shows the deprecated method of using hass.helpers to access async_get_clientsession in Home Assistant. This approach will be removed in Home Assistant 2024.11.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-03-30-deprecate-hass-helpers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\n\nasync def async_setup(hass: HomeAssistant, config):\n    \"\"\"Set up the component.\"\"\"\n    client = hass.helpers.aiohttp_client.async_get_clientsession()\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Mobile App Registration Response\nDESCRIPTION: JSON response from Home Assistant after successful device registration. Contains URLs for interacting with the Home Assistant instance and a secret for encrypted communication.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/setup.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cloudhook_url\": \"https://hooks.nabu.casa/randomlongstring123\",\n  \"remote_ui_url\": \"https://randomlongstring123.ui.nabu.casa\",\n  \"secret\": \"qwerty\",\n  \"webhook_id\": \"abcdefgh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining External Bus Method for Android in TypeScript\nDESCRIPTION: This snippet shows how to define the external bus method for Android apps embedding the Home Assistant frontend. It specifies the function signature that the Android app needs to implement to receive messages from the frontend.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.externalApp.externalBus(message: string)\n```\n\n----------------------------------------\n\nTITLE: Getting Default Fallback Bluetooth Interval in Python\nDESCRIPTION: This snippet shows how to access the default fallback interval used for Bluetooth devices when no learned or custom interval is available. This is a hardcoded safe value used when tracking device availability.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\ndefault_fallback_interval = bluetooth.FALLBACK_MAXIMUM_STALE_ADVERTISEMENT_SECONDS\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Panel in Home Assistant YAML\nDESCRIPTION: YAML configuration for registering a custom panel in Home Assistant. This configuration specifies panel properties including name, URL path, sidebar details, module location, and custom configuration data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/creating-custom-panels.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npanel_custom:\n  - name: example-panel\n    # url_path needs to be unique for each panel_custom config\n    url_path: redirect-server-controls\n    sidebar_title: Example Panel\n    sidebar_icon: mdi:server\n    module_url: /local/example-panel.js\n    config:\n      # Data you want to make available to panel\n      hello: world\n```\n\n----------------------------------------\n\nTITLE: New Icon Translation Schema Format\nDESCRIPTION: Demonstrates the new schema format that allows specifying icons for both services and their sections. The schema supports hierarchical icon assignments with service-level and section-level icons.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-08-27-changed-icon-translations-schema.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"services\": {\n    \"test_service_1\": {\n      \"service\": \"mdi:flask\",\n      \"sections\": {\n        \"section_1\": \"mdi:test-tube\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Listing Home Assistant Events\nDESCRIPTION: Shows how to retrieve a list of available events in Home Assistant using the /api/events endpoint. The response includes event names and listener counts.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" http://localhost:8123/api/events\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers and MFA Modules in YAML\nDESCRIPTION: This YAML configuration example demonstrates how to set up authentication providers and multi-factor authentication modules in Home Assistant. It includes the homeassistant auth provider, legacy API password, TOTP, and an insecure example module.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_auth_module.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhomeassistant:\n  auth_providers:\n    - type: homeassistant\n    - type: legacy_api_password\n  auth_mfa_modules:\n    - type: totp\n    - type: insecure_example\n      users: [{'user_id': 'a_32_bytes_length_user_id', 'pin': '123456'}]\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Translations in JSON for Home Assistant\nDESCRIPTION: This JSON snippet defines icons for a sensor entity, including a default icon and a state-specific icon. It specifies 'mdi:tree' as the default icon and 'mdi:tree-outline' for the 'high' state of the tree pollen sensor.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/icon-translations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"sensor\": {\n      \"tree_pollen\": {\n        \"default\": \"mdi:tree\",\n        \"state\": {\n          \"high\": \"mdi:tree-outline\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Parallel Updates for Sensor Entity in Python\nDESCRIPTION: This code snippet demonstrates how to set the number of parallel updates for a sensor entity in Home Assistant. It limits the updates to one at a time, which is useful when dealing with devices that can't handle multiple simultaneous requests.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/parallel-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPARALLEL_UPDATES = 1\n\nclass MySensor(SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n\n    def __init__(self, device: Device) -> None:\n        \"\"\"Initialize the sensor.\"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining Translations in strings.json\nDESCRIPTION: Example of defining translations for Application Credentials under the application_credentials key in the component translation file strings.json.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/application_credentials.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"application_credentials\": {\n        \"description\": \"Navigate to the [developer console]({console_url}) to create credentials then enter them below.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Config Entry Removal Function\nDESCRIPTION: Function signature for handling cleanup when a config entry is removed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def async_remove_entry(hass, entry) -> None:\n    \"\"\"Handle removal of an entry.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity State Icons with Icon Translations in Home Assistant\nDESCRIPTION: An example icons.json file that maps different moon phases to specific icons for a Moon sensor entity. It defines a default icon and specific icons for different moon phase states.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-01-19-icon-translations.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"sensor\": {\n      \"phase\": {\n        \"default\": \"mdi:moon\",\n        \"state\": {\n          \"new_moon\": \"mdi:moon-new\",\n          \"first_quarter\": \"mdi:moon-first-quarter\",\n          \"full_moon\": \"mdi:moon-full\",\n          \"last_quarter\": \"mdi:moon-last-quarter\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Version Comparison in Home Assistant Update Platform (Python)\nDESCRIPTION: The default implementation of version comparison in the Home Assistant update platform. It uses AwesomeVersion to compare the latest version with the installed version.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-09-28-update-version-compare.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef version_is_newer(self, latest_version: str, installed_version: str) -> bool:\n    \"\"\"Return True if latest_version is newer than installed_version.\"\"\"\n    return AwesomeVersion(latest_version) > installed_version\n```\n\n----------------------------------------\n\nTITLE: Implementing Temperature Range Conversion in Climate Entity\nDESCRIPTION: Example showing how to implement min_temp and max_temp properties in a climate entity that converts device native temperature values to the integration's specified temperature unit. Uses TemperatureConverter to handle unit conversions between Celsius and Fahrenheit.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-07-24-climate-min-max-temperature-check.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    \"\"\"Implementation of my climate entity.\"\"\"\n\n    @property\n    def min_temp(self) -> float:\n        \"\"\"Return the minimum temperature.\"\"\"\n        return TemperatureConverter.convert(\n                self.device.min_temp, UnitOfTemperature.CELSIUS, self.temperature_unit\n            )\n\n    @property\n    def max_temp(self) -> float:\n        \"\"\"Return the maximum temperature.\"\"\"\n        return TemperatureConverter.convert(\n                self.device.max_temp, UnitOfTemperature.CELSIUS, self.temperature_unit\n            )\n\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration Variables for UI Config in Home Assistant Documentation (Markdown)\nDESCRIPTION: Example of using the configuration_basic block to document configuration options for integrations that are set up through the UI.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n{% configuration_basic %}\nHost:\n    description: \"The IP address of your bridge. You can find it in your router or in the Integration app under **Bridge Settings** > **Local API**.\"\nLocal access token:\n    description: \"The local access token for your bridge. You can find it in the Integration app under **Bridge Settings** > **Local API**.\"\n{% endconfiguration_basic %}\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Component Log Output\nDESCRIPTION: Example log output showing successful initialization of the Hello State component.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_states.md#2025-04-21_snippet_2\n\nLANGUAGE: log\nCODE:\n```\n16-03-12 14:16:42 INFO (MainThread) [custom_components.hello_state] The 'hello state' component is ready!\n```\n\n----------------------------------------\n\nTITLE: Importing BinarySensor Entity with Backwards Compatibility\nDESCRIPTION: Code snippet demonstrating how to import the BinarySensorEntity class while maintaining backwards compatibility with older Home Assistant versions. Uses try/except block to fall back to the legacy BinarySensorDevice class if the new class is not available.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-05-14-entity-class-names.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    from homeassistant.components.binary_sensor import BinarySensorEntity\nexcept ImportError:\n    from homeassistant.components.binary_sensor import BinarySensorDevice as BinarySensorEntity\n```\n\n----------------------------------------\n\nTITLE: String Formatting for Logging in Python for Home Assistant\nDESCRIPTION: When formatting strings for logging, Home Assistant recommends using the percentage formatting method to avoid processing log messages that will be suppressed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_guidelines.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n_LOGGER.info(\"Can't connect to the webservice %s at %s\", string1, string2)\n```\n\n----------------------------------------\n\nTITLE: Fetching Panels Command in Home Assistant WebSocket API\nDESCRIPTION: Command to retrieve all registered panels from Home Assistant via the WebSocket API.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"get_panels\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Open Method in Home Assistant Lock Entity\nDESCRIPTION: Implementation of open methods for a custom lock entity. Includes both synchronous and asynchronous implementations for opening functionality with optional code parameter. Only required when SUPPORT_OPEN flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/lock.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyLock(LockEntity):\n\n    def open(self, **kwargs):\n        \"\"\"Open (unlatch) all or specified locks. A code to open the lock with may optionally be specified.\"\"\"\n\n    async def async_open(self, **kwargs):\n        \"\"\"Open (unlatch) all or specified locks. A code to open the lock with may optionally be specified.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Build Options for Home Assistant Add-ons\nDESCRIPTION: Example build.yaml configuration for customizing the build process of a Home Assistant add-on. Specifies custom base images for different architectures, squashing options, and build arguments.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbuild_from:\n  armhf: mycustom/base-image:latest\nsquash: false\nargs:\n  my_build_arg: xy\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with VacuumEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Vacuum are replaced with the VacuumEntityFeature enum. This enum provides equivalent functionality for supported features in vacuum entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.vacuum import VacuumEntityFeature\n\n# Use VacuumEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Logging Error Messages in Python for Home Assistant\nDESCRIPTION: Log messages should not include the platform or component name as this is added automatically. This example shows the recommended format for logging error messages without ending periods.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_guidelines.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n_LOGGER.error(\"No route to device: %s\", self._resource)\n```\n\n----------------------------------------\n\nTITLE: Running Home Assistant Add-on Locally with Docker\nDESCRIPTION: This command shows how to run a locally built Home Assistant add-on using Docker. It mounts a local directory for data storage and exposes necessary ports.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n  --rm \\\n  -v /tmp/my_test_data:/data \\\n  -p PORT_STUFF_IF_NEEDED \\\n  local/my-test-addon\n```\n\n----------------------------------------\n\nTITLE: New Implementation - Removing @bind_hass Decorator\nDESCRIPTION: Updated implementation showing how to create notifications without the @bind_hass decorator by passing the hass object explicitly as a parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-02-27-deprecate-bind-hass-and-hass-components.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.components.persistent_notification import async_create\n\ndef create_notification(hass: HomeAssistant, message: str):\n    \"\"\"Create a notification.\"\"\"\n    async_create(\n        hass,\n        message, \n        title='Important notification'\n    )\n\nasync def async_setup(hass: HomeAssistant, config):\n    \"\"\"Set up the component.\"\"\"\n    create_notification(hass, \"You're already using the latest version!\")\n```\n\n----------------------------------------\n\nTITLE: Documenting Config Flow Parameters in Markdown\nDESCRIPTION: Example of how to document installation parameters for integrations that use config flow. Uses the configuration_basic template to display parameters and their descriptions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-installation-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% configuration_basic %}\nHost:\n    description: \"The IP address of your bridge. You can find it in your router or in the Integration app under **Bridge Settings** > **Local API**.\"\nLocal access token:\n    description: \"The local access token for your bridge. You can find it in the Integration app under **Bridge Settings** > **Local API**.\"\n{% endconfiguration_basic %}\n```\n\n----------------------------------------\n\nTITLE: New Implementation - Direct Component Import\nDESCRIPTION: Updated implementation showing how to use persistent notifications by importing the component directly and passing the hass object.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-02-27-deprecate-bind-hass-and-hass-components.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.components.persistent_notification import async_create\n\nasync def async_setup(hass: HomeAssistant, config):\n    \"\"\"Set up the component.\"\"\"\n    async_create(\n        hass, \n        \"You're already using the latest version!\", \n        title='Important notification'\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Board Specific Variables in HAOS Meta File\nDESCRIPTION: Core board identification variables used for OS configuration and release files. BOARD_ID sets the identifier used in filenames and OS release, while BOARD_NAME provides a user-friendly display name.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/board-metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nBOARD_ID:\nBOARD_NAME:\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Name Translations in JSON for Home Assistant\nDESCRIPTION: This JSON snippet demonstrates how to define translations for entity names in Home Assistant. It shows the structure for providing a translated name for the 'phase_voltage' sensor.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-translations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entity\": {\n        \"sensor\": {\n            \"phase_voltage\": {\n                \"name\": \"Phase voltage\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zeroconf Discovery in manifest.json\nDESCRIPTION: Registers the integration to listen for mDNS announcements with the specified service type, enabling automatic discovery of compatible devices on the network.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/discovery-update-info.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"zeroconf\": [\"_mydevice._tcp.local.\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing has_entity_name for a Sensor Entity in Python\nDESCRIPTION: This snippet shows how to implement the has_entity_name attribute for a sensor entity in Home Assistant. It demonstrates setting up device info and using the field name as the entity name.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/has-entity-name.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySensor(SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n\n    _attr_has_entity_name = True\n\n    def __init__(self, device: Device, field: str) -> None:\n        \"\"\"Initialize the sensor.\"\"\"\n        self._attr_device_info = DeviceInfo(\n            identifiers={(DOMAIN, device.id)},\n            name=device.name,\n        )\n        self._attr_name = field\n```\n\n----------------------------------------\n\nTITLE: Fire Event Webhook in JSON\nDESCRIPTION: JSON payload for firing a custom event in Home Assistant. This webhook message defines the event type and any associated event data, allowing mobile apps to trigger events in the Home Assistant event system.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"fire_event\",\n  \"data\": {\n    \"event_type\": \"my_custom_event\",\n    \"event_data\": {\n      \"something\": 50\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Config Validation Response in Home Assistant WebSocket API\nDESCRIPTION: Response containing validation results for triggers, conditions, and actions. Only fields included in the request will appear in the response, each with validity status and error message if applicable.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"result\",\n  \"success\": true,\n  \"result\": {\n    \"trigger\": {\"valid\": true, \"error\": null},\n    \"condition\": {\"valid\": false, \"error\": \"Invalid condition specified for data[0]\"},\n    \"action\": {\"valid\": true, \"error\": null}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Icons in Home Assistant\nDESCRIPTION: An example showing how to define icons for services in an icons.json file. This snippet demonstrates setting icons for light.turn_on and light.turn_off services, which will be displayed in the Home Assistant UI.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-01-19-icon-translations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"services\": {\n    \"turn_on\": \"mdi:lightbulb-on\",\n    \"turn_off\": \"mdi:lightbulb-off\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Home Assistant OS via SSH\nDESCRIPTION: Command to establish SSH connection to Home Assistant OS as root on port 22222 using hostname resolution.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh root@homeassistant.local -p 22222\n```\n\n----------------------------------------\n\nTITLE: Setting Entity Property Using Instance Attribute in Python\nDESCRIPTION: Shows how to set an entity property using an instance attribute in the constructor, allowing for dynamic property assignment.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MySwitch(SwitchEntity):\n\n    def __init__(self, icon: str) -> None:\n        self._attr_icon = icon\n\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Device Removal in Python for Home Assistant\nDESCRIPTION: This code snippet shows how to implement the async_remove_config_entry_device function in Home Assistant. It enables manual device deletion in the UI and checks if a device is still available based on recent updates.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/stale-devices.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def async_remove_config_entry_device(\n    hass: HomeAssistant, config_entry: MyConfigEntry, device_entry: dr.DeviceEntry\n) -> bool:\n    \"\"\"Remove a config entry from a device.\"\"\"\n    return not any(\n        identifier\n        for identifier in device_entry.identifiers\n        if identifier[0] == DOMAIN\n        and identifier[1] in config_entry.runtime_data.data\n    )\n```\n\n----------------------------------------\n\nTITLE: Legacy OptionsFlow Implementation in Python\nDESCRIPTION: Shows the old implementation pattern where config entry was manually passed and set. This approach is deprecated and will log warnings after Home Assistant Core 2025.12.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-11-12-options-flow.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\n@callback\ndef async_get_options_flow(\n    config_entry: ConfigEntry,\n) -> OptionsFlowHandler:\n    \"\"\"Create the options flow.\"\"\"\n    return OptionsFlowHandler(config_entry)\n\nclass OptionsFlowHandler(OptionsFlow):\n    \"\"\"Options flow handler.\"\"\"\n\n    def __init__(self, config_entry: ConfigEntry) -> None:\n        \"\"\"Initialize options flow.\"\"\"\n        self.config_entry = config_entry\n        self._conf_app_id: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Log Output Example in Home Assistant\nDESCRIPTION: This example shows how a log message appears in the Home Assistant logs, with the component name automatically included in the output.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_guidelines.md#2025-04-21_snippet_2\n\nLANGUAGE: log\nCODE:\n```\n2017-05-01 14:28:07 ERROR [homeassistant.components.sensor.arest] No route to device: 192.168.0.18\n```\n\n----------------------------------------\n\nTITLE: Accessing Polymer Elements via Window Object in Home Assistant\nDESCRIPTION: Examples of global objects that were previously accessible through the window object in Home Assistant before version 0.70, including Polymer, utility functions, and mixins that custom UI developers might have depended on.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2018-05-22-custom-ui-panels-api.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Polymer\nwindow.hassUtil\nwindow.HAWS\nwindow.hassMixins\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Entity Enabled Status from Home Assistant\nDESCRIPTION: JSON example showing the entities section from a get_config response. This provides information about which entities are disabled in Home Assistant, allowing the mobile app to synchronize its settings.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sensors.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"entities\": {\n    \"battery_level\": {\n      \"disabled\": false\n    },\n    \"battery_charging\": {\n      \"disabled\": true\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using F-Strings for String Formatting in Python for Home Assistant\nDESCRIPTION: Home Assistant recommends using f-strings for string formatting rather than % or str.format methods. This example contrasts the preferred approach with older formatting methods.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_guidelines.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# New\nf\"{some_value} {some_other_value}\"\n# Old, wrong\n\"{} {}\".format(\"New\", \"style\")\n\"%s %s\" % (\"Old\", \"style\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Icons with JSON Translation Files in Home Assistant\nDESCRIPTION: Example of configuring entity icons using JSON translation files. Shows how to define icons for different entity states and state attributes, which is the preferred method for icon customization.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"sensor\": {\n      \"phase\": {\n        \"default\": \"mdi:moon\",\n        \"state\": {\n          \"new_moon\": \"mdi:moon-new\",\n          \"first_quarter\": \"mdi:moon-first-quarter\",\n          \"full_moon\": \"mdi:moon-full\",\n          \"last_quarter\": \"mdi:moon-last-quarter\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Name Translations in Home Assistant strings.json (JSON)\nDESCRIPTION: This JSON snippet shows how to structure the strings.json file to provide translations for device names in Home Assistant. It includes an example of using a placeholder in the translation string.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-02-28-device-name-translations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"device\": {\n    \"n_ch_power_strip\": {\n      \"name\": \"Power strip with {number_of_sockets} sockets\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Badge in Home Assistant Dashboard YAML\nDESCRIPTION: This YAML snippet demonstrates how to include the custom 'text-badge' in a Home Assistant dashboard configuration. It specifies the badge type and the entity to display.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-badge.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example dashboard configuration\nviews:\n  - name: Example\n    badges:\n      - type: \"custom:text-badge\"\n        entity: light.bedside_lamp\n```\n\n----------------------------------------\n\nTITLE: Template Rendering with curl\nDESCRIPTION: Example of using curl to render a template via the Home Assistant API template endpoint.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"template\": \"It is {{ now() }}!\"}' http://localhost:8123/api/template\n```\n\n----------------------------------------\n\nTITLE: Defining Translatable Unit of Measurement in strings.json for Home Assistant\nDESCRIPTION: This JSON snippet demonstrates how to define a translatable unit of measurement for a sensor entity in the strings.json file of a Home Assistant integration. It uses the new 'unit_of_measurement' key under the entity definition.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-11-21-unit-of-measurement-translations.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"sensor\": {\n      \"subscribers_count\": {\n        \"unit_of_measurement\": \"subscribers\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example YAML Configuration for Home Assistant\nDESCRIPTION: This snippet demonstrates a sample configuration.yaml file with various component configurations, including an unrelated component, a switch platform, and multiple switch configurations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/configuration_yaml_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nunrelated_component:\n  some_key: some_value\n\nswitch:\n  platform: example1\n\nswitch living room:\n  - platform: example2\n    some_config: true\n  - platform: invalid_platform\n```\n\n----------------------------------------\n\nTITLE: Creating a New Screen with Jetpack Compose for Home Assistant Android App\nDESCRIPTION: This code snippet demonstrates how to create a new Compose screen with a preview for the Home Assistant Android app. It includes a main composable function for the screen layout and a preview function for testing different configurations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/tips/compose_101.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// filepath: /path/to/your/screen/MyNewScreen.kt\n\n@Composable\nfun MyNewScreen(\n    title: String,\n    onButtonClick: () -> Unit\n) {\n    HomeAssistantAppTheme {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(16.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Text(text = title, style = MaterialTheme.typography.h4)\n            Spacer(modifier = Modifier.height(16.dp))\n            Button(onClick = onButtonClick) {\n                Text(text = \"Click Me\")\n            }\n        }\n    }\n}\n\n@Preview(showBackground = true)\n@Composable\nfun MyNewScreenPreview() {\n    MyNewScreen(\n        title = \"Welcome to Home Assistant\",\n        onButtonClick = {}\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Updated Service Description Example in YAML\nDESCRIPTION: This snippet refers to an updated example of a services.yaml file that demonstrates the new structure for service descriptions after the translation feature implementation. The actual code is not provided in the text, but a link to the documentation is given.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-07-11-translating-services.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example can be found at: /docs/dev_101_services#service-descriptions\n```\n\n----------------------------------------\n\nTITLE: State Changed Event Example in Home Assistant WebSocket API\nDESCRIPTION: Example of a state_changed event message showing the detailed structure, including old and new states, attributes, and context information.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\": 18,\n   \"type\":\"event\",\n   \"event\":{\n      \"data\":{\n         \"entity_id\":\"light.bed_light\",\n         \"new_state\":{\n            \"entity_id\":\"light.bed_light\",\n            \"last_changed\":\"2016-11-26T01:37:24.265390+00:00\",\n            \"state\":\"on\",\n            \"attributes\":{\n               \"rgb_color\":[\n                  254,\n                  208,\n                  0\n               ],\n               \"color_temp\":380,\n               \"supported_features\":147,\n               \"xy_color\":[\n                  0.5,\n                  0.5\n               ],\n               \"brightness\":180,\n               \"white_value\":200,\n               \"friendly_name\":\"Bed Light\"\n            },\n            \"last_updated\":\"2016-11-26T01:37:24.265390+00:00\",\n            \"context\": {\n               \"id\": \"326ef27d19415c60c492fe330945f954\",\n               \"parent_id\": null,\n               \"user_id\": \"31ddb597e03147118cf8d2f8fbea5553\"\n            }\n         },\n         \"old_state\":{\n            \"entity_id\":\"light.bed_light\",\n            \"last_changed\":\"2016-11-26T01:37:10.466994+00:00\",\n            \"state\":\"off\",\n            \"attributes\":{\n               \"supported_features\":147,\n               \"friendly_name\":\"Bed Light\"\n            },\n            \"last_updated\":\"2016-11-26T01:37:10.466994+00:00\",\n            \"context\": {\n               \"id\": \"e4af5b117137425e97658041a0538441\",\n               \"parent_id\": null,\n               \"user_id\": \"31ddb597e03147118cf8d2f8fbea5553\"\n            }\n         }\n      },\n      \"event_type\":\"state_changed\",\n      \"time_fired\":\"2016-11-26T01:37:24.265429+00:00\",\n      \"origin\":\"LOCAL\",\n      \"context\": {\n         \"id\": \"326ef27d19415c60c492fe330945f954\",\n         \"parent_id\": null,\n         \"user_id\": \"31ddb597e03147118cf8d2f8fbea5553\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: SSDP Discovery Configuration in manifest.json\nDESCRIPTION: Example of SSDP discovery configuration to match Roku devices based on SSDP ST, manufacturer, and deviceType fields. This enables automatic triggering of the integration's config flow when matching SSDP/UPnP announcements are discovered.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ssdp\": [\n    {\n      \"st\": \"roku:ecp\",\n      \"manufacturer\": \"Roku\",\n      \"deviceType\": \"urn:roku-com:device:player:1-0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Feature Branch in Git\nDESCRIPTION: Command to create and checkout a new Git branch from the dev branch to develop a new feature or fix.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_submitting.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b some-feature\n```\n\n----------------------------------------\n\nTITLE: Using async_integration_yaml_config for integration reloads\nDESCRIPTION: This helper function retrieves YAML configuration for an integration during reload operations. It now includes the ability to raise exceptions on failure through the raise_on_failure parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-11-27-config-validation-and-error-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def async_integration_yaml_config(\n    hass: HomeAssistant, integration_name: str, *, raise_on_failure: bool = False\n) -> ConfigType | None:\n...\n```\n\n----------------------------------------\n\nTITLE: Legacy Unloading of Last Config Entry in Python for Home Assistant\nDESCRIPTION: This snippet shows the previous pattern for unloading the last config entry in a custom integration. It checks if the current entry is the last loaded one for the domain and performs cleanup if so.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2025-02-19-new-config-entry-states.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n    \"\"\"Unload a config entry.\"\"\"\n    loaded_entries = [\n        entry\n        for entry in hass.config_entries.async_entries(DOMAIN)\n        if entry.state is ConfigEntryState.LOADED\n    ]\n    if len(loaded_entries) == 1:\n        # The last config entry is being unloaded, release shared resources, unregister services etc.\n        ...\n```\n\n----------------------------------------\n\nTITLE: Old Implementation - Using hass.components\nDESCRIPTION: Legacy implementation using hass.components which will be deprecated in Home Assistant 2024.3.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-02-27-deprecate-bind-hass-and-hass-components.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\n\nasync def async_setup(hass: HomeAssistant, config):\n    \"\"\"Set up the component.\"\"\"\n    hass.components.persistent_notification.async_create(\n        \"You're already using the latest version!\", \n        title='Important notification'\n    )\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with HumidifierEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Humidifier are replaced with the HumidifierEntityFeature enum. This enum provides equivalent functionality for supported features in humidifier entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.humidifier import HumidifierEntityFeature\n\n# Use HumidifierEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Defining External Bus Method for iOS in TypeScript\nDESCRIPTION: This code defines the external bus method for iOS apps embedding the Home Assistant frontend. It specifies the function signature that the iOS app needs to implement to receive messages from the frontend.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.webkit.messageHandlers.externalBus.postMessage(message: string);\n```\n\n----------------------------------------\n\nTITLE: Sending Webhook Data via WebSocket API in JSON\nDESCRIPTION: Example of how to send webhook data to Home Assistant using the WebSocket API with a GET method. This demonstrates the JSON structure for the request, including optional body, headers, and query parameters.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"webhook/handle\",\n  \"id\": 5,\n  \"method\": \"GET\",\n  // Below fields are optional\n  \"body\": \"{\\\"hello\\\": \\\"world\\\"}\",\n  \"headers\": {\n    \"Content-Type\": \"application/json\"\n  },\n  \"query\": \"a=1&b=2\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Delete Command Method in Python\nDESCRIPTION: Example code for implementing the delete_command and async_delete_command methods in a custom Remote entity. These methods are only required if the SUPPORT_DELETE_COMMAND flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/remote.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyRemote(RemoteEntity):\n\n    def delete_command(self, **kwargs):\n        \"\"\"Delete a command from a device.\"\"\"\n\n    async def async_delete_command(self, **kwargs):\n        \"\"\"Delete a command from a device.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Advanced URL Helper Usage with Error Handling - Python\nDESCRIPTION: Advanced example showing how to use the get_url helper with specific requirements and error handling for cases when no suitable URL is available.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/instance_url.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers import network\n\ntry:\n    external_url = network.get_url(\n        hass,\n        allow_internal=False,\n        allow_ip=False,\n        require_ssl=True,\n        require_standard_port=True,\n    )\nexcept network.NoURLAvailableError:\n    raise MyInvalidValueError(\"Failed to find suitable URL for my integration\")\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated homeassistant.util.dt.utc_to_timestamp with datetime.datetime.timestamp() in Python\nDESCRIPTION: The utility function homeassistant.util.dt.utc_to_timestamp is being deprecated and will be removed in Home Assistant Core 2026.1. Custom integrations should use the standard library's datetime.datetime.timestamp() method which provides the same functionality with equivalent performance.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-11-28-dt-util-utc-to-timestamp-deprecation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhomeassistant.util.dt.utc_to_timestamp\n```\n\nLANGUAGE: python\nCODE:\n```\ndatetime.datetime.timestamp()\n```\n\n----------------------------------------\n\nTITLE: Using async_process_component_and_handle_errors in Home Assistant\nDESCRIPTION: This method processes component configuration and can raise errors when failures occur. It replaces the older async_process_component_config method and allows for better error handling during configuration processing.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-11-27-config-validation-and-error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_process_component_and_handle_errors(\n    hass: HomeAssistant,\n    config: ConfigType,\n    integration: Integration,\n    raise_on_failure: bool = False,\n) -> ConfigType | None:\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Entity Property Using Class Attribute in Python\nDESCRIPTION: Demonstrates how to set an entity property using a class attribute, which is a shorter form compared to using property functions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MySwitch(SwitchEntity):\n\n    _attr_icon = \"mdi:door\"\n\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Translating Entity State Attributes in Home Assistant\nDESCRIPTION: Example demonstrating translation of custom fan_mode and swing_mode state attributes for a climate entity in the demo domain using strings.json.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-03-27-entity_name_translations.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"climate\": {\n      \"ubercool\": {\n        \"state_attributes\": {\n          \"fan_mode\": {\n            \"state\": {\n              \"auto_high\": \"Auto High\",\n              \"auto_low\": \"Auto Low\",\n              \"on_high\": \"On High\",\n              \"on_low\": \"On Low\"\n            }\n          },\n          \"swing_mode\": {\n            \"state\": {\n              \"1\": \"1\",\n              \"2\": \"2\",\n              \"3\": \"3\",\n              \"auto\": \"Auto\",\n              \"off\": \"Off\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Config Response in Home Assistant WebSocket API\nDESCRIPTION: Response format for a successful configuration retrieval request, containing the configuration in the result object.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"result\",\n  \"success\": true,\n  \"result\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Trigger Subscription Success Response in Home Assistant WebSocket API\nDESCRIPTION: Server confirmation of a successful trigger subscription. The client will receive trigger events when the specified conditions are met.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n \"id\": 2,\n \"type\": \"result\",\n \"success\": true,\n \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity State Translations in strings.json for Home Assistant\nDESCRIPTION: This JSON snippet demonstrates how to define translations for entity states in the strings.json file. It specifically shows translations for a Moon domain sensor entity with its translation_key set to 'phase', providing translations for different moon phases.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-03-05-platform_entity_translations_deprecation.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"sensor\": {\n      \"phase\": {\n        \"state\": {\n          \"new_moon\": \"New moon\",\n          \"first_quarter\": \"First quarter\",\n          \"full_moon\": \"Full moon\",\n          \"last_quarter\": \"Last quarter\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Device Trigger Translation Configuration in JSON\nDESCRIPTION: JSON configuration for defining human-readable trigger type translations\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_trigger.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"device_automation\": {\n    \"trigger_type\": {\n      \"water_detected\": \"Water detected\",\n      \"noise_detected\": \"Noise detected\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring hassio Integration for Frontend Development\nDESCRIPTION: This YAML configuration sets up the hassio integration to use a local frontend repository for development. The path needs to be adjusted to the actual location of the frontend repository.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/supervisor/development.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# configuration.yaml\nhassio:\n  # Example path. Change it to where you have checked out the frontend repository\n  development_repo: /home/paulus/dev/hass/frontend\n```\n\n----------------------------------------\n\nTITLE: Setting FanEntity feature flags\nDESCRIPTION: Code showing how to disable automatic feature flag setting during the deprecation period by setting _enable_turn_on_off_backwards_compatibility to False in a FanEntity subclass instance.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-07-19-fan-fanentityfeatures-turn-on_off.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_enable_turn_on_off_backwards_compatibility = False\n```\n\n----------------------------------------\n\nTITLE: Deprecated Reauth Flow Implementation\nDESCRIPTION: Example of the deprecated method for implementing reauth flow that will fail in version 2025.12. Shows incorrect usage of direct flow initialization.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-11-04-reauth-reconfigure-entry-id.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    async def async_press(self) -> None:\n        \"\"\"Handle the button press.\"\"\"\n        try:\n            await self.device.press_button()\n        except DevicePasswordProtected as ex:\n            # old incorrect code:\n            self.hass.async_create_task(\n                hass.config_entries.flow.async_init(DOMAIN, context={\"source\": SOURCE_REAUTH}\n            )\n    )\n```\n\n----------------------------------------\n\nTITLE: Event Message Format in Home Assistant WebSocket API\nDESCRIPTION: Example of an event message from the Home Assistant WebSocket API. This shows the structure of event data including the event type, time fired, and origin.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\": 5,\n   \"type\":\"event\",\n   \"event\":{\n      \"data\":{},\n      \"event_type\":\"test_event\",\n      \"time_fired\":\"2016-11-26T01:37:24.265429+00:00\",\n      \"origin\":\"LOCAL\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Application Credentials Dependency in manifest.json\nDESCRIPTION: Add a dependency on the application_credentials component in the integration's manifest.json file.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/application_credentials.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"dependencies\": [\"application_credentials\"],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Services Command in Home Assistant WebSocket API\nDESCRIPTION: Command to retrieve all available service actions from Home Assistant via the WebSocket API.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"get_services\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing async_services() with async_services_for_domain() in Home Assistant\nDESCRIPTION: The code demonstrates how to replace the inefficient hass.services.async_services()[DOMAIN] method with the new hass.services.async_services_for_domain(DOMAIN) method for better performance when accessing services for a specific domain.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-01-22-async_services_for_domain.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhass.services.async_services()[DOMAIN]\n```\n\nLANGUAGE: python\nCODE:\n```\nhass.services.async_services_for_domain(DOMAIN)\n```\n\n----------------------------------------\n\nTITLE: Defining LovelaceViewElement Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for custom Lovelace view elements. The interface specifies the properties that will be passed to custom view components, including hass, lovelace, index, cards, badges, and the setConfig method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-09-30-customViewChanges.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LovelaceViewElement {\n  hass?: HomeAssistant;\n  lovelace?: Lovelace;\n  index?: number;\n  cards?: Array<LovelaceCard | HuiErrorCard>;\n  badges?: LovelaceBadge[];\n  setConfig(config: LovelaceViewConfig): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Data in Home Assistant Integration Platform\nDESCRIPTION: This code shows how to access the runtime data from the config entry in a platform file (e.g., switch.py) of a Home Assistant integration. It demonstrates type importing and usage in the async_setup_entry function.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-04-30-store-runtime-data-inside-config-entry.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# <integration>/switch.py\n\nfrom . import MyConfigEntry\n\nasync def async_setup_entry(\n    hass: HomeAssistant,\n    entry: MyConfigEntry,  # use type alias instead of ConfigEntry\n    async_add_entities: AddEntitiesCallback,\n) -> None:\n    # Access the runtime data form the config entry\n    data = entry.runtime_data\n    \n    async_add_entities([MySwitch(data.client)])\n```\n\n----------------------------------------\n\nTITLE: Tag Write Response Payload in TypeScript\nDESCRIPTION: This snippet shows the expected response payload for the 'tag/write' message type. Currently, it's an empty object, but it's noted that more properties might be added in the future.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Templates in YAML\nDESCRIPTION: This snippet demonstrates how to define response templates for intents. It uses Jinja2 syntax to reference slot values in the response.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/template-sentence-syntax.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: en\nresponses:\n  intents:\n    HassLightSet:\n      brightness: '{{ slots.name }} brightness set to {{ slots.brightness }}'\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Supervisor Image with Docker\nDESCRIPTION: This command uses the Home Assistant builder to build and publish a Supervisor image to Docker Hub. It requires adjusting the architecture, Docker Hub username, and password.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/supervisor/development.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n    --privileged \\\n    -v /run/docker.sock:/run/docker.sock \\\n    -v \"$(pwd):/data\" \\\n    ghcr.io/home-assistant/amd64-builder:dev \\\n        --generic latest \\\n        --target /data \\\n        --aarch64 \\\n        --docker-hub awesome-user \\\n        --docker-user awesome-user \\\n        --docker-password secret-password \\\n        --no-cache\n```\n\n----------------------------------------\n\nTITLE: Including High-Level Description in Home Assistant Integration Documentation\nDESCRIPTION: This snippet demonstrates how to write a high-level description for a Home Assistant integration. It includes information about the brand, a link to the company website, and mentions key products or features. This format helps users understand the integration's purpose and decide if it's suitable for their needs.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-high-level-description.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe **my integration** {% term integration %} is used to integrate with the devices of [MyCompany](https://www.mycompany.com).\nThey create various smart home appliances and devices and are known for their MyProduct.\n```\n\n----------------------------------------\n\nTITLE: Total Increasing State Class Example with New Meter Cycle\nDESCRIPTION: Example showing how the total_increasing state class handles a meter reset to zero, maintaining the running sum across the reset point.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2021-08-16-state_class_total.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| t                      | state  | sum  |\n| :--------------------- | -----: | ---: |\n|   2021-08-01T13:00:00  |  1000  |   0  |\n|   2021-08-01T14:00:00  |  1010  |  10  |\n|   2021-08-01T15:00:00  |     0  |  10  |\n|   2021-08-01T16:00:00  |     5  |  15  |\n```\n\n----------------------------------------\n\nTITLE: Setting Integration Owners in manifest.json\nDESCRIPTION: Example of how to specify integration owners in the manifest.json file using the 'codeowners' field. Integration owners are identified by their GitHub usernames, and multiple owners can be specified.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/integration-owner.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"my_integration\",\n  \"name\": \"My Integration\",\n  \"codeowners\": [\"@me\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Config Command in Home Assistant WebSocket API\nDESCRIPTION: Command to retrieve the current configuration from Home Assistant via the WebSocket API.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"get_config\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Concise Entity Lists with Jinja2 in Home Assistant\nDESCRIPTION: This Jinja2 template generates a concise response for listing entities. It handles cases with 4 or fewer entities by listing all, and for more than 4 entities, it lists the first 3 followed by a count of remaining items.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/style-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if query.matched %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    Yes, {{ match[:3] | join(\", \") }} and {{ (match | length - 3) }} more\n  {%- else -%}\n    Yes,\n    {% for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} and {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% else %}\n  No\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies on macOS\nDESCRIPTION: This shell command uses Homebrew to install the necessary core dependencies for developing Home Assistant on macOS. It includes Python, autoconf, ffmpeg, cmake, and make.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_environment.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbrew install python3 autoconf ffmpeg cmake make\n```\n\n----------------------------------------\n\nTITLE: Adding Bluetooth Adapter Dependencies in manifest.json\nDESCRIPTION: This snippet shows how to add 'bluetooth_adapters' as a dependency in the integration's manifest.json file. This ensures all supported remote adapters are connected before the integration attempts to use them.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/bluetooth.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"bluetooth_adapters\"\n```\n\n----------------------------------------\n\nTITLE: Querying History with URL Encoded Timestamps - curl\nDESCRIPTION: Example of querying the history API endpoint with URL encoded timestamps for a specific sensor\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  \"http://localhost:8123/api/history/period/2021-09-04T00%3A00%3A00%2B02%3A00?end_time=2023-09-04T00%3A00%3A00%2B02%3A00&filter_entity_id=sensor.temperature\"\n```\n\n----------------------------------------\n\nTITLE: Switch Control with curl\nDESCRIPTION: Example of using curl to turn on a switch entity via the Home Assistant API services endpoint.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"entity_id\": \"switch.christmas_lights\"}' \\\n  http://localhost:8123/api/services/switch/turn_on\n```\n\n----------------------------------------\n\nTITLE: Defining Abort Strings in JSON for Config Flow\nDESCRIPTION: This JSON snippet defines localization strings for the config flow, specifically for the 'already_configured' abort reason.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"abort\": {\n      \"already_configured\": \"[%key:common::config_flow::abort::already_configured_device%]\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MockConfigEntry to Home Assistant for testing\nDESCRIPTION: Instructions for properly preparing MockConfigEntry objects for testing by adding them to Home Assistant before updating with async_update_entry method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-02-12-async_update_entry.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nentry.add_to_hass(hass)\n```\n\n----------------------------------------\n\nTITLE: Converting Value to Brightness in Python\nDESCRIPTION: Utility function to convert a scaled value back to a brightness value (1-255). Includes value clamping to ensure valid brightness values.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-12-05-scaling-utils.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef value_to_brightness(low_high_range: tuple[float, float], value: float) -> int:\n    \"\"\"Given a brightness_scale convert a single value to a brightness.\n\n    Do not include 0 if the light is off for value 0.\n\n    Given a brightness low_high_range of (1,100) this function\n    will return:\n\n    100: 255\n    50: 127\n    4: 10\n\n    The value will be clamped between 1..255 to ensure valid value.\n    \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Voice Processing Flow Diagram in Mermaid\nDESCRIPTION: A flowchart showing the complete voice processing pipeline in Home Assistant, from user speech input to audio response output. The diagram illustrates the flow through Speech-to-Text, Assist Pipeline, Conversation, Intent, and Text-to-Speech components.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    U((User))\n    STT[Speech-to-Text]\n    VA[Assist Pipeline]\n    C[Conversation]\n    I[Intent]\n    TTS[Text-to-Speech]\n    U -->|1\\. Speech + Metadata| VA;\n    VA -->|2\\. Speech| STT\n    STT -->|3\\. Sentence| VA\n    VA -->|4\\. Sentence + Metadata| C\n    C -->|5\\. Intent| I\n    I -->|6\\. Intent Response| C;\n    C -->|7\\. Intent Response| VA;\n    VA -->|8\\. Intent Response| TTS\n    TTS -->|9\\. Response Audio| VA\n    VA -->|10\\. Response Audio| U\n```\n\n----------------------------------------\n\nTITLE: Using ha-state-icon After Home Assistant 2024.2\nDESCRIPTION: The updated way of using ha-state-icon component after the 2024.2 update, requiring both the hass and stateObj properties to be passed to support the new icon translation feature.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-01-30-ha-state-icon-properties-changes.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ha-state-icon .hass=${hass} .stateObj=${stateObj}></ha-state-icon>\n```\n\n----------------------------------------\n\nTITLE: Handling Token Revocation Response in Home Assistant\nDESCRIPTION: Code showing how external apps should respond to token revocation requests. The function passes back a boolean indicating whether the logout was successful.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-authentication.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// To be called by external app\nwindow.externalAuthRevokeToken(true);\n\n// If unable to logout\nwindow.externalAuthRevokeToken(false);\n```\n\n----------------------------------------\n\nTITLE: Running MonkeyType Analysis on Test Module\nDESCRIPTION: Command to run MonkeyType analysis on a specific test module to generate type hints\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_typing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscript/monkeytype tests/path/to/your_test_module.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Text Blocks in Home Assistant Documentation (Markdown)\nDESCRIPTION: Example of creating a collapsible text block (details element) in documentation to organize content and reduce visual clutter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{% details \"Generate Client ID and Client Secret\" %}\n\n1. Your Fitbit account must be registered as a Developer account at the [Fitbit Developer Portal](https://dev.fitbit.com), and have a verified email address.\n2. Visit the [fitbit developer page](https://dev.fitbit.com/apps/new) to register an application.\n3. Enter an **Application Name** of your choosing, for example **Home Assistant**.\n4. ...\n{% enddetails %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Send Command Method in Python\nDESCRIPTION: Example code for implementing the send_command and async_send_command methods in a custom Remote entity. These methods send commands to a device, taking an iterable of command strings.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/remote.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyRemote(RemoteEntity):\n\n    def send_command(self, command: Iterable[str], **kwargs):\n        \"\"\"Send commands to a device.\"\"\"\n\n    async def async_send_command(self, command: Iterable[str], **kwargs):\n        \"\"\"Send commands to a device.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Minimum/Maximum Color Temperature in Kelvin\nDESCRIPTION: Example of how to define custom minimum and maximum color temperature values in Kelvin for a light entity, replacing the deprecated mireds attributes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-12-14-kelvin-preferred-color-temperature-unit.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyLight(LightEntity):\n    \"\"\"Representation of a light.\"\"\"\n\n    # Old\n    # _attr_min_mireds = 200 # 5000K\n    # _attr_max_mireds = 400 # 2500K\n\n    # New\n    _attr_min_color_temp_kelvin = 2500 # 400 mireds\n    _attr_max_color_temp_kelvin = 5000 # 200 mireds\n```\n\n----------------------------------------\n\nTITLE: Resolving Push Failures with Pull and Push\nDESCRIPTION: Commands to resolve push failures that occur when new work was pushed to the branch by you or another contributor. This pulls remote changes, resolves conflicts, and pushes everything.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_catching_up.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Run this from your feature branch\ngit pull --no-rebase\ngit push\n```\n\n----------------------------------------\n\nTITLE: Creating a quality_scale.yaml File for Home Assistant Integrations\nDESCRIPTION: Example of a quality_scale.yaml file that tracks the progress of implemented rules for an integration. This file is required for integrations working towards a higher tier or maintaining their current tier, documenting implemented rules and any exempted rules with their justification.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  config_flow: done\n  docs_high_level_description:\n    status: exempt\n    comment: This integration does not connect to any device or service.\n```\n\n----------------------------------------\n\nTITLE: Setting last_reset for Accumulating Sensors in Python\nDESCRIPTION: Demonstrates how to set the 'last_reset' property for accumulating sensors like electricity, gas, or water meters. If the initialization time is unknown and the meter never resets, it should be set to the UNIX epoch 0.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2021-05-25-sensor_attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhomeassistant.util.dt.utc_from_timestamp(0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers in Home Assistant YAML\nDESCRIPTION: This YAML configuration enables the new authentication system in Home Assistant. It sets up the built-in 'homeassistant' auth provider and optionally enables legacy API password support. The 'auth' component is also enabled.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2018-07-02-trying-new-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example configuration.yaml entry\nhomeassistant:\n  auth_providers:\n   - type: homeassistant\n   # Uncomment next line if you want to enable legacy API password support\n   # - type: legacy_api_password\n\n# Enable the auth component\nauth:\n```\n\n----------------------------------------\n\nTITLE: Building Home Assistant Add-on Using Standalone Docker\nDESCRIPTION: This command demonstrates how to build a Home Assistant add-on using standalone Docker without the official build tool. It sets the base image and builds the add-on from the current directory.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build \\\n  --build-arg BUILD_FROM=\"ghcr.io/home-assistant/amd64-base:latest\" \\\n  -t local/my-test-addon \\\n  .\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Light Information\nDESCRIPTION: Example JSON response from the API's get /light/<id> endpoint, representing a single light's data structure.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_data_models.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1234,\n  \"name\": \"Example Light\",\n  \"is_on\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using check_if_deprecated_constant Function in Python\nDESCRIPTION: Links to the check_if_deprecated_constant function in Home Assistant's deprecation helper which creates warning logs for deprecated constants. This function identifies deprecated constant usage and provides information about replacements and removal timelines.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-12-19-constant-deprecation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncheck_if_deprecated_constant\n```\n\n----------------------------------------\n\nTITLE: Creating Fixtures for Home Assistant Intent Matching Tests\nDESCRIPTION: This YAML snippet shows how to define fixtures in '_fixtures.yaml' for intent matching tests. It includes definitions for areas and entities that can be referenced during testing, simulating the Home Assistant environment.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/test-syntax.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: \"en\"\nareas:\n  - name: \"Kitchen\"\n    id: \"kitchen\"\n  - name: \"Living Room\"\n    id: \"living_room\"\nentities:\n  - name: \"Kitchen Switch\"\n    id: \"switch.kitchen\"\n    area: \"kitchen\"\n  - name: \"Curtain Left\"\n    id: \"cover.curtain_left\"\n    area: \"living_room\"\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with AlarmControlPanelEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Alarm Control Panel are replaced with the AlarmControlPanelEntityFeature enum. This enum provides equivalent functionality for supported features in alarm control panel entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.alarm_control_panel import AlarmControlPanelEntityFeature\n\n# Use AlarmControlPanelEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Implementing Vacuum Entity Group States\nDESCRIPTION: Example implementation of async_describe_on_off_states for vacuum entities, showing how to register alternative ON/OFF states for group integration support.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-10-group-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Describe group states.\"\"\"\n\nfrom typing import TYPE_CHECKING\n\nfrom homeassistant.const import STATE_OFF, STATE_ON\nfrom homeassistant.core import HomeAssistant, callback\n\nif TYPE_CHECKING:\n    from homeassistant.components.group import GroupIntegrationRegistry\n\nfrom .const import DOMAIN, STATE_CLEANING, STATE_ERROR, STATE_RETURNING\n\n\n@callback\ndef async_describe_on_off_states(\n    hass: HomeAssistant, registry: \"GroupIntegrationRegistry\"\n) -> None:\n    \"\"\"Describe group on off states.\"\"\"\n    registry.on_off_states(\n        DOMAIN,  # domain\n        # set with all group ON states\n        {\n            STATE_ON,\n            STATE_CLEANING,\n            STATE_RETURNING,\n            STATE_ERROR,\n        },\n        STATE_ON, # Default group ON state \n        STATE_OFF, # Group OFF state\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Text Boxes in Home Assistant Documentation (Markdown)\nDESCRIPTION: Examples of creating different types of highlighted text boxes (tip, note, important) to emphasize specific information in documentation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{% tip %}\nYou can use a tip to feature a recommendation.\n{% endtip %}\n\n{% note %}\nYou can use a note to highlight a section.\n{% endnote %}\n\n{% important %}\nYou can use \"important\" to highlight a section that you feel is very important.\n{% endimportant %}\n```\n\n----------------------------------------\n\nTITLE: Making REST API Requests with Python\nDESCRIPTION: Shows how to make an authenticated REST API request to Home Assistant using Python and the Requests library. The script sends a GET request with the required headers.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom requests import get\n\nurl = \"http://localhost:8123/ENDPOINT\"\nheaders = {\n    \"Authorization\": \"Bearer TOKEN\",\n    \"content-type\": \"application/json\",\n}\n\nresponse = get(url, headers=headers)\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Policy Structure in Python\nDESCRIPTION: Shows the basic structure of a permission policy dictionary with entities category.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"entities\": {\n        # …\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Repository for Home Assistant\nDESCRIPTION: These shell commands clone the forked Home Assistant repository, set up the upstream remote, and install the required dependencies using the provided setup script. It also shows how to activate the virtual environment and run Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_environment.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/YOUR_GIT_USERNAME/name_of_your_fork\ncd name_of_your_fork\ngit remote add upstream https://github.com/home-assistant/core.git\nscript/setup\nsource venv/bin/activate\nhass -c config\n```\n\n----------------------------------------\n\nTITLE: Pinging Home Assistant Supervisor\nDESCRIPTION: Performs a simple ping request to check if the Home Assistant Supervisor is responsive. No authentication required for this endpoint.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/supervisor/examples.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL http://supervisor/supervisor/ping\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": \"ok\",\n  \"data\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HAOS Image with QEMU\nDESCRIPTION: Commands to extract and run a built HAOS image using QEMU. This allows testing the image in a virtual environment before deploying to actual hardware.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/getting-started.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo scripts/enter.sh make O=output_ova ova\n[...]\n$ unxz release/haos_ova-7.0.dev20211003.qcow2.xz\n$ qemu-system-x86_64 -enable-kvm -name haos -smp 2 -m 1G -drive file=release/haos_ova-7.0.dev20211003.qcow2,index=0,media=disk,if=virtio,format=qcow2 -drive file=/usr/share/ovmf/x64/OVMF_CODE.fd,if=pflash,format=raw,readonly=on\n```\n\n----------------------------------------\n\nTITLE: Subentry Translation Configuration\nDESCRIPTION: JSON structure for defining translations for subentry flow handlers, including titles, steps, and messages for various flow states.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config_subentries\": {\n    \"location\": {\n      \"title\": \"Weather location\",\n      \"step\": {\n        \"user\": {\n          \"title\": \"Add location\",\n          \"description\": \"Configure the weather location\"\n        },\n        \"reconfigure\": {\n          \"title\": \"Update location\",\n          \"description\": \"...\"\n        }\n      },\n      \"error\": {},\n      \"abort\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AppArmor Profile Updates for S6-Overlay v3\nDESCRIPTION: Required changes to the AppArmor profile to make it compatible with S6-Overlay v3. This includes permissions for init, binaries, runtime directories, and service definitions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-05-12-s6-overlay-base-images.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n# S6-Overlay\n  /init ix,\n  /bin/** ix,\n  /usr/bin/** ix,\n  /run/{s6,s6-rc*,service}/** ix,\n  /package/** ix,\n  /command/** ix,\n  /etc/services.d/** rwix,\n  /etc/cont-init.d/** rwix,\n  /etc/cont-finish.d/** rwix,\n  /run/{,**} rwk,\n  /dev/tty rw,\n```\n\n----------------------------------------\n\nTITLE: Deprecated MQTT Callback Signatures in Python\nDESCRIPTION: Examples of deprecated callback functions for MQTT subscribe that are no longer supported. These functions accept individual parameters (topic, payload, qos) instead of the recommended message object approach.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-02-21-deprecated-callback-removed.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_deprecated_callback1(topic: str, payload: ReceivePayloadType, qos: int) -> None:\n    \"\"\"Deprecated async callback example 1.\"\"\"\n    ...\n\n\n@callback\ndef async_deprecated_callback2(topic: str, payload: ReceivePayloadType, qos: int) -> None:\n    \"\"\"Deprecated async callback example 2.\"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Trigger Subscription Request in Home Assistant WebSocket API\nDESCRIPTION: Client message for subscribing to specific triggers using the same syntax as automation triggers. This example subscribes to state changes of a motion sensor.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2,\n    \"type\": \"subscribe_trigger\",\n    \"trigger\": {\n        \"platform\": \"state\",\n        \"entity_id\": \"binary_sensor.motion_occupancy\",\n        \"from\": \"off\",\n        \"to\":\"on\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Brand Configuration Template for Home Assistant\nDESCRIPTION: A minimal JSON template for creating a new brand file in Home Assistant. It includes all required fields with empty arrays for integrations and IoT standards that can be populated as needed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_brand.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"your_brand_domain\",\n  \"name\": \"Your Brand\",\n  \"integrations\": [],\n  \"iot_standards\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Basic Entity Name in Home Assistant\nDESCRIPTION: Example of translating a sensor entity name using strings.json. The entity must have a translation_key set to 'thermostat_mode' and requires has_entity_name to be True.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-03-27-entity_name_translations.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"sensor\": {\n      \"thermostat_mode\": {\n        \"name\": \"Thermostat mode\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic URL Helper Usage - Python\nDESCRIPTION: Simple example demonstrating basic usage of the get_url helper method to retrieve a Home Assistant instance URL with default parameters.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/instance_url.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers.network import get_url\n\ninstance_url = get_url(hass)\n```\n\n----------------------------------------\n\nTITLE: Building and testing production frontend in Home Assistant\nDESCRIPTION: Build a production version of the frontend and install it in the main Home Assistant repository for testing.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/development.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npip3 install -e /path/to/hass/frontend/ --config-settings editable_mode=compat\nhass --skip-pip-packages home-assistant-frontend\n```\n\n----------------------------------------\n\nTITLE: Custom View Implementation with LitElement\nDESCRIPTION: A basic example of implementing a custom view layout using LitElement. The class defines the minimum required functionality to render cards in a custom layout, including setConfig method and property definitions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-view.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from \"https://unpkg.com/@polymer/lit-element@^0.6.1/lit-element.js?module\";\n\nclass MyNewView extends LitElement {\n  setConfig(_config) {}\n\n  static get properties() {\n    return {\n      cards: {type: Array, attribute: false}\n    };\n  }\n\n  render() {\n    if(!this.cards) {\n      return html``;\n    }\n    return html`${this.cards.map((card) => html`<div>${card}</div>`)}`;  \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HassGetState Custom Sentences and Responses in YAML\nDESCRIPTION: YAML configuration for setting up the HassGetState intent with custom sentences and responses. This allows Assist to understand queries about device states and respond appropriately. The configuration includes sentence patterns with slots for entity names and areas, default responses, and a list of possible states.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-02-09-hassgetstate.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example <config>/custom_sentences/en/get_state.yaml\n\nlanguage: en\nintents:\n  HassGetState:\n    data:\n      - sentences:\n          - what is <name> [in <area>]\n          - is <name> {state} [in <area>]\n\nresponses:\n  intents:\n    HassGetState:\n      default: \"{{ slots.name }} is {{ state.state_with_unit }}\"\n\nlists:\n  state:\n    values:\n      - \"on\"\n      - \"off\"\n      - open\n      - closed\n      - locked\n      - unlocked\n      - wet\n      - dry\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with CameraEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Camera are replaced with the CameraEntityFeature enum. This enum provides equivalent functionality for supported features in camera entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.camera import CameraEntityFeature\n\n# Use CameraEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sentence Template Syntax for Intent Recognition in Home Assistant\nDESCRIPTION: This code snippet shows an example of a sentence template used in Home Assistant's intent recognition system. It demonstrates how a single template can match multiple similar sentences and extract data from them.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> `(turn | switch) on [the] {area} lights`\n```\n\n----------------------------------------\n\nTITLE: Defining unrecorded attributes in Home Assistant Entity classes\nDESCRIPTION: This code demonstrates the two new entity attributes used to exclude state attributes from being recorded. The first attribute is set by base component entities, while the second is used by derived platform classes for integration-specific attributes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-09-20-excluding-state-attributes-from-recording.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_entity_component_unrecorded_attributes: frozenset[str]\n```\n\nLANGUAGE: python\nCODE:\n```\n_unrecorded_attributes: frozenset[str]\n```\n\n----------------------------------------\n\nTITLE: Defining Config Flow Strings in JSON for Home Assistant Integration\nDESCRIPTION: This JSON snippet defines the strings used in the config flow UI. It includes labels and descriptions for the host input field, providing context for the user during the setup process.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/config-flow.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"step\": {\n      \"user\": {\n        \"data\": {\n          \"host\": \"Host\"\n        },\n        \"data_description\": {\n          \"host\": \"The hostname or IP address of the MyIntegration device.\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Permission Policy Structure in Python\nDESCRIPTION: Demonstrates the subcategories within the entities permission structure.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"entities\": {\n        \"domains\": {\n            # …\n        },\n        \"entity_ids\": {\n            # …\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding KTLint as Git Pre-commit Hook\nDESCRIPTION: Command to add KTLint checking as a Git pre-commit hook, which automatically runs checks before each commit.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/linter.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew addKtlintCheckGitPreCommitHook\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Paths via WebSocket in JavaScript\nDESCRIPTION: Example WebSocket command to request a signed path from Home Assistant. This request specifies the target path and optional expiration time in seconds.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"auth/sign_path\",\n  \"path\": \"/api/states\",\n  // optional, expiration time in seconds. Defaults to 30 seconds\n  \"expires\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Supervisor Image for Local Use\nDESCRIPTION: This command tags the built Supervisor image with the expected name for local use. It needs to be adjusted with the correct architecture and Docker Hub username.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/supervisor/development.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag awesome-user/aarch64-hassio-supervisor:latest homeassistant/aarch64-hassio-supervisor:latest\n```\n\n----------------------------------------\n\nTITLE: Setting Execution Permissions for S6 Service Scripts with Git\nDESCRIPTION: Git command to update execution permissions for S6 service scripts in the rootfs folder. This is required for S6-Overlay v3 to properly execute service scripts.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-05-12-s6-overlay-base-images.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ git update-index --chmod=+x rootfs/etc/service.d/my-service/run\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping Supported Intents in JavaScript\nDESCRIPTION: This code filters the imported intents object to get only supported intents, then maps them to their names. The result is joined into a comma-separated string for display.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_builtin.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  Object.entries(intents)\n  .filter(([intent, info]) => info[\"supported\"])\n  .map(([intent, info]) => intent)\n  .join(\", \")\n}\n```\n\n----------------------------------------\n\nTITLE: Logbook Entry Response Format - JSON\nDESCRIPTION: Example response format for logbook entries showing security system state changes\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n\t\t\"context_user_id\": null,\n\t\t\"domain\": \"alarm_control_panel\",\n\t\t\"entity_id\": \"alarm_control_panel.area_001\",\n\t\t\"message\": \"changed to disarmed\",\n\t\t\"name\": \"Security\",\n\t\t\"when\": \"2020-06-20T16:44:26.127295+00:00\"\n\t},\n\t{\n\t\t\"context_user_id\": null,\n\t\t\"domain\": \"homekit\",\n\t\t\"entity_id\": \"alarm_control_panel.area_001\",\n\t\t\"message\": \"send command alarm_arm_night for Security\",\n\t\t\"name\": \"HomeKit\",\n\t\t\"when\": \"2020-06-21T02:59:05.759645+00:00\"\n\t},\n\t{\n\t\t\"context_user_id\": null,\n\t\t\"domain\": \"alarm_control_panel\",\n\t\t\"entity_id\": \"alarm_control_panel.area_001\",\n\t\t\"message\": \"changed to armed_night\",\n\t\t\"name\": \"Security\",\n\t\t\"when\": \"2020-06-21T02:59:06.015463+00:00\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for Hassfest Validation in YAML\nDESCRIPTION: This YAML configuration sets up a GitHub Action to run Hassfest validation on push, pull request, and daily schedule. It uses the latest Ubuntu runner and the home-assistant/actions/hassfest action.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-04-16-hassfest.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Validate with hassfest\n\non:\n  push:\n  pull_request:\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  validate:\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - uses: \"actions/checkout@v3\"\n      - uses: home-assistant/actions/hassfest@master\n```\n\n----------------------------------------\n\nTITLE: Closing Cover Tilt Implementation in Python\nDESCRIPTION: Implementation of close_cover_tilt methods for a cover entity. Only implement if SUPPORT_CLOSE_TILT flag is set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/cover.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyCover(CoverEntity):\n    # Implement one of these methods.\n\n    def close_cover_tilt(self, **kwargs):\n        \"\"\"Close the cover tilt.\"\"\"\n\n    async def async_close_cover_tilt(self, **kwargs):\n        \"\"\"Close the cover tilt.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Home Assistant Supervisor via Shell Commands\nDESCRIPTION: Commands to enable the debug option in the Home Assistant Supervisor and reload it. This is a prerequisite for using the Python debugger with the Supervisor.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/supervisor/debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nha su options --debug=true\nha su reload\n```\n\n----------------------------------------\n\nTITLE: Deprecated Config Entry Platform Setup Call\nDESCRIPTION: Deprecated method for setting up config entry platforms that is scheduled for removal in Home Assistant 2022.12.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-07-08-config_entry_forwards.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhass.config_entries.async_setup_platforms\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Service UUID Matching in manifest.json\nDESCRIPTION: Example of Bluetooth discovery configuration to match devices by service UUID, specifically for SwitchBot bot and curtain devices using a 128-bit UUID pattern.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bluetooth\": [\n    {\n      \"service_uuid\": \"cba20d00-224d-11e6-9fb8-0002a5d5c51b\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving HomeAssistant Instance Using core.async_get_hass() in Python\nDESCRIPTION: A callback function that returns the global HomeAssistant instance. This should only be used when directly passing the hass object is very cumbersome or impossible, such as in voluptuous validators which can't receive user data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-08-24-globally_accessible_hass.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@callback\ndef async_get_hass() -> HomeAssistant:\n    \"\"\"Return the HomeAssistant instance.\n    Raises LookupError if no HomeAssistant instance is available.\n    This should be used where it's very cumbersome or downright impossible to pass\n    hass to the code which needs it.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Type Annotation Example for hass.data\nDESCRIPTION: Shows the traditional way of type annotation for hass.data using explicit type casting, which has limitations in type checking and refactoring scenarios.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-01-improved-hass-data-typing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndata: MyData = hass.data[SOME_KEY]\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Labels for Manual Builds\nDESCRIPTION: Required labels for Home Assistant add-ons when not using local build or the provided build script. These labels define version, type, and supported architectures.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nLABEL \\\n  io.hass.version=\"VERSION\" \\\n  io.hass.type=\"addon\" \\\n  io.hass.arch=\"armhf|aarch64|i386|amd64\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Language Support Table Using JSX\nDESCRIPTION: Generates a table of supported languages using JSX syntax. It maps over the imported language data to create table rows with language codes, native names, project leaders, and links to sentence files.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/supported-languages.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<>\n  <table>\n    <thead>\n      <tr>\n        <th>Code</th>\n        <th>Language</th>\n        <th>Leader</th>\n        <th>Links</th>\n      </tr>\n    </thead>\n    <tbody>\n      {\n        Object.entries(languages).map(\n          ([language, info]) =>\n            <tr>\n              <td>\n                <code>{language}</code>\n              </td>\n              <td>\n                {info.nativeName}\n              </td>\n              <td>\n                {info.leaders?.length &&\n                    info.leaders.map((leader, idx) =>\n                      <>\n                        {!!idx && ', '}\n                        <a href={`https://github.com/${leader}`}>{leader}</a>\n                      </>\n                    )}\n              </td>\n              <td>\n                <a href={`https://github.com/home-assistant/intents/tree/main/sentences/${language}`}>Sentences</a>\n              </td>\n            </tr>\n        )\n      }\n    </tbody>\n  </table>\n</>\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies on Ubuntu/Debian\nDESCRIPTION: This shell command installs the necessary core dependencies for developing Home Assistant on Ubuntu or Debian-based systems. It includes Python-related packages, build tools, and media libraries.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_environment.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\nsudo apt-get install python3-pip python3-dev python3-venv autoconf libssl-dev libxml2-dev libxslt1-dev libjpeg-dev libffi-dev libudev-dev zlib1g-dev pkg-config libavformat-dev libavcodec-dev libavdevice-dev libavutil-dev libswscale-dev libswresample-dev libavfilter-dev ffmpeg libgammu-dev build-essential\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Add-on File Structure\nDESCRIPTION: Shows the standard file structure for a Home Assistant add-on, including required files and directories for proper functionality.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naddon_name/\n  translations/\n    en.yaml\n  apparmor.txt\n  build.yaml\n  CHANGELOG.md\n  config.yaml\n  DOCS.md\n  Dockerfile\n  icon.png\n  logo.png\n  README.md\n  run.sh\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with LightEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Light are replaced with the LightEntityFeature enum. This enum provides equivalent functionality for supported features in light entities, except for color-related features which should use new color modes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.light import LightEntityFeature\n\n# Use LightEntityFeature instead of SUPPORT_* constants\n# For color-related features, use new color modes\n```\n\n----------------------------------------\n\nTITLE: Creating Response Templates for Intents\nDESCRIPTION: This YAML snippet shows how to define response templates for intents in a separate file. The templates use Jinja2 format and can access the matched intent's slots and entity state.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-02-03-responses.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: en\nresponses:\n  intents:\n    HassTurnOn:\n      cover: \"Opened {{ slots.name }}\"\n```\n\n----------------------------------------\n\nTITLE: Frozen UnitSystem Error Example in Python\nDESCRIPTION: Demonstrates the error that occurs when attempting to modify a frozen UnitSystem instance, specifically when trying to change the temperature_unit field.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2025-03-25-frozen-unit-system.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndataclasses.FrozenInstanceError: cannot assign to field 'temperature_unit'\n```\n\n----------------------------------------\n\nTITLE: Sensor Update Response from Home Assistant\nDESCRIPTION: JSON response example after updating sensors, showing success and failure cases. Includes the is_disabled flag indicating if an entity is disabled in Home Assistant, along with potential error messages and codes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sensors.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"battery_state\": {\n    \"success\": true\n  },\n  \"battery_level\": {\n    \"success\": true,\n    \"is_disabled\": true\n  },\n  \"battery_charging\": {\n    \"success\": false,\n    \"error\": {\n      \"code\": \"not_registered\",\n      \"message\": \"Entity is not registered\",\n    }\n  },\n  \"battery_charging_state\": {\n    \"success\": false,\n    \"error\": {\n      \"code\": \"invalid_format\",\n      \"message\": \"Unexpected value for type\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Permissions Configuration in JSON\nDESCRIPTION: Example of setting entity permissions for specific domains and entities with read/control access.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_permissions.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": {\n    \"domains\": {\n      \"switch\": true\n    },\n    \"entity_ids\": {\n      \"light.kitchen\": {\n        \"read\": true,\n        \"control\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Manufacturer Data Matching in manifest.json\nDESCRIPTION: Example of Bluetooth discovery configuration to match HomeKit devices by manufacturer ID and manufacturer data patterns.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bluetooth\": [\n    {\n      \"manufacturer_id\": 76,\n      \"manufacturer_data_start\": [6]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Import for Related Rules\nDESCRIPTION: Import statement for a React component that handles displaying related rules.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/dependency-transparency.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport RelatedRules from './_includes/related_rules.jsx'\n```\n\n----------------------------------------\n\nTITLE: Ping Command in Home Assistant WebSocket API\nDESCRIPTION: Heartbeat command from client to server to verify connection is still alive.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 19,\n    \"type\": \"ping\"\n}\n```\n\n----------------------------------------\n\nTITLE: Weather Forecast Retrieval with curl\nDESCRIPTION: Example of using curl to retrieve daily weather forecast information via the Home Assistant API services endpoint.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -d '{\"entity_id\": \"weather.forecast_home\", \"type\": \"daily\"}' \\\n  http://localhost:8123/api/services/weather/get_forecasts?return_response\n```\n\n----------------------------------------\n\nTITLE: Fetching States Command in Home Assistant WebSocket API\nDESCRIPTION: Command to retrieve all current entity states in Home Assistant via the WebSocket API.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"get_states\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema for Validating User Input in Home Assistant Add-ons\nDESCRIPTION: Schema definition that validates user input against specific data types and constraints. Includes string validation, regex matching, numeric ranges, and special types like URLs, emails, and device filters.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmessage: str\nlogins:\n  - username: str\n    password: str\nrandom:\n  - \"match(^\\\\w*$)\"\nlink: url\nsize: \"int(5,20)\"\ncount: float\nnot_need: \"str?\"\n```\n\n----------------------------------------\n\nTITLE: Installing Development Library in Home Assistant\nDESCRIPTION: Commands for installing an editable version of a custom library in Home Assistant's development environment and running Home Assistant without installing dependencies from PyPI.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install -e ../my_lib_folder\n```\n\nLANGUAGE: shell\nCODE:\n```\nhass --skip-pip-packages my_lib_module_name\n```\n\n----------------------------------------\n\nTITLE: Error Response Example in JSON\nDESCRIPTION: Example of an error response from the Conversation API. It includes the response type, language, error code, and speech output with an error message.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_conversation_api.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": {\n    \"response_type\": \"error\",\n    \"language\": \"en\",\n    \"data\": {\n      \"code\": \"no_intent_match\"\n    },\n    \"speech\": {\n      \"plain\": {\n        \"speech\": \"Sorry, I didn't understand that\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Service Data UUID Matching in manifest.json\nDESCRIPTION: Example of Bluetooth discovery configuration to match SwitchBot sensor devices by service data UUID, using a 128-bit UUID derived from a 16-bit UUID (0xfd3d).\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bluetooth\": [\n    {\n      \"service_data_uuid\": \"0000fd3d-0000-1000-8000-00805f9b34fb\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for Home Assistant Add-on Test Build\nDESCRIPTION: This YAML configuration sets up a GitHub Action workflow to test build a Home Assistant add-on across all supported architectures. It uses the home-assistant/builder action to perform the build process.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-10-29-supervisor-update.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build:\n    name: Test build\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the repository\n      uses: actions/checkout@v2\n    - name: Test build\n      uses: home-assistant/builder@master\n      with:\n        args: |\n          --test \\\n          --all \\\n          --target /data\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Exposure in Home Assistant Add-on\nDESCRIPTION: An updated config.yaml that adds port mapping to expose the container's internal port 8000 to the host. It also sets the startup type to 'services' and includes the version update to 1.1.0.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Hello world\"\ndescription: \"My first real add-on!\"\nversion: \"1.1.0\"\nslug: \"hello_world\"\ninit: false\narch:\n  - aarch64\n  - amd64\n  - armhf\n  - armv7\n  - i386\nstartup: services\nports:\n  8000/tcp: 8000\n```\n\n----------------------------------------\n\nTITLE: DHCP Registered Devices Discovery in manifest.json\nDESCRIPTION: Example of DHCP discovery configuration that includes registered devices option for MAC address matching of devices that have already been registered in the device registry.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_manifest.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dhcp\": [\n    {\n    \"hostname\": \"myintegration-*\",\n    },\n    {\n    \"registered_devices\": true,\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Push Notifications via Websocket in Home Assistant\nDESCRIPTION: Example of a push notification event received over a websocket connection. The event contains the notification message and an optional confirmation ID if confirmation was enabled.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/notifications.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2,\n  \"type\": \"event\",\n  \"event\": {\n    \"message\": \"Hello world\",\n    \"hass_confirm_id\": \"12345\" // if confirm = true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Sun Helper Functions with Elevation Parameter in Python\nDESCRIPTION: This code snippet shows the modified signatures of the sun helper functions after the Astral 2.2 upgrade. The 'get_astral_location' now returns a tuple including elevation, and both functions now include an 'elevation' parameter. These changes will be released with Home Assistant 2021.5.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2021-04-09-astral-2.2.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@callback\n@bind_hass\ndef get_astral_location(\n    hass: HomeAssistant,\n) -> tuple[astral.location.Location, astral.Elevation]:\n    \"\"\"Get an astral location for the current Home Assistant configuration.\"\"\"\n\n@callback\ndef get_location_astral_event_next(\n    location: astral.Location,\n    location: astral.location.Location,\n    elevation: astral.Elevation,\n    event: str,\n    utc_point_in_time: datetime.datetime | None = None,\n    offset: datetime.timedelta | None = None,\n) -> datetime.datetime:\n    \"\"\"Calculate the next specified solar event.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Push Notification Payload to External Server\nDESCRIPTION: Example HTTP POST payload sent to an external server for cloud push notifications. Contains the notification content, push token, device registration information, and optional custom data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/notifications.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Hello World\",\n  \"title\": \"Test message sent via mobile_app.notify\",\n  \"push_token\": \"my-secure-token\",\n  \"registration_info\": {\n    \"app_id\": \"io.home-assistant.iOS\",\n    \"app_version\": \"1.0.0\",\n    \"os_version\": \"12.2\",\n    \"webhook_id\": \"webhook_id_from_registration\"\n  },\n  \"data\": {\n    \"key\": \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Permission Group in Home Assistant\nDESCRIPTION: Example JSON structure for creating a custom permission group in the auth storage file. This snippet shows how to define entity-specific permissions, allowing read access to some entities and control access to others.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2019-03-11-user-permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"my-custom-group\",\n  \"name\": \"My Custom Group\",\n  \"policy\": {\n    \"entities\": {\n      \"entity_ids\": {\n        \"light.kitchen\": true,\n        \"switch.ac\": {\n          \"read\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing deprecated `async_add_hass_job` with `async_run_hass_job` in Home Assistant\nDESCRIPTION: This snippet illustrates the change in function usage from the deprecated `async_add_hass_job` to the new `async_run_hass_job`. Developers should update their code to use the new function for better performance and compatibility with future Home Assistant versions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-04-07-deprecate_add_hass_job.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCalls should be replaced with `async_run_hass_job` instead.\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with FanEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Fan are replaced with the FanEntityFeature enum. This enum provides equivalent functionality for supported features in fan entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.fan import FanEntityFeature\n\n# Use FanEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: React Component Usage for Related Rules\nDESCRIPTION: JSX code showing the usage of the RelatedRules component with frontMatter data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/dependency-transparency.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RelatedRules relatedRules={frontMatter.related_rules}></RelatedRules>\n```\n\n----------------------------------------\n\nTITLE: State Change Detection in JavaScript\nDESCRIPTION: Demonstrates how to check if a value has changed using strict equality comparison.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/data.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst changed = newVal !== oldVal;\n```\n\n----------------------------------------\n\nTITLE: Listing Deprecated Data Entry Flow Constants in Python for Home Assistant\nDESCRIPTION: This code snippet lists the deprecated RESULT_TYPE_* constants used for data entry flow result types in Home Assistant Core versions prior to 2022.7. These constants are being replaced by the new FlowResultType enum.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-06-07-dataflow-constants-deprecation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nRESULT_TYPE_FORM\nRESULT_TYPE_CREATE_ENTRY\nRESULT_TYPE_ABORT\nRESULT_TYPE_EXTERNAL_STEP\nRESULT_TYPE_EXTERNAL_STEP_DONE\nRESULT_TYPE_SHOW_PROGRESS\nRESULT_TYPE_SHOW_PROGRESS_DONE\nRESULT_TYPE_MENU\n```\n\n----------------------------------------\n\nTITLE: Service Call Response in Home Assistant WebSocket API\nDESCRIPTION: Example of a successful response to a service call, including context information and the response field which may contain data or be null for services that don't support responses.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 24,\n  \"type\": \"result\",\n  \"success\": true,\n  \"result\": {\n    \"context\": {\n      \"id\": \"326ef27d19415c60c492fe330945f954\",\n      \"parent_id\": null,\n      \"user_id\": \"31ddb597e03147118cf8d2f8fbea5553\"\n    },\n    \"response\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alarm Custom Bypass Method in Python\nDESCRIPTION: Methods for implementing arm custom bypass functionality. Developers must implement either the synchronous or asynchronous version of the method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/alarm-control-panel.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MyAlarm(AlarmControlPanelEntity):\n    # Implement one of these methods.\n\n    def alarm_arm_custom_bypass(self, code: str | None = None) -> None:\n        \"\"\"Send arm custom bypass command.\"\"\"\n\n    async def async_alarm_arm_custom_bypass(self, code: str | None = None) -> None:\n        \"\"\"Send arm custom bypass command.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Cloud Function for Push Notifications in JavaScript\nDESCRIPTION: This code defines a Firebase Cloud Function that processes incoming push notification requests, enforces rate limits, and sends notifications via Firebase Cloud Messaging. It uses Firestore to track notification counts and implements error handling and payload formatting.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/notifications.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst functions = require('firebase-functions');\nconst admin = require('firebase-admin');\nadmin.initializeApp();\n\nvar db = admin.firestore();\n\nconst MAX_NOTIFICATIONS_PER_DAY = 150;\n\nexports.sendPushNotification = functions.https.onRequest(async (req, res) => {\n  console.log('Received payload', req.body);\n  var today = getToday();\n  var token = req.body.push_token;\n  var ref = db.collection('rateLimits').doc(today).collection('tokens').doc(token);\n\n  var payload = {\n    notification: {\n      body: req.body.message,\n    },\n    token: token,\n  };\n\n  if(req.body.title) {\n    payload.notification.title = req.body.title;\n  }\n\n  if(req.body.data) {\n    if(req.body.data.android) {\n      payload.android = req.body.data.android;\n    }\n    if(req.body.data.apns) {\n      payload.apns = req.body.data.apns;\n    }\n    if(req.body.data.data) {\n      payload.data = req.body.data.data;\n    }\n    if(req.body.data.webpush) {\n      payload.webpush = req.body.data.webpush;\n    }\n  }\n\n  console.log('Notification payload', JSON.stringify(payload));\n\n  var docExists = false;\n  var docData = {\n    deliveredCount: 0,\n    errorCount: 0,\n    totalCount: 0,\n  };\n\n  try {\n    let currentDoc = await ref.get();\n    docExists = currentDoc.exists;\n    if(currentDoc.exists) {\n      docData = currentDoc.data();\n    }\n  } catch(err) {\n    console.error('Error getting document!', err);\n    return handleError(res, 'getDoc', err);\n  }\n\n  if(docData.deliveredCount > MAX_NOTIFICATIONS_PER_DAY) {\n    return res.status(429).send({\n      errorType: 'RateLimited',\n      message: 'The given target has reached the maximum number of notifications allowed per day. Please try again later.',\n      target: token,\n      rateLimits: getRateLimitsObject(docData),\n    });\n  }\n\n  docData.totalCount = docData.totalCount + 1;\n\n  var messageId;\n  try {\n    messageId = await admin.messaging().send(payload);\n    docData.deliveredCount = docData.deliveredCount + 1;\n  } catch(err) {\n    docData.errorCount = docData.errorCount + 1;\n    await setRateLimitDoc(ref, docExists, docData, res);\n    return handleError(res, 'sendNotification', err);\n  }\n\n  console.log('Successfully sent message:', messageId);\n\n  await setRateLimitDoc(ref, docExists, docData, res);\n\n  return res.status(201).send({\n    messageId: messageId,\n    sentPayload: payload,\n    target: token,\n    rateLimits: getRateLimitsObject(docData),\n  });\n\n});\n\nasync function setRateLimitDoc(ref, docExists, docData, res) {\n  try {\n    if(docExists) {\n      console.log('Updating existing doc!');\n      await ref.update(docData);\n    } else {\n      console.log('Creating new doc!');\n      await ref.set(docData);\n    }\n  } catch(err) {\n    if(docExists) {\n      console.error('Error updating document!', err);\n    } else {\n      console.error('Error creating document!', err);\n    }\n    return handleError(res, 'setDocument', err);\n  }\n  return true;\n}\n\nfunction handleError(res, step, incomingError) {\n  if (!incomingError) return null;\n  console.error('InternalError during', step, incomingError);\n  return res.status(500).send({\n    errorType: 'InternalError',\n    errorStep: step,\n    message: incomingError.message,\n  });\n}\n\nfunction getToday() {\n  var today = new Date();\n  var dd = String(today.getDate()).padStart(2, '0');\n  var mm = String(today.getMonth() + 1).padStart(2, '0');\n  var yyyy = today.getFullYear();\n  return yyyy + mm + dd;\n}\n\nfunction getRateLimitsObject(doc) {\n  var d = new Date();\n  return {\n    successful: (doc.deliveredCount || 0),\n    errors: (doc.errorCount || 0),\n    total: (doc.totalCount || 0),\n    maximum: MAX_NOTIFICATIONS_PER_DAY,\n    remaining: (MAX_NOTIFICATIONS_PER_DAY - doc.deliveredCount),\n    resetsAt: new Date(d.getFullYear(), d.getMonth(), d.getDate()+1)\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant Add-on with Ingress Support\nDESCRIPTION: YAML configuration for enabling ingress in a Home Assistant add-on. Specifies basic add-on metadata and enables ingress functionality across multiple architectures.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/presentation.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Ingress Example\"\nversion: \"1.0.0\"\nslug: \"nginx-ingress-example\"\ndescription: \"Ingress testing\"\narch:\n  - amd64\n  - armhf\n  - armv7\n  - i386\ningress: true\n```\n\n----------------------------------------\n\nTITLE: Deleting an Issue in Home Assistant\nDESCRIPTION: This snippet shows how to delete an issue from the issue registry in Home Assistant. It uses the async_delete_issue function from the issue registry helper.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/repairs.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers import issue_registry as ir\n\nir.async_delete_issue(hass, DOMAIN, \"manual_migration\")\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Token Request Error\nDESCRIPTION: The error response format when an invalid request is made to the token endpoint. It includes an error code and a description of the issue.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"Invalid client id\",\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom View with CustomElements\nDESCRIPTION: Code snippet showing how to register a custom view layout with the browser's CustomElements registry, making it available for use in Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-09-30-customViewChanges.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncustomElements.define(\"my-new-view\", MyNewView);\n```\n\n----------------------------------------\n\nTITLE: Documenting YAML Configuration Parameters in Markdown\nDESCRIPTION: Example of how to document installation parameters for integrations that are configured via YAML in the configuration.yaml file. Uses the configuration template to display parameters with their descriptions, required status, and data types.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-installation-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% configuration %}\nHost:\n    description: \"The IP address of your bridge. You can find it in your router or in the Integration app under **Bridge Settings** -> **Local API**.\"\n    required: false\n    type: string\nLocal access token:\n    description: \"The local access token for your bridge. You can find it in the Integration app under **Bridge Settings** -> **Local API**.\"\n    required: false\n    type: string\n{% endconfiguration %}\n```\n\n----------------------------------------\n\nTITLE: Building Home Assistant Android App on Windows\nDESCRIPTION: Gradle command to build a debug version of the Home Assistant Android application on Windows systems.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/get_started.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ngradlew.bat assembleDebug\n```\n\n----------------------------------------\n\nTITLE: Building Add-ons from Local Repository with Home Assistant Builder\nDESCRIPTION: Shell command to build add-ons from a local repository using the Home Assistant builder Docker image. This mounts a local directory containing the add-on code and builds it for all supported architectures.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/publishing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n  --rm \\\n  --privileged \\\n  -v ~/.docker:/root/.docker \\\n  -v /my_addon:/data \\\n  ghcr.io/home-assistant/amd64-builder \\\n  --all \\\n  -t /data\n```\n\n----------------------------------------\n\nTITLE: Config Entry Unload Function\nDESCRIPTION: Function signature for implementing config entry unloading with type hints.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def async_unload_entry(hass: HomeAssistant, entry: MyConfigEntry) -> bool:\n    \"\"\"Unload a config entry.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Python Enum Backports\nDESCRIPTION: Replace deprecated Home Assistant StrEnum backport with native Python enum.StrEnum implementation available in Python 3.11+.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-04-08-deprecated-backports-and-typing-aliases.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Deprecated:\nfrom homeassistant.backports.enum import StrEnum\n\n# New usage:\nfrom enum import StrEnum\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limit Function URL in Gradle Properties\nDESCRIPTION: This optional configuration defines the URL for the rate limit function in the gradle.properties file. It's used to check rate limits for push notifications.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/tips/fcm_push_notification.md#2025-04-21_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nhomeAssistantAndroidRateLimitUrl=https://mydomain.cloudfunctions.net/checkRateLimits\n```\n\n----------------------------------------\n\nTITLE: Creating Troubleshooting Documentation in Markdown\nDESCRIPTION: This snippet demonstrates how to structure troubleshooting documentation in Markdown format. It includes sections for common issues, their symptoms, descriptions, and step-by-step resolutions. The example covers topics such as device setup problems and unavailability issues.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Troubleshooting\n\n### Can't set up the device\n\n#### Symptom: \"This device can't be reached\"\n\nWhen trying to set up the integration, the form shows the message \"This device can't be reached\".\n\n##### Description\n\nThis means the settings on the device are incorrect, since the device needs to be enabled for local communication.\n\n##### Resolution\n\nTo resolve this issue, try the following steps:\n\n1. Make sure your device is powered up (LEDs are on).\n2. Make sure your device is connected to the internet:\n   - Make sure the app of the manufacturer can see the device.\n3. Make sure the device has the local communication enabled:\n   - Check the device's settings.\n   - Check the device's manual.\n...\n \n### I can't see my devices\nMake sure the devices are visible and controllable via the manufacturer's app.\nIf they are not, check the device's power and network connection.\n\n### The device goes unavailable after a day\nMake sure you turned off the device's power-saving mode.\n```\n\n----------------------------------------\n\nTITLE: Documenting Service Actions in Markdown for Home Assistant Integrations\nDESCRIPTION: Example of how to document service actions in a Home Assistant integration. The example shows the structure for documenting an action including its purpose and required parameters with descriptions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-actions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Actions\n\nThe integration provides the following actions.\n\n### Action: Get schedule\n\nThe `my_integration.get_schedule` service is used to fetch a schedule from the integration.\n\n- **Data attribute**: `config_entry_id`\n    - **Description**: The ID of the config entry to get the schedule from.\n    - **Optional**: No\n```\n\n----------------------------------------\n\nTITLE: Old Implementation - With @bind_hass Decorator\nDESCRIPTION: Legacy implementation using the @bind_hass decorator which will be deprecated in Home Assistant 2024.3.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-02-27-deprecate-bind-hass-and-hass-components.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.loader import bind_hass\nfrom homeassistant.components.persistent_notification import async_create\n\n@bind_hass\ndef create_notification(hass: HomeAssistant, message: str):\n    \"\"\"Create a notification.\"\"\"\n    async_create(\n        hass,\n        message, \n        title='Important notification'\n    )\n\nasync def async_setup(hass: HomeAssistant, config):\n    \"\"\"Set up the component.\"\"\"\n    create_notification(\"You're already using the latest version!\")\n```\n\n----------------------------------------\n\nTITLE: User Schema\nDESCRIPTION: Defines the structure for user accounts, including authentication and authorization properties.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/supervisor/models.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| key        | type    | description                                                   |\n| ---------- | ------- | ------------------------------------------------------------- |\n| username   | string  | Username used to login                                        |\n| name       | string  | Name of the user                                              |\n| is_owner   | boolean | Is the user the owner                                         |\n| is_active  | boolean | Is the user active                                            |\n| local_only | boolean | Can the user login from the network (e.g. via http)           |\n| group_ids  | list    | Role(s) the user has (admin, etc)                             |\n```\n\n----------------------------------------\n\nTITLE: Visualizing Test Distribution Flow with Mermaid\nDESCRIPTION: Flowchart comparing the old and new test distribution approaches, showing how centralizing test discovery improved efficiency. The diagram illustrates the transition from discovering tests in each runner to a single discovery phase followed by distributed execution.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-09-improving-ci-test-execution.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A[Full run] --> R{Distribute work}\n\n    R -->|One| D[Discover tests to run]\n    R -->|Two| E[Discover tests to run]\n    R -->|Three| F[Discover tests to run]\n\n    D --> D2[Run tests]\n    E --> E2[Run tests]\n    F --> F2[Run tests]\n\n\n    AN[Full run] --> RW[Discover tests to run]\n\n    RW --> RN{Distribute work}\n\n    RN -->|One| D2N[Run tests]\n    RN -->|Two| E2N[Run tests]\n    RN -->|Three| F2N[Run tests]\n```\n\n----------------------------------------\n\nTITLE: Defining Innovelli Brand with IoT Standards Support in Home Assistant\nDESCRIPTION: JSON configuration for the Innovelli brand that specifies supported IoT standards (Zigbee and Z-Wave) without dedicated integrations. This demonstrates how to represent a brand that offers standards-compatible devices.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_brand.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"innovelli\",\n  \"name\": \"Innovelli\",\n  \"iot_standards\": [\"zigbee\", \"zwave\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Terminology Tooltips with Liquid Template Tags\nDESCRIPTION: These snippets show how to implement terminology tooltips in the documentation using Liquid template tags. They demonstrate both simple term references and custom text tooltips that provide context for technical terminology.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/standards.md#2025-04-21_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% term <term> [<text>] %}\n```\n\nLANGUAGE: liquid\nCODE:\n```\nThis is an example text about {% term automations %}, which is used\nto demonstrate the use of tooltips, in this case, for the term\n\"automations\" earlier in this sentence.\n```\n\nLANGUAGE: liquid\nCODE:\n```\nAwesome, because this allowed me to {% term automation \"automate everything\" %}\nin my home! I love it!\n```\n\n----------------------------------------\n\nTITLE: Fetching Panels Response in Home Assistant WebSocket API\nDESCRIPTION: Response format for a successful panels retrieval request, containing all registered panels in the result array.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"result\",\n  \"success\": true,\n  \"result\": [ ... ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Time Zone Handling with pytz in Python\nDESCRIPTION: This code snippet illustrates how pytz can be used incorrectly for time zone handling, resulting in an unexpected output. It creates a datetime object with New York time zone, but the result shows an incorrect offset.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2021-05-07-switch-pytz-to-python-dateutil.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytz\nfrom datetime import datetime, timedelta\n\nNYC = pytz.timezone('America/New_York')\ndt = datetime(2018, 2, 14, 12, tzinfo=NYC)\nprint(dt)\n# 2018-02-14 12:00:00-04:56\n```\n\n----------------------------------------\n\nTITLE: Adding Description Placeholders in Python\nDESCRIPTION: Optionally add description placeholder keys to the message by implementing the async_get_description_placeholders method in application_credentials.py.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/application_credentials.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import HomeAssistant\n\nasync def async_get_description_placeholders(hass: HomeAssistant) -> dict[str, str]:\n    \"\"\"Return description placeholders for the credentials dialog.\"\"\"\n    return {\n        \"console_url\": \"https://example.com/developer/console\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Pong Response in Home Assistant WebSocket API\nDESCRIPTION: Server response to a ping command, confirming the connection is still active.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 19,\n    \"type\": \"pong\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Removal Instructions in Home Assistant Documentation\nDESCRIPTION: A template for documenting the removal process of a Home Assistant integration. It includes standard removal steps, a reusable template inclusion, and instructions to remove the integration from the manufacturer's app.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-removal-instructions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Removing the integration\n\nThis integration follows standard integration removal. No extra steps are required.\n\n{% include integrations/remove_device_service.md %}\n\nAfter deleting the integration, go to the app of the manufacturer and remove the Home Assistant integration from there as well.\n```\n\n----------------------------------------\n\nTITLE: API Role Definitions Table\nDESCRIPTION: A table defining the available API roles and their corresponding access levels in Home Assistant add-ons. Details the permissions granted to each role from default access to admin privileges.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/security.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Role | Description |\n|------|-------------|\n| `default` | Have access to all `info` calls |\n| `homeassistant` | Can access all Home Assistant API endpoints |\n| `backup` | Can access all backup API endpoints |\n| `manager` | Is for Add-ons that run CLIs and need extended rights |\n| `admin` | Have access to every API call. That is the only one they can disable/enable the Add-on protection mode |\n```\n\n----------------------------------------\n\nTITLE: Disabling LeakCanary via Properties File in Android\nDESCRIPTION: This property setting disables LeakCanary by adding it to the gradle.properties file. It can be set at either the project level or the home level to exclude LeakCanary from the build.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/tips/leak_canary.md#2025-04-21_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nnoLeakCanary=true\n```\n\n----------------------------------------\n\nTITLE: Using Card Helper Functions in Home Assistant Lovelace\nDESCRIPTION: This code demonstrates how to use the new helper functions to create Lovelace elements. The helpers must be loaded asynchronously and provide access to methods like createRowElement that generate UI components with the current Home Assistant version's implementation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-02-18-106-custom-card-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst helpers = await loadCardHelpers();\nconst element = helpers.createRowElement(config);\nelement.hass = this.hass;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Minimum/Maximum Color Temperature in Kelvin\nDESCRIPTION: Example of how to use the default Kelvin constants for color temperature ranges in a light entity, which now need to be explicitly set.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-12-14-kelvin-preferred-color-temperature-unit.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.light import DEFAULT_MAX_KELVIN, DEFAULT_MIN_KELVIN\n\nclass MyLight(LightEntity):\n    \"\"\"Representation of a light.\"\"\"\n\n    # Old did not need to have _attr_min_mireds / _attr_max_mireds set\n    # New needs to set the default explicitly\n    _attr_min_color_temp_kelvin = DEFAULT_MIN_KELVIN\n    _attr_max_color_temp_kelvin = DEFAULT_MAX_KELVIN\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic View Strategy in TypeScript\nDESCRIPTION: A TypeScript class that implements a view strategy to generate a single view configuration with a timestamp. This strategy is applied to individual views rather than the entire dashboard.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-strategy.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass StrategyDemo {\n  static async generate(config, hass) {\n    return {\n      \"cards\": [\n        {\n          \"type\": \"markdown\",\n          \"content\": `Generated at ${(new Date).toLocaleString()}`\n        }\n      ]\n    };\n  }\n}\n\ncustomElements.define(\"ll-strategy-my-demo\", StrategyDemo);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Use Case Example in Markdown\nDESCRIPTION: Shows a sample use case documentation for a hypothetical company's motion detection integration, illustrating how to document practical applications and benefits.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-use-cases.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe motion detection devices of MyCompany are cheap and usable.\nWhen you combine it with their other device you can do x.\n```\n\n----------------------------------------\n\nTITLE: New Response Format for entity/source Websocket Command in Home Assistant\nDESCRIPTION: Example of the new simplified response format from the entity/source websocket command. It only includes the domain of each entity in the response, with other fields removed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-09-12-ws-entity-source-simplified.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"light.entity_1\": {\n    \"domain\": \"template\",\n  },\n  \"switch.entity_2\": {\n    \"domain\": \"shelly\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Boot Slot Schema\nDESCRIPTION: Defines the structure for boot slot information, including state, status, and OS version details.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/supervisor/models.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| key        | type    | description                                     |\n| ---------- | ------- | ----------------------------------------------- |\n| state      | string  | Active or inactive (active slot is in use)      |\n| status     | string  | Status of the last boot from slot (good or bad) |\n| version    | string  | Version of OS installed                         |\n```\n\n----------------------------------------\n\nTITLE: Rendering Quality Scale Rules with JSX Component\nDESCRIPTION: JSX code that imports and renders a RuleOverview component for displaying integration quality rules for different tiers.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport RuleOverview from './_includes/rule_overview.jsx'\n\n<RuleOverview tier=\"bronze\" />\n<RuleOverview tier=\"silver\" />\n<RuleOverview tier=\"gold\" />\n<RuleOverview tier=\"platinum\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote in Git for Home Assistant Core\nDESCRIPTION: Sets up an additional remote repository pointing to the original Home Assistant core repository. This allows you to fetch the latest changes from the main project.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_catching_up.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/home-assistant/core.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Run Script for Home Assistant Add-on\nDESCRIPTION: This shell script is executed when the add-on starts. It uses the bashio environment for Home Assistant add-ons and simply outputs a 'Hello world!' message to the logs.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/with-contenv bashio\n\necho \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Alarm Arm Away Method in Python\nDESCRIPTION: Methods for implementing arm away functionality. Developers must implement either the synchronous or asynchronous version of the method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/alarm-control-panel.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyAlarm(AlarmControlPanelEntity):\n    # Implement one of these methods.\n\n    def alarm_arm_away(self, code: str | None = None) -> None:\n        \"\"\"Send arm away command.\"\"\"\n\n    async def async_alarm_arm_away(self, code: str | None = None) -> None:\n        \"\"\"Send arm away command.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Sending Intent via HTTP API in JSON\nDESCRIPTION: Example of JSON data to be sent to the /api/intent/handle endpoint to fire an intent in Home Assistant. It includes the intent name and associated data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_firing.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"HassTurnOn\",\n  \"data\": {\n    \"name\": \"Kitchen Light\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Raising ConfigEntryAuthFailed Exception\nDESCRIPTION: Example showing how to raise a ConfigEntryAuthFailed exception during integration setup when credentials are invalid.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-11-04-reauth-reconfigure-entry-id.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n    \"\"\"Set up integration from a config entry.\"\"\"\n    username = entry.data[CONF_USERNAME]\n    password = entry.data[CONF_PASSWORD]\n\n    if not _credentials_valid(username, password):\n        raise ConfigEntryAuthFailed()\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with SirenEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Siren are replaced with the SirenEntityFeature enum. This enum provides equivalent functionality for supported features in siren entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.siren import SirenEntityFeature\n\n# Use SirenEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Authentication Invalid Message in Home Assistant WebSocket API\nDESCRIPTION: Server message indicating authentication failure. This is sent when invalid credentials are provided, and the server will disconnect the session afterward.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"auth_invalid\",\n  \"message\": \"Invalid password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Data Format for Speech Transmission\nDESCRIPTION: Demonstrates the format for sending speech data over WebSocket, where the first byte represents stt_binary_handler_id followed by the audio data chunk.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/pipelines/index.md#2025-04-21_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n01a1b2c3\n```\n\n----------------------------------------\n\nTITLE: Value Limitation Schema Validation in Python\nDESCRIPTION: Shows how to restrict user input to specific predefined options using voluptuous. Implements an optional configuration field that only accepts 'POST' or 'GET' as valid values.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_validation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_METHOD = \"GET\"\n\nPLATFORM_SCHEMA = PLATFORM_SCHEMA.extend(\n    {\n        # ...\n        vol.Optional(CONF_METHOD, default=DEFAULT_METHOD): vol.In([\"POST\", \"GET\"]),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning and configuring Home Assistant frontend repository\nDESCRIPTION: Clone the forked frontend repository and add the upstream remote for development.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/development.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:YOUR_GIT_USERNAME/frontend.git\ncd frontend\ngit remote add upstream https://github.com/home-assistant/frontend.git\n```\n\n----------------------------------------\n\nTITLE: Importing Intents from YAML in JavaScript\nDESCRIPTION: This code snippet imports intents from a YAML file using a custom loader. It's used to dynamically generate the list of supported intents in the documentation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_builtin.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport intents from '!!yaml-loader!../intents/intents.yaml';\n```\n\n----------------------------------------\n\nTITLE: Adding a camera domain state card to Home Assistant frontend\nDESCRIPTION: This code snippet demonstrates the three steps required to add a new custom state card for the 'camera' domain to the Home Assistant frontend. It involves modifying the DOMAINS_WITH_CARD array, creating a new state card file, and importing it in the state-card-content.ts file.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/extending/adding-state-card.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Add 'camera' to the array DOMAINS_WITH_CARD in the file /common/const.ts\n// 2. Create the files state-card-camera.ts in the folder /state-summary/\n// 3. Add import './state-card-camera.ts'; to state-card-content.ts\n```\n\n----------------------------------------\n\nTITLE: Building Release APK using Gradle CLI\nDESCRIPTION: Commands for building a release APK using Gradle CLI. It includes options for building all apps or a specific module.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/tips/release.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew assembleRelease # To build all the apps\n# OR\n./gradlew :<GRADLE_MODULE>:assembleRelease # To build a specific module, such as :app, :automotive, or :wear\n```\n\n----------------------------------------\n\nTITLE: Building Add-ons from Git Repository with Home Assistant Builder\nDESCRIPTION: Shell command to build add-ons from a Git repository using the Home Assistant builder Docker image. This command builds images for all supported architectures and pushes them to Docker Hub.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/publishing.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n  --rm \\\n  --privileged \\\n  -v ~/.docker:/root/.docker \\\n  ghcr.io/home-assistant/amd64-builder \\\n  --all \\\n  -t addon-folder \\\n  -r https://github.com/xy/addons \\\n  -b branchname\n```\n\n----------------------------------------\n\nTITLE: Applying MonkeyType Stub to Module\nDESCRIPTION: Command to apply the generated type stub to the actual Home Assistant module\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_typing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmonkeytype apply homeassistant.your_actual_module\n```\n\n----------------------------------------\n\nTITLE: Updating Reference Screenshots Command for Android Debug Testing\nDESCRIPTION: Gradle command to update the reference screenshots stored under src/debug/screenshotTest/reference in each Gradle module. This command is used to refresh the baseline UI snapshots for comparison testing.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/testing/screenshot_testing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew updateDebugScreenshotTest\n```\n\n----------------------------------------\n\nTITLE: Declaring Single Instance Configuration in Home Assistant Integration Manifest\nDESCRIPTION: The single_config_entry manifest option allows developers to specify that their integration only supports one configuration entry. When set, Home Assistant automatically prevents additional config flows if a configuration already exists.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-02-26-single-instance-only-manifest-option.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsingle_config_entry: true\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch Changes to Remote\nDESCRIPTION: Command to push your merged feature branch changes to your remote repository after successfully merging with upstream changes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_catching_up.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Run this from your feature branch\ngit push\n```\n\n----------------------------------------\n\nTITLE: Service Call Example\nDESCRIPTION: Shows how to call a Home Assistant service using the callService method.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/data.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhass.callService('light', 'turn_on', {\n  entity_id: 'light.kitchen'\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Data in Home Assistant WebSocket API\nDESCRIPTION: This endpoint returns a version of /api/config with values useful for configuring your app. It requires no additional parameters.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"get_config\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Tile Feature in JavaScript\nDESCRIPTION: This JavaScript code shows how to register a custom tile feature for the tile card editor. It adds a new feature type 'button-press-tile-feature' with the name 'Button press' to the customTileFeatures array, making it available in the tile card editor interface.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-02-28-custom-tile-features.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.customTileFeatures = window.customTileFeatures || [];\nwindow.customTileFeatures.push({\n  type: \"button-press-tile-feature\",\n  name: \"Button press\",\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding All State Attributes Using MATCH_ALL in Python\nDESCRIPTION: This code snippet demonstrates how to use the MATCH_ALL constant in a Home Assistant entity class to exclude all state attributes from recording, except for device_class, state_class, unit_of_measurement, and friendly_name.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-06-22-excluding-state-attributes-from-recording-match-all.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.const import MATCH_ALL\n\nclass ExampleEntity(Entity):\n    \"\"\"Implementation of an entity.\"\"\"\n\n    _unrecorded_attributes = frozenset({MATCH_ALL})\n\n```\n\n----------------------------------------\n\nTITLE: Defining Translation Strings in strings.json for Home Assistant Exceptions\nDESCRIPTION: This JSON snippet shows how to define translation strings for exception messages in a Home Assistant integration. The strings.json file contains an 'exceptions' object with translation keys matching those used when raising exceptions in the Python code.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/exception-translations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"exceptions\": {\n        \"end_date_before_start_date\": {\n            \"message\": \"The end date cannot be before the start date.\"\n        },\n        \"cannot_connect_to_schedule\": {\n            \"message\": \"Cannot connect to the schedule.\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Pipeline CI Configuration\nDESCRIPTION: YAML configuration for Home Assistant's CI pipeline that defines test stages, resources, and strategies. This shows how they implement pipeline artifact caching and use custom base images for test runners.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2019-07-19-building-all-the-things.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  containers:\n    - container: python36\n      image: homeassistant/ci-azure:3.6\n    - container: python37\n      image: homeassistant/ci-azure:3.7\n\nstrategy:\n  matrix:\n    Python36:\n      python.container: python36\n    Python37:\n      python.container: python37\n```\n\n----------------------------------------\n\nTITLE: Old UnitOfConductivity Enum Definition in Python\nDESCRIPTION: This snippet shows the previous definition of the UnitOfConductivity enum in Home Assistant. It defines three units of conductivity: SIEMENS, MICROSIEMENS, and MILLISIEMENS.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-10-08-unit-of-conductivity-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n  class UnitOfConductivity(StrEnum):\n    \"\"\"Conductivity units.\"\"\"\n\n    SIEMENS = \"S/cm\"\n    MICROSIEMENS = \"µS/cm\"\n    MILLISIEMENS = \"mS/cm\"\n```\n\n----------------------------------------\n\nTITLE: Configuring dev container for frontend development in VS Code\nDESCRIPTION: Add a mount configuration to the devcontainer.json file to include the frontend repository in the dev container.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/development.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"mounts\": [\n  \"source=/path/to/hass/frontend,target=/workspaces/frontend,type=bind,consistency=cached\"\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Self-Signed Certificate to RAUC Keyring in HAOS\nDESCRIPTION: This snippet demonstrates how to add a self-signed certificate to the RAUC keyring in Home Assistant Operating System. This process allows for updating to a local, self-signed build by temporarily modifying the keyring.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/update-system.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# cp -r /etc/rauc/ /tmp/rauc\n# cat /mnt/data/cert.pem >> /tmp/rauc/keyring.pem\n# mount -o bind /tmp/rauc/ /etc/rauc/\n# systemctl restart rauc\n```\n\n----------------------------------------\n\nTITLE: Using ha-state-icon Before Home Assistant 2024.2\nDESCRIPTION: The previous way of using ha-state-icon component in custom cards before the 2024.2 update, where only the state object needed to be passed to the component.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-01-30-ha-state-icon-properties-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ha-state-icon .state=${stateObj}></ha-state-icon>\n```\n\n----------------------------------------\n\nTITLE: Defining Responses for Light Brightness Control in YAML\nDESCRIPTION: This snippet shows how to define a template sentence with a specific response key for setting light brightness. It includes slot extraction and a fixed brightness value.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/template-sentence-syntax.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example light_HassLightSet.yaml\nlanguage: \"en\"\nintents:\n  HassTurnOn:\n    data:\n      - sentences:\n          - \"set {name} brightness to maximum\"\n        slots:\n          brightness: 100\n        response: \"brightness\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Add-on Image in YAML\nDESCRIPTION: YAML configuration for specifying the container image for a Home Assistant add-on. Uses the {arch} placeholder to support multiple architectures with a single configuration file.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/publishing.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\nimage: \"myhub/image-{arch}-addon-name\"\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant for frontend development\nDESCRIPTION: Update the configuration.yaml file to use the development repository for the frontend.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/development.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfrontend:\n  development_repo: /workspaces/frontend\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfrontend:\n  # Example path: /home/paulus/dev/hass/frontend\n  development_repo: /path/to/hass/frontend\n```\n\n----------------------------------------\n\nTITLE: Implementing Turn Off Method for Home Assistant Climate Entity in Python\nDESCRIPTION: This snippet shows how to implement the turn off method for a Climate entity. It includes both synchronous and asynchronous versions and notes on setting the HVAC mode to OFF.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/climate.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    # Implement one of these methods.\n    # The `turn_off` method should set `hvac_mode` to `HVACMode.OFF` by\n    # optimistically setting it from the service action handler or with the\n    # next state update\n\n    def turn_off(self):\n        \"\"\"Turn the entity off.\"\"\"\n\n    async def async_turn_off(self):\n        \"\"\"Turn the entity off.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Template Sentences for Light Control in YAML\nDESCRIPTION: This snippet demonstrates how to define template sentences for the HassTurnOn intent, specifically for controlling lights in different areas. It includes optional words, alternatives, and slot extraction.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/template-sentence-syntax.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example light_HassTurnOn.yaml\nlanguage: \"en\"\nintents:\n  HassTurnOn:  # Intent name\n    data:\n      - sentences:\n          - \"<turn> on [all] [the] (light | lights) in [the] {area}\"\n          - \"<turn> on [all] [the] {area} (light | lights)\"\n          - \"<turn> [all] [the] (light | lights) in [the] {area} on\"\n        # Optional; used to set fixed slot values when the intent is matched\n        slots:\n          domain: \"light\"\n```\n\n----------------------------------------\n\nTITLE: Workflow Summary Table Structure\nDESCRIPTION: Markdown table showing all GitHub Actions workflows, their triggers, and main objectives in the CI/CD pipeline\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/ci.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Workflow         | Trigger                     | Goals                                                                 |\n|-------------------|-----------------------------|----------------------------------------------------------------------|\n| `pr.yml`         | On PR open or update        | Lint, build, test, and persist APKs.                                |\n| `onPush.yml`     | On push to `main`         | Build, deploy, and publish to Firebase and the Play Store.              |\n| `weekly.yml`     | Every Sunday at 4:00 AM     | Create a pre-release and push the beta build to the Play Store.              |\n| `monthly.yml`    | First day of the month      | Create an initial version tag (`YYYY.MM.0`).                           |\n| `release.yml`    | Manual trigger              | Promote the beta build to production.                                  |\n```\n\n----------------------------------------\n\nTITLE: Closing Issues with GitHub Command for Home Assistant Code Owners\nDESCRIPTION: This command allows code owners to close an issue when there is only one integration labeled. It's executed by commenting on the issue.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-10-21-code-owner-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@home-assistant close\n```\n\n----------------------------------------\n\nTITLE: Implementing alarm_state Property with AlarmControlPanelState Enum in Python\nDESCRIPTION: This code snippet demonstrates how to implement the new 'alarm_state' property in a custom alarm control panel entity class. It uses the 'AlarmControlPanelState' enum to return the state of the alarm based on the device's status.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-10-22-new-alarm-state-property.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.alarm_control_panel import AlarmControlPanelEntity, AlarmControlPanelState\n\nclass MyAlarm(AlarmControlPanelEntity):\n    \"\"\"My alarm.\"\"\"\n\n    @property\n    def alarm_state(self) -> AlarmControlPanelState | None:\n        \"\"\"Return the state of the alarm.\"\"\"\n        if self.device.is_on():\n            return AlarmControlPanelState.ARMED_AWAY\n        return AlarmControlPanelState.DISARMED\n```\n\n----------------------------------------\n\nTITLE: Job Data Model Schema\nDESCRIPTION: Defines the structure for job entities in Home Assistant, including tracking progress, status, and related child jobs and errors.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/supervisor/models.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| key        | type    | description                                                   |\n| ---------- | ------- | ------------------------------------------------------------- |\n| name       | string  | Name of the job                                               |\n| reference  | string  | A unique ID for instance the job is acting on (if applicable) |\n| uuid       | string  | Unique ID of the job                                          |\n| progress   | int     | Progress of the job (if accurate progress is obtainable)      |\n| stage      | string  | A name for the stage the job is in (if applicable)            |\n| done       | boolean | Is the job complete                                           |\n| created    | string  | Date and time when job was created in ISO format              |\n| child_jobs | list    | A list of child [jobs](#job) started by this one              |\n| errors     | list    | A list of [errors](#job-error) that occurred during execution |\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Script Path in Home Assistant Frontend\nDESCRIPTION: Indicates the file path for the bootstrap script that initializes authentication and websocket connection with the backend. This script allows data downloading to start while the rest of the UI loads in parallel.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/entrypoints/core.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Home Assistant Component in Python\nDESCRIPTION: Basic setup of a Hello State component that demonstrates component initialization and logging setup. Includes component domain definition and setup function.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_states.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\\nSupport for showing text in the frontend.\\n\\nFor more details about this component, please refer to the documentation at\\nhttps://developers.home-assistant.io/docs/dev_101_states\\n\"\"\"\\nimport logging\\n\\n_LOGGER = logging.getLogger(__name__)\\n\\nDOMAIN = \"hello_state\"\\n\\n\\ndef setup(hass, config):\\n    \"\"\"Setup the Hello State component. \"\"\"\\n    _LOGGER.info(\"The 'hello state' component is ready!\")\\n\\n    return True\n```\n\n----------------------------------------\n\nTITLE: Unsetting a Conversation Agent in Home Assistant Python API\nDESCRIPTION: Code snippet demonstrating the new endpoint for unsetting a conversation agent, which uses a dedicated method rather than the previous approach.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-01-24-conversation-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconversation.async_unset_agent(hass, config_entry)\n```\n\n----------------------------------------\n\nTITLE: Temporary Legacy Support Layer for Polymer in Home Assistant\nDESCRIPTION: Components that have been re-exposed through the window object in the temporary legacy support layer to help developers migrate their custom UI components and panels. This support layer will be removed after July 2018.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2018-05-22-custom-ui-panels-api.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Polymer\nwindow.Polymer.Element\nwindow.Polymer.html\n```\n\n----------------------------------------\n\nTITLE: Integration Documentation Header Template\nDESCRIPTION: Example YAML header for integration documentation pages, showing required and optional metadata fields like title, release version, category, IoT class, and more.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/create-page.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n---\ntitle: \"Awesome Sensor\"\ndescription: \"home-assistant.io web presence\"\nha_release: \"0.38\"\nha_category: Sensor\nha_iot_class: \"Local Polling\"\nha_quality_scale: silver\nha_config_flow: true\nha_codeowners:\n  - '@balloob'\nha_domain: awesome\nrelated:\n  - docs: /voice_control/s3_box_voice_assistant/\n    title: Creating a ESP32-S3-BOX-3 voice assistant\n  - url: https://esphome.io/projects/index.html\n    title: ESPHome projects website\n---\n\nContent... Written in markdown.\n\n### Title header\n...\n```\n\n----------------------------------------\n\nTITLE: Running development frontend with existing Home Assistant instance\nDESCRIPTION: Start the development server and connect to an existing Home Assistant instance.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/development.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnvm use\nscript/develop_and_serve -c https://homeassistant.local:8123\n```\n\n----------------------------------------\n\nTITLE: Checking RAUC Status in HAOS Shell\nDESCRIPTION: This code snippet shows how to use the 'rauc status' command in the Home Assistant Operating System shell to view the complete status of the two boot slots, including system info, bootloader status, and slot states.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/update-system.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# rauc status\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code for Remote Debugging of Home Assistant Supervisor\nDESCRIPTION: Visual Studio Code launch configuration for attaching a remote Python debugger to the Home Assistant Supervisor. This JSON configuration maps local workspace files to their location in the Supervisor container.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/supervisor/debugging.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Supervisor remote debug\",\n            \"type\": \"python\",\n            \"request\": \"attach\",\n            \"port\": 33333,\n            \"host\": \"IP\",\n            \"pathMappings\": [\n                {\n                    \"localRoot\": \"${workspaceFolder}\",\n                    \"remoteRoot\": \"/usr/src/hassio\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Icons in Home Assistant Documentation (Markdown)\nDESCRIPTION: Examples of using inline icons from the Iconify library to reference UI elements in documentation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Three dots menu: {% icon \"mdi:dots-vertical\" %}\n- Hamburger menu: {% icon \"mdi:menu\" %}\n- Edit: {% icon \"mdi:edit\" %}\n- Revert {% icon \"mdi:restore\" %}\n- Eye: {% icon \"mdi:eye\" %}\n- Trash: {% icon \"mdi:trash\" %}\n- Cog: {% icon \"mdi:cog\" %}\n- Cog outline: {% icon \"mdi:cog-outline\" %}\n- Drag: {% icon \"mdi:drag\" %}\n- Move-cursor: {% icon \"mdi:cursor-move\" %}\n- Arrow left: {% icon \"mdi:arrow-left-bold\" %}\n- Arrow right: {% icon \"mdi:arrow-right-bold\" %}\n- Checkbox list: {% icon \"mdi:order-checkbox-ascending\" %}\n- Upload network: {% icon \"mdi:upload-network\" %}\n- Security network: {% icon \"mdi:security-network\" %}\n- Routes: {% icon \"mdi:routes\" %}\n```\n\n----------------------------------------\n\nTITLE: Importing Language and Intent Data from YAML Files in JavaScript\nDESCRIPTION: Imports language and intent data from YAML files using a custom loader. This data is used to populate the language support table.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/supported-languages.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport languages from '!!yaml-loader!../../../intents/languages.yaml';\nimport intents from '!!yaml-loader!../../../intents/intents.yaml';\n```\n\n----------------------------------------\n\nTITLE: Updating Code Owners in Home Assistant using Python\nDESCRIPTION: This command runs a script to update the CODEOWNERS file in Home Assistant, which defines ownership for different parts of the codebase.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_checklist.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m script.hassfest\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Swing Mode Setting for Home Assistant Climate Entity in Python\nDESCRIPTION: This snippet shows how to implement the method for setting the horizontal swing mode in a Climate entity. It provides both synchronous and asynchronous implementations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/climate.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MyClimateEntity(ClimateEntity):\n    # Implement one of these methods.\n\n    def set_swing_horizontal_mode(self, swing_mode):\n        \"\"\"Set new target horizontal swing operation.\"\"\"\n\n    async def async_set_swing_horizontal_mode(self, swing_mode):\n        \"\"\"Set new target horizontal swing operation.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the Home Assistant Android Repository\nDESCRIPTION: Command to clone the forked Home Assistant Android repository to the local machine using Git.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/get_started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-github-username>/android.git\n```\n\n----------------------------------------\n\nTITLE: Running pre-commit linters on all files\nDESCRIPTION: Command to run pre-commit linters on the entire codebase to check for code quality and style issues.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_testing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Tag Write Request Payload in TypeScript\nDESCRIPTION: This code defines the payload structure for the 'tag/write' message type. It includes the tag identifier and an optional name for the tag to be written by the external app.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tag: string;\n  name: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Panels Directory in Home Assistant Frontend\nDESCRIPTION: Indicates the directory path for panel components, which represent individual pages in Home Assistant such as states, map, logbook, and history.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/architecture.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/panels/\n```\n\n----------------------------------------\n\nTITLE: Running pre-commit manually with diff display\nDESCRIPTION: Command to manually run pre-commit checks and show differences when failures occur.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_testing.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npre-commit run --show-diff-on-failure\n```\n\n----------------------------------------\n\nTITLE: Building HAOS Image for Raspberry Pi 4 64-bit\nDESCRIPTION: Command to build a Home Assistant Operating System image for Raspberry Pi 4 64-bit using the build container. This demonstrates how to build for a specific target.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo scripts/enter.sh make rpi4_64\n```\n\n----------------------------------------\n\nTITLE: Total Increasing State Class Example with Non-Zero Reset\nDESCRIPTION: Example demonstrating how the total_increasing state class handles a meter reset to a non-zero value, using 0 as the reference point for sum calculations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2021-08-16-state_class_total.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| t                      | state  | sum  |\n| :--------------------- | -----: | ---: |\n|   2021-08-01T13:00:00  |  1000  |   0  |\n|   2021-08-01T14:00:00  |  1010  |  10  |\n|   2021-08-01T15:00:00  |     5  |  15  |\n|   2021-08-01T16:00:00  |    10  |  20  |\n```\n\n----------------------------------------\n\nTITLE: Accessing LitElement from Home Assistant Components (Not Recommended)\nDESCRIPTION: This code demonstrates how some custom components incorrectly import LitElement directly from Home Assistant components. This approach is not recommended as it creates a dependency on the Lit version shipped with Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2021-05-19-lit-2.0.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst LitElement = Object.getPrototypeOf(customElements.get(\"ha-panel-lovelace\"));\nconst html = LitElement.prototype.html;\nconst css = LitElement.prototype.css;\n```\n\n----------------------------------------\n\nTITLE: Running selective pytest commands\nDESCRIPTION: Various helpful pytest commands for running specific tests, limiting test duration, or showing performance metrics.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_testing.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Stop after the first test fails\n$ pytest tests/test_core.py -x\n\n# Run test with specified name\n$ pytest tests/test_core.py -k test_split_entity_id\n\n# Fail a test after it runs for 2 seconds\n$ pytest tests/test_core.py --timeout 2\n\n# Show the 10 slowest tests\n$ pytest tests/test_core.py --duration=10\n```\n\n----------------------------------------\n\nTITLE: Sending Text Input via WebSocket API in JSON\nDESCRIPTION: Example of how to send a text input to the Conversation API using the WebSocket API. The message includes the type of request, the text to process, and the language.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_conversation_api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"conversation/process\",\n  \"text\": \"turn on the lights in the living room\",\n  \"language\": \"en\"\n}\n```\n\n----------------------------------------\n\nTITLE: Haptic Feedback Payload in TypeScript\nDESCRIPTION: This snippet shows the payload structure for the 'haptic' message type. It defines the various haptic feedback types that can be triggered by the frontend in the external app.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  hapticType:\n    | \"success\"\n    | \"warning\"\n    | \"failure\"\n    | \"light\"\n    | \"medium\"\n    | \"heavy\"\n    | \"selection\";\n\n}\n```\n\n----------------------------------------\n\nTITLE: Component Types and Locations Table in Markdown\nDESCRIPTION: A markdown table showing different component types and their locations (Core vs Frontend) in the Home Assistant internationalization system.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/internationalization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type              | Location |\n| ----------------- | -------- |\n| Entity states     | Core     |\n| Config flows      | Core     |\n| Options flows     | Core     |\n| Device automation | Core     |\n| Text in UI        | Frontend |\n```\n\n----------------------------------------\n\nTITLE: Running Language Addition Script in Python\nDESCRIPTION: Command to execute a Python script that generates an empty language directory with required files for adding a new language to the intents system.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m script.intentfest add_language <language code> <language name>\n```\n\n----------------------------------------\n\nTITLE: Migrating Python Functools Backports\nDESCRIPTION: Replace deprecated Home Assistant cached_property backport with native Python functools.cached_property implementation available since Python 3.8, with performance improvements in 3.12+.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-04-08-deprecated-backports-and-typing-aliases.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Deprecated:\nfrom homeassistant.backports.functools import cached_property\n\n# New usage:\nfrom functools import cached_property\n```\n\n----------------------------------------\n\nTITLE: Unassigning Integration Labels with GitHub Command for Home Assistant Code Owners\nDESCRIPTION: This command allows code owners to remove the integration label and related assignees from an issue. The domain of the integration needs to be specified.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-10-21-code-owner-commands.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n@home-assistant unassign <your domain>\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Refresh Token Request\nDESCRIPTION: The JSON response format when successfully exchanging a refresh token for a new access token. It includes the new access token, token type, and expiration time.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"ABCDEFGH\",\n    \"expires_in\": 1800,\n    \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Descriptions and Sensor Entities in Home Assistant\nDESCRIPTION: Example implementation of a sensor entity using entity descriptions, property functions, and class attributes. Demonstrates best practices for entity setup, with custom value functions and attribute handling.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom collections.abc import Callable\nfrom dataclasses import dataclass\n\nfrom example import ExampleDevice, ExampleException\n\nfrom homeassistant.components.sensor import (\n    SensorDeviceClass,\n    SensorEntity,\n    SensorEntityDescription,\n    SensorStateClass,\n)\nfrom homeassistant.config_entries import ConfigEntry\nfrom homeassistant.const import (\n    EntityCategory,\n    UnitOfElectricCurrent,\n)\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.helpers.entity_platform import AddEntitiesCallback\nfrom homeassistant.helpers.typing import StateType\n\nfrom .const import DOMAIN, LOGGER\n\n\n@dataclass(kw_only=True)\nclass ExampleSensorEntityDescription(SensorEntityDescription):\n    \"\"\"Describes Example sensor entity.\"\"\"\n\n    exists_fn: Callable[[ExampleDevice], bool] = lambda _: True\n    value_fn: Callable[[ExampleDevice], StateType]\n\n\nSENSORS: tuple[ExampleSensorEntityDescription, ...] = (\n    ExampleSensorEntityDescription(\n        key=\"estimated_current\",\n        native_unit_of_measurement=UnitOfElectricCurrent.MILLIAMPERE,\n        device_class=SensorDeviceClass.CURRENT,\n        state_class=SensorStateClass.MEASUREMENT,\n        value_fn=lambda device: device.power,\n        exists_fn=lambda device: bool(device.max_power),\n    ),\n)\n\n\nasync def async_setup_entry(\n    hass: HomeAssistant,\n    entry: ConfigEntry,\n    async_add_entities: AddEntitiesCallback,\n) -> None:\n    \"\"\"Set up Example sensor based on a config entry.\"\"\"\n    device: ExampleDevice = hass.data[DOMAIN][entry.entry_id]\n    async_add_entities(\n        ExampleSensorEntity(device, description)\n        for description in SENSORS\n        if description.exists_fn(device)\n    )\n\n\nclass ExampleSensorEntity(SensorEntity):\n    \"\"\"Represent an Example sensor.\"\"\"\n\n    entity_description: ExampleSensorEntityDescription\n    _attr_entity_category = (\n        EntityCategory.DIAGNOSTIC\n    )  # This will be common to all instances of ExampleSensorEntity\n\n    def __init__(\n        self, device: ExampleDevice, entity_description: ExampleSensorEntityDescription\n    ) -> None:\n        \"\"\"Set up the instance.\"\"\"\n        self._device = device\n        self.entity_description = entity_description\n        self._attr_available = False  # This overrides the default\n        self._attr_unique_id = f\"{device.serial}_{entity_description.key}\"\n\n    def update(self) -> None:\n        \"\"\"Update entity state.\"\"\"\n        try:\n            self._device.update()\n        except ExampleException:\n            if self.available:  # Read current state, no need to prefix with _attr_\n                LOGGER.warning(\"Update failed for %s\", self.entity_id)\n            self._attr_available = False  # Set property value\n            return\n\n        self._attr_available = True\n        # We don't need to check if device available here\n        self._attr_native_value = self.entity_description.value_fn(\n            self._device\n        )  # Update \"native_value\" property\n```\n\n----------------------------------------\n\nTITLE: Ineffective Time Handling with Primitive Types in Kotlin\nDESCRIPTION: An example showing poor practice when handling time using primitive types. This approach lacks type safety and can lead to confusion about the units being used (milliseconds vs seconds).\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/best_practices.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nconst val THRESHOLD = 600000\n\nfun main() {\n    val now = System.currentTimeMillis()\n    \n    if (now > THRESHOLD) {\n        // Do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository\nDESCRIPTION: Command to push the committed changes from your local branch to your fork on GitHub, making them available for creating a pull request.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_submitting.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin HEAD\n```\n\n----------------------------------------\n\nTITLE: Triggering Bluetooth Device Rediscovery in Python\nDESCRIPTION: This snippet demonstrates how to trigger rediscovery of a Bluetooth device. This is useful when a configuration entry or device is removed to make them available for setup again without requiring a Home Assistant restart.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\nbluetooth.async_rediscover_address(hass, \"44:44:33:11:23:42\")\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit with Black for Home Assistant Development\nDESCRIPTION: Commands to install pre-commit and set up the Black formatting hook for an existing Home Assistant developer environment. This ensures all code changes are formatted according to Black standards before committing.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2019-07-31-black.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Installing RAUC Update Bundle Manually in HAOS Shell\nDESCRIPTION: This snippet demonstrates how to manually download and install a RAUC update bundle for Home Assistant Operating System using the shell. It includes steps to download the bundle, install it using RAUC, and reboot the system.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/update-system.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# cd /mnt/data/\n# curl -L -O https://github.com/home-assistant/operating-system/releases/download/11.5.rc3/haos_rpi5-64-11.5.rc3.raucb\n# rauc install haos_rpi5-64-11.5.rc3.raucb\n# systemctl reboot\n```\n\n----------------------------------------\n\nTITLE: Port Number Schema Validation in Python\nDESCRIPTION: Demonstrates port number validation using the cv.port validator, which ensures the port number falls within the valid range of 1-65535.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_validation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_PORT = 993\n\nPLATFORM_SCHEMA = PLATFORM_SCHEMA.extend(\n    {\n        # ...\n        vol.Optional(CONF_PORT, default=DEFAULT_PORT): cv.port,\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Building HAOS for Multiple Targets\nDESCRIPTION: Command to build HAOS for a specific target (Raspberry Pi 4 64-bit) using a separate output directory. This allows building for multiple targets in a single source directory.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo scripts/enter.sh make O=output_rpi4_64 rpi4_64\n```\n\n----------------------------------------\n\nTITLE: Import Statement for Camera More Info Component\nDESCRIPTION: Import statement to be added to the more-info-content.ts file to include the new camera more info component.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/extending/adding-more-info-dialogs.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport './more-info-camera.js';\n```\n\n----------------------------------------\n\nTITLE: Disabling LeakCanary via Gradle Command in Android\nDESCRIPTION: This command disables LeakCanary by passing the -PnoLeakCanary flag when assembling a debug build. It ensures that LeakCanary is excluded from the build process.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/tips/leak_canary.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew app:assembleFullDebug -PnoLeakCanary\n```\n\n----------------------------------------\n\nTITLE: Accessing Home Assistant Container Shell\nDESCRIPTION: Docker command to open an interactive bash shell inside the Home Assistant container for debugging purposes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/debugging.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it homeassistant /bin/bash\n```\n\n----------------------------------------\n\nTITLE: WebSocket API Response Format in JSON\nDESCRIPTION: Example of the response format from a webhook request sent via WebSocket API. The response includes a result type, matching ID from the request, and a result object containing the body, HTTP status code, and headers.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"result\",\n  \"id\": 5,\n  \"result\": {\n    \"body\": \"{\\\"ok\\\": true}\",\n    \"status\": 200,\n    \"headers\": {\"Content-Type\": response.content_type},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Merging Latest Home Assistant Changes\nDESCRIPTION: Commands to fetch the latest changes from the upstream Home Assistant dev branch and merge them into your feature branch. This creates a merge commit to integrate the latest changes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_catching_up.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Run this from your feature branch\ngit fetch upstream dev  # to fetch the latest changes into a local dev branch\ngit merge upstream/dev  # to put those changes into your feature branch before your changes\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with LockEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Lock are replaced with the LockEntityFeature enum. This enum provides equivalent functionality for supported features in lock entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.lock import LockEntityFeature\n\n# Use LockEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Starting Home Assistant Core with Remote Supervisor\nDESCRIPTION: This command starts Home Assistant Core, configuring it to connect to a remote Supervisor. The IP address and token need to be adjusted to match the remote system.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/supervisor/development.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSUPERVISOR=192.168.1.100:80 SUPERVISOR_TOKEN=abcdefghj1234 hass\n```\n\n----------------------------------------\n\nTITLE: Correct MQTT Callback Signature in Python\nDESCRIPTION: Example of the correct callback signature for MQTT subscribe that accepts a single ReceiveMessage object parameter, following the new requirements in Home Assistant's MQTT integration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-02-21-deprecated-callback-removed.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@callback\ndef async_correct_callback(msg: ReceiveMessage) -> None:\n    \"\"\"Callback example 1.\"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Relative Time Component in Home Assistant Custom UI\nDESCRIPTION: Updated usage of the <ha-relative-time> component in custom UI for Home Assistant 0.71. The 'hass' object now needs to be passed to this component for localization support.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2018-06-01-071-custom-panels.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ha-relative-time>\n```\n\n----------------------------------------\n\nTITLE: Trigger Event Example in Home Assistant WebSocket API\nDESCRIPTION: Example of a trigger event message showing the detailed structure with trigger variables, state information, and context data.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 2,\n    \"type\": \"event\",\n    \"event\": {\n        \"variables\": {\n            \"trigger\": {\n                \"id\": \"0\",\n                \"idx\": \"0\",\n                \"platform\": \"state\",\n                \"entity_id\": \"binary_sensor.motion_occupancy\",\n                \"from_state\": {\n                    \"entity_id\": \"binary_sensor.motion_occupancy\",\n                    \"state\": \"off\",\n                    \"attributes\": {\n                        \"device_class\": \"motion\",\n                        \"friendly_name\": \"motion occupancy\"\n                    },\n                    \"last_changed\": \"2022-01-09T10:30:37.585143+00:00\",\n                    \"last_updated\": \"2022-01-09T10:33:04.388104+00:00\",\n                    \"context\": {\n                        \"id\": \"90e30ad8e6d0c218840478d3c21dd754\",\n                        \"parent_id\": null,\n                        \"user_id\": null\n                    }\n                },\n                \"to_state\": {\n                    \"entity_id\": \"binary_sensor.motion_occupancy\",\n                    \"state\": \"on\",\n                    \"attributes\": {\n                        \"device_class\": \"motion\",\n                        \"friendly_name\": \"motion occupancy\"\n                    },\n                    \"last_changed\": \"2022-01-09T10:33:04.391956+00:00\",\n                    \"last_updated\": \"2022-01-09T10:33:04.391956+00:00\",\n                    \"context\": {\n                        \"id\": \"9b263f9e4e899819a0515a97f6ddfb47\",\n                        \"parent_id\": null,\n                        \"user_id\": null\n                    }\n                },\n                \"for\": null,\n                \"attribute\": null,\n                \"description\": \"state of binary_sensor.motion_occupancy\"\n            }\n        },\n        \"context\": {\n            \"id\": \"9b263f9e4e899819a0515a97f6ddfb47\",\n            \"parent_id\": null,\n            \"user_id\": null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Lint Rule Severity in Gradle\nDESCRIPTION: Kotlin code showing how to configure Android lint rule severity in the Gradle build configuration. This example demonstrates disabling and promoting rules to errors.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/linter.md#2025-04-21_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nlint {\n    ...\n    disable += \"MissingTranslation\"\n    error += \"LogNotTimber\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Automation Types in Home Assistant\nDESCRIPTION: Migration guide showing the replacement of deprecated automation types with new trigger-based types. AutomationActionType is replaced by TriggerActionType, AutomationTriggerInfo by TriggerInfo, and AutomationTriggerData by TriggerData. The async_attach_trigger function parameter automation_info should be updated to trigger_info.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-08-15-automation-action-type-deprecation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old imports\nfrom homeassistant.components.automation import (\n    AutomationActionType,\n    AutomationTriggerInfo,\n    AutomationTriggerData\n)\n\n# New imports\nfrom homeassistant.helpers.trigger import (\n    TriggerActionType,\n    TriggerInfo,\n    TriggerData\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies on Fedora\nDESCRIPTION: This shell command installs the necessary core dependencies for developing Home Assistant on Fedora systems. It includes Python-related packages, build tools, and media libraries specific to Fedora.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_environment.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf update\nsudo dnf install python3-pip python3-devel python3-virtualenv autoconf openssl-devel libxml2-devel libxslt-devel libjpeg-turbo-devel libffi-devel systemd-devel zlib-devel pkgconf-pkg-config libavformat-free-devel libavcodec-free-devel libavdevice-free-devel libavutil-free-devel libswscale-free-devel ffmpeg-free-devel libavfilter-free-devel ffmpeg-free gcc gcc-c++ cmake\n```\n\n----------------------------------------\n\nTITLE: Documenting Integration Functionality by Entity Types in Markdown\nDESCRIPTION: This example shows how to document integration functionality organized by entity types (Buttons, Numbers, Sensors, Updates, Selects). It includes descriptions, availability information, and remarks for each entity.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-supported-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Supported functionality\n\n### Entities\n\nThe XY integration provides the following entities.\n\n#### Buttons\n\n- **Start backflush**\n  - **Description**: Starts the backflush process on your machine. You got 15 seconds to turn the paddle after activation.\n  - **Available for machines**: all\n\n#### Numbers\n\n- **Dose**\n  - **Description**: Dosage (in ticks) for each key\n  - **Available for machines**: GS3 AV, Linea Mini.\n  - **Remarks**: GS3 has this multiple times, one for each physical key (1-4), and the entities are disabled by default.\n\n#### Sensors\n\n- **Current coffee temperature**\n  - **Description**: Current temperature of the coffee boiler.\n  - **Available for machines**: all\n  - **Remarks**: When the machine reaches temperature, this will be approximately 3 degrees higher than the `Coffee target temperature`, due to different measurement points.\n\n- **Current steam temperature**\n  - **Description**: Current temperature of the steam boiler.\n  - **Available for machines**: Linea Micra, GS3 AV, GS3 MP.\n  - **Remarks**: -\n\n#### Updates\n\n- **Gateway firmware**\n  - **Description**: Firmware status of the gateway.\n  - **Available for machines**: all\n\n#### Selects\n\n- **Prebrew/-infusion mode**\n  - **Description**: Whether to use prebrew, preinfusion, or neither.\n  - **Options**: Disabled, Prebrew, Preinfusion\n  - **Available for machines**: Linea Micra, Linea Mini, GS3 AV\n\n- **Steam level**\n  - **Description**: The level your steam boiler should run at.\n  - **Options**: 1, 2, 3\n  - **Available for machines**: Linea Micra\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Custom Start Time in HTML\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video in Home Assistant documentation using a custom HTML element. It includes options for specifying the video ID, start time, and title.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<lite-youtube videoid=\"ZgoaoTpIhm8\" videoStartAt=\"3907\" videotitle=\"Introducing the Home Assistant Voice Preview Edition - Voice: Chapter 8\"></lite-youtube>\n```\n\n----------------------------------------\n\nTITLE: Running Android Linter Locally with Gradle\nDESCRIPTION: Command to run the Android linter for debug build variant across all modules. The --continue flag ensures all issues are reported across all Gradle modules.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/linter.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew lintDebug --continue\n```\n\n----------------------------------------\n\nTITLE: Setting Up SSH Port Forwarding\nDESCRIPTION: Shell command to set up SSH port forwarding for accessing locally generated documentation from a headless machine\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nssh -L 4000:localhost:4000 user_on_headless_machine@ip_of_headless_machine\n```\n\n----------------------------------------\n\nTITLE: App Shell Path in Home Assistant Frontend\nDESCRIPTION: Specifies the file path for the app shell component which renders the sidebar and handles routing in the Home Assistant frontend.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/architecture.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/entrypoints/app.ts\n```\n\n----------------------------------------\n\nTITLE: Service Validation Error Response with Translation in Home Assistant WebSocket API\nDESCRIPTION: Example of a service validation error response that includes translation information for UI localization. This format appears when a HomeAssistantError or subclass is handled with translation data available.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\": 24,\n   \"type\":\"result\",\n   \"success\": false,\n   \"error\": {\n      \"code\": \"service_validation_error\",\n      \"message\": \"Option 'custom' is not a supported mode.\",\n      \"translation_key\": \"unsupported_mode\",\n      \"translation_domain\": \"kitchen_sink\",\n      \"translation_placeholders\": {\n        \"mode\": \"custom\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing KTLint Issues with Annotation in Kotlin\nDESCRIPTION: Example showing how to use the @Suppress annotation to ignore specific KTLint issues in Kotlin code. This demonstrates suppressing a trailing comma warning on a function call site.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/linter.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Suppress(\"trailing-comma-on-call-site\")\nfun myCallSiteExample() {\n    myFunction(\n        \"value1\",\n        \"value2\", // This trailing comma would normally cause a warning\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message When Docker Default System Init is Used Instead of S6\nDESCRIPTION: The error message that occurs when Docker's default system init is used instead of S6's init with the v3 overlay. This happens when pid 1 is not assigned to the s6-overlay-suexec process.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-05-12-s6-overlay-base-images.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ns6-overlay-suexec: fatal: can only run as pid 1\n```\n\n----------------------------------------\n\nTITLE: Running component-specific tests with coverage report\nDESCRIPTION: Command to run tests for a specific component with code coverage reporting that shows missing coverage.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_testing.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npytest ./tests/components/<your_component>/ --cov=homeassistant.components.<your_component> --cov-report term-missing -vv\n```\n\n----------------------------------------\n\nTITLE: Listing Deprecated device_tracker SOURCE_TYPE Constants in Home Assistant\nDESCRIPTION: This code snippet lists the deprecated SOURCE_TYPE constants from the device_tracker component that will be removed in Home Assistant Core 2022.9. Users should migrate to the new SourceType enum instead.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-07-29-device-tracker_source-type-deprecation.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `SOURCE_TYPE_GPS`\n- `SOURCE_TYPE_ROUTER`\n- `SOURCE_TYPE_BLUETOOTH`\n- `SOURCE_TYPE_BLUETOOTH_LE`\n```\n\n----------------------------------------\n\nTITLE: Defining Message Format Interface in TypeScript\nDESCRIPTION: This code block defines the TypeScript interface for the basic message format used in the external bus communication. It includes an identifier, type, and optional payload.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: number;\n  type: string;\n  payload?: unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Lockfiles in Gradle\nDESCRIPTION: This command resolves all dependencies and updates the gradle.lockfile in each module. It should be run from the project root after adding or updating dependencies in the version catalog.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/tips/dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew alldependencies --write-locks\n```\n\n----------------------------------------\n\nTITLE: Defining AssistSatelliteEntity Properties in Python\nDESCRIPTION: Specifies the properties of an AssistSatelliteEntity, including pipeline_entity_id, vad_sensitivity_entity_id, and tts_options.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity/assist-satellite.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AssistSatelliteEntity:\n    pipeline_entity_id: str | None = None\n    vad_sensitivity_entity_id: str | None = None\n    tts_options: dict | None = None\n```\n\n----------------------------------------\n\nTITLE: Pre-loading Sentences via WebSocket API in JSON\nDESCRIPTION: Example of how to pre-load sentences for a specific language using the WebSocket API. This can be used to prepare the Conversation API for processing inputs in a particular language.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/intent_conversation_api.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"conversation/prepare\",\n  \"language\": \"en\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running KTLint Check Locally with Gradle\nDESCRIPTION: Command to run KTLint check for all code in the repository using Gradle. The --continue flag ensures all issues are reported across all Gradle modules.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/linter.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew ktlintCheck :build-logic:convention:ktlintCheck --continue\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Card Size Calculation in TypeScript for Home Assistant Lovelace UI\nDESCRIPTION: This function computes the size of a Lovelace card, handling both synchronous and asynchronous getCardSize methods. It accounts for lazy-loaded custom elements and returns a number or a Promise resolving to a number.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-06-01-getCardSize.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const computeCardSize = (\n  card: LovelaceCard | LovelaceHeaderFooter\n): number | Promise<number> => {\n  if (typeof card.getCardSize === \"function\") {\n    return card.getCardSize();\n  }\n  if (customElements.get(card.localName)) {\n    return 1;\n  }\n  return customElements\n    .whenDefined(card.localName)\n    .then(() => computeCardSize(card));\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Images with Captions in Home Assistant Documentation (HTML)\nDESCRIPTION: Example of including images with captions in documentation using HTML syntax for more complex image formatting.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<p class='img'><img src='/images/dashboards/features/screenshot-tile-feature-grid.png' alt=\"Screenshot of tile cards with features.\">\nScreenshot of tile cards with features.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian/Ubuntu\nDESCRIPTION: Shell command to install required Ruby dependencies on Debian/Ubuntu systems\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install ruby ruby-dev ruby-bundler ruby-json g++ zlib1g-dev && bundle\n```\n\n----------------------------------------\n\nTITLE: Adding Changes to Git Staging\nDESCRIPTION: Command to add all modified files to the Git staging area before committing changes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_submitting.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Dialogs Directory in Home Assistant Frontend\nDESCRIPTION: Specifies the directory path for dialog components that present information and data entry flows to users, such as the entity more info dialog.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/architecture.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/dialogs\n```\n\n----------------------------------------\n\nTITLE: Authentication Success Message in Home Assistant WebSocket API\nDESCRIPTION: Server message indicating successful authentication. This message is sent when valid credentials are provided.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"auth_ok\",\n  \"ha_version\": \"2021.5.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity State Attribute Icons in Home Assistant\nDESCRIPTION: Example JSON configuration for state attribute icons, demonstrating how to define icons for climate preset modes. Used to customize the appearance of entity state attributes in the frontend.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/entity.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"climate\": {\n      \"ubercool\": {\n        \"state_attributes\": {\n          \"preset_mode\": {\n            \"default\": \"mdi:confused\",\n            \"state\": {\n              \"vacation\": \"mdi:umbrella-beach\",\n              \"night\": \"mdi:weather-night\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with CoverEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Cover are replaced with the CoverEntityFeature enum. This enum provides equivalent functionality for supported features in cover entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.cover import CoverEntityFeature\n\n# Use CoverEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Creating a Repository Opener Component in React\nDESCRIPTION: This code snippet defines a React component called RepositoryOpener. It creates an input field for entering a repository URL and a button to open the repository in Visual Studio Code using the remote containers extension.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_environment.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useState} from 'react';\n\nexport const RepositoryOpener = () => {\n  const [value, setValue] = useState(\"\");\n  const repoUrl = `vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=${encodeURIComponent(value)}`;\n  return <div>\n    <input onInput={(ev) => setValue(ev.target.value)} style={{width: \"80%\", display: \"inline-block\", marginRight: 16}} />\n    <a href={repoUrl}><button style={{cursor: value === \"\" ? \"default\" : \"pointer\"}} disabled={value === \"\"}>Open</button></a>\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using State-Info Component in Home Assistant Custom UI\nDESCRIPTION: Updated usage of the <state-info> component in custom UI for Home Assistant 0.71. The 'hass' object now needs to be passed to this component.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2018-06-01-071-custom-panels.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<state-info>\n```\n\n----------------------------------------\n\nTITLE: Defining Entity State Translations in strings.json for Home Assistant\nDESCRIPTION: This JSON snippet demonstrates how to structure the strings.json file for a Moon domain sensor entity. It defines translations for different moon phases using the 'translation_key' of 'phase'. This approach is used for entities with a unique_id to provide state translations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-12-01-entity_translations.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"sensor\": {\n      \"phase\": {\n        \"state\": {\n          \"new_moon\": \"New moon\",\n          \"first_quarter\": \"First quarter\",\n          \"full_moon\": \"Full moon\",\n          \"last_quarter\": \"Last quarter\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling English Translations for Home Assistant Integrations\nDESCRIPTION: This command runs the translations development helper script to compile English translations for all integrations in Home Assistant. It is used for local development and is automatically executed during dev environment setup and when running Home Assistant in VSCode.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-02-06-translations-files-removed-from-core.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m script.translations develop --all\n```\n\n----------------------------------------\n\nTITLE: Example Message in JSON Format\nDESCRIPTION: This snippet provides an example of a message in JSON format, demonstrating how to structure a simple message for the external bus communication.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 5,\n  \"type\": \"config/get\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking System Logs\nDESCRIPTION: Commands to view various system logs including supervisor service logs, supervisor container logs, and Home Assistant container logs.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/debugging.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Logs from the supervisor service on the Host OS\njournalctl -f -u hassos-supervisor.service\n\n# Supervisor logs\ndocker logs hassio_supervisor\n\n# Home Assistant logs\ndocker logs homeassistant\n```\n\n----------------------------------------\n\nTITLE: Running the complete pytest test suite\nDESCRIPTION: Command to run the full test suite using pytest on the tests directory after activating the virtual environment.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_testing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npytest tests\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js and dependencies for frontend development\nDESCRIPTION: Install Node.js using nvm, install Yarn, and bootstrap the frontend development environment.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/development.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnvm install\nnvm use\nscript/bootstrap\nscript/setup_translations\n```\n\n----------------------------------------\n\nTITLE: Integration Docstring Example in Python\nDESCRIPTION: Example of a minimal __init__.py file with just a docstring for an integration that only offers a platform.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_file_structure.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"The Mobile App integration.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Get Zones Webhook in JSON\nDESCRIPTION: Simple JSON payload for retrieving all enabled zones from Home Assistant. This webhook message doesn't require any additional data fields and returns information about configured zones in the Home Assistant instance.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"get_zones\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filesystem Schema\nDESCRIPTION: Defines the structure for filesystem information, including device paths, size, and mount points.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/supervisor/models.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| key          | type    | description                                               |\n| ------------ | ------- | --------------------------------------------------------- |\n| device       | string  | Special device file for the filesystem (e.g. `/dev/sda1`) |\n| id           | string  | Unique and persistent id for filesystem                   |\n| size         | int     | Size of the filesystem in bytes                           |\n| name         | string  | Name of the filesystem (if known)                         |\n| system       | boolean | `true` if filesystem considered a system/internal device  |\n| mount_points | list    | List of paths where the filesystem is mounted.            |\n```\n\n----------------------------------------\n\nTITLE: Fetching States Response in Home Assistant WebSocket API\nDESCRIPTION: Response format for a successful state retrieval request, containing all entity states in the result array.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"result\",\n  \"success\": true,\n  \"result\": [ ... ]\n}\n```\n\n----------------------------------------\n\nTITLE: YAML File Structure Example\nDESCRIPTION: Example of the file naming convention used for sentence and test files in the intents repository, showing the domain_intent.yaml pattern.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsentences/<language>/cover_HassCoverOpen.yaml\nsentences/<language>/cover_HassCoverClose.yaml\ntests/<language>/cover_HassCoverOpen.yaml\ntests/<language>/cover_HassCoverClose.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting File Descriptor Limits in Home Assistant Add-ons\nDESCRIPTION: Command to set the maximum number of open file descriptors to the previous limit (1048576) for add-ons experiencing out-of-memory issues on Home Assistant OS 10.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-04-13-new_limits_for_add_ons.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nulimit -n 1048576\n```\n\n----------------------------------------\n\nTITLE: Building Home Assistant Android App on macOS/Linux\nDESCRIPTION: Gradle command to build a debug version of the Home Assistant Android application on macOS or Linux systems.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/get_started.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew assembleDebug\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Fallback Bluetooth Availability Interval in Python\nDESCRIPTION: This example shows how to set and get a fallback availability interval for a Bluetooth device. This is used when the learned interval isn't available yet, providing a manual override for device-specific timing needs.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/bluetooth/api.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components import bluetooth\n\nbluetooth.async_set_fallback_availability_interval(hass, \"44:44:33:11:23:42\", 64.0)\n\nfallback_interval = bluetooth.async_get_fallback_availability_interval(hass, \"44:44:33:11:23:42\")\n```\n\n----------------------------------------\n\nTITLE: Registering Group State Registry Method Signature\nDESCRIPTION: Method signature for registering ON/OFF states in the group integration registry. Takes domain, set of ON states, default ON state, and OFF state as parameters.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-05-10-group-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    @callback\n    def on_off_states(\n        self, domain: str, on_states: set[str], default_on_state:str, off_state: str\n    ) -> None:\n        \"\"\"Register on and off states for the current domain.\"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Extending Dockerfile to Install Python for a Web Server\nDESCRIPTION: An enhanced Dockerfile that installs Python 3 for running an HTTP server. It sets the working directory to the add-on's persistent data directory, copies the run script, makes it executable, and sets it as the container's entrypoint.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG BUILD_FROM\nFROM $BUILD_FROM\n\n# Install requirements for add-on\nRUN \\\n  apk add --no-cache \\\n    python3\n\n# Python 3 HTTP Server serves the current working dir\n# So let's set it to our add-on persistent data directory.\nWORKDIR /data\n\n# Copy data for add-on\nCOPY run.sh /\nRUN chmod a+x /run.sh\n\nCMD [ \"/run.sh\" ]\n```\n\n----------------------------------------\n\nTITLE: Updating Weather Entity Properties in Home Assistant Custom Components\nDESCRIPTION: Custom component integrations should update their WeatherEntity implementations to use new 'native_' prefixed properties for precipitation, pressure, temperature, visibility, and wind speed units. This change enables automatic unit conversion based on user preferences.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-06-27-weather_entity_refactoring.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CustomWeatherEntity(WeatherEntity):\n    @property\n    def native_precipitation_unit(self) -> str:\n        # Implementation\n\n    @property\n    def native_pressure(self) -> float:\n        # Implementation\n\n    @property\n    def native_pressure_unit(self) -> str:\n        # Implementation\n\n    @property\n    def native_temperature(self) -> float:\n        # Implementation\n\n    @property\n    def native_temperature_unit(self) -> str:\n        # Implementation\n\n    @property\n    def native_visibility(self) -> float:\n        # Implementation\n\n    @property\n    def native_visibility_unit(self) -> str:\n        # Implementation\n\n    @property\n    def native_wind_speed(self) -> float:\n        # Implementation\n\n    @property\n    def native_wind_speed_unit(self) -> str:\n        # Implementation\n```\n\n----------------------------------------\n\nTITLE: Executing Home Assistant Translation Commands\nDESCRIPTION: Reference for new translation command syntax in Home Assistant Core. Commands have been unified under a single namespace for better organization and preparation for Translations 2.0 initiative.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-04-10-translation-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m script.translations develop\npython3 -m script.translations upload\npython3 -m script.translations download\npython3 -m script.translations clean\n```\n\n----------------------------------------\n\nTITLE: Generating Type Stub with MonkeyType\nDESCRIPTION: Command to generate a typing stub for a Home Assistant module based on MonkeyType analysis\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_typing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmonkeytype stub homeassistant.your_actual_module\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Server for Home Assistant Ingress\nDESCRIPTION: Basic Nginx server configuration that only accepts connections from the Home Assistant ingress IP (172.30.32.2) on port 8099. All other IP addresses are denied access.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/presentation.md#2025-04-21_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 8099;\n    allow  172.30.32.2;\n    deny   all;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Windows\nDESCRIPTION: Windows-specific command to install dependencies for the Home Assistant documentation using Yarn.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Revoking Authentication Token in Home Assistant\nDESCRIPTION: Code for revoking an authentication token when a user logs out from Home Assistant. This can be called via either the Android or iOS method, with an options object containing a callback method name.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-authentication.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.externalApp.revokeExternalAuth({\n  callback: \"externalAuthRevokeToken\"\n});\n// or\nwindow.webkit.messageHandlers.revokeExternalAuth.postMessage({\n  callback: \"externalAuthRevokeToken\"\n});\n```\n\n----------------------------------------\n\nTITLE: Processed Python Configuration Object in Home Assistant\nDESCRIPTION: This snippet shows how Home Assistant processes and transforms the YAML configuration into a Python dictionary. It demonstrates the removal of invalid configurations and the structuring of platform-specific configurations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/configuration_yaml_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"unrelated_component\": {\n        \"some_key\": \"some_value\"\n    },\n    \"switch\": [\n        {\n            \"platform\": \"example1\"\n        },\n        {\n            \"platform\": \"example2\",\n            \"some_config\": True\n        }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for Multiple Lights\nDESCRIPTION: Example JSON response from the API's get /lights endpoint, showing the data structure for a list of lights.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api_lib_data_models.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1234,\n    \"name\": \"Example Light\",\n    \"is_on\": true\n  },\n  {\n    \"id\": 5678,\n    \"name\": \"Example Light 2\",\n    \"is_on\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running a Python HTTP Server in Home Assistant Add-on\nDESCRIPTION: An updated run script that outputs a message and then starts a Python 3 HTTP server on port 8000. This makes the contents of the /data directory accessible via a web browser.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/with-contenv bashio\n\necho \"Hello world!\"\n\npython3 -m http.server 8000\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Functions and Constants in Home Assistant Core 2023.3\nDESCRIPTION: This snippet demonstrates the new import locations for JSON-related functions and constants after the refactoring in Home Assistant Core 2023.3. It includes functions for saving JSON, finding unserializable data, loading JSON, and constants for JSON encoding and decoding exceptions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-02-15-json.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers.json import save_json, find_paths_unserializable_data\nfrom homeassistant.util.json import json_loads, JSON_ENCODE_EXCEPTIONS, JSON_DECODE_EXCEPTIONS\n```\n\n----------------------------------------\n\nTITLE: Resetting HAOS Repository to Pristine State\nDESCRIPTION: Commands to reset the HAOS repository and its submodules to a clean state, removing all local modifications. This is useful for starting fresh or resolving conflicts.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit reset --hard\ngit submodule update --init --force\n```\n\n----------------------------------------\n\nTITLE: Simplified Event Subscription Using Lifecycle Functions\nDESCRIPTION: Alternative implementation using the async_on_remove lifecycle function to automatically handle event unsubscription. This approach eliminates the need to store the callback function in the entity.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-event-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    async def async_added_to_hass(self) -> None:\n        \"\"\"Subscribe to the events.\"\"\"\n        await super().async_added_to_hass()\n        self.async_on_remove(\n            self.client.events.subscribe(\"my_event\", self._handle_event)\n        )\n```\n\n----------------------------------------\n\nTITLE: Drive Schema\nDESCRIPTION: Defines the structure for storage drive information, including hardware details and filesystem associations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/supervisor/models.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| key            | type     | description                                                 |\n| -------------- | -------- | ----------------------------------------------------------- |\n| vendor         | string   | Drive vendor                                                |\n| model          | string   | Drive model                                                 |\n| serial         | string   | Drive serial number                                         |\n| id             | string   | Unique and persistent id for drive                          |\n| size           | int      | Size of the drive in bytes                                  |\n| time_detected  | datetime | Time drive was detected by system                           |\n| connection_bus | string   | Physical connection bus of the drive (USB, etc.)            |\n| seat           | string   | Identifier of seat drive is plugged into                    |\n| removable      | boolean  | Is the drive removable by the user?                         |\n| ejectable      | boolean  | Is the drive ejectable by the system?                       |\n| filesystems    | list     | A list of [filesystem partitions](#filesystem) on the drive |\n```\n\n----------------------------------------\n\nTITLE: File Path Reference for More Info Dialog Implementation\nDESCRIPTION: File paths that need to be modified to add a new more info dialog component for the camera domain. Shows the main configuration file, component file location, and import file paths.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/extending/adding-more-info-dialogs.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/common/const.ts\n/dialogs/more-info/controls/more-info-camera.js\n/dialogs/more-info/more-info-content.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Integration Setup Documentation in Markdown\nDESCRIPTION: Template for documenting integration prerequisites and setup process in Home Assistant. Includes steps for app installation, account creation, device setup, and enabling API access. Uses the standard config flow include for consistency.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-installation-instructions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Prerequisites\n\n1. Open the app store and install the **MyProduct** app.\n2. Create an account.\n3. Add a device to the app.\n4. Open the app and go to the **Settings** page.\n5. Select **Expose API**.\n\n{% include integrations/config_flow.md %}\n```\n\n----------------------------------------\n\nTITLE: Event Firing Success Response in Home Assistant WebSocket API\nDESCRIPTION: Server confirmation of a successfully fired event. Includes the context information for the event that was fired.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 24,\n  \"type\": \"result\",\n  \"success\": true,\n  \"result\": {\n    \"context\": {\n      \"id\": \"326ef27d19415c60c492fe330945f954\",\n      \"parent_id\": null,\n      \"user_id\": \"31ddb597e03147118cf8d2f8fbea5553\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby on macOS\nDESCRIPTION: Shell commands to install Ruby 3.1 via Homebrew and update PATH on macOS\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew install ruby@3.1 && export PATH=\"/usr/local/opt/ruby@3.1/bin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: MQTT Message Publishing with curl\nDESCRIPTION: Example of using curl to publish an MQTT message via the Home Assistant API services endpoint.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -d '{\"payload\": \"OFF\", \"topic\": \"home/fridge\", \"retain\": \"True\"}' \\\n  http://localhost:8123/api/services/mqtt/publish\n```\n\n----------------------------------------\n\nTITLE: Using Instance Checks with Unit Systems in Home Assistant\nDESCRIPTION: This snippet demonstrates the correct way to check for unit systems using instance checks in Home Assistant. It shows how to check if the configured unit system is METRIC_SYSTEM or US_CUSTOMARY_SYSTEM rather than using the deprecated is_metric or name properties.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-10-14-deprecate-unit-system.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif hass.config.units is METRIC_SYSTEM:\n    pass\n\nif hass.config.units is US_CUSTOMARY_SYSTEM:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Specifying Add-on Branch in Home Assistant URL\nDESCRIPTION: Shows how to specify a particular branch (e.g. 'next' or 'canary') when adding an add-on repository URL in Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/presentation.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/home-assistant/hassio-addons-example#next\n```\n\n----------------------------------------\n\nTITLE: Rendering Checklist Component in JSX\nDESCRIPTION: This code renders the Checklist component that displays the quality scale requirements for Home Assistant integrations. The component is used without props and is self-contained.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/checklist.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Checklist />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Fedora\nDESCRIPTION: Shell command to install required Ruby dependencies on Fedora systems\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf -y install gcc-c++ ruby ruby-devel rubygem-bundler rubygem-json && bundle\n```\n\n----------------------------------------\n\nTITLE: Formatting Home Assistant Code using Ruff\nDESCRIPTION: This command uses the Ruff tool to format the Home Assistant codebase according to the project's style guidelines.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_checklist.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nruff format\n```\n\n----------------------------------------\n\nTITLE: Using Shared Entity Name Translation in Home Assistant\nDESCRIPTION: Example showing how to reference a shared translation from the sensor integration for a temperature sensor entity using strings.json.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-03-27-entity_name_translations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity\": {\n    \"sensor\": {\n      \"temperature_sensor\": {\n        \"name\": \"[%key:component::sensor::entity_component::temperature::name%]\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HAOS Repository and Submodules\nDESCRIPTION: Commands to update the local HAOS repository and its submodules, ensuring the latest code is available for development.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit pull\ngit submodule update\n```\n\n----------------------------------------\n\nTITLE: Writing Descriptive Test Function in Kotlin using GIVEN-WHEN-THEN Pattern\nDESCRIPTION: Example demonstrating how to write a clear and descriptive test function name using the GIVEN-WHEN-THEN pattern in Kotlin. The test verifies the default dashboard display when a user opens the Home Assistant app.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/testing/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Test\nfun `Given a user with Home Assistant when they open the app then they see the default dashboard`() {\n    // Test implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Job Error Schema\nDESCRIPTION: Defines the structure for error reporting within jobs, including error type and human-readable messages.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/supervisor/models.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| key        | type    | description                                    |\n| ---------- | ------- | ---------------------------------------------- |\n| type       | string  | Type of error that occurred                    |\n| message    | string  | Human-readable description of what went wrong  |\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests with cURL\nDESCRIPTION: An example of making an authenticated HTTP request to the Home Assistant API using cURL. It demonstrates how to include the authorization bearer token in the request headers.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET \\\n  https://your.awesome.home/api/error/all \\\n  -H 'Authorization: Bearer ABCDEFGH'\n```\n\n----------------------------------------\n\nTITLE: Defining Store with TypedDict\nDESCRIPTION: Example of creating a Store instance using a TypedDict (EnergyPreferences) as the storage type.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-07-08-generic-store.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself._store = Store[EnergyPreferences](hass, STORAGE_VERSION, STORAGE_KEY)\n```\n\n----------------------------------------\n\nTITLE: Loading ES5 Adapter for Backwards Compatibility in JavaScript\nDESCRIPTION: A code snippet showing how to load the ES5 custom elements adapter for broader browser support. This is necessary when building panels that need to support older browsers.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/creating-custom-panels.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nwindow.loadES5Adapter().then(function() {\n  customElements.define('my-panel', MyCustomPanel)\n});\n```\n\n----------------------------------------\n\nTITLE: Weather Forecast JSON Response Example\nDESCRIPTION: Example JSON response structure for a weather forecast service showing forecast data with conditions, temperatures and precipitation probabilities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"weather.new_york_forecast\": {\n    \"forecast\": [\n        {\n            \"condition\": \"clear-night\",\n            \"datetime\": \"2024-04-22T20:45:55.173725-04:00\",\n            \"precipitation_probability\": 0,\n            \"temperature\": null,\n            \"templow\": 6.0\n        },\n        {\n            \"condition\": \"rainy\",\n            \"datetime\": \"2024-04-23T20:45:55.173756-04:00\",\n            \"precipitation_probability\": 60,\n            \"temperature\": 16.0,\n            \"templow\": 4.0\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with ClimateEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Climate are replaced with the ClimateEntityFeature enum. This enum provides equivalent functionality for supported features in climate entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.climate import ClimateEntityFeature\n\n# Use ClimateEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Old Response Format for entity/source Websocket Command in Home Assistant\nDESCRIPTION: Example of the previous, more detailed response format from the entity/source websocket command. It included custom_component, domain, source, and sometimes config_entry information for each entity.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-09-12-ws-entity-source-simplified.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"light.entity_1\": {\n    \"custom_component\": false,\n    \"domain\": \"template\",\n    \"source\": \"platform_config\",\n  },\n  \"switch.entity_2\": {\n    \"custom_component\": false,\n    \"config_entry\": \"<config_entry_id>\",\n    \"domain\": \"shelly\",\n    \"source\": \"config_entry\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Type Annotation for Config in Home Assistant Integration Setup\nDESCRIPTION: This code snippet demonstrates the proper way to specify type annotations in a custom integration's async_setup function, using ConfigType from homeassistant.helpers.typing instead of the core Config class.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-10-31-core-config-moved.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers.typing import ConfigType\n\nasync def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:\n    \"\"\"Set up the integration.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Boot Parameters in HAOS Meta File\nDESCRIPTION: Boot-related configuration variables including environment size, boot system type (efi/hybrid/mbr), SPL handling, bootloader selection, disk size, and kernel filename specifications.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/board-metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nBOOT_ENV_SIZE:\nBOOT_SYS:\nBOOT_SPL:\nBOOTLOADER:\nDISK_SIZE:\nKERNEL_FILE:\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements for Home Assistant in Python\nDESCRIPTION: This command generates the requirements_all.txt file for Home Assistant, which lists all the project dependencies.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_checklist.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m script.gen_requirements_all\n```\n\n----------------------------------------\n\nTITLE: Console Debugging Command\nDESCRIPTION: Shows how to access the hass object in browser developer tools for debugging purposes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/data.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$0.hass\n```\n\n----------------------------------------\n\nTITLE: Defining Supervisor Configuration in HAOS Meta File\nDESCRIPTION: Supervisor-specific variables defining the machine type and architecture. Includes comprehensive lists of supported machines and architectures for Home Assistant OS deployment.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/board-metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nSUPERVISOR_MACHINE:\nSUPERVISOR_ARCH:\n```\n\n----------------------------------------\n\nTITLE: Visualizing HAOS Partition Layout Structure\nDESCRIPTION: ASCII diagram showing the physical layout of partitions in HAOS, including Boot, Kernel A/B, System A/B, Bootstate, Overlay, and Data partitions. This represents the standard partition structure used for system operation and updates.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/partition.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-------------------------\n|       Boot            |\n-------------------------\n|       Kernel A        |\n-------------------------\n|       System A        |\n|                       |\n-------------------------\n|       Kernel B        |\n-------------------------\n|       System B        |\n|                       |\n-------------------------\n|       Bootstate       |\n-------------------------\n|       Overlay         |\n|                       |\n...\n\n-------------------------\n|       Data            |\n|                       |\n|                       |\n-------------------------\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supervisor Token from Docker\nDESCRIPTION: This command retrieves the full-privilege Supervisor token from the Home Assistant Docker container. It should be run on the host system where Home Assistant is running.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/supervisor/development.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect homeassistant | grep SUPERVISOR_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Writing File Headers in Python for Home Assistant\nDESCRIPTION: File headers should contain a docstring that concisely describes the purpose of the file. This example demonstrates the recommended format for a file header docstring.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_guidelines.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Support for MQTT lights.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Layout Properties in Card Configuration\nDESCRIPTION: YAML example demonstrating how to define layout properties for a card, including custom positioning information such as key, width, and height that can be utilized by custom view layouts.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-09-30-customViewChanges.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- type: weather-card\n  layout:\n    key: 1234\n    width: 54px\n  entity: weather.my_weather\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for View Strategy\nDESCRIPTION: YAML configuration that applies a custom view strategy to a specific view in a Home Assistant dashboard. This configuration is used within the views array of a dashboard configuration.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-strategy.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nviews:\n- strategy:\n    type: custom:my-demo\n```\n\n----------------------------------------\n\nTITLE: Updating snapshot tests with pytest\nDESCRIPTION: Command to run pytest with the snapshot-update flag to create or update snapshot test references.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_testing.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npytest tests/components/example/test_sensor.py --snapshot-update\n```\n\n----------------------------------------\n\nTITLE: Defining Sensor Entity with Translation Key in Python\nDESCRIPTION: This snippet shows how to create a sensor entity class with a translation key for icon representation. It sets the 'has_entity_name' attribute to True and defines a translation key for tree pollen.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/icon-translations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySensor(SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n\n    _attr_has_entity_name = True\n    _attr_translation_key = \"tree_pollen\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Annotation for Config in Home Assistant Integration Setup\nDESCRIPTION: This code snippet shows an incorrect way to specify type annotations in a custom integration's async_setup function. It incorrectly imports Config from homeassistant.core instead of using the proper ConfigType.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-10-31-core-config-moved.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.core import Config\n\nasync def async_setup(hass: HomeAssistant, config: Config) -> bool:\n    \"\"\"Set up the integration.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Specific HAOS Package\nDESCRIPTION: Command to force rebuilding a specific package (in this case, the Linux kernel) by removing its build directory. This is useful when making changes to a particular package.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/operating-system/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf output/build/linux-custom/\n```\n\n----------------------------------------\n\nTITLE: Creating pull requests for Home Assistant frontend\nDESCRIPTION: Add a fork remote and push changes for creating a pull request to the main repository.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/development.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add fork <github URL to your fork>\ngit add -A\ngit commit -m \"Added new feature X\"\ngit push -u fork HEAD\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Server\nDESCRIPTION: Command to start the local documentation server using the provided script. This will make the documentation available at localhost:3000.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ script/server\n```\n\n----------------------------------------\n\nTITLE: Refactoring DataUpdateCoordinator without initialization checks\nDESCRIPTION: This example shows how to refactor existing code that uses initialization checks in _async_update_data to use the new _async_setup method instead, simplifying the update logic.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-08-05-coordinator_async_setup.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def _async_update_data(self) -> ...:\n    if not self.something:\n        self.something = self.client.fetch()\n    return self.client.fetch_data()\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def _async_setup(self) -> None:\n    self.something = self.client.fetch()\n\nasync def _async_update_data(self) -> ...:\n    return self.client.fetch_data()\n```\n\n----------------------------------------\n\nTITLE: Enabling Encryption in Home Assistant WebSocket API\nDESCRIPTION: This endpoint enables encryption support for an existing registration. It requires Home Assistant 0.106 or later. Potential errors include 'encryption_already_enabled' and 'encryption_not_available'.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"enable_encryption\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Device Condition Configuration in Python\nDESCRIPTION: Function for validating device condition configuration before it's applied. Used when dynamic validation beyond static CONDITION_SCHEMA is needed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_condition.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_validate_condition_config(hass: HomeAssistant, config: ConfigType) -> ConfigType:\n    \"\"\"Validate config.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing My Links in Home Assistant Documentation (Markdown)\nDESCRIPTION: Shows examples of creating 'My links' in Home Assistant documentation. These links direct users to specific pages within their own Home Assistant installation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- {% my areas title=\"**Settings** > **Areas, labels & zones**\" %}\n- {% my automations title=\"**Settings** > **Automations & scenes**\" %}\n- {% my backup title=\"**Settings** > **System** > **Backups**\" %}\n- {% my general title=\"**Settings** > **System** > **General**\" %}\n- {% my logs title=\"**Settings** > **System** > **Logs**\" %}\n- {% my network title=\"**Settings** > **System** > **Network**\" %}\n- {% my profile title=\"**User profile**\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuration YAML Entry for Hello Action\nDESCRIPTION: YAML configuration entry required to load the custom hello action integration in Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_services.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# configuration.yaml entry\nhello_action:\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Server on Windows\nDESCRIPTION: Windows-specific command to start the local documentation server using Yarn. This will make the documentation available at localhost:3000.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Documenting Automation Examples in Markdown\nDESCRIPTION: Shows the recommended format for documenting automation examples in Home Assistant integration documentation. The example demonstrates how to present a blueprint for controlling LED behavior based on sun position.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Examples\n\n### Turning off the LEDs during the night\nThe status LEDs on the device can be quite bright.\nTo tackle this, you can use this blueprint to easily automate the LEDs turning off when the sun goes down.\n\nlink to blueprint\n```\n\n----------------------------------------\n\nTITLE: Discourse Comments Component Import - React/JSX\nDESCRIPTION: Import statement for Discourse comments component used to enable community discussion functionality on the page\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2019-10-05-simple-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DiscussionBox from '../static/js/discourse_discussion.jsx'\n```\n\n----------------------------------------\n\nTITLE: Example Entity Configuration - Legacy Naming Convention\nDESCRIPTION: Shows the previous naming structure for devices and entities in Home Assistant for comparison, illustrating why the change was needed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-07-10-entity_naming.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- Device: Dishwasher\n  - Switch: Dishwasher Switch / Dishwasher Switch / switch.dishwasher_switch\n  - Sensor: Dishwasher Power usage / Dishwasher Power usage / sensor.dishwasher_power_usage\n- Device: Laundry machine\n  - Switch: Laundry machine Switch / Laundry machine Switch / switch.laundry_machine_switch\n  - Sensor: Laundry machine Power usage / Laundry machine Power usage / sensor.laundry_machine_power_usage\n```\n\n----------------------------------------\n\nTITLE: Including Configuration Flow Template in Home Assistant Documentation (Markdown)\nDESCRIPTION: Shows how to include the predefined configuration flow text block in integration documentation.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{% include integrations/config_flow.md %}\n```\n\n----------------------------------------\n\nTITLE: Using Local Custom Panel URL in Home Assistant\nDESCRIPTION: Example of how to reference a locally hosted custom panel in Home Assistant. This approach doesn't require user approval for loading the panel.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2018-06-01-071-custom-panels.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/local/your-panel.js\n```\n\n----------------------------------------\n\nTITLE: Renaming Issue Titles with GitHub Command for Home Assistant Code Owners\nDESCRIPTION: This command enables code owners to change the title of an issue when there is only one integration labeled. The new title is specified after the command.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-10-21-code-owner-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@home-assistant rename New Title\n```\n\n----------------------------------------\n\nTITLE: Loading more-info controls for a specific domain in JavaScript\nDESCRIPTION: This code snippet demonstrates how to lazy-load the more-info controls for a specific domain (in this case, 'light') using the loadCardHelpers function. This allows custom card developers to access necessary controls without loading all elements upfront.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-10-02-lazyMoreInfo.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst helpers = await loadCardHelpers();\nhelpers.importMoreInfoControl(\"light\");\n```\n\n----------------------------------------\n\nTITLE: Migrating Volumetric Flux Constants in Home Assistant\nDESCRIPTION: Shows the mapping between deprecated constants and their new UnitOfVolumetricFlux enum replacements for handling precipitation intensity and speed measurements. This change affects how volumetric flux is represented in Home Assistant Core 2022.11 and later versions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-10-25-new-precipitation-intensity-units.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPRECIPITATION_INCHES_PER_HOUR -> UnitOfVolumetricFlux.INCHES_PER_HOUR\nPRECIPITATION_MILLIMETERS_PER_HOUR -> UnitOfVolumetricFlux.MILLIMETERS_PER_HOUR\nSPEED_INCHES_PER_DAY -> UnitOfVolumetricFlux.INCHES_PER_DAY\nSPEED_INCHES_PER_HOUR -> UnitOfVolumetricFlux.INCHES_PER_HOUR\nSPEED_MILLIMETERS_PER_DAY -> UnitOfVolumetricFlux.MILLIMETERS_PER_DAY\n```\n\n----------------------------------------\n\nTITLE: Creating Redirects with Text Format\nDESCRIPTION: This snippet shows how to create a redirect when renaming or moving a documentation page. It demonstrates the format for the _redirects file, which helps users find content that has been relocated.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/standards.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n---\n...\n/getting-started/scripts /docs/scripts\n---\n```\n\n----------------------------------------\n\nTITLE: Reauth Configuration Translation Strings\nDESCRIPTION: JSON configuration for translation strings used in the reauth confirmation and success dialogs. Includes placeholders for integration-specific messaging.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_config_flow_handler.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"step\": {\n      \"reauth_confirm\": {\n        \"title\": \"[%key:common::config_flow::title::reauth%]\",\n        \"description\": \"The Example integration needs to re-authenticate your account\"\n      }\n    },\n    \"abort\": {\n      \"reauth_successful\": \"[%key:common::config_flow::abort::reauth_successful%]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Device Trigger Schema in Python\nDESCRIPTION: Example of defining a trigger schema with supported trigger types using voluptuous\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_trigger.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.const import (\n    CONF_ENTITY_ID,\n    CONF_TYPE,\n)\n\nTRIGGER_TYPES = {\"water_detected\", \"noise_detected\"}\n\nTRIGGER_SCHEMA = TRIGGER_BASE_SCHEMA.extend(\n    {\n        vol.Required(CONF_TYPE): vol.In(TRIGGER_TYPES),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing SUPPORT_* constants with WaterHeaterEntityFeature enum in Python\nDESCRIPTION: Deprecated SUPPORT_* constants for Water Heater are replaced with the WaterHeaterEntityFeature enum. This enum provides equivalent functionality for supported features in water heater entities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-04-02-support-constants-deprecation.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.components.water_heater import WaterHeaterEntityFeature\n\n# Use WaterHeaterEntityFeature instead of SUPPORT_* constants\n```\n\n----------------------------------------\n\nTITLE: Implementing Glossary Term References in Home Assistant Documentation (Markdown)\nDESCRIPTION: Examples of how to reference glossary terms in Home Assistant documentation. These references create tooltips that explain Home Assistant concepts and terms.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% term integration %}\n{% term entity %}\n{% term \"configuration.yaml\" %}\n{% term \"Home Assistant Operating System\" %}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Home Assistant Documentation\nDESCRIPTION: Command to set up the development environment for Home Assistant documentation using the setup script. This installs docusaurus and other required dependencies.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ script/setup\n```\n\n----------------------------------------\n\nTITLE: Accessing hass in Entity Classes\nDESCRIPTION: Demonstrates how to access the hass object within an entity class after it has been added via the add_entities callback.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_hass.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.hass\n```\n\n----------------------------------------\n\nTITLE: Platform Setup Function Signature in Home Assistant\nDESCRIPTION: Shows the function signature for setting up a platform in Home Assistant, demonstrating where the hass object is passed along with config and entity addition callback.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_hass.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsetup_platform(hass, config, add_entities, discovery_info=None)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync_setup_platform(hass, config, async_add_entities, discovery_info=None)\n```\n\n----------------------------------------\n\nTITLE: External Configuration Response Payload in TypeScript\nDESCRIPTION: This snippet defines the expected response payload structure for the 'config/get' message type. It includes boolean flags for settings screen availability and tag writing capability.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  hasSettingsScreen: boolean;\n  canWriteTag: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Card Layout Configuration with view_layout\nDESCRIPTION: YAML example showing how to store custom layout data for a card using the view_layout property, which can be used by custom views to position or size cards as needed.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-view.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- type: weather-card\n  view_layout:\n    key: 1234\n    width: 54px\n  entity: weather.my_weather\n```\n\n----------------------------------------\n\nTITLE: Using a Custom View in Lovelace YAML Configuration\nDESCRIPTION: YAML configuration example showing how a user would implement a custom view layout in their Lovelace configuration using the custom:my-new-view type.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-09-30-customViewChanges.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- title: Home View\n  type: custom:my-new-view\n  badges: [...]\n  cards: [...]\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration Variables for YAML in Home Assistant Documentation (Markdown)\nDESCRIPTION: Example of using the configuration block to document configuration options for YAML-based integrations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n{% configuration %}\nHost:\n    description: \"The IP address of your bridge. You can find it in your router or in the Integration app under **Bridge Settings** > **Local API**.\"\n    required: false\n    type: string\nLocal access token:\n    description: \"The local access token for your bridge. You can find it in the Integration app under **Bridge Settings** > **Local API**.\"\n    required: false\n    type: string\n{% endconfiguration %}\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Panel from JavaScript URL in Home Assistant\nDESCRIPTION: New feature allowing custom panels to be imported from a JavaScript URL. This is the preferred method for distributing panels, with external panels requiring user approval. Local panels can be hosted without approval by placing them in the config directory.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2018-06-01-071-custom-panels.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<config dir>/www/your-panel.js\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method for Importing LitElement\nDESCRIPTION: JavaScript code showing the deprecated way of retrieving the LitElement prototype using the hui-view element, which will no longer work after the breaking change.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-09-30-customViewChanges.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst LitElement = Object.getPrototypeOf(customElements.get(\"hui-view\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dockerfile for Nginx-based Ingress Add-on\nDESCRIPTION: Dockerfile configuration that installs Nginx, copies the ingress configuration, and starts the Nginx server with debug logging. Uses multi-stage build with BUILD_FROM argument.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/presentation.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG BUILD_FROM\nFROM $BUILD_FROM\n\n#Add nginx and create the run folder for nginx.\nRUN \\\n  apk --no-cache add \\\n    nginx \\\n  \\\n  && mkdir -p /run/nginx\n\n#Copy our conf into the nginx http.d folder.\nCOPY ingress.conf /etc/nginx/http.d/\n\n#Launch nginx with debug options.\nCMD [ \"nginx\",\"-g\",\"daemon off;error_log /dev/stdout debug;\" ]\n```\n\n----------------------------------------\n\nTITLE: Migrating from Legacy Unit Conversion Utilities to Static Classes in Home Assistant\nDESCRIPTION: Lists the deprecated utility modules and their corresponding replacement static classes from homeassistant/util/unit_conversion. The change affects distance, pressure, speed, temperature, and volume conversion utilities starting from Home Assistant Core 2022.10.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-09-28-deprecate-conversion-utilities.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Deprecated modules:\nhomeassistant/util/distance\nhomeassistant/util/pressure\nhomeassistant/util/speed\nhomeassistant/util/temperature\nhomeassistant/util/volume\n\n# New static classes to use:\nfrom homeassistant.util.unit_conversion import DistanceConverter\nfrom homeassistant.util.unit_conversion import PressureConverter\nfrom homeassistant.util.unit_conversion import SpeedConverter\nfrom homeassistant.util.unit_conversion import TemperatureConverter\nfrom homeassistant.util.unit_conversion import VolumeConverter\n```\n\n----------------------------------------\n\nTITLE: Release Pipeline Trigger Configuration\nDESCRIPTION: YAML configuration showing how Home Assistant's release pipeline is triggered based on git tags. This ensures releases are only built when properly tagged and by authorized release managers.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2019-07-19-building-all-the-things.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n  tags:\n    include:\n      - '*'\n```\n\n----------------------------------------\n\nTITLE: Configuring Hello State with Text in YAML\nDESCRIPTION: YAML configuration showing how to set custom text for the Hello State component.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_states.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhello_state:\\n  text: 'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Git Repository\nDESCRIPTION: Command to commit staged changes with a descriptive message following the project's commit message conventions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/development_submitting.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Add some feature\"\n```\n\n----------------------------------------\n\nTITLE: Importing Checklist Component in JSX\nDESCRIPTION: This code imports a Checklist component from the _includes directory, which displays the quality scale checklist for Home Assistant integrations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/checklist.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checklist from './_includes/checklist.jsx'\n```\n\n----------------------------------------\n\nTITLE: Migrating Home Assistant Typing Aliases\nDESCRIPTION: Replace deprecated typing aliases with direct core class references for improved type hinting.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-04-08-deprecated-backports-and-typing-aliases.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Deprecated:\nfrom homeassistant.helpers.typing import ContextType, EventType, HomeAssistantType, ServiceCallType\n\n# New usage:\nfrom homeassistant.core import Context, Event, HomeAssistant, ServiceCall\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Dashboard Strategy\nDESCRIPTION: YAML configuration that applies a custom dashboard strategy to a Home Assistant dashboard. This simple configuration references the custom strategy by its type name.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/custom-strategy.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\n  type: custom:my-demo\n```\n\n----------------------------------------\n\nTITLE: Adding Images in Home Assistant Documentation (Markdown)\nDESCRIPTION: Example of including images in documentation using Markdown syntax, useful for illustrating steps or concepts.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n1. To adjust the light temperature and brightness, move the sliders:\n    ![Screenshot of tile cards with features](/images/dashboards/features/screenshot-tile-feature-grid.png)\n2. Then do this ...\n```\n\n----------------------------------------\n\nTITLE: Legacy Icon Translation Schema Format\nDESCRIPTION: Shows the deprecated format for service icons that will be supported for one year during the transition period. This format uses a direct mapping between service names and icons.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-08-27-changed-icon-translations-schema.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"services\": {\n    \"test_service_1\": \"mdi:flask\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Streaming Camera in Home Assistant WebSocket API\nDESCRIPTION: This endpoint retrieves path information for streaming a camera. It requires Home Assistant 0.112 or later. The 'camera_entity_id' parameter specifies the camera entity to stream.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stream_camera\",\n  \"data\": {\n    \"camera_entity_id\": \"camera.name_here\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hls_path\": \"/api/hls/…/playlist.m3u8\",\n  \"mjpeg_path\": \"/api/camera_proxy_stream/…\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Redirect URI to HTML for Native Apps\nDESCRIPTION: This HTML link tag should be added to your application's website to whitelist a custom redirect URI for native apps that can't use web-based redirects. Home Assistant will scan the first 10kB of the site for these link tags.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel='redirect_uri' href='hass://auth'>\n```\n\n----------------------------------------\n\nTITLE: Effective Time Handling with Strong Types in Kotlin\nDESCRIPTION: A recommended approach for handling time using strong types (Instant). This provides better type safety and makes the code more readable and maintainable by making the time units explicit.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/best_practices.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval THRESHOLD = Instant.ofEpochSecond(60)\n\nfun main() {\n    val now = Instant.now()\n\n    if (now > THRESHOLD) {\n        // Do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running SARIF Report Merging Script\nDESCRIPTION: Instructions for merging multiple SARIF reports into a single file using the project's Python script, making them compatible with GitHub Actions.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/tips/sarif_reports.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 .github/scripts/merge_sarif.py\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom View Layout with LitElement\nDESCRIPTION: Example JavaScript class extending LitElement to create a custom view layout. This basic implementation shows how to handle the cards property and render them in a simple layout with div wrappers.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-09-30-customViewChanges.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyNewView extends LitElement {\n  setConfig(_config) {}\n\n  static get properties() {\n    return { \n      cards: {type: Array, attribute: false}\n    };\n  }\n\n  render() {\n    if(!this.cards) {\n      return html``;\n    }\n    return html`${this.cards.map((card) => html`<div>${card}</div>`)}`;  \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Result Message Interfaces in TypeScript\nDESCRIPTION: These interfaces define the structure for success and error result messages in the external bus communication. They include the message ID, type, success status, and relevant result or error information.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/external-bus.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SuccessResult {\n  id: number;\n  type: \"result\";\n  success: true;\n  result: unknown;\n}\n\ninterface ErrorResult {\n  id: number;\n  type: \"result\";\n  success: false;\n  error: {\n    code: string;\n    message: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Intent Matching Tests in YAML for Home Assistant\nDESCRIPTION: This YAML snippet demonstrates how to structure a test file for a specific intent. It includes the language specification, test cases with input sentences, and expected match data including intent name and slots.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/voice/intent-recognition/test-syntax.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: \"en\"\ntests:\n  - sentences:\n      - \"turn on the ceiling fan\"\n      - \"turn the ceiling fan on\"\n    intent:\n      name: \"HassTurnOn\"\n      slots:\n        name: \"fan.ceiling\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hello State Component in YAML\nDESCRIPTION: Basic YAML configuration for the Hello State component in the configuration.yaml file.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_states.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhello_state:\n```\n\n----------------------------------------\n\nTITLE: Defining Intent Responses in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define an intent with a response key in the intents repository. The response key ('cover') links to a specific response template defined elsewhere.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2023-02-03-responses.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: en\nintents:\n  HassTurnOn:\n    data:\n      - sentences:\n          - \"open {name}\"\n        response: cover\n```\n\n----------------------------------------\n\nTITLE: Testing Full Config Flow in Python for Home Assistant Integration\nDESCRIPTION: This code snippet demonstrates how to implement a full test for a config flow in a Home Assistant integration. It covers the initial user step and the creation of a config entry, asserting the expected results at each stage.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/config-flow-test-coverage.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def test_full_flow(\n    hass: HomeAssistant,\n    mock_my_client: AsyncMock,\n    mock_setup_entry: AsyncMock,\n) -> None:\n    \"\"\"Test full flow.\"\"\"\n    result = await hass.config_entries.flow.async_init(\n        DOMAIN,\n        context={\"source\": SOURCE_USER},\n    )\n    assert result[\"type\"] is FlowResultType.FORM\n    assert result[\"step_id\"] == \"user\"\n\n    result = await hass.config_entries.flow.async_configure(\n        result[\"flow_id\"],\n        {CONF_HOST: \"10.0.0.131\"},\n    )\n    assert result[\"type\"] is FlowResultType.CREATE_ENTRY\n    assert result[\"title\"] == \"My integration\"\n    assert result[\"data\"] == {\n        CONF_HOST: \"10.0.0.131\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Error Response in Home Assistant WebSocket API\nDESCRIPTION: Example of an error response with code and message details when a command fails.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\": 12,\n   \"type\":\"result\",\n   \"success\": false,\n   \"error\": {\n      \"code\": \"invalid_format\",\n      \"message\": \"Message incorrectly formatted: expected str for dictionary value @ data['event_type']. Got 100\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Data Update Methods in Markdown\nDESCRIPTION: An example showing how to document data update mechanisms for an integration, including default polling intervals and push capabilities. The example explains fallback mechanisms and different device capabilities.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-data-update.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Data updates\n\nMy integration fetches data from the device every 5 minutes by default.\nNewer devices (the ones running MyOS) have the possibility to {% term push %} data.\nAt the start of the integration we try to enable that, and if it fails we fall back to {% term polling %}.\n```\n\n----------------------------------------\n\nTITLE: Creating Abbreviation Tooltips in Home Assistant Documentation (Markdown)\nDESCRIPTION: Examples of creating tooltips for acronyms and abbreviations in documentation, allowing readers to see the full terms.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/integration-docs-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<abbr title=\"Audio & video\">A/V</abbr>,\n<abbr title=\"current transformers\">CT</abbr>,\n<abbr title=\"Dutch smart meter requirement\">DSMR</abbr>,\n<abbr title=\"embedded MultiMediaCard\">eMMC</abbr>,\n<abbr title=\"flash video\">FLV</abbr>,\n<abbr title=\"Large Language Models\">LLMs</abbr>,\n<abbr title=\"Model Context Protocol\">MCP</abbr>,\n<abbr title=\"pan, tilt, and zoom\">PTZ</abbr>,\n<abbr title=\"real-time messaging protocol\">RTMP</abbr>,\n<abbr title=\"real-time streaming protocol\">RTSP</abbr>,\nor <abbr title=\"USB-On-The-Go\">USB-OTG</abbr>.\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscription in Home Assistant Sensor Entity\nDESCRIPTION: Example implementation of a sensor entity that properly subscribes to events using lifecycle methods. Shows how to manage event subscriptions using async_added_to_hass for subscription and async_will_remove_from_hass for cleanup.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/entity-event-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySensor(SensorEntity):\n    \"\"\"Representation of a sensor.\"\"\"\n    \n    unsubscribe: Callable[[], None] | None = None\n\n    def __init__(self, client: MyClient) -> None:\n        \"\"\"Initialize the sensor.\"\"\"\n        self.client = client\n    \n    async def async_added_to_hass(self) -> None:\n        \"\"\"Subscribe to the events.\"\"\"\n        await super().async_added_to_hass()\n        self.unsubscribe = self.client.events.subscribe(\"my_event\", self._handle_event)\n    \n    async def async_will_remove_from_hass(self) -> None:\n        \"\"\"Unsubscribe from the events.\"\"\"\n        if self.unsubscribe:\n            self.unsubscribe()\n        await super().async_will_remove_from_hass()\n    \n    async def _handle_event(self, event: Event) -> None:\n        \"\"\"Handle the event.\"\"\"\n        ...\n        self.async_write_ha_state()\n```\n\n----------------------------------------\n\nTITLE: Event Unsubscription Success Response in Home Assistant WebSocket API\nDESCRIPTION: Server confirmation of a successful event unsubscription. The client will no longer receive events for the unsubscribed topics.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 19,\n  \"type\": \"result\",\n  \"success\": true,\n  \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Warning Note Template\nDESCRIPTION: Example of HTML usage for creating warning note boxes in documentation, with both simple text and markdown formatting examples.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/create-page.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class='note warning'>\n  You need to enable telnet on your router.\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class='note warning'>\n  \n  You need to enable [**telnet**](https://en.wikipedia.org/wiki/Telnet) on your router.\n  \n</div>\n```\n\n----------------------------------------\n\nTITLE: Intent Handling with curl\nDESCRIPTION: Example of using curl to handle an intent via the Home Assistant API intent endpoint.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{ \"name\": \"SetTimer\", \"data\": { \"seconds\": \"30\" } }' \\\n  http://localhost:8123/api/intent/handle\n```\n\n----------------------------------------\n\nTITLE: Discourse Comments Implementation - React/JSX\nDESCRIPTION: Implementation of the Discourse comments component with configuration properties for the discussion URL and embed URL\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2019-10-05-simple-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DiscussionBox discourseUrl=\"https://community.home-assistant.io/\"\n      discourseEmbedUrl=\"https://developers.home-assistant.io/blog/2019/10/05/simple-mode.html\" />\n```\n\n----------------------------------------\n\nTITLE: Creative Commons Disclaimer and Contact Information in Markdown\nDESCRIPTION: A Markdown block containing Creative Commons' disclaimer regarding its relationship to public licenses, trademark usage restrictions, and contact information.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/LICENSE.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \"Licensor.\" Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at [creativecommons.org/policies](http://creativecommons.org/policies), Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\n\nCreative Commons may be contacted at creativecommons.org\n```\n\n----------------------------------------\n\nTITLE: Querying Logbook with Parameters - Shell Commands\nDESCRIPTION: Example curl commands for querying logbook entries with different parameters and date ranges\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  http://localhost:8123/api/logbook/2016-12-29T00:00:00+02:00\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  \"http://localhost:8123/api/logbook/2016-12-29T00:00:00+02:00?end_time=2099-12-31T00%3A00%3A00%2B02%3A00&entity=sensor.temperature\"\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n  -H \"Authorization: Bearer TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  \"http://localhost:8123/api/logbook/2016-12-29T00:00:00+02:00?end_time=2099-12-31T00%3A00%3A00%2B02%3A00\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Integration Functionality by Device in Markdown\nDESCRIPTION: This example demonstrates how to document integration functionality organized by device type. It lists available sensors and numbers for a specific product with descriptions and configuration options.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-supported-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Supported functionality\n\n### XYZ productname Air Purifier, Air Humidifier and Standing Fan\n\n#### Sensors\n\n- **Filter lifetime remaining**: The remaining life of the filter in number of years. Enabled by default.\n- **Purify volume**: The volume of purified air in cubic meters. Disabled by default.\n\n#### Numbers\n\n- **Favorite level**: Set the favorite level. Possible values are 0 to 10. `0` means it is turned off.)\n- **Volume**: Set the volume. In percent. `0%` means it is off.\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Coordinator for Home Assistant Integration\nDESCRIPTION: A DataUpdateCoordinator class implementation that handles fetching device data from a service. The coordinator manages periodic updates and error handling for device data retrieval.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/dynamic-devices.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCoordinator(DataUpdateCoordinator[dict[str, MyDevice]]):\n    \"\"\"Class to manage fetching data.\"\"\"\n\n    def __init__(self, hass: HomeAssistant, client: MyClient) -> None:\n        \"\"\"Initialize coordinator.\"\"\"\n        super().__init__(\n            hass,\n            logger=LOGGER,\n            name=DOMAIN,\n            update_interval=timedelta(minutes=1),\n        )\n        self.client = client\n\n    async def _async_update_data(self) -> dict[str, MyDevice]:\n        try:\n            return await self.client.get_data()\n        except MyException as ex:\n            raise UpdateFailed(f\"The service is unavailable: {ex}\")\n```\n\n----------------------------------------\n\nTITLE: Error Log Sample Format - Text\nDESCRIPTION: Example error log output format showing timestamp and error messages\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/rest.md#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n15-12-20 11:02:50 homeassistant.components.recorder: Found unfinished sessions\n15-12-20 11:03:03 netdisco.ssdp: Error fetching description at http://192.168.1.1:8200/rootDesc.xml\n15-12-20 11:04:36 homeassistant.components.alexa: Received unknown intent HelpIntent\n```\n\n----------------------------------------\n\nTITLE: Implementing Options Flow Handler in Home Assistant\nDESCRIPTION: Example implementation of an Options Flow Handler with schema validation. Shows how to manage options through a form interface and handle user input for configuration settings.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/config_entries_options_flow_handler.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nOPTIONS_SCHEMA=vol.Schema(\n    {\n        vol.Required(\"show_things\"): bool,\n    }\n)\nclass OptionsFlowHandler(config_entries.OptionsFlow):\n    async def async_step_init(\n        self, user_input: dict[str, Any] | None = None\n    ) -> FlowResult:\n        \"\"\"Manage the options.\"\"\"\n        if user_input is not None:\n            return self.async_create_entry(data=user_input)\n\n        return self.async_show_form(\n            step_id=\"init\",\n            data_schema=self.add_suggested_values_to_schema(\n                OPTIONS_SCHEMA, self.config_entry.options\n            ),\n        )\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Entity Categories Configuration\nDESCRIPTION: Demonstrates how entity categories can be classified as either 'config' for changeable device configurations or 'diagnostic' for read-only parameters. This categorization affects how entities are displayed and handled in the system, including service calls and third-party integrations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2021-10-26-config-entity.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nentity_category: config   # For changeable configuration entities\\nentity_category: diagnostic   # For read-only diagnostic entities\n```\n\n----------------------------------------\n\nTITLE: Render Template Webhook in JSON\nDESCRIPTION: JSON structure for rendering templates in Home Assistant. This webhook allows mobile apps to send one or more templates with optional variables to be processed by Home Assistant's template engine and receive the rendered results.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/native-app-integration/sending-data.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"render_template\",\n  \"data\": {\n    \"my_tpl\": {\n      \"template\": \"Hello {{ name }}, you are {{ states('person.paulus') }}.\",\n      \"variables\": {\n        \"name\": \"Paulus\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Entity Configuration - New Naming Convention\nDESCRIPTION: Demonstrates the new recommended naming structure for devices and entities in Home Assistant, showing how device names, entity names, friendly names, and entity IDs are formatted.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2022-07-10-entity_naming.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- Device: Dishwasher\n  - Switch: None / Dishwasher / switch.dishwasher\n  - Sensor: Power usage / Dishwasher Power usage / sensor.dishwasher_power_usage\n- Device: Laundry machine\n  - Switch: None / Laundry machine / switch.laundry_machine\n  - Sensor: Power usage / Laundry machine Power usage / sensor.laundry_machine_power_usage\n```\n\n----------------------------------------\n\nTITLE: Creating Independent Asynchronous Tasks in Home Assistant\nDESCRIPTION: Demonstrates how to spawn an independent task that runs in parallel with the current execution context using async_create_task, which schedules the coroutine to run on the event loop without waiting for it to complete.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/asyncio_working_with_async.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nhass.async_create_task(async_say_hello(hass, target))\n```\n\n----------------------------------------\n\nTITLE: Basic Integration Directory Structure Example\nDESCRIPTION: Example showing the minimum required files for a Home Assistant integration, consisting of manifest.json and __init__.py within a domain-specific folder.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_integration_file_structure.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- `manifest.json`: The manifest file describes the integration and its dependencies.\n- `__init__.py`: The component file. If the integration only offers a platform, you can keep this file limited to a docstring introducing the integration `\"\"\"The Mobile App integration.\"\"\"`.\n```\n\n----------------------------------------\n\nTITLE: Documenting Known Limitations in Markdown for Home Assistant Integration\nDESCRIPTION: An example showing how to properly document known limitations of a Home Assistant integration using Markdown. This demonstrates the preferred format for communicating permanent limitations (as opposed to bugs) to users.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/integration-quality-scale/rules/docs-known-limitations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Known limitations\n\nThe integration does not provide the ability to reboot, which can instead be done via the manufacturer's app.\n```\n\n----------------------------------------\n\nTITLE: Adding Requirements to manifest.json in Python\nDESCRIPTION: Demonstrates how to properly add pinned requirements to the manifest.json file for a Home Assistant component.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/creating_component_code_review.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"requirements\": ['phue==0.8.1']\n```\n\n----------------------------------------\n\nTITLE: Configuring Lovelace Resources in YAML\nDESCRIPTION: YAML configuration for registering external JavaScript modules as resources in the Home Assistant Lovelace interface. Resources are specified with a URL path pointing to the local file and its type.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/frontend/custom-ui/registering-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - url: /local/<name of the resource>.js\n    type: module\n```\n\n----------------------------------------\n\nTITLE: Service Action Call in YAML\nDESCRIPTION: Example YAML configuration for calling the hello service action with custom parameters.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/dev_101_services.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservice: hello_action.hello\ndata:\n  name: Planet\n```\n\n----------------------------------------\n\nTITLE: Feature Support Declaration Message in Home Assistant WebSocket API\nDESCRIPTION: Client message to declare support for specific features like message coalescing. This should be the first message sent after authentication with ID 1.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"type\": \"supported_features\",\n  \"features\": { coalesce_messages: 1 }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Action Config in Home Assistant\nDESCRIPTION: Function to validate device action configuration beyond what the static ACTION_SCHEMA can provide. This allows for dynamic validation of device action configurations.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/device_automation_action.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def async_validate_action_config(hass: HomeAssistant, config: ConfigType) -> ConfigType:\n    \"\"\"Validate config.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Files for Add-on Configuration Options in Home Assistant\nDESCRIPTION: Example of a translation file for add-on configuration options and network ports. Provides user-friendly names and descriptions in different languages for UI display.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  ssl:\n    name: Enable SSL\n    description: Enable usage of SSL on the webserver inside the add-on\n```\n\n----------------------------------------\n\nTITLE: WebSocket Response for Signed Path Request in JavaScript\nDESCRIPTION: Example response from Home Assistant after requesting a signed path, containing the original path with an authentication signature appended as a query parameter.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/auth_api.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"path\": \"/api/states?authSig=ABCDEFGH\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using async_create_background_task for coroutine functions in config entries\nDESCRIPTION: For coroutine functions running from a config entry, use entry.async_create_background_task or entry.async_create_task instead of the deprecated methods.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2024-03-13-deprecate_add_run_job.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nentry.async_create_background_task\n```\n\nLANGUAGE: python\nCODE:\n```\nentry.async_create_task\n```\n\n----------------------------------------\n\nTITLE: Implementing AppArmor Profile for Home Assistant Add-on\nDESCRIPTION: Provides an example AppArmor profile (apparmor.txt) for a Home Assistant add-on. This profile defines security constraints for the add-on's execution environment.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/add-ons/presentation.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n#include <tunables/global>\n\nprofile ADDON_SLUG flags=(attach_disconnected,mediate_deleted) {\n  #include <abstractions/base>\n\n  # Capabilities\n  file,\n  signal (send) set=(kill,term,int,hup,cont),\n\n  # S6-Overlay\n  /init ix,\n  /bin/** ix,\n  /usr/bin/** ix,\n  /run/{s6,s6-rc*,service}/** ix,\n  /package/** ix,\n  /command/** ix,\n  /etc/services.d/** rwix,\n  /etc/cont-init.d/** rwix,\n  /etc/cont-finish.d/** rwix,\n  /run/{,**} rwk,\n  /dev/tty rw,\n\n  # Bashio\n  /usr/lib/bashio/** ix,\n  /tmp/** rwk,\n\n  # Access to options.json and other files within your addon\n  /data/** rw,\n\n  # Start new profile for service\n  /usr/bin/myprogram cx -> myprogram,\n\n  profile myprogram flags=(attach_disconnected,mediate_deleted) {\n    #include <abstractions/base>\n\n    # Receive signals from S6-Overlay\n    signal (receive) peer=*_ADDON_SLUG,\n\n    # Access to options.json and other files within your addon\n    /data/** rw,\n\n    # Access to mapped volumes specified in config.json\n    /share/** rw,\n\n    # Access required for service functionality\n    /usr/bin/myprogram r,\n    /bin/bash rix,\n    /bin/echo ix,\n    /etc/passwd r,\n    /dev/tty rw,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Required Message in Home Assistant WebSocket API\nDESCRIPTION: Initial message sent by the server when a client connects, requesting authentication. It includes the Home Assistant version.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/api/websocket.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"auth_required\",\n  \"ha_version\": \"2021.5.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for Feature Development\nDESCRIPTION: Command to create and switch to a new Git branch for developing a new feature in the Home Assistant Android project.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/get_started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/add-new-feature\n```\n\n----------------------------------------\n\nTITLE: Building Release AAB using Gradle CLI\nDESCRIPTION: Commands for building a release Android App Bundle (AAB) using Gradle CLI. It includes options for building all apps or a specific module.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/android/tips/release.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew bundleRelease # To build all the apps\n# OR\n./gradlew :<GRADLE_MODULE>:bundleRelease # To build a specific module, such as :app, :automotive, or :wear\n```\n\n----------------------------------------\n\nTITLE: Sync Event Bus Direct Listening\nDESCRIPTION: Examples of listening to events directly on the event bus using sync context\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/integration_listen_events.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncancel = hass.bus.listen_once(EVENT_HOMEASSISTANT_STOP, disconnect_service)\ncancel()\n```\n\nLANGUAGE: python\nCODE:\n```\ncancel = hass.bus.listen(EVENT_STATE_CHANGED, forward_event)\ncancel()\n```\n\n----------------------------------------\n\nTITLE: Updated Method for Importing LitElement\nDESCRIPTION: JavaScript code showing the updated way to retrieve the LitElement prototype after the breaking change, using hui-masonry-view instead of hui-view. Note that this approach is not officially supported by Home Assistant.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-09-30-customViewChanges.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst LitElement = Object.getPrototypeOf(customElements.get(\"hui-masonry-view\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Set API TypeScript Definition\nDESCRIPTION: TypeScript definition of the new Home Assistant API for registering custom icon sets. The API accepts an async function that returns a promise with the icon's path and optional viewBox.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/blog/2020-05-09-custom-iconsets.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nwindow.customIconsets: {\n  [iconset_name: string]: (icon_name: string) => Promise< { path: string; viewBox?: string } > \n};\n```\n\n----------------------------------------\n\nTITLE: Requesting a New Language for Translation\nDESCRIPTION: Example format for requesting a new language to be added to the Home Assistant translation projects on GitHub.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/translations.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nEnglish Name: German\nNative Name: Deutsch\n```\n\n----------------------------------------\n\nTITLE: Displaying Architecture Diagram in Markdown\nDESCRIPTION: This code snippet embeds an image of the Home Assistant architecture using Markdown syntax. It includes an alt text for accessibility and a class for dark mode inversion.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/supervisor.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img class='invertDark' src='/img/en/architecture/ha_architecture_2020.png'\n  alt='Architecture Overview of Home Assistant' />\n```\n\n----------------------------------------\n\nTITLE: Configuration Variables Documentation Template\nDESCRIPTION: Template for documenting configuration variables using Jekyll's configuration tag system, showing required and optional parameters with descriptions and types.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/documenting/create-page.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{% configuration %}\napi_key:\n  description: The API key to access the service.\n  required: true\n  type: string\nname:\n  description: Name to use in the frontend.\n  required: false\n  default: The default name to use in the frontend.\n  type: string\nmonitored_conditions:\n  description: Conditions to display in the frontend.\n  required: true\n  type: map\n  keys:\n    weather:\n      description: A human-readable text summary.\n    temperature:\n      description: The current temperature.\n{% endconfiguration %}\n```\n\n----------------------------------------\n\nTITLE: Creating an Issue in Home Assistant\nDESCRIPTION: This snippet demonstrates how to create an issue using the issue registry in Home Assistant. It includes parameters for specifying the domain, issue ID, severity, and other attributes.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/core/platform/repairs.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom homeassistant.helpers import issue_registry as ir\n\nir.async_create_issue(\n    hass,\n    DOMAIN,\n    \"manual_migration\",\n    breaks_in_ha_version=\"2022.9.0\",\n    is_fixable=False,\n    severity=ir.IssueSeverity.ERROR,\n    translation_key=\"manual_migration\",\n)\n```\n\n----------------------------------------\n\nTITLE: Get URL Helper Method Signature - Python\nDESCRIPTION: Method signature for the get_url helper function that retrieves Home Assistant instance URLs based on specified requirements. The method accepts various boolean parameters to control URL selection criteria.\nSOURCE: https://github.com/home-assistant/developers.home-assistant/blob/master/docs/instance_url.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_url(\n    hass: HomeAssistant,\n    *,\n    require_current_request: bool = False,\n    require_ssl: bool = False,\n    require_standard_port: bool = False,\n    allow_internal: bool = True,\n    allow_external: bool = True,\n    allow_cloud: bool = True,\n    allow_ip: bool = True,\n    prefer_external: bool = False,\n    prefer_cloud: bool = False,\n) -> str:\n```"
  }
]