[
  {
    "owner": "terraform-aws-modules",
    "repo": "terraform-aws-ecs",
    "content": "TITLE: Creating an ECS Service with Terraform\nDESCRIPTION: This snippet demonstrates how to use the ECS service module to create a service with multiple containers, including a Fluent Bit sidecar for logging. It configures networking, load balancing, and security groups.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/service/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"ecs_service\" {\n  source = \"terraform-aws-modules/ecs/aws//modules/service\"\n\n  name        = \"example\"\n  cluster_arn = \"arn:aws:ecs:us-west-2:123456789012:cluster/default\"\n\n  cpu    = 1024\n  memory = 4096\n\n  # Container definition(s)\n  container_definitions = {\n\n    fluent-bit = {\n      cpu       = 512\n      memory    = 1024\n      essential = true\n      image     = \"906394416424.dkr.ecr.us-west-2.amazonaws.com/aws-for-fluent-bit:stable\"\n      firelens_configuration = {\n        type = \"fluentbit\"\n      }\n      memory_reservation = 50\n    }\n\n    ecs-sample = {\n      cpu       = 512\n      memory    = 1024\n      essential = true\n      image     = \"public.ecr.aws/aws-containers/ecsdemo-frontend:776fd50\"\n      port_mappings = [\n        {\n          name          = \"ecs-sample\"\n          containerPort = 80\n          protocol      = \"tcp\"\n        }\n      ]\n\n      # Example image used requires access to write to root filesystem\n      readonly_root_filesystem = false\n\n      dependencies = [{\n        containerName = \"fluent-bit\"\n        condition     = \"START\"\n      }]\n\n      enable_cloudwatch_logging = false\n      log_configuration = {\n        logDriver = \"awsfirelens\"\n        options = {\n          Name                    = \"firehose\"\n          region                  = \"eu-west-1\"\n          delivery_stream         = \"my-stream\"\n          log-driver-buffer-limit = \"2097152\"\n        }\n      }\n      memory_reservation = 100\n    }\n  }\n\n  service_connect_configuration = {\n    namespace = \"example\"\n    service = {\n      client_alias = {\n        port     = 80\n        dns_name = \"ecs-sample\"\n      }\n      port_name      = \"ecs-sample\"\n      discovery_name = \"ecs-sample\"\n    }\n  }\n\n  load_balancer = {\n    service = {\n      target_group_arn = \"arn:aws:elasticloadbalancing:eu-west-1:1234567890:targetgroup/bluegreentarget1/209a844cd01825a4\"\n      container_name   = \"ecs-sample\"\n      container_port   = 80\n    }\n  }\n\n  subnet_ids = [\"subnet-abcde012\", \"subnet-bcde012a\", \"subnet-fghi345a\"]\n  security_group_rules = {\n    alb_ingress_3000 = {\n      type                     = \"ingress\"\n      from_port                = 80\n      to_port                  = 80\n      protocol                 = \"tcp\"\n      description              = \"Service port\"\n      source_security_group_id = \"sg-12345678\"\n    }\n    egress_all = {\n      type        = \"egress\"\n      from_port   = 0\n      to_port     = 0\n      protocol    = \"-1\"\n      cidr_blocks = [\"0.0.0.0/0\"]\n    }\n  }\n\n  tags = {\n    Environment = \"dev\"\n    Terraform   = \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Cluster with Fargate Services using Terraform\nDESCRIPTION: Terraform configuration for creating an ECS cluster with Fargate capacity providers and a sample service. Includes container definitions, service connect configuration, load balancer integration, and security group rules.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"ecs\" {\n  source = \"terraform-aws-modules/ecs/aws\"\n\n  cluster_name = \"ecs-integrated\"\n\n  cluster_configuration = {\n    execute_command_configuration = {\n      logging = \"OVERRIDE\"\n      log_configuration = {\n        cloud_watch_log_group_name = \"/aws/ecs/aws-ec2\"\n      }\n    }\n  }\n\n  fargate_capacity_providers = {\n    FARGATE = {\n      default_capacity_provider_strategy = {\n        weight = 50\n      }\n    }\n    FARGATE_SPOT = {\n      default_capacity_provider_strategy = {\n        weight = 50\n      }\n    }\n  }\n\n  services = {\n    ecsdemo-frontend = {\n      cpu    = 1024\n      memory = 4096\n\n      # Container definition(s)\n      container_definitions = {\n\n        fluent-bit = {\n          cpu       = 512\n          memory    = 1024\n          essential = true\n          image     = \"906394416424.dkr.ecr.us-west-2.amazonaws.com/aws-for-fluent-bit:stable\"\n          firelens_configuration = {\n            type = \"fluentbit\"\n          }\n          memory_reservation = 50\n        }\n\n        ecs-sample = {\n          cpu       = 512\n          memory    = 1024\n          essential = true\n          image     = \"public.ecr.aws/aws-containers/ecsdemo-frontend:776fd50\"\n          port_mappings = [\n            {\n              name          = \"ecs-sample\"\n              containerPort = 80\n              protocol      = \"tcp\"\n            }\n          ]\n\n          readonly_root_filesystem = false\n\n          dependencies = [{\n            containerName = \"fluent-bit\"\n            condition     = \"START\"\n          }]\n\n          enable_cloudwatch_logging = false\n          log_configuration = {\n            logDriver = \"awsfirelens\"\n            options = {\n              Name                    = \"firehose\"\n              region                  = \"eu-west-1\"\n              delivery_stream         = \"my-stream\"\n              log-driver-buffer-limit = \"2097152\"\n            }\n          }\n          memory_reservation = 100\n        }\n      }\n\n      service_connect_configuration = {\n        namespace = \"example\"\n        service = {\n          client_alias = {\n            port     = 80\n            dns_name = \"ecs-sample\"\n          }\n          port_name      = \"ecs-sample\"\n          discovery_name = \"ecs-sample\"\n        }\n      }\n\n      load_balancer = {\n        service = {\n          target_group_arn = \"arn:aws:elasticloadbalancing:eu-west-1:1234567890:targetgroup/bluegreentarget1/209a844cd01825a4\"\n          container_name   = \"ecs-sample\"\n          container_port   = 80\n        }\n      }\n\n      subnet_ids = [\"subnet-abcde012\", \"subnet-bcde012a\", \"subnet-fghi345a\"]\n      security_group_rules = {\n        alb_ingress_3000 = {\n          type                     = \"ingress\"\n          from_port                = 80\n          to_port                  = 80\n          protocol                 = \"tcp\"\n          description              = \"Service port\"\n          source_security_group_id = \"sg-12345678\"\n        }\n        egress_all = {\n          type        = \"egress\"\n          from_port   = 0\n          to_port     = 0\n          protocol    = \"-1\"\n          cidr_blocks = [\"0.0.0.0/0\"]\n        }\n      }\n    }\n  }\n\n  tags = {\n    Environment = \"Development\"\n    Project     = \"Example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Cluster with Fargate Capacity Providers in Terraform\nDESCRIPTION: Creates an ECS cluster named 'ecs-fargate' with both FARGATE and FARGATE_SPOT capacity providers, each weighted at 50%. Also configures execute command logging to CloudWatch.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/cluster/README.md#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nmodule \"ecs_cluster\" {\n  source = \"terraform-aws-modules/ecs/aws//modules/cluster\"\n\n  cluster_name = \"ecs-fargate\"\n\n  cluster_configuration = {\n    execute_command_configuration = {\n      logging = \"OVERRIDE\"\n      log_configuration = {\n        cloud_watch_log_group_name = \"/aws/ecs/aws-ec2\"\n      }\n    }\n  }\n\n  fargate_capacity_providers = {\n    FARGATE = {\n      default_capacity_provider_strategy = {\n        weight = 50\n      }\n    }\n    FARGATE_SPOT = {\n      default_capacity_provider_strategy = {\n        weight = 50\n      }\n    }\n  }\n\n  tags = {\n    Environment = \"Development\"\n    Project     = \"EcsEc2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ECS Service and Task Definition Variables in Terraform\nDESCRIPTION: This code block defines input variables for configuring an ECS service and task definition. It includes settings for launch type, memory, networking, placement strategies, and various other ECS-specific configurations.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/service/README.md#2025-04-23_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\nvariable \"ipc_mode\" {\n  description = \"IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`\"\n  type        = string\n  default     = null\n}\n\nvariable \"launch_type\" {\n  description = \"Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `FARGATE`\"\n  type        = string\n  default     = \"FARGATE\"\n}\n\nvariable \"load_balancer\" {\n  description = \"Configuration block for load balancers\"\n  type        = any\n  default     = {}\n}\n\nvariable \"memory\" {\n  description = \"Amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required\"\n  type        = number\n  default     = 2048\n}\n\n# ... (additional variables omitted for brevity)\n```\n\n----------------------------------------\n\nTITLE: Defining Input Variables for AWS ECS Container Configuration in Terraform\nDESCRIPTION: This snippet defines input variables for configuring various aspects of ECS containers, including root filesystem access, repository credentials, resource requirements, secrets, and system controls. It uses Terraform's variable definition syntax to specify types, default values, and descriptions for each input.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/container-definition/README.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"readonly_root_filesystem\" {\n  description = \"When this parameter is true, the container is given read-only access to its root file system\"\n  type        = bool\n  default     = true\n}\n\nvariable \"repository_credentials\" {\n  description = \"Container repository credentials; required when using a private repo. This map currently supports a single key; \\\"credentialsParameter\\\", which should be the ARN of a Secrets Manager's secret holding the credentials\"\n  type        = map(string)\n  default     = {}\n}\n\nvariable \"resource_requirements\" {\n  description = \"The type and amount of a resource to assign to a container. The only supported resource is a GPU\"\n  type = list(object({\n    type  = string\n    value = string\n  }))\n  default = []\n}\n\nvariable \"secrets\" {\n  description = \"The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the Amazon Elastic Container Service Developer Guide\"\n  type = list(object({\n    name      = string\n    valueFrom = string\n  }))\n  default = []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Cluster with EC2 Autoscaling Capacity Providers in Terraform\nDESCRIPTION: Creates an ECS cluster with two EC2 autoscaling capacity providers named 'one' and 'two'. Each provider has custom scaling configurations and weighted capacity distribution. The 'one' provider has 60% weight with a base of 20 units.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/cluster/README.md#2025-04-23_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nmodule \"ecs_cluster\" {\n  source = \"terraform-aws-modules/ecs/aws//modules/cluster\"\n\n  cluster_name = \"ecs-ec2\"\n\n  cluster_configuration = {\n    execute_command_configuration = {\n      logging = \"OVERRIDE\"\n      log_configuration = {\n        cloud_watch_log_group_name = \"/aws/ecs/aws-ec2\"\n      }\n    }\n  }\n\n  autoscaling_capacity_providers = {\n    one = {\n      auto_scaling_group_arn         = \"arn:aws:autoscaling:eu-west-1:012345678901:autoScalingGroup:08419a61:autoScalingGroupName/ecs-ec2-one-20220603194933774300000011\"\n      managed_termination_protection = \"ENABLED\"\n\n      managed_scaling = {\n        maximum_scaling_step_size = 5\n        minimum_scaling_step_size = 1\n        status                    = \"ENABLED\"\n        target_capacity           = 60\n      }\n\n      default_capacity_provider_strategy = {\n        weight = 60\n        base   = 20\n      }\n    }\n    two = {\n      auto_scaling_group_arn         = \"arn:aws:autoscaling:eu-west-1:012345678901:autoScalingGroup:08419a61:autoScalingGroupName/ecs-ec2-two-20220603194933774300000022\"\n      managed_termination_protection = \"ENABLED\"\n\n      managed_scaling = {\n        maximum_scaling_step_size = 15\n        minimum_scaling_step_size = 5\n        status                    = \"ENABLED\"\n        target_capacity           = 90\n      }\n\n      default_capacity_provider_strategy = {\n        weight = 40\n      }\n    }\n  }\n\n  tags = {\n    Environment = \"Development\"\n    Project     = \"EcsEc2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Creation for ECS Service Resources\nDESCRIPTION: This snippet shows how to conditionally create various resources associated with an ECS service, such as IAM roles, task definitions, and security groups. It demonstrates the use of boolean flags to control resource creation.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/service/README.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"ecs_service\" {\n  source = \"terraform-aws-modules/ecs/aws//modules/service\"\n\n  # Disable creation of service and all resources\n  create = false\n\n  # Enable ECS Exec\n  enable_execute_command = true\n\n  # Disable creation of the service IAM role; `iam_role_arn` should be provided\n  create_iam_role = false\n\n  # Disable creation of the task definition; `task_definition_arn` should be provided\n  create_task_definition = false\n\n  # Disable creation of the task execution IAM role; `task_exec_iam_role_arn` should be provided\n  create_task_exec_iam_role = false\n\n  # Disable creation of the task execution IAM role policy\n  create_task_exec_policy = false\n\n  # Disable creation of the tasks IAM role; `tasks_iam_role_arn` should be provided\n  create_tasks_iam_role = false\n\n  # Disable creation of the service security group\n  create_security_group = false\n\n  # ... omitted\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Standard ECS Container Definition with Terraform\nDESCRIPTION: Creates a basic ECS container definition with CloudWatch logging enabled. Configures essential container properties including CPU, memory, port mappings, and tags.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/container-definition/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"ecs_container_definition\" {\n  source = \"terraform-aws-modules/ecs/aws//modules/container-definition\"\n\n  name      = \"example\"\n  cpu       = 512\n  memory    = 1024\n  essential = true\n  image     = \"public.ecr.aws/aws-containers/ecsdemo-frontend:776fd50\"\n  port_mappings = [\n    {\n      name          = \"ecs-sample\"\n      containerPort = 80\n      protocol      = \"tcp\"\n    }\n  ]\n\n  # Example image used requires access to write to root filesystem\n  readonly_root_filesystem = false\n\n  memory_reservation = 100\n\n  tags = {\n    Environment = \"dev\"\n    Terraform   = \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default ECS Autoscaling Policies in Terraform\nDESCRIPTION: Default configuration for ECS service autoscaling policies that target CPU and memory utilization using TargetTrackingScaling policy type. These policies automatically adjust the number of tasks based on resource utilization.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/service/README.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n{<br/>  \"cpu\": {<br/>    \"policy_type\": \"TargetTrackingScaling\",<br/>    \"target_tracking_scaling_policy_configuration\": {<br/>      \"predefined_metric_specification\": {<br/>        \"predefined_metric_type\": \"ECSServiceAverageCPUUtilization\"<br/>      }<br/>    }<br/>  },<br/>  \"memory\": {<br/>    \"policy_type\": \"TargetTrackingScaling\",<br/>    \"target_tracking_scaling_policy_configuration\": {<br/>      \"predefined_metric_specification\": {<br/>        \"predefined_metric_type\": \"ECSServiceAverageMemoryUtilization\"<br/>      }<br/>    }<br/>  }<br/>}\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Container Definition with Firelens Integration\nDESCRIPTION: Demonstrates setting up ECS containers with Firelens log forwarding configuration. Includes both Fluent Bit container definition and main application container with custom logging configuration.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/container-definition/README.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"fluentbit_ecs_container_definition\" {\n  source = \"terraform-aws-modules/ecs/aws//modules/container-definition\"\n  name = \"fluent-bit\"\n\n  cpu       = 512\n  memory    = 1024\n  essential = true\n  image     = \"906394416424.dkr.ecr.us-west-2.amazonaws.com/aws-for-fluent-bit:stable\"\n  firelens_configuration = {\n    type = \"fluentbit\"\n  }\n  memory_reservation = 50\n\n  tags = {\n    Environment = \"dev\"\n    Terraform   = \"true\"\n  }\n}\n\nmodule \"example_ecs_container_definition\" {\n  source = \"terraform-aws-modules/ecs/aws//modules/container-definition\"\n\n  name      = \"example\"\n  cpu       = 512\n  memory    = 1024\n  essential = true\n  image     = \"public.ecr.aws/aws-containers/ecsdemo-frontend:776fd50\"\n  port_mappings = [\n    {\n      name          = \"ecs-sample\"\n      containerPort = 80\n      protocol      = \"tcp\"\n    }\n  ]\n\n  # Example image used requires access to write to root filesystem\n  readonly_root_filesystem = false\n\n  dependencies = [{\n    containerName = \"fluent-bit\"\n    condition     = \"START\"\n  }]\n\n  enable_cloudwatch_logging = false\n  log_configuration = {\n    logDriver = \"awsfirelens\"\n    options = {\n      Name                    = \"firehose\"\n      region                  = \"eu-west-1\"\n      delivery_stream         = \"my-stream\"\n      log-driver-buffer-limit = \"2097152\"\n    }\n  }\n  memory_reservation = 100\n\n  tags = {\n    Environment = \"dev\"\n    Terraform   = \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Capacity Providers in v4.x\nDESCRIPTION: Updated syntax for capacity providers in version 4.x. The configuration now uses a more structured approach with separate variables for FARGATE and autoscaling providers, integrating the default strategy within each provider definition.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/UPGRADE-4.0.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n    fargate_capacity_providers = {\n        FARGATE = {\n            default_capacity_provider_strategy = {\n                weight = 50\n                base   = 20\n            }\n        }\n        FARGATE_SPOT = {\n            default_capacity_provider_strategy = {\n                weight = 50\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Complete ECS Module Configuration in v4.x\nDESCRIPTION: Updated example for ECS module configuration in version 4.x, demonstrating the new variable names, structured capacity provider configuration, and continued use of the deprecated sub-module during migration.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/UPGRADE-4.0.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"ecs\" {\n  source  = \"terraform-aws-modules/ecs/aws\"\n  version = \"4.0.0\"\n\n  cluster_name = \"example\"\n\n  fargate_capacity_providers = {\n    FARGATE      = {}\n    FARGATE_SPOT = {}\n  }\n\n  autoscaling_capacity_providers = {\n    prov1 = {\n      auto_scaling_group_arn = module.autoscaling.autoscaling_group_arn\n      default_capacity_provider_strategy = {\n        weight = 1\n      }\n    }\n  }\n}\n\nmodule \"ec2_profile\" {\n  source  = \"terraform-aws-modules/ecs/aws//modules/ecs-instance-profile\"\n  # Users can pin and stay on v3.5.0 until they able to use the IAM instance\n  # profile provided through the autoscaling group module\n  version = \"3.5.0\"\n\n  name = \"example\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Group and IAM Role Variables for ECS in Terraform\nDESCRIPTION: This section defines variables related to security groups and IAM roles for ECS tasks and services. It includes options for creating and configuring security groups, as well as IAM roles for task execution and the tasks themselves.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/service/README.md#2025-04-23_snippet_4\n\nLANGUAGE: HCL\nCODE:\n```\nvariable \"security_group_description\" {\n  description = \"Description of the security group created\"\n  type        = string\n  default     = null\n}\n\nvariable \"security_group_ids\" {\n  description = \"List of security groups to associate with the task or service\"\n  type        = list(string)\n  default     = []\n}\n\nvariable \"task_exec_iam_role_arn\" {\n  description = \"Existing IAM role ARN\"\n  type        = string\n  default     = null\n}\n\nvariable \"task_exec_iam_role_description\" {\n  description = \"Description of the role\"\n  type        = string\n  default     = null\n}\n\n# ... (additional variables omitted for brevity)\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Capacity Providers in v3.x\nDESCRIPTION: Example of how capacity providers and default capacity provider strategy were configured in version 3.x. This shows the deprecated syntax for specifying FARGATE, FARGATE_SPOT, and custom capacity providers.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/UPGRADE-4.0.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n    capacity_providers = [\"FARGATE\", \"FARGATE_SPOT\"]\n\n    default_capacity_provider_strategy = [{\n        capacity_provider = \"FARGATE\"\n        weight            = 50\n        base              = 20\n        }, {\n        capacity_provider = \"FARGATE_SPOT\"\n        weight            = 50\n    }]\n```\n\n----------------------------------------\n\nTITLE: Complete ECS Module Configuration in v3.x\nDESCRIPTION: Complete example of ECS module configuration in version 3.x, showing the old variable names, capacity provider setup, and the now-removed ecs-instance-profile sub-module usage.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/UPGRADE-4.0.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"ecs\" {\n  source  = \"terraform-aws-modules/ecs/aws\"\n  version = \"3.5.0\"\n\n  name               = \"example\"\n  container_insights = true\n\n  capacity_providers = [\"FARGATE\", \"FARGATE_SPOT\", aws_ecs_capacity_provider.prov1.name]\n\n  default_capacity_provider_strategy = [{\n    capacity_provider = aws_ecs_capacity_provider.prov1.name\n    weight            = \"1\"\n  }]\n}\n\nmodule \"ec2_profile\" {\n  source  = \"terraform-aws-modules/ecs/aws//modules/ecs-instance-profile\"\n  version = \"3.5.0\"\n\n  name = local.name\n}\n\nresource \"aws_ecs_capacity_provider\" \"prov1\" {\n  name = \"prov1\"\n\n  auto_scaling_group_provider {\n    auto_scaling_group_arn = module.autoscaling.autoscaling_group_arn\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Cluster Settings Configuration in Terraform AWS ECS Module\nDESCRIPTION: Default configuration for ECS cluster settings that enables CloudWatch Container Insights for monitoring container metrics, logs, and diagnostics.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n{\n  \"name\": \"containerInsights\",\n  \"value\": \"enabled\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Terraform Configuration for Container Insights\nDESCRIPTION: Default configuration for cluster_settings input variable showing how to enable Container Insights for an ECS cluster.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/cluster/README.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n[\n  {\n    \"name\": \"containerInsights\",\n    \"value\": \"enabled\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform for ECS Wrapper Module\nDESCRIPTION: This snippet shows how to use the ECS wrapper module directly in Terraform. It defines a module block with the source and inputs, including default values and multiple items to be created.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/ecs/aws//wrappers\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ECS Service Wrapper with Terraform\nDESCRIPTION: Example showing how to use the ECS service wrapper module directly with Terraform to manage multiple service instances in one module call.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/service/README.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/ecs/aws//wrappers/service\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Cluster Wrapper with Terraform\nDESCRIPTION: Example configuration for using the ECS cluster wrapper module directly with Terraform. Shows how to define default values and multiple cluster items using the module syntax.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/cluster/README.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/ecs/aws//wrappers/cluster\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Container Definition Wrapper with Terraform\nDESCRIPTION: A Terraform module configuration showing how to use the container definition wrapper module directly in Terraform without Terragrunt.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/container-definition/README.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/ecs/aws//wrappers/container-definition\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terragrunt for ECS Wrapper Module\nDESCRIPTION: This snippet demonstrates how to configure a Terragrunt file (terragrunt.hcl) to use the ECS wrapper module. It specifies the source of the module and defines inputs including default values and multiple items to be created.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/ecs/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-ecs.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ECS Service Wrapper with Terragrunt\nDESCRIPTION: Configuration example for using the ECS service wrapper module with Terragrunt to manage multiple service instances through a single terragrunt.hcl file.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/service/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/ecs/aws//wrappers/service\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-ecs.git//wrappers/service?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Cluster Wrapper with Terragrunt\nDESCRIPTION: Example configuration for using the ECS cluster wrapper module with Terragrunt. Demonstrates setting up default values and multiple cluster items in a single configuration.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/cluster/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/ecs/aws//wrappers/cluster\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-ecs.git//wrappers/cluster?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Container Definition Wrapper with Terragrunt\nDESCRIPTION: A Terragrunt configuration demonstrating how to use the container definition wrapper module to manage multiple container definitions with a single configuration file.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/container-definition/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/ecs/aws//wrappers/container-definition\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-ecs.git//wrappers/container-definition?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default SecretManager ARN Pattern for Task Execution Role\nDESCRIPTION: Default SecretManager ARN pattern that defines the scope of secrets the ECS task execution role can access. Allows access to any secret in any region.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n[\n  \"arn:aws:secretsmanager:*:*:secret:*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Default SSM Parameter ARN Pattern for Task Execution Role\nDESCRIPTION: Default SSM Parameter ARN pattern that defines the scope of SSM parameters the ECS task execution role can access. Allows access to any parameter in any region.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\n[\n  \"arn:aws:ssm:*:*:parameter/*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Default SecretsManager ARN Pattern Configuration\nDESCRIPTION: Default pattern for SecretsManager ARNs that the task execution role will be permitted to access.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/cluster/README.md#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n[\n  \"arn:aws:secretsmanager:*:*:secret:*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Default SSM Parameter ARN Pattern Configuration\nDESCRIPTION: Default pattern for SSM Parameter ARNs that the task execution role will be permitted to access.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/cluster/README.md#2025-04-23_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n[\n  \"arn:aws:ssm:*:*:parameter/*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Output Values for AWS ECS Module in Terraform\nDESCRIPTION: This snippet defines output values for the Terraform module, including ARN and name of the created CloudWatch log group, and the container definition. These outputs allow users of the module to access important information about the resources created.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/container-definition/README.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"cloudwatch_log_group_arn\" {\n  description = \"ARN of CloudWatch log group created\"\n}\n\noutput \"cloudwatch_log_group_name\" {\n  description = \"Name of CloudWatch log group created\"\n}\n\noutput \"container_definition\" {\n  description = \"Container definition\"\n}\n```\n\n----------------------------------------\n\nTITLE: Diff Comparison Between v3.x and v4.x Configurations\nDESCRIPTION: Diff output showing the specific changes required when migrating from version 3.x to 4.x. This highlights removed resources, renamed variables, and updated configuration syntax for capacity providers.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/UPGRADE-4.0.md#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- resource \"aws_ecs_capacity_provider\" \"prov1\" {\n-   name = \"prov1\"\n-\n-   auto_scaling_group_provider {\n-     auto_scaling_group_arn = module.autoscaling.autoscaling_group_arn\n-   }\n- }\n\n module \"ecs\" {\n   source  = \"terraform-aws-modules/ecs/aws\"\n-  version = \"3.5.0\"\n+  version = \"4.0.0\"\n\n-  name         = \"example\"\n+  cluster_name = \"example\"\n\n-  container_insights = true\n+  # On by default now\n\n-  capacity_providers = [\"FARGATE\", \"FARGATE_SPOT\", aws_ecs_capacity_provider.prov1.name]\n-  default_capacity_provider_strategy = [{\n-    capacity_provider = aws_ecs_capacity_provider.prov1.name\n-    weight            = \"1\"\n- }]\n\n+  fargate_capacity_providers = {\n+    FARGATE      = {}\n+    FARGATE_SPOT = {}\n+  }\n\n+  autoscaling_capacity_providers = {\n+    prov1 = {\n+      auto_scaling_group_arn = module.autoscaling.autoscaling_group_arn\n+      default_capacity_provider_strategy = {\n+        weight = 1\n+      }\n+    }\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform State Migration Commands for v4.x Upgrade\nDESCRIPTION: Command to migrate the terraform state when upgrading to v4.x. This command moves existing external capacity providers to be managed under the ECS module.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/UPGRADE-4.0.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Cluster\nterraform state mv 'aws_ecs_capacity_provider.prov1' 'module.ecs.aws_ecs_capacity_provider.this[\"prov1\"]'\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Commands for ECS Cluster Deployment\nDESCRIPTION: Commands to initialize, plan, and apply the Terraform configuration to create the ECS cluster resources. After using these resources, the 'terraform destroy' command should be run to avoid incurring unnecessary AWS charges.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/examples/complete/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Deployment for ECS Cluster\nDESCRIPTION: Commands for initializing, planning, and applying the Terraform configuration to create the ECS cluster with EC2 autoscaling groups. Includes a note about destroying resources when no longer needed.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/examples/ec2-autoscaling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Initializing and Deploying ECS Cluster with Terraform\nDESCRIPTION: Basic Terraform commands to initialize, plan, and apply the ECS cluster configuration. Note that running these commands will incur AWS charges.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/examples/fargate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: ECS Module Configuration Version 5.2.2\nDESCRIPTION: Configuration update that corrects the wait_until_stable_timeout variable type for improved stability in ECS service deployment timeouts.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nwait_until_stable_timeout = <corrected_type>\n```\n\n----------------------------------------\n\nTITLE: Cloudwatch Log Group Name Prefix Support\nDESCRIPTION: Feature addition that enables using container definition CloudWatch log group name as a prefix for better log organization and management.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nenable_cloudwatch_logging = true\ncloudwatch_log_group_name = \"prefix-name\"\n```\n\n----------------------------------------\n\nTITLE: ECS Service Load Balancer Configuration\nDESCRIPTION: Feature that adds the ability to ignore load_balancer changes to ECS service for more flexible service updates.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nlifecycle {\n  ignore_changes = [load_balancer]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ECS Cluster Creation in Terraform\nDESCRIPTION: A configuration example showing how to conditionally disable the creation of an ECS cluster and all its associated resources by setting the 'create' variable to false.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/modules/cluster/README.md#2025-04-23_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nmodule \"ecs_cluster\" {\n  source = \"terraform-aws-modules/ecs/aws//modules/cluster\"\n\n  # Disable creation of cluster and all resources\n  create = false\n\n  # ... omitted\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple S3 Buckets with Terragrunt\nDESCRIPTION: This example demonstrates how to use a wrapper module to manage multiple S3 buckets in a single Terragrunt layer. It specifies the source of the S3 bucket module and defines inputs including default settings and multiple bucket configurations.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/README.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple S3 Buckets with Module Wrapper in Terragrunt\nDESCRIPTION: Example of applying the same wrapper pattern to S3 buckets, demonstrating how to manage multiple buckets with different configurations in a single Terragrunt layer.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/service/README.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple S3 Buckets with Terragrunt\nDESCRIPTION: Example showing how to manage multiple S3 buckets in a single Terragrunt configuration using the wrapper pattern. Includes bucket-specific policies and settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/cluster/README.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple S3 Buckets in Terragrunt with Wrapper Pattern\nDESCRIPTION: An example Terragrunt configuration that uses a similar wrapper pattern to manage multiple S3 buckets within a single configuration file, showing the versatility of the wrapper pattern.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-ecs/blob/master/wrappers/container-definition/README.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```"
  }
]