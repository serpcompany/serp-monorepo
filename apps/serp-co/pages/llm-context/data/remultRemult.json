[
  {
    "owner": "remult",
    "repo": "remult",
    "content": "TITLE: Performing CRUD Operations with Remult in Front-end TypeScript\nDESCRIPTION: This snippet shows how to perform CRUD operations (Create, Read, Update, Delete) using Remult in front-end TypeScript code. It demonstrates inserting, fetching, updating, and deleting products.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/crud-your-first-entity.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { repo } from 'remult'\nimport { Product } from '../shared/product'\n\nconst productsRepo = repo(Product)\n\nasync function playWithRemult() {\n  // add a new product to the backend database\n  await productsRepo.insert({ name: 'Tofu', unitPrice: 5 })\n\n  // fetch products from backend database\n  const products = await productsRepo.find()\n  console.log(products)\n\n  // update product data\n  const tofu = products.filter((p) => p.name === 'Tofu')\n  await productsRepo.save({ ...tofu, unitPrice: tofu.unitPrice + 5 })\n\n  // delete product\n  await productsRepo.delete(tofu)\n}\n\nplayWithRemult()\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity in TypeScript with Remult\nDESCRIPTION: This snippet defines the Task entity using Remult decorators. It includes fields for id, title, completed status, and creation date, with API CRUD operations enabled.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/entities.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields } from 'remult'\n\n@Entity('tasks', {\n  allowApiCrud: true,\n})\nexport class Task {\n  @Fields.cuid()\n  id = ''\n\n  @Fields.string()\n  title = ''\n\n  @Fields.boolean()\n  completed = false\n\n  @Fields.createdAt()\n  createdAt?: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remult Entity Model Class in TypeScript\nDESCRIPTION: This snippet shows how to define a Remult entity class for a Product. It includes fields for id, name, and unitPrice, and enables API CRUD operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/crud-your-first-entity.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields } from 'remult'\n\n@Entity('products', {\n  allowApiCrud: true,\n})\nexport class Product {\n  @Fields.uuid()\n  id!: string\n\n  @Fields.string()\n  name = ''\n\n  @Fields.number()\n  unitPrice = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Remult Project with npm\nDESCRIPTION: Command to create a new Remult project using npm init. This is the primary way to bootstrap a Remult application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/creating-a-project.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init remult@latest\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation to Fields in Remult\nDESCRIPTION: This code demonstrates how to add a custom validation function to a field in a Remult entity. The validation ensures that the title field is longer than 2 characters, returning an error message if the condition is not met. This validation works both on frontend and backend.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/3-custom-validations/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Task {\n  @Fields.uuid()\n  id = ''\n\n  @Fields.string<Task>({\n    validate: (task) => task.title.length > 2 || 'too short',\n  })\n  title = ''\n\n  //....\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Remult to PostgreSQL Database\nDESCRIPTION: Code for connecting Remult to a PostgreSQL database using the createPostgresDataProvider function. Includes examples for both connection string and existing PostgreSQL connection.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { createPostgresDataProvider } from \"remult/postgres\"\n\nconst app = express()\n\nconst connectionString = \"postgres://user:password@host:5432/database\"\n\napp.use(\n  remultExpress({\n    dataProvider:\n      createPostgresDataProvider({\n        connectionString, // default: process.env[\"DATABASE_URL\"]\n        // configuration: {} // optional = a `pg.PoolConfig` object or \"heroku\"\n      })\n  })\n)\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { Pool } from 'pg'\nimport { SqlDatabase } from 'remult'\nimport { PostgresDataProvider } from 'remult/postgres'\nimport { remultExpress } from 'remult/remult-express'\nconst pg = new Pool({\n  connectionString: '....',\n})\nconst app = express()\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase(new PostgresDataProvider(pg)),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Task Creation Functionality in React with Remult\nDESCRIPTION: Implements the state and function needed to add new tasks, using Remult's taskRepo.insert() method to persist data to the backend. The function handles form submission and updates the local state with the newly created task.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/crud.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/App.tsx\n\nexport default function App() {\n  const [tasks, setTasks] = useState<Task[]>([])\n  const [newTaskTitle, setNewTaskTitle] = useState(\"\")\n\n  const addTask = async (e: FormEvent) => {\n    e.preventDefault()\n    try {\n      const newTask = await taskRepo.insert({ title: newTaskTitle })\n      setTasks([...tasks, newTask])\n      setNewTaskTitle(\"\")\n    } catch (error: unknown) {\n      alert((error as { message: string }).message)\n    }\n  }\n  //...\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult Express Integration\nDESCRIPTION: Sets up Remult REST API with Express by importing required modules, configuring the Task entity, and integrating the API middleware. This enables CRUD operations for Task entities through REST endpoints.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/1-introduction/2-rest-api/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { Task } from '../shared/Task.js'\n\nexport const app = express()\nexport const api = remultExpress({\n  entities: [Task],\n})\napp.use(api)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Remult Backend API with Express in TypeScript\nDESCRIPTION: Code for initializing Remult with Express to create a backend API. This setup includes entity registration and database configuration, demonstrating how Remult can generate a complete REST API with minimal code.\nSOURCE: https://github.com/remult/remult/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// backend/index.ts\n\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express' // adapters for: Fastify,Next.js, Nuxt, SvelteKit, SolidStart, Nest, more...\nimport { createPostgresDataProvider } from 'remult/postgres' // supported: PostgreSQL, MySQL, SQLite, MongoDB, MSSQL and Oracle\nimport { Product } from '../shared/product'\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    entities: [Product],\n    dataProvider: createPostgresDataProvider({\n      connectionString: 'postgres://user:password@host:5432/database\"',\n    }),\n  }),\n)\n\napp.listen()\n```\n\n----------------------------------------\n\nTITLE: Declaring createRemultServer Function for Server Initialization\nDESCRIPTION: Defines a function to create a new Remult server instance with customizable options. This is the main entry point for server creation, allowing configuration of entities, controllers, user authentication, and data providers.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createRemultServer<RequestType>(\n  options: RemultServerOptions<RequestType>,\n  serverCoreOptions?: ServerCoreOptions<RequestType>,\n): RemultServer<RequestType>\n//[ ] ServerCoreOptions from ./remult-api-server.js is not exported\n```\n\n----------------------------------------\n\nTITLE: Filtering by SQL Expression Fields from Related Entities in Remult\nDESCRIPTION: Example of filtering Order entities by the customerCity field that contains data from the related Customer entity. This demonstrates how to query orders based on customer location without needing to join tables explicitly.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/6-sql-expression/2-getting-a-field-from-a-relation/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ordersFromLondon = await repo(Order).find({\n  where: {\n    customerCity: 'London',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Entity with Remult Decorators in TypeScript\nDESCRIPTION: Defines a Task entity with CRUD capabilities using Remult decorators. The entity includes fields for ID (UUID), title (string), completed status (boolean), and creation timestamp. This class will be used for database mapping, API endpoints, and frontend data operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/1-introduction/1-entity/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields } from 'remult'\n\n@Entity('tasks', {\n  allowApiCrud: true,\n})\nexport class Task {\n  @Fields.uuid()\n  id = ''\n\n  @Fields.string()\n  title = ''\n\n  @Fields.boolean()\n  completed = false\n\n  @Fields.createdAt()\n  createdAt?: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Method in Remult Controller\nDESCRIPTION: This snippet demonstrates how to define a backend method in a Remult controller using the @BackendMethod decorator. It includes parameter validation and error handling.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/6-backend-methods/meta.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@BackendMethod({ allowed: true })\nasync resetPassword(userId: string, newPassword: string) {\n  const user = await this.repo.findId(userId);\n  if (!user) {\n    throw new Error(\"User not found\");\n  }\n  user.password = newPassword;\n  await user.save();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Backend Method in TypeScript with Remult\nDESCRIPTION: Implementation of a static backend method 'setAll' in TasksController that updates completion status of all tasks. Uses BackendMethod decorator with authorization settings and demonstrates repository usage.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/backendMethods.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, repo } from 'remult'\nimport { Task } from './Task'\n\nexport class TasksController {\n  /**\n   * Sets the completion status of all tasks.\n   * @param {boolean} completed - The completion status to set for all tasks.\n   */\n  @BackendMethod({ allowed: true })\n  static async setAll(completed: boolean) {\n    const taskRepo = repo(Task)\n\n    for (const task of await taskRepo.find()) {\n      await taskRepo.save({ ...task, completed })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-Based Permissions in Task Entity\nDESCRIPTION: Modifies the Task entity class to implement role-based authorization rules where all authenticated users can perform basic CRUD operations, but only admins can create or delete tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/3-authorization/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('tasks', {\n  allowApiCrud: remult.authenticated,\n  allowApiInsert: 'admin',\n  allowApiDelete: 'admin',\n})\nexport class Task {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Remult to SQLite3 Database\nDESCRIPTION: Code for connecting Remult to a SQLite database using the sqlite3 package. This implementation works even on Stackblitz.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult' // [!code highlight]\nimport sqlite3 from 'sqlite3' // [!code highlight]\nimport { Sqlite3DataProvider } from 'remult/remult-sqlite3' // [!code highlight]\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase( // [!code highlight]\n      new Sqlite3DataProvider(new sqlite3.Database('./mydb.sqlite')), // [!code highlight]\n    ), // [!code highlight]\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity with Remult Decorators in TypeScript\nDESCRIPTION: Creates a Task entity class with id, title, completed, and createdAt fields using Remult decorators. The entity is configured to allow all CRUD operations through the API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/entities.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/Task.ts\n\nimport { Entity, Fields } from 'remult'\n\n@Entity('tasks', {\n  allowApiCrud: true,\n})\nexport class Task {\n  @Fields.cuid()\n  id = ''\n\n  @Fields.string()\n  title = ''\n\n  @Fields.boolean()\n  completed = false\n\n  @Fields.createdAt()\n  createdAt?: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Field Validation with Validators\nDESCRIPTION: Example showing how to use the built-in Validators.required validator to make a field required.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n  validate: Validators.required\n})\n*\n```\n\n----------------------------------------\n\nTITLE: Configuring Field-Level Authorization in Remult\nDESCRIPTION: Examples of field-level access control including excluding fields from the API, role-based field updates, condition-based field updates, and restricting updates to new entities only.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// This field will not be included in the API response\n@Fields.string({ includeInApi: false })\npassword = \"\"\n\n// Only users with the 'admin' role can update this field\n@Fields.boolean({ allowApiUpdate: \"admin\" })\nadmin = false\n\n// Titles can only be updated by the task owner\n@Fields.string<Task>({ allowApiUpdate: task => task.owner === remult.user!.id })\ntitle=''\n\n// This field can only be updated when creating a new entity\n@Fields.string<Category>({ allowApiUpdate: (c) => getEntityRef(c).isNew() })\nDescription = \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in Remult Entity\nDESCRIPTION: This example demonstrates how to implement custom validation logic in a Remult entity using the validate method. It checks for unique usernames and performs other validations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/meta.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"users\")\nexport class User {\n  @Fields.string()\n  id!: string;\n\n  @Fields.string()\n  username = \"\";\n\n  @Fields.string()\n  name = \"\";\n\n  async validate() {\n    if (this.username.length < 3)\n      throw \"Username too short\";\n    const exists = await repo(User).count({\n      username: this.username,\n      id: { $ne: this.id }\n    });\n    if (exists > 0)\n      throw \"Username already taken\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity in Remult\nDESCRIPTION: This snippet demonstrates how to define an entity in Remult using TypeScript decorators. It shows the structure of a Task entity with various field types and validations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/1-introduction/meta.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\")\nclass Task {\n  @Fields.cuid()\n  id!: string;\n\n  @Fields.string()\n  title = \"\";\n\n  @Fields.boolean()\n  completed = false;\n\n  @Fields.createdAt()\n  createdAt?: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-based Authorization in Task Entity\nDESCRIPTION: Extends the Task entity with role-based permissions, allowing all authenticated users to view tasks and set completion status, but restricting creation, deletion, and title updates to admin users.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/Task.ts\n\nimport { Allow, Entity, Fields } from \"remult\"\n\n@Entity<Task>(\"tasks\", {\n  allowApiCrud: Allow.authenticated,\n  allowApiInsert: \"admin\",\n  allowApiDelete: \"admin\"\n})\nexport class Task {\n  @Fields.uuid()\n  id!: string\n\n  @Fields.string({\n    validate: (task) => {\n      if (task.title.length < 3) throw \"Too Short\"\n    }\n    allowApiUpdate: \"admin\"\n  })\n  title = \"\"\n\n  @Fields.boolean()\n  completed = false\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom FieldOptions in HTML Template\nDESCRIPTION: Shows how to access and use the custom placeholderText option in an HTML input element.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-options.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input\n  placeholder=\"{taskRepo.fields.title.options.placeholderText}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Backend Method in TypeScript with Remult\nDESCRIPTION: Example showing how to define a Task entity with a backend method for toggling completion status. The method demonstrates the use of @BackendMethod decorator and includes field definitions with state management.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-backend-methods.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('tasks', {\n  allowApiCrud: true,\n})\nexport class Task extends IdEntity {\n  @Fields.string()\n  title = ''\n\n  @Fields.boolean()\n  completed = false\n\n  @BackendMethod({ allowed: true })\n  async toggleCompleted() {\n    this.completed = !this.completed\n    console.log({\n      title: this.title,\n      titleOriginalValue: this.$.title.originalValue,\n    })\n    await this.save()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Authentication with Next-Auth in Remult\nDESCRIPTION: This snippet demonstrates how to integrate Next-Auth authentication with Remult in a Next.js application. It configures the getUser function to extract user information from the Next-Auth session.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/api/[...remult]/route.ts\n\nimport { remultNextApp } from 'remult/remult-next'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from '../auth/[...nextauth]/route'\n\nexport const api = remultNextApp({\n  getUser: async () => {\n    const user = (await getServerSession(authOptions))?.user\n    return user?.email && user?.name\n      ? { id: user?.email, name: user?.name }\n      : undefined\n  },\n})\n\nexport const { POST, PUT, DELETE, GET, withRemult } = api\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in Remult\nDESCRIPTION: Example of implementing a custom validation function for the Task title field that checks if the title length is at least 3 characters. The validation runs on both client and server sides.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/Task.ts\n\n@Fields.string<Task>({\n  validate: (task) => {\n    if (task.title.length < 3) throw \"Too Short\"\n  }\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Authentication with Express Session in Remult\nDESCRIPTION: This snippet shows how to integrate authentication using express-session with Remult. It sets up a session middleware and configures the getUser function to extract user information from the session.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport session from 'express-session'\nimport { remultExpress } from 'remult/remult-express'\n\nconst app = express()\n\napp.use(\n  session({\n    /* ... */\n  }),\n)\n\napp.post('/api/signIn', (req, res) => {\n  req.session!['user'] = { id: 1, name: 'admin', roles: ['admin'] }\n})\n\napp.use(\n  remultExpress({\n    getUser: (req) => req.session!['user'], // [!code highlight]\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend Filters for Consistent Access Control in Remult\nDESCRIPTION: Using backendPrefilter and backendPreprocessFilter to ensure consistent access control across both API and backend operations. This prevents unauthorized access to data in backend methods.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n  backendPrefilter: () => {\n    // Admins can access all rows\n    if (remult.isAllowed(\"admin\")) return {}\n    // Non-admins can only access rows where they are the owner\n    return { owner: remult.user!.id }\n  },\n  backendPreprocessFilter: async (filter, {getPreciseValues}) => {\n    // Apply additional filtering logic for backend queries\n    const preciseValues = await getPreciseValues(filter);\n    if (!preciseValues.owner) {\n      throw new ForbiddenError(\"You must specify a valid owner filter\");\n    }\n    return filter;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules with Remult Decorators\nDESCRIPTION: This snippet illustrates how to use Remult decorators to define validation rules for entity fields. It shows various validation options like required fields, minimum length, and custom validation functions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/meta.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\")\nexport class Task {\n  @Fields.uuid()\n  id!: string;\n\n  @Fields.string({\n    validate: Validators.required,\n  })\n  title = \"\";\n\n  @Fields.string({\n    validate: [Validators.required, Validators.minLength(3)]\n  })\n  description = \"\";\n\n  @Fields.number({\n    validate: (task) => {\n      if (task.importance < 1 || task.importance > 3)\n        throw \"Importance should be between 1 and 3\";\n    }\n  })\n  importance = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking API Read Permission\nDESCRIPTION: Example demonstrating how to check if the current user has permission to read from an entity before performing a find operation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entitymetadata.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (repo(Task).metadata.apiReadAllowed){\n  await taskRepo.find()\n}\n```\n\n----------------------------------------\n\nTITLE: Using withRemultAsync Promise Wrapper in Express\nDESCRIPTION: Demonstrates using api.withRemultAsync to make remult available within a specific block of code in an Express route handler. This example shows authentication, authorization, and repository operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { remult, repo } from 'remult'\n\nconst app = express()\n// ...\nconst api = remultExpress({\n  entities: [Task],\n})\napp.post('/api/customSetAll', async (req, res) => {\n  // use remult in a specific piece of code // [!code highlight]\n  await api.withRemultAsync(req, async () => {\n    // [!code highlight]\n    if (!remult.authenticated()) {\n      res.sendStatus(403)\n      return\n    }\n    if (!remult.isAllowed('admin')) {\n      res.sendStatus(403)\n      return\n    }\n    const taskRepo = repo(Task)\n    for (const task of await taskRepo.find()) {\n      task.completed = req.body.completed\n      await taskRepo.save(task)\n    }\n    res.send()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Angular HttpClient Integration\nDESCRIPTION: Client-side initialization using Angular's HttpClient.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n//...\nimport { HttpClientModule, HttpClient } from '@angular/common/http'\nimport { remult } from 'remult'\n\n@NgModule({\n  //...\n  imports: [\n    //...\n    HttpClientModule,\n  ],\n})\nexport class AppModule {\n  constructor(http: HttpClient) {\n    remult.apiClient.httpClient = http\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Remult to MongoDB Database\nDESCRIPTION: Code for connecting Remult to a MongoDB database using the MongoClient and MongoDataProvider. Establishes a connection and provides the database instance to Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { MongoClient } from \"mongodb\"\nimport { MongoDataProvider } from \"remult/remult-mongo\"\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: async () => {\n      const client = new MongoClient(\"mongodb://localhost:27017/local\")\n      await client.connect()\n      return new MongoDataProvider(client.db(\"test\"), client)\n    }\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: BackendMethod Decorator for Server-Side Method Execution\nDESCRIPTION: Function decorator for defining server-side methods that can be called from the client. It includes type checking and options for controlling execution permissions and transaction handling.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function BackendMethod<type = unknown>(\n  options: BackendMethodOptions<type>,\n): (\n  target: any,\n  context: ClassMethodDecoratorContextStub<type> | string,\n  descriptor?: any,\n) => any\n```\n\n----------------------------------------\n\nTITLE: Defining EntityOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the EntityOptions interface, which specifies configuration options for entities in Remult. It includes properties for setting entity caption, API access permissions, filters, ordering, and lifecycle hooks.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface EntityOptions<entityType = unknown> {\n  caption?: string\n  allowApiRead?: Allowed\n  allowApiUpdate?: AllowedForInstance<entityType>\n  allowApiDelete?: AllowedForInstance<entityType>\n  allowApiInsert?: AllowedForInstance<entityType>\n  allowApiCrud?: Allowed\n  apiPrefilter?: EntityFilter<entityType> | (() => EntityFilter<entityType> | Promise<EntityFilter<entityType>>)\n  apiPreprocessFilter?: (filter: EntityFilter<entityType>, event: PreprocessFilterEvent<entityType>) => EntityFilter<entityType> | Promise<EntityFilter<entityType>>\n  backendPreprocessFilter?: (filter: EntityFilter<entityType>, event: PreprocessFilterEvent<entityType>) => EntityFilter<entityType> | Promise<EntityFilter<entityType>>\n  backendPrefilter?: EntityFilter<entityType> | (() => EntityFilter<entityType> | Promise<EntityFilter<entityType>>)\n  defaultOrderBy?: EntityOrderBy<entityType>\n  saving?: (entity: entityType, event: LifecycleEvent<entityType>) => Promise<any> | any\n  saved?: (entity: entityType, e: LifecycleEvent<entityType>) => Promise<any> | any\n  deleting?: (entity: entityType, e: LifecycleEvent<entityType>) => Promise<any> | any\n  deleted?: (entity: entityType, e: LifecycleEvent<entityType>) => Promise<any> | any\n  validation?: (entity: entityType, ref: LifecycleEvent<entityType>) => Promise<any> | any\n  dbName?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity-Level Authorization in Remult\nDESCRIPTION: Examples of setting up entity-level CRUD permissions using different authorization strategies including boolean values, role-based access, and conditional functions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Allows all CRUD operations\n@Entity(\"tasks\", { allowApiCrud: true })\n\n// Only users with the 'admin' role can update\n@Entity(\"tasks\", { allowApiUpdate: 'admin' })\n\n// Only users with 'admin' or 'manager' roles can delete\n@Entity(\"tasks\", { allowApiDelete: ['admin', 'manager'] })\n\n// Only the user 'Jane' can read\n@Entity(\"tasks\", { allowApiRead: () => remult.user?.name == 'Jane' })\n\n// Only authenticated users can perform CRUD operations\n@Entity(\"tasks\", { allowApiCrud: Allow.authenticated })\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity Class in TypeScript with Remult\nDESCRIPTION: Creates a Task entity class with auto-generated id and createdAt fields, a title string field, and a completed boolean field. The @Entity decorator configures the API route and enables CRUD operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/entities.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields } from 'remult'\n\n@Entity('tasks', {\n  allowApiCrud: true,\n})\nexport class Task {\n  @Fields.cuid()\n  id!: string\n\n  @Fields.string()\n  title: string = ''\n\n  @Fields.boolean()\n  completed: boolean = false\n\n  @Fields.createdAt()\n  createdAt?: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ownerId Field with Controlled Updates in Remult (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add an ownerId field to a Task entity in Remult, with the allowApiUpdate option set to false to prevent updates via API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/1-field-level-control/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n  allowApiUpdate: false, // Prevents updates via API\n})\nownerId = remult.user?.id || ''\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Schema with Remult Decorators in TypeScript\nDESCRIPTION: Example of defining a Product entity using Remult's decorators. The entity includes fields with their types and is configured to allow API CRUD operations. This entity definition serves as the single source of truth for both frontend and backend.\nSOURCE: https://github.com/remult/remult/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// shared/product.ts\n\nimport { Entity, Fields } from 'remult'\n\n@Entity('products', {\n  allowApiCrud: true,\n})\nexport class Product {\n  @Fields.cuid()\n  id = ''\n\n  @Fields.string()\n  name = ''\n\n  @Fields.number()\n  unitPrice = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using apiPreprocessFilter for Complex Filter Validation in Remult\nDESCRIPTION: Example of complex filter validation using apiPreprocessFilter, which requires users to include specific filters in their queries. This ensures that users can only access authorized data subsets.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n  apiPreprocessFilter: async (filter, {getPreciseValues}) => {\n    // Ensure that users can only query tasks for specific customers\n    const preciseValues = await getPreciseValues();\n    if (!preciseValues.customerId) {\n      throw new ForbiddenError(\"You must specify a valid customerId filter\");\n    }\n    return filter;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Display and Creation in Svelte with Remult\nDESCRIPTION: This snippet shows a Svelte component that displays a list of tasks and provides a form to add new ones. It uses Remult's repository to fetch tasks and insert new ones into the database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/crud.md#2025-04-16_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { repo } from \"remult\";\n  import { Task } from \"../shared/Task\";\n\n  let tasks = $state<Task[]>([]);\n\n  $effect(() => {\n    repo(Task)\n      .find()\n      .then((t) => (tasks = t));\n  });\n\n  let newTaskTitle = $state(\"\"); // [!code ++]\n  const addTask = async (event: Event) => {// [!code ++]\n    event.preventDefault();// [!code ++]\n    const newTask = await repo(Task).insert({ title: newTaskTitle });// [!code ++]\n    tasks = [...tasks, newTask];// [!code ++]\n    newTaskTitle = \"\";// [!code ++]\n  };// [!code ++]\n</script>\n\n<div>\n  <h1>todos</h1>\n  <main>\n    <form onsubmit={addTask}>// [!code ++]\n      <input bind:value={newTaskTitle} placeholder=\"What needs to be done?\" />// [!code ++]\n      <button>Add</button>// [!code ++]\n    </form>// [!code ++]\n\n    {#each tasks as task}\n      <div>\n        <input type=\"checkbox\" bind:checked={task.completed} />\n        <span>{task.title}</span>\n      </div>\n    {/each}\n  </main>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-based Authorization for Task Entity in TypeScript\nDESCRIPTION: This snippet shows how to set up role-based authorization rules for the Task entity using Remult decorators. It defines which roles can perform CRUD operations on tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/auth.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Allow, Entity, Fields, Validators } from \"remult\"\n\n@Entity<Task>(\"tasks\", {\n  allowApiCrud: Allow.authenticated,\n  allowApiInsert: \"admin\",\n  allowApiDelete: \"admin\"\n})\nexport class Task {\n  @Fields.uuid()\n  id!: string\n\n  @Fields.string({\n    validate: (task) => {\n      if (task.title.length < 3) throw \"Too Short\"\n    }\n    allowApiUpdate: \"admin\"\n  })\n  title = \"\"\n\n  @Fields.boolean()\n  completed = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult API Setup\nDESCRIPTION: TypeScript code for initializing Remult in a Next.js application using remultNextApp function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nextjs.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api.ts\n\nimport { remultNextApp } from 'remult/remult-next'\n\nexport const api = remultNextApp({})\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Queries in Svelte Component for Remult Todo App\nDESCRIPTION: This snippet shows the modifications to a Svelte component to implement live queries for a todo list. It replaces the standard find() method with liveQuery() and subscribe() to enable real-time updates. The code also removes manual state updates as they are now handled automatically by the live query system.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/live-queries.md#2025-04-16_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { repo } from \"remult\";\n\timport { Task } from \"../shared/Task\";\n\n\tlet tasks = $state<Task[]>([]);\n\n\t$effect(() => {\n\t\t// repo(Task) // [!code --]\n\t\t//   .find() // [!code --]\n\t\t//   .then((t) => (tasks = t)); // [!code --]\n\t\treturn repo(Task) // [!code ++]\n\t\t\t.liveQuery() // [!code ++]\n\t\t\t.subscribe((info) => { // [!code ++]\n\t\t\t\ttasks = info.applyChanges(tasks); // [!code ++]\n\t\t\t}); // [!code ++]\n\t});\n\n\tlet newTaskTitle = $state(\"\");\n\tconst addTask = async (event: Event) => {\n\t\tevent.preventDefault();\n\t\ttry {\n\t\t\tconst newTask = await repo(Task).insert({ title: newTaskTitle });\n\t\t\t// tasks = [...tasks, newTask];// [!code --]\n\t\t\tnewTaskTitle = \"\";\n\t\t} catch (error) {\n\t\t\talert((error as { message: string }).message);\n\t\t}\n\t};\n\n\tconst setCompleted = async (task: Task, completed: boolean) => {\n\t\ttry {\n\t\t\tawait repo(Task).save({ ...task, completed });\n\t\t} catch (error) {\n\t\t\talert((error as { message: string }).message);\n\t\t}\n\t};\n\n\tconst saveTask = async (e: Event, task: Task) => {\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tawait repo(Task).save({ ...task });\n\t\t} catch (error) {\n\t\t\talert((error as { message: string }).message);\n\t\t}\n\t};\n\n\tconst deleteTask = async (e: Event, task: Task) => {\n\t\ttry {\n\t\t\tawait repo(Task).delete(task);\n\t\t\t// tasks = tasks.filter((c) => c.id !== task.id);// [!code --]\n\t\t} catch (error) {\n\t\t\talert((error as { message: string }).message);\n\t\t}\n\t};\n</script>\n\n<div>\n\t<h1>todos</h1>\n\t<main>\n\t\t<form onsubmit={addTask}>\n\t\t\t<input bind:value={newTaskTitle} placeholder=\"What needs to be done?\" />\n\t\t\t<button>Add</button>\n\t\t</form>\n\n\t\t{#each tasks as task}\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tchecked={task.completed}\n\t\t\t\t\toninput={(e) => setCompleted(task, e.currentTarget.checked)}\n\t\t\t\t/>\n\t\t\t\t<!-- <span>{task.title}</span> -->\n\t\t\t\t<input name=\"title\" bind:value={task.title} />\n\t\t\t\t<button onclick={(e) => saveTask(e, task)}>Save</button>\n\t\t\t\t<button onclick={(e) => deleteTask(e, task)}>Delete</button>\n\t\t\t</div>\n\t\t{/each}\n\t</main>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using sqlRelationsFilter for Access Control with Related Entities in TypeScript\nDESCRIPTION: This code demonstrates how to implement access control on TimeEntry entities based on permissions for related Task entities using Remult's sqlRelationsFilter function. It filters TimeEntry rows so users can only access entries associated with Task entities they have permission to view.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/5-sql-relations-filter-for-user-permissions/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```file:/shared/TimeEntry.ts title=\"shared/TimeEntry.ts\" add={7-8} collapse={11-25}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Repository Interface CRUD Operations\nDESCRIPTION: Defines core CRUD operation methods including save, insert, update, delete, and upsert with type-safe parameters and return values. Includes comprehensive documentation for each operation.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nsave(item: Partial<MembersOnly<entityType>>[]): Promise<entityType[]>\nsave(item: Partial<MembersOnly<entityType>>): Promise<entityType>\n\ninsert(item: Partial<MembersOnly<entityType>>[]): Promise<entityType[]>\ninsert(item: Partial<MembersOnly<entityType>>): Promise<entityType>\n\nupdate(\n  id: idType<entityType>,\n  item: Partial<MembersOnly<entityType>>,\n): Promise<entityType>\n\ndelete(id: idType<entityType>): Promise<void>\ndelete(item: Partial<MembersOnly<entityType>>): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing API Authorization with Remult in TypeScript\nDESCRIPTION: Example of securing an API with Remult's fine-grained authorization. The code demonstrates how to restrict CRUD operations based on user permissions and implement row-level security via API prefiltering.\nSOURCE: https://github.com/remult/remult/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Article>('Articles', {\n  allowApiRead: true,\n  allowApiInsert: Allow.authenticated,\n  allowApiUpdate: (article) => article.author == remult.user.id,\n  apiPrefilter: () => {\n    if (remult.isAllowed('admin')) return {}\n    return {\n      author: remult.user.id,\n    }\n  },\n})\nexport class Article {\n  @Fields.string({ allowApiUpdate: false })\n  slug = ''\n\n  @Fields.string({ allowApiUpdate: false })\n  authorId = remult.user!.id\n\n  @Fields.string()\n  content = ''\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row-Level Authorization in Remult\nDESCRIPTION: Example of row-level access control where users can only update tasks they own. This ensures that even with entity-level access granted, users can only modify their own data.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Users can only update tasks they own\n@Entity<Task>(\"tasks\", { allowApiUpdate: task => task.owner == remult.user?.id })\n```\n\n----------------------------------------\n\nTITLE: Implementing apiPrefilter for Row-Level Permissions in Remult\nDESCRIPTION: This code snippet demonstrates how to implement row-level permissions using apiPrefilter in a Task entity. It allows admins to access all tasks while regular authenticated users can only access their own tasks based on the ownerId field.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/3-filtering-rows-based-on-User-Permissions/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiPrefilter: () => {\n  if (remult.isAllowed('admin'))\n    return {}\n  if (!remult.authenticated())\n    throw new ForbiddenError()\n  return { ownerId: remult.user!.id }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Fields in Remult Entity\nDESCRIPTION: This snippet shows how to mark fields as required in a Remult entity using the @Fields decorator. It demonstrates the use of allowNull and validate options for field validation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/meta.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\")\nexport class Task {\n  @Fields.string()\n  id!: string;\n\n  @Fields.string({\n    validate: (task) => {\n      if (task.title.length < 3)\n        throw \"Title too short\";\n    },\n    allowNull: false\n  })\n  title = \"\";\n\n  @Fields.boolean()\n  completed = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Entities in Remult\nDESCRIPTION: Demonstrates saving an entity to the data source, automatically determining whether to perform an insert or update based on the presence of an ID.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait taskRepo.save({...task, completed:true })\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Masking for Sensitive Data in Remult\nDESCRIPTION: Example of field masking for sensitive information like passwords, where the actual value is hidden in API responses but can be updated through a different field. This technique maintains security while allowing necessary operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// This field is not included in the API response\n@Fields.string({ includeInApi: false })\npassword = \"\"\n\n// The field value is masked in the API response\n@Fields.string<User>({\n  serverExpression: () => \"***\",\n  // Update the real password field when the masked field is changed\n  saving: async (user, fieldRef, e) => {\n    if (fieldRef.valueChanged()) {\n      user.password = await User.hash(user.updatePassword)\n    }\n  },\n})\nupdatePassword = \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Field Validation in Remult Entity\nDESCRIPTION: This snippet shows how to add required field validation to the title property of a Task entity using Remult's Fields.string decorator with the Validators.required validator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n  validate: Validators.required\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Insertion with Remult Repository in React\nDESCRIPTION: This snippet implements the addTask function to insert a new task using Remult's repository API. It makes a POST request to the server, updates the UI with the new task, and handles potential errors.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/3-manipulating-data/1-Insert/content.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nasync function addTask(e: FormEvent) {\n  e.preventDefault()\n  try {\n    const newTask = await taskRepo.insert({ title: newTaskTitle })\n    setTasks([...tasks, newTask])\n    setNewTaskTitle('')\n  } catch (error: any) {\n    alert((error as { message: string }).message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Query Subscription in Vue Component\nDESCRIPTION: Replaces a one-time data fetch with a live query subscription that automatically updates the component state when data changes. The code sets up a subscription in the onMounted hook that applies changes to the tasks array and properly cleans up when the component unmounts.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/live-queries.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nonMounted(() =>\n  onUnmounted(\n    taskRepo\n      .liveQuery({\n        limit: 20,\n        orderBy: { createdAt: \"asc\" }\n        //where: { completed: true },\n      })\n      .subscribe(info => (tasks.value = info.applyChanges(tasks.value)))\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity Model in TypeScript with Remult Decorators\nDESCRIPTION: Creates a Task entity class with auto-generated ID, title, completed status, and creation timestamp fields. Uses Remult decorators to define field types and entity configuration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/entities.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields } from 'remult'\n\n@Entity('tasks', {\n  allowApiCrud: true,\n})\nexport class Task {\n  @Fields.cuid()\n  id = ''\n\n  @Fields.string()\n  title = ''\n\n  @Fields.boolean()\n  completed = false\n\n  @Fields.createdAt()\n  createdAt?: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Filtering in Remult Queries\nDESCRIPTION: This code demonstrates how to implement server-side filtering in Remult by adding a where clause to the find method. It filters tasks to show only completed ones. Remult enforces type safety by ensuring the completed filter matches the boolean type defined in the entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/sorting-filtering.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/components/todo.tsx\n\nuseEffect(() => {\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" },\n      where: { completed: true }\n    })\n    .then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Logic in Remult\nDESCRIPTION: This code snippet shows how to implement custom validation logic in a Remult entity. It defines a 'validate' method that checks various conditions and throws errors if they are not met, ensuring data integrity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/9-examples/1-validations/meta.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\")\nclass Task {\n  @Fields.string()\n  title = \"\"\n\n  @Fields.number()\n  dueDate = 0\n\n  @Fields.boolean()\n  completed = false\n\n  validate() {\n    if (this.title.length < 3)\n      throw \"Title too short\"\n    if (this.dueDate < new Date().valueOf())\n      throw \"Due date must be in the future\"\n    if (this.completed && !this.title.toLowerCase().includes('done'))\n      throw \"Completed tasks must include 'done' in the title\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Live Queries with Remult in React\nDESCRIPTION: Snippet showcasing Remult's live query capabilities in a React component. This creates a subscription that automatically updates the component state when data changes on the server, providing real-time functionality.\nSOURCE: https://github.com/remult/remult/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  return repo(Product)\n    .liveQuery({\n      limit: 10,\n      orderBy: {\n        name: 'asc',\n      },\n      where: {\n        unitPrice: { $gt: 5 },\n      },\n    })\n    .subscribe((info) => {\n      setProducts(info.applyChanges)\n    })\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Validation with Remult in TypeScript\nDESCRIPTION: Example of defining validation rules on an entity using Remult. The code demonstrates both built-in validators and custom validation functions that are enforced on both frontend and backend.\nSOURCE: https://github.com/remult/remult/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields, Validators } from 'remult'\n\n@Entity('products', {\n  allowApiCrud: true,\n})\nexport class Product {\n  @Fields.cuid()\n  id = ''\n\n  @Fields.string({\n    validate: Validators.required,\n  })\n  name = ''\n\n  @Fields.number<Product>({\n    validate: (product) => product.unitPrice > 0 || 'must be greater than 0',\n  })\n  unitPrice = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI in Express Server\nDESCRIPTION: TypeScript code to set up Swagger UI in an Express server for a Remult application. It includes importing necessary modules, setting up the API, and configuring Swagger UI routes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-swagger.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport swaggerUi from 'swagger-ui-express';\nimport { remultExpress } from 'remult/remult-express';\n\nconst app = express();\nlet api = remultExpress();\n\napp.use(api);\nconst openApiDocument = api.openApiDoc({ title: \"remult-react-todo\" });\napp.get(\"/api/openApi.json\", (req, res) => {res.json(openApiDocument)});\napp.use('/api/docs', swaggerUi.serve, swaggerUi.setup(openApiDocument));\n\napp.listen(3002, () => console.log(\"Server started\"));\n```\n\n----------------------------------------\n\nTITLE: Creating TasksController with Backend Method (TypeScript)\nDESCRIPTION: This snippet shows how to create a TasksController class with a static setAllCompleted method decorated as a backend method. It uses Remult's repo to find and save tasks on the server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/backend-methods.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, remult } from 'remult'\nimport { Task } from './Task'\n\nexport class TasksController {\n  @BackendMethod({ allowed: true })\n  static async setAllCompleted(completed: boolean) {\n    const taskRepo = remult.repo(Task)\n\n    for (const task of await taskRepo.find()) {\n      await taskRepo.save({ ...task, completed })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Express Server Setup with Remult Integration\nDESCRIPTION: Main Express server setup with Remult middleware registration\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/express.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/index.ts\n\nimport express from \"express\"\nimport { api } from \"./api.js\"\n\nconst app = express()\napp.use(api)\n\napp.listen(3002, () => console.log(\"Server started\"))\n```\n\n----------------------------------------\n\nTITLE: Including Related Entities in Customer Query\nDESCRIPTION: Demonstrates how to eagerly load related entities using the include option to avoid N+1 query problems\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await customerRepo.find({\n  include: {\n    // Include the 'tags' relation for each customer.\n    tags: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Remult Server Middleware with Hono\nDESCRIPTION: Code for setting up Remult middleware in a Hono application using the remultHono function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\nimport { serve } from '@hono/node-server'\nimport { remultHono } from 'remult/remult-hono'\n\nconst app = new Hono()\n\nconst api = remultHono({}) // [!code highlight]\napp.route('', api) // [!code highlight]\n\nserve(app)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Hono and Remult\nDESCRIPTION: Command to install the necessary npm packages for setting up a Hono server with Remult integration, including the development dependency tsx for TypeScript execution.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hono.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install hono remult\nnpm install --save-dev tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-based Authorization in Task Entity\nDESCRIPTION: This snippet shows how to modify a Task entity to enforce role-based authorization rules. It restricts task creation and deletion to users with admin role while allowing all authenticated users to view tasks and update completion status.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/Task.ts\n\nimport { Allow, Entity, Fields, Validators } from \"remult\"\n\n@Entity<Task>(\"tasks\", {\n  allowApiCrud: Allow.authenticated,\n  allowApiInsert: \"admin\",\n  allowApiDelete: \"admin\"\n})\nexport class Task {\n  @Fields.uuid()\n  id!: string\n\n  @Fields.string({\n    validate: (task) => {\n      if (task.title.length < 3) throw \"Too Short\"\n    }\n    allowApiUpdate: \"admin\"\n  })\n  title = \"\"\n\n  @Fields.boolean()\n  completed = false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Query Subscription in React useEffect Hook\nDESCRIPTION: This snippet shows how to replace a static fetch with a live query subscription in a React component's useEffect hook. It sets up a realtime connection that updates the tasks state whenever changes occur.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/live-queries.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  return taskRepo\n    .liveQuery({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" }\n      //where: { completed: true },\n    })\n    .subscribe(info => setTasks(info.applyChanges))\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Query in React Todo Component\nDESCRIPTION: This code snippet shows how to modify a React Todo component to use Remult's live query feature. It includes setting up a live query, handling real-time updates, and managing component state.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/5-live-query/1-introduction/content.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { remult } from \"remult\";\nimport { Task } from \"../shared/Task\";\n\nconst taskRepo = remult.repo(Task);\n\nexport default function App() {\n  const [tasks, setTasks] = useState<Task[]>([]);\n\n  useEffect(() => {\n    const liveQuery = taskRepo\n      .liveQuery({\n        orderBy: {\n          completed: \"asc\",\n          createdAt: \"desc\"\n        },\n        // where: { completed: true }\n      })\n      .subscribe(info => setTasks(info.applyChanges));\n    return () => {\n      liveQuery.unsub();\n    };\n  }, []);\n\n  // ... rest of the component code\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic and Scalable Form Generation in TypeScript\nDESCRIPTION: This comprehensive snippet shows how to create a dynamic and scalable form by looping through fields from the entity. It demonstrates automatic input type selection, error handling, and reset functionality for a more flexible UI component.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/2-using-field-metadata-in-forms/content.md#2025-04-16_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { repo, ErrorInfo, getValueList } from 'remult'\nimport { Task } from '../shared/Task.js'\nimport { useState } from 'react'\n\nconst taskRepo = repo(Task)\nexport function TodoItem({ task }: { task: Task }) {\n  const [state, setState] = useState(task)\n  const [error, setError] = useState<ErrorInfo<Task>>()\n  async function save() {\n    try {\n      setError(undefined)\n      await taskRepo.save(state)\n    } catch (error: any) {\n      setError(error)\n    }\n  }\n  function reset() {\n    setError(undefined)\n    setState(task)\n  }\n  const fields = [taskRepo.fields.title, taskRepo.fields.priority]\n  return (\n    <div>\n      {fields.map((field) => {\n        const options = getValueList(field)\n        return (\n          <label key={field.key}>\n            {field.caption}:\n            {options ? (\n              <select\n                value={state[field.key] as any}\n                onChange={(e) =>\n                  setState({ ...state, [field.key]: e.target.value })\n                }\n              >\n                {options.map((option) => (\n                  <option key={option} value={option}>\n                    {option}\n                  </option>\n                ))}\n              </select>\n            ) : (\n              <input\n                value={state[field.key] as any}\n                onChange={(e) =>\n                  setState({ ...state, [field.key]: e.target.value })\n                }\n              />\n            )}\n            <div style={{ color: 'red' }}>{error?.modelState?.[field.key]}</div>\n          </label>\n        )\n      })}\n      <button onClick={save}>Save</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Component for Frontend\nDESCRIPTION: Creates a React component that handles authentication state, manages Remult user context, and controls the visibility of the todo component based on authentication status.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/auth.tsx\n\nimport { signIn, signOut, useSession } from 'next-auth/react'\nimport { useEffect } from 'react'\nimport { UserInfo, remult } from 'remult'\nimport Todo from './todo'\n\nexport default function Auth() {\n  const session = useSession()\n  remult.user = session.data?.user as UserInfo\n\n  useEffect(() => {\n    if (session.status === 'unauthenticated') signIn()\n  }, [session])\n  if (session.status !== 'authenticated') return <></>\n  return (\n    <div>\n      Hello {remult.user?.name}{' '}\n      <button onClick={() => signOut()}>Sign Out</button>\n      <Todo />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic String Validation in Remult (TypeScript)\nDESCRIPTION: Demonstrates how to use the @Fields.string decorator with automatic validation props like 'minLength' for a string field.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({ minLength: 5 })\ntitle = ''\n```\n\n----------------------------------------\n\nTITLE: Extending FieldOptions Interface in TypeScript\nDESCRIPTION: Extends the FieldOptions interface to include a custom option 'placeholderText' for form field placeholders.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-options.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'remult' {\n  interface FieldOptions<entityType, valueType> {\n    placeholderText?: string\n  }\n}\n\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Using Remult in a React Component\nDESCRIPTION: This code snippet illustrates how to use Remult within a React component. It demonstrates fetching tasks, adding new tasks, and updating task completion status using Remult's API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/1-introduction/meta.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remult } from \"remult\";\nimport { Task } from \"./models\";\n\nexport const TaskList = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n\n  useEffect(() => {\n    remult.repo(Task).find().then(setTasks);\n  }, []);\n\n  const addTask = async (title: string) => {\n    const newTask = await remult.repo(Task).insert({ title });\n    setTasks([...tasks, newTask]);\n  };\n\n  const setCompleted = async (task: Task, completed: boolean) => {\n    const updatedTask = await remult.repo(Task).save({ ...task, completed });\n    setTasks(tasks.map((t) => (t.id === task.id ? updatedTask : t)));\n  };\n\n  return (\n    <div>\n      {/* Render tasks and input for new tasks */}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Remult Entity on Express Server in TypeScript\nDESCRIPTION: This snippet demonstrates how to register a Remult entity on an Express server. It uses the remultExpress middleware and includes the Product entity in the entities array.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/crud-your-first-entity.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { Product } from '../shared/product'\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    entities: [Product],\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Remult Entity on the Client\nDESCRIPTION: This snippet shows how to use a Remult entity on the client-side. It demonstrates creating a repository for the entity and performing various CRUD operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// frontend/code.ts\n\nimport { repo } from 'remult'\nimport { Product } from '../shared/product'\n\nconst productsRepo = repo(Product)\n\nasync function playWithRemult() {\n  // add a new product to the backend database\n  await productsRepo.insert({ name: 'Tofu', unitPrice: 5 })\n\n  // fetch products from backend database\n  const products = await productsRepo.find({\n    where: { unitPrice: { '>=': 5 } },\n    orderBy: { name: 'asc' },\n    limit: 10,\n  })\n  console.log(products)\n\n  // update product data\n  const tofu = products.filter((p) => p.name === 'Tofu')\n  await productsRepo.save({ ...tofu, unitPrice: tofu.unitPrice + 5 })\n\n  // delete product\n  await productsRepo.delete(tofu)\n}\n\nplayWithRemult()\n```\n\n----------------------------------------\n\nTITLE: Defining ID-Based Relation in Order Entity\nDESCRIPTION: This snippet shows how to add a customerId field to the Order entity and use @Relations.toOne decorator to establish a relationship with the Customer entity. It demonstrates the correct usage of type arguments for proper type checking.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/1-relations/3-id-based-relations/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.integer()\ncustomerId = 0\n\n@Relations.toOne<Order, Customer>({\n  field: 'customerId',\n  entity: Customer\n})\ncustomer?: Customer\n```\n\n----------------------------------------\n\nTITLE: Implementing a Class Field with Custom Value Conversion in Remult\nDESCRIPTION: This snippet demonstrates how to use a class as a field type in Remult by providing valueConverter implementations for JSON serialization. It shows how to create a Phone class with methods and use it as a field type in a Contact entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Phone {\n  constructor(public phone: string) {}\n  call() {\n    window.open('tel:' + this.phone)\n  }\n}\n\n@Entity('contacts')\nexport class Contact {\n  //...\n  @Field<Contact, Phone>(() => Phone, {\n    valueConverter: {\n      fromJson: (x) => (x ? new Phone(x) : undefined!),\n      toJson: (x) => (x ? x.phone : undefined!),\n    },\n  })\n  phone?: Phone\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Customer Records and Related Orders\nDESCRIPTION: Shows how to insert customer records and their corresponding orders using the repository's relations method. This approach allows for easy management of related child entities within the context of their parent entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/1-relations/2-one-to-many/content.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst c1 = await cRepo.insert({ name: \"Customer 1\" })\nconst c2 = await cRepo.insert({ name: \"Customer 2\" })\nconst c3 = await cRepo.insert({ name: \"Customer 3\" })\n\nawait cRepo.relations(c1).orders.insert([\n  { id: \"1\", description: \"Order 1 for Customer 1\" },\n  { id: \"2\", description: \"Order 2 for Customer 1\" },\n])\n\nawait cRepo.relations(c2).orders.insert([\n  { id: \"3\", description: \"Order 1 for Customer 2\" },\n])\n\nawait cRepo.relations(c3).orders.insert([\n  { id: \"4\", description: \"Order 1 for Customer 3\" },\n  { id: \"5\", description: \"Order 2 for Customer 3\" },\n  { id: \"6\", description: \"Order 3 for Customer 3\" },\n])\n```\n\n----------------------------------------\n\nTITLE: Filtering Accessible Rows with apiPrefilter in Remult\nDESCRIPTION: Using apiPrefilter to automatically limit which rows a user can access based on their role. This example allows admins to see all tasks while limiting regular users to only see tasks they own.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n  apiPrefilter: () => {\n    // Admins can access all rows\n    if (remult.isAllowed(\"admin\")) return {}\n    // Non-admins can only access rows where they are the owner\n    return { owner: remult.user!.id }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Row-Level Authorization for Tasks in TypeScript\nDESCRIPTION: This code snippet shows how to set up row-level authorization for a Task entity in Remult. It demonstrates different authorization options including allowApiRead, allowApiInsert, allowApiDelete, and allowApiUpdate with conditional logic based on user roles and ownership.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/2-row-level-authorization/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```file:/shared/Task.ts title=\"shared/Task.ts\" collapse={13-30} add={4-8}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Running the Migration Generator Script\nDESCRIPTION: Command to execute the migration generator script using tsx, which creates migration files based on entity changes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx src/server/migrations/generate-migrations.ts\n```\n\n----------------------------------------\n\nTITLE: Adding New Tasks in React Component\nDESCRIPTION: This snippet shows how to add new tasks by implementing a form submission handler and updating the component state. It uses Remult's taskRepo.insert method to persist the new task to the database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/crud.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Todo() {\n  const [tasks, setTasks] = useState<Task[]>([])\n  const [newTaskTitle, setNewTaskTitle] = useState(\"\")\n\n  const addTask = async (e: FormEvent) => {\n    e.preventDefault()\n    try {\n      const newTask = await taskRepo.insert({ title: newTaskTitle })\n      setTasks([...tasks, newTask])\n      setNewTaskTitle(\"\")\n    } catch (error: unknown) {\n      alert((error as { message: string }).message)\n    }\n  }\n  //...\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks with Remult's where Clause in React\nDESCRIPTION: This code snippet demonstrates how to use Remult's find method with a where clause to filter tasks by their completed status. The filtering occurs server-side and translates to a REST API request with a query parameter.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/2-querying-data/3-filtering/content.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  taskRepo\n    .find({\n      where: {\n        completed: true,\n      },\n    })\n    .then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Fetching Unloaded toOne Relations with findOne in TypeScript\nDESCRIPTION: Shows how to retrieve toOne relations that were not initially loaded using the repository's relations method with findOne to get a customer related to a specific order.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nconst orderRepo = repo(Order)\nconst order = await orderRepo.findFirst({ id: 'm7m3xqyx4kwjaqcd0cu33q8g' })\nconst customer = await orderRepo.relations(order).customer.findOne()\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Remult's Consistent Frontend/Backend Syntax in TypeScript\nDESCRIPTION: This snippet demonstrates Remult's consistent query syntax used for both frontend and backend operations, including filtering, sorting, and limiting results. It shows how the same code translates to different operations depending on context.\nSOURCE: https://github.com/remult/remult/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Frontend - GET: /api/products?_limit=10&unitPrice.gt=5,_sort=name\n// Backend  - 'select name, unitPrice from products where unitPrice > 5 order by name limit 10'\nawait repo(Product).find({\n  limit: 10,\n  orderBy: {\n    name: 'asc',\n  },\n  where: {\n    unitPrice: { $gt: 5 },\n  },\n})\n\n// Frontend - PUT: '/api/products/product7' (body: { \"unitPrice\" : 7 })\n// Backend  - 'update products set unitPrice = 7 where id = product7'\nawait repo(Product).update('product7', { unitPrice: 7 })\n```\n\n----------------------------------------\n\nTITLE: TypeScript Server Configuration for Remult\nDESCRIPTION: TypeScript configuration file for the server portion of a Remult application using Fastify. It enables decorators and configures module resolution for Node.js.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/fastify.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\",\n    \"module\": \"nodenext\"\n  },\n  \"include\": [\"src/server/**/*\", \"src/shared/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Deletion in React\nDESCRIPTION: This snippet shows how to implement task deletion functionality. It includes a deleteTask function that removes the task from both the local state and the server using Remult's taskRepo.delete method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/crud.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  tasks.map(task => {\n    const setTask = (value: Task) =>\n      setTasks(tasks => tasks.map(t => (t === task ? value : t)))\n\n    const setCompleted = async (completed: boolean) =>\n      setTask(await taskRepo.save({ ...task, completed }))\n\n    const setTitle = (title: string) => setTask({ ...task, title })\n\n    const saveTask = async () => {\n      try {\n        setTask(await taskRepo.save(task))\n      } catch (error: unknown) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    const deleteTask = async () => {\n      try {\n        await taskRepo.delete(task)\n        setTasks(tasks.filter(t => t !== task))\n      } catch (error: unknown) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    return (\n      <div key={task.id}>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          onChange={e => setCompleted(e.target.checked)}\n        />\n        <input value={task.title} onChange={e => setTitle(e.target.value)} />\n        <button onClick={saveTask}>Save</button>\n        <button onClick={deleteTask}>Delete</button>\n      </div>\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Aggregation in Remult\nDESCRIPTION: Shows how to combine querying with aggregation to retrieve both paginated items and aggregated values (sum, average) in a single request.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Querying with aggregation:\nconst query = await repo.query({\n  where: { completed: false },\n  pageSize: 50,\n  aggregates: {\n    sum: ['salary'],\n    average: ['age'],\n  }\n});\n\nlet paginator = await query.paginator();\n// Accessing paginated items\nconsole.table(paginator.items);\n\n// Accessing aggregation results\nconsole.log('Total salary:', paginator.aggregates.salary.sum); // Sum of all salaries\nconsole.log('Average age:', paginator.aggregates.age.average);  // Average age\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading for a Related Entity in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up lazy loading for a 'many to one' relation in a Remult entity. It shows the Task entity with a lazy-loaded category field.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/lazy-loading-of-related-entities.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\", {\n  allowApiCrud: true\n})\nexport class Task extends IdEntity {\n  @Fields.string()\n  title = \"\"\n  @Fields.boolean()\n  completed = false\n  @Field(() => Category, {\n    lazy: true\n  })\n  category?: Category\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimum Length Validation in Remult Entity (TypeScript)\nDESCRIPTION: This snippet shows how to add a minimum length validation to the 'title' field of a Task entity using Remult's built-in Validators.minLength() function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/2-built-in-validations/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Task {\n  @Fields.uuid()\n  id = ''\n\n  @Fields.string<Task>({\n    validate: Validators.minLength(2),\n  })\n  title = ''\n\n  //....\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity Class in TypeScript\nDESCRIPTION: Creates a Task entity class with id, title, completed, and createdAt fields using Remult decorators. This class is used for both client-side and server-side modeling, and for generating API endpoints.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/entities.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields } from 'remult'\n\n@Entity('tasks', {\n  allowApiCrud: true,\n})\nexport class Task {\n  @Fields.cuid()\n  id = ''\n\n  @Fields.string()\n  title = ''\n\n  @Fields.boolean()\n  completed = false\n\n  @Fields.createdAt()\n  createdAt?: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth.js in SvelteKit Server Hooks\nDESCRIPTION: Server-side hooks implementation with Auth.js and Remult integration, including user validation and session management using the Credentials provider.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Handle } from '@sveltejs/kit'\nimport { sequence } from '@sveltejs/kit/hooks'\nimport { SvelteKitAuth } from '@auth/sveltekit'\nimport Credentials from '@auth/sveltekit/providers/credentials'\nimport { api as handleRemult } from './server/api'\nimport type { UserInfo } from 'remult'\n\n/**\n * Users that are allowed to log in.\n */\nconst validUsers: UserInfo[] = [\n  { id: '1', name: 'Jane', roles: ['admin'] },\n  { id: '2', name: 'Steve' },\n]\n\n/**\n * Handle authentication with authjs as an example\n * Based on article at https://authjs.dev/reference/sveltekit\n */\nexport const { handle: handleAuth } = SvelteKitAuth({\n  trustHost: true,\n  providers: [\n    Credentials({\n      credentials: {\n        name: {\n          placeholder: 'Try Steve or Jane',\n        },\n      },\n      authorize: (info) =>\n        validUsers.find((user) => user.name === info?.name) || null,\n    }),\n  ],\n  callbacks: {\n    session: ({ session, token }) => ({\n      ...session,\n      user: validUsers.find((user) => user.id === token?.sub),\n    }),\n  },\n})\n\nexport const handle = sequence(\n  // 1. Handle authentication\n  handleAuth,\n  // 2. Handle remult server side\n  handleRemult,\n)\n```\n\n----------------------------------------\n\nTITLE: Reusing Access Control in Vue Templates\nDESCRIPTION: Example of incorporating Remult's access control definitions in Vue templates to conditionally render UI elements based on user permissions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<tr>\n  <td>{{user.name}}</td>\n  <!-- Only show the admin field if the user is allowed to see it -->\n  <td v-if=\"userRepo.fields.admin.includeInApi(user)\">{{user.admin}}</td>\n  <!-- Only show the delete button if the user is allowed to delete the admin-->\n  <td v-if=\"userRepo.metadata.apiDeleteAllowed(user)\">\n    <button @click=\"deleteUser(user)\">Delete</button>\n  </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in Remult Entity\nDESCRIPTION: Shows how to create a custom validation rule using an arrow function that validates the minimum length of a title field. The function accepts the entity instance and throws an error message if validation fails.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/validation.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string<Task>({\n  validate: (task) => {\n    if (task.title.length < 3) throw \"The title must be at least 3 characters long\"\n  }\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Authorization in Remult\nDESCRIPTION: Setting up role-based access control for the Task entity, restricting certain operations to users with the admin role while allowing basic operations for all authenticated users.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/Task.ts\n\nimport { Allow, Entity, Fields } from \"remult\"\n\n@Entity<Task>(\"tasks\", {\n  allowApiCrud: Allow.authenticated,\n  allowApiInsert: \"admin\",\n  allowApiDelete: \"admin\"\n})\nexport class Task {\n  @Fields.uuid()\n  id!: string\n\n  @Fields.string({\n    validate: (task) => task.title.length > 2 || \"Too Short\",\n    allowApiUpdate: \"admin\"\n  })\n  title = \"\"\n\n  @Fields.boolean()\n  completed = false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in Remult Entity\nDESCRIPTION: Creating a custom validation function for the 'title' field that checks if the title length is at least 3 characters. The validation throws an error message when the condition is not met.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/Task.ts\n\n@Fields.string<Task>({\n  validate: (task) => {\n    if (task.title.length < 3) throw \"Too Short\"\n  }\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Deletion in Angular Component\nDESCRIPTION: This method deletes a task by calling the taskRepo.delete API with the task object as a parameter. After deletion from the database, it updates the local tasks array by filtering out the deleted task.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/crud.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/todo/todo.component.ts\n\nasync deleteTask(task: Task) {\n   await this.taskRepo.delete(task);\n   this.tasks = this.tasks.filter(t => t !== task);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Method in AuthController\nDESCRIPTION: Implements user authentication logic with a static user list and sign-in method. Validates user credentials and stores user information in the session.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/2-user-authentication/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst validUsers = [{ name: 'Jane' }, { name: 'Alex' }]\n\nexport class AuthController {\n  @BackendMethod({ allowed: true })\n  static async signIn(name: string) {\n    const user = validUsers.find((user) => user.name === name)\n    if (user) {\n      remult.user = {\n        id: user.name,\n        name: user.name,\n      }\n      remult.context.request!.session!['user'] = remult.user\n      return remult.user\n    } else {\n      throw Error(\"Invalid user, try 'Alex' or 'Jane'\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Realtime Updates with liveQuery in React Component\nDESCRIPTION: This snippet shows how to modify the useEffect hook to use liveQuery for subscribing to real-time updates of tasks. It uses the taskRepo.liveQuery() method and subscribes to changes, updating the state with info.applyChanges.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/5-live-query/2-realtime-updates/content.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  return taskRepo.liveQuery().subscribe((info) => setTasks(info.applyChanges))\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Hiding Fields with includeInApi in Remult (TypeScript)\nDESCRIPTION: This example demonstrates how to use the includeInApi option to prevent a specific field (password) from appearing in API responses in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/1-field-level-control/content.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n  includeInApi: false, // Omits this field from API responses\n})\npassword = ''\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult API in Next.js\nDESCRIPTION: This snippet shows how to set up the Remult API in a Next.js application. It registers the Task entity and enables the Admin UI.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/entities.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultNextApp } from \"remult/remult-next\"\nimport { Task } from \"./shared/Task\"\n\nconst api = remultNextApp({\n  entities: [Task],\n  admin: true\n})\n\nexport const { POST, PUT, DELETE, GET } = api\n```\n\n----------------------------------------\n\nTITLE: Setting Up Next.js API Route for Remult\nDESCRIPTION: Code for the catch-all API route handler that passes all API requests to the Remult API instance.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/index.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// src/app/api/[...remult]/route.ts\n\nimport { api } from '../../../api'\n\nexport const { POST, PUT, DELETE, GET } = api\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL Expression Field for Related Entity Data in Remult\nDESCRIPTION: Adding a customerCity field to the Order entity that retrieves the city from the related Customer entity using sqlExpression. This approach allows for direct sorting and filtering by the customer's city without additional queries.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/6-sql-expression/2-getting-a-field-from-a-relation/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ordersSortedByCity = await repo(Order).find({\n  orderBy: {\n    customerCity: 'asc',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Remult Entity\nDESCRIPTION: This snippet shows how to define a Remult entity class for a Product. It includes field definitions and API permissions using decorators.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// shared/product.ts\n\nimport { Entity, Fields } from 'remult'\n\n@Entity('products', {\n  allowApiCrud: true,\n  allowApiDelete: 'admin',\n})\nexport class Product {\n  @Fields.uuid()\n  id!: string\n\n  @Fields.string()\n  name = ''\n\n  @Fields.number()\n  unitPrice = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring CRUD Operations for Remult Live Queries\nDESCRIPTION: This snippet demonstrates how to update various CRUD operations in a React component to work with Remult's live queries. It removes manual state updates, relying on the live query subscription to manage state changes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/live-queries.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  tasks.map(task => {\n    const setTask = (value: Task) =>\n      setTasks(tasks => tasks.map(t => (t === task ? value : t)))\n\n    const setCompleted = async (completed: boolean) =>\n      // setTask(await taskRepo.save({ ...task, completed })) <- Delete this line\n      await taskRepo.save({ ...task, completed }) // <- replace with this line\n\n    const setTitle = (title: string) => setTask({ ...task, title })\n\n    const saveTask = async () => {\n      try {\n        // setTask(await taskRepo.save(task)) <- Delete this line\n        await taskRepo.save(task) // <- replace with this line\n      } catch (error: unknown) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    const deleteTask = async () => {\n      try {\n        await taskRepo.delete(task)\n        // setTasks(tasks.filter(t => t !== task)) <- Delete this line\n      } catch (error: unknown) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    //...\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Migration Execution Script\nDESCRIPTION: Command to execute the migration script using tsx, which applies pending migrations to update the database schema.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx src/server/migrations/migrate.ts\n```\n\n----------------------------------------\n\nTITLE: Using Remult in SolidStart Route Handlers\nDESCRIPTION: Shows how to use the withRemult method in SolidStart route handlers to access the remult object for database operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/api/test.ts\n\nimport { remult } from 'remult'\nimport { Task } from '../../../shared/Task'\nimport { api } from '../../../server/api'\n\nexport function GET() {\n  return api.withRemult(event, async () =>\n    ({ result: await remult.repo(Task).count() }),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Deletion Function in React with Remult\nDESCRIPTION: A function that handles the deletion of a task using Remult's repository API. It makes a DELETE request to the backend, updates the local state by filtering out the deleted task, and includes error handling.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/3-manipulating-data/3-delete/content.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nasync function deleteTask(task: Task) {\n  try {\n    await taskRepo.delete(task)\n    setTasks(tasks.filter((t) => t.id !== task.id))\n  } catch (error: any) {\n    alert((error as { message: string }).message)\n  }\n}\n\nuseEffect(() => {\n  taskRepo.find().then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Creating React Todo Component with Remult Integration\nDESCRIPTION: Implementation of a React component that fetches tasks from backend using Remult repository and displays them as a checkbox list. Uses useState for state management and useEffect for data fetching. The component leverages the shared Task type and Remult's repository pattern for data operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/1-introduction/4-display-the-task-list/content.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react'\nimport { Task } from '../shared/Task.js'\nimport { repo } from 'remult'\n\nconst taskRepo = repo(Task)\n\nexport function Todo() {\n  const [tasks, setTasks] = useState<Task[]>([])\n  useEffect(() => {\n    taskRepo.find({}).then(setTasks)\n  }, [])\n  return (\n    <div>\n      <h1>Todos</h1>\n      <main>\n        {tasks.map((task) => {\n          return (\n            <div key={task.id}>\n              <input type=\"checkbox\" checked={task.completed} />\n              {task.title}\n            </div>\n          )\n        })}\n      </main>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Performing GroupBy Aggregation with Remult Repository in TypeScript\nDESCRIPTION: Illustrates how to use the groupBy method of a Remult Repository to perform complex aggregations. This example groups data by country and city, sums salaries, and orders the results.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await repo.groupBy({\n  group: ['country', 'city'],\n  sum: ['salary'],\n  where: {\n    salary: { $ne: 1000 },\n  },\n  orderBy: {\n    country: 'asc',\n    salary: {\n      sum: 'desc',\n    },\n  },\n});\n\n// Accessing the results:\nconsole.log(results[0].country); // 'uk'\nconsole.log(results[0].city); // 'London'\nconsole.log(results[0].$count); // count for London, UK\nconsole.log(results[0].salary.sum); // Sum of salaries for London, UK\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Validators in Remult (TypeScript)\nDESCRIPTION: Shows how to use an array of validators, combining built-in validators with custom validation functions for more complex validation scenarios.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/validation.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Validators } from 'remult'\n\n@Fields.string({\n   validate: [\n      Validators.minLength(5),\n      Validators.maxLength(10),\n      (task)=> task.title.startsWith('No') || \"Need to start with No\"\n   ]\n})\ntitle = ''\n```\n\n----------------------------------------\n\nTITLE: Running the Nest.js server with Remult\nDESCRIPTION: This shell command starts the Nest.js server with Remult integration. It uses the npm script 'start' to launch the application, which will be accessible on port 3002 as configured in the main.ts file.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/nest.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: NOT Operator in Remult EntityFilter\nDESCRIPTION: Uses the $not operator to negate a condition. This will match records where the specified condition is false, effectively inverting the filter condition.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: {\n  $not: {\n    status: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Deletion with Remult\nDESCRIPTION: This function handles deleting a task from both the database and the local state. It uses Remult's delete method to remove the task from the database and then filters the task from the local tasks array.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/crud.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst deleteTask = async (e: Event, task: Task) => {\n  e.preventDefault()\n  await repo(Task).delete(task)\n  tasks = tasks.filter((c) => c.id !== task.id)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Entity-Level Authentication Requirements in Remult\nDESCRIPTION: Configuring the Task entity to require authenticated users for API CRUD operations by using the Allow.authenticated parameter in the @Entity decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\", {\n    allowApiCrud: Allow.authenticated\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Tasks in Vue with Remult\nDESCRIPTION: This snippet demonstrates how to update task properties (title and completion status) using Remult's taskRepo.save method. It binds input elements to task properties and includes a save button to persist changes to the backend.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/crud.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n//...\nasync function saveTask(task: Task) {\n  try {\n    await taskRepo.save(task)\n  } catch (error: unknown) {\n    alert((error as { message: string }).message)\n  }\n}\n</script>\n<template>\n  <!-- ... -->\n  <div v-for=\"task in tasks\">\n    <input type=\"checkbox\" v-model=\"task.completed\" @change=\"saveTask(task)\" />\n    <input v-model=\"task.title\" />\n    <button @click=\"saveTask(task)\">Save</button>\n  </div>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Object State in Immutable vs Mutable Patterns (TypeScript)\nDESCRIPTION: Demonstrates the difference between immutable and mutable object updates in TypeScript. The immutable update creates a new object, while the mutable update modifies the existing object directly.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/active-record.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Immutable update\nconst updatePerson = { ...person, name: 'newName' }\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Mutable update\nperson.name = 'newName'\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL with Express and Remult\nDESCRIPTION: Setup code for integrating GraphQL with Express server using graphql-yoga and remult. Includes API configuration, schema creation, and server initialization.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-graphql.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport { remultExpress } from 'remult/remult-express';\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { remultGraphql } from 'remult/graphql';\n\nconst app = express()\nconst entities = [Task]\nlet api = remultExpress({\n   entities\n});\napp.use(api);\nconst { typeDefs, resolvers } = remultGraphql({\n   entities\n});\nconst yoga = createYoga({\n   graphqlEndpoint: '/api/graphql',\n   schema: (createSchema({\n      typeDefs,\n      resolvers\n   }))\n})\napp.use(yoga.graphqlEndpoint, api.withRemult, yoga)\napp.listen(3002, () => console.log(\"Server started\"));\n```\n\n----------------------------------------\n\nTITLE: Frontend Backend Method Invocation\nDESCRIPTION: Example of calling the static backend method from the frontend code using async/await syntax.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/backendMethods.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait TasksController.setAll(true)\n```\n\n----------------------------------------\n\nTITLE: Loading Unfetched toMany Relations in TypeScript\nDESCRIPTION: Demonstrates how to load related records that were not initially retrieved using the repository's relations method to access and find orders related to a specific customer.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst customerRepo = repo(Customer)\nconst customer = await customerRepo.findFirst({ name: 'Abshire Inc' })\nconst orders = await customerRepo.relations(customer).orders.find()\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Completion Toggle in React\nDESCRIPTION: This snippet shows how to implement the ability to mark tasks as completed. It includes a setCompleted function that updates the task's completed status both in the local state and on the server using Remult's taskRepo.save method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/crud.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  tasks.map(task => {\n    const setTask = (value: Task) =>\n      setTasks(tasks => tasks.map(t => (t === task ? value : t)))\n\n    const setCompleted = async (completed: boolean) =>\n      setTask(await taskRepo.save({ ...task, completed }))\n\n    return (\n      <div key={task.id}>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          onChange={e => setCompleted(e.target.checked)}\n        />\n        {task.title}\n      </div>\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up GraphQL in Next.js App Router\nDESCRIPTION: Implementation of GraphQL route handler for Next.js App Router with Remult integration. Configures Yoga instance and handles GraphQL requests.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-graphql.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga, createSchema } from 'graphql-yoga'\nimport { remultGraphql } from 'remult/graphql'\nimport { api } from '../../../api'\nimport { Task } from '../../../shared/task'\n\nconst { typeDefs, resolvers } = remultGraphql({\n  entities: [Task],\n})\n\nconst yoga = createYoga({\n  graphqlEndpoint: '/api/graphql',\n  schema: createSchema({\n    typeDefs,\n    resolvers,\n  }),\n  fetchAPI: { Response },\n})\n\nconst handleRequest = (request: any, ctx: any) =>\n  api.withRemult(() => yoga.handleRequest(request, ctx))\n\nexport { handleRequest as GET, handleRequest as POST }\n```\n\n----------------------------------------\n\nTITLE: AuthController Implementation\nDESCRIPTION: Implements authentication controller with sign-in and sign-out functionality\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/auth.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, remult } from 'remult'\nimport type express from 'express'\nimport type from 'cookie-session'\n\ndeclare module 'remult' {\n  export interface RemultContext {\n    request?: express.Request\n  }\n}\n\nconst validUsers = [{ name: 'Jane' }, { name: 'Alex' }]\n\nexport class AuthController {\n  @BackendMethod({ allowed: true })\n  static async signIn(name: string) {\n    const user = validUsers.find((user) => user.name === name)\n    if (user) {\n      remult.user = {\n        id: user.name,\n        name: user.name,\n      }\n      remult.context.request!.session!['user'] = remult.user\n      return remult.user\n    } else {\n      throw Error(\"Invalid user, try 'Alex' or 'Jane'\")\n    }\n  }\n\n  @BackendMethod({ allowed: true })\n  static async signOut() {\n    remult.context.request!.session!['user'] = undefined\n    return undefined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Value-Focused Custom Validation in Remult (TypeScript)\nDESCRIPTION: Illustrates how to use the valueValidator function to create a custom validation rule that focuses solely on the field's value.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n   validate: valueValidator(value => value.length > 5)\n})\ntitle = ''\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering UI Elements Based on Authorization Rules\nDESCRIPTION: Adapting the frontend UI to conditionally show or hide elements based on the user's permissions, using entity metadata to check API operation allowances.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/Todo.tsx\n\n<main>\n  <Show when={taskRepo.metadata.apiInsertAllowed()}>\n    <form onSubmit={addTask}>\n      <input\n        value={newTaskTitle()}\n        placeholder=\"What needs to be done?\"\n        onInput={(e) => setNewTaskTitle(e.currentTarget.value)}\n      />\n      <button>Add</button>\n    </form>\n  </Show>\n  ...\n</main>\n```\n\n----------------------------------------\n\nTITLE: Defining Intermediate Table for Many-to-Many Relationship\nDESCRIPTION: Shows the implementation of an intermediate table (TagsToCustomers) to establish many-to-many relationships between Customer and Tag entities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<TagsToCustomers>('tagsToCustomers', {\n  id: {\n    customerId: true,\n    tagId: true,\n  },\n})\nexport class TagsToCustomers {\n  @Fields.string()\n  customerId = ''\n  @Fields.string()\n  tagId = ''\n  @Relations.toOne<TagsToCustomers, Tag>(() => Tag, 'tagId')\n  tag?: Tag\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-based Authorization in Task Entity\nDESCRIPTION: Enhanced Task entity with role-based permissions that restrict create, delete, and title update operations to admin users while allowing all authenticated users to view and toggle completion status.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Allow, Entity, Fields } from 'remult'\n\n@Entity<Task>('tasks', {\n  allowApiCrud: Allow.authenticated,\n  allowApiInsert: 'admin',\n  allowApiDelete: 'admin',\n})\nexport class Task {\n  @Fields.cuid()\n  id!: string\n\n  @Fields.string<Task>({\n    validate: (task) => {\n      if (task.title.length < 3)\n        throw 'The title must be at least 3 characters long'\n    },\n    allowApiUpdate: 'admin',\n  })\n  title: string = ''\n\n  @Fields.boolean()\n  completed: boolean = false\n\n  @Fields.createdAt()\n  completedAt: Date = new Date()\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Records in Remult\nDESCRIPTION: Demonstrates how to fetch a customer and their related orders using Remult's repository pattern and relations API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst customer = await customerRepo.findFirst({ name: 'Abshire Inc' })\nconst orders = await customer._.relations.orders.find()\n```\n\n----------------------------------------\n\nTITLE: Initializing Remult Server Middleware with Next.js\nDESCRIPTION: Code for setting up Remult API routes in a Next.js application. Creates an API router that handles GET, POST, PUT, and DELETE requests.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// src/app/api/[...remult]/route.ts\n\nimport { remultNextApp } from 'remult/remult-next'\n\nexport const api = remultNextApp({}) // [!code highlight]\n\nexport const { GET, POST, PUT, DELETE } = api\n```\n\n----------------------------------------\n\nTITLE: Filtering Customers by Total Amount Using sqlExpression Field\nDESCRIPTION: This code shows how to filter customers based on their total spending amount. It retrieves only customers who have spent more than $50 by using a greater than ($gt) comparison operator on the totalAmount field.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/6-sql-expression/1-introduction/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst highSpendingCustomers = await repo(Customer).find({\n  where: {\n    totalAmount: { $gt: 50 },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Rule for String Field in Remult (TypeScript)\nDESCRIPTION: Shows how to create a custom validation rule using the 'validate' prop in the @Fields.string decorator. The rule checks if the title length is greater than 5 characters.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n   validate: (task)=> task.title.length > 5 || \"too short\"\n})\ntitle = ''\n```\n\n----------------------------------------\n\nTITLE: Implementing AllowedForInstance in Entity Decorator in TypeScript\nDESCRIPTION: Demonstrates the use of AllowedForInstance in an Entity decorator to set instance-specific permissions based on user role and task completion status.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/allowed.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n    allowApiUpdate: (task) => remult.isAllowed(\"admin\") && !task!.completed\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Server for Production in TypeScript\nDESCRIPTION: Modifies the Express server to serve static files, handle routing for the React app, and use environment variables for port configuration. It also includes compression and helmet middleware for performance and security.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/index.ts\n\nimport express from \"express\"\nimport { api } from \"./api.js\"\nimport session from \"cookie-session\"\nimport { auth } from \"./auth.js\"\n\nconst app = express()\napp.use(\n  session({\n    secret: process.env[\"SESSION_SECRET\"] || \"my secret\"\n  })\n)\napp.use(auth)\napp.use(api)\nconst frontendFiles = process.cwd() + \"/dist\";\napp.use(express.static(frontendFiles));\napp.get(\"/*\", (_, res) => {\n  res.sendFile(frontendFiles + \"/index.html\");\n});\napp.listen(process.env[\"PORT\"] || 3002, () => console.log(\"Server started\"));\n```\n\n----------------------------------------\n\nTITLE: Setting up Remult API with Hono adapter\nDESCRIPTION: Creates the Remult API integration point using the remultHono adapter, which serves as the middleware configuration for Hono.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hono.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/api.ts\n\nimport { remultHono } from 'remult/remult-hono'\n\nexport const api = remultHono()\n```\n\n----------------------------------------\n\nTITLE: Setting up Remult Express Middleware\nDESCRIPTION: Code to create a Remult Express middleware that will handle API requests for CRUD operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/api.ts\n\nimport { remultExpress } from 'remult/remult-express'\n\nexport const api = remultExpress()\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult Express Middleware\nDESCRIPTION: Setup of Remult middleware in Express application\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/express.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/api.ts\n\nimport { remultExpress } from 'remult/remult-express'\n\nexport const api = remultExpress()\n```\n\n----------------------------------------\n\nTITLE: Custom Field Validation with Exception Throwing\nDESCRIPTION: Example showing a custom validation function that throws an exception when validation fails.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string<Task>({\n   validate: task=>{\n     if (task.title.length<3)\n         throw \"Too Short\";\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Required Field Validation in Remult Entity\nDESCRIPTION: Modifies a Task entity by adding a required field validator to the title property using Remult's Validators.required. This ensures the title cannot be empty on both client and server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Validators } from 'remult';\n\n@Fields.string({\n  validate: Validators.required\n})\ntitle: string = '';\n```\n\n----------------------------------------\n\nTITLE: Implementing Universal Data Loading with Remult\nDESCRIPTION: Code for implementing a universal load function in SvelteKit that works with Remult. This leverages SvelteKit's event.fetch for server-side rendering while respecting API rules.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { remult } from 'remult'\nimport type { PageLoad } from './$types'\n\nexport const load = (async (event) => {\n  // Instruct remult to use the special svelte fetch\n  // Like this univeral load will work in SSR & CSR\n  remult.useFetch(event.fetch)\n  return repo(Task).find()\n}) satisfies PageLoad\n```\n\n----------------------------------------\n\nTITLE: Securing Backend Methods with Authentication\nDESCRIPTION: This code adds authentication protection to a backend method by using the @BackendMethod decorator with Allow.authenticated, ensuring only authenticated users can call this method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@BackendMethod({ allowed: Allow.authenticated })\n```\n\n----------------------------------------\n\nTITLE: Calling Backend Methods in TypeScript\nDESCRIPTION: Shows how to invoke a backend method using the Remult call function with optional parameters.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_remult.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait remult.call(TasksController.setAll, undefined, true);\n```\n\n----------------------------------------\n\nTITLE: Modifying User Roles in AuthController for Remult Authentication\nDESCRIPTION: This snippet demonstrates how to assign roles to users in the AuthController. It shows how to give the 'admin' role to a specific user (Jane) during sign-in.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/auth.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst validUsers = [{ name: \"Jane\", admin: true }, { name: \"Steve\" }];\n\nexport class AuthController {\n  @BackendMethod({ allowed: true })\n  static async signIn(name: string) {\n    const user = validUsers.find((user) => user.name === name);\n    if (user) {\n      remult.user = {\n        id: user.name,\n        name: user.name,\n        roles: user.admin ? [\"admin\"] : [],\n      };\n      remult.context.request!.session![\"user\"] = remult.user;\n      return remult.user;\n    } else {\n      throw Error(\"Invalid user, try 'Steve' or 'Jane'\");\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Remult Query Method with Aggregation\nDESCRIPTION: Example of using the query method to get both data and aggregate information in a single request, demonstrating how to access the returned items and aggregated values.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await repo\n  .query({\n    where: { completed: false },\n    pageSize: 50,\n    aggregates: {\n      sum: ['salary'],\n      average: ['age'],\n    },\n  })\n  .paginator()\n// Accessing the items from the first page\nconsole.table(result.items)\n// Accessing the aggregation results\nconsole.log(result.aggregates.salary.sum) // Total salary sum\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Entity in TypeScript\nDESCRIPTION: This snippet defines the Customer entity using Remult decorators. It includes fields for id, name, and city.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields } from 'remult'\n\n@Entity('customers')\nexport class Customer {\n  @Fields.cuid()\n  id = ''\n  @Fields.string()\n  name = ''\n  @Fields.string()\n  city = ''\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Relational Data with Include Option\nDESCRIPTION: This snippet demonstrates how to fetch Order data including the related Customer information using the include option.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await repo(Order).find({\n  include: {\n    customer: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating TasksController with Backend Method (TypeScript)\nDESCRIPTION: A server-side controller that implements the setAllCompleted logic as a backend method. This approach avoids multiple API calls by executing the task updates directly on the server. The @BackendMethod decorator exposes this as an API endpoint.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/backend-methods.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, remult } from 'remult'\nimport { Task } from './Task'\n\nexport class TasksController {\n  @BackendMethod({ allowed: true })\n  static async setAllCompleted(completed: boolean) {\n    const taskRepo = remult.repo(Task)\n\n    for (const task of await taskRepo.find()) {\n      await taskRepo.save({ ...task, completed })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Role-based UI Visibility for Task Creation\nDESCRIPTION: Implements conditional rendering in the UI to only show the task creation form to users with permission to insert new tasks, based on the entity's metadata.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/todo.tsx\n\n<main>\n  {taskRepo.metadata.apiInsertAllowed() && (\n    <form onSubmit={addTask}>\n      <input\n        value={newTaskTitle}\n        placeholder=\"What needs to be done?\"\n        onChange={e => setNewTaskTitle(e.target.value)}\n      />\n      <button>Add</button>\n    </form>\n  )}\n  ...\n</main>\n```\n\n----------------------------------------\n\nTITLE: Integrating User Authentication with Remult in SolidStart\nDESCRIPTION: Configuring Remult to use the authentication system by providing the getUser function to the remultSolidStart setup.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api.ts\n\nimport { getUser } from \"./auth.js\"\n\nexport const api = remultSolidStart({\n  //...\n  getUser,\n})\n//...\n```\n\n----------------------------------------\n\nTITLE: Defining Order Entity in TypeScript\nDESCRIPTION: This snippet defines the Order entity using Remult decorators. It includes fields for id, customer, and amount.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields } from 'remult'\n\n@Entity('orders')\nexport class Order {\n  @Fields.cuid()\n  id = ''\n  @Fields.string()\n  customer = ''\n  @Fields.number()\n  amount = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult API with PostgreSQL Data Provider\nDESCRIPTION: Updated API configuration that imports and uses the Postgres data provider. The code conditionally uses Postgres when DATABASE_URL is available and falls back to the default JSON storage when not available.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/database.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { remultSveltekit } from 'remult/remult-sveltekit'\nimport { Task } from './shared/Task'\nimport { TasksController } from './shared/TasksController'\nimport { createPostgresDataProvider } from 'remult/postgres'\nimport { DATABASE_URL } from '$env/static/private'\n\nexport const api = remultSveltekit({\n  entities: [Task],\n  controllers: [TasksController],\n  dataProvider: DATABASE_URL\n    ? createPostgresDataProvider({ connectionString: DATABASE_URL })\n    : undefined,\n  getUser: async (event) => {\n    const auth = await event?.locals?.auth()\n    return auth?.user as UserInfo\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Backend Method for Task Completion in TypeScript\nDESCRIPTION: This snippet shows how to create a TasksController class with a backend method for setting all tasks' completion status. It uses Remult's BackendMethod decorator and repository pattern.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/6-backend-methods/2-refactor-to-backend/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, remult } from 'remult'\nimport { Task } from './Task.js'\n\nexport class TasksController {\n  @BackendMethod({ allowed: true })\n  static async setAllCompleted(completed: boolean) {\n    const taskRepo = remult.repo(Task)\n    for (const task of await taskRepo.find()) {\n      await taskRepo.update(task, { completed })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filters with Arguments in Remult\nDESCRIPTION: Creates a custom filter that accepts arguments and is evaluated on the backend. This allows for parameterized filters that maintain security by only sending the filter name and arguments to the backend.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nstatic createCustom<entityType, argsType>(\n  translator: (\n    args: argsType,\n    r: Remult,\n  ) => EntityFilter<entityType> | Promise<EntityFilter<entityType>>,\n  key?: string,\n): ((y: argsType) => EntityFilter<entityType>) & customFilterInfo<entityType>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Roles for Allowed Value in TypeScript\nDESCRIPTION: Demonstrates how to set multiple roles for the Allowed data type using an array in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/allowed.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  allowApiRead: [Roles.admin, Roles.productManager]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TasksController with Backend Method\nDESCRIPTION: Server-side implementation that moves the setAllCompleted logic to a backend method. The @BackendMethod decorator exposes the method as an API endpoint for better performance when working with multiple tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/backend-methods.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, repo } from 'remult'\nimport { Task } from './Task'\n\nexport class TasksController {\n  @BackendMethod({ allowed: true })\n  static async setAllCompleted(completed: boolean) {\n    const taskRepo = repo(Task)\n    for (const task of await taskRepo.find()) {\n      await taskRepo.save({ ...task, completed })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js for SvelteKit\nDESCRIPTION: Command to install the Auth.js packages required for implementing authentication in a SvelteKit application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @auth/core @auth/sveltekit -D\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Type-Safe Frontend Code in React\nDESCRIPTION: Example of using Remult's repository pattern in a React component to fetch and display product data. The code demonstrates type-safe querying with filtering, sorting, and limiting capabilities.\nSOURCE: https://github.com/remult/remult/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [products, setProducts] = useState<Product[]>([])\n\nuseEffect(() => {\n  repo(Product)\n    .find({\n      limit: 10,\n      orderBy: {\n        name: 'asc',\n      },\n      where: {\n        unitPrice: { $gt: 5 },\n      },\n    })\n    .then(setProducts)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Configuring generateMigrations Function in TypeScript\nDESCRIPTION: This snippet shows the structure and options for the generateMigrations function in Remult. It includes configuration for entities, data provider, migration folders, and other related settings.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_generatemigrations.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateMigrations({\n  entities: Entity[],\n  dataProvider: DataProvider | (() => Promise<DataProvider>),\n  migrationsFolder?: string,\n  snapshotFile?: string,\n  migrationsTSFile?: string,\n  endConnection?: boolean\n})\n```\n\n----------------------------------------\n\nTITLE: Adding New Tasks in Vue with Remult\nDESCRIPTION: This snippet shows how to add new tasks using Remult's taskRepo.insert method. It includes a form for task input and handles the insertion process, updating the local task list upon successful addition.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/crud.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n//...\nconst newTaskTitle = ref(\"\")\nasync function addTask() {\n  try {\n    const newTask = await taskRepo.insert({ title: newTaskTitle.value })\n    tasks.value.push(newTask)\n    newTaskTitle.value = \"\"\n  } catch (error: unknown) {\n    alert((error as { message: string }).message)\n  }\n}\n</script>\n<template>\n  <div>\n    <h1>todos</h1>\n    <main>\n      <form @submit.prevent=\"addTask()\">\n        <input v-model=\"newTaskTitle\" placeholder=\"What needs to be done?\" />\n        <button>Add</button>\n      </form>\n      <div v-for=\"task in tasks\">\n        <input type=\"checkbox\" v-model=\"task.completed\" />\n        {{ task.title }}\n      </div>\n    </main>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registering TasksController in Remult Next.js App Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register the TasksController in the Remult Next.js app configuration by adding it to the controllers array in the api module.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/backend-methods.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TasksController } from \"./shared/TaskController\"\n\nexport const api = remultNextApp({\n  //...\n  controllers: [TasksController]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Saving Hook in Remult Entity\nDESCRIPTION: This example demonstrates how to use the saving lifecycle hook to set creation and update timestamps on a Task entity. It automatically sets createdAt for new tasks and updates lastUpdated for all tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/lifecycle-hooks.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n  saving: async (task, e) => {\n    if (e.isNew) {\n      task.createdAt = new Date(); // Set the creation date for new tasks.\n    }\n    task.lastUpdated = new Date(); // Update the last updated date.\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Query Subscription in TodoComponent\nDESCRIPTION: Converts the TodoComponent to use live queries for real-time data updates, including initial data fetching and subsequent state changes. Implements OnDestroy to properly clean up subscriptions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/live-queries.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnDestroy, OnInit } from '@angular/core';\n...\nexport class TodoComponent implements OnInit, OnDestroy {\n  //...\n  taskRepo = remult.repo(Task)\n  tasks: Task[] = []\n  unsubscribe = () => {}\n  ngOnInit() {\n    this.unsubscribe = this.taskRepo\n      .liveQuery({\n        limit: 20,\n        orderBy: { createdAt: \"asc\" }\n        //where: { completed: true },\n      })\n      .subscribe(info => (this.tasks = info.applyChanges(this.tasks)))\n  }\n  ngOnDestroy() {\n    this.unsubscribe()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators in Remult EntityFilter\nDESCRIPTION: Demonstrates how to use comparison operators (greater than, greater than or equal, less than, less than or equal) in two equivalent syntaxes: using symbols or using the $gt, $gte, $lt, $lte operators.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwhere:{ status:{ \">\":1 }}\nwhere:{ status:{ \">=\":1 }}\nwhere:{ status:{ \"<\":1 }}\nwhere:{ status:{ \"<=\":1 }}\n//or\nwhere:{ status:{ $gt:1 }}\nwhere:{ status:{ $gte:1 }}\nwhere:{ status:{ $lt:1 }}\nwhere:{ status:{ $lte:1 }}\n```\n\n----------------------------------------\n\nTITLE: Adding UI Buttons for Task Completion Toggle (HTML)\nDESCRIPTION: HTML code that adds two buttons to the UI for setting all tasks as completed or uncompleted. Each button calls the setAllCompleted method with the appropriate boolean value.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/backend-methods.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <button (click)=\"setAllCompleted(true)\">Set all as completed</button>\n  <button (click)=\"setAllCompleted(false)\">Set all as uncompleted</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Integrating remult-admin with Express\nDESCRIPTION: This snippet demonstrates how to set up a basic Express server with remult-admin enabled. It shows the configuration required to expose entity management through the admin interface by setting the admin option to true in the remultExpress configuration.\nSOURCE: https://github.com/remult/remult/blob/main/projects/remult-admin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\n\nconst app = express()\n\nconst entities = [\n  /* entity types */\n]\nconst api = remultExpress({\n  entities,\n  admin: true,\n})\napp.use(api)\n\napp.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Fine-Tuning toMany Relation with include Option in TypeScript\nDESCRIPTION: Demonstrates how to use the include option in queries to further customize the behavior of toMany relations for specific queries, including setting limits and additional filtering conditions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await customerRepo.find({\n  include: {\n    orders: {\n      limit: 10,\n      where: {\n        completed: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Upserting Single Entity in Remult\nDESCRIPTION: Demonstrates how to use the upsert method to insert a new entity or update an existing one based on a where condition.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Upserting a single entity: updates 'task a' if it exists, otherwise creates it.\ntaskRepo.upsert({ where: { title: 'task a' }, set: { completed: true } });\n```\n\n----------------------------------------\n\nTITLE: Defining a toMany relation in Remult\nDESCRIPTION: Example of using the Relations.toMany decorator to create a one-to-many relationship between entities. Shows both a basic usage and usage with a custom field name.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_relations.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Relations.toMany(() => Order)\norders?: Order[];\n\n// or with a custom field name:\n@Relations.toMany(() => Order, \"customerId\")\norders?: Order[];\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON File Data Provider for Remult\nDESCRIPTION: This snippet demonstrates how to set up a JSON file-based data provider for Remult. It uses JsonDataProvider and JsonEntityFileStorage to store data in JSON files.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { JsonDataProvider } from \"remult\"\nimport { JsonEntityFileStorage } from \"remult/server\"\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: async () =>\n      new JsonDataProvider(new JsonEntityFileStorage(\"./db\"))\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Backend-Only Validation with Unique Constraint in Remult (TypeScript)\nDESCRIPTION: Demonstrates how to use the unique validator, which runs only on the backend, in combination with other validators.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/validation.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Validators } from 'remult'\n\n@Fields.string({\n   validate: [\n      Validators.minLength(5),\n      Validators.unique()\n   ]\n})\ntitle = ''\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Relations Filter for Orders in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom filter using sqlRelationsFilter to query orders based on the customer's city. It showcases the syntax for defining relational filters efficiently.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/4-sql-relations-filter/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Order {\n  // ... other fields\n\n  @Relations.toOne(() => Customer)\n  customer!: Customer;\n\n  static fromCity = Filter.createCustom<Order, { city: string }>(\n    ({ city }) =>\n      sqlRelationsFilter(Order)({\n        customer: {\n          some: {\n            city: { $contains: city }\n          }\n        }\n      })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic toOne relation in Remult\nDESCRIPTION: Simple example of using the Relations.toOne decorator to create a one-to-one relationship between entities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_relations.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Relations.toOne(() => Customer)\ncustomer?: Customer;\n```\n\n----------------------------------------\n\nTITLE: Validating Entities in Remult\nDESCRIPTION: Shows how to validate an entity or specific fields, handling validation errors and accessing field-specific error messages.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst error = repo.validate(task);\nif (error){\n  alert(error.message);\n  alert(error.modelState.title);//shows the specific error for the title field\n}\n// Can also be used to validate specific fields\nconst error = repo.validate(task,\"title\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-based Authorization in Angular Template for Todo App\nDESCRIPTION: This HTML template for the todo component incorporates role-based authorization. It conditionally renders add and delete buttons based on the user's permissions, using Remult's metadata methods.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/auth.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<h1>todos</h1>\n<main>\n  <form *ngIf=\"taskRepo.metadata.apiInsertAllowed()\" (submit)=\"addTask()\">\n    <input\n      placeholder=\"What needs to be done?\"\n      [(ngModel)]=\"newTaskTitle\"\n      name=\"newTaskTitle\"\n    />\n    <button>Add</button>\n  </form>\n  <div *ngFor=\"let task of tasks\">\n    <input\n      type=\"checkbox\"\n      [(ngModel)]=\"task.completed\"\n      (change)=\"saveTask(task)\"\n    />\n    <input [(ngModel)]=\"task.title\" />\n    <button (click)=\"saveTask(task)\">Save</button>\n    <button\n      *ngIf=\"taskRepo.metadata.apiDeleteAllowed(task)\"\n      (click)=\"deleteTask(task)\"\n    >\n      Delete\n    </button>\n  </div>\n  <div>\n    <button (click)=\"setAllCompleted(true)\">Set all as completed</button>\n    <button (click)=\"setAllCompleted(false)\">Set all as uncompleted</button>\n  </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Requirements to Task Entity\nDESCRIPTION: Modifying the Task entity to require authentication for CRUD operations by using the Allow.authenticated function in the Entity decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Allow } from 'remult'// [!code ++]\n\n@Entity(\"tasks\", {\n    allowApiCrud: Allow.authenticated // [!code ++]\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Frontend Validation Errors with Remult in TypeScript\nDESCRIPTION: Example showing how Remult validation errors are handled on the frontend. The code demonstrates the detailed validation error format provided by Remult when attempting to insert an invalid entity.\nSOURCE: https://github.com/remult/remult/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await repo(Product).insert({ name: '', unitPrice: -1 })\n} catch (e: any) {\n  console.error(e)\n  /* Detailed error object ->\n{\n  \"modelState\": {\n    \"name\": \"Should not be empty\",\n    \"unitPrice\": \"must be greater than 0\"\n  },\n  \"message\": \"Name: Should not be empty\"\n}\n*/\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Component for Task Display\nDESCRIPTION: This React component fetches and displays tasks using Remult. It uses useState and useEffect hooks to manage state and fetch data.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/entities.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport { useEffect, useState } from 'react'\nimport { remult } from 'remult'\nimport { Task } from '../shared/Task'\n\nconst taskRepo = remult.repo(Task)\n\nexport default function Todo() {\n  const [tasks, setTasks] = useState<Task[]>([])\n\n  useEffect(() => {\n    taskRepo.find().then(setTasks)\n  }, [])\n  return (\n    <div>\n      <h1>Todos</h1>\n      <main>\n        {tasks.map((task) => {\n          return (\n            <div key={task.id}>\n              <input type=\"checkbox\" checked={task.completed} />\n              {task.title}\n            </div>\n          )\n        })}\n      </main>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult Express API and Inserting Sample Tasks in TypeScript\nDESCRIPTION: This code sets up a Remult Express API with the Task entity and includes an initApi function to insert sample tasks if the database is empty. It uses the repo function to get a Task repository for database operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/1-introduction/3-insert-data-on-the-backend/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { Task } from '../shared/Task.js'\nimport { repo } from 'remult'\n\nexport const app = express()\nexport const api = remultExpress({\n  entities: [Task],\n  initApi: async () => {\n    const taskRepo = repo(Task)\n    if ((await taskRepo.count()) === 0) {\n      await taskRepo.insert([\n        { title: 'Clean car' },\n        { title: 'Read a book' },\n        { title: 'Buy groceries', completed: true },\n        { title: 'Do laundry' },\n        { title: 'Cook dinner', completed: true },\n        { title: 'Walk the dog' },\n      ])\n    }\n  },\n})\n\napp.use(api)\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with @Entity Decorator in TypeScript\nDESCRIPTION: This example demonstrates how to use the @Entity decorator to define a Task entity with UUID, string, and boolean fields. It also shows how to set allowApiCrud option for API access.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport  { Entity, Fields } from \"remult\";\n@Entity(\"tasks\", {\n   allowApiCrud: true\n})\nexport class Task {\n   @Fields.uuid()\n   id!: string;\n   @Fields.string()\n   title = '';\n   @Fields.boolean()\n   completed = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Add Task Form Based on User Permissions\nDESCRIPTION: Frontend code that uses entity metadata to conditionally show the task creation form only to users with insert permissions (admin role).\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<main>\n  {#if repo(Task).metadata.apiInsertAllowed()}// [!code ++]\n    <form onsubmit={addTask}>\n      <input bind:value={newTaskTitle} placeholder=\"What needs to be done?\" />\n      <button>Add</button>\n    </form>\n  {/if}// [!code ++]\n</main>\n```\n\n----------------------------------------\n\nTITLE: Implementing remultNext for Next.js API Routes (TypeScript)\nDESCRIPTION: Defines functions for integrating Remult with Next.js, both for API routes (remultNext) and App Router (remultNextApp).\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remultNext(\n  options: RemultServerOptions<NextApiRequest>,\n): RemultNextServer\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remultNextApp(\n  options?: RemultServerOptions<Request>,\n): RemultNextAppServer\n```\n\n----------------------------------------\n\nTITLE: Connecting Remult to MySQL Database using Knex\nDESCRIPTION: Code for connecting Remult to a MySQL database using the createKnexDataProvider function. Includes examples for both Knex configuration and existing Knex connection.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { createKnexDataProvider } from \"remult/remult-knex\"\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: createKnexDataProvider({\n      // Knex client configuration for MySQL\n      client: \"mysql2\",\n      connection: {\n        user: \"your_database_user\",\n        password: \"your_database_password\",\n        host: \"127.0.0.1\",\n        database: \"test\"\n      }\n    })\n  })\n)\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { KnexDataProvider } from 'remult/remult-knex'\nimport { remultExpress } from 'remult/remult-express'\nimport knex from 'knex'\n\nconst knexDb = knex({\n  client: '...',\n  connection: '...',\n})\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new KnexDataProvider(knexDb), // [!code highlight]\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Query Subscription in SolidJS Todo Component\nDESCRIPTION: Sets up a live query subscription in the onMount hook that updates the task list in realtime. The subscription uses orderBy and limit options, and subscribes to changes with the applyChanges function to update component state.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/live-queries.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nonMount(() =>\n  onCleanup(\n    taskRepo\n      .liveQuery({\n        limit: 20,\n        orderBy: { createdAt: \"asc\" },\n        //where: { completed: true },\n      })\n      .subscribe((info) => setTasks(info.applyChanges))\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Integration for Remult in TypeScript\nDESCRIPTION: Provides a remultGraphql function that generates GraphQL resolvers, rootValue, and typeDefs based on Remult entities. Supports customization through options like comment removal and request context handling.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remultGraphql(options: {\n  removeComments?: boolean\n  entities: ClassType<any>[]\n  getRemultFromRequest?: (req: any) => Promise<Remult>\n}): {\n  resolvers: {\n    Query: Record<string, unknown>\n    Mutation: Record<string, unknown>\n  }\n  rootValue: Record<string, any>\n  typeDefs: string\n}\n//[ ] ClassType from ./classType.js is not exported\n//[ ] Remult from ./index.js is not exported\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios as HTTP Client in Remult\nDESCRIPTION: Example showing how to set Axios as the HTTP client for Remult API calls.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_apiclient.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Using Axios\nremult.apiClient.httpClient = axios;\n```\n\n----------------------------------------\n\nTITLE: CLI Configuration Options\nDESCRIPTION: Configuration options selected during Next.js project creation, including TypeScript, ESLint, and routing preferences.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nextjs.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n✔ Would you like to use TypeScript? ... Yes\n✔ Would you like to use ESLint? ... No\n✔ Would you like to use Tailwind CSS? ... No\n✔ Would you like to use `src/` directory? ... Yes\n✔ Would you like to use App Router? (recommended) ... Yes\n✔ Would you like to customize the default import alias? ... No\n```\n\n----------------------------------------\n\nTITLE: Subscribing to LiveQuery Changes in TypeScript\nDESCRIPTION: This snippet demonstrates how to subscribe to changes in a live query using the subscribe method. It shows setting up a query with limit and orderBy options, subscribing to changes, and storing the unsubscribe function for later use.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_livequery.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Subscribing to changes in a live query\nconst unsubscribe = taskRepo\n  .liveQuery({\n    limit: 20,\n    orderBy: { createdAt: 'asc' }\n    //where: { completed: true },\n  })\n  .subscribe(info => setTasks(info.applyChanges));\n\n// Later, to unsubscribe\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Group By Aggregation Example\nDESCRIPTION: Complex example showing grouping by multiple fields with aggregations and ordering\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await repo.groupBy({\n  group: ['country', 'city'],\n  sum: ['salary'],\n  where: {\n    salary: { $ne: 1000 },\n  },\n  orderBy: {\n    country: 'asc',\n    salary: {\n      sum: 'desc',\n    },\n  },\n});\n\n// Accessing the results:\nconsole.log(results[0].country); // 'uk'\nconsole.log(results[0].city); // 'London'\nconsole.log(results[0].$count); // count for London, UK\nconsole.log(results[0].salary.sum); // Sum of salaries for London, UK\n```\n\n----------------------------------------\n\nTITLE: Implementing remultExpress Server Handler (TypeScript)\nDESCRIPTION: Defines the remultExpress function for creating a Remult API server in Express applications, with options for body parser configuration.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remultExpress(\n  options?: RemultServerOptions<express.Request> & {\n    bodyParser?: boolean\n    bodySizeLimit?: string\n  },\n): RemultExpressServer\n```\n\n----------------------------------------\n\nTITLE: Custom DB Value Conversion for Arrays in Remult\nDESCRIPTION: This snippet shows how to use the valueConverter option to store an array as a comma-separated string in the database. It demonstrates the conversion process between the in-memory array representation and the database string format.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.object<Task, string[]>({\n  valueConverter: {\n    toDb: x => (x ? x.join(\",\") : undefined),\n    fromDb: x => (x ? x.split(\",\") : undefined)\n  }\n})\ntags: string[] = []\n```\n\n----------------------------------------\n\nTITLE: Reusing Access Control in Svelte Templates\nDESCRIPTION: Example of integrating Remult's access control definitions in Svelte templates to conditionally display UI elements based on user permissions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<tr>\n  <td>{{user.name}}</td>\n  <!-- Only show the admin field if the user is allowed to see it -->\n  {#if userRepo.fields.admin.includeInApi(user)}\n  <td>{{user.admin}}</td>\n  {/if}\n  <!-- Only show the delete button if the user is allowed to delete the admin-->\n  {#if userRepo.metadata.apiDeleteAllowed(user)}\n  <td>\n    <button (click)=\"deleteUser(user)\">Delete</button>\n  </td>\n  {/if}\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Auth Controller Implementation\nDESCRIPTION: Complete implementation of AuthController class with sign-in and sign-out functionality using Remult backend methods.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, remult } from 'remult'\nimport type express from 'express'\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type from 'cookie-session'\n\ndeclare module 'remult' {\n  export interface RemultContext {\n    request?: express.Request\n  }\n}\n\nconst validUsers = [{ name: 'Jane' }, { name: 'Alex' }]\n\nexport class AuthController {\n  @BackendMethod({ allowed: true })\n  static async signIn(name: string) {\n    const user = validUsers.find((user) => user.name === name)\n    if (user) {\n      remult.user = {\n        id: user.name,\n        name: user.name,\n      }\n      remult.context.request!.session!['user'] = remult.user\n      return remult.user\n    } else {\n      throw Error(\"Invalid user, try 'Alex' or 'Jane'\")\n    }\n  }\n\n  @BackendMethod({ allowed: true })\n  static async signOut() {\n    remult.context.request!.session!['user'] = undefined\n    return undefined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Delete Button Based on User Permissions\nDESCRIPTION: Frontend code that conditionally shows the delete button only to users with delete permissions (admin role), ensuring UI consistency with backend authorization rules.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n  <input\n    type=\"checkbox\"\n    checked={task.completed}\n    oninput={(e) => setCompleted(task, e.currentTarget.checked)}\n  />\n  <!-- <span>{task.title}</span> -->\n  <input name=\"title\" bind:value={task.title} />\n  <button onclick={(e) => saveTask(e, task)}>Save</button>\n  {#if repo(Task).metadata.apiDeleteAllowed(task)} // [!code ++]\n    <button onclick={(e) => deleteTask(e, task)}>Delete</button>\n  {/if}// [!code ++]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Data: Traditional vs Active Record Approach (TypeScript)\nDESCRIPTION: Compares the traditional approach of updating an entity using a repository with the Active Record style using EntityBase. The Active Record approach allows for more intuitive and direct manipulation of the entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/active-record.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Traditional approach without Active Record:\nawait repo(Person).update(person, { name: 'newName' })\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Active Record style\nperson.name = 'newName'\nawait person.save()\n```\n\n----------------------------------------\n\nTITLE: Using Remult GroupBy and Aggregate Methods\nDESCRIPTION: Example of using the groupBy method to perform aggregations on entity data, grouping by multiple fields and calculating sum, with an additional where filter condition.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrepo(Employee).groupBy({\n  group: ['country', 'city'],\n  sum: ['salary'],\n  where: {\n    salary: {\n      $gt: 2000,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating TasksController with Backend Method in TypeScript\nDESCRIPTION: This snippet defines a TasksController class with a static setAllCompleted method decorated as a backend method. It uses Remult to update all tasks' completion status on the server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/backend-methods.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, remult } from 'remult'\nimport { Task } from './Task'\n\nexport class TasksController {\n  @BackendMethod({ allowed: true })\n  static async setAllCompleted(completed: boolean) {\n    const taskRepo = remult.repo(Task)\n\n    for (const task of await taskRepo.find()) {\n      await taskRepo.update(task.id, { completed })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Querying with Asynchronous Iteration in Remult\nDESCRIPTION: Shows how to use the query method with asynchronous iteration to process large sets of data efficiently without loading all records into memory at once.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Basic usage with asynchronous iteration:\nfor await (const task of taskRepo.query()) {\n  // Perform some operation on each task\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Data with Repository in Remult\nDESCRIPTION: Demonstrates how to use the aggregate method to perform calculations on entity data, such as summing values across all items in a repository.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Aggregating  (summing the salary field across all items):\nconst totalSalary = await repo.aggregate({\n  sum: ['salary'],\n});\nconsole.log(totalSalary.salary.sum); // Outputs the total sum of salaries\n```\n\n----------------------------------------\n\nTITLE: Setting up Authorization Tests with TestApiDataProvider in TypeScript\nDESCRIPTION: This code sets up authorization tests using TestApiDataProvider to simulate API calls. It includes test cases for non-authenticated users, non-admin users, and admin users attempting to delete tasks. The tests verify that only admin users can successfully delete tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/9-testing/2-testing-api-rules/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describe, test, expect, beforeEach } from 'vitest'\nimport { remult, repo, InMemoryDataProvider } from 'remult'\nimport { TestApiDataProvider } from 'remult/server'\nimport { createSqlite3DataProvider } from 'remult/remult-sqlite3'\nimport { Task } from '../shared/Task'\n\ndescribe('Test authorization', () => {\n  beforeEach(async () => {\n    remult.dataProvider = TestApiDataProvider({\n      dataProvider: createSqlite3DataProvider(),\n    })\n    await repo(Task).insert({ title: 'my task' })\n  })\n\n  test('non-authenticated users cannot delete', async () => {\n    try {\n      remult.user = undefined // Simulate unauthenticated user\n      const task = await repo(Task).findFirst()\n      await repo(Task).delete(task)\n      throw new Error('Should not reach here')\n    } catch (error: any) {\n      expect(error.message).toBe('Forbidden')\n    }\n  })\n\n  test('Non-admin users cannot delete', async () => {\n    try {\n      remult.user = { id: '1' } // Simulate authenticated non-admin user\n      const task = await repo(Task).findFirst()\n      await repo(Task).delete(task)\n      throw new Error('Should not reach here')\n    } catch (error: any) {\n      expect(error.message).toBe('Forbidden')\n    }\n  })\n\n  test('Admin users can delete', async () => {\n    remult.user = { id: '1', roles: ['admin'] } // Simulate authenticated admin user\n    const task = await repo(Task).findFirst()\n    await repo(Task).delete(task)\n    expect(await repo(Task).count()).toBe(0)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Establishing Many-to-One Relation in Order Entity\nDESCRIPTION: This snippet shows how to establish a many-to-one relation from Order to Customer using the @Relations.toOne() decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields, Relations } from 'remult'\nimport { Customer } from '../customer.js'\n\n@Entity('orders')\nexport class Order {\n  @Fields.cuid()\n  id = ''\n  @Relations.toOne(() => Customer)\n  customer?: Customer\n  @Fields.number()\n  amount = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Remult Server Middleware with NestJS\nDESCRIPTION: Code for setting up Remult middleware in a NestJS application. Remult is initialized as a global middleware.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// src/main.ts\n\nimport { remultExpress } from 'remult/remult-express'\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n\n  app.use(remultExpress({})) // [!code highlight]\n\n  await app.listen(3000)\n}\nbootstrap()\n```\n\n----------------------------------------\n\nTITLE: Configuring apiPrefilter for Entity Access Control in TypeScript\nDESCRIPTION: These examples show how to use apiPrefilter to restrict data access based on conditions or user roles. The first example filters out archived items, while the second example allows admins to access all rows but restricts non-admins to non-archived items.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Only include non-archived items in API responses\napiPrefilter: { archive: false }\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Allow admins to access all rows, but restrict non-admins to non-archived items\napiPrefilter: () => remult.isAllowed(\"admin\") ? {} : { archive: false }\n```\n\n----------------------------------------\n\nTITLE: Sorting Customers by Total Amount Using sqlExpression Field\nDESCRIPTION: This code demonstrates how to retrieve customers sorted by their total spending amount in descending order using a sqlExpression field. It queries the Customer repository and orders the results based on the totalAmount field.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/6-sql-expression/1-introduction/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst customersSortedByAmount = await repo(Customer).find({\n  orderBy: {\n    totalAmount: 'desc',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Relations with Remult in TypeScript\nDESCRIPTION: Example of defining and querying entity relationships with Remult. The code shows how to define one-to-many relationships between categories and products, and how to include related entities in queries with filtering.\nSOURCE: https://github.com/remult/remult/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Categories).find({\n  orderBy: {\n    name: 'asc ',\n  },\n  include: {\n    products: {\n      where: {\n        unitPrice: { $gt: 5 },\n      },\n    },\n  },\n})\n\n// Entity Definitions\nexport class Product {\n  //...\n  @Relations.toOne(Category)\n  category?: Category\n}\nexport class Category {\n  //...\n  @Relations.toMany<Category, Product>(() => Product, `category`)\n  products?: Product[]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Order Counting with Threshold\nDESCRIPTION: Implements a bigOrderCount field in the Customer entity that counts only orders with amounts greater than 50. Demonstrates conditional counting with filters on related entities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/6-sql-expression/3-sql-relations/content.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsqlRelations(Customer).orders.$count({\n    where: {\n      amount: { \"$gt\": 50 }\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity-Level Authentication in Task Entity\nDESCRIPTION: This code adds authentication requirements to the Task entity using the @Entity decorator with Allow.authenticated to ensure only authenticated users can perform CRUD operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\", {\n    allowApiCrud: Allow.authenticated\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Limit in Remult Repository Query\nDESCRIPTION: Demonstrates how to limit the number of tasks fetched from the database to 20 items using Remult's find method options.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/sorting-filtering.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Todo() {\n  onMount(() =>\n    taskRepo\n      .find({\n        limit: 20,\n      })\n      .then(setTasks)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Lazy Loading Behavior in Repository Find Method (TypeScript)\nDESCRIPTION: These snippets show how to override the default lazy loading behavior when using the repository's find method in Remult. It includes examples of loading no related entities and specifying which fields to load.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/lazy-loading-of-related-entities.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait taskRepo.find({\n  load: () => []\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait taskRepo.find({\n  load: task => [task.category!]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Filter in Order Entity\nDESCRIPTION: Implementation of a custom filter in the Order entity to filter active orders by year. The filter checks for specific order statuses and filters orders within the given year.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/1-custom-filters/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic activeOrdersFor = Filter.createCustom<Order, { year: number }>((args) => ({\n  $and: [\n    {\n      status: {\n        $in: ['created', 'confirmed', 'pending', 'blocked', 'delayed'],\n      },\n    },\n    {\n      orderDate: {\n        $gt: new Date(args.year, 0, 1),\n        $lt: new Date(args.year + 1, 0, 1),\n      },\n    },\n  ],\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Data Provider in Remult API Server\nDESCRIPTION: Code snippet showing how to import and configure the Postgres data provider in the Remult API server module. The highlighted lines indicate the specific changes needed to add Postgres support.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/database.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/api.ts\n\n//...\n\nimport { createPostgresDataProvider } from \"remult/postgres\"\n\nexport const api = remultExpress({\n  //...\n  dataProvider: createPostgresDataProvider({\n    connectionString: \"your connection string\"\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Saving Hook with fieldRef in Remult\nDESCRIPTION: An alternative implementation of a field-specific saving hook that uses the fieldRef parameter to set the value directly, rather than accessing the entity property.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/lifecycle-hooks.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.Date({\n  saving: (_, fieldRef, e) => {\n    if (e.isNew) fieldRef.value = new Date()\n  },\n})\ncreatedAt = new Date()\n```\n\n----------------------------------------\n\nTITLE: Creating Task via cURL POST Request\nDESCRIPTION: Shell command to create a new task by sending a POST request to the Remult API endpoint.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/entities.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:5173/api/tasks -d \"{\\\"title\\\": \\\"Clean car\\\"}\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Entity Authentication\nDESCRIPTION: Implementation of authentication requirement for Task CRUD operations using Remult's Allow.authenticated function in the Entity decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\", {\n    allowApiCrud: Allow.authenticated\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Relations Class with Entity Relationship Decorators\nDESCRIPTION: A class providing decorators for defining entity relationships. It includes methods for establishing one-to-one and one-to-many relationships between entities with flexible configuration options.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Relations {\n  /**\n   * Define a to-one relation between entities, indicating a one-to-one relationship.\n   * If no field or fields are provided, it will automatically create a field in the database\n   * to represent the relation.\n   *\n   * @param toEntityType A function that returns the target entity type.\n   * @param options (Optional): An object containing options for configuring the to-one relation.\n   * @returns A decorator function to apply the to-one relation to an entity field.\n   *\n   * Example usage:\n   * ```\n   * @Relations.toOne(() => Customer)\n   * customer?: Customer;\n   * ```\n   * ```\n   * Fields.string()\n   * customerId?: string;\n   *\n   * @Relations.toOne(() => Customer, \"customerId\")\n   * customer?: Customer;\n   * ```\n   * ```\n   * Fields.string()\n   * customerId?: string;\n   *\n   * @Relations.toOne(() => Customer, {\n   *   field: \"customerId\",\n   *   defaultIncluded: true\n   * })\n   * customer?: Customer;\n   * ```\n   * ```\n   * Fields.string()\n   * customerId?: string;\n   *\n   * @Relations.toOne(() => Customer, {\n   *   fields: {\n   *     customerId: \"id\",\n   *   },\n   * })\n   * customer?: Customer;\n   * ```\n   */\n  static toOne<entityType, toEntityType>(\n    toEntityType: () => ClassType<toEntityType>,\n    options?:\n      | (FieldOptions<entityType, toEntityType> &\n          Pick<\n            RelationOptions<entityType, toEntityType, any, any>,\n            \"defaultIncluded\"\n          >)\n      | RelationOptions<entityType, toEntityType, entityType>\n      | keyof entityType,\n  ): (\n    target: any,\n    context:\n      | ClassFieldDecoratorContextStub<entityType, toEntityType | undefined>\n      | string,\n    c?: any,\n  ) => void\n  /**\n   * Define a toMany relation between entities, indicating a one-to-many relationship.\n   * This method allows you to establish a relationship where one entity can have multiple related entities.\n   *\n   * @param toEntityType A function that returns the target entity type.\n   * @param fieldInToEntity (Optional) The field in the target entity that represents the relation.\n   *                       Use this if you want to specify a custom field name for the relation.\n   * @returns A decorator function to apply the toMany relation to an entity field.\n   *\n   * Example usage:\n   * ```\n   * @Relations.toMany(() => Order)\n   * orders?: Order[];\n   *\n   * // or with a custom field name:\n   * @Relations.toMany(() => Order, \"customerId\")\n   * orders?: Order[];\n   * ```\n   */\n  static toMany<entityType, toEntityType>(\n    toEntityType: () => ClassType<toEntityType>,\n    fieldInToEntity?: keyof toEntityType,\n  ): ClassFieldDecorator<entityType, toEntityType[] | undefined>\n  /**\n   * Define a toMany relation between entities, indicating a one-to-many relationship.\n   * This method allows you to establish a relationship where one entity can have multiple related entities.\n   * You can also specify various options to customize the relation and control related data retrieval.\n   *\n   * @param toEntityType A function that returns the target entity type.\n   * @param options An object containing options for configuring the toMany relation.\n   *                - field (Optional): The field in the target entity that represents the relation.\n   *                  Use this if you want to specify a custom field name for the relation.\n   *                - findOptions (Optional): Customize the options for finding related entities.\n   *                  You can set limits, order, where conditions, and more.\n\n\n```\n\n----------------------------------------\n\nTITLE: Registering Entity with Remult Express Middleware\nDESCRIPTION: Configures the server's API module by registering the Task entity with Remult using the remultExpress middleware. This enables CRUD operations for the Task entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/entities.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/api.ts\n\nimport { remultExpress } from \"remult/remult-express\"\nimport { Task } from \"../shared/Task\"\n\nexport const api = remultExpress({\n  entities: [Task]\n})\n```\n\n----------------------------------------\n\nTITLE: Parameterized SQL Updates\nDESCRIPTION: Demonstrates safe SQL updates using bound parameters to prevent SQL injection\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/running-sql-on-the-server.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst priceToUpdate = 5\nconst products = await dbNamesOf(Product)\nconst sql = SqlDatabase.getDb()\nlet command = sql.createCommand()\nawait command.execute(\n  `UPDATE ${products} SET ${products.price} = ${products.price} + ${command.param(priceToUpdate)}`,\n)\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE products SET price = price + $1\nArguments: { '$1': 5 }\n```\n\n----------------------------------------\n\nTITLE: Using the Literal Field Type with String Literals\nDESCRIPTION: Example showing how to define a field that can only hold specific string literal values, creating a type-safe enum-like field.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyEntity {\n  @Fields.literal(() => ['open', 'closed', 'frozen', 'in progress'] as const)\n  status: 'open' | 'closed' | 'frozen' | 'in progress' = 'open';\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Related Data with Includes in Remult TypeScript\nDESCRIPTION: This code demonstrates how to fetch customer data including orders and their related products. It uses the include option to specify nested relations, allowing for the retrieval of product details associated with each order through the intermediate ProductInOrder entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/1-relations/4-many-to-many/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrepo(Customer).find({\n  include: {\n    orders: {\n      include: {\n        products: {\n          include: {\n            product: true, // Fetch product details such as name, price, etc.\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Calling Backend Method from Frontend in Remult\nDESCRIPTION: This snippet shows how to call a backend method from the frontend using Remult. It demonstrates the usage of the repo object to access the method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/6-backend-methods/meta.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait remult.repo(User).resetPassword(userId, newPassword);\n```\n\n----------------------------------------\n\nTITLE: Installing Remult Package with Various Package Managers\nDESCRIPTION: Commands to install the Remult package using different package managers. The same package is used for both frontend and backend code.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install remult\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add remult\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add remult\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add remult\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Where Clause in TypeScript\nDESCRIPTION: Demonstrates how to use the where parameter in a find operation to filter data. This example shows filtering for incomplete tasks using Remult's EntityFilter interface.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nawait taskRepo.find({where: { completed:false }})\n```\n\n----------------------------------------\n\nTITLE: Securing Backend Methods with Authentication Requirements in TypeScript\nDESCRIPTION: This code snippet demonstrates how to protect a backend method (setAllCompleted) by adding an authentication requirement to the @BackendMethod decorator, ensuring only authenticated users can execute the method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/1-introduction/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TasksController {\n  @BackendMethod({ allowed: remult.authenticated })\n  static async setAllCompleted(completed: boolean) {\n```\n\n----------------------------------------\n\nTITLE: Rendering Task Form and List in React\nDESCRIPTION: This TSX snippet demonstrates how to render a form for adding new tasks and display the list of existing tasks. It includes input handling for the new task title and maps over the tasks array to render each task.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/crud.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nreturn (\n  <div>\n    <h1>Todos</h1>\n    <main>\n      <form onSubmit={addTask}>\n        <input\n          value={newTaskTitle}\n          placeholder=\"What needs to be done?\"\n          onChange={e => setNewTaskTitle(e.target.value)}\n        />\n        <button>Add</button>\n      </form>\n      {tasks.map(task => {\n        return (\n          <div key={task.id}>\n            <input type=\"checkbox\" checked={task.completed} />\n            {task.title}\n          </div>\n        )\n      })}\n    </main>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.string Decorator in Remult\nDESCRIPTION: Defines a field of type string in a Remult entity using the @Fields.string() decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string()\ntitle = '';\n```\n\n----------------------------------------\n\nTITLE: Adding Task Title Update and Save Functionality in React\nDESCRIPTION: Extends the task management UI to allow editing task titles with an input field and saving changes with a button. Uses Remult's taskRepo.save() to update the database with modified task data.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/crud.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\n\n{\n  tasks.map(task => {\n    const setTask = (value: Task) =>\n      setTasks(tasks => tasks.map(t => (t === task ? value : t)))\n\n    const setCompleted = async (completed: boolean) =>\n      setTask(await taskRepo.save({ ...task, completed }))\n\n    const setTitle = (title: string) => setTask({ ...task, title })\n\n    const saveTask = async () => {\n      try {\n        setTask(await taskRepo.save(task))\n      } catch (error: unknown) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    return (\n      <div key={task.id}>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          onChange={e => setCompleted(e.target.checked)}\n        />\n        <input value={task.title} onChange={e => setTitle(e.target.value)} />\n        <button onClick={saveTask}>Save</button>\n      </div>\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Renaming and Saving in React\nDESCRIPTION: This snippet demonstrates how to allow renaming of tasks and saving the changes. It includes setTitle and saveTask functions that update the local state and persist changes to the server using Remult's taskRepo.save method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/crud.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  tasks.map(task => {\n    const setTask = (value: Task) =>\n      setTasks(tasks => tasks.map(t => (t === task ? value : t)))\n\n    const setCompleted = async (completed: boolean) =>\n      setTask(await taskRepo.save({ ...task, completed }))\n\n    const setTitle = (title: string) => setTask({ ...task, title })\n\n    const saveTask = async () => {\n      try {\n        setTask(await taskRepo.save(task))\n      } catch (error: unknown) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    return (\n      <div key={task.id}>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          onChange={e => setCompleted(e.target.checked)}\n        />\n        <input value={task.title} onChange={e => setTitle(e.target.value)} />\n        <button onClick={saveTask}>Save</button>\n      </div>\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Hook in Remult Entity\nDESCRIPTION: A code example showing how to add custom validation logic to a Task entity using the validation lifecycle hook. This ensures that task titles meet a minimum length requirement before saving.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/lifecycle-hooks.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n  validation: async (task, e) => {\n    if (task.title.length < 5) {\n      throw new Error(\"Task title must be at least 5 characters long.\");\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reusing Access Control in React Frontend Components\nDESCRIPTION: Example of leveraging Remult's access control definitions in React components to conditionally render UI elements based on user permissions, ensuring consistent access control across the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction UserComponent({ user }: { user: User }) {\n  //...\n  return (\n    <tr>\n      <td>{user.name}</td>\n      {/* Only show the admin field if the user is allowed to see it */}\n      {userRepo.fields.admin.includeInApi(user) && <td>{user.admin}</td>}\n      {/* Only show the delete button if the user is allowed to delete the admin */}\n      {userRepo.metadata.apiDeleteAllowed(user) && (\n        <td>\n          <button onClick={deleteUser}>Delete</button>\n        </td>\n      )}\n    </tr>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom NanoID Field Type in TypeScript with Remult\nDESCRIPTION: This snippet demonstrates how to create a custom field type using NanoID to generate unique IDs for Remult entities. It uses the nanoid library to create URL-friendly IDs and configures the field to automatically generate values when needed.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nanoid } from 'nanoid'\nimport { Fields, type FieldOptions } from 'remult'\n\nexport function NanoIdField<entityType = any>(\n  ...options: FieldOptions<entityType, string>[]\n) {\n  return Fields.string<entityType>(\n    {\n      allowApiUpdate: false, // Disallow updating the ID through the API\n      defaultValue: () => nanoid(), // Generate a new NanoID as the default value\n      saving: (_, record) => {\n        if (!record.value) {\n          record.value = nanoid() // Generate a new NanoID if the value is not set\n        }\n      },\n    },\n    ...options,\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Related Entity Filtering with SQL-Based Filters\nDESCRIPTION: Enhances the TimeEntry apiPrefilter by using SqlDatabase.rawFilter to create a SQL-based filter that directly applies the Task permissions in the database query, improving performance by avoiding in-memory filtering.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/4-filtering-related-rows-based-on-user-permissions/content.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```solution:/shared/TimeEntry.ts title=\"shared/TimeEntry.ts\" add={6-18} collapse={21-36}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Completion Toggle in SolidJS\nDESCRIPTION: Adds the ability to mark tasks as completed by adding a setCompleted function that updates the task's completed status in the database and updates the local state.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/crud.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/Todo.tsx\n\n<For each={tasks}>\n  {(task, i) => {\n    async function setCompleted(completed: boolean) {\n      const updatedTask = await taskRepo.update(task, { completed })\n      setTasks(i(), updatedTask)\n    }\n    return (\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          oninput={(e) => setCompleted(e.target.checked)}\n        />\n        {task.title}\n      </div>\n    )\n  }}\n</For>\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity ID in TypeScript\nDESCRIPTION: These examples demonstrate how to set the id property for an entity. The first example shows a single-column id, while the second shows a multi-column id configuration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n//Single column id\n@Entity<Products>(\"products\", { id: 'productCode' })\n```\n\nLANGUAGE: typescript\nCODE:\n```\n//Multiple columns id\n@Entity<OrderDetails>(\"orderDetails\", { id:['orderId:', 'productCode'] })\n```\n\n----------------------------------------\n\nTITLE: Updating Task Addition Logic for Live Queries\nDESCRIPTION: Modifies the addTask method to remove manual state updates since the live query subscription will handle state changes automatically.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/live-queries.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync addTask() {\n  try {\n    const newTask = await this.taskRepo.insert({ title: this.newTaskTitle })\n    //this.tasks.push(newTask) <-- this line is no longer needed\n    this.newTaskTitle = \"\"\n  } catch (error: any) {\n    alert(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Field Validation in Remult\nDESCRIPTION: Code showing how to add required validation to a title field in a Task entity using Remult's Validators.required. This validation will run on both client and server sides automatically.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/Task.ts\n\n@Fields.string({\n  validate: Validators.required\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Task List Component\nDESCRIPTION: Vue component that displays and manages tasks using Remult repository for data fetching and state management.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/entities.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { onMounted, ref } from \"vue\";\nimport { remult } from \"remult\";\nimport { Task } from \"./shared/Task\";\n\nconst taskRepo = remult.repo(Task);\nconst tasks = ref<Task[]>([]);\nonMounted(() => taskRepo.find().then((items) => (tasks.value = items)));\n</script>\n<template>\n  <div>\n    <h1>todos</h1>\n    <main>\n      <div v-for=\"task in tasks\">\n        <input type=\"checkbox\" v-model=\"task.completed\" />\n        {{ task.title }}\n      </div>\n    </main>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Knex Database Integration\nDESCRIPTION: Examples of using Knex query builder with Remult, including basic queries and entity filtering\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/running-sql-on-the-server.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = await dbNamesOf(Task)\nconst knex = KnexDataProvider.getDb()\nconst result = await knex(tasks.$entityName).count()\n\nconsole.log(result[0].count)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = await dbNamesOf(Task)\nconst knex = KnexDataProvider.getDb()\nconst r = await knex(tasks.$entityName)\n  .count()\n  .where(await KnexDataProvider.filterToRaw(Task, { id: [1, 3] }))\nconsole.log(r[0].count)\n```\n\n----------------------------------------\n\nTITLE: Ordering Products by Name and Price\nDESCRIPTION: Examples of ordering products by single and multiple fields with ascending/descending options\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Products).find({ orderBy: { name: \"asc\" }})\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult DataProvider with Oracle and Knex\nDESCRIPTION: TypeScript code to set up the Remult dataProvider using Knex with Oracle database configuration. It includes Express setup and Remult integration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/oracle.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { createKnexDataProvider } from \"remult/remult-knex\"\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: createKnexDataProvider({\n      // Knex client configuration for Oracle\n      client: \"oracledb\",\n      connection: {\n        user: \"your_database_user\",\n        password: \"your_database_password\",\n        connectString: \"SERVER\" // Specify your Oracle server connection string\n      }\n    })\n  })\n)\n\napp.listen(3000, () => console.log(\"Server is running on port 3000\"))\n```\n\n----------------------------------------\n\nTITLE: Multi-Field Relations Configuration\nDESCRIPTION: Example of configuring relations based on multiple fields using the fields option, showing Customer and Order entities with branch-based relationships.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('customers')\nexport class Customer {\n  @Fields.cuid()\n  id = ''\n  @Fields.number()\n  branchId = 0\n  @Fields.string()\n  name = ''\n  @Fields.string()\n  city = ''\n}\n\n@Entity('orders')\nexport class Order {\n  @Fields.cuid()\n  id = ''\n  @Fields.number()\n  branchId = 0\n  @Fields.string({ dbName: 'customer' })\n  customerId = ''\n  @Relations.toOne<Order, Customer>(() => Customer, {\n    fields: {\n      branchId: 'branchId',\n      id: 'customerId',\n    },\n  })\n  customer?: Customer\n  @Fields.number()\n  amount = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bearer Token Authorization to Remult API Requests\nDESCRIPTION: Example demonstrating how to add Bearer token authorization headers to every API request made through Remult by customizing the fetch implementation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_apiclient.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Adding bearer token authorization\nremult.apiClient.httpClient = (\n  input: RequestInfo | URL,\n  init?: RequestInit\n) => {\n  return fetch(input, {\n    ...init,\n    headers: authToken\n      ? {\n          ...init?.headers,\n          authorization: 'Bearer ' + authToken,\n        }\n      : init?.headers,\n\n    cache: 'no-store',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Repository in TypeScript\nDESCRIPTION: Creates a repository instance for a specific entity type using the Remult repo method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_remult.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst taskRepo = remult.repo(Task);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Field Relations with dbName in TypeScript\nDESCRIPTION: Demonstrates how to define a custom field relation using dbName option to map to existing database columns. Shows configuration for Order entity with Customer relation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('orders')\nexport class Order {\n  @Fields.cuid()\n  id = ''\n  @Fields.string({ dbName: 'customer' })\n  customerId = ''\n  @Relations.toOne(() => Customer, 'customerId')\n  customer?: Customer\n  @Fields.number()\n  amount = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setAllCompleted Method in TodoComponent (TypeScript)\nDESCRIPTION: A client-side implementation of a method that sets the completed status of all tasks. It iterates through all tasks fetched from the repository and saves each with the updated completion status, making individual API calls for each task.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/backend-methods.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync setAllCompleted(completed: boolean) {\n  for (const task of await this.taskRepo.find()) {\n    await this.taskRepo.save({ ...task, completed });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relation in Customer Entity\nDESCRIPTION: Sets up a one-to-many relation between Customer and Order entities in the Customer.ts file. The 'orders' field is defined as an array of Order objects.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/1-relations/2-one-to-many/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\norders: {\n  type: [Order],\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Completion Status\nDESCRIPTION: Shows how to filter tasks using where clause based on completion status\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait taskRepo.find({where: { completed:false }})\n```\n\n----------------------------------------\n\nTITLE: Implementing setAllCompleted Function in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to implement a setAllCompleted function in a React component to update the completed status of all tasks. It uses the taskRepo to find and save tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/backend-methods.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst setAllCompleted = async (completed: boolean) => {\n  for (const task of await taskRepo.find()) {\n    await taskRepo.save({ ...task, completed })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Authorization with Arrow Functions in Remult (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use an arrow function for dynamic field-level authorization in Remult, allowing either an admin or the task owner to update the completed field.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/1-field-level-control/content.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.boolean<Task>({\n  allowApiUpdate: task => remult.isAllowed(\"admin\") || task.ownerId === remult.user?.id,\n})\ncompleted = false\n```\n\n----------------------------------------\n\nTITLE: BackendMethod Non-Transactional Configuration\nDESCRIPTION: Demonstrates how to configure a backend method to run without transaction support.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_backendmethod.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{allowed: true, transactional: false}\n```\n\n----------------------------------------\n\nTITLE: Complex SQL Filtering with EntityFilter\nDESCRIPTION: Shows how to convert Remult EntityFilter objects into SQL where clauses for complex queries\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/running-sql-on-the-server.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst order = await dbNamesOf(Order)\nconst sql = SqlDatabase.getDb()\nconst command = sql.createCommand()\nconst filterSql = await SqlDatabase.filterToRaw(\n  Order,\n  {\n    status: ['created', 'confirmed', 'pending', 'blocked', 'delayed'],\n    createdAt: {\n      $gte: new Date(year, 0, 1),\n      $lt: new Date(year + 1, 0, 1),\n    },\n  },\n  command,\n)\nconst result = await command.execute(\n  `SELECT COUNT(*) FROM ${order} WHERE ${filterSql}`,\n)\n```\n\n----------------------------------------\n\nTITLE: Enhanced Customer Entity with Tag Relations\nDESCRIPTION: Demonstrates how to add a toMany relationship to the Customer entity for accessing associated tags.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('customers')\nexport class Customer {\n  @Fields.cuid()\n  id = ''\n  @Fields.string()\n  name = ''\n  @Fields.string()\n  city = ''\n  @Relations.toMany(() => TagsToCustomers, 'customerId')\n  tags?: TagsToCustomers[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.date Decorator in Remult\nDESCRIPTION: Defines a date field (including time) in a Remult entity using the @Fields.date() decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.date()\nstatusDate = new Date()\n```\n\n----------------------------------------\n\nTITLE: Refactoring Task Management Operations in React Component\nDESCRIPTION: This snippet shows how to refactor task management operations (setting completed status, updating title, saving, and deleting tasks) in a React component to work with Remult's live queries. It removes redundant state updates, relying on the live query to handle state changes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/live-queries.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  tasks.map(task => {\n    const setTask = (value: Task) =>\n      setTasks(tasks => tasks.map(t => (t === task ? value : t)))\n\n    const setCompleted = async (completed: boolean) =>\n      // setTask(await taskRepo.save({ ...task, completed })) <- Delete this line\n      await taskRepo.save({ ...task, completed }) // <- replace with this line\n\n    const setTitle = (title: string) => setTask({ ...task, title })\n\n    const saveTask = async () => {\n      try {\n        // setTask(await taskRepo.save(task)) <- Delete this line\n        await taskRepo.save(task) // <- replace with this line\n      } catch (error: unknown) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    const deleteTask = async () => {\n      try {\n        await taskRepo.delete(task)\n        // setTasks(tasks.filter(t => t !== task)) <- Delete this line\n      } catch (error: unknown) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    //...\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Remult Repository in TypeScript\nDESCRIPTION: Shows how to create a Repository instance for a specific entity type using the remult.repo method. This is a key part of working with entities in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nconst taskRepo = remult.repo(Task);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Entities in Remult\nDESCRIPTION: Demonstrates how to insert multiple entities at once using the insert method with an array of items.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait taskRepo.insert([{title:\"task a\"}, {title:\"task b\", completed:true }])\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Query Subscription in React useEffect Hook\nDESCRIPTION: This snippet shows how to replace a static data fetch with a live query subscription in a React component's useEffect hook. It sets up a realtime connection that updates the Tasks state automatically.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/live-queries.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  return taskRepo\n    .liveQuery({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" }\n      //where: { completed: true },\n    })\n    .subscribe(info => setTasks(info.applyChanges))\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Universal Hooks Transport for Remult Entities\nDESCRIPTION: Implementation of SvelteKit's Universal hooks transport feature to automatically handle serialization of Remult entities without manual toJson/fromJson calls.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { repo, type ClassType } from 'remult'\nimport { Task } from './demo/todo/Task'\nimport type { Transport } from '@sveltejs/kit'\nimport { api } from './server/api'\n\n// You can have:\n// A/ a local entity array to work only these ones (like here)\n//  or\n// B/ import a global entity array that will be\n//    shared between backend and frontend (not in ./server/api.ts)\nconst entities = [Task]\n\nexport const transport: Transport = {\n  remultTransport: {\n    encode: (value: any) => {\n      for (let index = 0; index < entities.length; index++) {\n        const element = entities[index] as ClassType<any>\n        if (value instanceof element) {\n          return {\n            ...repo(element).toJson(value),\n            entity_key: repo(element).metadata.key,\n          }\n        }\n      }\n    },\n    decode: (value: any) => {\n      for (let index = 0; index < entities.length; index++) {\n        const element = entities[index] as ClassType<any>\n        if (value.entity_key === repo(element).metadata.key) {\n          return repo(element).fromJson(value)\n        }\n      }\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Update Function in React with Remult\nDESCRIPTION: This snippet defines an asynchronous function setCompleted that updates a task's completion status using Remult's taskRepo.update method. It then updates the component's state with the modified task.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/3-manipulating-data/2-update/content.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nasync function setCompleted(task: Task, completed: boolean) {\n  const updatedTask = await taskRepo.update(task, { completed })\n  setTasks(tasks.map((t) => (t.id === updatedTask.id ? updatedTask : t)))\n}\nuseEffect(() => {\n  taskRepo.find().then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Adding Sorting to Remult Queries\nDESCRIPTION: This code extends the pagination example by adding sorting functionality. It sorts tasks in ascending order by their createdAt timestamp, ensuring older tasks appear first in the list. The orderBy option in the find method is used to specify sorting criteria.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/sorting-filtering.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/components/todo.tsx\n\nuseEffect(() => {\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" }\n    })\n    .then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult Admin UI Options in TypeScript\nDESCRIPTION: This snippet shows how to configure advanced options for the Remult Admin UI, including access control and custom HTML head content. It demonstrates setting the 'allow' option for role-based access and using the 'customHtmlHead' function for custom HTML.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/admin-ui.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const api = remultExpress({\n  entities: [],\n  admin: {\n    allow: 'admin', // Only for user having the \"admin\" role\n    customHtmlHead: (r) =>\n      `<title>Nice Admin! (${r.user?.name ?? 'Anonymous'})</title>\n       <link href=\"https://remult.dev/favicon.png\" rel=\"icon\" type=\"image/png\">`,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Required Field Validation in TypeScript with Remult\nDESCRIPTION: Implements required field validation for a Task entity's title field using Remult's Fields.string decorator and Validators.required.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n  validate: Validators.required\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: Using applyChanges Method with React useEffect Hook in TypeScript\nDESCRIPTION: Example showing how to use the applyChanges method of the LiveQueryChangeInfo interface in a React component with the useEffect hook. This code subscribes to a live query for tasks, orders them by creation date, limits results to 20 items, and updates the component state when changes occur.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_livequerychangeinfo.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Using applyChanges in a React component with useEffect hook\nuseEffect(() => {\n  return taskRepo\n    .liveQuery({\n      limit: 20,\n      orderBy: { createdAt: 'asc' }\n      //where: { completed: true },\n    })\n    .subscribe(info => setTasks(info.applyChanges));\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Ordering Data Results in TypeScript\nDESCRIPTION: Examples showing how to use the orderBy parameter to sort query results. The first example shows single-field ascending ordering by name, while the second demonstrates multi-field ordering with different directions.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Products).find({ orderBy: { name: \"asc\" }})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Products).find({ orderBy: { price: \"desc\", name: \"asc\" }})\n```\n\n----------------------------------------\n\nTITLE: Initializing Remult Server Middleware with Fastify\nDESCRIPTION: Code for setting up Remult middleware in a Fastify application using the remultFastify function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport fastify from 'fastify'\nimport { remultFastify } from 'remult/remult-fastify'\n\n(async () => {\n  const server = fastify()\n\n  await server.register(remultFastify({})) // [!code highlight]\n\n  server.listen({ port: 3000 })\n})()\n```\n\n----------------------------------------\n\nTITLE: Adding Tasks via cURL Commands\nDESCRIPTION: These cURL commands demonstrate how to add tasks using the Remult API. They show single and multiple task creation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/entities.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3000/api/tasks -d \"{\\\"title\\\": \\\"Clean car\\\"}\" -H \"Content-Type: application/json\"\n\ncurl http://localhost:3000/api/tasks -d \"[{\\\"title\\\": \\\"Read a book\\\"},{\\\"title\\\": \\\"Take a nap\\\", \\\"completed\\\":true },{\\\"title\\\": \\\"Pay bills\\\"},{\\\"title\\\": \\\"Do laundry\\\"}]\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Related Records with activeRecord Pattern in TypeScript\nDESCRIPTION: Demonstrates how to insert related records using the activeRecord pattern when an entity inherits from EntityBase or IdEntity, allowing direct access to relations from the entity instance.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nconst customer = await customerRepo.insert({ name: 'Abshire Inc' })\nawait customer._.relations.orders.insert([\n  {\n    amount: 5,\n  },\n  {\n    amount: 7,\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Execution Script\nDESCRIPTION: Code for a script that applies generated migrations to the database, executing them in a transaction to maintain data integrity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { migrate } from 'remult/migrations'\nimport { dataProvider } from '../config'\nimport { migrations } from './migrations'\n\nmigrate({\n  dataProvider,\n  migrations,\n  endConnection: true, // Close the database connection after applying migrations\n})\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.cuid Decorator in Remult\nDESCRIPTION: Defines an auto-generated CUID field using the @paralleldrive/cuid2 package, determined by the backend on insert.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.cuid()\nid:string\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity-Level Authentication for Task CRUD Operations in TypeScript\nDESCRIPTION: This code snippet shows how to modify the Task entity to require authentication for all CRUD operations by setting the allowApiCrud property to remult.authenticated in the @Entity decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/1-introduction/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\", {\n  allowApiCrud: remult.authenticated\n})\n```\n\n----------------------------------------\n\nTITLE: toOne relation with custom field mapping in Remult\nDESCRIPTION: Example demonstrating how to create a toOne relation with custom field mappings between entities using the fields option.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_relations.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nFields.string()\ncustomerId?: string;\n\n@Relations.toOne(() => Customer, {\n  fields: {\n    customerId: \"id\",\n  },\n})\ncustomer?: Customer;\n```\n\n----------------------------------------\n\nTITLE: BackendMethod API Prefix Configuration\nDESCRIPTION: Shows how to configure a custom API route prefix for a backend method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_backendmethod.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{allowed:true, apiPrefix:'someFolder/'}\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.json Decorator in Remult\nDESCRIPTION: Defines a field that can store JSON data or arrays in a Remult entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.json()\ntags: string[] = []\n```\n\n----------------------------------------\n\nTITLE: Initializing Authentication Controller with Remult Context\nDESCRIPTION: Sets up the basic structure of AuthController and extends RemultContext to include Express request type. Imports necessary dependencies and establishes type declarations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/2-user-authentication/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, remult } from 'remult'\nimport type express from 'express'\nimport type from 'cookie-session'\n\ndeclare module 'remult' {\n  export interface RemultContext {\n    request?: express.Request\n  }\n}\n\nexport class AuthController {\n  //\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Validators in Remult Entity (TypeScript)\nDESCRIPTION: This example demonstrates how to chain multiple validators (minimum and maximum length) for the 'title' field of a Task entity in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/2-built-in-validations/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Task {\n  @Fields.uuid()\n  id = ''\n\n  @Fields.string<Task>({\n    validate: [Validators.minLength(2), Validators.maxLength(5)],\n  })\n  title = ''\n\n  //....\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean Allowed Value in TypeScript\nDESCRIPTION: Demonstrates how to set a boolean value for the Allowed data type in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/allowed.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  allowApiRead: true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic toOne Relation Example\nDESCRIPTION: Demonstrates basic toOne relation setup between Customer and Order entities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"customers\")\nexport class Customer {\n  @Fields.cuid()\n  id = \"\";\n  @Fields.string()\n  name = \"\";\n  @Fields.string()\n  city = \"\";\n}\n\n@Entity(\"orders\")\nexport class Order {\n  @Fields.cuid()\n  id = \"\";\n  @Relations.toOne(() => Customer)\n  customer?: Customer;\n  @Fields.number()\n  amount = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BackendMethod Usage in TypeScript\nDESCRIPTION: Demonstrates the basic usage of the BackendMethod decorator with allowed permission set to true.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_backendmethod.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@BackendMethod({ allowed: true })\nasync someBackendMethod() {\n  // method logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Custom Filter with Backend Evaluation in TypeScript\nDESCRIPTION: This snippet illustrates a more complex custom filter that performs backend operations. It fetches customers based on a city and uses their IDs to filter orders, demonstrating the power of backend evaluation in custom filters.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic activeOrders = Filter.createCustom<\n  Order,\n  { year: number; customerCity: string }\n>(async ({ year, customerCity }) => {\n  const customers = await repo(Customer).find({\n    where: { city: customerCity },\n  })\n  return {\n    customerId: { $in: customers.map((c) => c.id) },\n    status: [\"created\", \"confirmed\", \"pending\", \"blocked\", \"delayed\"],\n    createdAt: {\n      $gte: new Date(year, 0, 1),\n      $lt: new Date(year + 1, 0, 1),\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON File Storage in Remult Express Server\nDESCRIPTION: This code shows how to set up Remult to store data in JSON files by configuring the dataProvider with JsonDataProvider and JsonEntityFileStorage. It specifies './db' as the directory where JSON files will be stored for each entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/json.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { JsonDataProvider } from \"remult\"\nimport { JsonEntityFileStorage } from \"remult/server\"\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: async () =>\n      new JsonDataProvider(new JsonEntityFileStorage(\"./db\")) // Data will be stored in the 'db' folder\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using the FieldType Decorator for Class-Based Field Types in Remult\nDESCRIPTION: This snippet shows an alternative approach to class-based field types by decorating the class itself with @FieldType. This approach allows defining the valueConverter once on the class rather than at each usage site, simplifying entity class definitions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n@FieldType<Phone>({\n  valueConverter: {\n    fromJson: (x) => (x ? new Phone(x) : undefined!),\n    toJson: (x) => (x ? x.phone : undefined!),\n  },\n})\nexport class Phone {\n  constructor(public phone: string) {}\n  call() {\n    window.open('tel:' + this.phone)\n  }\n}\n\n@Entity('contacts')\nexport class Contact {\n  //...\n  @Field(() => Phone)\n  phone?: Phone\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.number Decorator in Remult\nDESCRIPTION: Defines a decimal/float number field in a Remult entity using the @Fields.number() decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.number()\nprice = 1.5\n```\n\n----------------------------------------\n\nTITLE: Query Orders with Customer Relations in TypeScript\nDESCRIPTION: Example showing how to fetch Order data with included Customer relations using Remult's find method and include option.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/1-relations/1-many-to-one/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await repo(Order).find({\n  include: {\n    customer: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Authentication Component\nDESCRIPTION: Vue component implementation for handling user authentication UI and logic.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue'\nimport { remult } from 'remult'\nimport App from './App.vue'\nimport { AuthController } from './shared/AuthController'\n\nconst username = ref('')\nconst signedIn = ref(false)\n\nconst signIn = async () => {\n  try {\n    remult.user = await AuthController.signIn(username)\n    signedIn.value = true\n    username.value = ''\n  } catch (error: unknown) {\n    alert((error as { message: string }).message)\n  }\n}\nconst signOut = async () => {\n  await AuthController.signOut()\n  remult.user = undefined\n  signedIn.value = false\n}\n\nonMounted(async () => {\n  await remult.initUser()\n  signedIn.value = remult.authenticated()\n})\n</script>\n<template>\n  <div v-if=\"!signedIn\">\n    <h1>todos</h1>\n    <main>\n      <form @submit.prevent=\"signIn()\">\n        <input\n          v-model=\"username\"\n          placeholder=\"Username, try Steve or Jane\"\n        />\n        <button>Sign in</button>\n      </form>\n    </main>\n  </div>\n  <div v-else>\n    <header>\n      Hello {{ remult.user!.name }}\n      <button @click=\"signOut()\">Sign Out</button>\n    </header>\n    <App />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing apiPreprocessFilter for Custom Access Control in TypeScript\nDESCRIPTION: This example demonstrates how to use apiPreprocessFilter to enforce additional access control rules, such as requiring a specific filter parameter (customerId) for querying tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n  apiPreprocessFilter: async (filter, { getPreciseValues }) => {\n    // Ensure that users can only query tasks for specific customers\n    const preciseValues = await getPreciseValues();\n    if (!preciseValues.customerId) {\n      throw new ForbiddenError(\"You must specify a valid customerId filter\");\n    }\n    return filter;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Unique Validation for Task Title in TypeScript\nDESCRIPTION: This code adds a custom validation to the Task entity's title field that ensures uniqueness only when the title is not empty. It extends Remult's built-in unique validator with conditional logic using the Fields.string decorator's validate property.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/9-examples/1-validations/1-extending-existing-validation/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Task {\n  @Fields.uuid()\n  id = ''\n\n  @Fields.string<Task>({\n    validate: (task, e) => {\n      if (task.title != '') Validators.unique(task, e)\n    },\n  })\n  title = ''\n\n  //....\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB DataProvider in Remult Express Application\nDESCRIPTION: TypeScript code snippet demonstrating how to set up the dataProvider property in a Remult Express application to connect to a MongoDB database. It uses the MongoClient to establish a connection and creates a MongoDataProvider instance.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/mongodb.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { MongoClient } from \"mongodb\"\nimport { MongoDataProvider } from \"remult/remult-mongo\"\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: async () => {\n      const client = new MongoClient(\"mongodb://localhost:27017/local\")\n      await client.connect()\n      return new MongoDataProvider(client.db(\"test\"), client)\n    }\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Add Task Form Using Remult Authorization\nDESCRIPTION: Shows how to conditionally render a form for adding new tasks based on user permissions using taskRepo.metadata.apiInsertAllowed(). The form is only displayed if the user has permission to insert new tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/4-role-based-authorization-on-frontend/content.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n  return (\n    <div>\n      <h1>Todos</h1>\n      <main>\n        {taskRepo.metadata.apiInsertAllowed() && (\n          <form onSubmit={addTask}>\n            <input\n              value={newTaskTitle}\n              placeholder=\"What needs to be done?\"\n              onChange={(e) => setNewTaskTitle(e.target.value)}\n            />\n            <button>Add</button>\n          </form>\n        )}\n        {error && (\n          <div>\n            <strong style={{ color: 'red' }}>Error: {error.message}</strong>\n          </div>\n        )}\n```\n\n----------------------------------------\n\nTITLE: Using Angular HttpClient in Remult\nDESCRIPTION: This snippet demonstrates how to use Angular's HttpClient instead of the default Fetch API for HTTP requests in Remult. It configures the HttpClient in an Angular module.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n//...\nimport { HttpClientModule, HttpClient } from '@angular/common/http'\nimport { remult } from 'remult'\n\n@NgModule({\n  //...\n  imports: [\n    //...\n    HttpClientModule,\n  ],\n})\nexport class AppModule {\n  constructor(http: HttpClient) {\n    remult.apiClient.httpClient = http\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Products with Pagination in TypeScript\nDESCRIPTION: Example showing how to query products with pagination using limit and page parameters\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Products).find({\n  limit: 10,\n  page: 2\n})\n```\n\n----------------------------------------\n\nTITLE: Using Existing PostgreSQL Connection with Remult\nDESCRIPTION: Alternative approach for integrating PostgreSQL with Remult by passing an existing pg.Pool connection to PostgresDataProvider wrapped in SqlDatabase. This method is useful when you already have PostgreSQL connections configured elsewhere in your application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/postgresql.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Pool } from 'pg'\nimport { SqlDatabase } from 'remult'\nimport { PostgresDataProvider } from 'remult/postgres'\nimport { remultExpress } from 'remult/remult-express'\n\nconst pg = new Pool({\n  connectionString: 'your-connection-string-here',\n})\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase(new PostgresDataProvider(pg)),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring API with Migration Support\nDESCRIPTION: Code snippet showing how to configure the Remult Express API to use the shared configuration and disable automatic schema synchronization for migration support.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultExpress } from 'remult/remult-express'\nimport { dataProvider, entities } from './config'\n\nexport const api = remultExpress({\n  entities,\n  dataProvider,\n  ensureSchema: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Method with Custom Name in Remult\nDESCRIPTION: This example illustrates how to define a backend method with a custom name using the key property in the @BackendMethod decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/6-backend-methods/meta.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@BackendMethod({ allowed: true, key: 'reset-password' })\nasync resetPassword(userId: string, newPassword: string) {\n  // ... implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Using UserSignInController for User Authentication in TypeScript\nDESCRIPTION: This example demonstrates how to instantiate a UserSignInController, set user credentials, and call the signInUser backend method to process authentication. It includes error handling for failed sign-in attempts.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/mutable-controllers.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst signInController = new UserSignInController()\nsignInController.email = 'user@example.com'\nsignInController.password = 'password123'\nsignInController.rememberMe = true // Optional: Set to true if the user wants to remain logged in\n\ntry {\n  const user = await signInController.signInUser()\n  console.log(`User signed in: ${user.email}`)\n} catch (error) {\n  console.error('Sign-in failed:', error.message)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up JSON Storage in OPFS with Remult\nDESCRIPTION: Demonstrates how to use Origin Private File System (OPFS) for structured and efficient data storage in Remult. This approach is supported by Chrome and Safari, offering a robust solution for storing entities in the frontend.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/offline-support.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JsonDataProvider } from 'remult'\nimport { JsonEntityOpfsStorage } from 'remult'\n\nconst localDb = new JsonDataProvider(new JsonEntityOpfsStorage())\n```\n\n----------------------------------------\n\nTITLE: Inserting Related Records Using Repository Relations in TypeScript\nDESCRIPTION: Example showing how to insert related records using the repository's relations method. Creates a new customer and adds related orders with Remult automatically setting the customer field.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst customer = await customerRepo.insert({ name: 'Abshire Inc' })\nawait customerRepo.relations(customer).orders.insert([\n  {\n    amount: 5,\n  },\n  {\n    amount: 7,\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Filter to Query Orders\nDESCRIPTION: Example demonstrating how to use the custom filterCity filter to find all orders from London-based customers.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/filtering-and-relations.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.table(\n  await repo(Order).find({\n    where: Order.filterCity({\n      city: 'London',\n    }),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable String Literal Types in Remult\nDESCRIPTION: Example demonstrating a pattern for maintaining reusable string literal types for field definitions, improving maintainability.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst statuses = ['open', 'closed', 'frozen', 'in progress'] as const;\ntype StatusType = typeof statuses[number];\n\nclass MyEntity {\n  @Fields.literal(() => statuses)\n  status: StatusType = 'open';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Task Filtering Based on User Permissions\nDESCRIPTION: Creates a reusable 'allowedTasks' custom filter in the Task entity that checks user permissions. This filter is used in apiPrefilter to ensure users only see tasks they're allowed to access based on their role.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/4-filtering-related-rows-based-on-user-permissions/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```file:/shared/Task.ts title=\"shared/Task.ts\" {4} add={23-28} collapse={8-21}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Configure Default Relation Inclusion in TypeScript\nDESCRIPTION: Demonstrates how to set up automatic inclusion of Customer data in Order queries using the defaultIncluded option in the Relations.toOne decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/1-relations/1-many-to-one/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Relations.toOne(() => Customer, {\n  defaultIncluded: true,\n})\ncustomer?: Customer\n```\n\n----------------------------------------\n\nTITLE: Backend-Specific Custom Validation in Remult (TypeScript)\nDESCRIPTION: Illustrates how to create a custom validator that checks if it's running on the backend using the isBackend function, allowing for backend-specific validation logic.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/validation.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Validators, isBackend } from 'remult'\n\n@Fields.string({\n   validate: [\n      Validators.unique(),\n      (task) => {\n         if (isBackend()) {\n            // check something else...\n            // throw \"a custom message\"\n         }\n      }\n   ]\n})\ntitle = ''\n```\n\n----------------------------------------\n\nTITLE: Using sqlExpression for SQL-based Entities in TypeScript\nDESCRIPTION: This example shows how to use sqlExpression to create an entity based on a SQL query instead of a physical table or view. It combines data from employees and contractors tables.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('people', {\n  sqlExpression:`select id,name from employees\n                 union all select id,name from contractors`,\n})\nexport class Person {\n  @Fields.string()\n  id=''\n  @Fields.string()\n  name=''\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OPFS Storage with JsonDataProvider\nDESCRIPTION: Example of using the Origin Private File System Storage to store entities in the frontend browser environment. This allows for persistent local storage of entity data with a JSON interface.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = new JsonDataProvider(new JsonEntityOpfsStorage())\nrepo(Task, db)\n  .find()\n  .then((tasks) => console.table(tasks))\n```\n\n----------------------------------------\n\nTITLE: Setting Default Inclusion for Relations\nDESCRIPTION: This snippet demonstrates how to set a relation to be included by default in queries using the defaultIncluded option.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Relations.toOne(() => Customer, {\n  defaultIncluded: true,\n})\ncustomer = \"\";\n```\n\n----------------------------------------\n\nTITLE: Securing Backend Methods with Authentication Requirements\nDESCRIPTION: Applying authentication requirements to a backend method using the @BackendMethod decorator with Allow.authenticated to ensure only authenticated users can access the method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@BackendMethod({ allowed: Allow.authenticated })\n```\n\n----------------------------------------\n\nTITLE: Optimized SQL-Based Custom Filter for City Filtering\nDESCRIPTION: An improved version of the custom filter that uses raw SQL to create a more efficient query with an IN statement.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/filtering-and-relations.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SqlDatabase } from 'remult'\n\n@Entity('orders', { allowApiCrud: true })\nexport class Order {\n  //...\n  static filterCity = Filter.createCustom<Order, { city: string }>(\n    async ({ city }) =>\n      SqlDatabase.rawFilter(\n        ({ param }) =>\n          `customer in (select id from customers where city = ${param(city)})`,\n      ),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remult Entity without Decorators in TypeScript\nDESCRIPTION: Demonstrates how to define a Task entity using Remult's describeEntity function instead of decorators in TypeScript. It sets up fields for id, title, and completed status.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/working-without-decorators.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields, describeEntity } from 'remult'\n\nexport class Task {\n  id!: string\n  title = ''\n  completed = false\n}\ndescribeEntity(\n  Task,\n  'tasks',\n  {\n    allowApiCrud: true,\n  },\n  {\n    id: Fields.uuid(),\n    title: Fields.string(),\n    completed: Fields.boolean(),\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Form UI for Task Creation in React\nDESCRIPTION: This snippet implements the JSX for a form allowing users to input new tasks. It includes an input field bound to the newTaskTitle state and a submission button that triggers the addTask function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/3-manipulating-data/1-Insert/content.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nreturn (\n  <div>\n    <h1>Todos</h1>\n    <main>\n      <form onSubmit={addTask}>\n        <input\n          value={newTaskTitle}\n          placeholder=\"What needs to be done?\"\n          onChange={(e) => setNewTaskTitle(e.target.value)}\n        />\n        <button>Add</button>\n      </form>\n      {tasks.map((task) => {\n        return (\n          <div key={task.id}>\n            <input type=\"checkbox\" checked={task.completed} />\n            {task.title}\n          </div>\n        )\n      })}\n    </main>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Orders for a Specific Customer\nDESCRIPTION: Demonstrates how to retrieve all orders related to a specific customer using the relations method provided by the repository. This showcases the flexibility of managing related data within Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/1-relations/2-one-to-many/content.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ordersForCustomer = await cRepo.relations(customer).orders.find()\n```\n\n----------------------------------------\n\nTITLE: Implementing Role Assignment in AuthController\nDESCRIPTION: Updates the AuthController to assign the 'admin' role to specific users (Jane) during sign-in. The code stores user roles in the session to enforce authorization rules in subsequent requests.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/3-authorization/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst validUsers = [\n  {\n    name: 'Jane',\n    admin: true,\n  },\n  { name: 'Alex' },\n]\n\nexport class AuthController {\n  @BackendMethod({ allowed: true })\n  static async signIn(name: string) {\n    const user = validUsers.find((user) => user.name === name)\n    if (user) {\n      remult.user = {\n        id: user.name,\n        name: user.name,\n        roles: user.admin ? ['admin'] : [],\n      }\n      remult.context.request!.session!['user'] = remult.user\n      return remult.user\n    } else {\n      throw Error(\"Invalid user, try 'Alex' or 'Jane'\")\n    }\n  }\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Deletion in React with Remult\nDESCRIPTION: Adds functionality to delete tasks from both the UI and the backend database. Uses Remult's taskRepo.delete() method to remove the task from the database and updates the local state accordingly.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/crud.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\n\n{\n  tasks.map(task => {\n    const setTask = (value: Task) =>\n      setTasks(tasks => tasks.map(t => (t === task ? value : t)))\n\n    const setCompleted = async (completed: boolean) =>\n      setTask(await taskRepo.save({ ...task, completed }))\n\n    const setTitle = (title: string) => setTask({ ...task, title })\n\n    const saveTask = async () => {\n      try {\n        setTask(await taskRepo.save(task))\n      } catch (error: unknown) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    const deleteTask = async () => {\n      try {\n        await taskRepo.delete(task)\n        setTasks(tasks.filter(t => t !== task))\n      } catch (error: unknown) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    return (\n      <div key={task.id}>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          onChange={e => setCompleted(e.target.checked)}\n        />\n        <input value={task.title} onChange={e => setTitle(e.target.value)} />\n        <button onClick={saveTask}>Save</button>\n        <button onClick={deleteTask}>Delete</button>\n      </div>\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: toMany Relation Configuration\nDESCRIPTION: Shows how to configure toMany relations in Customer entity to retrieve associated orders.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('customers')\nexport class Customer {\n  @Fields.cuid()\n  id = ''\n  @Fields.string()\n  name = ''\n  @Fields.string()\n  city = ''\n  @Relations.toMany(() => Order)\n  orders?: Order[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Form UI Component in React\nDESCRIPTION: Renders a form with an input field for task creation and displays the list of existing tasks. The form is connected to the addTask function that handles the submission process.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/crud.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\n\nreturn (\n  <div>\n    <h1>Todos</h1>\n    <main>\n      <form onSubmit={addTask}>\n        <input\n          value={newTaskTitle}\n          placeholder=\"What needs to be done?\"\n          onChange={e => setNewTaskTitle(e.target.value)}\n        />\n        <button>Add</button>\n      </form>\n      {tasks.map(task => {\n        return (\n          <div key={task.id}>\n            <input type=\"checkbox\" checked={task.completed} />\n            {task.title}\n          </div>\n        )\n      })}\n    </main>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Task Insertion in React Component\nDESCRIPTION: This code snippet demonstrates how to simplify the task insertion process in a React component using Remult. It removes the manual state update, relying on the live query to handle state changes automatically.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/live-queries.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst addTask = async (e: FormEvent) => {\n  e.preventDefault()\n  try {\n    await taskRepo.insert({ title: newTaskTitle })\n    // ^ this no longer needs to be a variable as we are not using it to set the state.\n    // setTasks([...tasks, newTask])   <-- this line is no longer needed\n    setNewTaskTitle(\"\")\n  } catch (error: unknown) {\n    alert((error as { message: string }).message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Remult Backend Method from Frontend\nDESCRIPTION: Example demonstrating how to invoke a backend method from client-side code by first retrieving a task instance and then calling its backend method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-backend-methods.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst task = await repo(Task).findFirst()\nawait task.toggleCompleted()\n```\n\n----------------------------------------\n\nTITLE: Using Not Equal Filter Operator in Remult (TypeScript)\nDESCRIPTION: Demonstrates how to use the $ne (not equal) filter operator in Remult to exclude specific values when querying entities.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\n// Matches entities where the status is not 1, 2, or 3\nconst filter = {\n  status: { $not: [1, 2, 3] }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult DataProvider for Microsoft SQL Server using Knex\nDESCRIPTION: Configure the dataProvider in the server file to use Microsoft SQL Server with Knex client configuration. This setup includes connection details and options specific to SQL Server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/mssql.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { createKnexDataProvider } from \"remult/remult-knex\"\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: createKnexDataProvider({\n      // Knex client configuration for MSSQL\n      client: \"mssql\",\n      connection: {\n        server: \"127.0.0.1\", // SQL Server address\n        database: \"test\", // Your database name\n        user: \"your_database_user\", // SQL Server user\n        password: \"your_database_password\", // Password for the SQL Server user\n        options: {\n          enableArithAbort: true, // Required option for newer versions of MSSQL\n          encrypt: false, // Set to true if using Azure\n          instanceName: \"sqlexpress\", // Optional: Define the SQL Server instance name\n        },\n      },\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Turso Data Provider in TypeScript\nDESCRIPTION: Defines TursoDataProvider class extending SqliteCoreDataProvider for integration with Turso database. It overrides the transaction method to implement Turso-specific transaction handling.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class TursoDataProvider extends SqliteCoreDataProvider {\n  private client\n  constructor(client: Pick<Client, \"execute\">)\n  transaction(action: (sql: SqlImplementation) => Promise<void>): Promise<void>\n}\n//[ ] SqlImplementation from ./index.js is not exported\n```\n\n----------------------------------------\n\nTITLE: Next.js Pages Router Integration\nDESCRIPTION: Implementing Remult in Next.js using the Pages Router approach.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/pages/api/[...remult].ts\n\nimport { remultNext } from 'remult/remult-next'\n\nexport default remultNext({\n  entities: [\n    /* entity types */\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Bun:SQLite Data Provider for Remult in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the dataProvider in a Remult application to use Bun:SQLite. It imports necessary modules, creates an Express app, and sets up the remultExpress middleware with a SqlDatabase using BunSqliteDataProvider.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/bun-sqlite.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult'\nimport { Database } from 'bun:sqlite'\nimport { BunSqliteDataProvider } from 'remult/remult-bun-sqlite'\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase(\n      new BunSqliteDataProvider(new Database('./mydb.sqlite')),\n    ),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up In-Memory Data Provider for Validation Testing in Remult\nDESCRIPTION: Shows how to configure the beforeEach hook to use an InMemoryDataProvider for testing Task entity validations. This approach allows for fast testing without requiring a real database connection.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/9-testing/1-introduction/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeEach(async () => {\n  remult.dataProvider = new InMemoryDataProvider();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Sorting with Remult in React\nDESCRIPTION: This code demonstrates how to add sorting functionality to a task list using Remult's find method with the orderBy parameter. The useEffect hook queries the task repository with ascending title sort, then updates the component state with the sorted results.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/2-querying-data/2-sorting/content.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  taskRepo\n    .find({\n      orderBy: {\n        title: 'asc',\n      },\n    })\n    .then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Paginated Querying in Remult\nDESCRIPTION: Demonstrates how to implement pagination with the query method, showing how to set page size, check total pages, and navigate between pages.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Querying with pagination:\nconst query = taskRepo.query({\n  where: { completed: false },\n  pageSize: 100,\n});\n\nlet paginator = await query.paginator();\nconsole.log('Number of items on the current page:', paginator.items.length);\nconsole.log('Total pages:', Math.ceil(paginator.aggregate.$count / 100));\n\nif (paginator.hasNextPage) {\n  paginator = await paginator.nextPage();\n  console.log('Items on the next page:', paginator.items.length);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Page Component with SessionProvider\nDESCRIPTION: Updates the main page component to include SessionProvider from NextAuth.js, enabling authentication state management throughout the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// src/app/page.tsx\n\n\"use client\"\nimport { SessionProvider } from \"next-auth/react\"\nimport Auth from \"../components/auth\"\n\nexport default function Home() {\n  return (\n    <SessionProvider>\n      <Auth />\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Field Validation with ValidationEvent\nDESCRIPTION: Example showing a custom validation using the fieldValidationEvent parameter for more control over the validation process.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n   validate: (_, fieldValidationEvent)=>{\n     if (fieldValidationEvent.value.length < 3)\n         fieldValidationEvent.error = \"Too Short\";\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Storage in IndexedDB for Remult\nDESCRIPTION: Illustrates how to use Remult's JsonEntityIndexedDbStorage to store entities in IndexedDB. This method is ideal for applications with large data sets or those requiring more complex interactions with stored data in offline mode.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/offline-support.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JsonDataProvider } from 'remult'\nimport { JsonEntityIndexedDbStorage } from 'remult'\n\n// Initialize the JsonEntityIndexedDbStorage\nconst db = new JsonDataProvider(new JsonEntityIndexedDbStorage())\n\n// Use the local IndexedDB to store and fetch tasks\nconsole.table(await repo(Task, db).find())\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.enum Decorator in Remult\nDESCRIPTION: Defines an enum field that can only hold values from a specific enumeration, with automatic validation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.enum(() => Priority)\npriority = Priority.Low;\n```\n\n----------------------------------------\n\nTITLE: Allowing Updates Only on New Rows in Remult (TypeScript)\nDESCRIPTION: This code snippet shows how to restrict updates to a field only when a task is first created, using the getEntityRef function in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/1-field-level-control/content.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nallowApiUpdate: (task) => getEntityRef(task).isNew()\n```\n\n----------------------------------------\n\nTITLE: Adding npm Script for Starting Hapi Development Server\nDESCRIPTION: JSON snippet to add an npm script in package.json for starting the Hapi server in development mode. This uses tsx for TypeScript execution and watches for file changes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hapi.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"dev-node\": \"tsx watch --env-file=.env --tsconfig tsconfig.server.json src/server\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Validator Error Messages in Remult (TypeScript)\nDESCRIPTION: Shows how to globally customize the error message for a specific validator, in this case, the unique validator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/validation.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nValidators.unique.defaultMessage = 'Existe déjà!'\n```\n\n----------------------------------------\n\nTITLE: Next.js App Router Integration\nDESCRIPTION: Implementing Remult in Next.js using the App Router approach.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api.ts\n\nimport { remultNextApp } from 'remult/remult-next'\n\nexport const api = remultNextApp({\n  entities: [\n    /* entity types */\n  ],\n})\n\n// src/app/api/[...remult]/route.ts\n\nimport { api } from '../../../api'\n\nexport const { POST, PUT, DELETE, GET } = api\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Entity Filters\nDESCRIPTION: Demonstrates the createCustom method for creating custom filters. Custom filters are evaluated on the backend for security and efficiency, while only the filter name is sent from the frontend via API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_filter.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Order {\n //...\n static activeOrdersFor = Filter.createCustom<Order, { year: number }>(\n   async ({ year }) => {\n     return {\n       status: ['created', 'confirmed', 'pending', 'blocked', 'delayed'],\n       createdAt: {\n         $gte: new Date(year, 0, 1),\n         $lt: new Date(year + 1, 0, 1),\n       },\n     }\n   },\n )\n}\n// Usage\nawait repo(Order).find({\n where: Order.activeOrders({ year }),\n})\n```\n\n----------------------------------------\n\nTITLE: IdEntity Class Structure\nDESCRIPTION: Core class providing identity management and CRUD operations. Includes properties for id, lifecycle methods for save/delete, and utility methods.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_identity.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass IdEntity {\n  constructor();\n  id: any;\n  $: any;\n  _: any;\n  assign(values: any): void;\n  delete(): Promise<void>;\n  isNew(): boolean;\n  save(): Promise<this>;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders Using In Statement with Nested Find Method\nDESCRIPTION: A simple approach to filter orders by customer city by nesting a find() call to get customers and using them as a filter parameter for orders.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/filtering-and-relations.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.table(\n  await repo(Order).find({\n    where: {\n      customer: await repo(Customer).find({\n        where: {\n          city: 'London',\n        },\n      }),\n    },\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQLite Data Provider for SQL-Based Testing in Remult\nDESCRIPTION: Demonstrates how to configure an in-memory SQLite database for testing SQL expressions and SQL-based filters in Remult. This setup includes schema creation and SQL logging for debugging.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/9-testing/1-introduction/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeEach(async () => {\n  remult.dataProvider = await createSqlite3DataProvider();\n  await ensureSchema();\n  SqlDatabase.LogToConsole = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Add Task Form Based on Permissions\nDESCRIPTION: This snippet demonstrates how to conditionally render an \"Add Task\" form in the frontend based on the user's permission to insert tasks. It uses the entity's metadata to check if API insert is allowed for the current user.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\n\n<main>\n  {taskRepo.metadata.apiInsertAllowed() && (\n    <form onSubmit={addTask}>\n      <input\n        value={newTaskTitle}\n        placeholder=\"What needs to be done?\"\n        onChange={e => setNewTaskTitle(e.target.value)}\n      />\n      <button>Add</button>\n    </form>\n  )}\n  ...\n</main>\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Classes for Many-to-Many Relationships\nDESCRIPTION: Shows the entity definitions for Customer and Tag classes with their respective decorators and fields.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('customers')\nexport class Customer {\n  @Fields.cuid()\n  id = ''\n  @Fields.string()\n  name = ''\n  @Fields.string()\n  city = ''\n}\n\n@Entity('tags')\nexport class Tag {\n  @Fields.cuid()\n  id = ''\n  @Fields.string()\n  name = ''\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing saving Lifecycle Hook for Entity in TypeScript\nDESCRIPTION: This example shows how to use the saving lifecycle hook to perform actions before an entity is saved. It sets the creation date for new tasks and updates the last updated date for all tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n  saving: async (task, e) => {\n    if (e.isNew) {\n      task.createdAt = new Date(); // Set the creation date for new tasks.\n    }\n    task.lastUpdated = new Date(); // Update the last updated date.\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a TasksController with Backend Method for Task Completion in Remult\nDESCRIPTION: Implementation of a TasksController class with a static backend method that handles setting all tasks' completion status on the server side, improving performance by avoiding multiple API requests.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/backend-methods.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, remult } from 'remult'\nimport { Task } from './Task.js'\n\nexport class TasksController {\n  @BackendMethod({ allowed: true })\n  static async setAllCompleted(completed: boolean) {\n    const taskRepo = remult.repo(Task)\n\n    for (const task of await taskRepo.find()) {\n      await taskRepo.save({ ...task, completed })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Field Validation in TypeScript using Remult\nDESCRIPTION: Implements a custom validation function that checks if the title length is greater than 2 characters, returning an error message if the validation fails.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string<Task>({\n  validate: (task) => task.title.length > 2 || \"Too Short\",\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication in SolidStart with Remult\nDESCRIPTION: Setting up basic user authentication in SolidStart, including session management, login/logout functionality, and user retrieval for Remult integration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/auth.ts\n\nimport { action, redirect } from '@solidjs/router'\nimport { useSession } from 'vinxi/http'\nimport { type UserInfo } from 'remult'\n\nconst validUsers: UserInfo[] = [\n  { id: '1', name: 'Jane' },\n  { id: '2', name: 'Steve' },\n]\n\nexport async function getSession() {\n  'use server'\n  return await useSession<{ user?: UserInfo }>({{\n    password:\n      process.env['SESSION_SECRET'] ||\n      'Something secret used for development only',\n  }})\n}\n\nexport const loginAction = action(async (formData: FormData) => {\n  'use server'\n  const username = String(formData.get('username'))\n  try {\n    const session = await getSession()\n    const user = validUsers.find((x) => x.name === username)\n    if (!user) throw Error(\"Invalid user, try 'Steve' or 'Jane'\")\n    await session.update({{ user }})\n  } catch (err) {\n    return err as Error\n  }\n  throw redirect('/')\n}}, 'login')\n\nexport async function logout() {\n  'use server'\n  const session = await getSession()\n  await session.update({{ user: null! }})\n}\n\nexport async function getUser() {\n  'use server'\n  const session = await getSession()\n  return session?.data?.user\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Order Item with Related Customer\nDESCRIPTION: This snippet shows how to retrieve a single Order item along with its associated Customer using the findFirst method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst singleOrder = await orderRepo.findFirst(\n  {\n    id: 'adjkzsio3efees8ew0wnsqma',\n  },\n  {\n    include: {\n      customer: true,\n    },\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Command Interfaces for Database Operations\nDESCRIPTION: Interfaces for SQL command execution and parameter handling, allowing for safe parameterized queries with methods to add parameters and execute SQL statements.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SqlCommand extends SqlCommandWithParameters {\n  execute(sql: string): Promise<SqlResult>\n}\nexport interface SqlCommandWithParameters {\n  /** @deprecated use `param` instead*/\n  addParameterAndReturnSqlToken(val: any): string\n  param(val: any): string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult Express with Auth Controller and User Session\nDESCRIPTION: This code updates the remultExpress configuration to register the AuthController and define how user information is extracted from the session.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthController } from '../shared/AuthController.js'\n\nexport const api = remultExpress({\n  //...\n  controllers: [TaskController, AuthController]\n  getUser: (req) => req.session!['user'],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL in Svelte Server Routes\nDESCRIPTION: Server-side configuration for GraphQL in Svelte using graphql-yoga and Remult. Sets up API endpoint and request handling for GraphQL operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-graphql.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestEvent } from '@sveltejs/kit'\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { remultGraphql } from 'remult/graphql'\nimport { Task } from '../../../shared/Task'\n\nconst { typeDefs, resolvers } = remultGraphql({\n  entities: [Task],\n})\n\nconst yogaApp = createYoga<RequestEvent>({\n  schema: createSchema({\n    typeDefs,\n    resolvers,\n  }),\n  graphqlEndpoint: '/api/graphql',\n\n  fetchAPI: { Response },\n})\n\nexport { yogaApp as GET, yogaApp as OPTIONS, yogaApp as POST }\n```\n\n----------------------------------------\n\nTITLE: Repository Interface Utility Methods\nDESCRIPTION: Defines utility methods for entity validation, JSON conversion, metadata access, and event handling. Includes methods for creating entity instances and accessing field metadata.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nvalidate(\n  item: Partial<entityType>,\n  ...fields: Extract<keyof MembersOnly<entityType>, string>[]\n): Promise<ErrorInfo<entityType> | undefined>\n\ntoJson(item: Promise<entityType[]>): Promise<any[]>\ntoJson(item: entityType[]): any[]\ntoJson(item: Promise<entityType>): Promise<any>\ntoJson(item: entityType): any\n\nfromJson(data: any[], isNew?: boolean): entityType[]\nfromJson(data: any, isNew?: boolean): entityType\n\ngetEntityRef(item: entityType): EntityRef<entityType>\nfields: FieldsMetadata<entityType>\nmetadata: EntityMetadata<entityType>\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in RemultServerOptions\nDESCRIPTION: Shows how to implement custom error handling in RemultServerOptions. This example intercepts 400 errors and sends a custom 500 error response.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_remultserveroptions.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const api = remultExpress({\n  error: async (e) => {\n    if (e.httpStatusCode == 400) {\n      e.sendError(500, { message: \"An error occurred\" })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom UserInfo Fields in TypeScript\nDESCRIPTION: Demonstrates how to access the custom UserInfo fields (phone and email) in the application code.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-options.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Accessing custom user info fields\nconsole.log(remult.user.phone)\nconsole.log(remult.user.email)\n```\n\n----------------------------------------\n\nTITLE: Finding First Incomplete Task\nDESCRIPTION: Examples of finding the first task matching a condition with optional creation if not found\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait taskRepo.findFirst({ completed:false })\n```\n\n----------------------------------------\n\nTITLE: Implementing setAllCompleted Function in React with Remult\nDESCRIPTION: An async function that iterates through all tasks and updates their completed status. This client-side implementation sends individual update requests for each task.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/6-backend-methods/1-introduction/content.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nasync function setAllCompleted(completed: boolean) {\n  for (const task of await taskRepo.find()) {\n    await taskRepo.update(task, {completed });\n  }\n}\nuseEffect(...)\n```\n\n----------------------------------------\n\nTITLE: Performing Simple Aggregation with Remult Repository in TypeScript\nDESCRIPTION: Shows how to use the aggregate method of a Remult Repository to perform simple aggregations across all items. This example calculates the total sum of salaries.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nconst totalSalary = await repo.aggregate({\n  sum: ['salary'],\n});\nconsole.log(totalSalary.salary.sum); // Outputs the total sum of salaries\n```\n\n----------------------------------------\n\nTITLE: Using EntityRef and FieldsRef in Active Record Pattern (TypeScript)\nDESCRIPTION: Shows the usage of EntityRef (_) and FieldsRef ($) objects provided by EntityBase. These objects allow for more complex interactions with entity instances, such as reloading data and accessing field information.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/active-record.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait person._.reload()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\n  `Name changed from \"${person.$.name.originalValue}\" to \"${person.name}\"`,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing setAllCompleted Function for Client-side Task Completion in TypeScript\nDESCRIPTION: A client-side implementation of a function that sets the completed status of all tasks by iterating through tasks fetched from the repository and saving each one individually.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/backend-methods.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst setAllCompleted = async (completed: boolean) => {\n  for (const task of await taskRepo.find()) {\n    await taskRepo.save({ ...task, completed })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB ObjectId Field in Remult\nDESCRIPTION: Sets up a field to work with MongoDB's ObjectId type by setting the fieldTypeInDb to 'dbid'.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n  dbName: '_id',\n  valueConverter: {\n    fieldTypeInDb: 'dbid',\n  },\n})\nid: string = ''\n```\n\n----------------------------------------\n\nTITLE: Configuring dbName for Entity Table Mapping in TypeScript\nDESCRIPTION: These examples demonstrate how to set the dbName property to specify the database table name for an entity. The first example sets a simple table name, while the second includes a schema name.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndbName:'myProducts'\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndbName:'public.\"myProducts\"'\n```\n\n----------------------------------------\n\nTITLE: Protecting Backend Methods with Authentication Requirements\nDESCRIPTION: Secures a backend method by adding the allowed property to the BackendMethod decorator, requiring authenticated users to access the setAllCompleted function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/TasksController.ts\n\n@BackendMethod({ allowed: Allow.authenticated })\n```\n\n----------------------------------------\n\nTITLE: Using Custom Filter in Page Component\nDESCRIPTION: Example of using the custom filter in a React component to fetch orders for a specific year.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/1-custom-filters/content.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nrepo(Order).find({ where: Order.activeOrdersFor({ year }) })\n```\n\n----------------------------------------\n\nTITLE: Custom Field Validation with Return Value\nDESCRIPTION: Example showing a custom validation function that returns either true or an error message when the validation fails.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string<Task>({\n   validate: task=>task.title.length>3 ||  \"Too Short\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Filter in Query for Active Orders in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the custom filter for active orders in a query. It showcases the simplified syntax and improved readability achieved through custom filters.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Order).find({\n  where: Order.activeOrders({ year }),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Filter in Order Entity\nDESCRIPTION: Demonstrates creating a custom SQL filter using SqlDatabase.rawFilter to query orders based on customer city. Uses dbNamesOf utility for safe column name generation and includes param function for SQL injection protection.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/3-fitler-based-on-relation-sql/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Order>(\"orders\", {\n  allowApiCrud: true\n})\nexport class Order {\n  @Fields.cuid()\n  id!: string\n\n  @Fields.object()\n  customer!: Customer\n\n  @Field(() => Customer)\n  customerId!: string\n\n  @Fields.number()\n  amount = 0\n\n  @Fields.date()\n  orderDate = new Date()\n\n  static fromCity = (city: string) => {\n    const { orders, customers: c } = dbNamesOf({\n      orders: Order,\n      customers: { $name: Customer, $alias: 'c' }\n    })\n    return SqlDatabase.rawFilter(\n      orders,\n      `\"${orders.customerId}\" in (\n         select \"${c.id}\" from \"${c.$table}\" ${c.$alias}\n         where \"${c.city}\" like ${SqlDatabase.param(city)}\n       )`\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring setAllCompleted to Use Backend Method (TypeScript)\nDESCRIPTION: This snippet shows how to refactor the setAllCompleted function in the React component to use the backend method from TasksController instead of performing the operation on the client side.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/backend-methods.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst setAllCompleted = async (completed: boolean) => {\n  await TasksController.setAllCompleted(completed)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Title Updates with Remult\nDESCRIPTION: This function handles saving updates to a task, particularly for renaming tasks. It prevents the default form submission behavior and uses Remult's save method to update the task in the database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/crud.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst saveTask = async (e: Event, task: Task) => {\n  e.preventDefault()\n  await repo(Task).save({ ...task })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Observable LiveQuery in Angular Component\nDESCRIPTION: Updated TodoComponent code that uses the fromLiveQuery utility to create an observable from a Remult live query. This eliminates the need for manual lifecycle management with ngOnInit and ngOnDestroy.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/appendix-observable-live-query.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/todo/todo.component.ts\n\n...\nexport class TodoComponent {\n  taskRepo = remult.repo(Task);\n  tasks$ = fromLiveQuery(\n    this.taskRepo.liveQuery({\n      limit: 20,\n      orderBy: { createdAt: 'asc' },\n    })\n  );\n```\n\n----------------------------------------\n\nTITLE: Using withRemult Middleware for Multiple Routes in Express\nDESCRIPTION: Shows how to apply api.withRemult as global middleware for multiple Express routes to make the remult object available across all subsequent route handlers.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(api.withRemult) // [!code highlight]\napp.post('/api/customSetAll', async (req, res) => {\n  // ....\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing toMany Relation with findOptions in TypeScript\nDESCRIPTION: Example showing how to customize a toMany relation using the findOptions option to control how related records are retrieved, including limits, ordering, and filtering conditions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n@Relations.toMany<Customer, Order>(() => Order, {\n  fields: {\n    branchId: \"branchId\",\n    customerId: \"id\",\n  },\n  findOptions: {\n    limit: 5,\n    orderBy: {\n      amount: \"desc\",\n    },\n    where: {\n      amount: { $gt: 10 },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Task Deletion Implementation in SolidJS with Remult\nDESCRIPTION: Adds functionality to delete tasks from both the UI and database. Includes a deleteTask function that removes the task from the backend via taskRepo.delete() and updates the local state accordingly.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/crud.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/Todo.tsx\n\n<For each={tasks}>\n  {(task, i) => {\n    async function setCompleted(completed: boolean) {\n      const updatedTask = await taskRepo.update(task, { completed })\n      setTasks(i(), updatedTask)\n    }\n    async function saveTask() {\n      try {\n        await taskRepo.save(task)\n      } catch (error) {\n        alert((error as { message: string }).message)\n      }\n    }\n    async function deleteTask() {\n      try {\n        await taskRepo.delete(task)\n        setTasks(tasks.filter((t) => t !== task))\n      } catch (error) {\n        alert((error as { message: string }).message)\n      }\n    }\n    return (\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          oninput={(e) => setCompleted(e.target.checked)}\n        />\n        <input\n          value={task.title}\n          onInput={(e) => setTasks(i(), \"title\", e.target.value)}\n        />\n        <button onClick={saveTask}>Save</button>\n        <button onClick={deleteTask}>Delete</button>\n      </div>\n    )\n  }}\n</For>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Filter for Orders by Customer City\nDESCRIPTION: Implements a reusable custom filter on the Order entity that finds customers by city and returns their orders, running on the backend.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/filtering-and-relations.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Filter } from 'remult'\n\n@Entity('orders', { allowApiCrud: true })\nexport class Order {\n  //...\n  static filterCity = Filter.createCustom<Order, { city: string }>(\n    async ({ city }) => ({\n      customer: await repo(Customer).find({ where: { city } }),\n    }),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Checkbox Input to Update Task Completion Status\nDESCRIPTION: This snippet shows how to modify a checkbox input to invoke the setCompleted function when its state changes. It passes the task object and the new completion status to the function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/crud.md#2025-04-16_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n\t<input\n\t\ttype=\"checkbox\"\n\t\tchecked={task.completed}\n\t\toninput={(e) => setCompleted(task, e.currentTarget.checked)}\n\t/>\n\t<span>{task.title}</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Customer City to Order Entity using sqlRelations\nDESCRIPTION: Demonstrates how to include a customer's city field directly within the Order entity using sqlRelations. This creates a direct relation field that automatically updates when Customer data changes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/6-sql-expression/3-sql-relations/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsqlRelations(Order).customer.city\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.literal Decorator in Remult\nDESCRIPTION: Defines a literal field restricted to a specific set of string values, providing type safety for string union types.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.literal(() => ['open', 'closed', 'frozen', 'in progress'] as const)\nstatus: 'open' | 'closed' | 'frozen' | 'in progress' = 'open';\n```\n\n----------------------------------------\n\nTITLE: Defining EntityBase Class in TypeScript\nDESCRIPTION: This class serves as a base for entity objects, providing common methods like save, assign, delete, and isNew. It also includes getter methods for accessing entity references and field references.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare class EntityBase {\n  get _(): EntityRefForEntityBase<this>\n  save(): Promise<this>\n  assign(values: Partial<Omit<this, keyof EntityBase>>): this\n  delete(): Promise<void>\n  isNew(): boolean\n  get $(): FieldsRefForEntityBase<this>\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation with Arrow Function in Remult Entity\nDESCRIPTION: This snippet demonstrates how to implement custom validation logic using an arrow function in the validate property of a Fields decorator. The function checks if the title is at least 3 characters long.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string<Task>({\n  validate: (task) => {\n    if (task.title.length < 3) throw \"Too Short\"\n  }\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: Abstracting Server-Only Code in Remult Controllers\nDESCRIPTION: Modified controller code that abstracts server-only functionality by defining a placeholder method that will be implemented on the server side only.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-server-only-packages.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// We'll define an abstract `writeTiLog` function and use it in our code\nstatic writeToLog:(textToWrite:string)=>void; \n.....\n@BackendMethod({allowed:true})\nstatic async updatePriceOnBackend(priceToUpdate:number,remult?:Remult){\n  let products = await remult.repo(Products).find();\n  for (const p of products) {\n      p.price.value += priceToUpdate;\n      await p.save();\n  }\n  ProductsController.writeToLog(new Date() + \" \" + remult.user.name + \" update price\\n\"); \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLite in Frontend using sql.js with Remult\nDESCRIPTION: Provides a comprehensive example of setting up a SQLite database using sql.js in a Remult project. This implementation includes initializing the database, loading from localStorage if available, and setting up an afterMutation hook to save changes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/offline-support.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SqlDatabase } from 'remult'\nimport { SqlJsDataProvider } from 'remult/remult-sql-js'\nimport initSqlJs from 'sql.js'\n\nlet sqlDb: Database\n// Initialize the SqlJsDataProvider with a new database instance\nconst sqlJsDataProvider = new SqlJsDataProvider(\n  initSqlJs({\n    locateFile: (file) => `https://sql.js.org/dist/${file}`, // for complete offline support, change this to a url that is available offline\n  }).then((x) => {\n    // Load the database from localStorage if it exists\n    const dbData = localStorage.getItem('sqljs-db')\n    if (dbData) {\n      const buffer = new Uint8Array(JSON.parse(dbData))\n      return (sqlDb = new x.Database(buffer))\n    }\n    return (sqlDb = new x.Database())\n  }),\n)\n\n// Set up an afterMutation hook to save the database to localStorage after any mutation\nsqlJsDataProvider.afterMutation = async () => {\n  const db = sqlDb\n  const buffer = db.export()\n\n  localStorage.setItem('sqljs-db', JSON.stringify([...buffer]))\n}\nconst localDb = new SqlDatabase(sqlJsDataProvider)\n```\n\n----------------------------------------\n\nTITLE: Custom Field Validation in TypeScript with Remult\nDESCRIPTION: Demonstrates how to implement custom validation logic for the title field using an arrow function that checks minimum length requirement.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string<Task>({\n  validate: (task) => {\n    if (task.title.length < 3) throw \"Too Short\"\n  }\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom RemultContext Property in Backend Method\nDESCRIPTION: Shows how to access and use the custom 'origin' property from RemultContext in a backend method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-options.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@BackendMethod({ allowed: Roles.admin })\nstatic async doSomethingImportant() {\n  console.log(remult.context.origin);\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Custom Filters with Additional Conditions\nDESCRIPTION: Example showing how to combine custom filters with additional filtering conditions using the $and operator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/1-custom-filters/content.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nrepo(Order).find({\n  where: {\n    $and: [\n      Order.activeOrdersFor({ year }),\n      {\n        amount: { $gt: 100 },\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders Directly by City Using SQL Expression Field\nDESCRIPTION: Example showing how to query orders by customer city using the calculated city field added with sqlExpression.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/filtering-and-relations.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.table(\n  await repo(Order).find({\n    where: {\n      city: 'London',\n    },\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Refactoring setAllCompleted to Use Backend Method in Svelte Component\nDESCRIPTION: This snippet updates the setAllCompleted function in the Svelte component to use the backend method from TasksController instead of client-side iteration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/backend-methods.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst setAllCompleted = async (completed: boolean) => {\n  // for (const task of await repo(Task).find()) { // [!code --]\n  //   await repo(Task).save({ ...task, completed });// [!code --]\n  // }// [!code --]\n  await TasksController.setAllCompleted(completed) // [!code ++]\n}\n```\n\n----------------------------------------\n\nTITLE: Express Session Middleware Setup\nDESCRIPTION: Configuration of cookie-session middleware in Express application for session management.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport session from \"cookie-session\"\n\nconst app = express()\napp.use(\n  session({\n    secret: process.env[\"SESSION_SECRET\"] || \"my secret\"\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Entity by ID in Remult\nDESCRIPTION: Shows how to update an existing entity by its ID, providing the new values to be applied.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntaskRepo.update(task.id,{...task,completed:true})\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Requirements to Backend Methods\nDESCRIPTION: Securing server-side methods by adding the allowed property to the BackendMethod decorator, requiring authentication for execution.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Allow } from 'remult'\n\n@BackendMethod({ allowed: Allow.authenticated })\n```\n\n----------------------------------------\n\nTITLE: Angular Auth Component Implementation\nDESCRIPTION: Frontend authentication component handling user sign-in and sign-out\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/auth.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { UserInfo, remult } from 'remult'\nimport { HttpClient, HttpClientModule } from '@angular/common/http'\nimport { FormsModule } from '@angular/forms'\nimport { TodoComponent } from '../todo/todo.component'\n\n@Component({\n  selector: 'app-auth',\n  standalone: true,\n  imports: [CommonModule, FormsModule, TodoComponent, HttpClientModule],\n  templateUrl: './auth.component.html',\n  styleUrl: './auth.component.css',\n})\nexport class AuthComponent implements OnInit {\n  signInUsername = ''\n  remult = remult\n\n  async signIn() {\n    try {\n      remult.user = await AuthController.signIn(this.signInUsername)\n    } catch (error: unknown) {\n      alert((error as { message: string }).message)\n    }\n  }\n\n  async signOut() {\n    await AuthController.signOut()\n    remult.user = undefined\n  }\n\n  ngOnInit() {\n    remult.initUser()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entities and Data Provider for Migrations\nDESCRIPTION: Code sample showing how to set up a configuration file that defines entities and a PostgreSQL data provider for use with both API and migrations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPostgresDataProvider } from 'remult/postgres'\nimport { Task } from '../shared/task'\n\nexport const entities = [Task /* ...other entities */]\nexport const dataProvider = createPostgresDataProvider({\n  connectionString: 'your connection string',\n})\n```\n\n----------------------------------------\n\nTITLE: Layout Component with Remult User Synchronization\nDESCRIPTION: SvelteKit layout component that synchronizes the user state between SvelteKit's data and Remult's user property, ensuring consistent authentication across server and client rendering.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { untrack } from 'svelte'\n  import type { LayoutData } from './$types'\n\n  interface Props {\n    data: LayoutData\n    children?: import('svelte').Snippet\n  }\n\n  let { data, children }: Props = $props()\n\n  $effect(() => {\n    // Trigger the effect only on data.user update\n    data.user\n    untrack(() => {\n      remult.user = data.user\n    })\n  })\n\n  // initRemultSvelteReactivity stuff\n</script>\n\n{@render children?.()}\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.autoIncrement Decorator in Remult\nDESCRIPTION: Defines an auto-incrementing numeric ID field that is determined by the database on insert and cannot be updated through the API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.autoIncrement()\nid:number\n```\n\n----------------------------------------\n\nTITLE: Manually Loading a Lazy-Loaded Entity in TypeScript\nDESCRIPTION: This snippet shows how to manually load a lazy-loaded related entity using the FieldRef's load method in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/lazy-loading-of-related-entities.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait task.$.category!.load()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Filter for Active Orders in TypeScript\nDESCRIPTION: This snippet shows how to create a custom filter for active orders using the Filter.createCustom method. It encapsulates the filtering logic for status and creation year into a reusable component.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Order {\n  //...\n  static activeOrdersFor = Filter.createCustom<Order, { year: number }>(\n    async ({ year }) => {\n      return {\n        status: ['created', 'confirmed', 'pending', 'blocked', 'delayed'],\n        createdAt: {\n          $gte: new Date(year, 0, 1),\n          $lt: new Date(year + 1, 0, 1),\n        },\n      }\n    },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using withRemult Middleware for a Specific Route in Express\nDESCRIPTION: Demonstrates how to use api.withRemult as middleware for a specific Express route to make the remult object available within that route handler.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/api/customSetAll', api.withRemult, async (req, res) => {\n  // ....\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Data with include Option\nDESCRIPTION: Example of fetching customers with their related orders using the include option in repository queries.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst customers = await repo(Customer).find({\n  include: {\n    orders: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Example Generated SQL Query\nDESCRIPTION: Shows the SQL query generated by the filterToRaw-based custom filter when querying orders by customer city.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/3-fitler-based-on-relation-sql/content.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"id\", \"status\", \"customerId\", \"orderDate\", \"amount\"\nFROM \"orders\"\nWHERE \"customerId\" IN (\n  SELECT \"c\".\"id\"\n  FROM \"customers\" AS c\n  WHERE c.\"city\" LIKE '%New York%'\n)\nORDER BY \"orderDate\" ASC\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Order Data for Customers\nDESCRIPTION: Demonstrates how to use the 'include' option in the find method to fetch related Order data for each Customer. This ensures that associated orders are included in query results.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/1-relations/2-one-to-many/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst customers = await repo(Customer).find({\n  include: {\n    orders: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Task Input Form in Angular Template\nDESCRIPTION: This HTML snippet adds a form with an input field for entering new task titles. It uses two-way data binding with [(ngModel)] to connect to the newTaskTitle property in the component, and submits the form to the addTask method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/crud.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/app/todo/todo.component.html -->\n\n<h1>todos</h1>\n<main>\n  <form (submit)=\"addTask()\">\n    <input\n      placeholder=\"What needs to be done?\"\n      [(ngModel)]=\"newTaskTitle\"\n      name=\"newTaskTitle\"\n    />\n    <button>Add</button>\n  </form>\n  <div *ngFor=\"let task of tasks\">\n    <input type=\"checkbox\" [(ngModel)]=\"task.completed\" />\n    {{ task.title }}\n  </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Proxy in Vite\nDESCRIPTION: Extended vite.config.ts configuration that adds a proxy for API requests, redirecting requests from the Vue dev server to the backend API server running on a different port.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/vue.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// vite.config.ts\n\n//...\nexport default defineConfig({\n  plugins: [vue()],\n  server: { proxy: { \"/api\": \"http://localhost:3002\" } },\n  esbuild: {\n    tsconfigRaw: {\n      compilerOptions: {\n        experimentalDecorators: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Paginator with Repository Queries in TypeScript\nDESCRIPTION: This example demonstrates how to create a paginated query, get the total count of items, and navigate through pages. It shows how to check if more pages exist and how to retrieve the next page of results.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_paginator.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = taskRepo.query({\n  where: { completed: false },\n  pageSize: 100,\n})\nconst count = await query.count()\nconsole.log('Paged: ' + count / 100)\nlet paginator = await query.paginator()\nconsole.log(paginator.items.length)\nif (paginator.hasNextPage) {\n  paginator = await paginator.nextPage()\n  console.log(paginator.items.length)\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Field Decorator in Remult\nDESCRIPTION: Definition of the Field decorator function that is used to define entity fields with their types and options. Supports various value types and allows for configuration through FieldOptions.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function Field<entityType = unknown, valueType = unknown>(\n  valueType:\n    | (() => valueType extends number\n        ? Number\n        : valueType extends string\n        ? String\n        : valueType extends boolean\n        ? Boolean\n        : ClassType<valueType>)\n    | undefined,\n  ...options: (\n    | FieldOptions<entityType, valueType>\n    | ((options: FieldOptions<entityType, valueType>, remult: Remult) => void)\n  )[]\n): (\n  target: any,\n  context:\n    | ClassFieldDecoratorContextStub<entityType, valueType | undefined>\n    | string,\n  c?: any,\n) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring Hapi Server with Remult Middleware\nDESCRIPTION: TypeScript code to set up the Hapi server and register the Remult middleware. This initializes the server on port 3002 and includes the Remult API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hapi.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/index.ts\n\nimport { server } from '@hapi/hapi'\nimport { api } from './api.js'\n\nconst hapi = server({ port: 3002 })\n\nawait hapi.register(api)\n\nhapi.start().then(() => console.log(\"Server started\"))\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.updatedAt Decorator in Remult\nDESCRIPTION: Defines a field that automatically updates the timestamp on every update and cannot be modified through the API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.updatedAt()\nupdatedAt = new Date()\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-based Authorization in Task Entity Class\nDESCRIPTION: Implementation of the Task entity class with role-based authorization rules. The code defines that all authenticated users can view tasks, but only users with the 'admin' role can create new tasks, delete tasks, or update task titles.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/Task.ts\n\nimport { Allow, Entity, Fields, Validators } from \"remult\"\n\n@Entity<Task>(\"tasks\", {\n  allowApiCrud: Allow.authenticated,\n  allowApiInsert: \"admin\",\n  allowApiDelete: \"admin\"\n})\nexport class Task {\n  @Fields.uuid()\n  id!: string\n\n  @Fields.string({\n    validate: (task) => {\n      if (task.title.length < 3) throw \"Too Short\"\n    }\n    allowApiUpdate: \"admin\"\n  })\n  title = \"\"\n\n  @Fields.boolean()\n  completed = false\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Schema Synchronization in Remult\nDESCRIPTION: Code snippet demonstrating how to manually trigger schema synchronization in Remult applications when automatic synchronization is disabled.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nremult.dataProvider.ensureSchema!(entities.map((x) => repo(x).metadata))\n```\n\n----------------------------------------\n\nTITLE: Defining EntityFilter Type in TypeScript\nDESCRIPTION: This complex type definition creates a structure for entity filters, allowing for various comparison and string operations on entity properties. It includes support for logical operations like $or, $and, and $not.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare type EntityFilter<entityType> = {\n  [Properties in keyof Partial<MembersOnly<entityType>>]?:\n    | (Partial<entityType>[Properties] extends number | Date | undefined | null\n        ? ComparisonValueFilter<Partial<entityType>[Properties]>\n        : Partial<entityType>[Properties] extends string | undefined\n        ?\n            | Partial<entityType>[Properties]\n            | (ContainsStringValueFilter &\n                ComparisonValueFilter<Partial<entityType>[Properties]>)\n        : Partial<entityType>[Properties] extends boolean | undefined | null\n        ? ValueFilter<boolean>\n        : Partial<entityType>[Properties] extends\n            | {\n                id?: string | number\n              }\n            | undefined\n        ? IdFilter<Partial<entityType>[Properties]>\n        : ValueFilter<Partial<entityType>[Properties]>)\n    | ContainsStringValueFilter\n} & {\n  $or?: EntityFilter<entityType>[]\n  $and?: EntityFilter<entityType>[]\n  $not?: EntityFilter<entityType>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Pagination in Remult with TypeScript\nDESCRIPTION: Sets up pagination to limit the number of tasks fetched from the database to 20 items per request. This prevents performance issues when dealing with large datasets by retrieving only a subset of records at a time.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/sorting-filtering.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/todo/todo.component.ts\n\nngOnInit() {\n  this.taskRepo.find({\n    limit: 20\n  }).then((items) => (this.tasks = items));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dedicated Entity Extension with City Field\nDESCRIPTION: A more flexible approach that creates an extended Order entity with the city field, allowing developers to choose the right entity based on their needs.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/filtering-and-relations.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class OrderWithCity extends Order {\n  @Fields.string<Order>({\n    sqlExpression: async () => {\n      const customer = await dbNamesOf(Customer)\n      const order = await dbNamesOf(Order)\n      return `(\n          select ${customer.city}\n            from ${customer}\n           where ${customer.id} = ${order.customer}\n          )`\n    },\n  })\n  city = ''\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bun SQLite Data Provider in TypeScript\nDESCRIPTION: Defines BunSqliteDataProvider class extending SqliteCoreDataProvider for Bun.js SQLite integration. Includes a Database type definition with close and query methods.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class BunSqliteDataProvider extends SqliteCoreDataProvider {\n  constructor(db: Database)\n}\ntype Database = {\n  close(): void\n  query(sql: string): {\n    all(args?: any): any[]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Authentication Component\nDESCRIPTION: This code creates a React component that manages user authentication state, providing sign-in and sign-out functionality with form handling and conditional rendering based on authentication status.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/Auth.tsx\n\nimport { FormEvent, useEffect, useState } from \"react\";\nimport { remult } from \"remult\";\nimport App from \"./App\";\nimport { AuthController } from \"./shared/AuthController\";\n\nexport default function Auth() {\n  const [username, setUsername] = useState(\"\");\n  const [signedIn, setSignedIn] = useState(false);\n\n  async function signIn(e: FormEvent) {\n    e.preventDefault();\n    try {\n      remult.user = await AuthController.signIn(username);\n      setSignedIn(true);\n    } catch (error: unknown) {\n      alert((error as { message: string }).message);\n    }\n  }\n\n  async function signOut() {\n    await AuthController.signOut();\n    remult.user = undefined;\n    setSignedIn(false);\n  }\n  useEffect(() => {\n    remult.initUser().then(() => {\n      setSignedIn(remult.authenticated());\n    });\n  }, []);\n\n  if (!signedIn)\n    return (\n      <>\n        <h1>Todos</h1>\n        <main>\n          <form onSubmit={signIn}>\n            <input\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"Username, try Steve or Jane\"\n            />\n            <button>Sign in</button>\n          </form>\n        </main>\n      </>\n    );\n  return (\n    <>\n      <header>\n        Hello {remult.user!.name} <button onClick={signOut}>Sign Out</button>\n      </header>\n      <App />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Raw SQL Custom Filter in TypeScript\nDESCRIPTION: Demonstrates creating a custom filter using raw SQL to query orders based on customer city and year. Uses parameterized queries for SQL injection prevention.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic activeOrders = Filter.createCustom<\n  Order,\n  { year: number; customerCity: string }\n>(async ({ year, customerCity }) => {\n  return {\n    status: [\"created\", \"confirmed\", \"pending\", \"blocked\", \"delayed\"],\n    createdAt: {\n      $gte: new Date(year, 0, 1),\n      $lt: new Date(year + 1, 0, 1),\n    },\n    $and: [\n      SqlDatabase.rawFilter(({param}) =>  \n        `\"customerId\" in (select id from customers where city = ${param(customerCity)})` \n      ), \n    ],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Connection String in Environment Variable\nDESCRIPTION: Sample environment variable configuration in .env.local file for the PostgreSQL connection string. This defines the DATABASE_URL variable that will be used to connect to the database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/database.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=postgresql://username:password@host:port/dbname[?paramspec]\n```\n\n----------------------------------------\n\nTITLE: Filtering Data in TypeScript\nDESCRIPTION: Shows how to filter data using the where clause in repository find method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_remult.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait taskRepo.find({where: { completed:false }})\n```\n\n----------------------------------------\n\nTITLE: Using Field Caption in React Input\nDESCRIPTION: Shows how to use the caption property of a field's metadata as a placeholder in a React input component.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_fieldmetadata.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<input placeholder={taskRepo.metadata.fields.title.caption}/>\n```\n\n----------------------------------------\n\nTITLE: Implementing UserInfo Interface in Remult for Authentication\nDESCRIPTION: The UserInfo interface in Remult that must be implemented by the authentication system. It includes user ID, name, and optional roles array for authorization purposes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UserInfo {\n  id: string\n  name?: string\n  roles?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Client-side setAllCompleted to Use Backend Method in React\nDESCRIPTION: Updated implementation of the setAllCompleted function in the React App component that calls the backend method instead of performing client-side iteration and multiple API requests.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/backend-methods.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst setAllCompleted = async (completed: boolean) => {\n  await TasksController.setAllCompleted(completed)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SvelteKit Layout Server Load Function for Authentication\nDESCRIPTION: Server-side load function that protects routes by redirecting unauthenticated users to the sign-in page and providing user information to the layout.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remult } from 'remult'\nimport type { LayoutServerLoad } from './$types'\nimport { redirect } from '@sveltejs/kit'\n\n// will protect every route in the app\nexport const load = (async () => {\n  if (!remult.authenticated()) {\n    throw redirect(303, '/auth/signin')\n  }\n  return {\n    user: remult.user,\n  }\n}) satisfies LayoutServerLoad\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult Express with SQLite3 Data Provider\nDESCRIPTION: TypeScript code for configuring the Remult data provider to connect to an SQLite database. This setup wraps the Sqlite3DataProvider inside the SqlDatabase class to ensure compatibility across different environments, including StackBlitz.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/sqlite3.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult'\nimport sqlite3 from 'sqlite3'\nimport { Sqlite3DataProvider } from 'remult/remult-sqlite3'\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase(\n      new Sqlite3DataProvider(new sqlite3.Database('./mydb.sqlite')),\n    ),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Composing Custom Filter with Regular Filter in TypeScript\nDESCRIPTION: This snippet illustrates how to combine a custom filter with a regular filter using the $and operator. It demonstrates the composability of custom filters for complex filtering logic.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Order).find({\n  where: {\n    customerId: '123',\n    $and: [Order.activeOrders({ year })],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Storage in LocalStorage with Remult\nDESCRIPTION: Shows how to set up a JSON data provider using the browser's localStorage for simple data storage needs in Remult. This approach is suitable for small datasets that need to persist across sessions or page reloads.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/offline-support.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JsonDataProvider, Remult } from 'remult'\nexport const remultLocalStorage = new Remult(new JsonDataProvider(localStorage))\n```\n\n----------------------------------------\n\nTITLE: Enhanced SQL Filter Using filterToRaw\nDESCRIPTION: Shows how to use filterToRaw to translate EntityFilter objects into SQL queries, combining declarative filtering with SQL efficiency.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/3-fitler-based-on-relation-sql/content.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromCity = (city: string) => {\n  const { orders, customers: c } = dbNamesOf({\n    orders: Order,\n    customers: { $name: Customer, $alias: 'c' }\n  })\n  return SqlDatabase.rawFilter(\n    orders,\n    `\"${orders.customerId}\" in (\n       select \"${c.id}\" from \"${c.$table}\" ${c.$alias}\n       where ${filterToRaw(c, { city: { $contains: city } })}\n     )`\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Data Provider in Remult\nDESCRIPTION: Server-side configuration to set up Postgres database connection using Remult's postgres data provider. Requires valid Postgres connection string.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/database.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/api.ts\n\n//...\n\nimport { createPostgresDataProvider } from \"remult/postgres\"\n\nexport const api = remultExpress({\n  //...\n  dataProvider: createPostgresDataProvider({\n    connectionString: \"your connection string\"\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing TodoItem Component with Error Handling in TypeScript\nDESCRIPTION: This snippet shows the initial setup of the TodoItem component with error handling using Remult's ErrorInfo type. It includes state management for the task and errors, and a save function that handles validation errors.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/2-using-field-metadata-in-forms/content.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { repo, ErrorInfo } from 'remult'\nimport { Task } from '../shared/Task.js'\nimport { useState } from 'react'\n\nconst taskRepo = repo(Task)\nexport function TodoItem({ task }: { task: Task }) {\n  const [state, setState] = useState(task)\n  const [error, setError] = useState<ErrorInfo<Task>>()\n  async function save() {\n    try {\n      setError(undefined)\n      await taskRepo.save(state)\n    } catch (error: any) {\n      setError(error)\n    }\n  }\n  // ... rest of the component\n```\n\n----------------------------------------\n\nTITLE: OR Operator in Remult EntityFilter\nDESCRIPTION: Uses the $or operator to match records that satisfy any of the specified conditions. A record will match if at least one of the conditions in the array is true.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: {\n  $or: [{ status: 1 }, { archive: false }]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Buttons to Toggle All Tasks Completion Status in Vue Template\nDESCRIPTION: Vue template code that adds two buttons to set all tasks as completed or uncompleted, calling the setAllCompleted function with the appropriate boolean value.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/backend-methods.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<div>\n  <button @click=\"setAllCompleted(true)\">Set All as Completed</button>\n  <button @click=\"setAllCompleted(false)\">Set All as Uncompleted</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining toMany Relation in TypeScript with Remult\nDESCRIPTION: Demonstrates how to use the @Relations.toMany decorator to define a one-to-many relationship between entities in Remult. It includes options for limiting, ordering, and filtering related entities.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n@Relations.toMany(() => Order, {\n  field: \"customerOrders\",\n  findOptions: {\n    limit: 10,\n    orderBy: { amount: \"desc\" },\n    where: { completed: true },\n  },\n})\norders?: Order[];\n```\n\n----------------------------------------\n\nTITLE: Initializing Migrations during API Startup with Remult\nDESCRIPTION: This code snippet demonstrates how to integrate migration execution during the API initialization phase of a Remult application. It configures the remultExpress API with entities and dataProvider, and sets up an initApi callback that runs migrations while keeping the database connection open with the endConnection: false option.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/api.ts\nimport { remultExpress } from 'remult/remult-express'\nimport { dataProvider, entities } from './config'\nimport { migrate } from 'remult/migrations/migrate'\nimport { migrations } from './migrations/migrations'\nimport { remult } from 'remult'\n\nexport const api = remultExpress({\n  entities,\n  dataProvider,\n  initApi: async () => {\n    await migrate({\n      dataProvider: remult.dataProvider,\n      migrations,\n      endConnection: false, //it's the default :)\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity Model in TypeScript\nDESCRIPTION: Creates a Task entity class with Remult decorators for ID, title, completed status, and creation timestamp. Configures API CRUD operations through entity decorators.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/entities.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields } from \"remult\"\n\n@Entity(\"tasks\", {\n  allowApiCrud: true\n})\nexport class Task {\n  @Fields.cuid()\n  id = \"\"\n\n  @Fields.string()\n  title = \"\"\n\n  @Fields.boolean()\n  completed = false\n\n  @Fields.createdAt()\n  createdAt?: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.uuid Decorator in Remult\nDESCRIPTION: Defines an auto-generated UUID field that is determined by the backend on insert and cannot be updated through the API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.uuid()\nid:string\n```\n\n----------------------------------------\n\nTITLE: Custom Database Column Name for Fields\nDESCRIPTION: Example showing how to map a field to a differently named column in the database using the dbName option.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({ dbName: 'userName'})\nuserName=''\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Filter for Relational Filtering in Order Entity\nDESCRIPTION: This code defines a custom filter called 'fromCity' in the Order entity that retrieves orders based on the customer's city. It establishes a relationship between Order and Customer entities using the @Relations.toOne decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/2-filter-based-on-relation/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```file:/shared/Order.ts title=\"shared/Order.ts\" collapse={1-8,10-21} {23-35}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Creation in Angular Component with remult\nDESCRIPTION: This code adds functionality to create new tasks. It introduces a newTaskTitle field to store user input and an addTask method that inserts the task into the database via the taskRepo.insert API call, then adds it to the local tasks array.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/crud.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TodoComponent implements OnInit {\n  newTaskTitle = \"\"\n  async addTask() {\n    try {\n      const newTask = await this.taskRepo.insert({ title: this.newTaskTitle })\n      this.tasks.push(newTask)\n      this.newTaskTitle = \"\"\n    } catch (error: any) {\n      alert(error.message)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding State and Event Handler for Task Input in React\nDESCRIPTION: This snippet adds state management for new task input and creates an empty form submission handler. It introduces the newTaskTitle state variable and the addTask function to handle form submissions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/3-manipulating-data/1-Insert/content.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Todo() {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n  async function addTask(e: FormEvent) {\n    e.preventDefault();\n  }\n  useEffect(() => {\n    taskRepo.find().then(setTasks);\n  }, []);\n```\n\n----------------------------------------\n\nTITLE: Defining Customer and Order Entities with Relations in Remult\nDESCRIPTION: Basic entity definitions showing a one-to-many relationship between Customer and Order entities, including field definitions and relation mappings.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/filtering-and-relations.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Field, Fields, remult, Relations } from 'remult'\n\n@Entity('customers')\nexport class Customer {\n  @Fields.autoIncrement()\n  id = 0\n  @Fields.string()\n  name = ''\n  @Fields.string()\n  city = ''\n  @Relations.toMany(() => Order)\n  orders?: Order[]\n}\n\n@Entity('orders')\nexport class Order {\n  @Fields.autoIncrement()\n  id = 0\n  @Relations.toOne(() => Customer)\n  customer!: Customer\n  @Fields.number()\n  amount = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Validation with Fetch in JavaScript\nDESCRIPTION: This snippet demonstrates how to test the API validation by making a direct POST request to the tasks endpoint using the browser's console.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/1-required/content.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch('/api/tasks', { method: 'POST', body: '' }).then((r) => r.json())\n```\n\n----------------------------------------\n\nTITLE: Creating NextAuth API Route in Next.js\nDESCRIPTION: Sets up the NextAuth API route handler in Next.js, exporting the auth configuration for GET and POST requests.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/api/auth/[...nextauth]/route.ts\n\nimport { auth } from '../../../../auth'\n\nexport { auth as GET, auth as POST }\n```\n\n----------------------------------------\n\nTITLE: Defining Repository Relations Type for Entity Types in TypeScript\nDESCRIPTION: TypeScript type definition that maps entity properties to their repository relations. It transforms array properties into Repository<R> and other entity properties into objects with findOne method.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RepositoryRelationsForEntityBase<entityType> = {\n  [K in keyof Omit<entityType, keyof EntityBase>]-?: NonNullable<\n    entityType[K]\n  > extends Array<infer R>\n    ? Repository<R>\n    : entityType[K] extends infer R\n    ? {\n        findOne: (options?: FindOptionsBase<R>) => Promise<R>\n      }\n    : never\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Role-based Allowed Value in TypeScript\nDESCRIPTION: Shows how to set a role-based permission using a string value for the Allowed data type in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/allowed.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  allowApiRead: 'admin'\n}\n```\n\n----------------------------------------\n\nTITLE: Required Field Validation in TypeScript using Remult\nDESCRIPTION: Demonstrates how to add required field validation to a Task entity's title field using Remult's built-in Validators.required.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string<Task>({\n  validate: Validators.required\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: NPM Script for Development Server\nDESCRIPTION: Package.json script configuration for running the development server with tsx\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/express.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"dev-node\": \"tsx watch --env-file=.env --tsconfig tsconfig.server.json src/server\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Completion Status in Remult\nDESCRIPTION: Demonstrates server-side filtering to retrieve only completed tasks from the database. The where clause uses the boolean completed field to filter records, and Remult provides compile-time type checking for this filter.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/sorting-filtering.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/todo/todo.component.ts\n\nngOnInit() {\n  this.taskRepo.find({\n    limit: 20,\n    orderBy: { createdAt:\"asc\" },\n    where: { completed: true }\n  }).then((items) => (this.tasks = items));\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.integer Decorator in Remult\nDESCRIPTION: Defines an integer field (without decimal values) in a Remult entity using the @Fields.integer() decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.integer()\nquantity = 0;\n```\n\n----------------------------------------\n\nTITLE: Sorting Data in TypeScript\nDESCRIPTION: Demonstrates data sorting using orderBy parameter in repository find method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_remult.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Products).find({ orderBy: { name: \"asc\" }})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Table Names using dbNamesOf\nDESCRIPTION: Shows how to use dbNamesOf function to dynamically retrieve database table names for type-safe queries\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/running-sql-on-the-server.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = await dbNamesOf(Task)\nconst sql = SqlDatabase.getDb()\nconst result = await sql.execute(`SELECT COUNT(*) AS count FROM ${tasks}`)\nconsole.log(result.rows[0].count)\n```\n\n----------------------------------------\n\nTITLE: Integrating Remult Middleware with Express\nDESCRIPTION: Updated TypeScript code to integrate Remult middleware into the Express server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport express from \"express\"\nimport { api } from \"./api.js\"\n\nconst app = express()\napp.use(api)\n\napp.listen(3002, () => console.log(\"Server started\"))\n```\n\n----------------------------------------\n\nTITLE: Refactoring Client-Side Function to Use Backend Method\nDESCRIPTION: Updated client-side function that calls the server-side backend method instead of processing tasks individually, improving performance for operations on multiple entities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/backend-methods.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function setAllCompleted(completed: boolean) {\n  await TasksController.setAllCompleted(completed)\n}\n```\n\n----------------------------------------\n\nTITLE: Using SQL Relations Filter in Frontend React Component\nDESCRIPTION: This example shows how to use the custom fromCity filter in a React component. It demonstrates the integration of the backend filter with frontend data fetching.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/4-sql-relations-filter/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction OrderList() {\n  const [orders] = useQuery(Order, (orderRepo) =>\n    orderRepo.find({\n      where: Order.fromCity({ city: 'New York' }),\n      orderBy: { orderDate: 'desc' }\n    })\n  );\n\n  return (\n    <ul>\n      {orders.map(order => (\n        <li key={order.id}>{order.id} - {order.amount}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Data Provider in Remult API Server\nDESCRIPTION: Adding PostgreSQL database connection to a Remult Express API server. This code configures the dataProvider to use Postgres instead of the default JSON file storage.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/database.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/api.ts\n\n//...\n\nimport { createPostgresDataProvider } from \"remult/postgres\"\n\nexport const api = remultExpress({\n  //...\n  dataProvider: createPostgresDataProvider({\n    connectionString: \"your connection string\"\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining RemultServerOptions Interface for Server Configuration\nDESCRIPTION: Declares a comprehensive interface for Remult server configuration options, including entity and controller registration, user authentication, request initialization, data providers, schema management, and error handling. This interface allows detailed customization of server behavior.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RemultServerOptions<RequestType> {\n  /**Entities to use for the api */\n  entities?: ClassType<any>[]\n  /**Controller to use for the api */\n  controllers?: ClassType<any>[]\n  /** Will be called to get the current user based on the current request */\n  getUser?: (request: RequestType) => Promise<UserInfo | undefined>\n  /** Will be called for each request and can be used for configuration */\n  initRequest?: (\n    request: RequestType,\n    options: InitRequestOptions,\n  ) => Promise<void>\n  /** Will be called once the server is loaded and the data provider is ready */\n  initApi?: (remult: Remult) => void | Promise<void>\n  /** Data Provider to use for the api.\n   *\n   * @see [Connecting to a Database](https://remult.dev/docs/databases.html).\n   */\n  dataProvider?:\n    | DataProvider\n    | Promise<DataProvider>\n    | (() => Promise<DataProvider | undefined>)\n  /** Will create tables and columns in supporting databases. default: true\n   *\n   * @description\n   * when set to true, it'll create entities that do not exist, and add columns that are missing.\n   */\n  ensureSchema?: boolean\n  /** The path to use for the api, default:/api\n   *\n   * @description\n   * If you want to use a different api path adjust this field\n   */\n  rootPath?: string\n  /** The default limit to use for find requests that did not specify a limit */\n  defaultGetLimit?: number\n  /** When set to true (default) it'll console log each api endpoint that is created */\n  logApiEndPoints?: boolean\n  /** A subscription server to use for live query and message channels */\n  subscriptionServer?: SubscriptionServer\n  /** A storage to use to store live queries, relevant mostly for serverless scenarios or larger scales */\n  liveQueryStorage?: LiveQueryStorage\n  /** Used to store the context relevant info for re running a live query */\n  contextSerializer?: {\n    serialize(remult: Remult): Promise<any>\n    deserialize(json: any, options: InitRequestOptions): Promise<void>\n  }\n  /** When set to true, will display an admin ui in the `/api/admin` url.\n   * Can also be set to an arrow function for fine grained control\n   * @example\n   * admin: true\n   * @example\n   * admin: () => remult.isAllowed('admin')\n   * @see [allowed](http://remult.dev/docs/allowed.html)\n   */\n  admin?:\n    | Allowed\n    | {\n        allow: Allowed\n        customHtmlHead?: (remult: Remult) => string\n      }\n  /** Storage to use for backend methods that use queue */\n  queueStorage?: QueueStorage\n  /**\n   * This method is called whenever there is an error in the API lifecycle.\n   *\n   * @param info - Information about the error.\n   * @param info.req - The request object.\n   * @param info.entity - (Optional) The entity metadata associated with the error, if applicable.\n   * @param info.exception - (Optional) The exception object or error that occurred.\n   * @param info.httpStatusCode - The HTTP status code.\n   * @param info.responseBody - The body of the response.\n   * @param info.sendError - A method to send a custom error response. Call this method with the desired HTTP status code and response body.\n   *\n   * @returns A promise that resolves when the error handling is complete.\n   * @example\n   * export const api = remultExpress({\n   *   error: async (e) => {\n   *     if (e.httpStatusCode == 400) {\n   *       e.sendError(500, { message: \"An error occurred\" })\n   *     }\n   *   }\n   * })\n   */\n  error?: (info: {\n    req?: RequestType\n    entity?: EntityMetadata\n    exception?: any\n    httpStatusCode: number\n    responseBody: any\n    sendError: (httpStatusCode: number, body: any) => void\n  }) => Promise<void> | undefined\n}\n//[ ] ClassType from TBD is not exported\n//[ ] UserInfo from TBD is not exported\n//[ ] SubscriptionServer from TBD is not exported\n//[ ] Allowed from TBD is not exported\n//[ ] EntityMetadata from TBD is not exported\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Completion Status in Remult\nDESCRIPTION: This snippet demonstrates how to filter tasks based on their completion status using the 'where' option in the Repository.find() method. It shows that the filter is type-checked at compile time.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/sorting-filtering.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/App.tsx\n\nuseEffect(() => {\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" },\n      where: { completed: true }\n    })\n    .then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Registering TasksController in API Configuration (TypeScript)\nDESCRIPTION: Code snippet showing how to register the TasksController in the server's API module. This is necessary for the backend method to be accessible through the API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/backend-methods.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TasksController } from \"../shared/TasksController\"\n\nexport const api = remultExpress({\n  //...\n  controllers: [TasksController]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Remult Entity without Decorators in JavaScript\nDESCRIPTION: Shows how to define a Task entity using Remult's describeEntity function in JavaScript. It sets up fields for id, title, and completed status, similar to the TypeScript version but without type annotations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/working-without-decorators.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Entity, Fields, describeEntity } from 'remult'\n\nexport class Task {\n  id\n  title = ''\n  completed = false\n}\ndescribeEntity(\n  Task,\n  'tasks',\n  {\n    allowApiCrud: true,\n  },\n  {\n    id: Fields.uuid(),\n    title: Fields.string(),\n    completed: Fields.boolean(),\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing RestDataProvider Class in TypeScript\nDESCRIPTION: Implementation of the DataProvider interface for REST API interactions. It manages entity data providers and handles transactions through an API client.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class RestDataProvider implements DataProvider {\n  private apiProvider\n  private entityRequested?\n  constructor(\n    apiProvider: () => ApiClient,\n    entityRequested?: ((entity: EntityMetadata) => void) | undefined,\n  )\n  getEntityDataProvider(entity: EntityMetadata): RestEntityDataProvider\n  transaction(\n    action: (dataProvider: DataProvider) => Promise<void>,\n  ): Promise<void>\n  isProxy: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Example .env File for Database Connection\nDESCRIPTION: Example of a .env file content for storing the database connection string as an environment variable.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=your_connection_string\n```\n\n----------------------------------------\n\nTITLE: Registering Task Entity with Remult in Sveltekit API\nDESCRIPTION: Updates the Sveltekit API configuration to register the Task entity with Remult, making it available through the API endpoints.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/entities.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultSveltekit } from 'remult/remult-sveltekit'\nimport { Task } from '../shared/Task' // [!code ++]\n\nexport const api = remultSveltekit({\n  entities: [Task], // [!code ++]\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Completed Tasks with Remult in TypeScript\nDESCRIPTION: This snippet demonstrates how to filter tasks based on their completion status. It uses the 'where' property in the options object of Remult's find method to specify the filtering condition.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/sorting-filtering.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonMounted(() =>\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" },\n      where: { completed: true }\n    })\n    .then(items => (tasks.value = items))\n)\n```\n\n----------------------------------------\n\nTITLE: BackendMethodOptions Interface for Server Method Configuration\nDESCRIPTION: Interface defining configuration options for backend methods, including access control, API routing, transaction handling, and queuing behavior. Provides detailed control over how backend methods execute.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BackendMethodOptions<type> {\n  /**Determines when this `BackendMethod` can execute, see: [Allowed](https://remult.dev/docs/allowed.html)  */\n  allowed: AllowedForInstance<type>\n  /** Used to determine the route for the BackendMethod.\n   * @example\n   * {allowed:true, apiPrefix:'someFolder/'}\n   */\n  apiPrefix?: string\n  /**\n   * Controls whether this `BackendMethod` runs within a database transaction. If set to `true`, the method will either complete entirely or fail without making any partial changes. If set to `false`, the method will not be transactional and may result in partial changes if it fails.\n   * @default true\n   * @example\n   * {allowed: true, transactional: false}\n   */\n  transactional?: boolean\n  /** EXPERIMENTAL: Determines if this method should be queued for later execution */\n  queue?: boolean\n  /** EXPERIMENTAL: Determines if the user should be blocked while this `BackendMethod` is running*/\n  blockUser?: boolean\n  paramTypes?: any[] | (() => any[])\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Task Permissions to Filter Time Entries\nDESCRIPTION: Implements an apiPrefilter in the TimeEntry entity that uses the Task.allowedTasks custom filter to restrict access to time entries based on the user's permissions for related tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/4-filtering-related-rows-based-on-user-permissions/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```file:/shared/TimeEntry.ts title=\"shared/TimeEntry.ts\" add={6-10} collapse={13-26}\n\n```\n```\n\n----------------------------------------\n\nTITLE: MongoDB Integration\nDESCRIPTION: Examples of MongoDB integration with Remult, showing basic queries and filtering\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/running-sql-on-the-server.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = await dbNamesOf(Task)\nconst mongo = MongoDataProvider.getDb()\nconst r = await(await mongo.collection(tasks.$entityName)).countDocuments()\nconsole.log(r)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = await dbNamesOf(Task)\nconst mongo = MongoDataProvider.getDb()\nconst r = await(await mongo.collection(tasks.$entityName)).countDocuments(\n  await MongoDataProvider.filterToRaw(Task, { id: [1, 2] }),\n)\nconsole.log(r)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Data Provider in Remult\nDESCRIPTION: Express server setup with Remult configuration using DuckDB as the data provider. Uses in-memory database configuration but can be modified to use file-based storage.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/duckdb.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult' // [!code highlight]\nimport { Database } from 'duckdb' // [!code highlight]\nimport { DuckDBDataProvider } from 'remult/remult-duckdb' // [!code highlight]\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase( // [!code highlight]\n      new DuckDBDataProvider(new Database(':memory:')), // [!code highlight]\n    ), // [!code highlight]\n  }),\n)\n\napp.listen(3000, () => console.log('Server is running on port 3000'))\n```\n\n----------------------------------------\n\nTITLE: Creating Remult API Middleware for Hapi\nDESCRIPTION: TypeScript code to create the Remult middleware for Hapi. This sets up the Remult integration with the Hapi server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hapi.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/api.ts\n\nimport { remultHapi } from 'remult/remult-hapi'\n\nexport const api = remultHapi()\n```\n\n----------------------------------------\n\nTITLE: Updating Build and Start Scripts in package.json\nDESCRIPTION: Modifies the npm scripts to include server-side TypeScript compilation in the build process and updates the start script to run the production Node.js server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n\"build\": \"tsc && vite build && tsc -p tsconfig.server.json\",\n\"start\": \"node dist/server/\"\n```\n\n----------------------------------------\n\nTITLE: Creating Raw SQL Filter with Parameters\nDESCRIPTION: Example of creating a custom SQL filter using rawFilter method with parameterized query\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_sqldatabase.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSqlDatabase.rawFilter(({param}) =>\n     \"\\\"customerId\\\" in (select id from customers where city = ${param(customerCity)})\"\n   )\n```\n\n----------------------------------------\n\nTITLE: Defining a Field with Function Configuration in TypeScript\nDESCRIPTION: Example of using Fields.string decorator with an arrow function that receives remult as a parameter to configure field options, specifically setting includeInApi to true.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// as an arrow function that receives `remult` as a parameter\n@Fields.string((options,remult) => options.includeInApi = true)\ntitle='';\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult Express Middleware\nDESCRIPTION: TypeScript code to create and export Remult Express middleware.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { remultExpress } from 'remult/remult-express'\n\nexport const api = remultExpress()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Remult API Route in SvelteKit\nDESCRIPTION: SvelteKit route handler to expose Remult's API endpoints. This imports the API instance and exports HTTP method handlers for REST operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { api } from '../../../server/api'\n\nexport const { GET, POST, PUT, DELETE } = api\n```\n\n----------------------------------------\n\nTITLE: In Statement Filter in Remult\nDESCRIPTION: Filters records where a field matches any value in a provided array. Two equivalent syntaxes are shown: the shorthand array notation and the explicit $in operator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwhere:{ status:[1,3,5] }\n//or\nwhere:{ status:{ $in:[1,3,5]: } }\n```\n\n----------------------------------------\n\nTITLE: Converting Field Value to Input Format\nDESCRIPTION: Shows how to use the toInput method to adapt a field's value for use in an HTML input element.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_fieldmetadata.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.dateOnly()\nbirthDate = new Date(1976,5,16)\n//...\ninput.value = repo.fields.birthDate.toInput(person) // will return '1976-06-16'\n```\n\n----------------------------------------\n\nTITLE: Converting Entity to JSON in Remult\nDESCRIPTION: Shows how to convert entities to JSON format, handling special types like Date and respecting field visibility settings.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = repo(Task).toJson(repo(Task).find())\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtering in Remult Repository Query\nDESCRIPTION: Demonstrates how to filter tasks based on completion status while maintaining sorting and limit configurations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/sorting-filtering.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonMount(() =>\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" },\n      where: { completed: true }\n    })\n    .then(setTasks)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Controller with TypeScript Interface Extension\nDESCRIPTION: This code defines the initial AuthController class and extends the RemultContext interface to add Express request type support for session management.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, remult } from 'remult'\nimport type express from 'express'\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type from 'cookie-session' // required to access the session member of the request object\n\ndeclare module 'remult' {\n  export interface RemultContext {\n    request?: express.Request\n  }\n}\n\nexport class AuthController {\n  //\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remult in Fastify Routes\nDESCRIPTION: Demonstrates how to register remultFastify and use the withRemult method in a Fastify server to access the remult object within a route handler.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\nimport { remultFastify } from 'remult/remult-fastify'\n\n(async () => {\n  const server = fastify()\n\n  await server.register(remultFastify({})) // [!code highlight]\n  server.get('/api/test', async (req, res) => {\n    return {\n      result: await api.withRemult(req, () => remult.repo(Task).count()), // [!code highlight]\n    }\n  })\n\n\n  server.listen({ port: 3000 })\n})()\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Database Connection in Remult API\nDESCRIPTION: Code snippet showing how to modify the server module to use Postgres instead of JSON files. It imports the Postgres data provider and configures the connection string in the API setup.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/database.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api.ts\n\n//...\n\nimport { createPostgresDataProvider } from \"remult/postgres\"\n\nexport const api = remultSolidStart({\n  //...\ndataProvider: createPostgresDataProvider({\n    connectionString: \"your connection string\"\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining RemultServer Interfaces for Server Implementation\nDESCRIPTION: Declares interfaces for Remult server core and full implementation, including methods for request handling, router registration, and async operations with Remult context. These interfaces define the core functionality of a Remult server.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RemultServer<RequestType>\n  extends RemultServerCore<RequestType> {\n  withRemult(req: RequestType, res: GenericResponse, next: VoidFunction): void\n  registerRouter(r: GenericRouter<RequestType>): void\n  handle(\n    req: RequestType,\n    gRes?: GenericResponse,\n  ): Promise<ServerHandleResponse | undefined>\n  withRemultAsync<T>(\n    request: RequestType | undefined,\n    what: () => Promise<T>,\n  ): Promise<T>\n}\n//[ ] ServerHandleResponse from TBD is not exported\nexport interface RemultServerCore<RequestType> {\n  getRemult(req?: RequestType): Promise<Remult>\n  openApiDoc(options: { title: string; version?: string }): any\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Paging in React Component with Remult\nDESCRIPTION: This code snippet demonstrates how to use Remult's find method with paging options in a React useEffect hook. It sets a limit of 2 items per page and requests the second page of results. The retrieved tasks are then set to the component's state using setTasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/2-querying-data/1-paging/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  taskRepo\n    .find({\n      limit: 2,\n      page: 2,\n    })\n    .then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Entity ID Configuration Examples in Remult\nDESCRIPTION: Examples showing different approaches to configure entity IDs in Remult: single column ID and multiple column composite ID. These examples demonstrate the syntax for the id option in the Entity decorator.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n/** An arrow function that identifies the `id` column to use for this entity\n   * @example\n   * //Single column id\n   * @Entity<Products>(\"products\", { id: 'productCode' })\n   * @example\n   * //Multiple columns id\n   * @Entity<OrderDetails>(\"orderDetails\", { id:['orderId:', 'productCode'] })\n   */\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity Class with Active Record Pattern (TypeScript)\nDESCRIPTION: Shows how to define a Person class using the @Entity decorator and extending IdEntity. This class represents a table in the database and includes an automatic UUID field for the id.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/active-record.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('people')\nexport class Person extends IdEntity {\n  @Fields.string()\n  name = ''\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Relation Configuration with field Option\nDESCRIPTION: Shows how to use the field option for custom relation configuration, including additional options like caption.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Relations.toOne<Order, Customer>(() => Customer, {\n  field: \"customerId\",\n  caption: \"The Customer\",\n})\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Saving Hook in Remult\nDESCRIPTION: An example showing how to implement a field-specific saving hook for a createdAt Date field. This allows for custom logic to be applied to individual fields before the entity-level saving hook runs.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/lifecycle-hooks.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.Date<Task>({\n  saving: (task, fieldRef, e) => {\n    if (e.isNew) task.createdAt = new Date()\n  },\n})\ncreatedAt = new Date()\n```\n\n----------------------------------------\n\nTITLE: Adding New Tasks in SolidJS with Remult\nDESCRIPTION: Implements the ability to add new tasks by creating state for the new task title and an addTask function that inserts the task into the database via the taskRepo.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/crud.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/Todo.tsx\n\nexport default function Todo() {\n  const [tasks, setTasks] = createStore<Task[]>([])\n  const [newTaskTitle, setNewTaskTitle] = createSignal(\"\")\n\n  async function addTask(e: Event) {\n    e.preventDefault()\n    try {\n      const newTask = await taskRepo.insert({ title: newTaskTitle() })\n      setTasks([...tasks, newTask])\n      setNewTaskTitle(\"\")\n    } catch (error) {\n      alert((error as { message: string }).message)\n    }\n  }\n  //...\n```\n\n----------------------------------------\n\nTITLE: Using ValueListFieldType in a Remult Entity\nDESCRIPTION: Defines a field in an entity that uses a ValueListFieldType class for complex enumeration values.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Field(() => Country)\ncountry: Country = Country.us;\n```\n\n----------------------------------------\n\nTITLE: Configuring Better-sqlite3 as Remult's Data Provider\nDESCRIPTION: Code snippet showing how to set up Better-sqlite3 as the database provider for a Remult application. It creates a connection to an SQLite database stored in a local file and configures it with Express.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/better-sqlite3.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult'\nimport Database from 'better-sqlite3'\nimport { BetterSqlite3DataProvider } from 'remult/remult-better-sqlite3'\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase(\n      new BetterSqlite3DataProvider(new Database('./mydb.sqlite')),\n    ),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Controlling Database Field Type in Remult\nDESCRIPTION: Specifies the exact database field type for a numeric field using the fieldTypeInDb option in valueConverter.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.number({\n  valueConverter: {\n    fieldTypeInDb: 'decimal(16,8)'\n  }\n})\nprice=0;\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult with MySQL using createKnexDataProvider\nDESCRIPTION: Sets up the Remult Express middleware with a MySQL connection using the createKnexDataProvider utility. This code configures database credentials and establishes the connection to a MySQL database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/mysql.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { createKnexDataProvider } from \"remult/remult-knex\"\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: createKnexDataProvider({\n      client: \"mysql2\", // Specify the MySQL client\n      connection: {\n        user: \"your_database_user\",\n        password: \"your_database_password\",\n        host: \"127.0.0.1\",\n        database: \"test\",\n      },\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Resolving Entity Filters in Remult\nDESCRIPTION: Resolves an entity filter which can be either an EntityFilter instance or a function returning an EntityFilter or Promise<EntityFilter>. This allows for dynamic filter creation and resolution.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nstatic resolve<entityType>(\n  filter:\n    | EntityFilter<entityType>\n    | (() => EntityFilter<entityType> | Promise<EntityFilter<entityType>>),\n): Promise<EntityFilter<entityType>>\n```\n\n----------------------------------------\n\nTITLE: Initializing Remult Server Middleware with Koa\nDESCRIPTION: Code for setting up Remult middleware in a Koa application. Uses createRemultServer and manually handles the API responses.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport * as koa from 'koa'\nimport * as bodyParser from 'koa-bodyparser'\nimport { createRemultServer } from 'remult/server'\n\nconst app = new koa()\n\napp.use(bodyParser())\n\nconst api = createRemultServer({})\n\napp.use(async (ctx, next) => {\n  const r = await api.handle(ctx.request)\n  if (r) {\n    ctx.response.body = r.data\n    ctx.response.status = r.statusCode\n  } else return await next()\n})\n\napp.listen(3000, () => {})\n```\n\n----------------------------------------\n\nTITLE: Registering Remult Middleware with Express\nDESCRIPTION: Updated Express server code that incorporates the Remult middleware to handle API requests.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/index.ts\n\nimport express from \"express\"\nimport { api } from \"./api\"\n\nconst app = express()\napp.use(api)\n\napp.listen(3002, () => console.log(\"Server started\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Comma-Separated String Array Field Type in Remult\nDESCRIPTION: This snippet demonstrates how to create a reusable custom field type for handling arrays stored as comma-separated strings. It encapsulates the conversion logic within a field type function that can be applied to multiple entity properties.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Field, FieldOptions, Remult } from 'remult'\n\nexport function CommaSeparatedStringArrayField<entityType = any>(\n  ...options: (\n    | FieldOptions<entityType, string[]>\n    | ((options: FieldOptions<entityType, string[]>, remult: Remult) => void)\n  )[]\n) {\n  return Fields.object(\n    {\n      valueConverter: {\n        toDb: (x) => (x ? x.join(',') : undefined),\n        fromDb: (x) => (x ? x.split(',') : undefined),\n      },\n    },\n    ...options,\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setAllCompleted Function in Svelte Component\nDESCRIPTION: This snippet shows the implementation of a setAllCompleted function in a Svelte component. It iterates through all tasks and updates their completion status.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/backend-methods.md#2025-04-16_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  // ...\n\tasync function setAllCompleted(completed: boolean) {\n\t\tfor (const task of await repo(Task).find()) {\n\t\t\tawait repo(Task).save({ ...task, completed });\n\t\t}\n\t}\n  // ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registering the TasksController in the Server API\nDESCRIPTION: Code to register the TasksController with the Remult Express server, making the backend methods available as API endpoints.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/backend-methods.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TasksController } from \"../shared/TasksController.js\"\n\nexport const api = remultExpress({\n  //...\n  controllers: [TasksController]\n})\n```\n\n----------------------------------------\n\nTITLE: Remult Express API Configuration\nDESCRIPTION: Configuration of RemultExpress with AuthController and user session handling.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const api = remultExpress({\n  controllers: [TaskController, AuthController]\n  getUser: (req) => req.session!['user'],\n})\n```\n\n----------------------------------------\n\nTITLE: Refactoring TodoComponent to Use Backend Method (TypeScript)\nDESCRIPTION: Updated implementation of the setAllCompleted method in the TodoComponent that calls the backend method instead of processing tasks on the client side. This improves performance by handling all updates in a single server request.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/backend-methods.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync setAllCompleted(completed: boolean) {\n  await TasksController.setAllCompleted(completed);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Backend Method in TasksController Class\nDESCRIPTION: Implementation of a server-side method using Remult's @BackendMethod decorator to handle setting all tasks' completion status directly on the server, improving performance by eliminating multiple API calls.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/backend-methods.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, remult } from \"remult\"\nimport { Task } from \"./Task.js\"\n\nexport class TasksController {\n  @BackendMethod({ allowed: true })\n  static async setAllCompleted(completed: boolean) {\n    const taskRepo = remult.repo(Task)\n\n    for (const task of await taskRepo.find()) {\n      await taskRepo.save({ ...task, completed })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Remult Controller Configuration\nDESCRIPTION: Configuration setup for registering the TasksController in remultExpress options, including entity and controller registration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/backendMethods.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const api = remultExpress({\n  entities: [Task],\n  controllers: [TasksController],\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Field Type in a Remult Entity\nDESCRIPTION: This snippet shows how to apply a custom field type (CommaSeparatedStringArrayField) to a property in an entity class. The highlighted line demonstrates the concise syntax for using the custom field type.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n@CommaSeparatedStringArrayField()\ntags: string[] = []\n```\n\n----------------------------------------\n\nTITLE: Creating Remult Middleware for Fastify\nDESCRIPTION: Code for creating a Remult middleware instance for Fastify. This exports an API object that can be registered with the Fastify application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/fastify.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/api.ts\n\nimport { remultFastify } from 'remult/remult-fastify'\n\nexport const api = remultFastify()\n```\n\n----------------------------------------\n\nTITLE: Checking Field Inclusion in API\nDESCRIPTION: Demonstrates how to use the includedInApi method to determine if a field should be included in the API based on user permissions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_fieldmetadata.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst employeeRepo = remult.repo(Employee);\n// Determine if the 'salary' field of an employee should be visible in the API for the current user\nif (employeeRepo.fields.salary.includedInApi({ id: 123, name: 'John Doe' })) {\n  // The salary field is included in the API\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic SQL Aggregation for Total Order Amount\nDESCRIPTION: Uses $subQuery to create a custom SQL aggregation that calculates the total order amount for each customer. Shows how to implement advanced calculations using SQL expressions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/6-sql-expression/3-sql-relations/content.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsqlRelations(Customer).orders.$subQuery({\n    select: ({ amount }) => sql`sum(${amount})`\n  })\n```\n\n----------------------------------------\n\nTITLE: toOne relation with defaultIncluded option in Remult\nDESCRIPTION: Example showing how to configure a toOne relation with defaultIncluded set to true, which automatically includes the related entity when querying.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_relations.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nFields.string()\ncustomerId?: string;\n\n@Relations.toOne(() => Customer, {\n  field: \"customerId\",\n  defaultIncluded: true\n})\ncustomer?: Customer;\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Zone for Remult Messages\nDESCRIPTION: Sets up Angular's change detection to handle Remult's real-time messages by wrapping the message handling in NgZone.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/live-queries.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, NgZone } from '@angular/core';\nimport { remult } from \"remult\"\n//...\nexport class AppComponent {\n  constructor(zone: NgZone) {\n    remult.apiClient.wrapMessageHandling = handler => zone.run(() => handler())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Fetched Tasks with Paging in Remult\nDESCRIPTION: This snippet demonstrates how to limit the number of tasks retrieved from the database to 20 items per page using the 'limit' option in the Repository.find() method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/sorting-filtering.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/App.tsx\n\nuseEffect(() => {\n  taskRepo\n    .find({\n      limit: 20\n    })\n    .then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Using Existing Knex Provider with Remult and Oracle\nDESCRIPTION: TypeScript code demonstrating how to use an existing Knex instance with Remult for Oracle database integration. It includes Knex setup, Express configuration, and Remult integration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/oracle.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { KnexDataProvider } from 'remult/remult-knex'\nimport { remultExpress } from 'remult/remult-express'\nimport knex from 'knex'\n\nconst knexDb = knex({\n  client: 'oracledb',\n  connection: {\n    user: 'your_database_user',\n    password: 'your_database_password',\n    connectString: 'SERVER',\n  },\n})\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new KnexDataProvider(knexDb), // Reuse your existing knex provider\n  }),\n)\n\napp.listen(3000, () => console.log('Server is running on port 3000'))\n```\n\n----------------------------------------\n\nTITLE: Accessing ValueListFieldType Properties in Remult\nDESCRIPTION: Shows how to access properties of a ValueListFieldType field in code, where only the id is stored in the database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ncall('+' + person.country.phonePrefix + person.phone)\n```\n\n----------------------------------------\n\nTITLE: Setting EntityOptions as an Arrow Function in TypeScript\nDESCRIPTION: This example demonstrates how to set EntityOptions using an arrow function that receives 'remult' as a parameter in the @Entity decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// as an arrow function that receives `remult` as a parameter\n@Entity(\"tasks\", (options,remult) => options.allowApiCrud = true)\n```\n\n----------------------------------------\n\nTITLE: Using Form Dialog for Input Collection\nDESCRIPTION: Example of using the useFormDialog hook to create an awaitable form dialog. This hook allows for collecting structured input from users with automatic form generation based on a fields configuration object.\nSOURCE: https://github.com/remult/remult/blob/main/examples/shadcn-react-table/README.md#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst form = useFormDialog()\n\nasync function login() {\n  await form({\n    fields: {\n      username: {},\n      password: { type: 'password' },\n    },\n    onOk: async ({ username, password }) => {\n      // perform login\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PostgreSQL Data Provider with Fallback\nDESCRIPTION: TypeScript code for configuring the Remult API server with a Postgres data provider that falls back to JSON files when the DATABASE_URL is not available.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/database.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// src/api.ts\n\n//...\n\nimport { createPostgresDataProvider } from \"remult/postgres\"\n\nconst DATABASE_URL = process.env[\"DATABASE_URL\"]\n\nconst api = remultNextApp({\n  //...\n dataProvider: DATABASE_URL\n   ? createPostgresDataProvider({ connectionString: DATABASE_URL })\n   : undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Not In Filter in Remult\nDESCRIPTION: Filters records where a field does not match any value in a provided array. Three equivalent syntaxes are shown using \"!=\", $ne, or $nin operators.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwhere:{status:{ \"!=\":[1,2,3] }}\n//or\nwhere:{status:{ $ne:[1,2,3] }}\n//or\nwhere:{status:{ $nin:[1,2,3] }}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Data Provider with Connection String in Remult\nDESCRIPTION: Setting up the dataProvider in a Remult Express application using createPostgresDataProvider with a connection string. This approach connects directly to PostgreSQL using the provided connection details.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/postgresql.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { createPostgresDataProvider } from \"remult/postgres\"\n\nconst app = express()\n\nconst connectionString = \"postgres://user:password@host:5432/database\"\n\napp.use(\n  remultExpress({\n    dataProvider: createPostgresDataProvider({\n      connectionString, // default: process.env[\"DATABASE_URL\"]\n      // configuration: {} // optional: a `pg.PoolConfig` object or \"heroku\"\n    })\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using an Existing Knex Instance with Remult\nDESCRIPTION: Demonstrates how to use an existing Knex database instance with Remult. This approach is useful when you already have Knex configured in your application and want to reuse the same connection.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/mysql.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { KnexDataProvider } from 'remult/remult-knex'\nimport { remultExpress } from 'remult/remult-express'\nimport knex from 'knex'\n\nconst knexDb = knex({\n  client: 'mysql2',\n  connection: {\n    user: 'your_database_user',\n    password: 'your_database_password',\n    host: '127.0.0.1',\n    database: 'test',\n  },\n})\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new KnexDataProvider(knexDb), // Use the existing knex instance\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Express with Cookie-Session Middleware\nDESCRIPTION: This code sets up the cookie-session middleware in an Express application to manage user sessions with a configurable secret key.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport session from \"cookie-session\"\n\nconst app = express()\napp.use(\n  session({\n    secret: process.env[\"SESSION_SECRET\"] || \"my secret\"\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Field Options Interface in Remult\nDESCRIPTION: Interface defining configuration options for entity fields in Remult. Includes settings for validation, API access, UI display, and data constraints that can be passed to Field decorators.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FieldOptions<entityType = unknown, valueType = unknown> {\n  /** A human readable name for the field. Can be used to achieve a consistent caption for a field throughout the app\n   * @example\n   * <input placeholder={taskRepo.metadata.fields.title.caption}/>\n   */\n  caption?: string\n  /** If it can store null in the database */\n  allowNull?: boolean\n  /** If a value is required */\n  required?: boolean\n  /**\n   * Specifies whether this field should be included in the API. This can be configured\n   * based on access control levels.\n   * @example\n   * // Do not include in the API\n   * @Fields.string({ includeInApi: false })\n   * password = '';\n   * // Include in the API for 'admin' only\n   * @Fields.number({ includeInApi: 'admin' })\n   * salary = 0;\n   * @see [allowed](https://remult.dev/docs/allowed.html)\n   * @see [Access Control](https://remult.dev/docs/access-control)\n   * @type {AllowedForInstance<entityType>}\n   */\n  includeInApi?: AllowedForInstance<entityType>\n  /**\n   * Determines whether this field can be updated via the API. This setting can also\n   * be controlled based on user roles or other access control checks.\n   *\n   * _It happens after entity level authorization AND if it's allowed._\n   * @example\n   * // Prevent API from updating this field\n   * @Fields.string({ allowApiUpdate: false })\n   * createdBy = remult.user?.id;\n   * @see [allowed](https://remult.dev/docs/allowed.html)\n   * @see [Access Control](https://remult.dev/docs/access-control)\n   * @type {AllowedForInstance<entityType>}\n   */\n  allowApiUpdate?: AllowedForInstance<entityType>\n  /** An arrow function that'll be used to perform validations on it\n   * @example\n   * @Fields.string({\n   *   validate: Validators.required\n   * })\n   * * @example\n   * @Fields.string<Task>({\n   *    validate: task=>task.title.length>3 ||  \"Too Short\"\n   * })\n   * @example\n   * @Fields.string<Task>({\n   *    validate: task=>{\n   *      if (task.title.length<3)\n   *          throw \"Too Short\";\n   *   }\n   * })\n   * @example\n   * @Fields.string({\n   *    validate: (_, fieldValidationEvent)=>{\n   *      if (fieldValidationEvent.value.length < 3)\n   *          fieldValidationEvent.error = \"Too Short\";\n   *   }\n   * })\n   */\n  validate?:\n    | FieldValidator<entityType, valueType>\n    | FieldValidator<entityType, valueType>[]\n  /** Will be fired before this field is saved to the server/database */\n  saving?: (\n    entity: entityType,\n    fieldRef: FieldRef<entityType, valueType>,\n    e: LifecycleEvent<entityType>,\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Set All Completed/Uncompleted Buttons in React Component\nDESCRIPTION: JSX implementation for buttons that trigger the setAllCompleted function with true/false values for the completed parameter.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/backend-methods.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n  <button onClick={() => setAllCompleted(true)}>Set All Completed</button>\n  <button onClick={() => setAllCompleted(false)}>Set All Uncompleted</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using field caption in Remult relations\nDESCRIPTION: Example showing how to use the caption property from a relation field in a UI component, allowing for consistent field labeling throughout an application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_relations.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<input placeholder={taskRepo.metadata.fields.title.caption}/>\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request with Invalid Data to Test Server-Side Validation\nDESCRIPTION: A curl command example to test server-side validation by sending a POST request with an empty title to the tasks API endpoint. This demonstrates how validation errors are returned as HTTP errors.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i http://localhost:3002/api/tasks -d \"{\\\"title\\\": \\\"\\\"}\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up User Roles in Authentication Controller\nDESCRIPTION: Configuration of the AuthController to assign the 'admin' role to specific users during authentication. The code defines a list of valid users and assigns the 'admin' role to Jane when she signs in.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/AuthController.ts\n\nconst validUsers = [{ name: \"Jane\", admin: true }, { name: \"Steve\" }];\n\nexport class AuthController {\n  @BackendMethod({ allowed: true })\n  static async signIn(name: string) {\n    const user = validUsers.find((user) => user.name === name);\n    if (user) {\n      remult.user = {\n        id: user.name,\n        name: user.name,\n        roles: user.admin ? [\"admin\"] : [],\n      };\n      remult.context.request!.session![\"user\"] = remult.user;\n      return remult.user;\n    } else {\n      throw Error(\"Invalid user, try 'Steve' or 'Jane'\");\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection\nDESCRIPTION: Database configuration that supports both production PostgreSQL and local development environments through environment variables.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst DATABASE_URL = process.env[\"DATABASE_URL\"];\n\nexport const api = remultExpress({\n dataProvider: DATABASE_URL\n   ? createPostgresDataProvider({ connectionString: DATABASE_URL })\n   : undefined,\n   //...\n })\n```\n\n----------------------------------------\n\nTITLE: Updating Task Deletion Logic for Live Queries\nDESCRIPTION: Modifies the deleteTask method to remove manual state updates since the live query subscription will handle state changes automatically.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/live-queries.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync deleteTask(task: Task) {\n   await this.taskRepo.delete(task);\n   // this.tasks = this.tasks.filter(t => t !== task); <-- this line is no longer needed\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remult with Svelte 5 Reactive Syntax\nDESCRIPTION: Example Svelte component that demonstrates how to use Remult entities with Svelte 5's reactive state ($state) and derived values ($derived).\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  // Prepare a new task\n  let editingTask = $state(repo(Task).create())\n\n  // Check if the form has empty fields\n  let formHasEmpty = $derived(!editingTask || editingTask.title.length === 0)\n\n  // Clone the task to edit\n  const editTask = async (task: Task) => {\n    editingTask = repo(Task).getEntityRef(task).clone()\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Checking if a Lazy-Loaded Field is Null in TypeScript\nDESCRIPTION: This snippet demonstrates how to check if a lazy-loaded field has a value using the valueIsNull method of its FieldRef in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/lazy-loading-of-related-entities.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait task.$.category!.valueIsNull()\n```\n\n----------------------------------------\n\nTITLE: Task Renaming and Saving Implementation in SolidJS\nDESCRIPTION: Adds functionality to edit task titles and save changes to the backend. Includes a setTitle function that updates the local state and a saveTask function that persists changes to the database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/crud.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/Todo.tsx\n\n<For each={tasks}>\n  {(task, i) => {\n    async function setCompleted(completed: boolean) {\n      const updatedTask = await taskRepo.update(task, { completed })\n      setTasks(i(), updatedTask)\n    }\n    async function saveTask() {\n      try {\n        await taskRepo.save(task)\n      } catch (error) {\n        alert((error as { message: string }).message)\n      }\n    }\n\n    return (\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          oninput={(e) => setCompleted(e.target.checked)}\n        />\n        <input\n          value={task.title}\n          onInput={(e) => setTasks(i(), \"title\", e.target.value)}\n        />\n        <button onClick={saveTask}>Save</button>\n      </div>\n    )\n  }}\n</For>\n```\n\n----------------------------------------\n\nTITLE: toOne relation with custom field in Remult\nDESCRIPTION: Example of defining a toOne relation with a custom field name to represent the relationship in the database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_relations.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nFields.string()\ncustomerId?: string;\n\n@Relations.toOne(() => Customer, \"customerId\")\ncustomer?: Customer;\n```\n\n----------------------------------------\n\nTITLE: Entity Base Class Methods\nDESCRIPTION: Core methods of the EntityBase class including constructor, assignment, deletion state management and persistence operations. The class serves as a base for entity objects with basic CRUD functionality.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entitybase.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EntityBase {\n  constructor();\n  $: any;\n  _: any;\n  assign(values: any): void;\n  delete(): void;\n  isNew: boolean;\n  save(): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking API Update Permission\nDESCRIPTION: Illustrates how to use the apiUpdateAllowed method to check if the current user has permission to update a specific entity instance.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_fieldmetadata.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Check if the current user is allowed to update a specific task\nif (repo(Task).metadata.apiUpdateAllowed(task)){\n  // Allow user to edit the entity\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Generator Script\nDESCRIPTION: Code for a script that automatically generates migration files based on changes to entity definitions, using the shared configuration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateMigrations } from 'remult/migrations'\nimport { dataProvider, entities } from '../config'\n\ngenerateMigrations({\n  dataProvider, // The data provider for your database\n  entities, // Entity classes to include in the migration\n  endConnection: true, // Close the database connection after generating migrations (useful for standalone scripts)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing NextAuth Configuration\nDESCRIPTION: Sets up NextAuth.js with a credentials provider and a simple user validation system, including session callback to include user information for Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/auth.ts\n\nimport NextAuth, { getServerSession } from 'next-auth/next'\nimport Credentials from 'next-auth/providers/credentials'\nimport { UserInfo } from 'remult'\n\nconst validUsers: UserInfo[] = [\n  { id: '1', name: 'Jane' },\n  { id: '2', name: 'Steve' },\n]\nfunction findUser(name?: string | null) {\n  return validUsers.find((user) => user.name === name)\n}\n\nexport const auth = NextAuth({\n  providers: [\n    Credentials({\n      credentials: {\n        name: {\n          placeholder: 'Try Steve or Jane',\n        },\n      },\n      authorize: (credentials) => findUser(credentials?.name) || null,\n    }),\n  ],\n  callbacks: {\n    session: ({ session }) => ({\n      ...session,\n      user: findUser(session.user?.name),\n    }),\n  },\n})\n\nexport async function getUserOnServer() {\n  const session = await getServerSession()\n  return findUser(session?.user?.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Remult Server Middleware with Sveltekit\nDESCRIPTION: Code for setting up Remult API routes in a Sveltekit application. Creates an API handler that exports HTTP method handlers.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// src/routes/api/[...remult]/+server.ts\n\nimport { remultSveltekit } from 'remult/remult-sveltekit'\n\nexport const _api = remultSveltekit({}) // [!code highlight]\n\nexport const { GET, POST, PUT, DELETE } = _api\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions AND Filter in Remult\nDESCRIPTION: Combines multiple conditions with an implicit AND relationship. When multiple conditions are specified at the same level, all conditions must be satisfied for a record to match.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: {\n  status:1,\n  archive:false\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination Example in TypeScript\nDESCRIPTION: Demonstrates pagination functionality using limit and page parameters in repository find method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_remult.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Products).find({\n  limit: 10,\n  page: 2\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring backendPrefilter for Entity Queries in TypeScript\nDESCRIPTION: This example shows how to use backendPrefilter to apply a filter for all queries from this entity, both from the API and within the backend. In this case, it filters out archived items.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbackendPrefilter: { archive:false }\n```\n\n----------------------------------------\n\nTITLE: Using Custom Filter with Repository\nDESCRIPTION: Shows how to use the custom filter in a repository query to find orders.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Order).find({\n  where: Order.activeOrders({ year: 2024, customerCity: 'New York' }),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Filter for High-Value Orders in TypeScript\nDESCRIPTION: This snippet shows the creation of another custom filter for high-value orders. It demonstrates how multiple custom filters can be defined for different filtering criteria.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Order {\n  //...\n  static highValueOrders = Filter.createCustom<Order>(() => {\n    return {\n      totalValue: { $gt: 1000 },\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RestDataProviderHttpProvider Interface for HTTP Operations\nDESCRIPTION: Interface that defines the required HTTP methods for a REST data provider, including post, delete, put, and get operations.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RestDataProviderHttpProvider {\n  post(url: string, data: any): Promise<any>\n  delete(url: string): Promise<void>\n  put(url: string, data: any): Promise<any>\n  get(url: string): Promise<any>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SQL Expression Entity with Fields in Remult\nDESCRIPTION: Example showing how to create an entity using a SQL expression that unions data from two tables. The Person entity has string fields for id and name, demonstrating the sqlExpression option usage.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n   *   sqlExpression:`select id,name from employees\n   *                  union all select id,name from contractors`,\n   * })\n   * export class Person {\n   *   @Fields.string()\n   *   id=''\n   *   @Fields.string()\n   *   name=''\n   * }\n   */\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Functionality in AuthController\nDESCRIPTION: This code adds user authentication logic to the AuthController with a static list of valid users and a sign-in method that validates usernames and stores user information in the session.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst validUsers = [{ name: 'Jane' }, { name: 'Alex' }]\n\nexport class AuthController {\n  @BackendMethod({ allowed: true })\n  static async signIn(name: string) {\n    const user = validUsers.find((user) => user.name === name)\n    if (user) {\n      remult.user = {\n        id: user.name,\n        name: user.name,\n      }\n      remult.context.request!.session!['user'] = remult.user\n      return remult.user\n    } else {\n      throw Error(\"Invalid user, try 'Alex' or 'Jane'\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Access in RemultServerOptions\nDESCRIPTION: Demonstrates how to set up admin access in RemultServerOptions. It can be set to true for default admin UI or use a function for fine-grained control based on user permissions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_remultserveroptions.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nadmin: true\n```\n\nLANGUAGE: typescript\nCODE:\n```\nadmin: () => remult.isAllowed('admin')\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Field with Display Value\nDESCRIPTION: Example of implementing a date field with custom display formatting using the reusable display function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/1-field-meta-data/content.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { displayDate } from './utils/displayValueHelpers'\n\n@Fields.createdAt({\n  caption: 'Task Creation Date',\n  displayValue: displayDate,\n})\ncreatedAt?: Date\n```\n\n----------------------------------------\n\nTITLE: Updating Home Component to Display Todo List\nDESCRIPTION: Modifies the main index.tsx file to include the Todo component, displaying the list of tasks on the home page of the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/entities.md#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport Todo from '../components/Todo.jsx'\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>Todos</h1>\n      <Todo />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Observable LiveQuery in Angular Template\nDESCRIPTION: Modified Angular template that uses the async pipe to unwrap the tasks$ observable. This approach automatically handles subscription and unsubscription when the component is destroyed.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/appendix-observable-live-query.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/app/todo/todo.component.html -->\n\n<div *ngFor=\"let task of tasks$ | async\">\n  <input\n    type=\"checkbox\"\n    [(ngModel)]=\"task.completed\"\n    (change)=\"saveTask(task)\"\n  />\n  <input [(ngModel)]=\"task.title\" />\n  <button (click)=\"saveTask(task)\">Save</button>\n  <button\n    *ngIf=\"taskRepo.metadata.apiDeleteAllowed(task)\"\n    (click)=\"deleteTask(task)\"\n  >\n    Delete\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Native PostgreSQL Query\nDESCRIPTION: Example of executing native PostgreSQL queries through Remult\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/running-sql-on-the-server.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = await dbNamesOf(Task)\nconst sql = PostgresDataProvider.getDb()\nconst r = await sql.query(`select count(*) as c from ${tasks}`)\nconsole.log(r.rows[0].c)\n```\n\n----------------------------------------\n\nTITLE: Using Axios as HTTP Client in Remult\nDESCRIPTION: This snippet shows how to use Axios instead of the default Fetch API for HTTP requests in Remult. It sets the apiClient.httpClient property of the remult object.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios'\nimport { remult } from 'remult'\n\nremult.apiClient.httpClient = axios\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-based UI in Vue Component\nDESCRIPTION: Vue template that conditionally renders UI elements based on user permissions. The code uses the Remult entity metadata to check if operations are allowed for the current user, hiding the Add form and Delete buttons for non-admin users.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n// src/App.vue\n\n<template>\n  <div>\n    <h1>todos</h1>\n    <main>\n      <form\n        v-if=\"taskRepo.metadata.apiInsertAllowed()\"\n        @submit.prevent=\"addTask()\"\n      >\n        <input v-model=\"newTaskTitle\" placeholder=\"What needs to be done?\" />\n        <button>Add</button>\n      </form>\n      <div v-for=\"task in tasks\">\n        <input\n          type=\"checkbox\"\n          v-model=\"task.completed\"\n          @change=\"saveTask(task)\"\n        />\n        <input v-model=\"task.title\" />\n        <button @click=\"saveTask(task)\">Save</button>\n        <button\n          v-if=\"taskRepo.metadata.apiDeleteAllowed(task)\"\n          @click=\"deleteTask(task)\"\n        >\n          Delete\n        </button>\n      </div>\n      <div>\n        <button @click=\"setAllCompleted(true)\">Set All as Completed</button>\n        <button @click=\"setAllCompleted(false)\">Set All as Uncompleted</button>\n      </div>\n    </main>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Repository in Remult (TypeScript)\nDESCRIPTION: This code snippet shows how to implement a custom repository in Remult. It defines a TasksRepository class that extends the Repository interface and implements custom methods for task management.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/8-Database/meta.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass TasksRepository implements Repository<Task> {\n  constructor(private remult: Remult) {}\n  metadata = taskInfo\n  insert(entity: Partial<Task>): Promise<Task> {\n    return this.remult.repo(Task).insert(entity)\n  }\n  update(id: any, entity: Partial<Task>): Promise<Task> {\n    return this.remult.repo(Task).update(id, entity)\n  }\n  delete(id: any): Promise<void> {\n    return this.remult.repo(Task).delete(id)\n  }\n  find(options?: FindOptions<Task>): Promise<Task[]> {\n    return this.remult.repo(Task).find(options)\n  }\n  findFirst(options?: FindOptions<Task>): Promise<Task | undefined> {\n    return this.remult.repo(Task).findFirst(options)\n  }\n  count(options?: FindOptions<Task>): Promise<number> {\n    return this.remult.repo(Task).count(options)\n  }\n  // Custom method\n  async setAll(completed: boolean) {\n    await this.remult.repo(Task).query().update({ completed })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Key in TypeScript\nDESCRIPTION: Demonstrates how to access the key property of a field's metadata using the repo function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_fieldmetadata.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(repo(Task).metadata.fields.title.key);\n// result: title\n```\n\n----------------------------------------\n\nTITLE: Loading Server-Only Implementation in Server Initialization\nDESCRIPTION: Code to load the server-only implementation file during server initialization, ensuring the abstracted method is properly implemented before use.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-server-only-packages.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport '../app.module';\nimport './log-writer'; //load the log-writer.ts file\n\nimport { Pool } from 'pg';\nimport { config } from 'dotenv';\nimport { PostgresDataProvider, PostgresSchemaBuilder } from '@remult/server-postgres';\nimport * as passwordHash from 'password-hash';\n```\n\n----------------------------------------\n\nTITLE: Registering Remult Middleware with Fastify Server\nDESCRIPTION: Code for setting up a Fastify server and registering the Remult middleware. This creates the HTTP server and configures it to listen on port 3002.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/fastify.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/index.ts\n\nimport fastify from \"fastify\"\nimport { api } from \"./api.js\"\n\nconst app = Fastify();\n\napp.register(api);\n\napp.listen({ port: 3002 }, () => console.log(\"Server started\"))\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Creation Date with Remult in TypeScript\nDESCRIPTION: This code snippet shows how to sort tasks by their creation date in ascending order. It uses the 'orderBy' property in the options object of Remult's find method to specify the sorting field and direction.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/sorting-filtering.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonMounted(() =>\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" }\n    })\n    .then(items => (tasks.value = items))\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Remult Repository Queries\nDESCRIPTION: This code demonstrates how to limit the number of tasks fetched from the database to 20 entries using Remult's repository find method with limit option. This pagination strategy helps optimize the application when dealing with large datasets.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/sorting-filtering.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/components/todo.tsx\n\n//...\n\nexport default function Todo() {\n  //...\n\n  useEffect(() => {\n    taskRepo\n      .find({\n        limit: 20\n      })\n      .then(setTasks)\n  }, [])\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button to Task Items in Angular Template\nDESCRIPTION: This HTML snippet adds a Delete button next to each task's Save button. When clicked, it calls the deleteTask method with the current task as a parameter to remove it from both the database and the local tasks array.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/crud.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/app/todo/todo.component.html -->\n\n<div *ngFor=\"let task of tasks\">\n  <input\n    type=\"checkbox\"\n    [(ngModel)]=\"task.completed\"\n    (change)=\"saveTask(task)\"\n  />\n  <input [(ngModel)]=\"task.title\" />\n  <button (click)=\"saveTask(task)\">Save</button>\n  <button (click)=\"deleteTask(task)\">Delete</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Role-based UI Visibility for Task Deletion\nDESCRIPTION: Implements conditional rendering for the delete button based on whether the current user has permission to delete tasks, creating a consistent user experience with backend permissions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/todo.tsx\n\nreturn (\n  <div key={task.id}>\n    <input\n      type=\"checkbox\"\n      checked={task.completed}\n      onChange={e => setCompleted(e.target.checked)}\n    />\n    <input value={task.title} onChange={e => setTitle(e.target.value)} />\n    <button onClick={saveTask}>Save</button>\n    {taskRepo.metadata.apiDeleteAllowed(task) && (\n      <button onClick={deleteTask}>Delete</button>\n    )}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Task Insertion with Remult Live Query\nDESCRIPTION: This code modifies the addTask function to remove manual state updates, relying on the live query subscription to handle state changes automatically after inserting a new task.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/live-queries.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst addTask = async (e: FormEvent) => {\n  e.preventDefault()\n  try {\n    // const newTask = await taskRepo.insert({ title: newTaskTitle }) <- Delete this line\n    await taskRepo.insert({ title: newTaskTitle }) // <- replace with this line\n    // setTasks([...tasks, newTask])   <-- this line is no longer needed\n    setNewTaskTitle(\"\")\n  } catch (error: unknown) {\n    alert((error as { message: string }).message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Component Template\nDESCRIPTION: HTML template for the authentication component with sign-in form and user status display\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/auth.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ng-container *ngIf=\"!remult.authenticated()\">\n  <h1>todos</h1>\n  <main>\n    <form (submit)=\"signIn()\">\n      <input\n        [(ngModel)]=\"signInUsername\"\n        placeholder=\"Username, try Steve or Jane\"\n        name=\"username\"\n      />\n      <button>Sign in</button>\n    </form>\n  </main>\n</ng-container>\n<ng-container *ngIf=\"remult.authenticated()\">\n  <header>\n    Hello {{ remult.user?.name }}\n    <button (click)=\"signOut()\">Sign Out</button>\n  </header>\n  <app-todo></app-todo>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Server with Remult Middleware\nDESCRIPTION: Sets up the main Hono server application, registers the Remult API middleware, and starts the server on port 3002.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hono.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/index.ts\n\nimport { Hono } from 'hono'\nimport { serve } from '@hono/node-server'\nimport { api } from './api.js'\n\nconst app = new Hono()\n\napp.route('', api)\n\nserve(app,{ port:3002 })\n```\n\n----------------------------------------\n\nTITLE: Registering TasksController in Remult SvelteKit Configuration\nDESCRIPTION: This snippet shows how to register the TasksController in the Remult SvelteKit configuration, adding it to the controllers array.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/backend-methods.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultSveltekit } from 'remult/remult-sveltekit'\nimport { Task } from '../shared/Task'\nimport { TasksController } from '../shared/TasksController' // [!code ++]\n\nexport const api = remultSveltekit({\n  admin: true,\n  entities: [Task], // [!code ++]\n  controllers: [TasksController], // [!code ++]\n})\n```\n\n----------------------------------------\n\nTITLE: Counting Items with Filters in Remult\nDESCRIPTION: Demonstrates how to count items in a repository that match specific criteria using the count method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait taskRepo.count({ completed:false })\n```\n\n----------------------------------------\n\nTITLE: Integrating Existing Knex Instance with Remult for Microsoft SQL Server\nDESCRIPTION: Demonstrates how to use an existing Knex instance with Remult for Microsoft SQL Server connection. This approach allows for more flexibility in database configuration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/mssql.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { KnexDataProvider } from 'remult/remult-knex'\nimport { remultExpress } from 'remult/remult-express'\nimport knex from 'knex'\n\nconst knexDb = knex({\n  client: 'mssql', // Specify MSSQL as the client\n  connection: {\n    // Add your MSSQL connection details here\n    server: '127.0.0.1',\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'test',\n  },\n})\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new KnexDataProvider(knexDb), // Use your existing knex instance\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres Node Package for Remult\nDESCRIPTION: Command to install the 'pg' package required for Postgres connectivity in a Remult application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/database.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i pg\n```\n\n----------------------------------------\n\nTITLE: Specifying a Single Field for toMany Relation in TypeScript\nDESCRIPTION: Example showing how to specify a single field for a toMany relation using the field option in Remult. This establishes a relation between a Customer entity and Order entities through the customer field.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Relations.toMany<Customer, Order>(() => Order, {\n  field: \"customer\",\n})\n```\n\n----------------------------------------\n\nTITLE: Defining QueryOptions Interface for Entity Queries\nDESCRIPTION: Interface for configuring entity query operations. It extends FindOptionsBase to provide additional options for pagination and progress tracking during query execution.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QueryOptions<entityType> extends FindOptionsBase<entityType> {\n  /** The number of items to return in each step */\n  pageSize?: number\n  /** A callback method to indicate the progress of the iteration */\n  progress?: {\n    progress: (progress: number) => void\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Data Provider for Remult\nDESCRIPTION: This snippet demonstrates how to install and configure the DuckDB data provider for Remult. It sets up an in-memory DuckDB instance.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nnpm i duckdb\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult' // [!code highlight]\nimport { Database } from 'duckdb' // [!code highlight]\nimport { DuckDBDataProvider } from 'remult/remult-duckdb' // [!code highlight]\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase( // [!code highlight]\n      new DuckDBDataProvider(new Database(':memory:')), // [!code highlight]\n    ), // [!code highlight]\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Simplifying State Management in Remult with liveQuery\nDESCRIPTION: This snippet demonstrates how to simplify state management by removing manual state updates in the addTask, setCompleted, and deleteTask functions. With liveQuery handling automatic updates, these manual state updates are no longer necessary.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/5-live-query/2-realtime-updates/content.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nasync function addTask(e: FormEvent) {\n  e.preventDefault()\n  try {\n    const newTask = await taskRepo.insert({\n      title: newTaskTitle,\n    })\n    // setTasks([...tasks, newTask]);  <-- this line is no longer needed\n    setNewTaskTitle('')\n  } catch (error: any) {\n    alert((error as { message: string }).message)\n  }\n}\n\nasync function setCompleted(task: Task, completed: boolean) {\n  const updatedTask = await taskRepo.update(task, { completed })\n  // setTasks(tasks.map((t) => t.id === updatedTask.id ? updatedTask : t));  <-- these lines are no longer needed\n}\n\nasync function deleteTask(task: Task) {\n  try {\n    await taskRepo.delete(task)\n    // setTasks(tasks.filter((t) => t.id !== task.id));  <-- these lines are no longer needed\n  } catch (error: any) {\n    alert((error as { message: string }).message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Remult Express Middleware\nDESCRIPTION: Code for initializing Remult as an Express middleware, which will handle API requests in the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/api.ts\n\nimport { remultExpress } from 'remult/remult-express'\n\nexport const api = remultExpress()\n```\n\n----------------------------------------\n\nTITLE: Implementing String Field Validation with Custom Message\nDESCRIPTION: Shows how to create a string field validator that returns a custom error message when validation fails. This example demonstrates the improved validation system that allows returning either a boolean or error message string.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n  validate:(task)=> task.title.length > 5 || \"too short\"\n})\n```\n\n----------------------------------------\n\nTITLE: Testing API Authentication with cURL\nDESCRIPTION: Using cURL to check the HTTP error returned when unauthenticated requests are made to protected API endpoints.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i http://localhost:3000/api/tasks\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filters without Arguments in Remult\nDESCRIPTION: Creates a custom filter that is evaluated on the backend for security and efficiency. This overload is for custom filters that don't require arguments.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nstatic createCustom<entityType>(\n  translator: (\n    unused: never,\n    r: Remult,\n  ) => EntityFilter<entityType> | Promise<EntityFilter<entityType>>,\n  key?: string,\n): (() => EntityFilter<entityType>) & customFilterInfo<entityType>\n```\n\n----------------------------------------\n\nTITLE: Reusing Access Control in Angular Templates\nDESCRIPTION: Example of using Remult's access control definitions in Angular templates to conditionally display UI elements based on user permissions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n  <td>{{user.name}}</td>\n  <!-- Only show the admin field if the user is allowed to see it -->\n  <td *ngIf=\"userRepo.fields.admin.includeInApi(user)\">{{user.admin}}</td>\n  <!-- Only show the delete button if the user is allowed to delete the admin-->\n  <td *ngIf=\"userRepo.metadata.apiDeleteAllowed(user)\">\n    <button (click)=\"deleteUser(user)\">Delete</button>\n  </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to a Customer\nDESCRIPTION: Shows how to create tags and associate them with a customer using the intermediate table relationship.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst tags = await repo(Tag).insert([\n  { name: 'vip' },\n  { name: 'hot-lead' },\n  { name: 'influencer' },\n  { name: 'manager' },\n])\n\nconst customerRepo = repo(Customer)\nconst customer = await customerRepo.findFirst({ name: 'Abshire Inc' })\nawait customerRepo\n  .relations(customer)\n  .tags.insert([{ tag: tags[0] }, { tag: tags[2] }])\n```\n\n----------------------------------------\n\nTITLE: Using Caption Field in TypeScript UI Component\nDESCRIPTION: Demonstrates how to use the caption property from a task repository's metadata fields within an input placeholder. This shows the practical application of the caption option in a UI context.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_relationoptions.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<input placeholder={taskRepo.metadata.fields.title.caption}/>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Delete Buttons Based on User Permissions\nDESCRIPTION: Showing or hiding delete buttons in the task list based on whether the current user has permission to delete tasks, using the taskRepo.metadata.apiDeleteAllowed method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nreturn (\n  <div>\n    <input\n      type=\"checkbox\"\n      checked={task.completed}\n      oninput={(e) => setCompleted(e.target.checked)}\n    />\n    <input\n      value={task.title}\n      onInput={(e) => setTasks(i(), \"title\", e.target.value)}\n    />\n    <button onClick={saveTask}>Save</button>\n    <Show when={taskRepo.metadata.apiDeleteAllowed()}>\n      <button onClick={deleteTask}>Delete</button>\n    </Show>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Turso as a Data Provider in Remult\nDESCRIPTION: Code snippet showing how to configure Remult to use Turso as the database provider. This setup uses environment variables for the database URL and authentication token to ensure secure connections.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/turso.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult'\nimport { createClient } from '@libsql/client'\nimport { TursoDataProvider } from 'remult/remult-turso'\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase(\n      new TursoDataProvider(\n        createClient({\n          url: process.env.TURSO_DATABASE_URL,\n          authToken: process.env.TURSO_AUTH_TOKEN,\n        }),\n      ),\n    ),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Angular 17 Configuration for External Dependencies\nDESCRIPTION: Configuration in angular.json to specify external dependencies that shouldn't be included in the frontend bundle for Angular 17 projects.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-server-only-packages.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// angular.json\n\n{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"projects\": {\n    \"remult-angular-todo\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:application\",\n          \"options\": {\n            \"outputPath\": \"dist/remult-angular-todo\",\n            \"index\": \"src/index.html\",\n            \"browser\": \"src/main.ts\",\n            \"externalDependencies\": [\n              \"fs\"\n            ],\n            \"polyfills\": [\n              \"zone.js\"\n            ],\n            //...\n```\n\n----------------------------------------\n\nTITLE: Upserting Multiple Entities in Remult\nDESCRIPTION: Demonstrates how to upsert multiple entities in a single operation by providing an array of options.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Upserting multiple entities: ensures both 'task a' and 'task b' exist, updating their `completed` status if found.\ntaskRepo.upsert([\n  { where: { title: 'task a' }, set: { completed: true } },\n  { where: { title: 'task b' }, set: { completed: true } }\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Task Update UI Elements in Angular Template\nDESCRIPTION: This HTML snippet modifies the task list to include editable input fields for the task title and a save button. The checkbox for completion status saves automatically on change, while the title requires clicking the Save button.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/crud.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/app/todo/todo.component.html -->\n\n<div *ngFor=\"let task of tasks\">\n  <input\n    type=\"checkbox\"\n    [(ngModel)]=\"task.completed\"\n    (change)=\"saveTask(task)\"\n  />\n  <input [(ngModel)]=\"task.title\" />\n  <button (click)=\"saveTask(task)\">Save</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Combined Query Parameters Example\nDESCRIPTION: Complex URL example showing combined usage of filtering, sorting, and pagination parameters\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/rest-api.md#2025-04-16_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nhttps://mySite.com/api/products?price.gte=5&price.lte=10&_sort=price&_order=desc&_limit=5&_page=3\n```\n\n----------------------------------------\n\nTITLE: Conditional Access with Arrow Function using includeInApi in Remult (TypeScript)\nDESCRIPTION: This example demonstrates how to use an arrow function with includeInApi for dynamic control over field visibility based on user role and ownership in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/1-field-level-control/content.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string<Task>({\n  includeInApi: task => remult.isAllowed(\"admin\") || task.ownerId === remult.user?.id,\n})\nprivateNotes = \"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing LiveQueryChangeInfo Interface in TypeScript\nDESCRIPTION: Defines the LiveQueryChangeInfo interface that handles live query update information, including methods to apply changes to existing data arrays. This is particularly useful in React applications for maintaining state based on real-time updates.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LiveQueryChangeInfo<entityType> {\n  /**\n   * The updated array of result items.\n   *\n   * @type {entityType[]}\n   */\n  items: entityType[]\n  /**\n   * The changes received in the specific message. The change types can be \"all\" (replace all), \"add\", \"replace\", or \"remove\".\n   *\n   * @type {LiveQueryChange[]}\n   */\n  changes: LiveQueryChange[]\n  /**\n   * Applies the changes received in the message to an existing array. This method is particularly useful with React\n   * to update the component's state based on the live query changes.\n   *\n   * @param {entityType[] | undefined} prevState The previous state of the array of result items.\n   * @returns {entityType[]} The updated array of result items after applying the changes.\n   *\n   * @example\n   * // Using applyChanges in a React component with useEffect hook\n   * useEffect(() => {\n   *   return taskRepo\n   *     .liveQuery({\n   *       limit: 20,\n   *       orderBy: { createdAt: 'asc' }\n   *       //where: { completed: true },\n   *     })\n   *     .subscribe(info => setTasks(info.applyChanges));\n   * }, []);\n   */\n  applyChanges(prevState: entityType[] | undefined): entityType[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remult as a SvelteKit Hook\nDESCRIPTION: Demonstrates how to define remult as a SvelteKit hook to make it available throughout the application using sequence from @sveltejs/kit/hooks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks.server.ts\nimport type { Handle } from '@sveltejs/kit'\nimport { sequence } from '@sveltejs/kit/hooks'\nimport { api as handleRemult } from './server/api'\n\nexport const handle = sequence(\n  // Handle remult server side\n  handleRemult,\n)\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Creation Date in Remult\nDESCRIPTION: This snippet shows how to sort tasks by their creation date in ascending order using the 'orderBy' option in the Repository.find() method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/sorting-filtering.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/App.tsx\n\nuseEffect(() => {\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" }\n    })\n    .then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: SolidStart Integration for Remult in TypeScript\nDESCRIPTION: Defines the remultSolidStart function for integrating Remult with SolidStart framework. Returns a RemultSolidStartServer with HTTP method handlers and a withRemult utility for context management.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remultSolidStart(\n  options: RemultServerOptions<RequestEvent>,\n): RemultSolidStartServer\n//[ ] RemultServerOptions from ./server/index.js is not exported\nexport type RemultSolidStartServer = RemultServerCore<RequestEvent> & {\n  withRemult<T>(what: () => Promise<T>): Promise<T>\n  GET: RequestHandler\n  PUT: RequestHandler\n  POST: RequestHandler\n  DELETE: RequestHandler\n}\n//[ ] RemultServerCore from ./server/index.js is not exported\ntype RequestHandler = (event: RequestEvent) => Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft SQL Server Data Provider for Remult\nDESCRIPTION: This snippet demonstrates how to install and configure the Microsoft SQL Server data provider for Remult using Knex. It includes the necessary connection settings and options.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpm i knex tedious\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { createKnexDataProvider } from \"remult/remult-knex\"\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: createKnexDataProvider({\n      // Knex client configuration for MSSQL\n      client: \"mssql\",\n      connection: {\n        server: \"127.0.0.1\",\n        database: \"test\",\n        user: \"your_database_user\",\n        password: \"your_database_password\",\n        options: {\n          enableArithAbort: true,\n          encrypt: false,\n          instanceName: `sqlexpress`\n        }\n      }\n    })\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Running the SvelteKit Development Server\nDESCRIPTION: Command to start the SvelteKit development server, which will serve the application with Remult integration at the specified local URL.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Backend Method Authentication\nDESCRIPTION: Adding authentication requirement to a backend method using the BackendMethod decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@BackendMethod({ allowed: Allow.authenticated })\n```\n\n----------------------------------------\n\nTITLE: Enabling SQL Query Logging\nDESCRIPTION: Demonstrates how to enable SQL query logging in Remult for debugging and optimization purposes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/3-fitler-based-on-relation-sql/content.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nSqlDatabase.LogToConsole = true\n```\n\n----------------------------------------\n\nTITLE: Connecting Remult to SQL.js Database\nDESCRIPTION: Code for connecting Remult to a SQLite database using sql.js, a JavaScript implementation of SQLite for browsers and Node.js.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult' // [!code highlight]\nimport initSqlJs from 'sql.js' // [!code highlight]\nimport { SqlJsDataProvider } from 'remult/remult-sql-js' // [!code highlight]\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase( // [!code highlight]\n      new SqlJsDataProvider(initSqlJs().then((x) => new x.Database())), // [!code highlight]\n    ), // [!code highlight]\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Simplifying Task Addition with Live Queries\nDESCRIPTION: Modified task addition function that no longer needs to manually update the component state after inserting a new task. The live query subscription will automatically handle state updates when new tasks are created.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/live-queries.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function addTask(e: Event) {\n  e.preventDefault()\n  try {\n    await taskRepo.insert({ title: newTaskTitle() })\n    // ^ this no longer needs to be a variable as we are not using it to set the state.\n    // setTasks([...tasks, newTask]) <-- this line is no longer needed\n    setNewTaskTitle(\"\")\n  } catch (error) {\n    alert((error as { message: string }).message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Information in Remult\nDESCRIPTION: Shows how to access field metadata like caption and options through the repository fields property.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(repo.fields.title.caption) // displays the caption of a specific field\nconsole.log(repo.fields.title.options)// writes the options that were defined for this field\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to Entity Filter\nDESCRIPTION: Demonstrates the entityFilterFromJson method that reconstructs an EntityFilter from a JSON object. This allows saved filters to be used in queries after being retrieved.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_filter.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Assuming `Task` is an entity class and `jsonFilter` is a JSON object representing an EntityFilter\nconst taskFilter = Filter.entityFilterFromJson(Task, jsonFilter);\n// Using the reconstructed `EntityFilter` in a query\nconst tasks = await remult.repo(Task).find({ where: taskFilter });\nfor (const task of tasks) {\n  // Do something for each task based on the filter\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Database Connection\nDESCRIPTION: Code snippet demonstrating how to use environment variables to configure the database connection string in a Remult application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dataProvider = createPostgresDataProvider({\n  connectionString: process.env['DATABASE_URL'],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Remult in SolidStart 'use server' Functions\nDESCRIPTION: Demonstrates how to use the withRemult method in SolidStart 'use server' functions to access the remult object for database operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getCount(){\n  return api.withRemult(event, async () =>\n   ({ result: await remult.repo(Task).count() }),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Query Example\nDESCRIPTION: Shows the resulting SQL query generated from the custom filter implementation including parameterized values.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect \"id\", \"status\", \"customerId\", \"createdAt\"\nfrom \"orders\"\nwhere \"status\" in ($2, $3, $4, $5, $6)\nand \"createdAt\" >= $7\nand \"createdAt\" < $8\nand (\"customerId\" in (select id from customers where city = $9))\nOrder By \"id\"\n```\n\n----------------------------------------\n\nTITLE: Adding UI Buttons for Setting All Tasks Completion Status in React\nDESCRIPTION: React JSX code that adds two buttons to the UI for setting all tasks as either completed or uncompleted, calling the setAllCompleted function with the appropriate boolean value.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/backend-methods.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n  <button onClick={() => setAllCompleted(true)}>Set All Completed</button>\n  <button onClick={() => setAllCompleted(false)}>Set All Uncompleted</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Advanced SQL Custom Filter with Table Names\nDESCRIPTION: Enhanced version of the custom filter using dbNamesOf utility for table names and aliases in SQL queries.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nstatic activeOrders = Filter.createCustom<\n  Order,\n  { year: number; customerCity: string }\n>(async ({ year, customerCity }) => {\n  const order = await dbNamesOf(Order, { \n    tableName: true, \n  })\n  const customer = await dbNamesOf(Customer, { \n    tableName: \"c\", \n  }) \n\n  return {\n    status: [\"created\", \"confirmed\", \"pending\", \"blocked\", \"delayed\"],\n    createdAt: {\n      $gte: new Date(year, 0, 1),\n      $lt: new Date(year + 1, 0, 1),\n    },\n    $and: [\n      SqlDatabase.rawFilter(({param}) => \n        `${order.customerId} in (select ${customer.id} from ${customer} as c \n           where ${customer.city} = ${param(customerCity)})` \n      ),\n    ],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Unique EntityOrderBy in TypeScript\nDESCRIPTION: Generates a unique EntityOrderBy object based on the provided EntityOrderBy and entity metadata. This ensures that the order by criteria result in a unique ordering of entities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_sort.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncreateUniqueEntityOrderBy(entityMetadata: EntityMetadata, orderBy: EntityOrderBy): EntityOrderBy\n```\n\n----------------------------------------\n\nTITLE: Creating Remult API Initialization File\nDESCRIPTION: Code for the API initialization file that creates and exports a Remult Next.js application instance.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/index.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// src/api.ts\n\nimport { remultNextApp } from 'remult/remult-next'\n\nexport const api = remultNextApp({})\n```\n\n----------------------------------------\n\nTITLE: Converting Value Type to HTML Input Format\nDESCRIPTION: Example of converting a Date object to a string suitable for an HTML input element, truncating the ISO string to date format.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_valueconverter.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntoInput: (val, inputType) => val?.toISOString().substring(0, 10)\n```\n\n----------------------------------------\n\nTITLE: Converting Value Type to JSON\nDESCRIPTION: Example of converting a Date object to an ISO string for JSON serialization when sending data to a REST API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_valueconverter.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoJson: val => val?.toISOString()\n```\n\n----------------------------------------\n\nTITLE: Checking API Insert Permission\nDESCRIPTION: Example demonstrating how to check if the current user has permission to create a new entity instance before displaying an insert button.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entitymetadata.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (repo(Task).metadata.apiInsertAllowed(task)){\n  // display insert button\n}\n```\n\n----------------------------------------\n\nTITLE: Knex Database Integration - TypeScript\nDESCRIPTION: Type declarations for Knex query builder integration, including data provider implementation and schema management.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function buildColumn(\n  x: FieldMetadata,\n  dbName: string,\n  b: Knex.CreateTableBuilder,\n  supportsJson?: boolean,\n): void\n\nexport declare function createKnexDataProvider(\n  config: Knex.Config,\n): Promise<KnexDataProvider>\n```\n\n----------------------------------------\n\nTITLE: Iterating Query Results with AsyncIterator in TypeScript\nDESCRIPTION: Demonstrates how to use async iteration to process query results from a repository, allowing for efficient iteration over large datasets while performing updates.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_queryresult.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfor await (const task of taskRepo.query()) {\n  await taskRepo.save({ ...task, completed });\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Implementation of Abstracted Method\nDESCRIPTION: A server-only file that implements the abstract method defined in the controller, using Node.js-specific modules that will only be executed on the server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-server-only-packages.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from 'fs';\nimport { ProductsController } from '../products/products.controller';\nProductsController.writeToLog = what => fs.appendFileSync('./logs/log.txt', what);\n```\n\n----------------------------------------\n\nTITLE: Implementing SqlDatabase Class for Database Operations\nDESCRIPTION: Class that implements DataProvider interface for SQL databases, providing methods for executing SQL commands, filtering entities, and managing transactions with comprehensive logging options.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class SqlDatabase\n  implements\n    DataProvider,\n    HasWrapIdentifier,\n    CanBuildMigrations,\n    SqlCommandFactory\n{\n  private sql\n  /**\n   * Gets the SQL database from the data provider.\n   * @param dataProvider - The data provider.\n   * @returns The SQL database.\n   * @see [Direct Database Access](https://remult.dev/docs/running-sql-on-the-server)\n   */\n  static getDb(dataProvider?: DataProvider): SqlDatabase\n  /**\n   * Creates a new SQL command.\n   * @returns The SQL command.\n   * @see [Direct Database Access](https://remult.dev/docs/running-sql-on-the-server)\n   */\n  createCommand(): SqlCommand\n  /**\n   * Executes a SQL command.\n   * @param sql - The SQL command.\n   * @returns The SQL result.\n   * @see [Direct Database Access](https://remult.dev/docs/running-sql-on-the-server)\n   */\n  execute(sql: string): Promise<SqlResult>\n  /**\n   * Wraps an identifier with the database's identifier syntax.\n   */\n  wrapIdentifier: (name: string) => string\n  ensureSchema(entities: EntityMetadata[]): Promise<void>\n  /**\n   * Gets the entity data provider.\n   * @param entity  - The entity metadata.\n   * @returns The entity data provider.\n   */\n  getEntityDataProvider(entity: EntityMetadata): EntityDataProvider\n  /**\n   * Runs a transaction. Used internally by remult when transactions are required\n   * @param action - The action to run in the transaction.\n   * @returns The promise of the transaction.\n   */\n  transaction(\n    action: (dataProvider: DataProvider) => Promise<void>,\n  ): Promise<void>\n  /**\n     * Creates a raw filter for entity filtering.\n     * @param {CustomSqlFilterBuilderFunction} build - The custom SQL filter builder function.\n     * @returns {EntityFilter<any>} - The entity filter with a custom SQL filter.\n     * @example\n     * SqlDatabase.rawFilter(({param}) =>\n          `\"customerId\" in (select id from customers where city = ${param(customerCity)})`\n        )\n     * @see [Leveraging Database Capabilities with Raw SQL in Custom Filters](https://remult.dev/docs/custom-filter.html#leveraging-database-capabilities-with-raw-sql-in-custom-filters)\n     */\n  static rawFilter(build: CustomSqlFilterBuilderFunction): EntityFilter<any>\n  /**\n     *  Converts a filter to a raw SQL string.\n     *  @see [Leveraging Database Capabilities with Raw SQL in Custom Filters](https://remult.dev/docs/running-sql-on-the-server#leveraging-entityfilter-for-sql-databases)\n     \n     */\n  static filterToRaw<entityType>(\n    repo: RepositoryOverloads<entityType>,\n    condition: EntityFilter<entityType>,\n    sqlCommand?: SqlCommandWithParameters,\n    dbNames?: EntityDbNamesBase,\n    wrapIdentifier?: (name: string) => string,\n  ): Promise<string>\n  /**\n   * `false` _(default)_ - No logging\n   *\n   * `true` - to log all queries to the console\n   *\n   * `oneLiner` - to log all queries to the console as one line\n   *\n   * a `function` - to log all queries to the console as a custom format\n   * @example\n   * SqlDatabase.LogToConsole = (duration, query, args) => { console.log(\"be crazy ;)\") }\n   */\n  static LogToConsole:\n    | boolean\n    | \"oneLiner\"\n    | ((duration: number, query: string, args: Record<string, any>) => void)\n  /**\n   * Threshold in milliseconds for logging queries to the console.\n   */\n  static durationThreshold: number\n  /**\n   * Creates a new SQL database.\n   * @param sql - The SQL implementation.\n   * @example\n   * const db = new SqlDatabase(new PostgresDataProvider(pgPool))\n   */\n  constructor(sql: SqlImplementation)\n  provideMigrationBuilder: (builder: MigrationCode) => MigrationBuilder\n  private createdEntities\n  end: () => Promise<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Relation Field in Order Entity\nDESCRIPTION: This snippet demonstrates how to define a custom relation field in the Order entity to access the Customer id without loading the entire Customer entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"orders\")\nexport class Order {\n  @Fields.cuid()\n  id = \"\";\n  @Fields.string()\n  customerId = \"\"; // Custom field to hold the related entity's identifier\n  @Relations.toOne<Order, Customer>(() => Customer, \"customerId\")\n  customer?: Customer;\n  @Fields.number()\n  amount = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Entity Filters to JSON in Remult\nDESCRIPTION: Translates an EntityFilter to a plain JSON object that can be stored or transported. This enables serialization of complex filter conditions for storage or API communication.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nstatic entityFilterToJson<T>(\n  entityDefs: EntityMetadata<T>,\n  where: EntityFilter<T>,\n): any\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity-Level Authorization in Task Class\nDESCRIPTION: Adds authentication requirement to Task entity using the Allow.authenticated function in the @Entity decorator\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/auth.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\", {\n    allowApiCrud: Allow.authenticated\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Sorting in REST API\nDESCRIPTION: Example URL demonstrating how to sort products by price in descending order using query parameters _sort and _order\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://mySite.com/api/products?_sort=price&_order=desc\n```\n\n----------------------------------------\n\nTITLE: Excluding Default-Included Relation in Specific Query\nDESCRIPTION: This snippet shows how to exclude a default-included relation in a specific query by setting it to false in the include statement.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await orderRepo.find({\n  include: {\n    customer: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Turso Data Provider for Remult\nDESCRIPTION: This snippet shows how to install the Turso client and configure it as a data provider for Remult. It sets up the necessary environment variables for database connection.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @libsql/client\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult' // [!code highlight]\nimport { createClient } from '@libsql/client' // [!code highlight]\nimport { TursoDataProvider } from 'remult/remult-turso' // [!code highlight]\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase( // [!code highlight]\n      new TursoDataProvider( // [!code highlight]\n        createClient({ // [!code highlight]\n          url: process.env.TURSO_DATABASE_URL, // [!code highlight]\n          authToken: process.env.TURSO_AUTH_TOKEN, // [!code highlight]\n        }), // [!code highlight]\n      ), // [!code highlight]\n    ), // [!code highlight]\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Entity in Remult\nDESCRIPTION: Shows how to insert a new entity into the data source using the insert method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait taskRepo.insert({title:\"task a\"})\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Validators in Remult (TypeScript)\nDESCRIPTION: Demonstrates the use of Remult's built-in validators, specifically the minLength validator from the Validators utility.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/validation.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Validators } from 'remult'\n\n@Fields.string({\n   validate: Validators.minLength(5)\n})\ntitle = ''\n```\n\n----------------------------------------\n\nTITLE: Updating Frontend to Use Backend Method for Task Completion in React\nDESCRIPTION: This snippet shows how to adjust the frontend React component to call the new backend method for setting all tasks' completion status. It replaces the previous frontend logic with a single backend method call.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/6-backend-methods/2-refactor-to-backend/content.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nasync function setAllCompleted(completed: boolean) {\n  await TasksController.setAllCompleted(completed)\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit $and Operator in Remult\nDESCRIPTION: Uses the explicit $and operator to combine multiple conditions. All conditions in the array must be satisfied for a record to match, equivalent to the implicit AND relationship.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: {\n  $and: [{ status: 1 }, { archive: false }]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Different Domain for Remult API Calls\nDESCRIPTION: Example demonstrating how to configure Remult to make API calls to a different domain.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_apiclient.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Different domain\nremult.apiClient.url = 'https://example.com/api';\n```\n\n----------------------------------------\n\nTITLE: Adding Development Scripts to package.json\nDESCRIPTION: NPM scripts for running the Angular development server with proxy configuration and the Node.js server with tsx for automatic reloading.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\"scripts\": {\n  ...\n  \"dev\": \"ng serve --proxy-config proxy.conf.json --open\",\n  \"dev-node\": \"tsx watch src/server\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Translating EntityOrderBy to Sort in TypeScript\nDESCRIPTION: Converts an EntityOrderBy object to a Sort instance. This is useful when working with different representations of sort criteria.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_sort.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntranslateOrderByToSort(entityDefs: EntityMetadata, orderBy: EntityOrderBy): Sort\n```\n\n----------------------------------------\n\nTITLE: Comparing Objects Based on Sort Criteria in TypeScript\nDESCRIPTION: Compares two objects based on the current sort criteria. Returns a negative value if 'a' should come before 'b', a positive value if 'a' should come after 'b', or zero if they are equal.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_sort.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncompare(a: any, b: any, getFieldKey?: (fieldName: string) => string): number\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Pagination Example in TypeScript\nDESCRIPTION: Shows how to use the limit and page parameters in a find operation to implement pagination with Remult's repository pattern. This allows retrieving a specific subset of rows from a dataset.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Products).find({\n  limit: 10,\n  page: 2\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing SQL Database with Postgres Provider\nDESCRIPTION: Example of creating a new SQL database instance using PostgresDataProvider\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_sqldatabase.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = new SqlDatabase(new PostgresDataProvider(pgPool))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Precise Values from an Entity Filter\nDESCRIPTION: Demonstrates the static getPreciseValues method that retrieves precise values for each property in a filter for an entity. This method analyzes a filter object and extracts specific values used for filtering properties.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_filter.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst preciseValues = await Filter.getPreciseValues(meta, {\n  status: { $ne: 'active' },\n  $or: [\n    { customerId: [\"1\", \"2\"] },\n    { customerId: \"3\" }\n  ]\n});\nconsole.log(preciseValues);\n// Output:\n// {\n//   \"customerId\": [\"1\", \"2\", \"3\"], // Precise values inferred from the filter\n//   \"status\": undefined,           // Cannot infer precise values for 'status'\n// }\n```\n\n----------------------------------------\n\nTITLE: Connecting Remult to Better-sqlite3 Database\nDESCRIPTION: Code for connecting Remult to a SQLite database using better-sqlite3. Uses SqlDatabase with BetterSqlite3DataProvider to provide database access.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult' // [!code highlight]\nimport Database from 'better-sqlite3' // [!code highlight]\nimport { BetterSqlite3DataProvider } from 'remult/remult-better-sqlite3' // [!code highlight]\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase( // [!code highlight]\n      new BetterSqlite3DataProvider(new Database('./mydb.sqlite')), // [!code highlight]\n    ), // [!code highlight]\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Repository Interface Query Method Definition\nDESCRIPTION: TypeScript method definition for advanced querying capabilities with support for pagination and aggregation. Includes detailed documentation with examples of basic usage, pagination, and aggregation.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nquery<Options extends QueryOptions<entityType> & {\n  aggregate?: Omit<\n    GroupByOptions<\n      entityType,\n      never,\n      NumericKeys<entityType>[],\n      NumericKeys<entityType>[],\n      (keyof MembersOnly<entityType>)[],\n      (keyof MembersOnly<entityType>)[],\n      (keyof MembersOnly<entityType>)[]\n    >,\n    \"group\" | \"orderBy\" | \"where\" | \"limit\" | \"page\"\n  >\n}>(\n  options?: Options,\n): Options extends {\n  aggregate: Omit<\n    GroupByOptions<\n      entityType,\n      never,\n      NumericKeys<entityType>[],\n      NumericKeys<entityType>[],\n      (keyof MembersOnly<entityType>)[],\n      (keyof MembersOnly<entityType>)[],\n      (keyof MembersOnly<entityType>)[]\n    >,\n    \"group\" | \"orderBy\" | \"where\" | \"limit\" | \"page\"\n  >\n}\n  ? QueryResult<\n      entityType,\n      GroupByResult<\n        entityType,\n        never,\n        NonNullable<Options[\"aggregate\"][\"sum\"]>,\n        NonNullable<Options[\"aggregate\"][\"avg\"]>,\n        NonNullable<Options[\"aggregate\"][\"min\"]>,\n        NonNullable<Options[\"aggregate\"][\"max\"]>,\n        NonNullable<Options[\"aggregate\"][\"distinctCount\"]>\n      >\n    >\n  : QueryResult<entityType>\n```\n\n----------------------------------------\n\nTITLE: Refactored Literal Field with DRY Principle in Remult\nDESCRIPTION: A more maintainable approach to literal fields by separating the values and type definitions for better reusability.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst statuses = ['open', 'closed', 'frozen', 'in progress'] as const;\ntype StatusType = typeof statuses[number];\n\n@Fields.literal(() => statuses)\nstatus: StatusType = 'open';\n```\n\n----------------------------------------\n\nTITLE: Sorting Tasks by Creation Date in Remult\nDESCRIPTION: This snippet shows how to implement sorting functionality by setting the 'orderBy' property to sort tasks by their 'createdAt' field in ascending order.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/sorting-filtering.md#2025-04-16_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n$effect(() => {\n  repo(Task)\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" }\n    })\n    .then((t) => (tasks = t));\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom RemultContext Property in Entity Saving Event\nDESCRIPTION: Demonstrates how to use the custom 'origin' property from RemultContext in an entity's saving event.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-options.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n  saving: task => {\n    task.lastUpdateDate = new Date();\n    task.lastUpdateUser = remult.user?.name;\n    task.lastUpdateOrigin = remult.context.origin;\n  },\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Filters in Remult Queries\nDESCRIPTION: This code shows how to comment out or disable a specific filter while keeping other query options. The where clause for completed tasks is commented out, causing Remult to return all tasks while still applying pagination and sorting. This pattern is useful during development and testing.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/sorting-filtering.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n  useEffect(() => {\n    taskRepo\n      .find({\n        limit: 20,\n        orderBy: { createdAt: \"asc\" },\n        //where: { completed: true },\n      })\n      .then(setTasks);\n  }, []);\n```\n\n----------------------------------------\n\nTITLE: Specifying a Subset of Values for ValueListFieldType in Remult\nDESCRIPTION: Uses the getValues option to limit the available values for a ValueListFieldType to a specific subset.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n@ValueListFieldType({\n  getValues: () => [\n    Country.us,\n    Country.canada,\n    Country.france,\n    { id: 'uk', caption: 'United Kingdom', currency: 'GBP', phonePrefix: '44' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SseSubscriptionServer for Server-Sent Events\nDESCRIPTION: Defines a class that implements the SubscriptionServer interface using Server-Sent Events (SSE) for real-time updates. This allows subscribing to channel updates and publishing messages to connected clients.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class SseSubscriptionServer implements SubscriptionServer {\n  private canUserConnectToChannel?\n  constructor(\n    canUserConnectToChannel?:\n      | ((channel: string, remult: Remult) => boolean)\n      | undefined,\n  )\n  publishMessage<T>(channel: string, message: any): Promise<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Admin Role to a User\nDESCRIPTION: Modifies the user data to assign the 'admin' role to the user named 'Jane', enabling administrative privileges for that user.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/auth.ts\n\nconst validUsers = [\n  { id: \"1\", name: \"Jane\", roles: [\"admin\"] },\n  { id: \"2\", name: \"Steve\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing RelationOptions Interface for Entity Relationships\nDESCRIPTION: Interface for configuring entity relationships. It provides options for customizing field mappings, specifying relation fields, applying filters when fetching related entities, and controlling default inclusion behavior.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RelationOptions<\n  fromEntity,\n  toEntity,\n  matchIdEntity,\n  optionsType extends FindOptionsBase<toEntity> = FindOptionsBase<toEntity>,\n> extends Pick<FieldOptions, \"caption\"> {\n  /**\n   * An object specifying custom field names for the relation.\n   * Each key represents a field in the related entity, and its value is the corresponding field in the source entity.\n   * For example, `{ customerId: 'id' }` maps the 'customerId' field in the related entity to the 'id' field in the source entity.\n   * This is useful when you want to define custom field mappings for the relation.\n   */\n  fields?: {\n    [K in keyof toEntity]?: keyof fromEntity & string\n  }\n  /**\n   * The name of the field for this relation.\n   */\n  field?: keyof matchIdEntity & string\n  /**\n   * Find options to apply to the relation when fetching related entities.\n   * You can specify a predefined set of find options or provide a function that takes the source entity\n   * and returns find options dynamically.\n   * These options allow you to customize how related entities are retrieved.\n   */\n  findOptions?: optionsType | ((entity: fromEntity) => optionsType)\n  /**\n   * Determines whether the relation should be included by default when querying the source entity.\n   * When set to true, related entities will be automatically included when querying the source entity.\n   * If false or not specified, related entities will need to be explicitly included using the `include` option.\n   */\n  defaultIncluded?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Completion Toggle in React with Remult\nDESCRIPTION: Adds functionality to mark tasks as completed by updating the task's state both locally and on the server. Uses Remult's taskRepo.save() method to persist the changes to the backend database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/crud.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\n\n{\n  tasks.map(task => {\n    const setTask = (value: Task) =>\n      setTasks(tasks => tasks.map(t => (t === task ? value : t)))\n\n    const setCompleted = async (completed: boolean) =>\n      setTask(await taskRepo.save({ ...task, completed }))\n\n    return (\n      <div key={task.id}>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          onChange={e => setCompleted(e.target.checked)}\n        />\n        {task.title}\n      </div>\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Server for Production Deployment with Remult\nDESCRIPTION: Modifies the Express server to serve static frontend files and handle API requests. Includes configuration for session management, authentication, and listening on a PORT specified by the environment variable.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/index.ts\n\nimport express from \"express\"\nimport { api } from \"./api.js\"\nimport session from \"cookie-session\"\nimport { auth } from \"./auth.js\"\n\nconst app = express()\napp.use(\n  session({\n    secret: process.env[\"SESSION_SECRET\"] || \"my secret\"\n  })\n)\napp.use(auth)\napp.use(api)\nconst frontendFiles = process.cwd() + \"/dist\";\napp.use(express.static(frontendFiles));\napp.get(\"/*\", (_, res) => {\n  res.sendFile(frontendFiles + \"/index.html\");\n});\napp.listen(process.env[\"PORT\"] || 3002, () => console.log(\"Server started\"));\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.dateOnly Decorator in Remult\nDESCRIPTION: Defines a date-only field (without time components) in a Remult entity to avoid time zone issues.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.dateOnly()\nbirthDate?:Date;\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button to Task Display\nDESCRIPTION: This snippet shows how to add a delete button to each task in the list. The button invokes the deleteTask function when clicked, passing the event and the task to be deleted.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/crud.md#2025-04-16_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n{#each tasks as task}\n\t<div>\n\t\t<input\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={task.completed}\n\t\t\toninput={(e) => setCompleted(task, e.currentTarget.checked)}\n\t\t/>\n\t\t<input name=\"title\" bind:value={task.title} />\n\t\t<button onclick={(e) => saveTask(e, task)}>Save</button>\n\t\t<button onclick={(e) => deleteTask(e, task)}>Delete</button> // [!code ++]\n\t</div>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Combining Paging, Sorting, and Filtering with Remult in TypeScript\nDESCRIPTION: This final snippet combines paging, sorting, and filtering (commented out) in a single Remult query. It limits the results to 20 tasks, sorts them by creation date, and optionally filters for completed tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/sorting-filtering.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonMounted(() =>\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" }\n      //where: { completed: true }\n    })\n    .then(items => (tasks.value = items))\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Remult Admin UI in TypeScript\nDESCRIPTION: This snippet demonstrates how to enable the Admin UI in a Remult application by setting the 'admin' option to true in the remultExpress configuration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/admin-ui.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const api = remultExpress({\n  entities: [],\n  admin: true, // Enable the Admin UI\n})\n```\n\n----------------------------------------\n\nTITLE: Ably Integration for Remult in TypeScript\nDESCRIPTION: Defines classes for Ably integration with Remult's subscription system. Includes AblySubscriptionClient for client-side and AblySubscriptionServer for server-side implementation of real-time subscriptions.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class AblySubscriptionClient implements SubscriptionClient {\n  private ably\n  constructor(ably: Ably.Types.RealtimePromise)\n  openConnection(\n    onReconnect: VoidFunction,\n  ): Promise<SubscriptionClientConnection>\n}\n//[ ] Ably.Types.RealtimePromise from TBD is not exported\n//[ ] SubscriptionClientConnection from ./src/live-query/SubscriptionChannel.js is not exported\nexport declare class AblySubscriptionServer implements SubscriptionServer {\n  private ably\n  constructor(ably: Ably.Types.RestPromise)\n  publishMessage<T>(channel: string, message: T): Promise<void>\n}\n//[ ] Ably.Types.RestPromise from TBD is not exported\n```\n\n----------------------------------------\n\nTITLE: Defining a ValueListFieldType Class in Remult\nDESCRIPTION: Creates a value list class with multiple properties per value, useful for complex enumerations like countries with additional data.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@ValueListFieldType()\nexport class Country {\n  static us = new Country('us', 'United States', 'USD', '1')\n  static canada = new Country('ca', 'Canada', 'CAD', '1')\n  static france = new Country('fr', 'France', 'EUR', '33')\n\n  constructor(\n    public id: string,\n    public caption: string,\n    public currency: string,\n    public phonePrefix: string,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Precise Values from a Filter Instance\nDESCRIPTION: Shows how to use the instance method getPreciseValues to retrieve precise values from a filter. This method is similar to the static version but is called on a filter instance.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_filter.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst preciseValues = await where.getPreciseValues();\nconsole.log(preciseValues);\n// Output:\n// {\n//   \"customerId\": [\"1\", \"2\", \"3\"], // Precise values inferred from the filter\n//   \"status\": undefined,           // Cannot infer precise values for 'status'\n// }\n```\n\n----------------------------------------\n\nTITLE: Getting All Values from a ValueListFieldType in Remult\nDESCRIPTION: Retrieves all available values from a ValueListFieldType, useful for populating dropdown lists.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.table(getValueList(Country))\n```\n\n----------------------------------------\n\nTITLE: Dynamic Value List Component\nDESCRIPTION: React component demonstrating how to use getValueList function to display field options dynamically.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/1-field-meta-data/content.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { repo, getValueList } from 'remult'\nreturn (\n  <div>\n    <div>\n      {fields.map((field) => (\n        <div key={field.key}>\n          {field.caption}: <strong>{field.displayValue(task)}</strong>{' '}\n          {getValueList(field as any)\n            ? `(options: ${getValueList(field as any)})`\n            : ''}\n        </div>\n      ))}\n    </div>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to Value Type\nDESCRIPTION: Example of converting a JSON value to a Date object when receiving data from a REST API call.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_valueconverter.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfromJson: val => new Date(val)\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Update in Angular Component\nDESCRIPTION: This method saves changes to a task by calling the taskRepo.save API. It handles errors by displaying an alert with the error message. This is used to persist task changes to the backend database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/crud.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/todo/todo.component.ts\n\nasync saveTask(task: Task) {\n  try {\n    await this.taskRepo.save(task)\n  } catch (error: any) {\n    alert(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Group By Query with Remult Repository\nDESCRIPTION: Example showing how to use Remult's repository to group data by multiple fields (country and city), calculate sum of salary, and apply a filter condition on salary greater than 2000.\nSOURCE: https://github.com/remult/remult/blob/main/examples/groupBy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrepo(Employee).groupBy({\n  group: ['country', 'city'],\n  sum: ['salary'],\n  where: {\n    salary: {\n      $gt: 2000,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Additional PostgreSQL Configuration Options\nDESCRIPTION: Example of how to configure additional PostgreSQL options like SSL when creating the data provider.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/database.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ncreatePostgresDataProvider({\n  configuration: {\n    ssl: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Entity Filter to JSON\nDESCRIPTION: Shows the entityFilterToJson method that translates an EntityFilter to a plain JSON object. This is useful for storing or transporting filter objects across systems.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_filter.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Assuming `Task` is an entity class\nconst jsonFilter = Filter.entityFilterToJson(Task, { completed: true });\n// `jsonFilter` can now be stored or transported as JSON\n```\n\n----------------------------------------\n\nTITLE: Registering TasksController in API Configuration\nDESCRIPTION: Updates the server API configuration to register the TasksController, making its backend methods available as API endpoints.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/backend-methods.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api.ts\n\n//...\nimport { TasksController } from \"./shared/TasksController.js\"\n\nexport const api = remultSolidStart({\n  //...\n  controllers: [TasksController]\n})\n```\n\n----------------------------------------\n\nTITLE: ID Equality Filter in Remult\nDESCRIPTION: Filters records by matching the ID of a reference field. Uses the $id operator to match records based on the ID of a referenced entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: {\n  person: {\n    $id: 123456\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User Roles for Role-Based Authorization\nDESCRIPTION: Modifying the user authentication system to assign roles to users, specifically giving the admin role to one user for testing role-based access control.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/auth.ts\n\nconst validUsers = [\n  { id: \"1\", name: \"Jane\", roles: [\"admin\"] },\n  { id: \"2\", name: \"Steve\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in TypeScript\nDESCRIPTION: Modifies the API server module to use a database connection string from an environment variable, allowing for flexible database configuration in production environments.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/api.ts\n\n//...\nconst DATABASE_URL = process.env[\"DATABASE_URL\"];\n\nexport const api = remultExpress({\n dataProvider: DATABASE_URL\n   ? createPostgresDataProvider({ connectionString: DATABASE_URL })\n   : undefined,\n   //...\n })\n```\n\n----------------------------------------\n\nTITLE: Deserializing Remult Entities in Svelte Component\nDESCRIPTION: Svelte component code that deserializes Remult entities received from a server load function using repo(Entity).fromJson().\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import type { PageData } from \"./$types\";\n  import { Task } from \"../demo/todo/Task\";\n  import { repo } from \"remult\";\n\n  let { data }: { data: PageData } = $props();\n\n  let tasks = repo(Task).fromJson(data.tasks);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Querying Tasks with Full vs Light Entities in TypeScript\nDESCRIPTION: Demonstrates how to query tasks using both full Task entity and TaskLight entity with selected fields. TaskLight provides a read-only view with reduced fields to optimize data transfer.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/4-select-fields/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get Task fields\nawait repo(Task).find()\n\n// TaskLight fields only\nawait repo(TaskLight).find()\n```\n\n----------------------------------------\n\nTITLE: Using getEntityRef for Active Record-like Functionality (TypeScript)\nDESCRIPTION: Demonstrates an alternative implementation of Active Record-like functionality using the getEntityRef helper function. This approach allows for entity manipulation and persistence without direct inheritance from EntityBase.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/active-record.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst ref = getEntityRef(person)\nawait ref.save()\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Fields for toMany Relation in TypeScript\nDESCRIPTION: Example demonstrating how to specify multiple fields to establish a toMany relation using the fields option in Remult. This maps branchId and customerId fields between Customer and Order entities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Relations.toMany<Customer, Order>(() => Order, {\n  fields: {\n    branchId: \"branchId\",\n    customerId: \"id\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Task Completion Status with Remult\nDESCRIPTION: This snippet defines a function to update the completed status of a task. It uses Remult's save method to persist the change to the database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/crud.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst setCompleted = async (task: Task, completed: boolean) => {\n  await repo(Task).save({ ...task, completed })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Query Logging\nDESCRIPTION: Example of setting up custom logging function for SQL queries with duration and arguments\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_sqldatabase.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nSqlDatabase.LogToConsole = (duration, query, args) => { console.log(\"be crazy ;)\") }\n```\n\n----------------------------------------\n\nTITLE: ArrayEntityDataProvider Implementation for In-Memory Data Storage\nDESCRIPTION: Class that implements the EntityDataProvider interface for in-memory array-based data storage. It supports operations like count, find, update, delete, and insert, along with custom filtering.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ArrayEntityDataProvider implements EntityDataProvider {\n  private entity\n  private rows\n  static rawFilter(filter: CustomArrayFilter): EntityFilter<any>\n  constructor(entity: EntityMetadata, rows: () => any[])\n  groupBy(options?: EntityDataProviderGroupByOptions): Promise<any[]>\n  count(where?: Filter): Promise<number>\n  find(options?: EntityDataProviderFindOptions): Promise<any[]>\n  update(id: any, data: any): Promise<any>\n  delete(id: any): Promise<void>\n  insert(data: any): Promise<any>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Relational Filter in Frontend Component\nDESCRIPTION: This frontend code demonstrates how to use the 'fromCity' custom filter to fetch orders from customers in New York with an amount greater than 5. It combines multiple filters and includes related customer data in the results.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/2-filter-based-on-relation/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```file:/frontend/Page.tsx title=\"/frontend/Page.tsx\" collapse={1-6,23-37} add={12}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Delete Button Based on Permissions\nDESCRIPTION: This snippet shows how to conditionally render a \"Delete\" button for tasks based on the user's permission to delete. It uses the entity's metadata to check if API delete is allowed for the specific task item.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\n\nreturn (\n  <div key={task.id}>\n    <input\n      type=\"checkbox\"\n      checked={task.completed}\n      onChange={e => setCompleted(e.target.checked)}\n    />\n    <input value={task.title} onChange={e => setTitle(e.target.value)} />\n    <button onClick={saveTask}>Save</button>\n    {taskRepo.metadata.apiDeleteAllowed(task) && (\n      <button onClick={deleteTask}>Delete</button>\n    )}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Extended Entities in Remult\nDESCRIPTION: Example code showing how to query both the base entity fields and the extended entity fields separately in Remult. This demonstrates how to retrieve just Task fields or Task fields with the extra fields from TaskExtra.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/5-add-fields-extends-entity/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get Task fields\nawait repo(Task).find()\n\n// Get Task & TaskExtra fields\nawait repo(TaskExtra).find()\n```\n\n----------------------------------------\n\nTITLE: Basic Equality Filter in Remult\nDESCRIPTION: The simplest form of EntityFilter that matches records where a field equals a specific value. This example filters for items where the status field equals 1.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: {\n  status: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Contains String Filter in Remult\nDESCRIPTION: Filters records where a string field contains a specific substring. Uses the $contains operator to match records with partial string matches.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: {\n  name: {\n    $contains: 'joe'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sort Class for Entity Sorting in TypeScript\nDESCRIPTION: Class for creating and managing sort criteria for entities. It provides methods to translate between Sort instances and EntityOrderBy objects, reverse sort order, and compare entities.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Sort {\n  /**\n   * Translates the current `Sort` instance into an `EntityOrderBy` object.\n   *\n   * @returns {EntityOrderBy<any>} An `EntityOrderBy` object representing the sort criteria.\n   */\n  toEntityOrderBy(): EntityOrderBy<any>\n  /**\n   * Constructs a `Sort` instance with the provided sort segments.\n   *\n   * @param {...SortSegment[]} segments The sort segments to be included in the sort criteria.\n   */\n  constructor(...segments: SortSegment[])\n  /**\n   * The segments of the sort criteria.\n   *\n   * @type {SortSegment[]}\n   */\n  Segments: SortSegment[]\n  /**\n   * Reverses the sort order of the current sort criteria.\n   *\n   * @returns {Sort} A new `Sort` instance with the reversed sort order.\n   */\n  reverse(): Sort\n  /**\n   * Compares two objects based on the current sort criteria.\n   *\n   * @param {any} a The first object to compare.\n   * @param {any} b The second object to compare.\n   * @param {function(FieldMetadata): string} [getFieldKey] An optional function to get the field key for comparison.\n   * @returns {number} A negative value if `a` should come before `b`, a positive value if `a` should come after `b`, or zero if they are equal.\n   */\n  compare(\n    a: any,\n    b: any,\n    getFieldKey?: (field: FieldMetadata) => string,\n  ): number\n  /**\n   * Translates an `EntityOrderBy` to a `Sort` instance.\n   *\n   * @template T The entity type for the order by.\n   * @param {EntityMetadata<T>} entityDefs The metadata of the entity associated with the order by.\n   * @param {EntityOrderBy<T>} [orderBy] The `EntityOrderBy` to be translated.\n   * @returns {Sort} A `Sort` instance representing the translated order by.\n   */\n  static translateOrderByToSort<T>(\n    entityDefs: EntityMetadata<T>,\n    orderBy: EntityOrderBy<T>,\n  ): Sort\n  /**\n   * Creates a unique `Sort` instance based on the provided `Sort` and the entity metadata.\n   * This ensures that the sort criteria result in a unique ordering of entities.\n   *\n   * @template T The entity type for the sort.\n   * @param {EntityMetadata<T>} entityMetadata The metadata of the entity associated with the sort.\n   * @param {Sort} [orderBy] The `Sort` instance to be made unique.\n   * @returns {Sort} A `Sort` instance representing the unique sort criteria.\n   */\n  static createUniqueSort<T>(\n    entityMetadata: EntityMetadata<T>,\n    orderBy?: Sort,\n  ): Sort\n  /**\n   * Creates a unique `EntityOrderBy` based on the provided `EntityOrderBy` and the entity metadata.\n   * This ensures that the order by criteria result in a unique ordering of entities.\n   *\n   * @template T The entity type for the order by.\n   * @param {EntityMetadata<T>} entityMetadata The metadata of the entity associated with the order by.\n   * @param {EntityOrderBy<T>} [orderBy] The `EntityOrderBy` to be made unique.\n   * @returns {EntityOrderBy<T>} An `EntityOrderBy` representing the unique order by criteria.\n   */\n  static createUniqueEntityOrderBy<T>(\n    entityMetadata: EntityMetadata<T>,\n    orderBy?: EntityOrderBy<T>,\n  ): EntityOrderBy<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Angular development with proxy\nDESCRIPTION: JSON snippet showing the modification of the 'dev' script in package.json to use the proxy configuration when serving the Angular app.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/angular.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"dev\": \"ng serve --proxy-config proxy.conf.json --open\",\n```\n\n----------------------------------------\n\nTITLE: Installing Remult in SvelteKit\nDESCRIPTION: Command to install the Remult package as a development dependency in a SvelteKit project.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install remult --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding a SQL Expression Field for City to Order Entity\nDESCRIPTION: Adds a calculated city field directly to the Order entity using sqlExpression, allowing direct filtering by customer city.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/filtering-and-relations.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity('orders', { allowApiCrud: true })\nexport class Order {\n  //...\n  @Fields.string<Order>({\n    sqlExpression: async () => {\n      const customer = await dbNamesOf(Customer)\n      const order = await dbNamesOf(Order)\n      return `(\n          select ${customer.city}\n            from ${customer}\n           where ${customer.id} = ${order.customer}\n          )`\n    },\n  })\n  city = ''\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query Execution in Remult\nDESCRIPTION: Demonstrates how to execute a basic SQL count query using Remult's SqlDatabase class\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/running-sql-on-the-server.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sql = SqlDatabase.getDb()\nconst result = await sql.execute('SELECT COUNT(*) AS count FROM tasks')\nconsole.log(result.rows[0].count)\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLite3 Data Provider in TypeScript\nDESCRIPTION: Defines a function to create a SQLite3 data provider and a Sqlite3DataProvider class extending SqliteCoreDataProvider. This provides integration with the standard sqlite3 Node.js library.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createSqlite3DataProvider(\n  fileName?: string,\n): Promise<SqlDatabase>\n//[ ] SqlDatabase from ./index.js is not exported\nexport declare class Sqlite3DataProvider extends SqliteCoreDataProvider {\n  constructor(db: Database)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Expression Fields in Remult\nDESCRIPTION: Example demonstrating how to create a field based on an SQL expression rather than a physical table column, such as calculating a string length.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.integer({\n  sqlExpression:e=> 'length(title)'\n})\ntitleLength = 0;\n@Fields.string()\ntitle='';\n```\n\n----------------------------------------\n\nTITLE: Basic Client Integration\nDESCRIPTION: Simple client-side initialization using browser's fetch API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remult } from 'remult'\n```\n\n----------------------------------------\n\nTITLE: Removing Manual State Update After Task Insertion\nDESCRIPTION: Removes redundant code that manually adds new tasks to the component state, as the live query subscription will handle state updates automatically when new tasks are inserted.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/live-queries.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function addTask() {\n  try {\n    const newTask = await taskRepo.insert({ title: newTaskTitle.value })\n    //tasks.value.push(newTask) <-- this line is no longer needed\n    newTaskTitle.value = \"\"\n  } catch (error: unknown) {\n    alert((error as { message: string }).message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Koa Server with Remult Middleware\nDESCRIPTION: Main server setup integrating Remult middleware with Koa, including request handling and server initialization\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/koa.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/index.ts\n\nimport * as koa from 'koa'\nimport * as bodyParser from 'koa-bodyparser'\nimport { api } from './api.js'\n\nconst app = new koa()\n\napp.use(bodyParser()) // Enables JSON body parsing for API requests\n\napp.use(async (ctx, next) => {\n  const r = await api.handle(ctx.request) // Handle API requests with Remult\n  if (r) {\n    ctx.response.body = r.data\n    ctx.response.status = r.statusCode\n  } else {\n    await next() // If not handled by Remult, pass on to the next middleware\n  }\n})\n\napp.listen(3002, () => {\n  console.log('Server started on port 3002')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Document in Next.js\nDESCRIPTION: TypeScript code to set up the OpenAPI document in a Next.js application using Remult. It exports the API configuration and the OpenAPI document.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-swagger.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api.ts\nimport { Task } from '@/shared/Task'\nimport { TasksController } from '@/shared/TasksController'\nimport { remultNextApp } from 'remult/remult-next'\n\nexport const api = remultNextApp({\n  admin: true,\n  entities: [Task],\n  controllers: [TasksController],\n})\n\n// Export this here 👇\nexport const openApiDoc = api.openApiDoc({\n  title: 'Todo App',\n})\n\nexport const { POST, PUT, DELETE, GET } = api\n```\n\n----------------------------------------\n\nTITLE: Setting up Remult API Route\nDESCRIPTION: TypeScript code for creating a catch-all API route handler for Remult in Next.js.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nextjs.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/api/[...remult]/route.ts\n\nimport { api } from '../../../api'\n\nexport const { POST, PUT, DELETE, GET } = api\n```\n\n----------------------------------------\n\nTITLE: Changing Default API Base URL in Remult\nDESCRIPTION: This snippet demonstrates how to change the default API base URL for Remult client-side operations. It sets the apiClient.url property of the remult object.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nremult.apiClient.url = 'http://localhost:3002/api'\n```\n\n----------------------------------------\n\nTITLE: Creating a new Angular project with Angular CLI\nDESCRIPTION: Commands to create a new Angular project named 'remult-angular' and navigate into the project directory.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/angular.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nng new remult-angular\ncd remult-angular\n```\n\n----------------------------------------\n\nTITLE: Displaying Task List in Sveltekit Component\nDESCRIPTION: Svelte component that fetches tasks from the Remult repository and renders them as a list with checkboxes for the completed status.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/entities.md#2025-04-16_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { repo } from \"remult\";\n  import { Task } from \"../shared/Task\";\n\n  let tasks = $state<Task[]>([]);\n\n  $effect(() => {\n    repo(Task)\n      .find()\n      .then((t) => (tasks = t));\n  });\n</script>\n\n<div>\n  <h1>todos</h1>\n  <main>\n    {#each tasks as task}\n      <div>\n        <input type=\"checkbox\" bind:checked={task.completed} />\n        <span>{task.title}</span>\n      </div>\n    {/each}\n  </main>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Integrating Todo Component in Next.js Page\nDESCRIPTION: This snippet shows how to integrate the Todo component into a Next.js page file.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/entities.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport Todo from '../components/todo'\n\nexport default function Home() {\n  return <Todo />\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.createdAt Decorator in Remult\nDESCRIPTION: Defines a field that automatically sets the creation timestamp on insert and cannot be modified through the API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.createdAt()\ncreatedAt = new Date()\n```\n\n----------------------------------------\n\nTITLE: Defining Entity with Built-in Validations in Remult\nDESCRIPTION: This snippet demonstrates how to define an entity in Remult with built-in validations. It uses decorators to specify validation rules for different fields, including required fields, minimum length, and custom validation functions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/9-examples/1-validations/meta.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"tasks\")\nclass Task {\n  @Fields.cuid()\n  id!: string\n\n  @Fields.string({\n    validate: (task) => {\n      if (task.title.length < 3)\n        throw \"Title too short\"\n    },\n    inputType: 'textarea'\n  })\n  title = \"\"\n\n  @Fields.boolean()\n  completed = false\n\n  @Fields.createdAt()\n  createdAt?: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection for Production in Remult Express API\nDESCRIPTION: This code snippet shows how to modify the Remult Express API configuration to use a production database connection string provided by the DATABASE_URL environment variable. It falls back to local JSON files if no connection string is found.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DATABASE_URL = process.env[\"DATABASE_URL\"];\nexport const api = remultExpress({\n dataProvider: DATABASE_URL\n   ? createPostgresDataProvider({ connectionString: DATABASE_URL })\n   : undefined,\n   //...\n })\n```\n\n----------------------------------------\n\nTITLE: Starting the Node Development Server\nDESCRIPTION: Command to start the Node.js development server using npm run script.\nSOURCE: https://github.com/remult/remult/blob/main/examples/react-todo/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Extracting Precise Values from Filter Conditions in TypeScript\nDESCRIPTION: Shows how to use getPreciseValues function to extract exact values from a complex filter object that includes $ne and $or operators. The function analyzes filter conditions and returns a mapping of property names to their precise values where possible.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_filterprecisevalues.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst preciseValues = await getPreciseValues(meta, {\n  status: { $ne: 'active' },\n  $or: [\n    { customerId: [\"1\", \"2\"] },\n    { customerId: \"3\" }\n  ]\n});\nconsole.log(preciseValues);\n// Output:\n// {\n//   \"customerId\": [\"1\", \"2\", \"3\"], // Precise values inferred from the filter\n//   \"status\": undefined,           // Cannot infer precise values for 'status'\n// }\n```\n\n----------------------------------------\n\nTITLE: Defining SortSegment and SortSegments Interfaces in TypeScript\nDESCRIPTION: Interfaces for defining sort segments that specify which field to sort by and in what direction. SortSegments maps entity properties to SortSegment objects with ascending/descending capabilities.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SortSegment {\n  field: FieldMetadata\n  isDescending?: boolean\n}\nexport type SortSegments<entityType> = {\n  [Properties in keyof entityType]: SortSegment & {\n    descending(): SortSegment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sveltekit Integration\nDESCRIPTION: Initializing Remult middleware in a Sveltekit application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks.server.ts\n\nimport { remultSveltekit } from 'remult/remult-sveltekit'\n\nexport const handle = remultSveltekit({\n  entities: [\n    /* entity types */\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: CaptionTransformer Object for Dynamic Field Caption Customization\nDESCRIPTION: Object that provides functionality for transforming field captions dynamically. This is useful for internationalization, applying labeling conventions, or any custom caption transformation logic.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const CaptionTransformer: {\n  /**\n   * Transforms the caption of a column based on custom rules or criteria.\n   *\n   * This method can be assigned an arrow function that dynamically alters the\n   * caption of a column. It is particularly useful for internationalization,\n   * applying specific labeling conventions, or any other custom caption transformation\n   * logic that your application requires.\n   *\n   * @param {Remult} remult - The Remult context, providing access to various framework features.\n   * @param {string} key - The key (name) of the field whose caption is being transformed.\n   * @param {string} caption - The original caption of the field.\n   * @param {EntityMetadata<any>} entityMetaData - Metadata of the entity that the field belongs to.\n   * @returns {string} The transformed caption for the field. If no transformation is applied,\n   *                   the original caption is returned.\n   *\n   * @example\n   * // Example of translating a field caption to French\n   * CaptionTransformer.transformCaption = (\n   *   remult, key, caption, entityMetaData\n   * ) => {\n   *   if (key === 'firstName') {\n   *     return 'Prénom'; // French translation for 'firstName'\n   *   }\n   *   return caption;\n   * };\n   *\n   * // Usage\n   * const firstNameCaption = repo(Person).fields.firstName.caption; // Returns 'Prénom'\n   */\n  transformCaption: (\n    remult: Remult,\n    key: string,\n    caption: string,\n    entityMetaData: EntityMetadata<any>,\n  ) => string\n}\n```\n\n----------------------------------------\n\nTITLE: ApiClient Interface Definition for Remote API Communication\nDESCRIPTION: Interface for API client configuration in Remult, allowing customization of HTTP client, base URL, subscription client, and message handling. Includes detailed documentation for integrating with various HTTP client libraries.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ApiClient {\n  /**\n   * The HTTP client to use when making API calls. It can be set to a function with the `fetch` signature\n   * or an object that has `post`, `put`, `delete`, and `get` methods. This can also be used to inject\n   * logic before each HTTP call, such as adding authorization headers.\n   *\n   * @example\n   * // Using Axios\n   * remult.apiClient.httpClient = axios;\n   *\n   * @example\n   * // Using Angular HttpClient\n   * remult.apiClient.httpClient = httpClient;\n   * @see\n   * If you want to add headers using angular httpClient, see: https://medium.com/angular-shots/shot-3-how-to-add-http-headers-to-every-request-in-angular-fab3d10edc26\n   *\n   * @example\n   * // Using fetch (default)\n   * remult.apiClient.httpClient = fetch;\n   *\n   * @example\n   * // Adding bearer token authorization\n   * remult.apiClient.httpClient = (\n   *   input: RequestInfo | URL,\n   *   init?: RequestInit\n   * ) => {\n   *   return fetch(input, {\n   *     ...init,\n   *     headers: authToken\n   *       ? {\n   *           ...init?.headers,\n   *           authorization: 'Bearer ' + authToken,\n   *         }\n   *       : init?.headers,\n   *\n   *     cache: 'no-store',\n   *   })\n   * }\n   */\n  httpClient?: ExternalHttpProvider | typeof fetch\n  /**\n   * The base URL for making API calls. By default, it is set to '/api'. It can be modified to be relative\n   * or to use a different domain for the server.\n   *\n   * @example\n   * // Relative URL\n   * remult.apiClient.url = './api';\n   *\n   * @example\n   * // Different domain\n   * remult.apiClient.url = 'https://example.com/api';\n   */\n  url?: string\n  /**\n   * The subscription client used for real-time data updates. By default, it is set to use Server-Sent Events (SSE).\n   * It can be set to any subscription provider as illustrated in the Remult tutorial for deploying to a serverless environment.\n   *\n   * @see https://remult.dev/tutorials/react-next/deployment.html#deploying-to-a-serverless-environment\n   */\n  subscriptionClient?: SubscriptionClient\n  /**\n   * A function that wraps message handling for subscriptions. This is useful for executing some code before\n   * or after any message arrives from the subscription.\n   * For example, in Angular, to refresh a specific part of the UI,\n   * you can call the `NgZone` run method at this time.\n   *\n   * @example\n   * // Angular example\n   * import { Component, NgZone } from '@angular/core';\n   * import { remult } from \"remult\";\n   *\n   * export class AppComponent {\n   *   constructor(zone: NgZone) {\n   *     remult.apiClient.wrapMessageHandling = handler => zone.run(() => handler());\n   *   }\n   * }\n   */\n  wrapMessageHandling?: (x: VoidFunction) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer with Related Tags\nDESCRIPTION: Demonstrates how to fetch a customer along with their associated tags using include options.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst customer = await customerRepo.findFirst(\n  { name: 'Abshire Inc' },\n  {\n    include: {\n      tags: {\n        include: {\n          tag: true,\n        },\n      },\n    },\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Observable from LiveQuery in TypeScript\nDESCRIPTION: A utility function that converts a Remult LiveQuery into an RxJS Observable. This allows for reactive data handling with the standard Observable pattern.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/appendix-observable-live-query.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/from-live-query.ts\n\nimport { LiveQuery } from 'remult'\nimport { Observable } from 'rxjs'\n\nexport function fromLiveQuery<T>(q: LiveQuery<T>) {\n  return new Observable<T[]>((sub) =>\n    q.subscribe(({ items }) => sub.next(items)),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ProgressListener Class for Operation Progress\nDESCRIPTION: A class that handles progress reporting for data operations. It wraps a DataApiResponse and provides methods to update progress information during long-running operations.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ProgressListener {\n  private res\n  constructor(res: DataApiResponse)\n  progress(progress: number): void\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TodoComponent with Remult Task Repository\nDESCRIPTION: Creates a TodoComponent that uses Remult's repository to fetch Task entities from the server. Initializes a tasks array and populates it on component initialization.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/entities.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/todo/todo.component.ts\n\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { remult } from 'remult';\nimport { Task } from '../../shared/Task';\n\n@Component({\n  selector: 'app-todo',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './todo.component.html',\n  styleUrl: './todo.component.css',\n})\nexport class TodoComponent {\n  taskRepo = remult.repo(Task);\n  tasks: Task[] = [];\n  ngOnInit() {\n    this.taskRepo.find().then((items) => (this.tasks = items));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in TypeScript\nDESCRIPTION: Demonstrates how to check if a user has specific role permissions using the isAllowed method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_remult.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nremult.isAllowed(\"admin\")\n```\n\n----------------------------------------\n\nTITLE: Decorator Type Definitions for Class Fields in TypeScript\nDESCRIPTION: Type definitions for creating class field decorators in TypeScript, providing type safety and context for property decorators in Remult entities.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ClassFieldDecorator<entityType, valueType> = (\n  target: any,\n  context:\n    | string\n    | ClassFieldDecoratorContextStub<entityType, valueType | undefined>,\n  c?: any,\n) => void\nexport interface ClassFieldDecoratorContextStub<entityType, valueType> {\n  readonly access: {\n    set(object: entityType, value: valueType | null): void\n  }\n  readonly name: string\n}\nexport type ClassType<T> = {\n  new (...args: any[]): T\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced SQL-Based Filter Using dbNamesOf and filterToRaw\nDESCRIPTION: A more maintainable version of the SQL custom filter that uses dbNamesOf and filterToRaw to leverage entity definitions in the query.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/filtering-and-relations.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dbNamesOf } from 'remult'\n\n@Entity('orders', { allowApiCrud: true })\nexport class Order {\n  //...\n  static filterCity = Filter.createCustom<Order, { city: string }>(\n    async ({ city }) => {\n      const orders = await dbNamesOf(Order)\n      const customers = await dbNamesOf(Customer)\n      return SqlDatabase.rawFilter(\n        async ({ filterToRaw }) =>\n          `${orders.customer} in \n               (select ${customers.id} \n                  from ${customers} \n                 where ${await filterToRaw(Customer, { city })})`,\n      )\n    },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting Entity Without Additional Values in Remult\nDESCRIPTION: Shows how to use upsert to ensure a row exists without specifying additional values to set.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Upserting a single entity without additional `set` values: ensures that a row with the title 'task a' exists.\ntaskRepo.upsert({ where: { title: 'task a' } });\n```\n\n----------------------------------------\n\nTITLE: Calling Custom-Named Backend Method in Remult\nDESCRIPTION: This snippet demonstrates how to call a backend method with a custom name from the frontend using Remult's repo object.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/6-backend-methods/meta.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait remult.repo(User)['reset-password'](userId, newPassword);\n```\n\n----------------------------------------\n\nTITLE: Registering Remult Middleware in Express\nDESCRIPTION: Updated Express server code that registers the Remult API middleware to handle API requests.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/index.ts\n\nimport express from \"express\"\nimport { api } from \"./api.js\"\n\nconst app = express()\napp.use(api)\n\napp.listen(3002, () => console.log(\"Server started\"))\n```\n\n----------------------------------------\n\nTITLE: Using Validation Decorators in Remult Entities\nDESCRIPTION: This example demonstrates the use of validation decorators in Remult entities. It shows how to apply built-in validators like @Validators.required() and @Validators.unique() to ensure data consistency and uniqueness.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/9-examples/1-validations/meta.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"products\")\nclass Product {\n  @Fields.cuid()\n  id!: string\n\n  @Fields.string()\n  @Validators.required()\n  @Validators.unique()\n  name = \"\"\n\n  @Fields.number()\n  @Validators.required()\n  price = 0\n\n  @Fields.boolean()\n  inStock = false\n}\n```\n\n----------------------------------------\n\nTITLE: Not Contains String Filter in Remult\nDESCRIPTION: Filters records where a string field does not contain a specific substring. Uses the $notContains operator to exclude records with partial string matches.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: {\n  name: {\n    $notContains: 'joe'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to Entity Filters in Remult\nDESCRIPTION: Translates a plain JSON object back into an EntityFilter. This enables reconstruction of complex filter conditions from serialized JSON representations.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nstatic entityFilterFromJson<T>(\n  entityDefs: EntityMetadata<T>,\n  packed: any,\n): EntityFilter<T>\n```\n\n----------------------------------------\n\nTITLE: Initializing Remult Server Middleware with Nuxt.js\nDESCRIPTION: Code for setting up Remult API routes in a Nuxt.js application, including the required configuration for enabling experimental decorators.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// server/api/[...remult].ts\n\nimport { remultNuxt } from 'remult/remult-nuxt'\n\nexport const api = remultNuxt({})\n\nexport default defineEventHandler(api)\n\n// enable experimental decorators\n// Add to nuxt.config.ts\n  nitro: {\n    esbuild: {\n      options: {\n        tsconfigRaw: {\n          compilerOptions: {\n            experimentalDecorators: true,\n          },\n        },\n      },\n    },\n  },\n  vite: {\n    esbuild: {\n      tsconfigRaw: {\n        compilerOptions: {\n          experimentalDecorators: true,\n        },\n      },\n    },\n  },\n\n\n```\n\n----------------------------------------\n\nTITLE: Using @Fields.boolean Decorator in Remult\nDESCRIPTION: Defines a boolean field in a Remult entity using the @Fields.boolean() decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.boolean()\ncompleted = false\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Component in Solid\nDESCRIPTION: Implements a Solid component that displays a list of tasks. It uses Remult's repository to fetch tasks and Solid's createStore and onMount hooks for state management and initial data loading.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/entities.md#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { repo } from 'remult'\nimport { createStore } from 'solid-js/store'\nimport { For, onMount } from 'solid-js'\nimport { Task } from '../shared/Task.js'\n\nconst taskRepo = repo(Task)\n\nexport default function Todo() {\n  const [tasks, setTasks] = createStore<Task[]>([])\n  onMount(() => taskRepo.find().then(setTasks))\n  return (\n    <main>\n      <For each={tasks}>\n        {(task) => {\n          return (\n            <div>\n              <input type=\"checkbox\" checked={task.completed} />\n              {task.title}\n            </div>\n          )\n        }}\n      </For>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Server for Production\nDESCRIPTION: Server configuration that serves the Angular app and API, with environment variable support for port configuration and static file serving.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\"\nimport { api } from \"./api.js\"\nimport session from \"cookie-session\"\nimport { auth } from \"./auth.js\"\n\nconst app = express()\napp.use(\n  session({\n    secret: process.env[\"SESSION_SECRET\"] || \"my secret\"\n  })\n)\napp.use(auth)\napp.use(api)\nconst frontendFiles = process.cwd() + \"/dist/remult-angular-todo/browser\";\napp.use(express.static(frontendFiles));\napp.get(\"/*\", (_, res) => {\n  res.sendFile(frontendFiles + \"/index.html\");\n});\napp.listen(process.env[\"PORT\"] || 3002, () => console.log(\"Server started\"));\n```\n\n----------------------------------------\n\nTITLE: Filtering with Range Operators in REST API\nDESCRIPTION: Example URL showing how to filter products by price range using greater than or equal to (gte) and less than or equal to (lte) operators\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://mySite.com/api/products?price.gte=5&price.lte=10\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Saving Hook Implementation\nDESCRIPTION: A full example demonstrating how to use the saving lifecycle hook to manage creation and update timestamps on a Task entity. Shows the practical application of lifecycle hooks for data management.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/lifecycle-hooks.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n  saving: async (task, e) => {\n    if (e.isNew) {\n      task.createdAt = new Date(); // Set the creation date for new tasks.\n    }\n    task.lastUpdated = new Date(); // Update the last updated date.\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Angular HttpClient for Remult API Communication\nDESCRIPTION: Example demonstrating how to use Angular's HttpClient with Remult for API communication.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_apiclient.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using Angular HttpClient\nremult.apiClient.httpClient = httpClient;\n```\n\n----------------------------------------\n\nTITLE: Wrapping Message Handling for Angular Zone Integration in Remult\nDESCRIPTION: Example showing how to wrap subscription message handling in Angular's NgZone to ensure UI updates happen within Angular's change detection cycle.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_apiclient.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Angular example\nimport { Component, NgZone } from '@angular/core';\nimport { remult } from \"remult\";\n\nexport class AppComponent {\n  constructor(zone: NgZone) {\n    remult.apiClient.wrapMessageHandling = handler => zone.run(() => handler());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Modal Dialog with Awaitable Resolution\nDESCRIPTION: Example of using the useDialog hook to create a custom modal with awaitable resolution. The dialog accepts a render function and default result, allowing for complete customization of the dialog appearance and behavior.\nSOURCE: https://github.com/remult/remult/blob/main/examples/shadcn-react-table/README.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst dialog = useDialog()\n\nasync function doSomething() {\n  if (\n    await dialog(\n      (resolve) => (\n        <div>\n          <h2>Are you sure?</h2>\n          <button onClick={() => resolve(true)}>Yes</button>\n        </div>\n      ),\n      false, // default result\n    )\n  ) {\n    // Do Something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Express Server Integration\nDESCRIPTION: Initializing Remult middleware in an Express server application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    entities: [\n      /* entity types */\n    ],\n  }),\n)\n\napp.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Installing sql.js and TypeScript Definitions for Remult\nDESCRIPTION: Shows the necessary commands to install sql.js and its TypeScript definitions for use with Remult. This setup is required before implementing SQLite in the frontend.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/offline-support.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sql.js\nnpm install @types/sql.js --save-dev\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using SubscriptionChannel in TypeScript\nDESCRIPTION: This example demonstrates how to create a SubscriptionChannel, publish messages from the backend, and subscribe to messages on the frontend. It includes a note about using BackendMethod for frontend publishing.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_subscriptionchannel.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Defined in code that is shared between the frontend and the backend\nconst statusChange = new SubscriptionChannel<{ oldStatus: number, newStatus: number }>(\"statusChange\");\n\n// Backend: Publishing a message\nstatusChange.publish({ oldStatus: 1, newStatus: 2 });\n\n// Frontend: Subscribing to messages\nstatusChange.subscribe((message) => {\n    console.log(`Status changed from ${message.oldStatus} to ${message.newStatus}`);\n});\n\n// Note: If you want to publish from the frontend, use a BackendMethod for that.\n```\n\n----------------------------------------\n\nTITLE: NPM Script Configuration for Development Server\nDESCRIPTION: Package.json script configuration for running the development server with tsx\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/koa.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"dev-node\": \"tsx watch --env-file=.env --tsconfig tsconfig.server.json src/server\"\n```\n\n----------------------------------------\n\nTITLE: ComparisonValueFilter Interface for Query Filtering\nDESCRIPTION: Interface that defines comparison operations for filtering entities in queries. It provides operators like greater than, less than, greater than or equal to, and less than or equal to, with both symbol and method name syntax.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ComparisonValueFilter<valueType> = ValueFilter<valueType> & {\n  /**\n   * Represents a 'GREATER THAN' filter condition where the value must be greater than the specified value.\n   *\n   * @example\n   * // Matches entities where the status is greater than 1\n   * const filter = {\n   *   status: { $gt: 1 }\n   * };\n   */\n  $gt?: valueType\n  /**\n   * Represents a 'GREATER THAN' filter condition using the '>' operator where the value must be greater than the specified value.\n   *\n   * @example\n   * // Matches entities where the status is greater than 1\n   * const filter = {\n   *   status: { '>': 1 }\n   * };\n   */\n  \">\"?: valueType\n  /**\n   * Represents a 'GREATER THAN OR EQUAL TO' filter condition where the value must be greater than or equal to the specified value.\n   *\n   * @example\n   * // Matches entities where the status is greater than or equal to 1\n   * const filter = {\n   *   status: { $gte: 1 }\n   * };\n   */\n  $gte?: valueType\n  /**\n   * Represents a 'GREATER THAN OR EQUAL TO' filter condition using the '>=' operator where the value must be greater than or equal to the specified value.\n   *\n   * @example\n   * // Matches entities where the status is greater than or equal to 1\n   * const filter = {\n   *   status: { '>=': 1 }\n   * };\n   */\n  \">=\"?: valueType\n  /**\n   * Represents a 'LESS THAN' filter condition where the value must be less than the specified value.\n   *\n   * @example\n   * // Matches entities where the status is less than 1\n   * const filter = {\n   *   status: { $lt: 1 }\n   * };\n   */\n  $lt?: valueType\n  /**\n   * Represents a 'LESS THAN' filter condition using the '<' operator where the value must be less than the specified value.\n   *\n   * @example\n   * // Matches entities where the status is less than 1\n   * const filter = {\n   *   status: { '<': 1 }\n   * };\n   */\n  \"<\"?: valueType\n  /**\n   * Represents a 'LESS THAN OR EQUAL TO' filter condition where the value must be less than or equal to the specified value.\n   *\n   * @example\n   * // Matches entities where the status is less than or equal to 1\n   * const filter = {\n   *   status: { $lte: 1 }\n   * };\n   */\n  $lte?: valueType\n  /**\n   * Represents a 'LESS THAN OR EQUAL TO' filter condition using the '<=' operator where the value must be less than or equal to the specified value.\n   *\n   * @example\n   * // Matches entities where the status is less than or equal to 1\n   * const filter = {\n   *   status: { '<=': 1 }\n   * };\n   */\n  \"<=\"?: valueType\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Precise Values from Entity Filters in TypeScript\nDESCRIPTION: A static method that retrieves precise values for each property in a filter for an entity. It analyzes a filter and returns a mapping of entity properties to their inferred precise values.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPreciseValues<entityType>(\n  metadata: EntityMetadata<entityType>,\n  filter: EntityFilter<entityType>,\n): Promise<FilterPreciseValues<entityType>>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript decorators in Nuxt config\nDESCRIPTION: Modifications to the nuxt.config.ts file to enable TypeScript decorators support in both Nitro and Vite build environments.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nuxt.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// https://nuxt.com/docs/api/configuration/nuxt-config\nexport default defineNuxtConfig({\n  compatibilityDate: '2024-04-03',\n  devtools: { enabled: true },\n  nitro: {\n    esbuild: {\n      options: {\n        tsconfigRaw: {\n          compilerOptions: {\n            experimentalDecorators: true,\n          },\n        },\n      },\n    },\n  },\n  vite: {\n    esbuild: {\n      tsconfigRaw: {\n        compilerOptions: {\n          experimentalDecorators: true,\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Remult in Hono Routes\nDESCRIPTION: Shows how to use the remultHono middleware and withRemult method to access the remult object in a Hono application route.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { remultHono } from 'remult/remult-hono'\n\nconst app = new Hono()\n\nconst api = remultHono({}) \napp.get('/test1', api.withRemult, async (c) => // [!code highlight]\n  c.text('hello ' + (await repo(Task).count())),\n)\napp.route('', api)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Installing production dependencies for Remult React application\nDESCRIPTION: Installs additional production dependencies for a more robust deployment including security packages (express-jwt, helmet), compression, PostgreSQL database driver, and JWT utilities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/setup-react.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i express-jwt compression helmet pg jwt-decode axios\nnpm i --save-dev @types/compression @types/express-jwt @types/jsonwebtoken @types/pg\n```\n\n----------------------------------------\n\nTITLE: Using Remult in SvelteKit PageLoad Function\nDESCRIPTION: Implementation of a SvelteKit page load function that utilizes Remult to fetch data server-side without reloading on the frontend, following API rules even when running on the server.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/+page.ts\nimport { remult } from 'remult'\nimport type { PageLoad } from './$types'\n\nexport const load = (async (event) => {\n  // Instruct remult to use the special svelte fetch to fetch data on server side page load\n  remult.useFetch(event.fetch)\n  return repo(Task).find()\n}) satisfies PageLoad\n```\n\n----------------------------------------\n\nTITLE: Entity Type Specification in Field Decorators (Updated Implementation)\nDESCRIPTION: Updated implementation of field decorators that explicitly specifies the entity type in the generic definition to resolve type errors in TypeScript 5.4.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string<Task>({\n  validate: task => task.title.length > 2\n  title = ''\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Remult Server Middleware with Express\nDESCRIPTION: Code for setting up Remult middleware in an Express application. Remult is initialized as a request handling middleware.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\n\nconst app = express()\n\napp.use(remultExpress({})) // [!code highlight]\n\napp.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Decorators in Vite Configuration\nDESCRIPTION: Modification to the vite.config.ts file to enable experimental decorators support for TypeScript, which is required for Remult's decorator-based entity definitions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/vue.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// vite.config.ts\n\n// ...\nexport default defineConfig({\n  plugins: [vue()],\n  esbuild: {\n    tsconfigRaw: {\n      compilerOptions: {\n        experimentalDecorators: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Filter to JSON\nDESCRIPTION: Converts a Filter instance to its JSON representation. This enables serialization of filters for storage or transmission.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ntoJson(): any\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Fastify and Remult\nDESCRIPTION: Command to install the necessary npm packages for setting up a Fastify server with Remult integration and the tsx development package.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/fastify.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install fastify remult\nnpm install --save-dev tsx\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Request Handling Types\nDESCRIPTION: Declares types for generic request handling including handlers, request information, response objects, and router interfaces. These types provide abstraction over specific HTTP frameworks to make Remult server compatible with different server environments.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GenericRequestHandler<RequestType> = (\n  req: RequestType,\n  res: GenericResponse,\n  next: VoidFunction,\n) => void\nexport interface GenericRequestInfo {\n  url?: string\n  method?: any\n  query?: any\n  params?: any\n}\nexport interface GenericResponse {\n  json(data: any): void\n  send(html: string): void\n  status(statusCode: number): GenericResponse\n  end(): void\n}\nexport type GenericRouter<RequestType> = {\n  route(path: string): SpecificRoute<RequestType>\n}\nexport interface InitRequestOptions {\n  liveQueryStorage: LiveQueryStorage\n  readonly remult: Remult\n}\n//[ ] LiveQueryStorage from TBD is not exported\n//[ ] Remult from TBD is not exported\n```\n\n----------------------------------------\n\nTITLE: Using Origin IndexedDb Storage for Frontend Entity Storage\nDESCRIPTION: Example of using Origin IndexedDb Storage to store entities locally in the frontend, creating a JsonDataProvider with JsonEntityIndexedDbStorage for persistent browser storage.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = new JsonDataProvider(new JsonEntityIndexedDbStorage())\nconsole.table(await repo(Task, db).find())\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Server Hooks for Remult\nDESCRIPTION: Setup code for integrating Remult in the SvelteKit server hooks pipeline. This enables Remult to process requests across all routes in the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { sequence } from '@sveltejs/kit/hooks'\nimport { api as handleRemult } from './server/api'\n\nexport const handle = sequence(\n  // Manage your sequence of handlers here\n  handleRemult,\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Tasks in Vue with Remult\nDESCRIPTION: This snippet shows how to implement task deletion using Remult's taskRepo.delete method. It adds a delete button for each task and updates the local task list upon successful deletion from the backend.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/crud.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n//...\nasync function deleteTask(task: Task) {\n  try {\n    await taskRepo.delete(task)\n    tasks.value = tasks.value.filter(t => task !== t)\n  } catch (error: unknown) {\n    alert((error as { message: string }).message)\n  }\n}\n</script>\n<template>\n  <!-- ... -->\n  <div v-for=\"task in tasks\">\n    <input type=\"checkbox\" v-model=\"task.completed\" @change=\"saveTask(task)\" />\n    <input v-model=\"task.title\" />\n    <button @click=\"saveTask(task)\">Save</button>\n    <button @click=\"deleteTask(task)\">Delete</button>\n  </div>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing DataProviderLiveQueryStorage Class for Query Management\nDESCRIPTION: Defines a class that implements LiveQueryStorage and Storage interfaces to manage persistent storage of live queries using a data provider. Handles adding, removing, and iterating through stored queries.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DataProviderLiveQueryStorage\n  implements LiveQueryStorage, Storage\n{\n  repo: Promise<Repository<LiveQueryStorageEntity>>\n  dataProvider: Promise<DataProvider>\n  constructor(\n    dataProvider:\n      | DataProvider\n      | Promise<DataProvider>\n      | (() => Promise<DataProvider | undefined>),\n  )\n  ensureSchema(): Promise<void>\n  add({ id, entityKey, data }: StoredQuery): Promise<void>\n  remove(queryId: string): Promise<void>\n  forEach(\n    entityKey: string,\n    callback: (args: {\n      query: StoredQuery\n      setData(data: any): Promise<void>\n    }) => Promise<void>,\n  ): Promise<void>\n  keepAliveAndReturnUnknownQueryIds(queryIds: string[]): Promise<string[]>\n}\n//[ ] Repository from TBD is not exported\n//[ ] LiveQueryStorageEntity from TBD is not exported\n//[ ] DataProvider from TBD is not exported\n//[ ] StoredQuery from TBD is not exported\n```\n\n----------------------------------------\n\nTITLE: Adding Sorting to Remult Repository Query\nDESCRIPTION: Shows how to sort tasks by creation date in ascending order while maintaining the result limit.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/sorting-filtering.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonMount(() =>\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" }\n    })\n    .then(setTasks)\n)\n```\n\n----------------------------------------\n\nTITLE: Setting defaultOrderBy for Entity Queries in TypeScript\nDESCRIPTION: These examples demonstrate how to set a default order for entity queries when no specific order is specified. The first example orders by name ascending, while the second orders by price descending and then by name ascending.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultOrderBy: { name: \"asc\" }\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultOrderBy: { price: \"desc\", name: \"asc\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button to Todo List Items in React\nDESCRIPTION: JSX code that adds a delete button to each task in the todo list. The button triggers the deleteTask function when clicked, passing the current task as a parameter.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/3-manipulating-data/3-delete/content.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  tasks.map((task) => {\n    return (\n      <div key={task.id}>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          onChange={(e) => setCompleted(task, e.target.checked)}\n        />\n        {task.title}\n        <button onClick={() => deleteTask(task)} style={{ marginLeft: 'auto' }}>\n          Delete\n        </button>\n      </div>\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Svelte Component with Transport\nDESCRIPTION: Modified Svelte component that no longer needs manual entity deserialization when using the Universal hooks transport feature.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import type { PageData } from \"./$types\";\n  import { repo } from \"remult\";\n\n  let { data }: { data: PageData } = $props();\n\n  // let tasks = repo(Task).fromJson(data.tasks) // [!code --]\n  let tasks = data.tasks\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Messages in Remult Entity (TypeScript)\nDESCRIPTION: This snippet shows how to customize the validation message for the maximum length validator in a Remult entity, while also applying a minimum length validation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/2-built-in-validations/content.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Task {\n  @Fields.uuid()\n  id = ''\n\n  @Fields.string<Task>({\n    validate: [\n      Validators.minLength(2),\n      Validators.maxLength(5, (length) => `maximum ${length} characters`),\n    ],\n  })\n  title = ''\n\n  //....\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BackendMethod Authorization in Remult\nDESCRIPTION: Example of securing backend methods with the allowed option, which can accept boolean values, role strings, arrays of roles, or functions to determine access permissions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/access-control.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Only authenticated users can execute this method\n@BackendMethod({ allowed: Allow.authenticated })\nstatic async doSomething() {\n  // something\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PreprocessFilterEvent Interface for Filter Handling\nDESCRIPTION: Interface for preprocessing entity filters before execution. It provides access to entity metadata and methods to retrieve precise values for filter properties, allowing for custom filter logic and validation.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PreprocessFilterEvent<entityType> {\n  /**\n   * Metadata of the entity being filtered.\n   */\n  metadata: EntityMetadata<entityType>\n  /**\n     * Retrieves precise values for each property in a filter for an entity.\n     * @param filter Optional filter to analyze. If not provided, the current filter being preprocessed is used.\n     * @returns A promise that resolves to a FilterPreciseValues object containing the precise values for each property.\n     \n    * @see {@Link FilterPreciseValues }\n     */\n  getFilterPreciseValues(\n    filter?: EntityFilter<entityType>,\n  ): Promise<FilterPreciseValues<entityType>>\n}\n```\n\n----------------------------------------\n\nTITLE: Railway CLI Commands\nDESCRIPTION: Shell commands for initializing, opening, and deploying the application to Railway platform.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/deployment.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrailway init\n```\n\nLANGUAGE: shell\nCODE:\n```\nrailway open\n```\n\nLANGUAGE: shell\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Publishing and Subscribing to Message Channels in TypeScript\nDESCRIPTION: TypeScript interface methods for publishing messages to a channel and subscribing to receive messages from it. The subscription methods provide options for callback-based or listener-based approaches.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\n  publish(message: messageType, remult?: Remult): void\n  /**\n   * Subscribes to messages from the channel. This method should only be used on the frontend.\n   *\n   * @param {(message: messageType) => void} next A function that will be called with each message received.\n   * @param {Remult} [remult] An optional instance of Remult to use for the subscription.\n   * @returns {Promise<Unsubscribe>} A promise that resolves to a function that can be used to unsubscribe from the channel.\n   */\n  subscribe(\n    next: (message: messageType) => void,\n    remult?: Remult,\n  ): Promise<Unsubscribe>\n  /**\n   * Subscribes to messages from the channel using a `SubscriptionListener` object.\n   *\n   * @param {Partial<SubscriptionListener<messageType>>} listener An object that implements the `SubscriptionListener` interface.\n   * @returns {Promise<Unsubscribe>} A promise that resolves to a function that can be used to unsubscribe from the channel.\n   */\n  subscribe(\n    listener: Partial<SubscriptionListener<messageType>>,\n  ): Promise<Unsubscribe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Column Names in Remult\nDESCRIPTION: Example showing how to specify a custom database column name for a field using the dbName option in a field decorator.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({ dbName: 'userName'})\nuserName=''\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Caption in UI Components\nDESCRIPTION: Example showing how to use a field's caption property in a UI component, useful for maintaining consistent field labels throughout the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<input placeholder={taskRepo.metadata.fields.title.caption}/>\n```\n\n----------------------------------------\n\nTITLE: Using Not Equal Operator with != Syntax in Remult (TypeScript)\nDESCRIPTION: Shows how to use the != operator in Remult queries to filter out entities that don't match specific values, both for single values and arrays.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\n// Matches entities where the status is not 1\nconst filter = {\n  status: { '!=': 1 }\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Matches entities where the status is not 1, 2, or 3\nconst filter = {\n  status: { '!=': [1, 2, 3] }\n};\n```\n\n----------------------------------------\n\nTITLE: Including Declaration File in TypeScript Configuration\nDESCRIPTION: Updates the tsconfig.json file to include the custom types.d.ts file in the TypeScript compilation process.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-options.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.server.json\n{\n  \"compilerOptions\": {\n    //...\n  },\n  \"include\": [\"src/server/**/*\", \"src/shared/**/*\", \"src/types.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult API\nDESCRIPTION: TypeScript code for creating the Remult API configuration file\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/solid.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api.ts\n\nimport { remultSolidStart } from 'remult/remult-solid-start'\n\nexport const api = remultSolidStart({})\n```\n\n----------------------------------------\n\nTITLE: Fastify Server Integration\nDESCRIPTION: Setting up Remult middleware in a Fastify server application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport fastify from 'fastify'\nimport { remultFastify } from 'remult/remult-fastify'\n;(async () => {\n  const server = fastify()\n\n  await server.register(\n    remultFastify({\n      entities: [\n        /* entity types */\n      ],\n    }),\n  )\n\n  server.listen({ port: 3000 })\n})()\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Koa and Remult\nDESCRIPTION: NPM commands to install Koa, Remult, and related TypeScript dependencies\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/koa.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install koa koa-bodyparser remult\nnpm install --save-dev @types/koa @types/koa-bodyparser tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring API Inclusion for Fields\nDESCRIPTION: Examples showing how to control whether fields are included in the API, including completely excluding fields or restricting access based on user roles.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Do not include in the API\n@Fields.string({ includeInApi: false })\npassword = '';\n// Include in the API for 'admin' only\n@Fields.number({ includeInApi: 'admin' })\nsalary = 0;\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Microsoft SQL Server Integration with Remult\nDESCRIPTION: Install Knex and Tedious packages to enable Microsoft SQL Server integration with Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/mssql.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i knex tedious\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult Express API with Task Entity\nDESCRIPTION: Sets up the Remult Express middleware with Task entity registration and admin UI enable.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/entities.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultExpress } from \"remult/remult-express\"\nimport { Task } from \"../shared/Task.js\"\n\nexport const api = remultExpress({\n  entities: [Task],\n  admin: true\n})\n```\n\n----------------------------------------\n\nTITLE: Counting Related Orders in Customer Entity\nDESCRIPTION: Shows how to add an orderCount field to the Customer entity that counts the number of related Order records using sqlRelations. The counting is performed efficiently using SQL aggregation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/6-sql-expression/3-sql-relations/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsqlRelations(Customer).orders.$count()\n```\n\n----------------------------------------\n\nTITLE: Setting up Remult API with dynamic routes in Nuxt\nDESCRIPTION: Creating a dynamic API route in Nuxt that integrates Remult and registers the Task entity. This file defines the API endpoints that will be accessible from the frontend.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nuxt.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { remultNuxt } from 'remult/remult-nuxt'\nimport { Task } from '../../demo/todo/Task.js'\n\nexport const api = remultNuxt({\n  admin: true,\n  entities: [Task],\n})\n\nexport default defineEventHandler(api)\n```\n\n----------------------------------------\n\nTITLE: Defining EntityMetadata Interface in TypeScript\nDESCRIPTION: This snippet defines the EntityMetadata interface, which provides metadata information for entities in Remult. It includes properties for entity key, fields, caption, database name, and methods for checking API permissions.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface EntityMetadata<entityType = unknown> {\n  readonly key: string\n  readonly fields: FieldsMetadata<entityType>\n  readonly caption: string\n  readonly dbName: string\n  readonly options: EntityOptions\n  readonly entityType: ClassType<entityType>\n  apiUpdateAllowed(item?: entityType): boolean\n  readonly apiReadAllowed: boolean\n  apiDeleteAllowed(item?: entityType): boolean\n  apiInsertAllowed(item?: entityType): boolean\n  getDbName(): Promise<string>\n  readonly idMetadata: IdMetadata<entityType>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Function to Set All Tasks Status in Vue\nDESCRIPTION: This function iterates through all tasks and updates their completion status on the client-side, sending individual requests for each task to the server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/backend-methods.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function setAllCompleted(completed: boolean) {\n  for (const task of await taskRepo.find()) {\n    await taskRepo.save({ ...task, completed })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Development Server\nDESCRIPTION: Command to start the frontend development server which automatically opens the app in browser and enables hot-reloading.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/react/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating TodoComponent Template with Task List\nDESCRIPTION: Implements the HTML template for TodoComponent that displays a list of tasks using Angular's ngFor directive. Each task includes a checkbox bound to the task's completed property.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/entities.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/app/todo/todo.component.html -->\n\n<h1>todos</h1>\n<main>\n  <div *ngFor=\"let task of tasks\">\n    <input type=\"checkbox\" [(ngModel)]=\"task.completed\" />\n    {{task.title}}\n  </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Using Local Database for Specific Calls in Remult\nDESCRIPTION: Demonstrates how to use a local database for a specific repository call in Remult. This allows developers to specify which database should be used for particular operations, enhancing offline capabilities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/offline-support.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { localDb } from './some-file.ts'\n\nconsole.table(await repo(Task, localDb).find())\n```\n\n----------------------------------------\n\nTITLE: Using Remult in SvelteKit Route Handlers\nDESCRIPTION: Shows how to use the withRemult method in SvelteKit route handlers to access the remult object for database operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/api/test/+server.ts\n\nimport { json, type RequestHandler } from '@sveltejs/kit'\nimport { remult } from 'remult'\nimport { Task } from '../../../shared/Task'\nimport { api } from '../../../server/api'\n\nexport const GET: RequestHandler = async (event) => {\n  return api.withRemult(event, async () =>\n    json({ result: await remult.repo(Task).count() }),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Field Display Value\nDESCRIPTION: Shows how to use the displayValue method to get a formatted value for a field based on its configuration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_fieldmetadata.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrepo.fields.createDate.displayValue(task) //will display the date as defined in the `displayValue` option defined for it.\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Custom Filters in TypeScript\nDESCRIPTION: This snippet demonstrates how to combine multiple custom filters (activeOrders and highValueOrders) to create more specific filtering criteria. It showcases the power of filter composition.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Order).find({\n  where: {\n    $and: [Order.activeOrders({ year }), Order.highValueOrders()],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for TypeScript Decorators\nDESCRIPTION: Configuration in vite.config.ts to enable TypeScript decorators in the React app.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineConfig({\n  plugins: [react()],\n  esbuild: {\n    tsconfigRaw: {\n      compilerOptions: {\n        experimentalDecorators: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom RemultContext Property in API Initialization\nDESCRIPTION: Demonstrates how to set the custom 'origin' property in the RemultContext during API initialization.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-options.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const api = remultExpress({\n  initRequest: async (_, req) => {\n    remult.context.origin = req.headers.origin\n  },\n  entities: [Task],\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Query for Relational Filtering\nDESCRIPTION: This SQL snippet illustrates the type of query generated by sqlRelationsFilter. It efficiently selects orders based on the customer's city using a subquery.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/4-sql-relations-filter/content.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"orders\".\"id\", \"orders\".\"orderDate\", \"orders\".\"amount\", \"orders\".\"customerId\"\nFROM \"orders\"\nWHERE \"orders\".\"customerId\" IN (\n  SELECT \"customers\".\"id\"\n  FROM \"customers\"\n  WHERE \"customers\".\"city\" LIKE '%New York%'\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js Development Script\nDESCRIPTION: Package.json script configuration to start the Node.js server with tsx for TypeScript execution and file watching.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n\"dev-node\": \"tsx watch --tsconfig tsconfig.server.json src/server\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of Fetched Tasks in Remult\nDESCRIPTION: This snippet demonstrates how to limit the number of tasks fetched from the database to 20 items by using the 'limit' option in the Repository.find() method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/sorting-filtering.md#2025-04-16_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n$effect(() => {\n  repo(Task)\n    .find(\n      { limit: 20 }\n    )\n    .then((t) => (tasks = t));\n});\n```\n\n----------------------------------------\n\nTITLE: Final Remult Query Configuration\nDESCRIPTION: Shows the final query configuration with sorting and limit, with filtering commented out for retrieving all tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/sorting-filtering.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonMount(() =>\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" },\n      //where: { completed: true },\n    })\n    .then(setTasks);\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomSqlFilterBuilder Class in TypeScript\nDESCRIPTION: This class provides methods for building custom SQL filters. It includes functionality to add parameters, convert entity filters to raw SQL, and handle identifier wrapping.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare class CustomSqlFilterBuilder\n  implements SqlCommandWithParameters, HasWrapIdentifier\n{\n  private r\n  wrapIdentifier: (name: string) => string\n  constructor(\n    r: SqlCommandWithParameters,\n    wrapIdentifier: (name: string) => string,\n  )\n  sql: string\n  addParameterAndReturnSqlToken(val: any): string\n  param: <valueType>(val: valueType, field?: FieldMetadata<valueType>) => string\n  filterToRaw: <entityType>(\n    repo: RepositoryOverloads<entityType>,\n    condition: EntityFilter<entityType>,\n  ) => Promise<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Axios Client Integration\nDESCRIPTION: Client-side initialization using Axios as HTTP client.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios'\nimport { remult } from 'remult'\n\nremult.apiClient.httpClient = axios\n```\n\n----------------------------------------\n\nTITLE: Removing Manual State Update After Task Deletion\nDESCRIPTION: Removes redundant code that manually filters deleted tasks from the component state, as the live query subscription will handle state updates automatically when tasks are deleted.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/live-queries.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function deleteTask(task: Task) {\n  try {\n    await taskRepo.delete(task)\n    //tasks.value = tasks.value.filter((t) => task !== t); <-- this line is no longer needed\n  } catch (error: unknown) {\n    alert((error as { message: string }).message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Commands to install Express and Remult packages for the backend, along with TypeScript type definitions and tsx for development.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm i express remult\nnpm i --save-dev @types/express tsx\n```\n\n----------------------------------------\n\nTITLE: Using Remult in Next.js App Router\nDESCRIPTION: Demonstrates how to use the withRemult method in a Next.js app router API route to access the remult object for database operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/api/test/route.ts\n\nimport { NextResponse } from 'next/server'\nimport { repo } from 'remult'\nimport { Task } from '../../../shared/task'\nimport { api } from '../../../api'\n\nexport const dynamic = 'force-dynamic'\n\nexport async function GET(req: Request) {\n  return api.withRemult(async () => {\n    return NextResponse.json({\n      result: repo(Task).count(),\n      user: remult.user,\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Integration - TypeScript\nDESCRIPTION: Type declarations for MongoDB database integration, including data provider implementation and filtering capabilities.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class MongoDataProvider implements DataProvider {\n  private db\n  private client\n  constructor(\n    db: Db,\n    client: MongoClient | undefined,\n    options?: {\n      session?: ClientSession\n      disableTransactions?: boolean\n    },\n  )\n```\n\n----------------------------------------\n\nTITLE: Using withRemultAsync for Non-Request Related Code in Express\nDESCRIPTION: Shows how to use api.withRemultAsync for non-request related code such as scheduled tasks by passing undefined as the request parameter.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetInterval(async () => {\n  api.withRemultAsync(undefined, async () => {\n    // ....\n  })\n}, 10000)\n```\n\n----------------------------------------\n\nTITLE: Nest.js Integration\nDESCRIPTION: Implementing Remult middleware in a Nest.js application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/main.ts\n\nimport { NestFactory } from '@nestjs/core'\nimport { AppModule } from './app.module'\nimport { remultExpress } from 'remult/remult-express'\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n\n  app.use(\n    remultExpress({\n      entities: [\n        /* entity types */\n      ],\n    }),\n  )\n\n  await app.listen(3000)\n}\nbootstrap()\n```\n\n----------------------------------------\n\nTITLE: Server-Side Layout Load Function for User State\nDESCRIPTION: Server-side layout load function that provides the current user state to the client-side layout, enabling server-synchronized authentication.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport { remult } from 'remult'\n\nimport type { LayoutServerLoad } from './$types'\n\nexport const load = (async () => {\n  return { user: remult.user }\n}) satisfies LayoutServerLoad\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Authentication Logic\nDESCRIPTION: Implements frontend authentication handlers for sign-in and sign-out operations, including form submission and user state management.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/2-user-authentication/content.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nasync function signIn(f: FormEvent<HTMLFormElement>) {\n  f.preventDefault()\n  try {\n    setCurrentUser((remult.user = await AuthController.signIn(name)))\n  } catch (error) {\n    alert((error as ErrorInfo).message)\n  }\n}\n\nasync function signOut() {\n  setCurrentUser(await AuthController.signOut())\n}\n\nuseEffect(() => {\n  remult.initUser().then(setCurrentUser)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Node.js development server\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/express.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Knex Custom Filter Implementation\nDESCRIPTION: Example of implementing a custom filter using Knex query builder for filtering tasks by ID range.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nstatic idBetween = Filter.createCustom<Task, {\n  from: number,\n  to: number\n}>(\n  ({ from, to }) => {\n    return KnexDataProvider.rawFilter(({ knexQueryBuilder }) => {\n      knexQueryBuilder.andWhereBetween('id', [from, to]);\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Session Middleware\nDESCRIPTION: Sets up cookie-session middleware in the Express application\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/auth.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport session from \"cookie-session\"\n\nconst app = express()\napp.use(\n  session({\n    secret: process.env[\"SESSION_SECRET\"] || \"my secret\"\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Dropdown for Priority Field in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a dynamic dropdown for the priority field using Remult's getValueList function. It retrieves options from the entity's metadata, ensuring consistency across the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/2-using-field-metadata-in-forms/content.md#2025-04-16_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getValueList } from 'remult'\n//...\nconst options = getValueList(priorityField)\n\n<label>\n  {priorityField.caption}:\n  <select\n    value={state.priority}\n    onChange={(e) => setState({ ...state, priority: e.target.value as any })}\n  >\n    {options.map((option) => (\n      <option key={option} value={option}>\n        {option}\n      </option>\n    ))}\n  </select>\n  <div style={{ color: 'red' }}>{error?.modelState?.priority}</div>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Updating Remult User in SvelteKit Layout Component\nDESCRIPTION: Frontend layout component that sets the remult.user globally based on the authenticated user data provided by the server load function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { remult } from \"remult\";// [!code ++]\n  import \"../app.css\"\n\n  interface Props {\n    data: import('./$types').LayoutData;\n    children?: import('svelte').Snippet;\n  }\n\n  let { data, children }: Props = $props();\n\n  $effect(() => {// [!code ++]\n    remult.user = data.user;// [!code ++]\n  });// [!code ++]\n</script>\n\n<svelte:head>\n  <title>Remult+Sveltekit Todo App</title>\n</svelte:head>\n\n{@render children?.()}\n```\n\n----------------------------------------\n\nTITLE: Setting up API Route Handler\nDESCRIPTION: TypeScript code for creating the catch-all API route handler\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/solid.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/routes/api/[...remult].ts\n\nimport { api } from '../../api.js'\n\nexport const { POST, PUT, DELETE, GET } = api\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Decorators for Remult\nDESCRIPTION: Configuration update for tsconfig.json to enable experimental decorators, which are required for Remult's entity class decorators to work properly.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true // [!code ++]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Development Servers\nDESCRIPTION: Commands to start the Vite development server and the Node.js backend server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Using Remult as a SolidStart Hook\nDESCRIPTION: Shows how to define remult as a SolidStart hook to make it available throughout the application using sequence from @sveltejs/kit/hooks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks.server.ts\nimport type { Handle } from '@sveltejs/kit'\nimport { sequence } from '@sveltejs/kit/hooks'\nimport { api as handleRemult } from './server/api'\n\nexport const handle = sequence(\n  // Handle remult server side\n  handleRemult,\n)\n```\n\n----------------------------------------\n\nTITLE: Additional Entity Operations with Active Record Pattern (TypeScript)\nDESCRIPTION: Demonstrates additional operations possible with the Active Record pattern, including deleting a record and checking if a record is new. These operations are simplified by the methods provided by EntityBase.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/active-record.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Deleting a record\nawait person.delete()\n\n// Checking if the record is new\nif (person.isNew()) {\n  // Perform a specific action\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Vue Project\nDESCRIPTION: Command to initialize a new Vue project using npm, which prompts for project configuration options.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm init -y vue@latest\n```\n\n----------------------------------------\n\nTITLE: Using SQL Filter in Frontend Component\nDESCRIPTION: Shows how to apply the SQL-based custom filter in a frontend component to fetch orders from specific cities. Demonstrates combining SQL filters with standard filters.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/4-filtering/3-fitler-based-on-relation-sql/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await repo.find({\n  where: {\n    $and: [\n      Order.fromCity('New York'),\n      { amount: { $gt: 5 } }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing User Role Assignment in Authentication Controller\nDESCRIPTION: This snippet modifies the AuthController to assign the 'admin' role to the user 'Jane'. It shows how to set up user roles during authentication and store them in the session.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/AuthController.ts\n\nconst validUsers = [{ name: \"Jane\", admin: true }, { name: \"Steve\" }];\n\nexport class AuthController {\n  @BackendMethod({ allowed: true })\n  static async signIn(name: string) {\n    const user = validUsers.find((user) => user.name === name);\n    if (user) {\n      remult.user = {\n        id: user.name,\n        name: user.name,\n        roles: user.admin ? [\"admin\"] : [],\n      };\n      remult.context.request!.session![\"user\"] = remult.user;\n      return remult.user;\n    } else {\n      throw Error(\"Invalid user, try 'Steve' or 'Jane'\");\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Better-SQLite3 Data Provider in TypeScript\nDESCRIPTION: Defines BetterSqlite3DataProvider that extends SqliteCoreDataProvider for better-sqlite3 library integration. Also includes a BetterSqlite3SqlResult class implementing the SqlResult interface for handling query results.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class BetterSqlite3DataProvider extends SqliteCoreDataProvider {\n  constructor(db: Database)\n}\nexport declare class BetterSqlite3SqlResult implements SqlResult {\n  private result\n  constructor(result: any[])\n  rows: any[]\n  getColumnKeyInResultForIndexInSelect(index: number): string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Backend Method without Decorators in Remult\nDESCRIPTION: Demonstrates how to create a static backend method 'setAll' for the TasksController using Remult's describeBackendMethods function instead of decorators. The method updates the completed status of all tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/working-without-decorators.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BackendMethod, describeBackendMethods, repo } from \"remult\";\nimport { Task } from \"./Task\";\n\nexport class TasksController {\n  static async setAll(completed: boolean) {\n    const taskRepo = repo(Task);\n    for (const task of await taskRepo.find()) {\n      await taskRepo.save({ ...task, completed });\n    }\n  }\n}\ndescribeBackendMethods(TasksController, {\n  setAll: { allowed: \"admin\" }\n})\n```\n\n----------------------------------------\n\nTITLE: Problematic Server-Only Code Implementation in TypeScript\nDESCRIPTION: An example showing a direct implementation using the Node.js fs module in a Remult backend method, which will cause compilation errors during frontend bundling.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-server-only-packages.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from 'fs';\n.....\n@BackendMethod({allowed:true})\nstatic async updatePriceOnBackend(priceToUpdate:number,remult?:Remult){\n  let products = await remult.repo(Products).find();\n  for (const p of products) {\n      p.price.value += priceToUpdate;\n      await p.save();\n  }\n  fs.appendFileSync('./logs/log.txt', new Date() + \" \" + remult.user.name + \" update price\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Koa Server Integration\nDESCRIPTION: Setting up Remult middleware in a Koa server application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as koa from 'koa'\nimport * as bodyParser from 'koa-bodyparser'\nimport { createRemultServer } from 'remult/server'\n\nconst app = new koa()\n\napp.use(bodyParser())\n\nconst api = createRemultServer({\n  entities: [\n    /* entity types */\n  ],\n})\n\napp.use(async (ctx, next) => {\n  const r = await api.handle(ctx.request)\n  if (r) {\n    ctx.response.body = r.data\n    ctx.response.status = r.statusCode\n  } else return await next()\n})\n\napp.listen(3000, () => {})\n```\n\n----------------------------------------\n\nTITLE: Opening Railway Project in Browser\nDESCRIPTION: Command to open the Railway project in a web browser for further configuration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/deployment.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrailway open\n```\n\n----------------------------------------\n\nTITLE: Defining ValueListFieldType in Remult Express (TypeScript)\nDESCRIPTION: Shows how to define a ValueListFieldType function for handling enumerated values in Remult, with options for customizing field behavior.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function ValueListFieldType<\n  valueType extends ValueListItem = ValueListItem,\n>(\n  ...options: (\n    | ValueListFieldOptions<any, valueType>\n    | ((options: FieldOptions<any, valueType>, remult: Remult) => void)\n  )[]\n): (type: ClassType<valueType>, context?: any) => void\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders without Custom Filters in TypeScript\nDESCRIPTION: This snippet demonstrates how to filter orders based on status and creation year without using custom filters. It illustrates the verbose and repetitive nature of this approach.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Order).find({\n  where: {\n    status: ['created', 'confirmed', 'pending', 'blocked', 'delayed'],\n    createdAt: {\n      $gte: new Date(year, 0, 1),\n      $lt: new Date(year + 1, 0, 1),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON File-Based Storage Classes\nDESCRIPTION: Defines classes for JSON-based entity storage and data providers that use the file system for persistence. These implementations provide simple file-based alternatives to database storage for development or lightweight applications.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class JsonEntityFileStorage implements JsonEntityStorage {\n  private folderPath\n  getItem(entityDbName: string): string | null\n  setItem(entityDbName: string, json: string): void\n  constructor(folderPath: string)\n}\nexport declare class JsonFileDataProvider extends JsonDataProvider {\n  constructor(folderPath: string)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Function-based Allowed Value in TypeScript\nDESCRIPTION: Illustrates using a custom function to set the Allowed value in Remult, checking for a specific user name.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/allowed.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{ allowApiRead: () => remult.user.name === 'superman' } }\n```\n\n----------------------------------------\n\nTITLE: Setting NextAuth Secret Environment Variable\nDESCRIPTION: Creates a .env.local file with a NEXTAUTH_SECRET environment variable required for NextAuth.js JWT encryption.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n// .env.local\n\nNEXTAUTH_SECRET=something-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult Express API Server\nDESCRIPTION: Sets up the Express middleware with Remult, registering the Task entity and enabling admin interface.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/entities.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultExpress } from \"remult/remult-express\"\nimport { Task } from \"../shared/Task.js\"\n\nexport const api = remultExpress({\n  entities: [Task],\n  admin: true\n})\n```\n\n----------------------------------------\n\nTITLE: Not Equal Filter in Remult\nDESCRIPTION: Filters records where a field does not equal a specific value. Shows two equivalent syntaxes: using the \"!=\" operator or the $ne (not equal) operator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwhere:{ status:{ \"!=\":1 }}\n//or\nwhere:{ status:{ $ne:1 }}\n```\n\n----------------------------------------\n\nTITLE: Updated Server Load Function with Transport\nDESCRIPTION: Modified server load function that no longer needs manual entity serialization when using the Universal hooks transport feature.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { repo } from 'remult'\nimport type { PageServerLoad } from './$types'\nimport { Task } from '../demo/todo/Task'\n\nexport const load = (async () => {\n  // const tasks = repo(Task).toJson(await repo(Task).find()) // [!code --]\n  const tasks = await repo(Task).find()\n  return {\n    tasks,\n  }\n}) satisfies PageServerLoad\n```\n\n----------------------------------------\n\nTITLE: Registering TasksController in Remult Express API Configuration\nDESCRIPTION: This code snippet demonstrates how to register the TasksController in the Remult Express API configuration. It adds the controller to the list of available controllers for API calls.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/6-backend-methods/2-refactor-to-backend/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const api = remultExpress({\n  entities: [Task],\n  controllers: [TasksController],\n  initApi: async () => {\n    //...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Pagination with Page and Limit Parameters\nDESCRIPTION: Example URL demonstrating how to implement pagination by specifying both page number and items per page\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/rest-api.md#2025-04-16_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nhttps://mySite.com/api/products?_limit=5&_page=3\n```\n\n----------------------------------------\n\nTITLE: Setting up API Proxy in Vite\nDESCRIPTION: Configuration to proxy API requests from Vite dev server to the backend API server running on a different port\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/react.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\n\n//...\nexport default defineConfig({\n  plugins: [react()],\n  server: { proxy: { \"/api\": \"http://localhost:3002\" } },\n  esbuild: {\n    tsconfigRaw: {\n      compilerOptions: {\n        experimentalDecorators: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative ValueListFieldType Decorator Usage for TypeScript Compatibility\nDESCRIPTION: Works around a TypeScript bug by applying the ValueListFieldType decorator after class definition for certain TypeScript versions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TaskStatus {\n  static open = new TaskStatus()\n  static closed = new TaskStatus()\n\n  id!: string\n  caption!: string\n  constructor() {}\n}\nValueListFieldType()(TaskStatus)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Remult Development Environment\nDESCRIPTION: Basic commands to install dependencies, build the project, and run tests\nSOURCE: https://github.com/remult/remult/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run build\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Enabling Admin UI in Remult Solid Start Configuration\nDESCRIPTION: Updates the Remult Solid Start configuration to enable the Admin UI by setting the admin option to true. This allows access to the Admin UI at /api/admin.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/entities.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultSolidStart } from 'remult/remult-next'\nimport { Task } from './shared/Task'\n\nexport const api = remultSolidStart({\n  entities: [Task],\n  admin: true, // Enable the Admin UI\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Decorators in Vite\nDESCRIPTION: Configuration to enable TypeScript decorators in Vite by modifying the vite.config.ts file\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/react.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\n\n// ...\nexport default defineConfig({\n  plugins: [react()],\n  esbuild: {\n    tsconfigRaw: {\n      compilerOptions: {\n        experimentalDecorators: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server for the Starter Project\nDESCRIPTION: Command to start the development server using the 'dev' npm script defined in the starter project.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Registering TasksController in Remult Express API Configuration\nDESCRIPTION: Code snippet showing how to register the TasksController in the Remult Express configuration to expose its backend methods as API endpoints.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/backend-methods.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TasksController } from \"../shared/TasksController.js\"\n\nexport const api = remultExpress({\n  //...\n  controllers: [TasksController]\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Task Display with Editable Title\nDESCRIPTION: This snippet shows how to modify the task display to include an editable input field for the title and a save button. The input is bound to the task's title property for two-way data binding.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/crud.md#2025-04-16_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n{#each tasks as task}\n\t<div>\n\t\t<input\n\t\t\ttype=\"checkbox\"\n\t\t\tchecked={task.completed}\n\t\t\toninput={(e) => setCompleted(task, e.currentTarget.checked)}\n\t\t/>\n\t\t<input name=\"title\" bind:value={task.title} />\n\t\t<button onclick={(e) => saveTask(e, task)}>Save</button>\n\t</div>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Nuxt Integration for Remult in TypeScript\nDESCRIPTION: Defines the remultNuxt function for integrating Remult with Nuxt framework. Returns a RemultNuxtServer that combines the RemultServerCore with Nuxt-specific event handling.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remultNuxt(\n  options: RemultServerOptions<H3Event>,\n): RemultNuxtServer\n//[ ] RemultServerOptions from ./server/index.js is not exported\nexport type RemultNuxtServer = RemultServerCore<H3Event> &\n  ((event: H3Event) => Promise<any>) & {\n    withRemult: RemultServer<H3Event>[\"withRemultAsync\"]\n  }\n//[ ] RemultServerCore from ./server/index.js is not exported\n//[ ] RemultServer from ./server/index.js is not exported\n```\n\n----------------------------------------\n\nTITLE: Disabling Task Filtering with Comments in Remult\nDESCRIPTION: Shows how to comment out the filtering clause to retrieve all tasks instead of only completed ones. This demonstrates how to temporarily disable a filter while keeping the code for future reference.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/sorting-filtering.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nngOnInit() {\n  this.taskRepo.find({\n    limit: 20,\n    orderBy: { createdAt:\"asc\" },\n    //where: { completed: true }\n  }).then((items) => (this.tasks = items));\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Sort Fields in TypeScript\nDESCRIPTION: Shows how to sort data by multiple fields using orderBy parameter.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_remult.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Products).find({ orderBy: { price: \"desc\", name: \"asc\" }})\n```\n\n----------------------------------------\n\nTITLE: Converting Value Type to Database Format\nDESCRIPTION: Example of converting a Date object to an ISO string for database storage.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_valueconverter.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntoDb: val => val?.toISOString()\n```\n\n----------------------------------------\n\nTITLE: Converting Input Value to Field Format\nDESCRIPTION: Illustrates how to use the fromInput method to convert an input value back to the field's native format.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_fieldmetadata.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.dateOnly()\nbirthDate = new Date(1976,5,16)\n//...\nperson.birthDate = repo.fields.birthDate.fromInput(personFormState) // will return Date\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult API\nDESCRIPTION: Code for initializing the Remult API in a SvelteKit project. Creates a reusable API instance using the remultSveltekit function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { remultSveltekit } from 'remult/remult-sveltekit'\n\nexport const api = remultSveltekit({})\n```\n\n----------------------------------------\n\nTITLE: Testing API Validation with cURL\nDESCRIPTION: Shows how to test server-side validation by sending a POST request to the tasks API endpoint with an invalid empty title.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:3000/api/tasks -d \"{\\\"title\\\": \\\"\\\"}\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Server Configuration\nDESCRIPTION: TypeScript configuration for the server including decorator support and module settings\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/express.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\",\n    \"module\": \"nodenext\"\n  },\n  \"include\": [\"src/server/**/*\", \"src/shared/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Utilities for Remult in TypeScript\nDESCRIPTION: Provides functions for generating and executing database migrations with Remult. Includes types for migration utilities and configuration options for migration generation and execution.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function generateMigrations(options: {\n  entities: any[]\n  dataProvider:\n    | DataProvider\n    | Promise<DataProvider>\n    | (() => Promise<DataProvider | undefined>)\n  migrationsFolder?: string\n  snapshotFile?: string\n  migrationsTSFile?: string\n  endConnection?: boolean\n}): Promise<boolean>\n//[ ] DataProvider from TBD is not exported\nexport declare function migrate(options: {\n  migrations: Migrations\n  dataProvider:\n    | DataProvider\n    | Promise<DataProvider>\n    | (() => Promise<DataProvider | undefined>)\n  migrationsTable?: string\n  endConnection?: boolean\n  beforeMigration?: (info: { index: number }) => void | Promise<void>\n  afterMigration?: (info: {\n    index: number\n    duration: number\n  }) => void | Promise<void>\n}): Promise<void>\nexport type Migrations = Record<\n  number,\n  (utils: MigrationUtils) => Promise<unknown>\n>\nexport type MigrationUtils = {\n  sql(sql: string): Promise<unknown>\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Expression Fields\nDESCRIPTION: Example showing how to define a calculated field based on an SQL expression rather than a physical database column, useful for derived values.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.integer({\n  sqlExpression:e=> 'length(title)'\n})\ntitleLength = 0;\n@Fields.string()\ntitle='';\n```\n\n----------------------------------------\n\nTITLE: Importing TodoComponent in AppComponent\nDESCRIPTION: Updates the AppComponent to import and include necessary Angular modules including the TodoComponent, HttpClientModule, and FormsModule.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/entities.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//src/app/app.component.ts\n\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterOutlet } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { TodoComponent } from './todo/todo.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterOutlet,\n    HttpClientModule,\n    FormsModule,\n    TodoComponent,\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css',\n})\nexport class AppComponent {\n  title = 'remult-angular-todo';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Member Type Utilities\nDESCRIPTION: A collection of utility types for working with entity members in TypeScript. These types help filter and transform entity properties based on their types, supporting features like selective field inclusion and specialized handling of numeric and object properties.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type MembersOnly<T> = {\n  [K in keyof Omit<T, keyof EntityBase> as T[K] extends Function\n    ? never\n    : K]: T[K]\n}\nexport type MembersToInclude<T> = {\n  [K in keyof ObjectMembersOnly<T>]?:\n    | boolean\n    | (NonNullable<T[K]> extends Array<any>\n        ? FindOptions<NonNullable<T[K]>[number]>\n        : FindFirstOptions<NonNullable<T[K]>>)\n}\nexport type NumericKeys<T> = {\n  [K in keyof T]: T[K] extends number | undefined | null ? K : never\n}[keyof T]\nexport type ObjectMembersOnly<T> = MembersOnly<{\n  [K in keyof Pick<\n    T,\n    {\n      [K in keyof T]: T[K] extends object | undefined | null\n        ? T[K] extends Date | undefined | null\n          ? never\n          : K\n        : never\n    }[keyof T]\n  >]: T[K]\n}>\n```\n\n----------------------------------------\n\nTITLE: FilterConsumer Interface Definition\nDESCRIPTION: Interface defining the methods that a filter consumer must implement. These methods handle various filter conditions like equality, comparison, pattern matching, and custom filters.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FilterConsumer {\n  or(orElements: Filter[]): void\n  not(filter: Filter): void\n  isEqualTo(col: FieldMetadata, val: any): void\n  isDifferentFrom(col: FieldMetadata, val: any): void\n  isNull(col: FieldMetadata): void\n  isNotNull(col: FieldMetadata): void\n  isGreaterOrEqualTo(col: FieldMetadata, val: any): void\n  isGreaterThan(col: FieldMetadata, val: any): void\n  isLessOrEqualTo(col: FieldMetadata, val: any): void\n  isLessThan(col: FieldMetadata, val: any): void\n  containsCaseInsensitive(col: FieldMetadata, val: any): void\n  notContainsCaseInsensitive(col: FieldMetadata, val: any): void\n  startsWithCaseInsensitive(col: FieldMetadata, val: any): void\n  endsWithCaseInsensitive(col: FieldMetadata, val: any): void\n  isIn(col: FieldMetadata, val: any[]): void\n  custom(key: string, customItem: any): void\n  databaseCustom(databaseCustom: any): void\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required Validation to Task Entity in TypeScript\nDESCRIPTION: This snippet shows how to add required validation to the 'title' field in the Task entity using Remult's @Fields.string decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/1-required/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Task {\n  @Fields.uuid()\n  id = ''\n\n  @Fields.string({\n    required: true,\n  })\n  title = ''\n\n  //....\n}\n```\n\n----------------------------------------\n\nTITLE: FindFirstOptions Interface Definition\nDESCRIPTION: Interface that extends FindOptionsBase and FindFirstOptionsBase to define options for finding the first entity that matches criteria. It combines base find options with first-specific options.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FindFirstOptions<entityType>\n  extends FindOptionsBase<entityType>,\n    FindFirstOptionsBase<entityType> {}\n```\n\n----------------------------------------\n\nTITLE: Installing Remult Package\nDESCRIPTION: Command to install the Remult package via npm. The same package is used for both frontend and backend.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install remult\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Remult Angular Todo Project\nDESCRIPTION: This snippet shows how to download the source code for the Remult Angular Todo project using npx degit, navigate to the project directory, and install dependencies.\nSOURCE: https://github.com/remult/remult/blob/main/examples/angular-todo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit remult/remult/examples/angular-todo angular-todo\ncd angular-todo\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Initializing Railway Project\nDESCRIPTION: Command to initialize a new Railway project from the terminal.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult with sql.js Data Provider\nDESCRIPTION: Setup code to configure Remult with sql.js as the data provider. This creates an in-memory SQLite database by initializing the SQL.js engine and connecting it to Remult through SqlJsDataProvider.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/sqljs.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult'\nimport initSqlJs from 'sql.js'\nimport { SqlJsDataProvider } from 'remult/remult-sql-js'\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase(\n      new SqlJsDataProvider(initSqlJs().then((SQL) => new SQL.Database())),\n    ),\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Sign-Out Functionality to AuthController\nDESCRIPTION: This code adds a sign-out method to the AuthController that clears the user session data, effectively logging the user out of the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@BackendMethod({ allowed: true })\nstatic async signOut() {\n  remult.context.request!.session!['user'] = undefined\n  return undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Return Values in TypeScript\nDESCRIPTION: Example of how to handle potentially undefined return values from findFirst, findOne, and findId methods in Remult after API changes for TypeScript 5.4 compatibility.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet p = await repo(Person).findId(7) // p will be Person | undefined in the new version\nlet q = (await repo(Person).findId(7))! // p will be Person\n```\n\n----------------------------------------\n\nTITLE: Integrating Remult with Svelte 5 Reactivity\nDESCRIPTION: Layout component code that initializes Remult to work with Svelte 5's reactivity system. This enables Remult entities to participate in Svelte's reactivity system.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Remult } from 'remult'\n  import { createSubscriber } from 'svelte/reactivity'\n\n  // To be done once in the application.\n  function initRemultSvelteReactivity() {\n    // Auth reactivity (remult.user, remult.authenticated(), ...)\n    {\n      let update = () => {}\n      let s = createSubscriber((u) => {\n        update = u\n      })\n      remult.subscribeAuth({\n        reportObserved: () => s(),\n        reportChanged: () => update(),\n      })\n    }\n\n    // Entities reactivity\n    {\n      Remult.entityRefInit = (x) => {\n        let update = () => {}\n        let s = createSubscriber((u) => {\n          update = u\n        })\n        x.subscribe({\n          reportObserved: () => s(),\n          reportChanged: () => update(),\n        })\n      }\n    }\n  }\n  initRemultSvelteReactivity()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Server for Remult\nDESCRIPTION: Command to run the documentation locally for development and preview\nSOURCE: https://github.com/remult/remult/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Implementing setAllCompleted function in React Component\nDESCRIPTION: This client-side implementation iterates through all tasks and updates each one's completed status with individual API calls. This approach works but can be inefficient with many tasks.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/backend-methods.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function setAllCompleted(completed: boolean) {\n  for (const task of await taskRepo.find()) {\n    await taskRepo.save({ ...task, completed })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Sort Criteria in TypeScript\nDESCRIPTION: Generates a unique Sort instance based on the provided Sort and entity metadata. This ensures that the sort criteria result in a unique ordering of entities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_sort.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateUniqueSort(entityMetadata: EntityMetadata, orderBy: Sort): Sort\n```\n\n----------------------------------------\n\nTITLE: Formatting Display Value\nDESCRIPTION: Example of converting a Date object to a localized date string for display purposes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_valueconverter.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndisplayValue: val => val?.toLocaleDateString()\n```\n\n----------------------------------------\n\nTITLE: Testing API Validation with cURL Command\nDESCRIPTION: A shell command to test server-side validation by sending a POST request to the tasks API with an empty title, which should trigger the validation error and return an HTTP error response.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i http://localhost:3002/api/tasks -d \"{\\\"title\\\": \\\"\\\"}\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Hono Integration for Remult\nDESCRIPTION: TypeScript declarations for Hono framework integration with Remult server, including context types and server configuration.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remultHono(\n  options: RemultServerOptions<Context<Env, \"\", BlankInput>>,\n): RemultHonoServer\n\nexport type RemultHonoServer = Hono &\n  RemultServerCore<Context<Env, \"\", BlankInput>> & {\n    withRemult: <T>(\n      c: Context<Env, \"\", BlankInput>,\n      what: () => Promise<T>,\n    ) => Promise<T>\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Connection for Production\nDESCRIPTION: Updates the API server module to use a PostgreSQL database connection string from the DATABASE_URL environment variable when available, or fall back to local JSON files when not provided.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/api.ts\n\n//...\nconst DATABASE_URL = process.env[\"DATABASE_URL\"];\n\nexport const api = remultExpress({\n dataProvider: DATABASE_URL\n   ? createPostgresDataProvider({ connectionString: DATABASE_URL })\n   : undefined,\n   //...\n })\n```\n\n----------------------------------------\n\nTITLE: Defining FieldRef Class in TypeScript\nDESCRIPTION: The FieldRef class represents a reference to a field in an entity. It provides methods for subscribing to changes, validating, and accessing various properties of the field.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_fieldref.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FieldRef {\n  subscribe(listener: Function): void;\n  valueChanged(): boolean;\n  load(): Promise<any | null>;\n  valueIsNull(): boolean;\n  originalValueIsNull(): boolean;\n  validate(): void;\n  error: string | undefined;\n  displayValue: string;\n  value: any;\n  originalValue: any;\n  inputValue: any;\n  entityRef: EntityRef;\n  container: any;\n  metadata: FieldMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Server Validation with cURL\nDESCRIPTION: Shows how to test server-side validation by sending a POST request with an invalid empty title field using cURL.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:3000/api/tasks -d \"{\\\"title\\\": \\\"\\\"}\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Using Remult Upsert Method for Single Entity Operations\nDESCRIPTION: Example of using the upsert method for a single entity, which either updates an existing entity if found based on the where condition, or creates a new one if not found.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Single entity upsert\nawait taskRepo.upsert({\n  where: { title: 'task a' },\n  set: { completed: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Role-based Allowed Value with Constant in TypeScript\nDESCRIPTION: Illustrates setting a role-based permission using a constant for the Allowed data type in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/allowed.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  allowApiRead: Roles.admin\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Environment Variables\nDESCRIPTION: Setting up the DATABASE_URL environment variable in the .env.local file to store the PostgreSQL connection string.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/database.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n// .env.local\n\n...\nDATABASE_URL=your connection string\n```\n\n----------------------------------------\n\nTITLE: Calling Backend Method with Remult in TypeScript\nDESCRIPTION: Demonstrates how to use remult.call to invoke a backend method. This example shows calling a static method 'setAll' on the TasksController.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nawait remult.call(TasksController.setAll, undefined, true);\n```\n\n----------------------------------------\n\nTITLE: Constructing a Sort Instance in TypeScript\nDESCRIPTION: Creates a new Sort instance with the provided sort segments. The segments define the criteria for sorting.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_sort.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(segments: SortSegment[])\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Backend with Session Support\nDESCRIPTION: Sets up Express server with cookie-session middleware and configures Remult API with authentication support.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/2-user-authentication/content.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport session from 'cookie-session'\nimport { AuthController } from '../shared/AuthController'\n\n//...\n\nexport const app = express()\n\napp.enable('trust proxy')\napp.use(\n  session({\n    signed: false,\n  }),\n)\n\nexport const api = remultExpress({\n  entities: [Task],\n  controllers: [TasksController, AuthController],\n  getUser: (request) => request.session?.['user'],\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Delete Button Using Remult Authorization\nDESCRIPTION: Demonstrates how to conditionally render delete buttons for tasks based on user permissions using taskRepo.metadata.apiDeleteAllowed(). The delete button is only shown if the user has permission to delete the specific task.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/4-role-based-authorization-on-frontend/content.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  tasks.map((task) => {\n    return (\n      <div key={task.id}>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          onChange={(e) => setCompleted(task, e.target.checked)}\n        />\n        {task.title}\n        {taskRepo.metadata.apiDeleteAllowed(task) && (\n          <button\n            onClick={() => deleteTask(task)}\n            style={{ marginLeft: 'auto' }}\n          >\n            Delete\n          </button>\n        )}\n      </div>\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication to Backend Method\nDESCRIPTION: Secures the setAllCompleted backend method with authentication requirement\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/auth.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@BackendMethod({ allowed: Allow.authenticated })\n```\n\n----------------------------------------\n\nTITLE: Example Validation Error Response in JSON\nDESCRIPTION: This snippet shows the structure of a validation error response returned by Remult when a required field is empty.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/1-required/content.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Title: Should not be empty\",\n  \"modelState\": {\n    \"title\": \"Should not be empty\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FilterPreciseValues Type Definition\nDESCRIPTION: Type definition for the object returned by getPreciseValues methods. It maps entity properties to arrays of their precise values as inferred from filter conditions.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FilterPreciseValues<entityType> = {\n  [Properties in keyof MembersOnly<entityType>]?: Partial<\n    entityType[Properties]\n  >[]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Remult Server Middleware with Hapi\nDESCRIPTION: Code for setting up Remult middleware in a Hapi application using the remultHapi function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Plugin, server } from '@hapi/hapi'\nimport { remultHapi } from 'remult/remult-hapi'\n\n(async () => {\n  const hapi = server({ port: 3000 })\n\n  await hapi.register(remultHapi({})) // [!code highlight]\n\n  hapi.start()\n})()\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response Structure\nDESCRIPTION: Shows the structure of JSON response when fetching customers with included order data.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"ik68p3oxqg1ygdffpryqwkpw\",\n    \"name\": \"Fay, Ebert and Sporer\",\n    \"city\": \"London\",\n    \"orders\": [\n      {\n        \"id\": \"m7m3xqyx4kwjaqcd0cu33q8g\",\n        \"amount\": 15\n      },\n      {\n        \"id\": \"rbkcrz6nc45zn4xfxmjise21\",\n        \"amount\": 10\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Server TypeScript Configuration\nDESCRIPTION: TypeScript configuration for building the server-side code with CommonJS module system and appropriate compiler options.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"esModuleInterop\": true,\n    \"noEmit\": false,\n    \"outDir\": \"dist\",\n    \"skipLibCheck\": true,\n    \"rootDir\": \"src\"\n  },\n  \"include\": [\"src/server/index.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Server Error for Non-Serializable Remult Entities\nDESCRIPTION: Error message that occurs when returning Remult entities directly from a SvelteKit server load function, highlighting the serialization issue.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nError: Data returned from `load` while rendering / is not serializable:\nCannot stringify arbitrary non-POJOs (data.tasks[0])\n```\n\n----------------------------------------\n\nTITLE: Server-Side Loading with Remult Entity Serialization\nDESCRIPTION: Code for properly handling Remult entities in SvelteKit server load functions. This uses toJson() to serialize entities before returning them from the server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { repo } from 'remult'\nimport type { PageServerLoad } from './$types'\nimport { Task } from '../demo/todo/Task'\n\nexport const load = (async () => {\n  const tasks = repo(Task).toJson(await repo(Task).find())\n  return {\n    tasks,\n  }\n}) satisfies PageServerLoad\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Component Imports\nDESCRIPTION: Imports Vue components for the Example and Icon components to be used within the page. This script is used at the top of the Vue template to make these components available.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/example-apps.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Example from '../components/Example.vue'\n  import Icon from '../components/Icon.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Set All Completed/Uncompleted Buttons to React Component (TSX)\nDESCRIPTION: This snippet demonstrates how to add buttons to a React component that call the setAllCompleted function with true or false to set all tasks as completed or uncompleted.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/backend-methods.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n  <button onClick={() => setAllCompleted(true)}>Set All Completed</button>\n  <button onClick={() => setAllCompleted(false)}>Set All Uncompleted</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Task Form UI Implementation in SolidJS\nDESCRIPTION: Adds a form with an input field and an Add button to create new tasks. The form uses the addTask function when submitted and maintains the newTaskTitle state.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/crud.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// src/components/Todo.tsx\n\nreturn (\n  <main>\n    <form onSubmit={addTask}>\n      <input\n        value={newTaskTitle()}\n        placeholder=\"What needs to be done?\"\n        onInput={(e) => setNewTaskTitle(e.currentTarget.value)}\n      />\n      <button>Add</button>\n    </form>\n    <For each={tasks}>\n      {(task) => {\n        return (\n          <div>\n            <input type=\"checkbox\" checked={task.completed} />\n            {task.title}\n          </div>\n        )\n      }}\n    </For>\n  </main>\n)\n```\n\n----------------------------------------\n\nTITLE: Reversing Sort Order in TypeScript\nDESCRIPTION: Creates a new Sort instance with the reversed sort order of the current criteria. This method does not modify the original Sort instance.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_sort.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreverse(): Sort\n```\n\n----------------------------------------\n\nTITLE: Count Action Request in REST API\nDESCRIPTION: Example URL demonstrating how to get the count of products with price greater than or equal to 10\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://mySite.com/api/products?price.gte=10&__action=count\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Script for Server-Side Transpilation\nDESCRIPTION: Updates the package.json build script to include transpilation of server-side TypeScript code to JavaScript using tsc with a specific tsconfig file.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n\"build\": \"run-p type-check \\\"build-only {@}\\\" -- && tsc -p tsconfig.server.json\"\n```\n\n----------------------------------------\n\nTITLE: Fastify Integration for Remult\nDESCRIPTION: TypeScript declarations for Fastify framework integration with Remult server, including plugin callback types and server configuration.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remultFastify(\n  options: RemultServerOptions<FastifyRequest>,\n): RemultFastifyServer\n\nexport type RemultFastifyServer = FastifyPluginCallback &\n  RemultServerCore<FastifyRequest> & {\n    withRemult: RemultServer<FastifyRequest>[\"withRemultAsync\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting EntityOptions as an Object in TypeScript\nDESCRIPTION: This snippet shows how to set EntityOptions as an object when using the @Entity decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entity.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// as an object\n@Entity(\"tasks\",{ allowApiCrud:true })\n```\n\n----------------------------------------\n\nTITLE: Registering Task Entity with Remult in API Configuration\nDESCRIPTION: Registers the Task entity with Remult by adding it to the entities array in the remultSolidStart function options. This sets up the API endpoints for the Task entity.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/entities.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultSolidStart } from \"remult/remult-solid-start\"\nimport { Task } from \"./shared/Task\"\n\nexport const api = remultSolidStart({\n  entities: [Task]\n})\n```\n\n----------------------------------------\n\nTITLE: Using valueValidator Helper Function for Field Validation\nDESCRIPTION: Demonstrates the use of the valueValidator helper function to create a field validator that checks if a string value meets a minimum length requirement. This approach simplifies validation implementation.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n  validate: valueValidator(value => value.length > 5)\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting Remult to Bun SQLite Database\nDESCRIPTION: Code for connecting Remult to a SQLite database using Bun's built-in SQLite implementation (bun:sqlite).\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { remultExpress } from 'remult/remult-express'\nimport { SqlDatabase } from 'remult' // [!code highlight]\nimport { Database } from 'bun:sqlite' // [!code highlight]\nimport { BunSqliteDataProvider } from 'remult/remult-bun-sqlite' // [!code highlight]\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new SqlDatabase( // [!code highlight]\n      new BunSqliteDataProvider(new Database('./mydb.sqlite')), // [!code highlight]\n    ), // [!code highlight]\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Using dbNamesOf with Table Names in SQL Queries\nDESCRIPTION: Demonstrates the difference between using dbNamesOf with and without the tableNames option for SQL query construction. The tableNames option prefixes each field with the table name for improved query clarity.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await dbNamesOf(Order)\nreturn `(select count(*) from ${orders} where ${orders}.${orders.id}=1)`\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await dbNamesOf(Order, { tableNames:true })\nreturn `(select count(*) from ${orders} where ${orders.id}=1)`\n```\n\n----------------------------------------\n\nTITLE: Creating Database Index in SQL\nDESCRIPTION: Example of creating an index on a table column using raw SQL with dynamic table names\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/running-sql-on-the-server.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = await dbNamesOf(Task)\nconst sql = SqlDatabase.getDb()\nawait sql.execute(`CREATE INDEX idx_task_title ON ${tasks}(${tasks.title});`)\n```\n\n----------------------------------------\n\nTITLE: Mapping Existing Database Column to New Field Name\nDESCRIPTION: This snippet shows how to use the dbName property to map a new field name (customerId) to an existing database column name (customer). This is useful when working with existing data that has different column names.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/1-relations/3-id-based-relations/content.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.integer({ dbName: 'customer' })\ncustomerId = 0\n```\n\n----------------------------------------\n\nTITLE: Checking API Delete Permission\nDESCRIPTION: Example showing how to check if the current user has permission to delete an entity instance before displaying a delete button.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entitymetadata.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (repo(Task).metadata.apiDeleteAllowed(task)){\n  // display delete button\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Question Dialog Hook\nDESCRIPTION: Implementation of a custom useQuestion hook that creates reusable confirmation dialogs. This hook wraps the useDialog hook to provide a simplified interface for confirmation dialogs.\nSOURCE: https://github.com/remult/remult/blob/main/examples/shadcn-react-table/README.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function useQuestion() {\n  const dialog = useDialog()\n  return (question: string) =>\n    dialog(\n      (resolve) => (\n        <div>\n          <h2>Are you sure?</h2>\n          <button onClick={() => resolve(true)}>Yes</button>\n        </div>\n      ),\n      false, // default result\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Allow Class for Authentication in TypeScript\nDESCRIPTION: This code defines the Allow class which provides static methods for authentication in Remult. It includes predefined permission methods like 'everyone' and 'authenticated'.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class Allow {\n  static everyone: () => boolean\n  static authenticated: (...args: any[]) => any\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Decorators\nDESCRIPTION: Configuration for enabling TypeScript decorators in SolidStart app config\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/index.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// app.config.ts\n\nimport { defineConfig } from \"@solidjs/start/config\"\n\nexport default defineConfig({\n  //@ts-ignore\n  solid: {\n    babel: {\n      plugins: [\n         [\"@babel/plugin-proposal-decorators\", { version: \"legacy\" }],\n         [\"@babel/plugin-transform-class-properties\"],\n       ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Filter to Consumer\nDESCRIPTION: Internal method that applies the filter to a consumer. This is used to translate filter conditions to the format expected by various data providers.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n__applyToConsumer(add: FilterConsumer): void\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Database Column Name\nDESCRIPTION: Illustrates how to use the dbName option to specify a custom database column name for a field.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_fieldmetadata.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({ dbName: 'userName'})\nuserName=''\n```\n\n----------------------------------------\n\nTITLE: Converting Entity Filter to DataProvider Filter\nDESCRIPTION: Shows the fromEntityFilter method that converts an EntityFilter to a Filter that can be used by the DataProvider. This method is primarily used internally by the Remult library.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_filter.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Assuming `Task` is an entity class and `taskFilter` is an EntityFilter\nconst filter = Filter.fromEntityFilter(Task, taskFilter);\n// `filter` can now be used with the DataProvider\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres Node Module for Remult\nDESCRIPTION: Installing the 'pg' package which provides Node.js connectivity to PostgreSQL databases for use with Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/database.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i pg\n```\n\n----------------------------------------\n\nTITLE: Converting Database Format to Value Type\nDESCRIPTION: Example of converting a database value to a Date object.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_valueconverter.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfromDb: val => new Date(val)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Lists the available documentation files and their purposes, including basic listing, complete documentation, and full documentation with tutorials.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/llms.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Docs for LLMs\n\nWe support the [llms.txt](https://llmstxt.org/) convention for making documentation available to large language models and the applications that make use of them.\n\nCurrently, we have the these different levels:\n\n- [/llms.txt](/llms.txt) — a listing of the available files\n- [/llms-small.txt](/llms-small.txt) — complete documentation for remult\n- [/llms-full.txt](/llms-full.txt) — complete documentation for remult with all tutorials _(including the interactive one)_\n```\n\n----------------------------------------\n\nTITLE: Vue Main Application Entry Update\nDESCRIPTION: Update to the main Vue application entry point to use the Auth component as root.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vue\"\nimport Auth from \"./Auth.vue\"\n\nimport \"./assets/main.css\"\n\ncreateApp(Auth).mount(\"#app\")\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Error Payload Structure in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of a validation error payload in Remult. It shows how field-specific error messages are organized within the modelState object, allowing for targeted error display in the UI.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/2-using-field-metadata-in-forms/content.md#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"modelState\": {\n    \"title\": \"Should not be empty\",\n    \"priority\": \"Value must be one of: low, medium, high\"\n  },\n  \"message\": \"The Task Title: Should not be empty\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New SvelteKit Project with create-svelte\nDESCRIPTION: Commands to initialize a new SvelteKit project either in the current directory or in a specified folder. This uses the official create-svelte tool to scaffold a new project with the latest version.\nSOURCE: https://github.com/remult/remult/blob/main/projects/test-servers/sveltekit-server/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Defining a Field with Object Configuration in TypeScript\nDESCRIPTION: Example of using Fields.string decorator with an object configuration to set field options, specifically setting includeInApi to false.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// as an object\n@Fields.string({ includeInApi:false })\ntitle='';\n```\n\n----------------------------------------\n\nTITLE: Using getId Method from IdMetadata in TypeScript\nDESCRIPTION: Demonstrates how to extract the ID from immutable objects using the IdMetadata.getId method. This is particularly useful for entities where the ID column has a different name than 'id'.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nrepo.metadata.idMetadata.getId(task)\n```\n\n----------------------------------------\n\nTITLE: Enabling Admin UI in Remult Express Configuration\nDESCRIPTION: Updates the API configuration to enable the built-in Admin UI by setting the admin option to true. This provides a web interface for managing entities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/entities.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultExpress } from 'remult/remult-express'\nimport { Task } from '../shared/Task.js'\n\nexport const api = remultExpress({\n  entities: [Task],\n  admin: true, // Enable the Admin UI\n})\n```\n\n----------------------------------------\n\nTITLE: Auto-generated ID and Caption in ValueListFieldType\nDESCRIPTION: Demonstrates how id and caption properties are automatically generated from static member names when not explicitly provided.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/field-types.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@ValueListFieldType()\nexport class TaskStatus {\n  static open = new TaskStatus() // { id: 'open', caption: 'Open' }\n  static closed = new TaskStatus() // { id: 'closed', caption: 'Closed' }\n\n  id!: string\n  caption!: string\n  constructor() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Admin UI to Remult Sveltekit Configuration\nDESCRIPTION: Enables the Admin UI feature in the Remult Sveltekit configuration, providing a web interface for managing entities at /api/admin.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/entities.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultSveltekit } from 'remult/remult-sveltekit'\nimport { Task } from '../shared/Task'\n\nexport const api = remultSveltekit({\n  entities: [Task],\n  admin: true, // Enable the Admin UI\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Required Field Validation in Remult Entity\nDESCRIPTION: Adding a required field validation to the 'title' field in a Task entity class using Remult's built-in Validators.required. This validation will run on both client and server sides.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/shared/Task.ts\n\n@Fields.string({\n  validate: Validators.required\n})\ntitle = \"\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Task Filtering in Remult\nDESCRIPTION: This snippet shows how to comment out the filtering option to retrieve all tasks while maintaining the limit and sorting options.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/sorting-filtering.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/App.tsx\n\nuseEffect(() => {\n  taskRepo\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" }\n      //where: { completed: true },\n    })\n    .then(setTasks)\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Page in SolidStart\nDESCRIPTION: Building a login form component that uses the loginAction to authenticate users, with error handling for failed login attempts.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/login.tsx\n\nimport { useSubmission } from '@solidjs/router'\nimport { loginAction } from '../auth.js'\nimport { Show } from 'solid-js'\n\nexport default function Home() {\n  const sub = useSubmission(loginAction)\n  return (\n    <>\n      <h1>Login</h1>\n      <main>\n        <form action={loginAction} method=\"post\">\n          <input\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"Username, try Steve or Jane\"\n          />\n          <button>Sign in</button>\n        </form>\n        <Show when={sub.result?.message}>{sub.result?.message}</Show>\n      </main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Example Generated Migrations File Structure\nDESCRIPTION: Example of a generated migrations.ts file containing SQL statements to update the database schema based on entity changes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Migrations } from 'remult/migrations'\n\nexport const migrations: Migrations = {\n  0: async ({ sql }) => {\n    await sql(`--sql\n      CREATE SCHEMA IF NOT EXISTS public;\n      CREATE TABLE \"tasks\" (\n        \"id\" VARCHAR DEFAULT '' NOT NULL PRIMARY KEY,\n        \"title\" VARCHAR DEFAULT '' NOT NULL\n      )`)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Hapi Integration for Remult\nDESCRIPTION: TypeScript declarations for Hapi framework integration with Remult server, including plugin types and server configuration.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remultHapi(\n  options: RemultServerOptions<Request>,\n): RemultHapiServer\n\nexport type RemultHapiServer = Plugin<any, any> &\n  RemultServerCore<Request> & {\n    withRemult: RemultServer<Request>[\"withRemultAsync\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Entity Caption in UI\nDESCRIPTION: Example showing how to display an entity's caption in a heading element.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_entitymetadata.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<h1>Create a new item in {taskRepo.metadata.caption}</h1>\n```\n\n----------------------------------------\n\nTITLE: Connecting Remult with NextAuth in API Configuration\nDESCRIPTION: Integrates the authentication system with Remult by providing a getUser function that uses the getUserOnServer function to identify the current user for API requests.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api.ts\n\nimport { getUserOnServer } from \"./auth\"\n\nconst api = remultNextApp({\n  //...\n  getUser: getUserOnServer,\n})\n//...\n```\n\n----------------------------------------\n\nTITLE: Serving Entity CRUD API in Remult\nDESCRIPTION: This snippet demonstrates how to register and serve a Remult entity for CRUD operations through the API. It uses the entities array in the remultExpress configuration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// backend/index.ts\n\napp.use(\n  remultExpress({\n    entities: [Product], // [!code highlight]\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Result of Relational Query\nDESCRIPTION: This snippet shows an example of the JSON structure returned when querying Orders with included Customer data.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"adjkzsio3efees8ew0wnsqma\",\n    \"customer\": {\n      \"id\": \"m4ozs74onwwroav3o1xs1qi8\",\n      \"name\": \"Larkin - Fadel\",\n      \"city\": \"London\"\n    },\n    \"amount\": 90\n  },\n  {\n    \"id\": \"gefhsed1clknmogcgiigo9jo\",\n    \"customer\": {\n      \"id\": \"m4ozs74onwwroav3o1xs1qi8\",\n      \"name\": \"Larkin - Fadel\",\n      \"city\": \"London\"\n    },\n    \"amount\": 3\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Frontend Build Error for Server-Only Modules\nDESCRIPTION: The error message shown when trying to bundle a Node.js-specific module like 'fs' in a frontend application build process.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-server-only-packages.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nERROR in ./src/app/products/products.controller.ts\nModule not found: Error: Can't resolve 'fs' in 'C:\\try\\test19\\my-project\\src\\app\\products'\ni ｢wdm｣: Failed to compile.\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Server Hooks with Remult API\nDESCRIPTION: Configuration code to enable Remult across all SvelteKit routes by setting up the server-side hooks with the Remult API.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hooks.server.ts\nimport { api } from './server/api'\nexport const handle = api\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Test Server-Side Validation\nDESCRIPTION: This curl command demonstrates how to test server-side validation by making a POST request to the tasks API with an empty title, which should trigger the required field validation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i http://localhost:3002/api/tasks -d \"{\\\"title\\\": \\\"\\\"}\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Connection in Remult (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure a PostgreSQL database connection in a Remult application. It uses the 'pg' package to create a connection pool and sets up the Remult server with the PostgreSQL data provider.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/8-Database/meta.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pool } from 'pg'\nimport { PostgresDataProvider } from 'remult/postgres'\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL\n})\n\nconst remult = remult({\n  dataProvider: async () => {\n    return new PostgresDataProvider(pool)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Database Field Type\nDESCRIPTION: Example of specifying a precise decimal type for database storage using the fieldTypeInDb property.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_valueconverter.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Define a field with a specific decimal precision in the database\n@Fields.number({\n  valueConverter: {\n    fieldTypeInDb: 'decimal(18,8)'\n  }\n})\nprice=0;\n```\n\n----------------------------------------\n\nTITLE: Installing Remult Group By Example Project\nDESCRIPTION: Command to clone the group by example project using degit, which creates a clean copy of the example repository without git history.\nSOURCE: https://github.com/remult/remult/blob/main/examples/groupBy/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx degit https://github.com/remult/remult/examples/groupBy groupBy\n```\n\n----------------------------------------\n\nTITLE: TypeScript Server Configuration\nDESCRIPTION: TypeScript configuration for the server, enabling decorators and ESM compatibility\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/koa.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\",\n    \"module\": \"nodenext\"\n  },\n  \"include\": [\"src/server/**/*\", \"src/shared/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Protected Home Page with Remult Authentication\nDESCRIPTION: Creating a protected home page that checks for authenticated users and redirects to login if needed, while displaying user information and a logout button for authenticated users.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/auth.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/index.tsx\n\nimport { getUser, logout } from '../auth.js'\nimport { useNavigate } from '@solidjs/router'\nimport { Show, createSignal, onMount } from 'solid-js'\nimport { remult } from 'remult'\nimport Todo from '../components/Todo.jsx'\n\nexport default function Home() {\n  const [authenticated, setAuthenticated] = createSignal(false)\n  const navigate = useNavigate()\n\n  onMount(async () => {\n    remult.user = await getUser()\n    if (remult.authenticated()) setAuthenticated(true)\n    else navigate('/login')\n  })\n\n  return (\n    <Show when={authenticated()}>\n      <h1>Todos</h1>\n      <header>\n        Hello {remult.user?.name}\n        <button\n          onClick={async () => logout().then(() => navigate('/login'))}\n        >\n          Logout\n        </button>\n      </header>\n      <Todo />\n    </Show>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Data Provider Custom Filter\nDESCRIPTION: Demonstrates creating a custom filter for in-memory JSON data provider to filter tasks by title length.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-filter.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nstatic titleLengthFilter = Filter.createCustom<Task, { minLength: number }>(\n  ({ minLength }) => {\n    return ArrayEntityDataProvider.rawFilter((item) => {\n      return item.title?.length > minLength;\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Types for Remult Authorization\nDESCRIPTION: Defines types for authorization in Remult, including Allowed and AllowedForInstance which can be boolean values, string identifiers, string arrays, or functions that return boolean values.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type Allowed =\n  | boolean\n  | string\n  | string[]\n  | ((c?: Remult) => boolean)\nexport declare type AllowedForInstance<T> =\n  | boolean\n  | string\n  | string[]\n  | ((entity?: T, c?: Remult) => boolean)\n```\n\n----------------------------------------\n\nTITLE: Pagination with Limit Parameter\nDESCRIPTION: Example URL showing how to limit the number of returned products to 25 per page\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nhttps://mySite.com/api/products?_limit=25\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks via CURL Commands\nDESCRIPTION: HTTP POST requests to create single and multiple tasks through the API endpoint.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/entities.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3002/api/tasks -d \"{\\\"title\\\": \\\"Clean car\\\"}\" -H \"Content-Type: application/json\"\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3002/api/tasks -d \"[{\\\"title\\\": \\\"Read a book\\\"},{\\\"title\\\": \\\"Take a nap\\\", \\\"completed\\\":true },{\\\"title\\\": \\\"Pay bills\\\"},{\\\"title\\\": \\\"Do laundry\\\"}]\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating Entity from JSON in Remult\nDESCRIPTION: Demonstrates how to convert JSON data into entity instances.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_repository.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = // from the server\nconst tasks = repo(Task).fromJson(data)\n```\n\n----------------------------------------\n\nTITLE: Using Custom FieldOptions in Entity Definition\nDESCRIPTION: Demonstrates how to use the custom placeholderText option when defining entity fields in a Task class.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-options.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Fields } from 'remult'\n\n@Entity('tasks', { allowApiCrud: true })\nexport class Task {\n  @Fields.uuid()\n  id!: string\n\n  @Fields.string({\n    placeholderText: 'Please enter a task title',\n  })\n  title = ''\n\n  @Fields.boolean()\n  completed = false\n}\n```\n\n----------------------------------------\n\nTITLE: Converting HTML Input to Value Type\nDESCRIPTION: Example of converting a string from an HTML input element to a Date object.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_valueconverter.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfromInput: (val, inputType) => new Date(val)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Hapi Server\nDESCRIPTION: JSON configuration for TypeScript specific to the Hapi server. This enables decorators, sets up module compatibility, and specifies file paths for the server and shared code.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hapi.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\",\n    \"module\": \"nodenext\"\n  },\n  \"include\": [\"src/server/**/*\", \"src/shared/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult to Access User Session from Auth.js\nDESCRIPTION: Adding the getUser function to the Remult SvelteKit configuration to extract user information from the Auth.js session.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { remultSveltekit } from 'remult/remult-sveltekit'\nimport { Task } from '../shared/Task'\nimport { TasksController } from '../shared/TasksController'\nimport type { UserInfo } from 'remult' // [!code ++]\n\nexport const api = remultSveltekit({\n  admin: true,\n  entities: [Task],\n  controllers: [TasksController],\n  getUser: async (event) => {\n    const auth = await event?.locals?.auth() // [!code ++]\n    return auth?.user as UserInfo // [!code ++]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Tasks via cURL POST Request\nDESCRIPTION: Shell command to create multiple tasks in a single request by sending an array of task objects to the Remult API endpoint.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/entities.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:5173/api/tasks -d \"[{\\\"title\\\": \\\"Read a book\\\"},{\\\"title\\\": \\\"Take a nap\\\", \\\"completed\\\":true },{\\\"title\\\": \\\"Pay bills\\\"},{\\\"title\\\": \\\"Do laundry\\\"}]\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in Svelte Component\nDESCRIPTION: Updates a Svelte component to catch and display validation errors when adding a new task. The code wraps the task creation logic in a try-catch block to prevent unhandled exceptions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\nlet newTaskTitle = $state(\"\");\nconst addTask = async (event: Event) => {\n  event.preventDefault();\n  try {\n    const newTask = await repo(Task).insert({ title: newTaskTitle });\n    tasks = [...tasks, newTask];\n    newTaskTitle = \"\";\n  } catch (error) {\n    alert((error as { message: string }).message);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: CompoundIdField Class for Multi-Field Primary Keys\nDESCRIPTION: Class that implements the FieldMetadata interface for creating compound primary keys from multiple fields. It provides methods for converting between display values and database values, and handling API interactions.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class CompoundIdField implements FieldMetadata<string> {\n  fields: FieldMetadata[]\n  constructor(...columns: FieldMetadata[])\n  apiUpdateAllowed(item: any): boolean\n  displayValue(item: any): string\n  includedInApi(item: any): boolean\n  toInput(value: string, inputType?: string): string\n  fromInput(inputValue: string, inputType?: string): string\n  getDbName(): Promise<string>\n  getId(instance: any): string\n  options: FieldOptions\n  get valueConverter(): Required<ValueConverter<string>>\n  target: ClassType<any>\n  readonly: boolean\n  allowNull: boolean\n  dbReadOnly: boolean\n  isServerExpression: boolean\n  key: string\n  caption: string\n  inputType: string\n  dbName: string\n  valueType: any\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Setting Up Remult Angular Todo Project\nDESCRIPTION: This snippet shows the commands to download the project source code using degit, navigate to the project directory, and install dependencies.\nSOURCE: https://github.com/remult/remult/blob/main/examples/angular-todo-fastify/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit remult/remult/examples/angular-todo-fastify angular-todo\ncd angular-todo\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Project Welcome Page\nDESCRIPTION: A simple markdown header that serves as a welcome message for a project. The project name is currently set as a placeholder ('project-name-to-be-replaced') that will likely be updated with the actual project name.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/sveltekit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Welcome to project-name-to-be-replaced!\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt 3 Project\nDESCRIPTION: Commands for installing project dependencies using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/nuxt/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TutorialKit Lesson Content in Markdown\nDESCRIPTION: Example of a lesson content file in Markdown format, showing the front matter metadata and lesson content structure.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/README.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: lesson\ntitle: Welcome!\n---\n\n# Welcome to TutorialKit!\n\nIn this tutorial we'll walk you through how to setup your environment to\nwrite your first tutorial 🤩\n```\n\n----------------------------------------\n\nTITLE: Extending RemultContext Type for Request Access\nDESCRIPTION: Type declaration to extend the RemultContext interface to include the request property, allowing access to the Express request object throughout the request lifecycle.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type express from 'express'\ndeclare module 'remult' {\n  export interface RemultContext {\n    request?: express.Request\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Metadata Interface in Remult\nDESCRIPTION: Interface defining the structure of field metadata in Remult entities. Includes properties for field configuration, type information, and methods for handling field values and permissions.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FieldMetadata<valueType = unknown, entityType = unknown> {\n  /** The field's member name in an object.\n   * @example\n   * console.log(repo(Task).metadata.fields.title.key);\n   * // result: title\n   */\n  readonly key: entityType extends object ? keyof entityType & string : string\n  /** A human readable caption for the field. Can be used to achieve a consistent caption for a field throughout the app\n   * @example\n   * <input placeholder={taskRepo.metadata.fields.title.caption}/>\n   * @see {@link FieldOptions#caption} for configuration details\n   */\n  readonly caption: string\n  /** The name of the column in the database that holds the data for this field. If no name is set, the key will be used instead.\n   * @example\n   *\n   * @Fields.string({ dbName: 'userName'})\n   * userName=''\n   * @see {@link FieldOptions#dbName} for configuration details\n   */\n  dbName: string\n  /** The field's value type (number,string etc...) */\n  readonly valueType: any\n  /** The options sent to this field's decorator */\n  readonly options: FieldOptions\n  /** The `inputType` relevant for this field, determined by the options sent to it's decorator and the valueConverter in these options */\n  readonly inputType: string\n  /** if null is allowed for this field\n   * @see {@link FieldOptions#allowNull} for configuration details\n   *\n   */\n  readonly allowNull: boolean\n  /** The class that contains this field\n   * @example\n   * Task == repo(Task).metadata.fields.title.target //will return true\n   */\n  readonly target: ClassType<valueType>\n  /**\n   * @deprecated Returns the dbName - based on it's `dbName` option and it's `sqlExpression` option */\n  getDbName(): Promise<string>\n  /** Indicates if this field is based on a server express */\n  readonly isServerExpression: boolean\n  /** indicates that this field should only be included in select statement, and excluded from update or insert. useful for db generated ids etc...\n   * @see {@link FieldOptions#dbReadOnly} for configuration details\n   */\n  readonly dbReadOnly: boolean\n  /** the Value converter for this field */\n  readonly valueConverter: Required<ValueConverter<valueType>>\n  /** Get the display value for a specific item\n   * @see {@link FieldOptions#displayValue} for configuration details\n   * @example\n   * repo.fields.createDate.displayValue(task) //will display the date as defined in the `displayValue` option defined for it.\n   */\n  displayValue(item: Partial<entityType>): string\n  /**\n   * Determines if the current user is allowed to update a specific entity instance.\n   \n   * @example\n   * // Check if the current user is allowed to update a specific task\n   * if (repo(Task).metadata.apiUpdateAllowed(task)){\n   *   // Allow user to edit the entity\n   * }\n   * @see {@link FieldOptions#allowApiUpdate} for configuration details\n   * @param {Partial<entityType>} item - Partial entity instance to check permissions against.\n   * @returns {boolean} True if the update is allowed.\n   */\n  apiUpdateAllowed(item?: Partial<entityType>): boolean\n  /**\n   * Determines if a specific entity field should be included in the API based on the current user's permissions.\n   * This method checks visibility permissions for a field within a partial entity instance.\n   * @example\n   * const employeeRepo = remult.repo(Employee);\n   * // Determine if the 'salary' field of an employee should be visible in the API for the current user\n   * if (employeeRepo.fields.salary.includedInApi({ id: 123, name: 'John Doe' })) {\n   *   // The salary field is included in the API\n   * }\n   * @see {@link FieldOptions#includeInApi} for configuration details\n   * @param {Partial<entityType>} item - The partial entity instance used to evaluate field visibility.\n   * @returns {boolean} True if the field is included in the API.\n   */\n  includedInApi(item?: Partial<entityType>): boolean\n  /** Adapts the value for usage with html input\n   * @example\n   * @Fields.dateOnly()\n   * birthDate = new Date(1976,5,16)\n   * //...\n   * input.value = repo.fields.birthDate.toInput(person) // will return '1976-06-16'\n   * @see {@link ValueConverter#toInput} for configuration details\n   */\n  toInput(value: valueType, inputType?: string): string\n  /** Adapts the value for usage with html input\n   * @example\n   * @Fields.dateOnly()\n   * birthDate = new Date(1976,5,16)\n   * //...\n   * person.birthDate = repo.fields.birthDate.fromInput(personFormState) // will return Date\n   * @see {@link ValueConverter#fromInput} for configuration details\n   */\n  fromInput(inputValue: string, inputType?: string): valueType\n}\n```\n\n----------------------------------------\n\nTITLE: Logout with SvelteKit Page Invalidation\nDESCRIPTION: Enhanced logout function that triggers SvelteKit's invalidateAll() to refresh the layout server load function, ensuring the authentication state is synchronized.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nimport { invalidateAll } from '$app/navigation'\n\nconst logout = async () => {\n  try {\n    await AuthController.signOut()\n    invalidateAll() // [!code ++] // This will trigger the layout.server.ts load function\n  } catch (error) {\n    alert(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Schema Synchronization in Remult\nDESCRIPTION: Code snippet showing how to disable Remult's automatic schema synchronization by setting the ensureSchema option to false when initializing the API.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = remultExpress({\n  entities: [], // Your entities here\n  ensureSchema: false, // Disables automatic schema synchronization, Default: true\n})\n```\n\n----------------------------------------\n\nTITLE: Opening Railway Project in Browser\nDESCRIPTION: Command to open the Railway project in the browser for further configuration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/deployment.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrailway open\n```\n\n----------------------------------------\n\nTITLE: Defining SpecificRoute Type for Route Registration\nDESCRIPTION: Declares a type for specific route handling with methods for different HTTP verbs (GET, PUT, POST, DELETE). This allows registering handlers for different HTTP methods on the same route path.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SpecificRoute<RequestType> = {\n  get(handler: GenericRequestHandler<RequestType>): SpecificRoute<RequestType>\n  put(handler: GenericRequestHandler<RequestType>): SpecificRoute<RequestType>\n  post(handler: GenericRequestHandler<RequestType>): SpecificRoute<RequestType>\n  delete(\n    handler: GenericRequestHandler<RequestType>,\n  ): SpecificRoute<RequestType>\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API with cURL\nDESCRIPTION: Command to test the API endpoint for tasks using cURL, which will now return an error for unauthorized requests.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i http://localhost:5173/api/tasks\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular DevServer Proxy\nDESCRIPTION: Proxy configuration for Angular DevServer to forward API requests to the Express backend during development.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n// proxy.conf.json\n\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3002\",\n    \"secure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending UserInfo Interface in TypeScript Declaration File\nDESCRIPTION: Creates a TypeScript declaration file (types.d.ts) to extend the UserInfo interface with additional fields like phone and email.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-options.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/types.d.ts\nexport {}\n\ndeclare module 'remult' {\n  interface UserInfo {\n    phone: string\n    email: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Remult package in Nuxt project\nDESCRIPTION: NPM command to install the Remult package as a dependency in the Nuxt project.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nuxt.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install remult\n```\n\n----------------------------------------\n\nTITLE: Creating Remult API Instance in SvelteKit\nDESCRIPTION: Code for initializing the Remult API instance using the remultSveltekit function, which configures Remult for use with SvelteKit.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/index.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { remultSveltekit } from 'remult/remult-sveltekit'\n\nexport const api = remultSveltekit({})\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative URL for Remult API Endpoints\nDESCRIPTION: Example showing how to set a relative base URL for Remult API calls.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_apiclient.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Relative URL\nremult.apiClient.url = './api';\n```\n\n----------------------------------------\n\nTITLE: Extending RemultContext Interface in TypeScript\nDESCRIPTION: Extends the RemultContext interface to include a custom 'origin' property for storing request-specific information.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/custom-options.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'remult' {\n  export interface RemultContext {\n    origin?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Field Target Class\nDESCRIPTION: Demonstrates how to verify if a field's target matches a specific class using the target property.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_fieldmetadata.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nTask == repo(Task).metadata.fields.title.target //will return true\n```\n\n----------------------------------------\n\nTITLE: Installing Cookie-Session for Express\nDESCRIPTION: Terminal commands to install cookie-session middleware and its TypeScript type definitions for user session management in Express.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i cookie-session\nnpm i --save-dev @types/cookie-session\n```\n\n----------------------------------------\n\nTITLE: Displaying TutorialKit Content Structure in Bash\nDESCRIPTION: Shows the folder structure for organizing tutorial content in TutorialKit, including parts, chapters, lessons, and metadata files.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntutorial\n├── 1-basics-of-vite\n│   ├── 1-introduction\n│   │   ├── 1-welcome\n│   │   │   ├── content.md    # The content of your lesson\n│   │   │   ├── _files        # Initial set of files\n│   │   │   │   └── ...\n│   │   │   └── _solution     # Solution of the lesson\n│   │   │       └── ...\n│   │   ├── 2-why-vite\n│   │   │   ├── content.md\n│   │   │   └── _files\n│   │   │       └── ...\n│   │   └── meta.md           # Metadata for the chapter\n│   └── meta.md               # Metadata for the part\n├── 2-advanced\n│   ├── ...\n│   └── meta.md\n└── meta.md                   # Metadata for the tutorial\n```\n\n----------------------------------------\n\nTITLE: Ends With String Filter in Remult\nDESCRIPTION: Filters records where a string field ends with a specific substring. Uses the $endsWith operator to match records based on string suffixes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: {\n  name: {\n    $endsWith: 'joe'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Remult and Express\nDESCRIPTION: Commands to install Express and Remult for the server, along with TypeScript types for Express and tsx for development.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm i express remult\nnpm i --save-dev @types/express tsx\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auth Secret Environment Variable\nDESCRIPTION: Creating an environment variable for the Auth.js secret key that's used for token hashing, cookie signing, and cryptographic operations.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/auth.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_SECRET=something-secret\n```\n\n----------------------------------------\n\nTITLE: Installing Remult Package\nDESCRIPTION: Command to install the Remult package as a development dependency, which provides the full-stack CRUD functionality for the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/index.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i remult --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Dialog Provider in React Root Component\nDESCRIPTION: Initialization code for adding the DialogProvider to the React application root component. This provider is required for using the awaitable dialog components throughout the application.\nSOURCE: https://github.com/remult/remult/blob/main/examples/shadcn-react-table/README.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <DialogProvider>\n        <App />\n    </DialogProvider>\n  </React.StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Running the Node.js API Server\nDESCRIPTION: Command to start the Node.js API server with tsx for automatic TypeScript compilation and reloading on changes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Defining SqlImplementation Interface for Database Adapters\nDESCRIPTION: Interface that must be implemented by database adapters to provide SQL functionality, including transaction support, schema management, and specific database syntax handling.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SqlImplementation extends HasWrapIdentifier {\n  getLimitSqlSyntax(limit: number, offset: number): string\n  createCommand(): SqlCommand\n  transaction(action: (sql: SqlImplementation) => Promise<void>): Promise<void>\n  entityIsUsedForTheFirstTime(entity: EntityMetadata): Promise<void>\n  ensureSchema?(entities: EntityMetadata[]): Promise<void>\n  supportsJsonColumnType?: boolean\n  /** true by default */\n  doesNotSupportReturningSyntax?: boolean\n  doesNotSupportReturningSyntaxOnlyForUpdate?: boolean\n  orderByNullsFirst?: boolean\n  end(): Promise<void>\n  afterMutation?: VoidFunction\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReactSwagger Component\nDESCRIPTION: TypeScript React code for a client-side component that renders the Swagger UI using the swagger-ui-react package. It accepts an OpenAPI specification as a prop.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-swagger.md#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// src/app/api-doc/react-swagger.tsx\n'use client'\n\nimport SwaggerUI from 'swagger-ui-react'\nimport 'swagger-ui-react/swagger-ui.css'\n\ntype Props = {\n  spec: Record<string, any>\n}\n\nfunction ReactSwagger({ spec }: Props) {\n  return <SwaggerUI spec={spec} />\n}\n\nexport default ReactSwagger\n```\n\n----------------------------------------\n\nTITLE: Initializing Railway Project for Remult Todo App Deployment\nDESCRIPTION: This shell command initializes a new Railway project for deploying the Remult todo application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Creating a New SvelteKit Project\nDESCRIPTION: Command to initialize a new SvelteKit project that will be used as the foundation for the todo application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/index.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx sv@latest create remult-sveltekit-todo\n```\n\n----------------------------------------\n\nTITLE: Defining LiveQueryStorage Interface for Query Management\nDESCRIPTION: Defines the LiveQueryStorage interface that handles storing, managing, and retrieving live queries. It provides methods for adding, removing, and iterating through stored queries, as well as keeping them alive.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LiveQueryStorage {\n  add(query: StoredQuery): Promise<void>\n  remove(queryId: string): Promise<void>\n  forEach(\n    entityKey: string,\n    callback: (args: {\n      query: StoredQuery\n      setData(data: any): Promise<void>\n    }) => Promise<void>,\n  ): Promise<void>\n  keepAliveAndReturnUnknownQueryIds(queryIds: string[]): Promise<string[]>\n}\n```\n\n----------------------------------------\n\nTITLE: FindOptions Interface Definition\nDESCRIPTION: Interface that extends FindOptionsBase to define options for finding entities. It provides the foundation for query options in repository find operations.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FindOptions<entityType> extends FindOptionsBase<entityType> {}\n```\n\n----------------------------------------\n\nTITLE: Defining PreprocessFilterInfo Interface in TypeScript\nDESCRIPTION: Interface definition for PreprocessFilterInfo class that provides metadata and filter processing capabilities. Includes methods for retrieving precise filter values and accessing entity metadata.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_preprocessfilterinfo.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PreprocessFilterInfo {\n  metadata: EntityMetadata;\n  getFilterPreciseValues(filter?: any): Promise<FilterPreciseValues>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Dev Server in Bash\nDESCRIPTION: Commands to install project dependencies and start the development server for the TutorialKit project.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dotenv for Environment Variable Management\nDESCRIPTION: Command for installing the dotenv package to manage environment variables securely in a Remult application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install dotenv\n```\n\n----------------------------------------\n\nTITLE: SQLite Integration - TypeScript\nDESCRIPTION: Type declaration for SQL.js integration extending core SQLite functionality.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class SqlJsDataProvider extends SqliteCoreDataProvider {\n  constructor(db: Promise<Database>)\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Script for Hono Server Development\nDESCRIPTION: Adds a development script to package.json that uses tsx to run and watch the server with hot reloading, specifying the environment file and TypeScript configuration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hono.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"dev-node\": \"tsx watch --env-file=.env --tsconfig tsconfig.server.json src/server\"\n```\n\n----------------------------------------\n\nTITLE: Custom API URL Configuration\nDESCRIPTION: Setting a custom base URL for API calls in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nremult.apiClient.url = 'http://localhost:3002/api'\n```\n\n----------------------------------------\n\nTITLE: Adding NPM Script for Node Server\nDESCRIPTION: JSON configuration to add an npm script for starting the development API server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n\"dev-node\": \"tsx watch --tsconfig tsconfig.server.json src/server\"\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with CLI\nDESCRIPTION: Command to create a new Next.js project using create-next-app with specific configuration prompts.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nextjs.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y create-next-app@latest remult-nextjs\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Relation in Customer Entity\nDESCRIPTION: This code demonstrates how to set up the inverse relation in the Customer entity using the @Relations.toMany decorator. It creates an 'orders' array that represents all orders associated with a specific customer.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/1-relations/3-id-based-relations/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Relations.toMany<Customer, Order>({\n  entity: Order,\n  field: 'customerId'\n})\norders?: Order[]\n```\n\n----------------------------------------\n\nTITLE: Creating Remult Server API Configuration\nDESCRIPTION: Basic setup for Remult server instance using createRemultServer\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/koa.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/server/api.ts\n\nimport { createRemultServer } from 'remult/server'\n\nexport const api = createRemultServer()\n```\n\n----------------------------------------\n\nTITLE: Defining Queue Management Interfaces\nDESCRIPTION: Declares interfaces for job queuing and processing, including job information and queue storage. These interfaces support background processing and asynchronous task management within Remult applications.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface queuedJobInfo {\n  info: queuedJobInfoResponse\n  userId: string\n  setErrorResult(error: any): void\n  setResult(result: any): void\n  setProgress(progress: number): void\n}\n//[ ] queuedJobInfoResponse from TBD is not exported\nexport interface QueueStorage {\n  createJob(url: string, userId?: string): Promise<string>\n  getJobInfo(queuedJobId: string): Promise<queuedJobInfo>\n}\n```\n\n----------------------------------------\n\nTITLE: BackendMethod Default Transaction Setting\nDESCRIPTION: Shows the default transactional setting for backend methods.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_backendmethod.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Using $in Filter Operator in Remult (TypeScript)\nDESCRIPTION: Demonstrates the $in operator which filters entities to include only those whose field values match one of the specified values in an array.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\n// Matches entities where the status is 1, 3, or 5\nconst filter = {\n  status: { $in: [1, 3, 5] }\n};\n```\n\n----------------------------------------\n\nTITLE: Uploading Project to Railway\nDESCRIPTION: Command to upload and deploy the current project to Railway's platform.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/deployment.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Uploading Remult Todo App to Railway\nDESCRIPTION: This shell command uploads the Remult todo application source code to the specified empty service on Railway for deployment.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/deployment.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Illustrating TutorialKit UI Structure in Markdown\nDESCRIPTION: ASCII diagram showing the layout of the TutorialKit user interface, including content, code editor, preview, and terminal sections.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/README.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n┌─────────────────────────────────────────────────────┐\n│ ● ● ● │\n├───────────────────────────┬─────────────────────────┤\n│ │ │\n│ │ │\n│ │ │\n│ │ │\n│ │ Code Editor │\n│ │ │\n│ │ │\n│ │ │\n│ │ │\n│ Content ├─────────────────────────┤\n│ │ │\n│ │ │\n│ │ Preview & Boot Screen │\n│ │ │\n│ │ │\n│ ├─────────────────────────┤\n│ │ │\n│ │ Terminal │\n│ │ │\n└───────────────────────────┴─────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite API Proxy\nDESCRIPTION: Updated Vite configuration that sets up a proxy to redirect API requests from the Vue dev server to the Node.js backend server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n// vite.config.ts\n\n//...\nexport default defineConfig({\n  plugins: [vue()],\n  server: { proxy: { \"/api\": \"http://localhost:3002\" } },\n  esbuild: {\n    tsconfigRaw: {\n      compilerOptions: {\n        experimentalDecorators: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Swagger UI Page in Next.js\nDESCRIPTION: TypeScript React code to create a page that renders the Swagger UI in a Next.js application. It imports the OpenAPI document and uses a custom ReactSwagger component.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-swagger.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/app/api-doc/page.tsx\nimport { openApiDoc } from '@/api' // 👈 Import the openApiDoc you exported earlier\nimport ReactSwagger from './react-swagger'\n\nexport default async function IndexPage() {\n  return (\n    <section className=\"container\">\n      <ReactSwagger spec={openApiDoc} />\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change into the newly created project directory.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nextjs.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd remult-nextjs\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Date Display Function\nDESCRIPTION: Shows how to create a reusable display value function for formatting dates consistently across the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/1-field-meta-data/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// utils/displayValueHelpers.ts\nexport const displayDate = (_: unknown, date?: Date) =>\n  date?.toLocaleDateString()\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication with Remult Reactivity\nDESCRIPTION: Code example for implementing logout functionality that properly triggers Remult's authentication reactivity system.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nconst logout = async () => {\n  try {\n    remult.user = await AuthController.signOut()\n  } catch (error) {\n    alert(error.message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration in Package.json for Server-Only Modules\nDESCRIPTION: Configuration for Webpack (used in Angular ≤16) to exclude server-only packages from the frontend bundle by adding browser field to package.json.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-server-only-packages.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"browser\": {\n   \"jsonwebtoken\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Tasks Using cURL Command\nDESCRIPTION: Shows how to use cURL to POST multiple tasks at once to the API endpoint. This command adds four tasks with different titles and completion states.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/entities.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3000/api/tasks -d \"[{\\\"title\\\": \\\"Read a book\\\"},{\\\"title\\\": \\\"Take a nap\\\", \\\"completed\\\":true },{\\\"title\\\": \\\"Pay bills\\\"},{\\\"title\\\": \\\"Do laundry\\\"}]\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Using Question Dialog Hook for Simple Confirmations\nDESCRIPTION: Example of using the useQuestion hook to create an awaitable confirmation dialog. The dialog returns a boolean value that can be used to conditionally execute code based on user response.\nSOURCE: https://github.com/remult/remult/blob/main/examples/shadcn-react-table/README.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst question = useQuestion()\nasync function doSomething() {\n  if (await question('Are you Sure?')) {\n    // Do Something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Commands to install Express, Remult, and development dependencies.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i express remult\nnpm i --save-dev @types/express tsx\n```\n\n----------------------------------------\n\nTITLE: Defining Various Interfaces for Remult Framework\nDESCRIPTION: Collection of smaller interfaces used throughout the Remult framework, including StoredQuery for persisting queries, StringFieldOptions for string field configuration, and subscription-related interfaces.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StoredQuery {\n  entityKey: string\n  id: string\n  data: any\n}\nexport interface StringFieldOptions<entityType = unknown, valueType = string>\n  extends FieldOptions<entityType, valueType> {\n  maxLength?: number\n  minLength?: number\n}\nexport interface Subscribable {\n  subscribe(listener: RefSubscriber): Unsubscribe\n}\nexport declare class SubscriptionChannel<messageType> {\n  channelKey: string\n  /**\n   * Constructs a new `SubscriptionChannel` instance.\n   *\n   * @param {string} channelKey The key that identifies the channel.\n   */\n  constructor(channelKey: string)\n  /**\n   * Publishes a message to the channel. This method should only be used on the backend.\n   *\n   * @param {messageType} message The message to be published.\n   * @param {Remult} [remult] An optional instance of Remult to use for publishing the message.\n\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Decorator Dependencies\nDESCRIPTION: Command to install Babel plugins for TypeScript decorators support\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/solid.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @babel/plugin-proposal-decorators @babel/plugin-transform-class-properties\n```\n\n----------------------------------------\n\nTITLE: Using TodoComponent in AppComponent Template\nDESCRIPTION: Updates the AppComponent template to use the TodoComponent by adding its selector tag.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/entities.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/app/app.component.html -->\n\n<app-todo></app-todo>\n```\n\n----------------------------------------\n\nTITLE: Running Node Development Server\nDESCRIPTION: This command starts the Node development server for the Remult Angular Todo project, which likely uses Fastify as the web server.\nSOURCE: https://github.com/remult/remult/blob/main/examples/angular-todo-fastify/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Remult and Hapi\nDESCRIPTION: Commands to install the necessary npm packages for setting up Remult with a Hapi server. This includes Hapi, Remult, and tsx for development.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hapi.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @hapi/hapi remult\nnpm install --save-dev tsx\n```\n\n----------------------------------------\n\nTITLE: Using Remult in Hapi Routes\nDESCRIPTION: Demonstrates how to register remultHapi as a plugin and use the withRemult method in a Hapi server to access the remult object within a route handler.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-remult-in-custom-backend-code.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Plugin, server } from '@hapi/hapi'\nimport { remultHapi } from 'remult/remult-hapi'\n\n(async () => {\n  const hapi = server({ port: 3000 })\n  const api = remultHapi({})\n  await hapi.register(api) // [!code highlight]\n\n  server.route({\n    method: 'GET',\n    path: '/api/test2',\n    handler: async (request, h) => {\n      return api.withRemult(request, async () => {\n        return {\n          result: await remult.repo(Task).count(),\n        }\n      })\n    },\n  })\n\n  hapi.start()\n})()\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Configuration\nDESCRIPTION: Code snippet showing how to load environment variables using dotenv at the beginning of the configuration file.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from 'dotenv'\nconfig()\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to run the Angular development server, which serves the application locally and enables auto-reload on file changes.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/angular/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Testing Server-Side Validation with cURL\nDESCRIPTION: Demonstrates how to test server-side validation using a cURL command to make a POST request with invalid data. This shows that validation also works on API endpoints.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:5173/api/tasks -d \"{\\\"title\\\": \\\"\\\"}\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Starts With String Filter in Remult\nDESCRIPTION: Filters records where a string field starts with a specific substring. Uses the $startsWith operator to match records based on string prefixes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entityFilter.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nwhere: {\n  name: {\n    $startsWith: 'joe'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Dependencies for Remult\nDESCRIPTION: Installs the required npm packages (knex and mysql2) for connecting Remult to a MySQL database.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/mysql.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i knex mysql2\n```\n\n----------------------------------------\n\nTITLE: Running Build and Start Commands for Local Testing\nDESCRIPTION: Commands to build the application and start it locally for testing before deployment.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running create-remult CLI Tool\nDESCRIPTION: This command uses npm's create feature to run the latest version of the create-remult package. It launches an interactive setup that guides users through creating a new Remult project.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create remult@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Decorators\nDESCRIPTION: JSON configuration to enable experimental decorators in the TypeScript compiler options.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/index.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n\n{\n...\n  \"compilerOptions\": {\n    ...\n    \"experimentalDecorators\": true // add this\n   ...\n  }\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using different package managers (npm, pnpm, yarn, and bun)\nSOURCE: https://github.com/remult/remult/blob/main/projects/test-servers/nuxt-server/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Command to run end-to-end tests for the Angular application. Requires a separate package for e2e testing capabilities.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/angular/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Role-Based Access with includeInApi in Remult (TypeScript)\nDESCRIPTION: This snippet shows how to use includeInApi to restrict field visibility to users with a specific role (admin) in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/1-field-level-control/content.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n  includeInApi: 'admin', // Only users with 'admin' role see this field\n})\nprivateInfo = ''\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorting by Creation Date in Remult\nDESCRIPTION: Configures sorting of tasks by their creation date in ascending order. This organizes tasks chronologically, with older tasks appearing first and newer tasks appearing last in the list.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/sorting-filtering.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/todo/todo.component.ts\n\nngOnInit() {\n  this.taskRepo.find({\n    limit: 20,\n    orderBy: { createdAt:\"asc\" }\n  }).then((items) => (this.tasks = items));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for TypeScript Decorators\nDESCRIPTION: TypeScript configuration for enabling decorator support in SolidStart\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/solid.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\n\nimport { defineConfig } from \"@solidjs/start/config\"\n\nexport default defineConfig({\n  //@ts-ignore\n  solid: {\n    babel: {\n      plugins: [\n        [\"@babel/plugin-proposal-decorators\", { version: \"legacy\" }],\n        [\"@babel/plugin-transform-class-properties\"],\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the Koa development server\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/koa.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project\nDESCRIPTION: Command to create a new Next.js project with the specified configuration for the tutorial.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/index.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y create-next-app@latest remult-nextjs-todo\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres Node Package for Remult\nDESCRIPTION: Command to install the Postgres Node.js client ('pg') package as a dependency for connecting to Postgres databases.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/database.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i pg\n```\n\n----------------------------------------\n\nTITLE: Basic App Component Setup\nDESCRIPTION: Basic SolidStart app component configuration with router and meta provider\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/index.md#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n//src/app.tsx\n\nimport { MetaProvider, Title } from '@solidjs/meta'\nimport { Router } from '@solidjs/router'\nimport { FileRoutes } from '@solidjs/start/router'\nimport { Suspense } from 'solid-js'\nimport './app.css'\n\nexport default function App() {\n  return (\n    <Router\n      root={(props) => (\n        <MetaProvider>\n          <Title>SolidStart - Basic</Title>\n          <Suspense>{props.children}</Suspense>\n        </MetaProvider>\n      )}\n    >\n      <FileRoutes />\n    </Router>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Remult API Routes\nDESCRIPTION: Configuration for catch-all API routes in SolidStart for Remult\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/index.md#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// src/routes/api/[...remult].ts\n\nimport { api } from '../../api.js'\n\nexport const { POST, PUT, DELETE, GET } = api\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Synthetic Default Imports\nDESCRIPTION: JSON configuration update to enable Synthetic Default Imports in tsconfig.json, which is needed for importing Express.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n\n{\n...\n  \"compilerOptions\": {\n    ...\n    \"allowSyntheticDefaultImports\": true,\n   ...\n  }\n...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running the Angular Development Server\nDESCRIPTION: Command to start the Angular development server with the configured proxy settings.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using $nin Filter Operator in Remult (TypeScript)\nDESCRIPTION: Shows how to use the $nin (not in) operator to exclude entities whose field values match any of the specified values in an array.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\n// Matches entities where the status is not 1, 2, or 3\nconst filter = {\n  status: { $nin: [1, 2, 3] }\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Redundant State Management in Todo Operations\nDESCRIPTION: Updates task manipulation functions to rely on the live query subscription for state updates rather than manually managing state. Shows how to simplify setCompleted, saveTask, and deleteTask functions when using live queries.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/live-queries.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<For each={tasks}>\n  {(task, i) => {\n    async function setCompleted(completed: boolean) {\n      //const updatedTask = await taskRepo.update(task, { completed }) <- Delete this line\n      //setTasks(i(), updatedTask) <- Delete this line\n      await taskRepo.update(task, { completed }) // <- replace with this line\n    }\n    async function saveTask() {\n      try {\n        await taskRepo.save(task)\n      } catch (error) {\n        alert((error as { message: string }).message)\n      }\n    }\n    async function deleteTask() {\n      try {\n        await taskRepo.delete(task)\n        // setTasks(tasks.filter((t) => t !== task)) <- Delete this line\n      } catch (error) {\n        alert((error as { message: string }).message)\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting Hapi Development Server\nDESCRIPTION: Command to start the Hapi development server using the npm script defined earlier. This runs the server on port 3002 with automatic reloading on file changes.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hapi.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Installing Swagger UI React Dependencies\nDESCRIPTION: Commands to install the required packages for adding Swagger UI to a Next.js-based Remult application, using either npm or yarn.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-swagger.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# With npm\nnpm i swagger-ui-react\nnpm i -D @types/swagger-ui-react\n\n# With yarn\nyarn add swagger-ui-react\nyarn add -D @types/swagger-ui-react\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Core Data Provider in TypeScript\nDESCRIPTION: Declares the SqliteCoreDataProvider class that implements SqlImplementation and CanBuildMigrations interfaces. This core provider serves as the base for specific SQLite implementations with methods for transaction handling, schema management, and SQL generation.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class SqliteCoreDataProvider\n  implements SqlImplementation, CanBuildMigrations\n{\n  createCommand: () => SqlCommand\n  end: () => Promise<void>\n  doesNotSupportReturningSyntax: boolean\n  doesNotSupportReturningSyntaxOnlyForUpdate: boolean\n  constructor(\n    createCommand: () => SqlCommand,\n    end: () => Promise<void>,\n    doesNotSupportReturningSyntax?: boolean,\n    doesNotSupportReturningSyntaxOnlyForUpdate?: boolean,\n  )\n  orderByNullsFirst?: boolean\n  getLimitSqlSyntax(limit: number, offset: number): string\n  afterMutation?: VoidFunction\n  provideMigrationBuilder(builder: MigrationCode): MigrationBuilder\n  transaction(action: (sql: SqlImplementation) => Promise<void>): Promise<void>\n  entityIsUsedForTheFirstTime(entity: EntityMetadata): Promise<void>\n  ensureSchema(entities: EntityMetadata<any>[]): Promise<void>\n  verifyAllColumns<T extends EntityMetadata>(entity: T): Promise<void>\n  dropTable(entity: EntityMetadata): Promise<void>\n  addColumnSqlSyntax(\n    x: FieldMetadata,\n    dbName: string,\n    isAlterTable: boolean,\n  ): string\n  createTableIfNotExist(entity: EntityMetadata<any>): Promise<void>\n  supportsJsonColumnType?: boolean\n  getCreateTableSql(entity: EntityMetadata<any>): Promise<string[]>\n  wrapIdentifier(name: string): string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga Dependencies\nDESCRIPTION: Command to install the required graphql-yoga package using npm\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-graphql.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i graphql-yoga\n```\n\n----------------------------------------\n\nTITLE: Creating SolidStart Project\nDESCRIPTION: Command to initialize a new SolidStart project\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/index.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm init solid@latest remult-solid-start-todo\n```\n\n----------------------------------------\n\nTITLE: Using Relations Instead of Lazy Option\nDESCRIPTION: Example showing the preferred approach of using Relations.toOne instead of the deprecated lazy option for defining entity relationships.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// Deprecated usage with 'lazy' option\n@Field(() => Customer, { lazy: true })\ncustomer?: Customer;\n\n// Preferred usage with 'Relations.toOne'\n@Relations.toOne(() => Customer)\ncustomer?: Customer;\n```\n\n----------------------------------------\n\nTITLE: Installing Remult Package\nDESCRIPTION: Command to install the latest version of Remult package using npm\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/react.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install remult@latest\n```\n\n----------------------------------------\n\nTITLE: Navigating to SvelteKit Project Directory\nDESCRIPTION: Command to change directory to the newly created SvelteKit project folder.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd remult-sveltekit-todo\n```\n\n----------------------------------------\n\nTITLE: Creating a New SvelteKit Project\nDESCRIPTION: Command to initialize a new SvelteKit project using the official create tool. This creates a minimal SvelteKit application with TypeScript support.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/sveltekit.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx sv@latest create remult-sveltekit-todo\n```\n\n----------------------------------------\n\nTITLE: Downloading and Setting Up Next.js Project with Remult\nDESCRIPTION: Commands to download the source code for a Next.js project with Remult integration, navigate to the project directory, and install dependencies.\nSOURCE: https://github.com/remult/remult/blob/main/examples/nextjs-app-router-todo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit remult/remult/examples/nextjs-app-router-todo nextjs-app-router-todo\ncd nextjs-app-router-todo\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Remult Package\nDESCRIPTION: Command to install the latest version of Remult package via npm.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/vue.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install remult@latest\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Hono Server\nDESCRIPTION: Creates a dedicated TypeScript configuration for the server that enables decorators required by Remult, specifies the module system, and defines the source and output directories.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hono.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\",\n    \"module\": \"nodenext\"\n  },\n  \"include\": [\"src/server/**/*\", \"src/shared/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Remult React Todo application with TypeScript\nDESCRIPTION: Creates a new React application with TypeScript template and installs the core dependencies: Remult for full-stack CRUD operations and Express for the backend server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/setup-react.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-react-app remult-react-todo --template typescript\ncd remult-react-todo\nnpm i remult express\nnpm i --save-dev @types/express ts-node-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Data Provider for Remult\nDESCRIPTION: This snippet shows how to install and configure the Oracle data provider for Remult using Knex. It includes the necessary connection settings.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nnpm i knex oracledb\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\nimport express from \"express\"\nimport { remultExpress } from \"remult/remult-express\"\nimport { createKnexDataProvider } from \"remult/remult-knex\"\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: createKnexDataProvider({\n      // Knex client configuration for Oracle\n      client: \"oracledb\",\n      connection: {\n        user: \"your_database_user\",\n        password: \"your_database_password\",\n        connectString: \"SERVER\"\n      }\n    })\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: Command to start the Next.js development server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/index.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Decorators\nDESCRIPTION: JSON configuration to enable experimental decorators in TypeScript configuration file.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nextjs.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fresh Framework Integration for Remult\nDESCRIPTION: TypeScript declarations for Fresh framework integration with Remult server, including request/response types and handler interfaces.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FreshContext {\n  next: () => Promise<any>\n}\nexport interface FreshRequest {\n  url: string\n  method: string\n  json: () => Promise<any>\n}\nexport interface FreshResponse {\n  new (body?: any | undefined, init?: ResponseInit): any\n  json(data: unknown, init?: ResponseInit): any\n}\n\nexport declare function remultFresh(\n  options: RemultServerOptions<FreshRequest>,\n  response: FreshResponse,\n): RemultFresh\n\nexport interface RemultFresh extends RemultServerCore<FreshRequest> {\n  handle(req: FreshRequest, ctx: FreshContext): Promise<any>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: This command starts the Angular development server for the Remult Angular Todo project.\nSOURCE: https://github.com/remult/remult/blob/main/examples/angular-todo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier for Migration Code Formatting\nDESCRIPTION: Command for installing Prettier as a development dependency to format the generated migration code for better readability.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/migrations.md#2025-04-16_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D prettier\n```\n\n----------------------------------------\n\nTITLE: Controlling Field Access by Role in Remult (TypeScript)\nDESCRIPTION: This example shows how to restrict updates to a completed field to users with the 'admin' role only using the allowApiUpdate option in Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/7-access-control/1-field-level-control/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.boolean({\n  allowApiUpdate: 'admin', // Only users with the 'admin' role can update\n})\ncompleted = false\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: EntityMetadata API Permission Methods in TypeScript\nDESCRIPTION: Illustrates the breaking change in EntityMetadata where the API permission properties have changed from boolean fields to methods that accept an item parameter. This allows permission rules to be based on specific entity values.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// Previously\nif (repo.metadata.apiDeleteAllowed) {\n}\n// Now\nif (repo.metadata.apiDeleteAllowed(task)) {\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Hono Development Server\nDESCRIPTION: Command to start the Hono development server using the configured npm script, which will watch for changes and automatically restart when files are modified.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/hono.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Installing React Admin and Remult React Admin packages\nDESCRIPTION: Command for installing both the React Admin framework and the Remult React Admin integration package via npm. These packages enable developers to build admin interfaces using React Admin with Remult as the data provider.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-react-admin.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i react-admin remult-react-admin\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component in Vue\nDESCRIPTION: Vue script setup block that imports the Icon component from the project's components directory. This component is used throughout the page to display technology icons with links to their respective documentation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/index.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Icon from '../../components/Icon.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating the Express Server Entry Point\nDESCRIPTION: Basic Express server setup code that initializes an Express application and starts it listening on port 3002.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/index.ts\n\nimport express from 'express'\n\nconst app = express()\n\napp.listen(3002, () => console.log('Server started'))\n```\n\n----------------------------------------\n\nTITLE: Using Repository Shorthand Function\nDESCRIPTION: Shows the usage of the repo() function, which provides a convenient shortcut to quickly obtain a repository for a specific entity type in Remult, simplifying entity operations.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait repo(Task).find()\n```\n\n----------------------------------------\n\nTITLE: Installing Remult in an Angular project\nDESCRIPTION: Command to install the latest version of Remult in the Angular project using npm.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/angular.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install remult@latest\n```\n\n----------------------------------------\n\nTITLE: Package.json Build Script\nDESCRIPTION: NPM script configuration for building both Angular frontend and TypeScript server code.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"build\": \"ng build && tsc -p tsconfig.server.json\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend SQLite Storage with sql.js\nDESCRIPTION: Example of using the SqlJsDataProvider to work with sqlite in the frontend. This code initializes an in-memory SQLite database using sql.js and enables entity operations against this database.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = new SqlDatabase(\n  new SqlJsDataProvider(initSqlJs().then((x) => new x.Database())),\n)\nrepo(Task, db)\n  .find()\n  .then((tasks) => console.table(tasks))\n```\n\n----------------------------------------\n\nTITLE: Installing Authentication Dependencies\nDESCRIPTION: Command line instructions for installing cookie-session package and its TypeScript types.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/auth.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i cookie-session\nnpm i --save-dev @types/cookie-session\n```\n\n----------------------------------------\n\nTITLE: Running a SvelteKit Development Server\nDESCRIPTION: Commands to start a development server for a SvelteKit project after installing dependencies. Includes an option to automatically open the application in a new browser tab.\nSOURCE: https://github.com/remult/remult/blob/main/projects/test-servers/sveltekit-server/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Hapi Server Integration\nDESCRIPTION: Setting up Remult middleware in a Hapi server application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/add-remult-to-your-app.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Plugin, server } from '@hapi/hapi'\nimport { remultHapi } from 'remult/remult-hapi'\n;(async () => {\n  const hapi = server({ port: 3000 })\n\n  await hapi.register(\n    remultHapi({\n      entities: [\n        /* entity types */\n      ],\n    }),\n  )\n\n  hapi.start()\n})()\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres Node Driver\nDESCRIPTION: Command to install the 'pg' package which is needed to connect to PostgreSQL databases from Node.js applications.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/database.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i pg\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Starter Project\nDESCRIPTION: Commands to clone the angular-express-starter repository, navigate to the project directory, and install dependencies to quickly get started with the tutorial.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/remult/angular-express-starter.git remult-angular-todo\ncd remult-angular-todo\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Remult Package\nDESCRIPTION: NPM command to install the Remult package as a project dependency.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nextjs.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install remult\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Provider - TypeScript\nDESCRIPTION: Type declarations for PostgreSQL database integration, including connection management and schema building functionality.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createPostgresConnection(\n  options?: Parameters<typeof createPostgresDataProvider>[0],\n): Promise<SqlDatabase>\n\nexport declare function createPostgresDataProvider(options?: {\n  connectionString?: string\n  sslInDev?: boolean\n  configuration?: \"heroku\" | PoolConfig\n  wrapIdentifier?: (name: string) => string\n  caseInsensitiveIdentifiers?: boolean\n  schema?: string\n  orderByNullsFirst?: boolean\n}): Promise<SqlDatabase>\n```\n\n----------------------------------------\n\nTITLE: Setting up and running the Remult monorepo with Bun\nDESCRIPTION: Commands to install dependencies and boot the application in the Remult monorepo. Requires Bun to be installed as a prerequisite.\nSOURCE: https://github.com/remult/remult/blob/main/examples/bun-react-hono-monorepo-todo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun install\nbun run boot:app\n```\n\n----------------------------------------\n\nTITLE: Cloning the Starter Project\nDESCRIPTION: Commands to clone the Remult Next.js starter repository from GitHub and install its dependencies.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/index.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/remult/nextjs-app-starter.git remult-nextjs-todo\ncd remult-nextjs-todo\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Server TypeScript Configuration\nDESCRIPTION: TypeScript configuration file for the server project that enables experimental decorators and specifies module settings.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\",\n    \"module\": \"nodenext\"\n  },\n  \"include\": [\"src/server/**/*\", \"src/shared/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Express and Remult\nDESCRIPTION: NPM commands to install Express, Remult, and TypeScript dependencies\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/express.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install express remult\nnpm install --save-dev @types/express tsx\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, or pnpm). Running these commands will start the development server on localhost:3000.\nSOURCE: https://github.com/remult/remult/blob/main/projects/test-servers/next-server/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Adding New Task Using cURL Command\nDESCRIPTION: Demonstrates how to use cURL to POST a new task to the API endpoint. This command adds a single task with the title 'Clean car'.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/entities.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:3000/api/tasks -d \"{\\\"title\\\": \\\"Clean car\\\"}\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component in Vue Setup Script\nDESCRIPTION: A Vue script setup block that imports the Icon component from a relative path. This component is used to display framework icons in the page.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/index.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Icon from '../../../components/Icon.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Vue Todo Application\nDESCRIPTION: Commands to download the Vue todo application source code using degit and install its dependencies with npm.\nSOURCE: https://github.com/remult/remult/blob/main/examples/vue-todo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit remult/remult/examples/vue-todo vue-todo\ncd vue-todo\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Local Testing Commands for Production Build\nDESCRIPTION: Shell commands to build and run the production version of the application locally before deployment.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/deployment.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Creating React Project with Vite\nDESCRIPTION: Commands to create a new React project using Vite with TypeScript template\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/react.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create vite@latest remult-react-project -- --template react-ts\ncd remult-react-project\n```\n\n----------------------------------------\n\nTITLE: Running Server Tests in Remult\nDESCRIPTION: Commands for running server tests in watch mode, specifically for SvelteKit tests and builds\nSOURCE: https://github.com/remult/remult/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# in one terminal (to stay in watch mode for build and tests)\nnpm run build-watch\n\n# in a second terminal (run only sveltekit tests in watch mode)\nnpm run test projects/tests/backend-tests/test-sveltekit-server.spec.ts\n\n# in a third terminal (run only sveltekit build)\nnpm run test-servers:sveltekit:setup\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult API\nDESCRIPTION: Initial setup for Remult API configuration in SolidStart\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/index.md#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// src/api.ts\n\nimport { remultSolidStart } from 'remult/remult-solid-start'\n\nexport const api = remultSolidStart({})\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: Command to change the current directory to the newly created Angular project folder.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd remult-angular-todo\n```\n\n----------------------------------------\n\nTITLE: Running Remult Project with Bun\nDESCRIPTION: This command executes the Remult project by running the index.ts file using Bun runtime.\nSOURCE: https://github.com/remult/remult/blob/main/examples/bun-react-hono-monorepo-todo/packages/shared/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Remult Package\nDESCRIPTION: Command to install the Remult package using npm\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/solid.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i remult\n```\n\n----------------------------------------\n\nTITLE: Defining RefSubscriber Type and Interface for Reactive Programming\nDESCRIPTION: Type and interface definitions for reference subscribers used in reactive programming patterns. These interfaces support change notification and observation for reactive data handling.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type RefSubscriber = (() => void) | RefSubscriberBase\nexport interface RefSubscriberBase {\n  reportChanged: () => void\n  reportObserved: () => void\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API proxy for Angular development server\nDESCRIPTION: JSON configuration for proxying API requests from the Angular dev server to the backend API server running on a different port.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/angular.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3002\",\n    \"secure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the newly created Vue project folder.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd remult-vue-todo\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Proxy for API Requests\nDESCRIPTION: Configuration in vite.config.ts to proxy API requests to the development server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineConfig({\n  plugins: [react()],\n  server: { proxy: { \"/api\": \"http://localhost:3002\" } },\n  esbuild: {\n    tsconfigRaw: {\n      compilerOptions: {\n        experimentalDecorators: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling SQL Logging in Remult (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable SQL logging in Remult. It sets the LogToConsole property of SqlDatabase to 'oneLiner', which will log all SQL statements executed by Remult to the console.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/8-Database/1-connection-to-a-database/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSqlDatabase.LogToConsole = 'oneLiner'\n```\n\n----------------------------------------\n\nTITLE: Implementing DuckDB Data Provider in TypeScript\nDESCRIPTION: Defines DuckDBDataProvider class extending SqliteCoreDataProvider for DuckDB integration. Overrides methods for identifier wrapping, table creation SQL, and column syntax to accommodate DuckDB specifics.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class DuckDBDataProvider extends SqliteCoreDataProvider {\n  constructor(db: Database)\n  wrapIdentifier(name: string): string\n  getCreateTableSql(entity: EntityMetadata<any>): Promise<string[]>\n  addColumnSqlSyntax(\n    x: FieldMetadata,\n    dbName: string,\n    isAlterColumn: boolean,\n  ): string\n}\n//[ ] EntityMetadata from ./index.js is not exported\n//[ ] FieldMetadata from ./index.js is not exported\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Starter Project\nDESCRIPTION: Commands to clone the react-vite-express-starter repository and install its dependencies.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/remult/react-vite-express-starter.git remult-react-todo\ncd remult-react-todo\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Remult Package\nDESCRIPTION: Command to install the Remult package as a dependency.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/index.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm i remult\n```\n\n----------------------------------------\n\nTITLE: Setting Function-based Allowed Value in TypeScript\nDESCRIPTION: Shows how to use a predefined function for setting the Allowed value in Remult, which checks for authenticated users.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/allowed.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{ allowApiRead: Allow.authenticated } }\n```\n\n----------------------------------------\n\nTITLE: Implementing Saving and Deleting Hooks for Task Entity in TypeScript\nDESCRIPTION: This code snippet demonstrates the implementation of saving and deleting hooks for a Task entity in Remult. The saving hook logs new tasks and field changes for existing tasks, while the deleting hook logs the title of tasks being deleted.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/3-lifecycle-events/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<Task>(\"tasks\", {\n    saving: (task, e) => {\n        if (e.isNew) {\n            console.log(`New task: ${task.title}`);\n        } else {\n            for (const field of e.fields) {\n                if (field.valueChanged()) {\n                    console.log(\n                        `${field.metadata.caption} changed from ${field.originalValue} to ${field.value}`\n                    );\n                }\n            }\n        }\n    },\n    deleting: (task) => {\n        console.log(`Deleting task: ${task.title}`);\n    },\n})\nexport class Task {\n    // ... rest of the Task class definition\n}\n```\n\n----------------------------------------\n\nTITLE: Count Action Response Format\nDESCRIPTION: JSON response format for count action showing the total number of matching records\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Adding UI Buttons for Batch Task Completion\nDESCRIPTION: Two buttons that call the setAllCompleted function with true or false to mark all tasks as completed or uncompleted respectively.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/6-backend-methods/1-introduction/content.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n  <button onClick={() => setAllCompleted(true)}>Set All Completed</button>\n  <button onClick={() => setAllCompleted(false)}>Set All Uncompleted</button>\n</div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt 3 Development Server\nDESCRIPTION: Commands to start the Nuxt 3 development server on http://localhost:3000 using different package managers.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/nuxt/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm run dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Running Remult Todo App Locally for Testing\nDESCRIPTION: These shell commands are used to build and start the Remult todo application locally for testing purposes before deployment.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Remult Project with Bun\nDESCRIPTION: This command installs the necessary dependencies for the Remult project using Bun package manager.\nSOURCE: https://github.com/remult/remult/blob/main/examples/bun-react-hono-monorepo-todo/packages/shared/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Configuring Sveltekit Adapter\nDESCRIPTION: Modification of svelte.config.js to use the Node.js adapter instead of the auto adapter for production deployment.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-auto' // [!code --]\nimport adapter from '@sveltejs/adapter-node' // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Running the Nuxt development server\nDESCRIPTION: Command to start the Nuxt development server which will run the application with Remult integration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nuxt.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using npm, yarn, or pnpm. This starts the local development environment for the Next.js application.\nSOURCE: https://github.com/remult/remult/blob/main/projects/test-servers/next-app-server/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres Node Package for Remult\nDESCRIPTION: Command to install the PostgreSQL Node.js client package (pg) as a dependency for the Remult application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/database.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i pg\n```\n\n----------------------------------------\n\nTITLE: Checking out the Shadcn React Table Example Source with degit\nDESCRIPTION: Command to clone the Shadcn React Table example repository using degit, which allows downloading a specific directory from a GitHub repository without the Git history.\nSOURCE: https://github.com/remult/remult/blob/main/examples/shadcn-react-table/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit https://github.com/remult/remult/examples/shadcn-react-table shadcn-react-table\n```\n\n----------------------------------------\n\nTITLE: Installing sql.js Package\nDESCRIPTION: Command to install the sql.js package via npm, which enables SQLite functionality in browser/Node.js environments.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/sqljs.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i sql.js\n```\n\n----------------------------------------\n\nTITLE: Initializing Express Server\nDESCRIPTION: TypeScript code to create a basic Express server listening on port 3002.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport express from 'express'\n\nconst app = express()\n\napp.listen(3002, () => console.log('Server started'))\n```\n\n----------------------------------------\n\nTITLE: Creating Sveltekit Layout with CSS Import\nDESCRIPTION: Layout component that imports global CSS styles and applies them to all pages in the Sveltekit application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/entities.md#2025-04-16_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import \"../app.css\"\n\n  interface Props {\n    data: import('./$types').LayoutData;\n    children?: import('svelte').Snippet;\n  }\n\n  let { data, children }: Props = $props();\n</script>\n\n<svelte:head>\n  <title>Remult+Sveltekit Todo App</title>\n</svelte:head>\n\n{@render children?.()}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server in Bash\nDESCRIPTION: Commands to start the Next.js development server using different package managers. This allows developers to run the application locally for testing and development purposes.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/nextjs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Completed Tasks in Remult\nDESCRIPTION: This snippet demonstrates how to filter tasks based on their completion status by setting the 'where' property to only fetch tasks where the 'completed' field is true.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/sorting-filtering.md#2025-04-16_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n$effect(() => {\n  repo(Task)\n    .find({\n      limit: 20,\n      orderBy: { createdAt: \"asc\" },\n      where: { completed: true }\n    })\n    .then((t) => (tasks = t));\n});\n```\n\n----------------------------------------\n\nTITLE: Remult Internal Utilities and Types in TypeScript\nDESCRIPTION: Defines internal utilities, types, and classes used by Remult. Includes functions for entity updates, action handling, controller references, field options customization, and SQL relation filters.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function __updateEntityBasedOnWhere<T>(\n  entityDefs: EntityMetadata<T>,\n  where: EntityFilter<T>,\n  r: T,\n): void\n//[ ] EntityMetadata from TBD is not exported\n//[ ] EntityFilter from TBD is not exported\nexport const actionInfo: {\n  allActions: any[]\n  runningOnServer: boolean\n  runActionWithoutBlockingUI: <T>(what: () => Promise<T>) => Promise<T>\n  startBusyWithProgress: () => {\n    progress: (percent: number) => void\n    close: () => void\n  }\n}\nexport type ClassType<T> = {\n  new (...args: any[]): T\n}\nexport declare class controllerRefImpl<T = unknown>\n  extends rowHelperBase<T>\n  implements ControllerRef<T>\n{\n  constructor(columnsInfo: FieldMetadata[], instance: any, remult: Remult)\n  __performColumnAndEntityValidations(): Promise<void>\n  fields: FieldsRef<T>\n}\n//[ ] FieldMetadata from TBD is not exported\n//[ ] Remult from TBD is not exported\n//[ ] FieldsRef from TBD is not exported\nexport declare function decorateColumnSettings<valueType>(\n  settings: FieldOptions<unknown, valueType>,\n  remult: Remult,\n): FieldOptions<unknown, valueType>\n//[ ] FieldOptions from TBD is not exported\nexport const fieldOptionsEnricher: {\n  enrichFieldOptions: (options: FieldOptions) => void\n}\nexport const flags: {\n  error500RetryCount: number\n}\nexport declare function getControllerRef<fieldsContainerType>(\n  container: fieldsContainerType,\n  remultArg?: Remult,\n): ControllerRef<fieldsContainerType>\n//[ ] ControllerRef from TBD is not exported\nexport declare function getEntitySettings<T>(\n  entity: ClassType<T>,\n  throwError?: boolean,\n): EntityOptionsFactory | undefined\n//[ ] EntityOptionsFactory from TBD is not exported\nexport declare function getRelationFieldInfo(\n  field: FieldMetadata,\n): RelationFieldInfo | undefined\nexport declare function getRelationInfo(options: FieldOptions): RelationInfo\nexport interface RelationFieldInfo {\n  type: \"reference\" | \"toOne\" | \"toMany\"\n  options: RelationOptions<unknown, unknown, unknown>\n  toEntity: any\n  toRepo: Repository<unknown>\n  getFields(): RelationFields\n}\n//[ ] RelationOptions from TBD is not exported\n//[ ] Repository from TBD is not exported\nexport interface RelationFields {\n  fields: Record<string, string>\n  compoundIdField: string | undefined\n}\nexport interface RelationInfo {\n  toType: () => any\n  type: RelationFieldInfo[\"type\"]\n}\nexport declare class SqlRelationFilter<\n  myEntity,\n  relationKey extends keyof myEntity,\n  toEntity = ArrayItemType<myEntity[relationKey]>,\n> {\n  private _tools\n  constructor(myEntity: ClassType<myEntity>, relationField: relationKey)\n  some(where?: EntityFilter<toEntity>): EntityFilter<toEntity>\n}\n//[ ] ArrayItemType from TBD is not exported\nexport declare function sqlRelations<entityType>(\n  forEntity: ClassType<entityType>,\n): SqlRelations<entityType>\nexport type SqlRelations<entityType> = {\n  [p in keyof ObjectMembersOnly<entityType>]-?: SqlRelation<\n    ArrayItemType<NonNullable<entityType[p]>>\n  >\n}\n//[ ] ObjectMembersOnly from TBD is not exported\n//[ ] SqlRelation from TBD is not exported\nexport declare function sqlRelationsFilter<entityType>(\n  forEntity: ClassType<entityType>,\n): {\n  [p in keyof entityType]-?: SqlRelationFilter<\n    entityType,\n    p,\n    ArrayItemType<NonNullable<entityType[p]>>\n  >\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with cURL POST Request\nDESCRIPTION: Command to create a new task by sending a POST request to the API endpoint with a JSON payload containing the task title.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/entities.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3002/api/tasks -d \"{\\\"title\\\": \\\"Clean car\\\"}\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Express Server\nDESCRIPTION: Basic Express server setup code that initializes an Express application and starts listening on port 3002.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// src/server/index.ts\n\nimport express from 'express'\n\nconst app = express()\n\napp.listen(3002, () => console.log('Server started'))\n```\n\n----------------------------------------\n\nTITLE: Adding Production Start Script to Package.json\nDESCRIPTION: Adds a start script to package.json that runs the production Node.js server from the transpiled JavaScript files.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\n\"start\": \"node dist/server/\"\n```\n\n----------------------------------------\n\nTITLE: Defining ContainsStringValueFilter Interface in TypeScript\nDESCRIPTION: This interface defines filter conditions for string values, including contains, not contains, starts with, and ends with operations. It's used for creating complex query filters on string fields.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ContainsStringValueFilter {\n  $contains?: string\n  $notContains?: string\n  $startsWith?: string\n  $endsWith?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite3 Package via NPM\nDESCRIPTION: Command to install the sqlite3 package via npm, which is required for SQLite database integration with Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/sqlite3.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i sqlite3\n```\n\n----------------------------------------\n\nTITLE: Displaying TutorialKit Project Structure in Bash\nDESCRIPTION: Shows the folder and file structure of a TutorialKit project, including key configuration files and content directories.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── astro.config.mjs    # TutorialKit uses Astro 🚀 (https://astro.build)\n├── src\n│   ├── ...\n│   ├── content\n│   │   └── tutorial    # Your tutorial content lives here\n│   └── templates       # Your templates (see below for more information)\n├── public\n│   ├── favicon.svg\n│   └── logo.svg        # Default logo used in top left for your tutorial\n├── ...\n├── theme.ts            # Customize the theme of the tutorial\n└── uno.config.ts       # UnoCSS config (https://unocss.dev/)\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Command to display help information for the Angular CLI, providing guidance on available commands and their usage.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/angular/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Driver for Remult Application\nDESCRIPTION: Command to install the MongoDB package using npm. This is a prerequisite for using MongoDB with Remult.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/mongodb.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i mongodb\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CLI Globally\nDESCRIPTION: Command to install Angular CLI globally using npm, which is a prerequisite for creating and managing Angular projects.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g @angular/cli\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks via CURL Commands\nDESCRIPTION: Example CURL commands for creating tasks through the REST API endpoint.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/entities.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3002/api/tasks -d \"{\\\"title\\\": \\\"Clean car\\\"}\" -H \"Content-Type: application/json\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3002/api/tasks -d \"[{\\\"title\\\": \\\"Read a book\\\"},{\\\"title\\\": \\\"Take a nap\\\", \\\"completed\\\":true },{\\\"title\\\": \\\"Pay bills\\\"},{\\\"title\\\": \\\"Do laundry\\\"}]\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for SvelteKit Todo Example\nDESCRIPTION: This snippet shows the command to start the development server for the SvelteKit todo example application.\nSOURCE: https://github.com/remult/remult/blob/main/examples/sveltekit-todo/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Database to Railway\nDESCRIPTION: Command to add a PostgreSQL database to the Railway project.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nrailway add\n```\n\n----------------------------------------\n\nTITLE: Cloning Starter Project\nDESCRIPTION: Commands to clone the starter project from GitHub and install dependencies\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/index.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/remult/solid-start-app-starter.git remult-solid-start-todo\ncd remult-solid-start-todo\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning the Vue Express Starter Project\nDESCRIPTION: Commands to clone the vue-express-starter repository from GitHub and install its dependencies to quickly start a Vue project with Remult integration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/remult/vue-express-starter.git remult-vue-todo\ncd remult-vue-todo\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import Setup\nDESCRIPTION: Script setup block for importing the Icon component in a Vue.js file, used for displaying database provider icons in the documentation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/index.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Icon from '../../../components/Icon.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Filter Constructor with Consumer Application\nDESCRIPTION: Constructor for the Filter class that takes a function to apply filter conditions to a consumer. This provides a low-level way to build filter conditions programmatically.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(apply: (add: FilterConsumer) => void)\n```\n\n----------------------------------------\n\nTITLE: Installing Swagger UI Express Dependencies\nDESCRIPTION: Commands to install the required packages for adding Swagger UI to an Express-based Remult application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/adding-swagger.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i swagger-ui-express\nnpm i --save-dev @types/swagger-ui-express\n```\n\n----------------------------------------\n\nTITLE: Defining Compound Entity ID\nDESCRIPTION: Demonstrates how to define a compound ID for an entity using the updated entity ID definition syntax. This example creates an OrderDetails entity with a composite key of orderId and productCode.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity<OrderDetails>(\"orderDetails\", { id: { orderId: true, productCode: true } })\n```\n\n----------------------------------------\n\nTITLE: Creating React Project with Vite\nDESCRIPTION: Command to create a new React project using Vite with TypeScript template.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm create -y vite@latest remult-react-todo -- --template react-ts\ncd remult-react-todo\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Structures\nDESCRIPTION: Angular CLI command for scaffolding various application structures such as components, directives, services, etc.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/angular/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Cloning the Final Project with degit\nDESCRIPTION: Command to clone the completed tutorial project using degit, which downloads the finished todo application example from the Remult repository.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/index.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit remult/remult/examples/sveltekit-todo remult-sveltekit-todo\ncd remult-sveltekit-todo\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint\nDESCRIPTION: JavaScript fetch command to test the tasks API endpoint. Makes a GET request to retrieve all tasks and converts the response to JSON.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/1-introduction/2-rest-api/content.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch('/api/tasks').then((result) => result.json())\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variable File for NextAuth\nDESCRIPTION: Instructions to create a .env.local file with NextAuth secret required for authentication in the application.\nSOURCE: https://github.com/remult/remult/blob/main/examples/nextjs-todo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXTAUTH_SECRET=something-secret\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginator Interface for Query Pagination\nDESCRIPTION: Defines the Paginator interface that enables efficient pagination of query results. It provides properties for accessing the current page items, checking for next pages, getting total count, and navigating to the next page, with optional support for aggregates.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Paginator<entityType, AggregateResult = EmptyAggregateResult> = {\n  /** the items in the current page */\n  items: entityType[]\n  /** True if next page exists */\n  hasNextPage: boolean\n  /** the count of the total items in the `query`'s result */\n  count(): Promise<number>\n  /** Gets the next page in the `query`'s result set */\n  nextPage(): Promise<Paginator<entityType, AggregateResult>>\n} & (AggregateResult extends EmptyAggregateResult\n  ? {}\n  : {\n      aggregates: AggregateResult\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for TypeScript Decorators\nDESCRIPTION: Vite configuration to enable TypeScript decorators which are required by Remult for entity definitions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// vite.config.ts\n\n// ...\nexport default defineConfig({\n  plugins: [vue()],\n  esbuild: {\n    tsconfigRaw: {\n      compilerOptions: {\n        experimentalDecorators: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to build the application for production deployment.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/react/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests for the Angular application using the Karma test runner.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/angular/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Opening Railway Project in Browser\nDESCRIPTION: This shell command opens the Railway project in the default web browser for further configuration and management.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrailway open\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript\nDESCRIPTION: ESLint configuration setup for TypeScript project with module resolution and project file references. This configuration enables type-aware linting rules and sets up the parser for modern JavaScript features.\nSOURCE: https://github.com/remult/remult/blob/main/examples/bun-react-hono-monorepo-todo/packages/frontend/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth.js Package\nDESCRIPTION: Command to install the NextAuth.js authentication package via npm for implementing user authentication.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i next-auth\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Remult Server Types and Classes\nDESCRIPTION: Core server-side TypeScript declarations including data providers, live query storage, and server configuration interfaces. Includes implementations for file-based storage and SSE subscription server.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createRemultServerCore<RequestType>(\n  options: RemultServerOptions<RequestType>,\n  serverCoreOptions: ServerCoreOptions<RequestType>,\n): RemultServer<RequestType>\n\nexport declare class DataProviderLiveQueryStorage\n  implements LiveQueryStorage, Storage {\n  repo: Promise<Repository<LiveQueryStorageEntity>>\n  dataProvider: Promise<DataProvider>\n  constructor(\n    dataProvider:\n      | DataProvider\n      | Promise<DataProvider>\n      | (() => Promise<DataProvider | undefined>),\n  )\n  ensureSchema(): Promise<void>\n  add({ id, entityKey, data }: StoredQuery): Promise<void>\n  remove(queryId: string): Promise<void>\n  forEach(\n    entityKey: string,\n    callback: (args: {\n      query: StoredQuery\n      setData(data: any): Promise<void>\n    }) => Promise<void>,\n  ): Promise<void>\n  keepAliveAndReturnUnknownQueryIds(queryIds: string[]): Promise<string[]>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variable File for SvelteKit Todo Example\nDESCRIPTION: This snippet demonstrates how to create a .env.local file with an AUTH_SECRET environment variable, which is required for the application.\nSOURCE: https://github.com/remult/remult/blob/main/examples/sveltekit-todo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho AUTH_SECRET=something-secret > .env.local\n```\n\n----------------------------------------\n\nTITLE: Installing Turso Client Package for Remult\nDESCRIPTION: Command to install the @libsql/client package which is required to connect to Turso database from a Remult application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/turso.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @libsql/client\n```\n\n----------------------------------------\n\nTITLE: Instance Method for Getting Precise Values from Entity Filters\nDESCRIPTION: An instance method that retrieves precise values for each property in a filter for an entity. It works similarly to the static version but operates on an existing filter instance.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ngetPreciseValues<entityType>(): Promise<FilterPreciseValues<entityType>>\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Project with Vite\nDESCRIPTION: Commands to initialize a new Vue project using Vite and navigate to the project directory.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/vue.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm init -y vue@latest\ncd remult-vue-project\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 Project for Production\nDESCRIPTION: Commands to build the Nuxt 3 application for production deployment using different package managers.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/nuxt/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm run build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Converting Entity Filters to Data Provider Filters\nDESCRIPTION: Converts an EntityFilter to a Filter that can be used by the DataProvider. This method is primarily used internally by Remult to translate high-level filters to the format needed by data providers.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromEntityFilter<T>(\n  entity: EntityMetadata<T>,\n  whereItem: EntityFilter<T>,\n): Filter\n```\n\n----------------------------------------\n\nTITLE: Updating JSX to Toggle Task Completion in React\nDESCRIPTION: This snippet modifies the JSX to add an onChange handler to the checkbox input. When toggled, it calls the setCompleted function with the current task and the new checked status.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/3-manipulating-data/2-update/content.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  tasks.map((task) => {\n    return (\n      <div key={task.id}>\n        <input\n          type=\"checkbox\"\n          checked={task.completed}\n          onChange={(e) => setCompleted(task, e.target.checked)}\n        />\n        {task.title}\n      </div>\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Railway Project Initialization and Deployment Commands\nDESCRIPTION: Series of Railway CLI commands to initialize a new project, open the railway dashboard, and deploy the application to Railway's platform.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/deployment.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Defining SqlResult Interface for Query Results\nDESCRIPTION: Interface for SQL query results, containing rows of data and a method to get column names from result sets.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SqlResult {\n  rows: any[]\n  getColumnKeyInResultForIndexInSelect(index: number): string\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change into the newly created project directory after initialization.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/index.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd remult-sveltekit-todo\n```\n\n----------------------------------------\n\nTITLE: Specifying HTML Input Type\nDESCRIPTION: Example of defining the HTML input element type for the value converter.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_valueconverter.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninputType = 'date';\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variable File with Echo Command\nDESCRIPTION: Alternative command to create the .env.local file using a bash echo command, which writes the NextAuth secret to the file.\nSOURCE: https://github.com/remult/remult/blob/main/examples/nextjs-todo/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho NEXTAUTH_SECRET=something-secret > .env.local\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component in Server Selection Page\nDESCRIPTION: Sets up a Vue component import for the Icon component that's used to display server framework options. The import statement uses the Vue composition API's setup script syntax.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/index.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Icon from '../../../components/Icon.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in React Component\nDESCRIPTION: This snippet demonstrates how to handle validation errors in a React component using a try-catch block and displaying the error message in an alert.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/4-validation/1-required/content.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function addTask(e: FormEvent) {\n  e.preventDefault()\n  try {\n    const newTask = await taskRepo.insert({ title: newTaskTitle })\n    setTasks([...tasks, newTask])\n    setNewTaskTitle('')\n  } catch (error: any) {\n    alert((error as { message: string }).message)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB Package\nDESCRIPTION: NPM command to install the DuckDB package as a dependency.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/duckdb.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i duckdb\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server for the Todo application, which will serve the application locally for development.\nSOURCE: https://github.com/remult/remult/blob/main/examples/nextjs-todo/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Homepage Layout for Remult\nDESCRIPTION: YAML frontmatter configuration for the Remult homepage using VitePress. This includes metadata for social media sharing, hero section with actions, and six feature highlights that explain Remult's key capabilities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\ntitleTemplate: Fullstack Type-safe CRUD & Realtime\n\nhead:\n  - - meta\n    - property: og:type\n      content: website\n  - - meta\n    - property: og:title\n      content: Remult\n  - - meta\n    - property: og:image\n      content: https://remult.dev/logo_sm.png\n  - - meta\n    - property: og:url\n      content: https://remult.dev/\n  - - meta\n    - property: og:description\n      content: Fullstack Type-safe CRUD & Realtime library\n  - - meta\n    - name: twitter:card\n      content: summary_large_image\n\nhero:\n  name: 'remult'\n  text: 'Fullstack Type-safe CRUD & Realtime'\n  tagline: 'Boost your TypeScript stack with SSOT entities and say goodbye to boilerplate code.'\n  image:\n    src: /logo.png\n    alt: Remult\n  actions:\n    - theme: brand\n      text: 🚀 Online Tutorial\n      link: https://learn.remult.dev/\n    - theme: alt\n      text: Documentation\n      link: /docs/\n    - theme: alt\n      text: GitHub\n      link: https://github.com/remult/remult\n\nfeatures:\n  - icon: 🔗\n    title: API Included\n    details: Secure API is auto-generated from model TypeScript classes, and consumed by frontend type-safe queries. The generated API can also be used by apps & third-parties.\n\n  - icon: ✔️\n    title: No Boilerplate\n    details: Simple CRUD from frontend to database just works. Smart hooks make it super easy to control data transformation, validations and CRUD events.\n\n  - icon: ⭐\n    title: Framework Agnostic\n    details: 'Use Remult with any UI framework, web framework or meta-framework, including: React, Vue, Svelte, Angular, Express, Fastify, NestJS, Next.js, SvelteKit...'\n\n  - icon: 📋\n    title: Highly Declarative\n    details: Model metadata and declarative code affect both frontend and backend, eliminating redundant, error-prone duplication.\n\n  - icon: 🛡️\n    title: Always Type-safe\n    details: The same type-safe coding style can be used to find and manipulate data in both frontend and backend code.\n\n  - icon: ⚡\n    title: Easy Setup\n    details: Begin with just a middleware in your existing stack, and gradually enhance your app with Remult's features. Add what you need, when you need it.\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Nuxt Todo Example\nDESCRIPTION: Commands to clone the Nuxt Todo example project using degit, install dependencies, and start the development server.\nSOURCE: https://github.com/remult/remult/blob/main/examples/nuxt-todo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit remult/remult/examples/nuxt-todo remult-nuxt-todo\ncd remult-nuxt-todo\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Styling Todo App with CSS\nDESCRIPTION: CSS styles for the Todo application, including styling for the task list, checkboxes, inputs, and overall layout.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/entities.md#2025-04-16_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@charset \"utf-8\";\n\nbody {\n  font-family: Arial;\n  background-color: whitesmoke;\n  justify-content: center;\n  margin: 0;\n}\n\nh1 {\n  color: #ef4444;\n  font-style: italic;\n  font-size: 3.75rem;\n  font-weight: inherit;\n  text-align: center;\n}\n\nmain {\n  max-width: 500px;\n  min-width: 300px;\n  margin: auto;\n  background-color: white;\n  box-sizing: border-box;\n  border: 1px solid lightgray;\n  border-radius: 0.5rem;\n  box-shadow:\n    0 2px 4px #0003,\n    0 25px 50px #0000001a;\n}\n\nmain > div,\nmain > form {\n  padding: 0.5rem 1rem;\n  border-bottom: 1px solid lightgray;\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n  justify-content: space-between;\n}\n\nmain > div:has(input[type='checkbox']) {\n  justify-content: inherit;\n}\n\ninput {\n  font-family: inherit;\n  font-size: 100%;\n  width: 100%;\n  border: 0;\n  padding: 0.5rem;\n}\n\ninput:checked + input,\ninput:checked + span {\n  text-decoration: line-through;\n}\n\ninput:placeholder-shown {\n  font-style: italic;\n}\n\ninput[type='checkbox'] {\n  width: 36px;\n  height: 36px;\n  height: 1.5rem;\n}\n\nbutton {\n  cursor: pointer;\n  padding: 0.5rem 0.5rem;\n  background-color: white;\n  font-family: inherit;\n  font-size: 85%;\n  line-height: inherit;\n  border: 2px solid #0000001a;\n  border-radius: 0.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a simple AppModule in Nest.js\nDESCRIPTION: This code snippet defines a basic AppModule for a Nest.js application. It uses the @Module decorator to declare an empty module, which serves as the root module for the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/nest.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.module.ts\n\nimport { Module } from '@nestjs/common'\n\n@Module({})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server for the project.\nSOURCE: https://github.com/remult/remult/blob/main/examples/nextjs-app-router-todo/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Server TypeScript Configuration\nDESCRIPTION: JSON configuration for the server's TypeScript compiler options.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/index.md#2025-04-16_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\",\n    \"module\": \"nodenext\"\n  },\n  \"include\": [\"src/server/**/*\", \"src/shared/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Script for Starting Fastify Server with Remult\nDESCRIPTION: NPM script configuration for the package.json file that sets up a development server using tsx. It watches for file changes and loads environment variables.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/fastify.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"dev-node\": \"tsx watch --env-file=.env --tsconfig tsconfig.server.json src/server\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Repository Field Metadata Example in TypeScript\nDESCRIPTION: Shows how to access field metadata through the repository's fields member. This pattern allows developers to retrieve field properties like caption or inputType.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nrepo.fields.title.caption\n//or\nrepo.fields.title.inputType\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change to the project directory after creation.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/index.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd remult-nextjs-todo\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Components for Remult Documentation\nDESCRIPTION: Vue script setup block that imports the Example component for use in the documentation page.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/creating-a-project.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import Example from '../components/Example.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Client for Node.js\nDESCRIPTION: Command to install the pg package (node-postgres) which provides the PostgreSQL client for Node.js applications.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/postgresql.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i pg\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryResult Interface for Entity Query Results\nDESCRIPTION: Interface defining the structure of query result objects. It provides methods for async iteration, counting, pagination, and batch operations on query results, supporting efficient data processing for large datasets.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface QueryResult<\n  entityType,\n  AggregateResult = EmptyAggregateResult,\n> {\n  /** returns an iterator that iterates the rows in the result using a paging mechanism\n   * @example\n   * for await (const task of taskRepo.query()) {\n   *   await taskRepo.save({ ...task, completed });\n   * }\n   */\n  [Symbol.asyncIterator](): {\n    next: () => Promise<IteratorResult<entityType, entityType>>\n  }\n  /** returns the number of rows that match the query criteria */\n  count(): Promise<number>\n  /** gets the items in a specific page */\n  getPage(pageNumber?: number): Promise<entityType[]>\n  /** Performs an operation on all the items matching the query criteria */\n  forEach(what: (item: entityType) => Promise<any>): Promise<number>\n  /** Returns a `Paginator` object that is used for efficient paging */\n  paginator(): Promise<Paginator<entityType, AggregateResult>>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Railway Project using CLI\nDESCRIPTION: Command to initialize a new Railway project using the Railway CLI.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/deployment.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrailway init\n```\n\n----------------------------------------\n\nTITLE: Translating Custom Where Filters\nDESCRIPTION: Static method to translate custom where filters. This is used internally to translate custom filters to standard filter representations that can be processed by data providers.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nstatic translateCustomWhere<T>(\n  r: Filter,\n  entity: EntityMetadata<T>,\n  remult: Remult,\n): Promise<Filter>\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: This command starts the Angular development server for the Remult Angular Todo project.\nSOURCE: https://github.com/remult/remult/blob/main/examples/angular-todo-fastify/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating New SolidStart Project Command\nDESCRIPTION: Command to initialize a new SolidStart project using npm\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/solid.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm init solid@latest remult-solid-start\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Commands to start the Nuxt development server on http://localhost:3000 using different package managers\nSOURCE: https://github.com/remult/remult/blob/main/projects/test-servers/nuxt-server/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm run dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Development Server\nDESCRIPTION: Command to start the Node.js development server for the backend of the todo application.\nSOURCE: https://github.com/remult/remult/blob/main/examples/vue-todo/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Starting the Fastify Development Server\nDESCRIPTION: Command to run the development server script that was configured in package.json. This starts the Fastify server with hot reloading.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/fastify.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Framework Selection Grid with Icons\nDESCRIPTION: A responsive grid layout that displays framework icons as clickable links to their respective installation documentation pages. The grid uses CSS grid layout to create an auto-filling responsive design.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/index.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 5rem; margin-top: 2rem\">\n\t<Icon tech=\"react\" sizeIco=150 link=\"/docs/installation/framework/react\" />\n\t<Icon tech=\"angular\" sizeIco=150 link=\"/docs/installation/framework/angular\" />\n\t<Icon tech=\"vue\" sizeIco=150 link=\"/docs/installation/framework/vue\" />\n\t<Icon tech=\"nextjs\" sizeIco=150 link=\"/docs/installation/framework/nextjs\" />\n\t<Icon tech=\"svelte\" sizeIco=150 link=\"/docs/installation/framework/sveltekit\" />\n\t<Icon tech=\"nuxt\" sizeIco=150 link=\"/docs/installation/framework/nuxt\" />\n\t<Icon tech=\"solid\" sizeIco=150 link=\"/docs/installation/framework/solid\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Project using degit\nDESCRIPTION: Command to clone the final result of the tutorial using degit\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/index.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit remult/remult/examples/solid-start-todo remult-solid-start-todo\ncd remult-solid-start-todo\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing SolidStart Todo Application\nDESCRIPTION: This snippet shows the bash commands to download the source code for the SolidStart todo application using degit, navigate to the project directory, and install dependencies.\nSOURCE: https://github.com/remult/remult/blob/main/examples/solid-start-todo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit remult/remult/examples/solid-start-todo solid-start-todo\ncd solid-start-todo\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt 3 Production Build Locally\nDESCRIPTION: Commands to locally preview the production build of a Nuxt 3 application using different package managers.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/nuxt/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm run preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Using Remult Upsert Method for Batch Operations\nDESCRIPTION: Example of using the upsert method for batch operations, allowing multiple entities to be inserted or updated in a single operation based on their respective where conditions.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Batch upsert\nawait taskRepo.upsert([\n  { where: { title: 'task a' }, set: { completed: true } },\n  { where: { title: 'task b' }, set: { completed: true } },\n])\n```\n\n----------------------------------------\n\nTITLE: Running Node Development Server\nDESCRIPTION: This command starts the Node development server for the Remult Angular Todo project.\nSOURCE: https://github.com/remult/remult/blob/main/examples/angular-todo/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Tasks with cURL POST Request\nDESCRIPTION: Command to create multiple tasks at once by sending a POST request with an array of task objects in JSON format.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/entities.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:3002/api/tasks -d \"[{\\\"title\\\": \\\"Read a book\\\"},{\\\"title\\\": \\\"Take a nap\\\", \\\"completed\\\":true },{\\\"title\\\": \\\"Pay bills\\\"},{\\\"title\\\": \\\"Do laundry\\\"}]\" -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Routes in SvelteKit\nDESCRIPTION: Server endpoint setup for Remult API that exposes HTTP methods (GET, POST, PUT, DELETE) to handle CRUD operations through the SvelteKit server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/index.md#2025-04-16_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { api } from '../../../server/api'\n\nexport const { GET, POST, PUT, DELETE } = api\n```\n\n----------------------------------------\n\nTITLE: Package.json Start Script\nDESCRIPTION: NPM script configuration for starting the production Node.js server.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/deployment.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"start\": \"node dist/server/\"\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variable for NextAuth Secret\nDESCRIPTION: Command to create a .env.local file with a NextAuth secret for the project.\nSOURCE: https://github.com/remult/remult/blob/main/examples/nextjs-app-router-todo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho NEXTAUTH_SECRET=something-secret > .env.local\n```\n\n----------------------------------------\n\nTITLE: Testing API Access with cURL\nDESCRIPTION: This command tests the API access protection by sending an HTTP request to the tasks endpoint and checking the server response.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i http://localhost:3002/api/tasks\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server\nDESCRIPTION: Command to start the server in production mode after building the application.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/react/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Remult Project in Development Mode with Bun\nDESCRIPTION: This command starts the Remult project in development mode using Bun. After running this command, the application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/remult/remult/blob/main/examples/bun-react-hono-monorepo-todo/packages/backend/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun for Remult Project\nDESCRIPTION: This command uses Bun to install the project dependencies. It should be run in the project root directory before starting the application.\nSOURCE: https://github.com/remult/remult/blob/main/examples/bun-react-hono-monorepo-todo/packages/backend/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Entity Type Specification in Field Decorators (Previous Implementation)\nDESCRIPTION: Previous implementation of field decorators that doesn't specify the entity type in the generic definition, causing type errors in TypeScript 5.4.\nSOURCE: https://github.com/remult/remult/blob/main/CHANGELOG.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Fields.string({\n  validate: task => task.title.length > 2\n})\ntitle=''\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Oracle and Knex Integration\nDESCRIPTION: Command to install knex and oracledb packages using npm.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/oracle.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i knex oracledb\n```\n\n----------------------------------------\n\nTITLE: Building a SvelteKit Project for Production\nDESCRIPTION: Command to create a production-ready build of a SvelteKit application, optimizing it for deployment. This generates static assets that can be served by a web server.\nSOURCE: https://github.com/remult/remult/blob/main/projects/test-servers/sveltekit-server/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Decorators in tsconfig.json\nDESCRIPTION: Configuration update to enable experimental decorators in TypeScript, which are required for Remult entity definitions.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/index.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Development Server\nDESCRIPTION: Command to start the backend server in watch mode, which automatically restarts when code changes are detected.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/react/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Disabling Task Filtering in Remult\nDESCRIPTION: This snippet shows how to comment out the filtering option to retrieve all tasks, while maintaining the limit and sorting functionality.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/sorting-filtering.md#2025-04-16_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n$effect(() => {\n  repo(Task)\n    .find({\n        limit: 20,\n        orderBy: { createdAt: \"asc\" }\n        // where: { completed: true }\n    })\n    .then((t) => (tasks = t));\n});\n```\n\n----------------------------------------\n\nTITLE: Updating React Root Component to Use Authentication\nDESCRIPTION: This code modifies the main React entry point to render the Auth component instead of the App component, enabling the authentication flow for the application.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/auth.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\"\nimport ReactDOM from \"react-dom/client\"\nimport Auth from \"./Auth\"\nimport \"./index.css\"\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n  <React.StrictMode>\n    <Auth />\n  </React.StrictMode>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing React Task List Component\nDESCRIPTION: React component that fetches and displays tasks using Remult repository pattern. Includes checkbox for completion status and title display.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/entities.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react'\nimport { remult } from 'remult'\nimport { Task } from './shared/Task'\n\nconst taskRepo = remult.repo(Task)\n\nexport default function App() {\n  const [tasks, setTasks] = useState<Task[]>([])\n\n  useEffect(() => {\n    taskRepo.find().then(setTasks)\n  }, [])\n  return (\n    <div>\n      <h1>Todos</h1>\n      <main>\n        {tasks.map((task) => {\n          return (\n            <div key={task.id}>\n              <input type=\"checkbox\" checked={task.completed} />\n              {task.title}\n            </div>\n          )\n        })}\n      </main>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Project to Railway\nDESCRIPTION: Command to upload the local project to Railway for deployment.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react/deployment.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server\nDESCRIPTION: Command to start the React development server using npm run script.\nSOURCE: https://github.com/remult/remult/blob/main/examples/react-todo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a new Nuxt project with command line\nDESCRIPTION: Commands to initialize a new Nuxt project and navigate to the project directory.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nuxt.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx nuxi init remult-nuxt-todo\ncd remult-nuxt-todo\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Integration Types - TypeScript\nDESCRIPTION: Type declarations for integrating Remult with SvelteKit, including server options and request handlers.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function remultSveltekit(\n  options: RemultServerOptions<RequestEvent>,\n): RemultSveltekitServer\nexport type RemultSveltekitServer = RemultServerCore<RequestEvent> &\n  Handle & {\n    withRemult: RemultServer<RequestEvent>[\"withRemultAsync\"]\n    GET: RequestHandler\n    PUT: RequestHandler\n    POST: RequestHandler\n    DELETE: RequestHandler\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Node Adapter for Sveltekit\nDESCRIPTION: Command to install the Node.js adapter for Sveltekit deployment.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @sveltejs/adapter-node --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with NPM\nDESCRIPTION: Command to install all required project dependencies using npm package manager.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/react/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Declaring TestApiDataProvider Function for Testing\nDESCRIPTION: Defines a function to create a RestDataProvider for testing APIs. It accepts schema management and data provider options, allowing for isolated API testing with configurable data storage.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function TestApiDataProvider(\n  options?: Pick<RemultServerOptions<unknown>, \"ensureSchema\" | \"dataProvider\">,\n): RestDataProvider\n//[ ] RestDataProvider from TBD is not exported\n```\n\n----------------------------------------\n\nTITLE: Starting a Fresh Project with Deno\nDESCRIPTION: Command to start a Fresh project using Deno's task runner. This command will watch the project directory for changes and automatically restart the server as necessary.\nSOURCE: https://github.com/remult/remult/blob/main/projects/test-servers/deno-fresh/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno task start\n```\n\n----------------------------------------\n\nTITLE: Limiting Fetched Tasks with Remult in TypeScript\nDESCRIPTION: This snippet demonstrates how to limit the number of tasks fetched from the database to 20 using Remult's find method. It sets the 'limit' property in the options object passed to the find method.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/sorting-filtering.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nonMounted(() =>\n  taskRepo\n    .find({\n      limit: 20\n    })\n    .then(items => (tasks.value = items))\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Next.js development server with Remult integration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/nextjs.md#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Remult Tutorial Environment in YAML\nDESCRIPTION: This YAML configuration defines the setup for a Remult interactive tutorial. It specifies the tutorial type, main command for starting the HTTP server, preparation commands for installing dependencies, and provides an edit link to the GitHub repository.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/meta.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: tutorial\nmainCommand: ['npm run dev', 'Starting http server']\nprepareCommands:\n  - ['npm install', 'Installing dependencies']\neditPageLink: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/${path}?plain=1\n```\n\n----------------------------------------\n\nTITLE: Markdown Section Header\nDESCRIPTION: YAML frontmatter defining a documentation section titled 'In Depth' with associated metadata\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/meta.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: part\ntitle: In Depth\nslug: in-depth\n---\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project, which compiles and bundles the application for deployment.\nSOURCE: https://github.com/remult/remult/blob/main/projects/create-remult/templates/angular/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to run the SvelteKit development server, making the application available at http://localhost:5173.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/index.md#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Vue Development Server\nDESCRIPTION: Command to start the Vue development server using the npm run dev script.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database Provider in Remult (TypeScript)\nDESCRIPTION: This code snippet shows how to set up Remult to use SQLite as the data provider. It demonstrates the configuration of the remultExpress function with SQLite database integration.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/8-Database/1-connection-to-a-database/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const api = remultExpress({\n  entities: [Task],\n  controllers: [TasksController],\n  dataProvider: new SqlDatabase(\n    new Sqlite3DataProvider(new sqlite3.Database('.database.sqlite')),\n  ),\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Sign-Out Functionality to AuthController\nDESCRIPTION: Implements the sign-out method to clear user session and authentication state.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/1-basics/7-auth/2-user-authentication/content.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AuthController {\n  @BackendMethod({ allowed: true })\n  static async signIn(name: string) {\n    //...\n  }\n\n  @BackendMethod({ allowed: true })\n  static async signOut() {\n    remult.context.request!.session!['user'] = undefined\n    return undefined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Remult Next.js Todo Example\nDESCRIPTION: Commands to download the Next.js Todo example from the Remult repository using degit, navigate to the project directory, and install dependencies.\nSOURCE: https://github.com/remult/remult/blob/main/examples/nextjs-todo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit remult/remult/examples/nextjs-todo nextjs-todo\ncd nextjs-todo\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Suite in Remult\nDESCRIPTION: Example command to run tests for a specific area like GraphQL\nSOURCE: https://github.com/remult/remult/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run only test for graphql for example\nnpm run test projects/tests/graphql.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Running the Node.js Server for Backend\nDESCRIPTION: Command to start the Node.js backend server using the npm run dev-node script.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/index.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev-node\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Requirements in Task Entity\nDESCRIPTION: Configures the Task entity to require authenticated users for all CRUD operations by setting the allowApiCrud property to Allow.authenticated in the Entity decorator.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/react-next/auth.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/shared/Task.ts\n\n@Entity(\"tasks\", {\n    allowApiCrud: Allow.authenticated\n})\n```\n\n----------------------------------------\n\nTITLE: Downloading and Setting Up the React-Todo Example Project\nDESCRIPTION: Commands to download the React-Todo example from the Remult GitHub repository, navigate to the project directory, and install dependencies.\nSOURCE: https://github.com/remult/remult/blob/main/examples/react-todo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit remult/remult/examples/react-todo react-todo\ncd react-todo\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing SvelteKit Todo Example with Remult\nDESCRIPTION: This snippet shows how to download the source code for the SvelteKit todo example using degit, navigate to the project directory, and install dependencies.\nSOURCE: https://github.com/remult/remult/blob/main/examples/sveltekit-todo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit remult/remult/examples/sveltekit-todo remult-sveltekit-todo\ncd remult-sveltekit-todo\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Commands to build the Nuxt application for production using different package managers\nSOURCE: https://github.com/remult/remult/blob/main/projects/test-servers/nuxt-server/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm run build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory\nDESCRIPTION: Command to change directory to the newly created project\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/solid.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd remult-solid-start\n```\n\n----------------------------------------\n\nTITLE: Project Setup Prompts\nDESCRIPTION: Configuration prompts for setting up the SolidStart project with TypeScript\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/framework/solid.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\no  Is this a Solid-Start project?   Yes\no  Which template would you like to use?   basic\no  Use TypeScript?   Yes\n```\n\n----------------------------------------\n\nTITLE: Running Vue.js Development Server\nDESCRIPTION: Command to start the Vue.js development server for the frontend of the todo application.\nSOURCE: https://github.com/remult/remult/blob/main/examples/vue-todo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Example JSON Result Structure\nDESCRIPTION: Shows the resulting JSON structure when retrieving a customer with their associated tags.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/entity-relations.md#2025-04-16_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"fki6t24zkykpljvh4jurzs97\",\n  \"name\": \"Abshire Inc\",\n  \"city\": \"New York\",\n  \"tags\": [\n    {\n      \"customerId\": \"fki6t24zkykpljvh4jurzs97\",\n      \"tagId\": \"aewm0odq9758nopgph3x7brt\",\n      \"tag\": {\n        \"id\": \"cf8xv3myluc7pmsgez3p9hn9\",\n        \"name\": \"vip\"\n      }\n    },\n    {\n      \"customerId\": \"fki6t24zkykpljvh4jurzs97\",\n      \"tagId\": \"aewm0odq9758nopgph3x7brt\",\n      \"tag\": {\n        \"id\": \"aewm0odq9758nopgph3x7brt\",\n        \"name\": \"influencer\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Remult in Nest.js main.ts\nDESCRIPTION: This code snippet shows how to set up the main entry point for a Nest.js application with Remult integration. It creates a Nest.js application, integrates Remult as middleware, and starts the server on port 3002.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/server/nest.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/main.ts\n\nimport { NestFactory } from '@nestjs/core'\nimport { AppModule } from './app.module'\nimport { remultExpress } from 'remult/remult-express'\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n\n  app.use(remultExpress()) // Integrate Remult as middleware\n\n  await app.listen(3002) // Start server on port 3002\n}\nbootstrap()\n```\n\n----------------------------------------\n\nTITLE: Using Existing Knex Provider with Remult\nDESCRIPTION: This snippet shows how to use an existing Knex provider with Remult. It demonstrates creating a Knex instance and passing it to the KnexDataProvider.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/quickstart.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { KnexDataProvider } from 'remult/remult-knex'\nimport { remultExpress } from 'remult/remult-express'\nimport knex from 'knex'\n\nconst knexDb = knex({\n  client: '...',\n  connection: '...',\n})\n\nconst app = express()\n\napp.use(\n  remultExpress({\n    dataProvider: new KnexDataProvider(knexDb), // [!code highlight]\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Preventing API Updates for Fields\nDESCRIPTION: Example showing how to prevent a field from being updated through the API while still allowing server-side updates, useful for fields like createdBy that should be set once.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_field.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Prevent API from updating this field\n@Fields.string({ allowApiUpdate: false })\ncreatedBy = remult.user?.id;\n```\n\n----------------------------------------\n\nTITLE: Adding Buttons for Bulk Task Completion in Svelte Component\nDESCRIPTION: This snippet adds two buttons to the Svelte component's markup for setting all tasks as completed or incomplete, using the setAllCompleted function.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/backend-methods.md#2025-04-16_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<main>\n  <!-- ... -->\n  <div>\n    <button onclick={() => setAllCompleted(true)}>Mark All Completed</button>\n    <button onclick={() => setAllCompleted(false)}>Mark All Incomplete</button>\n  </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: FindFirstOptionsBase Interface Definition\nDESCRIPTION: Base interface for options specific to finding the first entity. It includes options for caching results and creating entities if not found.\nSOURCE: https://github.com/remult/remult/blob/main/misc/public-api.md#2025-04-16_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FindFirstOptionsBase<entityType>\n  extends LoadOptions<entityType> {\n  /** determines if to cache the result, and return the results from cache.\n   */\n  useCache?: boolean\n  /** If set to true and an item is not found, it's created and returned*/\n  createIfNotFound?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Excluding Server-Only Packages\nDESCRIPTION: Configuration for Vite bundler to exclude server-only packages from the frontend bundle, preventing compilation errors.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/using-server-only-packages.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  build: {    \n    rollupOptions: {      \n      external: ['fs', 'nodemailer', 'node-fetch'], \n    }, \n  }, \n  optimizeDeps: {    \n    exclude: ['fs', 'nodemailer', 'node-fetch'], \n  }, \n})\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component in Vue\nDESCRIPTION: This snippet demonstrates how to import the Icon component in a Vue.js setup script. It's likely used for rendering technology icons in the learning paths section.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Icon from '../components/Icon.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Refactoring Client Component to Use Backend Method\nDESCRIPTION: Updates the client-side setAllCompleted function to call the backend method instead of performing the logic locally, improving performance for operations on multiple entities.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/solid-start/backend-methods.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function setAllCompleted(completed: boolean) {\n  await TasksController.setAllCompleted(completed)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Fetch API with Remult\nDESCRIPTION: Example showing how to explicitly set the default fetch API as Remult's HTTP client.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/ref_apiclient.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Using fetch (default)\nremult.apiClient.httpClient = fetch;\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Captions in TypeScript\nDESCRIPTION: Demonstrates how to access field captions from a Remult repository using the fields property.\nSOURCE: https://github.com/remult/remult/blob/main/docs/interactive/src/content/tutorial/4-concepts/8-entities-as-a-single-source-of-truth/1-field-meta-data/content.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst titleCaption = repo(Task).fields.title.caption\nconsole.log(titleCaption) // Outputs: \"The Task Title\"\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build\nDESCRIPTION: Commands to locally preview the production build using different package managers\nSOURCE: https://github.com/remult/remult/blob/main/projects/test-servers/nuxt-server/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm run preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Installing Authentication Dependencies\nDESCRIPTION: Shell commands to install cookie-session package and its TypeScript types\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/auth.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i cookie-session\nnpm i --save-dev @types/cookie-session\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres Node Driver\nDESCRIPTION: Command to install the postgres-node (pg) package as a project dependency\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/vue/database.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i pg\n```\n\n----------------------------------------\n\nTITLE: Creating a New Angular Project\nDESCRIPTION: Command to create a new Angular project named 'remult-angular-todo' using Angular CLI.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/angular/index.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nng new remult-angular-todo\n```\n\n----------------------------------------\n\nTITLE: Running SolidStart Development Server\nDESCRIPTION: This bash command starts the development server for the SolidStart todo application.\nSOURCE: https://github.com/remult/remult/blob/main/examples/solid-start-todo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Better-sqlite3 Package\nDESCRIPTION: Command for installing the better-sqlite3 package via npm.\nSOURCE: https://github.com/remult/remult/blob/main/docs/docs/installation/database/better-sqlite3.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i better-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Deploying Project to Railway\nDESCRIPTION: Command to deploy the application to Railway platform.\nSOURCE: https://github.com/remult/remult/blob/main/docs/tutorials/sveltekit/deployment.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nrailway up\n```"
  }
]