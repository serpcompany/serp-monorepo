[
  {
    "owner": "logto-io",
    "repo": "docs.git",
    "content": "TITLE: Initializing Logto Client with Basic Configuration in Python\nDESCRIPTION: Creates an instance of LogtoClient with essential configuration parameters including endpoint URL, application ID and secret. This is the first step to integrate Logto authentication in a Python application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/_init-logto-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import LogtoClient, LogtoConfig\n\nclient = LogtoClient(\n    LogtoConfig(\n        endpoint=\"https://you-logto-endpoint.app\",  # Replace with your Logto endpoint\n        appId=\"replace-with-your-app-id\",\n        appSecret=\"replace-with-your-app-secret\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication for React Native\nDESCRIPTION: This snippet shows how to create a LogtoConfig object for a React Native application. It includes setting the application ID, Logto endpoint, custom scopes for different permissions, and resource URLs for API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication in React Native with Logto\nDESCRIPTION: This code snippet demonstrates how to create a React Native component that handles user authentication using the Logto library. It includes functionality for signing in, signing out, and fetching user information when authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_fetch-user-info-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { fetchUserInfo, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // highlight-start\n      fetchUserInfo().then((userInfo) => {\n        setUser(userInfo);\n      });\n      // highlight-end\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out using Logto hooks in React\nDESCRIPTION: A React component example that demonstrates how to implement authentication using Logto's useLogto hook. The component renders different buttons based on authentication state, allowing users to sign in with a redirect callback URL or sign out when already authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return isAuthenticated ? (\n    <button onClick={signOut}>Sign Out</button>\n  ) : (\n    <button onClick={() => signIn('http://localhost:3000/callback')}>Sign In</button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Logto React Native SDK Configuration in TypeScript\nDESCRIPTION: This snippet shows how to create a `LogtoConfig` object in TypeScript for the Logto React Native SDK. It specifies the application ID, Logto endpoint URL, requested permission scopes ('read', 'write'), and the API resources the application intends to access. This configuration is necessary for initializing the SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"App.tsx\"\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['read', 'write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In in Flutter with Logto\nDESCRIPTION: This code snippet shows how to implement a sign-in button and initiate the Logto sign-in flow in a Flutter application. It includes setting up the redirect URI and calling the logtoClient.signIn method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  final redirectUri = 'io.logto://callback';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signInButton = TextButton(\n      onPressed: () async {\n        await logtoClient.signIn(redirectUri);\n        render();\n      },\n      child: const Text('Sign In'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Social Sign-in User Flow with Mermaid Diagram\nDESCRIPTION: This diagram illustrates the sequence flow between a user, client application, sign-in page, Logto core service, and social identity provider during a social sign-in process. It shows the complete authentication flow from initial visit to successful redirection back to the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-up-and-sign-in/social-sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor user as User\n    participant app as Client Application\n    participant experience as Sign-in page\n    participant logto as Logto core service\n    participant social as Social Identity Provider\n\n    user->>app: Visit the application\n    app->>experience: Redirect to sign-in page\n    user->>experience: Click on social sign-in button\n    experience->>Logto: Request to sign-in with social connector\n    Logto-->>experience: Return social provider's authentication URL\n    experience->>social: Redirect to social provider's authentication page\n    user->>social: Enter social credentials\n    social-->>experience: Authenticate user and redirect back to Logto sign-in page\n    experience->>Logto: Validate social authentication data and user identity\n    Logto->>app: Authenticate user and redirect back to the application\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in React Component\nDESCRIPTION: This code snippet demonstrates how to use the useLogto hook to implement sign-in and sign-out functionality in a React component. It conditionally renders a button based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return isAuthenticated ? (\n    <button onClick={signOut}>Sign Out</button>\n  ) : (\n    <button onClick={() => signIn('http://localhost:3000/callback')}>Sign In</button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Callback in Rails Controller\nDESCRIPTION: Implements a callback action in a Rails controller to process the authentication response from Logto after a user signs in. The callback uses the original request URL to complete the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def callback\n    @client.handle_sign_in_callback(url: request.original_url)\n  end\n  # highlight-end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Passport.js with OpenID Connect Strategy in TypeScript\nDESCRIPTION: This snippet sets up Passport.js with OpenID Connect strategy, configuring the necessary endpoints and credentials. It also defines serialization and deserialization methods for user objects.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport passport from 'passport';\nimport OpenIDConnectStrategy, { type Profile, type VerifyCallback } from 'passport-openidconnect';\n\nconst endpoint = '<your-logto-endpoint>';\nconst appId = '<your-application-id>';\nconst appSecret = '<your-application-secret>';\n\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        issuer: `${endpoint}/oidc`,\n        authorizationURL: `${endpoint}/oidc/auth`,\n        tokenURL: `${endpoint}/oidc/token`,\n        userInfoURL: `${endpoint}/oidc/me`,\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        scope: ['profile', 'offline_access'],\n      },\n      (issuer: string, profile: Profile, callback: VerifyCallback) => {\n        callback(null, profile);\n      }\n    )\n  );\n\n  passport.serializeUser((user, callback) => {\n    callback(null, user);\n  });\n\n  passport.deserializeUser(function (user, callback) {\n    callback(null, user as Express.User);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Angular Template\nDESCRIPTION: This HTML template snippet shows how to conditionally render user information and authentication buttons based on the authentication status. It displays the ID token claims and access token when the user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button *ngIf=\"!isAuthenticated\" (click)=\"signIn()\">Anmelden</button>\n<ng-container *ngIf=\"isAuthenticated\">\n  <pre>{{ idTokenClaims | json }}</pre>\n  <p>Zugangstoken: {{ accessToken }}</p>\n  <!-- ... -->\n  <button (click)=\"signOut()\">Abmelden</button>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out UI in Next.js with Logto\nDESCRIPTION: This React component demonstrates how to implement sign-in and sign-out functionality in a Next.js application using Logto. It uses SWR for fetching the authentication status and displays appropriate buttons based on the user's authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoContext } from '@logto/next';\nimport useSWR from 'swr';\n\nconst Home = () => {\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\n\n  return (\n    <nav>\n      {data?.isAuthenticated ? (\n        <p>\n          Hallo, {data.claims?.sub},\n          <button\n            onClick={() => {\n              window.location.assign('/api/logto/sign-out');\n            }}\n          >\n            Abmelden\n          </button>\n        </p>\n      ) : (\n        <p>\n          <button\n            onClick={() => {\n              window.location.assign('/api/logto/sign-in');\n            }}\n          >\n            Anmelden\n          </button>\n        </p>\n      )}\n    </nav>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Auth Provider with Resource and Scopes\nDESCRIPTION: Sets up Angular application configuration with authentication provider and HTTP client. Includes specific resource endpoint configuration and OAuth scopes for authentication permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        scopes: ['openid', 'profile', 'offline_access', 'read', 'write'],\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In Component for Next.js\nDESCRIPTION: This snippet defines a client-side Sign-In component for Next.js. It creates a button that triggers the onSignIn function passed as a prop when clicked.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignIn: () => Promise<void>;\n};\n\nconst SignIn = ({ onSignIn }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignIn();\n      }}\n    >\n      Sign In\n    </button>\n  );\n};\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Ruby Client with Organization Scope\nDESCRIPTION: This Ruby code snippet demonstrates the instantiation of a `LogtoClient`. It requires the `logto/core` and `logto/client` gems. The core focus is on the configuration (`LogtoClient::Config`), where the `scopes` array is explicitly set to include `LogtoCore::USER_SCOPE[:organizations]`. This configuration enables the client to request access to user's organization information during the Logto authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/core\"\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-next-line\n    scopes: [LogtoCore::USER_SCOPE[:organizations]]\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Session Middleware (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the required express-session middleware for the Logto SDK. It includes setting up cookie-parser and configuring the session with a secret key and cookie options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\n\napp.use(cookieParser());\napp.use(\n  session({\n    secret: 'random_session_key', // Ersetze durch deinen eigenen Schlüssel\n    cookie: { maxAge: 14 * 24 * 60 * 60 * 1000 }, // In Millisekunden\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Middleware with Jose in TypeScript\nDESCRIPTION: This middleware function verifies the JWT token using the 'jose' library. It extracts the token, verifies its signature, issuer, audience, and expiration status. It also includes an optional scope validation for RBAC.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/node-express.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// auth-middleware.ts\n\nimport { createRemoteJWKSet, jwtVerify } from 'jose';\n\n//...\n\nexport const verifyAuthFromRequest = async (req, res, next) => {\n  // Extract the token\n  const token = extractBearerTokenFromHeaders(req.headers);\n\n  const { payload } = await jwtVerify(\n    token, // The raw Bearer Token extracted from the request header\n    createRemoteJWKSet(new URL('https://<your-logto-domain>/oidc/jwks')), // generate a jwks using jwks_uri inquired from Logto server\n    {\n      // expected issuer of the token, should be issued by the Logto server\n      issuer: 'https://<your-logto-domain>/oidc',\n      // expected audience token, should be the resource indicator of the current API\n      audience: '<your request listener resource indicator>',\n    }\n  );\n\n  // if you are using RBAC\n  assert(payload.scope.includes('some_scope'));\n\n  // custom payload logic\n  userId = payload.sub;\n\n  return next();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Scopes and Resources with Logto in Express (TypeScript)\nDESCRIPTION: This TypeScript code initializes the LogtoExpressConfig object with specific OAuth scopes and resource endpoints, enabling fine-grained access control in an Express application. The configuration requires @logto/express as a dependency and expects the developer to specify both the required permission scopes (such as 'shopping:read' and 'store:write') and the URLs of the resources to protect. Inputs are the 'scopes' array and 'resources' array within the config object, and the output is the complete configuration to be consumed by the Logto authentication middleware. Other configuration fields may need to be filled in as indicated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting the Bearer Token from Request Headers in Python\nDESCRIPTION: This function extracts the authorization token from the request headers, validating it follows the 'Bearer' format. It raises appropriate errors if the header is missing or incorrectly formatted.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/python.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"requires-auth.py\n\"\"\"\ndef get_auth_token():\n  auth = request.headers.get(\"Authorization\", None)\n\n  if not auth:\n    raise Error({ code: 'auth.authorization_header_missing', status: 401 })\n\n  contents = auth.split()\n\n  if len(contents) < 2\n    raise Error({code: 'auth.authorization_token_invalid_format', status: 401})\n\n  elif contents[0] != 'Bearer'\n    raise Error({code: 'auth.authorization_token_type_not_supported', status: 401})\n\n  return contents[1]\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Decorator in Python Flask\nDESCRIPTION: Creates a decorator to handle authentication state and user information in Flask routes. The decorator checks authentication status and optionally fetches user info from either ID token claims or userinfo endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom flask import g, jsonify, redirect\nfrom samples.client import client\ndef authenticated(shouldRedirect: bool = False, fetchUserInfo: bool = False):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            if client.isAuthenticated() is False:\n                if shouldRedirect:\n                    return redirect(\"/sign-in\")\n                return jsonify({\"error\": \"Not authenticated\"}), 401\n            # Store user info in Flask application context\n            g.user = (\n                await client.fetchUserInfo()\n                if fetchUserInfo\n                else client.getIdTokenClaims()\n            )\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Tokens with Logto in React (TypeScript)\nDESCRIPTION: This React component uses the Logto authentication library to check if a user is authenticated and retrieve an access token for a specific API endpoint. It utilizes React hooks to manage state and side effects, updating the access token when authentication status changes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Flutter\nDESCRIPTION: This snippet demonstrates how to import the Logto SDK, initialize the LogtoClient instance, and set up the basic structure of a Flutter app with Logto integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_dart_sdk.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Flutter Demo',\n      home: MyHomePage(title: 'Logto Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  late LogtoClient logtoClient;\n\n  void render() {\n    // state change\n  }\n\n  // LogtoConfig\n  final logtoConfig = const LogtoConfig(\n    endpoint: \"<your-logto-endpoint>\",\n    appId: \"<your-app-id>\"\n  );\n\n  void _init() {\n    logtoClient = LogtoClient(\n      config: logtoConfig,\n      httpClient: http.Client(), // Optional http client\n    );\n    render();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _init();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Logto Docker Image\nDESCRIPTION: Commands to pull the Logto Docker image from either GitHub Container Registry (ghcr) or DockerHub. This is step 2 of the Docker setup process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr\ndocker pull ghcr.io/logto-io/logto:latest\n# DockerHub\ndocker pull svhd/logto:latest\n```\n\n----------------------------------------\n\nTITLE: Launching Logto with Docker Compose\nDESCRIPTION: Command to initialize Logto using Docker Compose. This fetches the docker-compose.yml file from GitHub and starts the Logto service. Not recommended for production use as it creates a new database instance each time.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/logto-io/logto/HEAD/docker-compose.yml | docker compose -p logto -f - up\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthorizeView for Conditional Rendering in Blazor\nDESCRIPTION: This code snippet shows how to use the AuthorizeView component in a Razor component to conditionally render content based on the user's authentication state. It demonstrates separate sections for authenticated and unauthenticated users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-server/_authorize-view-component.md#2025-04-22_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n@using Microsoft.AspNetCore.Components.Authorization\n\n@* ... *@\n\n<AuthorizeView>\n    <Authorized>\n        <p>Name: @User?.Identity?.Name</p>\n        @* Content for authenticated users *@\n    </Authorized>\n    <NotAuthorized>\n        @* Content for unauthenticated users *@\n    </NotAuthorized>\n</AuthorizeView>\n\n@* ... *@\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Session Storage for Logto in Python Flask\nDESCRIPTION: Demonstrates how to create a custom persistent storage implementation that uses Flask sessions instead of the default memory storage. This class implements the Storage interface with get, set, and delete methods to manage authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/_init-logto-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import LogtoClient, LogtoConfig, Storage\nfrom flask import session\nfrom typing import Union\n\nclass SessionStorage(Storage):\n    def get(self, key: str) -> Union[str, None]:\n        return session.get(key, None)\n\n    def set(self, key: str, value: Union[str, None]) -> None:\n        session[key] = value\n\n    def delete(self, key: str) -> None:\n        session.pop(key, None)\n\nclient = LogtoClient(\n    LogtoConfig(...),\n    storage=SessionStorage(),\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto Browser Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve and display user information using the logtoClient.getIdTokenClaims() method. It creates a table to show the ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.getIdTokenClaims();\n\n// Gerar tabela de exibição para reivindicações do token de ID\nconst table = document.createElement('table');\nconst thead = document.createElement('thead');\nconst tr = document.createElement('tr');\nconst thName = document.createElement('th');\nconst thValue = document.createElement('th');\nthName.innerHTML = 'Nome';\nthValue.innerHTML = 'Valor';\ntr.append(thName, thValue);\nthead.append(tr);\ntable.append(thead);\n\nconst tbody = document.createElement('tbody');\n\nfor (const [key, value] of Object.entries(userInfo)) {\n  const tr = document.createElement('tr');\n  const tdName = document.createElement('td');\n  const tdValue = document.createElement('td');\n  tdName.innerHTML = key;\n  tdValue.innerHTML = typeof value === 'string' ? value : JSON.stringify(value);\n  tr.append(tdName, tdValue);\n  tbody.append(tr);\n}\n\ntable.append(tbody);\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Application with Logto Authentication\nDESCRIPTION: This snippet demonstrates how to configure an Angular application with Logto authentication. It sets up the necessary providers, including the HTTP client and authentication service. The configuration includes specifying the API resource URL for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Decorator for Flask with Logto\nDESCRIPTION: A Flask decorator function that validates JWS tokens using python-jose. It verifies the token signature using Logto's JWKS endpoint, checks the issuer, audience, and decodes the payload to extract user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"requires-auth.py\n\"\"\"\n\nimport json\nfrom flask import request,  _request_ctx_stack\nfrom six.moves.urllib.request import urlopen\nfrom functools import wraps\nfrom jose import jwt\n\ndef requires_auth(f):\n  @wraps(f)\n  def decorated(*args, **kwargs):\n    token = get_token_auth_header()\n\n# Logto から取得した jwks_uri エンドポイント\n    jwks_uri = urlopen('https://<your-logto-domain>/oidc/jwks')\n\n# Logto から取得した発行者\n    issuer = 'https://<your-logto-domain>/oidc'\n\n    jwks = json.loads(jwks_uri.read())\n\n    try:\n      payload = jwt.decode(\n        token,\n        jwks,\n# jwks と共に取得した jwt エンコードアルゴリズム。デフォルトでは ES384\n        algorithms=jwt.get_unverified_header(token).get('alg'),\n# Logto に登録された API のリソースインジケーター\n        audience='<your request listener resource indicator>',\n        issuer=issuer,\n        options={\n          'verify_at_hash': False\n        }\n      )\n    except Exception:\n# 例外ハンドラー\n      raise Error({code: 'invalid_token', status: 401})\n\n# ペイロードを処理するカスタムコード\n    _request_ctx_stack.top.user_id = payload.get('sub')\n\n    return f(*args, **kwargs)\n  return decorated\n```\n\n----------------------------------------\n\nTITLE: Logto SDK Configuration Example in TypeScript\nDESCRIPTION: Demonstrates how to configure the Logto SDK with resource and scope parameters for API access. This configuration is used when initializing the Logto client in your application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config: LogtoConfig = {\n  // ...other configs\n  resources: ['https://resource-server.com/api'],\n  scopes: ['read', 'write'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out in Flutter with Logto\nDESCRIPTION: This snippet demonstrates how to add a sign-out button to a Flutter application using Logto. It includes setting up the post-sign-out redirect URI and handling the sign-out process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  final postSignOutRedirectUri = 'io.logto//home';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signOutButton = TextButton(\n      onPressed: () async {\n        await logtoClient.signOut(postSignOutRedirectUri);\n        render();\n      },\n      child: const Text('Sign Out'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n            signOutButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Express Middleware for JWT Validation in Protected App\nDESCRIPTION: Express.js middleware that validates the JWT token provided in the Logto-ID-Token header. The code verifies the token signature using JWKS and checks if it was issued by the correct Logto auth server.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrate-logto/protected-app.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst jwksClient = require('jwks-rsa');\nconst jwt = require('jsonwebtoken');\n\nconst ISSUER = 'https://<your-logto-domain>/oidc';\nconst CERTS_URL = 'https://<your-logto-domain>/oidc/jwks';\n\nconst client = jwksClient({\n  jwksUri: CERTS_URL,\n});\n\nconst getKey = (header, callback) => {\n  client.getSigningKey(header.kid, function (err, key) {\n    callback(err, key?.getPublicKey());\n  });\n};\n\nconst verifyToken = (req, res, next) => {\n  const token = req.headers['Logto-ID-Token'];\n\n  // Make sure that the incoming request has our token header\n  if (!token) {\n    return res\n      .status(403)\n      .send({ status: false, message: 'missing required Logto-ID-Token header' });\n  }\n\n  jwt.verify(token, getKey, { issuer: ISSUER }, (err, decoded) => {\n    if (err) {\n      return res.status(403).send({ status: false, message: 'invalid id token' });\n    }\n\n    req.user = decoded;\n    next();\n  });\n};\n\nconst app = express();\n\napp.use(verifyToken);\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v4 Provider for Logto in Next.js\nDESCRIPTION: This snippet demonstrates how to set up the Auth.js v4 provider for Logto authentication in a Next.js application. It includes the configuration for the OAuth provider, custom profile mapping, and the necessary algorithm setting.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oauth',\n      // You can get the well-known URL from the Logto Application Details page,\n      // in the field \"OpenID Provider configuration endpoint\"\n      wellKnown: 'https://xxxx.logto.app/oidc/.well-known/openid-configuration',\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      client: {\n        id_token_signed_response_alg: 'ES384',\n      },\n      profile(profile) {\n        // You can customize the user profile mapping here\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Creating Logto Callback Page in React TSX\nDESCRIPTION: This snippet creates a Callback component using the useHandleSignInCallback hook from @logto/react. It handles the sign-in callback and displays a loading message while processing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_handle-redirect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useHandleSignInCallback } from '@logto/react';\n\nconst Callback = () => {\n  const { isLoading } = useHandleSignInCallback(() => {\n    // Do something when finished, e.g. redirect to home page\n  });\n\n  // When it's working in progress\n  if (isLoading) {\n    return <div>Redirecting...</div>;\n  }\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in a Nuxt Vue Component\nDESCRIPTION: This Vue template demonstrates how to implement sign-in and sign-out functionality in a Nuxt.js component using the useLogtoUser composable provided by the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { useLogtoUser } from '#imports'; // Adicione esta linha se a importação automática estiver desativada\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- Botão simplificado para login e logout -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a LogtoClient instance with specific access scopes and API resources. It configures the client to request permissions for shopping and store operations, and specifies the API endpoints that will be accessed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Token Request Example using Bash\nDESCRIPTION: Illustrates a token request to Logto's token endpoint using the authorization code and resource parameter. This step exchanges the code for an access token with audience restricted to the specified resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPOST https://tenant-id.logto.app/oidc/token HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&code=10esc29BWC2qZB0acc9v8zAv9ltc2pko105tQauZ&resource=https%3A%2F%2Fresource-server.com%2Fapi\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organization Scope in Python\nDESCRIPTION: This code snippet demonstrates how to properly initialize a LogtoClient instance with the organizations scope. The configuration uses LogtoConfig where the UserInfoScope.organizations is specified in the scopes array, which is required for accessing organization-related data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import LogtoClient, LogtoConfig, UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        scopes=[UserInfoScope.organizations],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Authentication Routes\nDESCRIPTION: Registers the required authentication routes for sign-in, sign-in callback, and sign-out functionality using the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleAuthRoutes } from '@logto/express';\n\napp.use(handleAuthRoutes(config));\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out Buttons in Razor Pages\nDESCRIPTION: Sample code for adding sign-in and sign-out buttons to a Razor Pages web application. Shows HTML markup for authentication buttons and demonstrates how to handle authentication states.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-razor/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n@if (User.Identity.IsAuthenticated)\n{\n    <form asp-page=\"/Account/SignOut\" method=\"post\">\n        <button type=\"submit\">Sign Out</button>\n    </form>\n}\nelse\n{\n    <form asp-page=\"/Account/SignIn\" method=\"post\">\n        <button type=\"submit\">Sign In</button>\n    </form>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Vue SDK with Scopes and Resources in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Logto Vue SDK within a Vue application by importing the 'createLogto' function and attaching it to the Vue app instance via 'app.use'. It specifically configures the OAuth 'scopes' and API 'resources' required for the application, allowing the app to request permissions for accessing shopping and store related APIs. Dependencies include the '@logto/vue' package, a properly set up Vue application context, and valid URLs for APIs; configuration assumes configuration placeholders (such as other configs) are filled with application-specific values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 Provider for Logto in Next.js\nDESCRIPTION: This snippet shows how to set up the Auth.js v5 provider for Logto authentication in a Next.js application. It includes the configuration for the OIDC provider and a custom profile mapping function.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oidc',\n      // You can get the issuer value from the Logto Application Details page,\n      // in the field \"Issuer endpoint\"\n      issuer: 'https://xxxx.logto.app/oidc',\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      authorization: {\n        params: { scope: 'openid offline_access profile email' },\n      },\n      profile(profile) {\n        // You can customize the user profile mapping here\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: JWT Token Payload Example in TypeScript\nDESCRIPTION: Displays the structure of a JWT token payload issued by Logto, showing the issuer, audience, and scope claims. This structure is critical for validating and understanding the token's permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  iss: '<your-logto-endpoint>/oidc',\n  aud: 'https://resource-server.com/api',\n  scope: 'read write'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto API Routes in Next.js\nDESCRIPTION: This code sets up API routes for Logto authentication in a Next.js application. It creates routes for sign-in, sign-in callback, sign-out, and user authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.handleAuthRoutes();\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out with Logto Client in JavaScript\nDESCRIPTION: This code snippet demonstrates how to implement sign-in and sign-out functionality using the Logto client in a JavaScript web application. It checks the authentication status, creates a button that toggles between 'Sign In' and 'Sign Out' based on the current state, and handles the respective actions when clicked.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nconst onClickSignIn = () => {\n  logtoClient.signIn('http://localhost:3000/callback');\n};\nconst onClickSignOut = () => {\n  logtoClient.signOut('http://localhost:3000');\n};\n\nconst button = document.createElement('button');\nbutton.innerHTML = isAuthenticated ? 'Sign Out' : 'Sign In';\nbutton.addEventListener('click', isAuthenticated ? onClickSignOut : onClickSignIn);\n\ndocument.body.appendChild(button);\n```\n\n----------------------------------------\n\nTITLE: Initializing Passport.js with OpenID Connect Strategy for Logto Authentication\nDESCRIPTION: This snippet sets up Passport.js with OpenID Connect strategy for Logto authentication. It configures the strategy with necessary endpoints and credentials, and defines serialization and deserialization methods for user sessions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport passport from 'passport';\nimport OpenIDConnectStrategy, { type Profile, type VerifyCallback } from 'passport-openidconnect';\n\nconst endpoint = '<your-logto-endpoint>';\nconst appId = '<your-application-id>';\nconst appSecret = '<your-application-secret>';\n\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        issuer: `${endpoint}/oidc`,\n        authorizationURL: `${endpoint}/oidc/auth`,\n        tokenURL: `${endpoint}/oidc/token`,\n        userInfoURL: `${endpoint}/oidc/me`,\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        scope: ['profile', 'offline_access'],\n      },\n      (issuer: string, profile: Profile, callback: VerifyCallback) => {\n        callback(null, profile);\n      }\n    )\n  );\n\n  passport.serializeUser((user, callback) => {\n    callback(null, user);\n  });\n\n  passport.deserializeUser(function (user, callback) {\n    callback(null, user as Express.User);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: Creates a new LogtoClient instance with custom authorization scopes ('read', 'write') and defines multiple API resource endpoints. The configuration specifies access permissions and target API endpoints for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Implémentation du validateur d'audience JWT\nDESCRIPTION: Classe Java pour valider l'audience et les portées dans le JWT reçu.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage io.logto.springboot.sample.validator;\n\nimport org.springframework.security.oauth2.core.OAuth2Error;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidator;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\nimport org.springframework.security.oauth2.jwt.Jwt;\n\npublic class AudienceValidator implements OAuth2TokenValidator<Jwt> {\n\n    private final String audience;\n\n    public AudienceValidator(String audience) {\n        this.audience = audience;\n    }\n\n    @Override\n    public OAuth2TokenValidatorResult validate(Jwt jwt) {\n        if (!jwt.getAudience().contains(audience)) {\n            return OAuth2TokenValidatorResult.failure(new OAuth2Error(\"invalid_token\", \"Required audience not found\", null));\n        }\n\n\t      // Optionnel : Pour le RBAC, validez les portées du JWT.\n\t      String scopes = jwt.getClaimAsString(\"scope\");\n\t      if (scopes == null || !scopes.contains(\"read:profile\")) {\n\t          return OAuth2TokenValidatorResult.failure(new OAuth2Error(\"invalid_token\", \"Insufficient permission\", null));\n\t      }\n\n        return OAuth2TokenValidatorResult.success();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CustomAuthUserProvider with OpenIdClaims in Dart\nDESCRIPTION: Modifies the CustomAuthUserProvider class to include OpenIdClaims for storing user information from Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nclass FlutterFlowAuthAuthUser {\n  FlutterFlowAuthAuthUser({\n    this.loggedIn = false,\n    this.uid,\n    this.idToken,\n  });\n  final bool loggedIn;\n  final String? uid;\n  final OpenIdClaims? idToken;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Flow in JavaScript\nDESCRIPTION: Example code showing how to implement sign-in and sign-out functionality using logtoClient methods. The code creates a button that toggles between sign-in and sign-out states based on authentication status, with appropriate redirect URIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nconst onClickSignIn = () => {\n  logtoClient.signIn('http://localhost:3000/callback');\n};\nconst onClickSignOut = () => {\n  logtoClient.signOut('http://localhost:3000');\n};\n\nconst button = document.createElement('button');\nbutton.innerHTML = isAuthenticated ? 'Sign Out' : 'Sign In';\nbutton.addEventListener('click', isAuthenticated ? onClickSignOut : onClickSignIn);\n\ndocument.body.appendChild(button);\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in React Native Component\nDESCRIPTION: A React Native component that implements authentication using Logto SDK. It handles user authentication state, fetches user information when authenticated, and provides sign-in/sign-out functionality through UI buttons.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/get-user-information/_fetch-user-info-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { fetchUserInfo, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchUserInfo().then((userInfo) => {\n        setUser(userInfo);\n      });\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Android ViewModel (Kotlin)\nDESCRIPTION: This snippet demonstrates how to retrieve and display user information using Logto in an Android ViewModel. It uses LiveData to observe changes in the ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LogtoViewModel(application: Application) : AndroidViewModel(application) {\n    // ...other codes\n\n    // Add a live data to observe the id token claims\n    private val _idTokenClaims = MutableLiveData<IdTokenClaims>()\n    val idTokenClaims: LiveData<IdTokenClaims>\n        get() = _idTokenClaims\n\n    fun getIdTokenClaims() {\n        logtoClient.getIdTokenClaims { logtoException, idTokenClaims ->\n            logtoException?.let { _logtoException.postValue(it) } ?: _idTokenClaims.postValue(idTokenClaims)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Logto Management API Base URI\nDESCRIPTION: A code snippet showing the format of a Logto Management API base URI that can be used as a resource parameter. This is a pre-registered API resource that protects all Management API endpoints under this URI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://tenantId.logto.app/api\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Next.js\nDESCRIPTION: This snippet demonstrates how to import and initialize LogtoClient for use in a Next.js application. It sets up the client with necessary configuration options including appId, appSecret, endpoint, baseUrl, and cookie settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // E.g. http://localhost:3001\n  baseUrl: 'http://localhost:3000',\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Flutter Application\nDESCRIPTION: Sets up the LogtoClient instance in a Flutter app by configuring endpoint and app ID parameters. The client is initialized in the initState method of a StatefulWidget to ensure it's available throughout the app lifecycle.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_dart_sdk.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Flutter Demo',\n      home: MyHomePage(title: 'Logto Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  late LogtoClient logtoClient;\n\n  void render() {\n    // changement d'état\n  }\n\n  // highlight-start\n  // LogtoConfig\n  final logtoConfig = const LogtoConfig(\n    endpoint: \"<your-logto-endpoint>\",\n    appId: \"<your-app-id>\"\n  );\n\n  void _init() {\n    logtoClient = LogtoClient(\n      config: logtoConfig,\n      httpClient: http.Client(), // Client http optionnel\n    );\n    render();\n  }\n  // highlight-end\n\n  @override\n  void initState() {\n    super.initState();\n    _init();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in SwiftUI with Logto iOS SDK\nDESCRIPTION: This code snippet demonstrates how to implement sign-in and sign-out functionality in a SwiftUI app using the Logto iOS SDK. It includes state management for authentication status and error handling for the sign-in process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Button(\"Sign Out\") {\n          Task { [self] in\n            await client.signOut()\n            isAuthenticated = false\n          }\n        }\n      } else {\n        Button(\"Sign In\") {\n          Task { [self] in\n            do {\n              try await client.signInWithBrowser(redirectUri: \"${props.redirectUris[0] ?? 'io.logto://callback'}\")\n              isAuthenticated = true\n            } catch let error as LogtoClientErrors.SignIn {\n              // erro ocorreu durante o login\n            } catch {\n              // outros erros\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Machine-to-Machine Authentication Flow in Logto\nDESCRIPTION: This diagram demonstrates the machine-to-machine authentication process using OAuth 2.0 Client Credentials flow. It shows how Service A obtains an access token from Logto and uses it to authenticate with Service B.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrate-logto/integrate-logto-into-your-application/understand-authentication-flow.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant Service A\n    participant Logto\n    participant Service B\n\n    Service A->>Logto: Request access token with client credentials\n    Logto->>Service A: Return access token\n    Service A->>Service B: API request with access token\n    Service B->>Logto: Validate token\n    Logto->>Service B: Token validation result\n    Service B->>Service A: API response\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Middleware with Logto in TypeScript\nDESCRIPTION: This snippet sets up the Logto authentication middleware in a server-side TypeScript hook file, specifying custom scopes (\\'read\\', \\'write\\') and a list of resources for resource-specific access control. It requires the Logto library and a valid implementation of handleLogto. The main parameters are the \\\"scopes\\\" and \\\"resources\\\" arrays, defining permissions and protected endpoint URLs respectively. The expected use is within an authentication flow to ensure users have the correct authorizations before proceeding to resource APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Sign-In and Sign-Out in Next.js Home Page\nDESCRIPTION: This snippet shows how to implement sign-in and sign-out functionality in a Next.js home page component. It uses the useSWR hook to fetch authentication status and renders appropriate buttons based on the user's authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoContext } from '@logto/next';\nimport useSWR from 'swr';\n\nconst Home = () => {\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\n\n  return (\n    <nav>\n      {data?.isAuthenticated ? (\n        <p>\n          Hello, {data.claims?.sub},\n          <button\n            onClick={() => {\n              window.location.assign('/api/logto/sign-out');\n            }}\n          >\n            Sign Out\n          </button>\n        </p>\n      ) : (\n        <p>\n          <button\n            onClick={() => {\n              window.location.assign('/api/logto/sign-in');\n            }}\n          >\n            Sign In\n          </button>\n        </p>\n      )}\n    </nav>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Creating Protected and Public API Endpoints in Spring Boot\nDESCRIPTION: Java controller implementation that provides both protected API endpoints requiring authentication and public endpoints accessible without authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// path/to/project/src/main/java/io/logto/springboot/sample/controller/ProtectedController.java\npackage io.logto.springboot.sample.controller;\n\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n// Only allow all origins for the sample.\n// (Production applications should configure CORS carefully.)\n@CrossOrigin(origins = \"*\")\n@RestController\npublic class ProtectedController {\n    @GetMapping(\"/api/profile\")\n    public String protectedProfile() {\n        return \"Protected profile.\";\n    }\n\n    @GetMapping(\"/api/.wellknown/config.json\")\n    public String publicConfig() {\n        return \"Public config.\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpClient with Access Token in .NET\nDESCRIPTION: Example of setting up an HttpClient with automatic access token injection for API resource access. Uses Blorc.OpenIdConnect to handle token management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blorc.OpenIdConnect;\n\nbuilder.Services\n    .AddHttpClient(\"MyApiResource\", client =>\n    {\n        client.BaseAddress = new Uri(\"https://my-api-resource\");\n    })\n    .AddAccessToken();\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication with Logto in Vue\nDESCRIPTION: This code demonstrates how to implement sign-in and sign-out functionality in a Vue component using Logto's composables. It imports the useLogto hook which provides authentication methods and state, then defines functions for handling sign-in and sign-out events with appropriate redirect URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/vue';\n\nconst { signIn, signOut, isAuthenticated } = useLogto();\n\nconst onClickSignIn = () => signIn('http://localhost:3000/callback');\nconst onClickSignOut = () => signOut('http://localhost:3000');\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims with Logto\nDESCRIPTION: Example of accessing additional user claims after configuring extended scopes using the getIdTokenClaims method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Now you can access additional claims `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Installing Logto.AspNetCore.Authentication NuGet Package\nDESCRIPTION: This command adds the Logto.AspNetCore.Authentication package to your ASP.NET Core project using the dotnet CLI. This package is required to implement Logto authentication in your application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Logto.AspNetCore.Authentication\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Status in Flutter with Logto\nDESCRIPTION: This code snippet shows how to handle the authentication status using Logto in a Flutter application. It uses the logtoClient.isAuthenticated method to check the authentication state and conditionally render UI elements based on the status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  bool? isAuthenticated = false;\n\n  void render() {\n    setState(() async {\n      isAuthenticated = await logtoClient.isAuthenticated;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication and Info Retrieval in Flutter with Logto\nDESCRIPTION: This code snippet demonstrates how to implement user authentication and retrieve user information in a Flutter app using Logto. It includes a button to fetch user claims from the Logto client and display them, as well as conditional rendering of sign-in, sign-out, and user info buttons based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_display-userinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget getUserInfoButton = TextButton(\n      onPressed: () async {\n        // highlight-start\n        final userClaims = await logtoClient.idTokenClaims;\n        print(userInfo);\n        // highlight-end\n      },\n      child: const Text('Get user info'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n            isAuthenticated == true ? getUserInfoButton : const SizedBox.shrink(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: Creates a new LogtoClient instance with specific access scopes and resource endpoints. The configuration includes read/write permissions for shopping and store domains, along with their corresponding API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organization Scope in TypeScript\nDESCRIPTION: This code snippet shows how to create a new LogtoClient instance with the Organizations user scope explicitly configured. The UserScope is imported from the @logto/next package, and the Organizations scope is highlighted as the key configuration option.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client Scopes and Resources in Go\nDESCRIPTION: This Go code snippet sets up the Logto client configuration by specifying security scopes (such as \\\"read\\\" and \\\"write\\\") and a list of API resources the client should access. It demonstrates how to initialize the LogtoConfig struct with custom access parameters for API authorization. Dependencies include the Logto Go client library and knowledge of valid scope/resource URLs. The key parameters are Scopes and Resources, which determine the access permissions and endpoints available to the client. The snippet expects a valid Go environment and an existing Logto client; outputs are not explicitly defined but the configuration is typically passed to a client instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"read\", \"write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Logto Access Token Retrieval in Next.js\nDESCRIPTION: This server component sets up a page with a server action to retrieve an access token using Logto. It imports the necessary functions from Logto and Next.js, and defines an async function to get the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAccessToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetAccessToken from './get-access-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetAccessToken\n        onGetAccessToken={async () => {\n          'use server';\n\n          return getAccessToken(logtoConfig, 'https://shopping.your-app.com/api');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication Functions\nDESCRIPTION: Core functions for handling Logto authentication, including generating sign-in URLs, handling callbacks, and refreshing tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// logto.js\n\nconst {\n  withReservedScopes,\n  fetchOidcConfig,\n  discoveryPath,\n  generateSignInUri,\n  verifyAndParseCodeFromCallbackUri,\n  fetchTokenByAuthorizationCode,\n  fetchTokenByRefreshToken,\n} = require('@logto/js');\nconst fetch = require('node-fetch');\nconst { randomFillSync, createHash } = require('crypto');\nconst { fromUint8Array } = require('js-base64');\n\nconst config = {\n  endpoint: 'https://logto.dev',\n  appId: 'foo',\n  appSecret: '<your-app-secret-copied-from-console>',\n  redirectUri: 'http://localhost:3000/callback', // You may need to replace it with your application's production address\n  scopes: withReservedScopes().split(' '),\n};\n\nconst requester = (input, init) => {\n  const { appId, appSecret } = config;\n\n  return fetch(input, {\n    ...init,\n    headers: {\n      ...init?.headers,\n      authorization: `Basic ${Buffer.from(`${appId}:${appSecret}`, 'utf8').toString('base64')}`,\n    },\n  });\n};\n\nconst generateRandomString = (length = 64) => {\n  return fromUint8Array(randomFillSync(new Uint8Array(length)), true);\n};\n\nconst generateCodeChallenge = async (codeVerifier) => {\n  const encodedCodeVerifier = new TextEncoder().encode(codeVerifier);\n  const hash = createHash('sha256');\n  hash.update(encodedCodeVerifier);\n  const codeChallenge = hash.digest();\n  return fromUint8Array(codeChallenge, true);\n};\n\nconst getOidcConfig = async () => {\n  return fetchOidcConfig(new URL(discoveryPath, config.endpoint).toString(), requester);\n};\n\nexports.getSignInUrl = async () => {\n  const { authorizationEndpoint } = await getOidcConfig();\n  const codeVerifier = generateRandomString();\n  const codeChallenge = await generateCodeChallenge(codeVerifier);\n  const state = generateRandomString();\n\n  const { redirectUri, scopes, appId: clientId } = config;\n\n  const signInUri = generateSignInUri({\n    authorizationEndpoint,\n    clientId,\n    redirectUri: redirectUri,\n    codeChallenge,\n    state,\n    scopes,\n  });\n\n  return { redirectUri, codeVerifier, state, signInUri };\n};\n\nexports.handleSignIn = async (signInSession, callbackUri) => {\n  const { redirectUri, state, codeVerifier } = signInSession;\n  const code = verifyAndParseCodeFromCallbackUri(callbackUri, redirectUri, state);\n\n  const { appId: clientId } = config;\n  const { tokenEndpoint } = await getOidcConfig();\n  const codeTokenResponse = await fetchTokenByAuthorizationCode(\n    {\n      clientId,\n      tokenEndpoint,\n      redirectUri,\n      codeVerifier,\n      code,\n    },\n    requester\n  );\n\n  return codeTokenResponse;\n};\n\nexports.refreshTokens = async (refreshToken) => {\n  const { appId: clientId, scopes } = config;\n  const { tokenEndpoint } = await getOidcConfig();\n  const tokenResponse = await fetchTokenByRefreshToken(\n    {\n      clientId,\n      tokenEndpoint,\n      refreshToken,\n      scopes,\n    },\n    requester\n  );\n\n  return tokenResponse;\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Authentication Status in Flutter with Logto\nDESCRIPTION: This code snippet shows how to check and manage the authentication status in a Flutter app using the Logto SDK, and conditionally render UI elements based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  bool? isAuthenticated = false;\n\n  void render() {\n    setState(() async {\n      isAuthenticated = await logtoClient.isAuthenticated;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI in Next.js Home Page\nDESCRIPTION: This code snippet shows how to implement the authentication UI in the home page of a Next.js application. It uses the getLogtoContext function to check the authentication status and renders either a Sign-In or Sign-Out button accordingly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext, signIn, signOut } from '@logto/next/server-actions';\nimport SignIn from './sign-in';\nimport SignOut from './sign-out';\nimport { logtoConfig } from './logto';\n\nconst Home = () => {\n  const { isAuthenticated, claims } = await getLogtoContext(logtoConfig);\n\n  return (\n    <nav>\n      {isAuthenticated ? (\n        <p>\n          Hello, {claims?.sub},\n          <SignOut\n            onSignOut={async () => {\n              'use server';\n\n              await signOut(logtoConfig);\n            }}\n          />\n        </p>\n      ) : (\n        <p>\n          <SignIn\n            onSignIn={async () => {\n              'use server';\n\n              await signIn(logtoConfig);\n            }}\n          />\n        </p>\n      )}\n    </nav>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: This code initializes a LogtoClient object with a LogtoConfig that specifies custom scopes and resources. The scopes include read and write permissions for shopping and store, while the resources point to specific API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication Functions in Express\nDESCRIPTION: A comprehensive implementation of Logto authentication functions including getSignInUrl, handleSignIn, and refreshTokens. This code handles the core authentication logic for a traditional web application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// logto.js\n\nconst {\n  withReservedScopes,\n  fetchOidcConfig,\n  discoveryPath,\n  generateSignInUri,\n  verifyAndParseCodeFromCallbackUri,\n  fetchTokenByAuthorizationCode,\n  fetchTokenByRefreshToken,\n} = require('@logto/js');\nconst fetch = require('node-fetch');\nconst { randomFillSync, createHash } = require('crypto');\nconst { fromUint8Array } = require('js-base64');\n\nconst config = {\n  endpoint: 'https://logto.dev',\n  appId: 'foo',\n  appSecret: '<your-app-secret-copied-from-console>',\n  redirectUri: 'http://localhost:3000/callback', // You may need to replace it with your app's production address\n  scopes: withReservedScopes().split(' '),\n};\n\nconst requester = (input, init) => {\n  const { appId, appSecret } = config;\n\n  return fetch(input, {\n    ...init,\n    headers: {\n      ...init?.headers,\n      authorization: `Basic ${Buffer.from(`${appId}:${appSecret}`, 'utf8').toString('base64')}`,\n    },\n  });\n};\n\nconst generateRandomString = (length = 64) => {\n  return fromUint8Array(randomFillSync(new Uint8Array(length)), true);\n};\n\nconst generateCodeChallenge = async (codeVerifier) => {\n  const encodedCodeVerifier = new TextEncoder().encode(codeVerifier);\n  const hash = createHash('sha256');\n  hash.update(encodedCodeVerifier);\n  const codeChallenge = hash.digest();\n  return fromUint8Array(codeChallenge, true);\n};\n\nconst getOidcConfig = async () => {\n  return fetchOidcConfig(new URL(discoveryPath, config.endpoint).toString(), requester);\n};\n\nexports.getSignInUrl = async () => {\n  const { authorizationEndpoint } = await getOidcConfig();\n  const codeVerifier = generateRandomString();\n  const codeChallenge = await generateCodeChallenge(codeVerifier);\n  const state = generateRandomString();\n\n  const { redirectUri, scopes, appId: clientId } = config;\n\n  const signInUri = generateSignInUri({\n    authorizationEndpoint,\n    clientId,\n    redirectUri: redirectUri,\n    codeChallenge,\n    state,\n    scopes,\n  });\n\n  return { redirectUri, codeVerifier, state, signInUri };\n};\n\nexports.handleSignIn = async (signInSession, callbackUri) => {\n  const { redirectUri, state, codeVerifier } = signInSession;\n  const code = verifyAndParseCodeFromCallbackUri(callbackUri, redirectUri, state);\n\n  const { appId: clientId } = config;\n  const { tokenEndpoint } = await getOidcConfig();\n  const codeTokenResponse = await fetchTokenByAuthorizationCode(\n    {\n      clientId,\n      tokenEndpoint,\n      redirectUri,\n      codeVerifier,\n      code,\n    },\n    requester\n  );\n\n  return codeTokenResponse;\n};\n\nexports.refreshTokens = async (refreshToken) => {\n  const { appId: clientId, scopes } = config;\n  const { tokenEndpoint } = await getOidcConfig();\n  const tokenResponse = await fetchTokenByRefreshToken(\n    {\n      clientId,\n      tokenEndpoint,\n      refreshToken,\n      scopes,\n    },\n    requester\n  );\n\n  return tokenResponse;\n};\n```\n\n----------------------------------------\n\nTITLE: API Access Control Implementation\nDESCRIPTION: Example showing how to implement API access control using getCustomJwtClaims() to add createdAt claim for public beta users access management. This enables checking both RBAC permissions and beta user status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/custom-token-claims/common-use-cases.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetCustomJwtClaims()\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Additional Claims in React\nDESCRIPTION: This code snippet shows how to use the fetchUserInfo() method from the useLogto hook to retrieve user information including additional claims like custom data. It demonstrates how to access these claims after fetching the user info.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst { fetchUserInfo } = useLogto();\n\nconst userInfo = await fetchUserInfo();\n\n// Agora você pode acessar a reivindicação `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Tokens for API Resources in Logto\nDESCRIPTION: This code demonstrates how to use the getAccessTokenApi method to retrieve JWT access tokens for specific API resources. The method automatically refreshes expired tokens using a refresh token, and returns tokens that can be used when the user has the required permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{props.getAccessTokenApi}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{props.getAccessTokenCode}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out with Logto React Hooks\nDESCRIPTION: This code demonstrates how to use the useLogto hook to implement authentication in a React component. It shows conditional rendering based on authentication state, with buttons for signing in and out. The sign-in function accepts a callback URL parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return isAuthenticated ? (\n    <button onClick={signOut}>Sign Out</button>\n  ) : (\n    <button onClick={() => signIn('http://localhost:3000/callback')}>Sign In</button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Express\nDESCRIPTION: Demonstrates how to configure additional user scopes in the Logto Express configuration to access more user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig, UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone], // Add more scopes if needed\n  // ...other configs\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims via Front-end API Request in Next.js\nDESCRIPTION: Implementation of a Next.js component that fetches and displays user claims using SWR for data fetching. The component renders a table of claim names and values when the user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoContext } from '@logto/next';\nimport { useMemo } from 'react';\nimport useSWR from 'swr';\n\nconst Home = () => {\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\n\n  const claims = useMemo(() => {\n    if (!data?.isAuthenticated || !data.claims) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h2>Claims:</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(data.claims).map(([key, value]) => (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>{String(value)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }, [data]);\n\n  return (\n    <div>\n      {claims}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK with Custom Scopes and Resources in React\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object with custom scopes and resources for authentication. The configuration specifies different permission scopes for shopping and store functionality, along with corresponding API resource endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Using the denyAccess API Function in JWT Scripts\nDESCRIPTION: Example of the denyAccess utility function that can be used to deny token issuance with a custom message. This function provides additional access control capabilities within custom token claim scripts.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/custom-token-claims/create-script.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\napi.denyAccess(message?: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Express Configuration with Scopes in TypeScript\nDESCRIPTION: This TypeScript snippet defines a configuration object `config` of type `LogtoExpressConfig` for a Logto Express integration. It specifies the OAuth scopes 'email' and 'phone' to be requested during the authentication process, allowing the application to access the user's email address and phone number upon consent.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"app.ts\"\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  scopes: ['email', 'phone'],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information Manually in Nuxt.js\nDESCRIPTION: This example demonstrates how to manually fetch user information using the Logto client in a Nuxt.js application. It uses callOnce to ensure the code runs only on the server side, checks authentication status, and fetches user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogtoClient, useState, callOnce } from '#imports';\n\nconst client = useLogtoClient();\nconst userInfo = useState(null);\n\n// クライアントサイドでの実行を防ぐために一度だけ呼び出す\nawait callOnce(async () => {\n  if (!client) {\n    throw new Error('Logto クライアントが利用できません');\n  }\n\n  if (!(await client.isAuthenticated())) {\n    return;\n  }\n\n  try {\n    userInfo.value = await client.fetchUserInfo();\n  } catch (error) {\n    console.error('ユーザー情報の取得に失敗しました:', error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Side Component for Access Token Retrieval in Next.js\nDESCRIPTION: This client-side component defines a button that, when clicked, calls the server action to retrieve an access token and logs it to the console. It demonstrates how to handle the server action result on the client side.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetAccessToken: () => Promise<string>;\n};\n\nconst GetAccessToken = ({ onGetAccessToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetAccessToken();\n        console.log(token);\n      }}\n    >\n      アクセス トークンを取得 (コンソールログを参照)\n    </button>\n  );\n};\n\nexport default GetAccessToken;\n```\n\n----------------------------------------\n\nTITLE: Spring Security Configuration with JWT Decoder\nDESCRIPTION: Security configuration class that sets up JWT decoding with ES384 algorithm and configures protected API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage io.logto.springboot.sample.configuration;\n\nimport com.nimbusds.jose.JOSEObjectType;\nimport com.nimbusds.jose.proc.DefaultJOSEObjectTypeVerifier;\nimport com.nimbusds.jose.proc.SecurityContext;\nimport io.logto.springboot.sample.validator.AudienceValidator;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;\nimport org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidator;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.JwtValidators;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\nimport org.springframework.security.web.DefaultSecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration {\n\n    @Value(\"${logto.audience}\")\n    private String audience;\n\n    @Value(\"${spring.security.oauth2.resourceserver.jwt.issuer-uri}\")\n    private String issuer;\n\n    @Value(\"${spring.security.oauth2.resourceserver.jwt.jwk-set-uri}\")\n    private String jwksUri;\n\n    @Bean\n    public JwtDecoder jwtDecoder() {\n        NimbusJwtDecoder jwtDecoder = NimbusJwtDecoder.withJwkSetUri(jwksUri)\n                .jwsAlgorithm(ES384)\n                .jwtProcessorCustomizer(customizer -> customizer.setJWSTypeVerifier(\n                        new DefaultJOSEObjectTypeVerifier<SecurityContext>(new JOSEObjectType(\"at+jwt\"))))\n                .build();\n\n        jwtDecoder.setJwtValidator(new DelegatingOAuth2TokenValidator<>(\n                new AudienceValidator(audience),\n                new JwtIssuerValidator(issuer),\n                new JwtTimestampValidator()));\n\n        return jwtDecoder;\n    }\n\n    @Bean\n    public DefaultSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n         http\n          .securityMatcher(\"/api/**\")\n          .oauth2ResourceServer(oauth2 -> oauth2\n              .jwt(Customizer.withDefaults()))\n          .authorizeHttpRequests(requests -> requests\n              .requestMatchers(\"/api/.wellknown/**\").permitAll()\n              .anyRequest().authenticated());\n\n        return http.build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Functionality in Flutter with Logto\nDESCRIPTION: This snippet shows how to add a sign-in button to a Flutter app and implement the sign-in functionality using Logto. It includes setting up the redirect URI and calling the signIn method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  final redirectUri = 'io.logto://callback';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signInButton = TextButton(\n      onPressed: () async {\n        await logtoClient.signIn(redirectUri);\n        render();\n      },\n      child: const Text('Sign In'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Provider for Refresh Token in Next.js\nDESCRIPTION: This snippet shows how to update the Logto provider configuration in Next.js to include the 'prompt' parameter and ensure the 'offline_access' scope is included. This configuration is necessary for obtaining a refresh token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // ...\n  authorization: {\n    params: {\n      // highlight-next-line\n      prompt: 'consent',\n      scope: 'openid offline_access shopping:read shopping:write',\n      resource: 'https://shopping.your-app.com/api',\n      // ...\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Authentication State in Flutter with Logto\nDESCRIPTION: Handles the authentication state by using logtoClient.isAuthenticated to conditionally render UI components based on the user's authentication status. The render method updates the state with the current authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  bool? isAuthenticated = false;\n\n  void render() {\n    setState(() async {\n      // highlight-start\n      isAuthenticated = await logtoClient.isAuthenticated;\n      // highlight-end\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out in Angular Component\nDESCRIPTION: Shows how to implement authentication methods in an Angular component using OidcSecurityService for handling sign-in and sign-out functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OidcSecurityService } from 'angular-auth-oidc-client';\n\nexport class AppComponent implements OnInit {\n  constructor(public oidcSecurityService: OidcSecurityService) {}\n\n  signIn() {\n    this.oidcSecurityService.authorize();\n  }\n\n  signOut() {\n    this.oidcSecurityService.logoff().subscribe((result) => {\n      console.log('app sign-out', result);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role Mapping in WordPress with Logto\nDESCRIPTION: This PHP function maps Logto roles to WordPress roles. It retrieves the user's Logto roles from metadata and assigns the corresponding WordPress role. The function is hooked to the wp_login action to execute upon user login.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/wordpress/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction logto_handler($user_login, $user = null) {\n\tif (!$user) {\n\t\t$user = get_user_by('login', $user_login);\n\t}\n\n\t$oidc_claims = get_user_meta($user->ID, 'openid-connect-generic-last-user-claim', true);\n\n\tif (in_array('group:editors', $oidc_claims['roles'])) {\n\t\t$user->set_role('editor');\n\t} else {\n\t\t$user->set_role('subscriber');\n\t}\n}\n\nadd_action('wp_login', 'logto_handler', 10, 2);\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Logto\nDESCRIPTION: A detailed table of environment variables used to configure Logto, including their default values, types, and descriptions. These variables control aspects like ports, database connection, HTTPS settings, and behavior settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/concepts/core-service/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nNODE_ENV                | `undefined`                          | <code>'production' &#124; 'test' &#124; undefined</code> | Qué tipo de entorno en el que se ejecuta Logto.\nPORT                    | `3001`                               | `number`                                                 | El puerto local al que Logto escucha.\nADMIN_PORT              | `3002`                               | `number`                                                 | El puerto local al que escucha Logto Admin Console.\nADMIN_DISABLE_LOCALHOST | N/A                                  | <code>string &#124; boolean &#124; number</code>         | Establécelo en `1` o `true` para deshabilitar el puerto para Admin Console. Con `ADMIN_ENDPOINT` sin establecer, deshabilitará completamente Admin Console.\nDB_URL                  | N/A                                  | `string`                                                 | El [Postgres DSN](https://www.postgresql.org/docs/14/libpq-connect.html#id-1.7.3.8.3.6) para la base de datos de Logto.\nHTTPS_CERT_PATH         | `undefined`                          | <code>string &#124; undefined</code>                     | Consulta [Habilitar HTTPS](#enabling-https) para más detalles.\nHTTPS_KEY_PATH          | `undefined`                          | <code>string &#124; undefined</code>                     | Ídem.\nTRUST_PROXY_HEADER      | `false`                              | `boolean`                                                | Ídem.\nENDPOINT                | `'protocol://localhost:$PORT'`       | `string`                                                 | Puedes especificar una URL con tu dominio personalizado para pruebas en línea o producción. Esto también afectará el valor del [identificador del emisor de OIDC](https://openid.net/specs/openid-connect-core-1_0.html#IssuerIdentifier).\nADMIN_ENDPOINT          | `'protocol://localhost:$ADMIN_PORT'` | `string`                                                 | Puedes especificar una URL con tu dominio personalizado para producción (Ej. `ADMIN_ENDPOINT=https://admin.domain.com`). Esto también afectará el valor de los URIs de redirección de Admin Console.\nCASE_SENSITIVE_USERNAME | `true`                               | `boolean`                                                | Especifica si el nombre de usuario distingue entre mayúsculas y minúsculas. Ten cuidado al modificar este valor; los cambios no ajustarán automáticamente los datos existentes de la base de datos, requiriendo gestión manual.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sign-Out Button with Logto in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a sign-out button in JavaScript, attach a click event listener to it, and implement the sign-out functionality using Logto's client. When clicked, it calls the logtoClient.signOut() method with a redirect URL that will be used after successful sign-out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_implement-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = document.createElement('button');\nbutton.innerHTML = 'Sign Out';\n\nbutton.addEventListener('click', onClickSignOut);\n\ndocument.body.appendChild(button);\n\nconst onClickSignOut = () => {\n  logtoClient.signOut('http://localhost:3000');\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Session Middleware\nDESCRIPTION: Configures the required express-session middleware that Logto SDK depends on. Includes cookie-parser setup and session configuration with a secret key and cookie expiration time.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\n\napp.use(cookieParser());\napp.use(\n  session({\n    secret: 'random_session_key', // 자신의 비밀 키로 교체하세요\n    cookie: { maxAge: 14 * 24 * 60 * 60 * 1000 }, // 밀리초 단위\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with GetIdTokenClaims in Go\nDESCRIPTION: Example of retrieving and displaying user information by implementing a route that uses the GetIdTokenClaims method from the Logto client. This route returns the user's ID token claims as a JSON response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    //...\n\n    router.GET(\"/user-id-token-claims\", func(ctx *gin.Context) {\n      session := sessions.Default(ctx)\n      logtoClient := client.NewLogtoClient(logtoConfig, &SessionStorage{session: session})\n\n      // highlight-start\n      idTokenClaims, err := logtoClient.GetIdTokenClaims()\n      // highlight-end\n\n      if err != nil {\n        ctx.String(http.StatusOK, err.Error())\n      }\n\n      ctx.JSON(http.StatusOK, idTokenClaims)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: Sets up NextAuth authentication by exporting handlers, signIn, signOut, and auth functions. Configures Logto as the authentication provider with specific OAuth scopes including organization access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access urn:logto:scope:organizations',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes and Resources\nDESCRIPTION: Sets up Logto Express configuration with custom read/write scopes and multiple API resource endpoints. The config includes authorization scopes for different access levels and defines protected API resource URLs that require authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Decorator for Flask in Python\nDESCRIPTION: A Flask decorator that validates JWT tokens using python-jose. It fetches JWKS from Logto, verifies the token signature, audience, and issuer, and makes the user ID available in the request context. This enables secured API endpoints with proper authentication checks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"requires-auth.py\n\"\"\"\n\nimport json\nfrom flask import request,  _request_ctx_stack\nfrom six.moves.urllib.request import urlopen\nfrom functools import wraps\nfrom jose import jwt\n\ndef requires_auth(f):\n  @wraps(f)\n  def decorated(*args, **kwargs):\n    token = get_token_auth_header()\n\n# jwks_uri-Endpunkt von Logto abgerufen\n    jwks_uri = urlopen('https://<your-logto-domain>/oidc/jwks')\n\n# Aussteller von Logto abgerufen\n    issuer = 'https://<your-logto-domain>/oidc'\n\n    jwks = json.loads(jwks_uri.read())\n\n    try:\n      payload = jwt.decode(\n        token,\n        jwks,\n# Der jwt-Codierungsalgorithmus zusammen mit jwks abgerufen. ES384 standardmäßig\n        algorithms=jwt.get_unverified_header(token).get('alg'),\n# Der registrierte Ressourcenindikator der API in Logto\n        audience='<your request listener resource indicator>',\n        issuer=issuer,\n        options={\n          'verify_at_hash': False\n        }\n      )\n    except Exception:\n# Ausnahmebehandlung\n      raise Error({code: 'invalid_token', status: 401})\n\n# Benutzerdefinierter Code zur Verarbeitung der Nutzlast\n    _request_ctx_stack.top.user_id = payload.get('sub')\n\n    return f(*args, **kwargs)\n  return decorated\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Sign-in with Logto JavaScript SDK\nDESCRIPTION: This TypeScript code snippet demonstrates how to use direct sign-in with the @logto/client JavaScript SDK. It shows how to invoke the signIn method with a redirectUri and directSignIn parameters for signing in with Google.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/sign-in-experience.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclient.signIn({\n  redirectUri: 'https://some-redirect-uri',\n  directSignIn: { method: 'social', target: 'google' },\n});\n```\n\n----------------------------------------\n\nTITLE: LogtoClient Class Structure\nDESCRIPTION: Core client class definition with properties for configuration, OIDC settings, token management and authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/sdk-conventions/platform-sdk-conventions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass LogtoClient {\n  logtoConfig: LogtoConfig;\n  oidcConfig?: OidcConfigResponse;\n  accessTokenMap: Map<string, AccessToken>;\n  refreshToken?: string;\n  idToken?: string;\n\n  constructor(logtoConfig: LogtoConfig);\n  isAuthenticated(): boolean;\n  signIn(redirectUri: string): void;\n  signOut(postLogoutRedirectUri?: string): void;\n  getAccessToken(resource?: string): string;\n  getIdTokenClaims(): IdTokenClaims;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources in Logto React SDK\nDESCRIPTION: This snippet demonstrates how to import and configure the LogtoConfig object with multiple API resources. It shows setting up resources for two different API endpoints that the application will need to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Button Component in Next.js\nDESCRIPTION: This snippet creates a client-side Sign-Out button component for a Next.js application. It uses the 'use client' directive and accepts an onSignOut prop to handle the sign-out action.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignOut: () => Promise<void>;\n};\n\nconst SignOut = ({ onSignOut }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignOut();\n      }}\n    >\n      Sign Out\n    </button>\n  );\n};\n\nexport default SignOut;\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and Resources in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new LogtoClient instance with custom scopes and resources. It imports the necessary components from the Logto package and configures the client with read and write scopes for specific API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-shared-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token for API Resource using cURL\nDESCRIPTION: This snippet shows how to fetch an access token for a custom API resource using a cURL command. It includes the necessary headers and form data for the POST request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/machine-to-machine/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n  --request POST 'https://your.logto.endpoint/oidc/token' \\\n  --header 'Authorization: Basic ${your_auth_string}' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'grant_type=client_credentials' \\\n  --data-urlencode 'resource=https://shopping.api' \\\n  --data-urlencode 'scope=read:products write:products'\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Organization Scope in PHP\nDESCRIPTION: This snippet demonstrates how to create a LogtoClient instance with organization scopes. It imports the UserScope constant from the Logto SDK and passes the organizations scope during client initialization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// highlight-next-line\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    scopes: [UserScope::organizations], // Adicionar escopos\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Session Middleware\nDESCRIPTION: Configures the express-session middleware, which is required by the Logto SDK. It sets up cookie parsing and session management with a secret key and maximum age for the session cookie.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\n\napp.use(cookieParser());\napp.use(\n  session({\n    secret: 'random_session_key', // Reemplaza con tu propio secreto\n    cookie: { maxAge: 14 * 24 * 60 * 60 * 1000 }, // En milisegundos\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info in Android\nDESCRIPTION: This snippet shows how to fetch additional user information using the fetchUserInfo method of LogtoClient. It allows access to custom data claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.fetchUserInfo {_, userInfoResponse ->\n    println(\"UserInfoResponse:$userInfoResponse\")\n}\n// Vous pouvez maintenant accéder à la revendication `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with custom scopes and resources. It sets read and write scopes, and specifies two API resources for the client to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Scopes and Resources in Logto React Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to specify the `scopes` and `resources` properties within the `LogtoConfig` object used by the `@logto/react` SDK. The `scopes` array lists the desired OAuth 2.0 scope identifiers (e.g., 'read', 'write'), while the `resources` array lists the unique identifiers (usually URLs) of the resource servers (APIs) for which the application requires access tokens. This configuration allows Logto to request appropriate permissions and audience-specific tokens during the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication ViewModel in Android with Logto\nDESCRIPTION: A Kotlin ViewModel class that manages authentication state and operations using Logto client. It provides methods for sign-in and sign-out with callback handling and LiveData for observing authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LogtoViewModel(application: Application) : AndroidViewModel(application) {\n    // ...other codes\n\n    // Add a live data to observe the authentication status\n    private val _authenticated = MutableLiveData(logtoClient.isAuthenticated)\n    val authenticated: LiveData<Boolean>\n        get() = _authenticated\n\n    fun signIn(context: Activity) {\n        logtoClient.signIn(context, \"io.logto.android://io.logto.sample/callback\") { logtoException ->\n            logtoException?.let { println(it) }\n            // Update the live data\n            _authenticated.postValue(logtoClient.isAuthenticated)\n        }\n    }\n\n    fun signOut() {\n        logtoClient.signOut { logtoException ->\n            logtoException?.let { println(it) }\n            // Update the live data\n            _authenticated.postValue(logtoClient.isAuthenticated)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Documentation Components\nDESCRIPTION: Imports MDX and MD fragments for structuring the React SDK integration documentation, including checkpoints, installation guides, and implementation steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport GuideTip from './_guide-tip.mdx';\nimport ImplementSignInAndSignOut from './_implement-sign-in-and-sign-out.mdx';\nimport InitClient from './_init-client.mdx';\nimport Installation from './_installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 Provider for Logto\nDESCRIPTION: This snippet demonstrates how to set up the Auth.js v5 provider for Logto integration in a Next.js application. It includes the configuration for the OIDC provider, custom profile mapping, and optional middleware setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oidc',\n      // Logto 애플리케이션 세부 정보 페이지에서 발급자 값을 얻을 수 있습니다,\n      // \"Issuer endpoint\" 필드에서\n      issuer: 'https://xxxx.logto.app/oidc',\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      authorization: {\n        params: { scope: 'openid offline_access profile email' },\n      },\n      profile(profile) {\n        // 여기서 사용자 프로필 매핑을 사용자 정의할 수 있습니다\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport { auth as middleware } from '@/auth';\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out with Logto Client in JavaScript\nDESCRIPTION: This code snippet demonstrates how to implement sign-in and sign-out functionality using the Logto client in a JavaScript web application. It creates a button that toggles between 'Sign In' and 'Sign Out' based on the authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nconst onClickSignIn = () => {\n  logtoClient.signIn('http://localhost:3000/callback');\n};\nconst onClickSignOut = () => {\n  logtoClient.signOut('http://localhost:3000');\n};\n\nconst button = document.createElement('button');\nbutton.innerHTML = isAuthenticated ? 'Sign Out' : 'Sign In';\nbutton.addEventListener('click', isAuthenticated ? onClickSignOut : onClickSignIn);\n\ndocument.body.appendChild(button);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Route in Flask with Logto\nDESCRIPTION: Creates a Flask route that handles user sign-out by redirecting to Logto's sign-out endpoint. This implementation cleans up both the Python session and the Logto session, then redirects the user to the home page after successful logout.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-out\")\nasync def sign_out():\n    return redirect(\n        # Redirige al usuario a la página de inicio después de un cierre de sesión exitoso\n        await client.signOut(postLogoutRedirectUri=\"${defaultBaseUrl}\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info Using Logto Client in TypeScript\nDESCRIPTION: Demonstrates how to asynchronously fetch user information using the Logto client and log it to the console. Uses async/await syntax for handling the Promise-based API call.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_fetch-userinfo-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\nconsole.log(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto React SDK with Organizations Scope in TypeScript\nDESCRIPTION: This snippet shows how to set up the LogtoConfig object with the Organizations scope enabled. The highlighted line indicates the important addition needed to enable organization functionality in a Logto-powered React application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Logto configuration object with custom scopes and resources. The configuration includes 'read' and 'write' scopes, as well as specific API resource URLs that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig with Organization Scope in TypeScript React\nDESCRIPTION: This code snippet demonstrates how to properly configure the LogtoConfig object for the Logto React SDK with the Organizations user scope. The configuration object is set up to include the necessary scope for accessing organization-related features within the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info in Go Logto SDK\nDESCRIPTION: This code demonstrates how to use the FetchUserInfo method to retrieve additional user information, including custom data. It shows the method call and a comment on how to access the custom_data claim.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nuserInfo, error := client.FetchUserInfo()\n// Ahora puedes acceder al reclamo `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Status in Flutter with Logto\nDESCRIPTION: This code snippet shows how to handle and display the authentication status in a Flutter application using Logto. It demonstrates checking the authentication status and conditionally rendering sign-in or sign-out buttons.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  bool? isAuthenticated = false;\n\n  void render() {\n    setState(() async {\n      isAuthenticated = await logtoClient.isAuthenticated;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Handler and UI Elements in Go\nDESCRIPTION: This code snippet shows how to add a logout route handler and logout link to the homepage using Gin framework and Logto client. The implementation includes session management and redirect handling for the logout flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_implement-sign-out-route.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// ...\n\n\t// Adicionar um link para realizar uma solicitação de logout na página inicial\n\trouter.GET(\"/\", func(ctx *gin.Context) {\n\t\t// ...\n\t\thomePage := `<h1>Hello Logto</h1>` +\n\t\t\t\"<div>\" + authState + \"</div>\" +\n\t\t\t`<div><a href=\"/sign-in\">Sign In</a></div>` +\n\t\t\t// Adicionar link\n\t\t\t`<div><a href=\"/sign-out\">Sign Out</a></div>`\n\n\t\tctx.Data(http.StatusOK, \"text/html; charset=utf-8\", []byte(homePage))\n\t})\n\n\t// Adicionar uma rota para lidar com solicitações de logout\n\trouter.GET(\"/sign-out\", func(ctx *gin.Context) {\n\t\tsession := sessions.Default(ctx)\n\t\tlogtoClient := client.NewLogtoClient(\n\t\t\tlogtoConfig,\n\t\t\t&SessionStorage{session: session},\n\t\t)\n\n\t\t// A solicitação de logout é tratada pelo Logto.\n\t\t// O usuário será redirecionado para o URI de Redirecionamento Pós-Logout ao sair.\n\t\tsignOutUri, signOutErr := logtoClient.SignOut(\"http://localhost:3000\")\n\n\t\tif signOutErr != nil {\n\t\t\tctx.String(http.StatusOK, signOutErr.Error())\n\t\t\treturn\n\t\t}\n\n\t\tctx.Redirect(http.StatusTemporaryRedirect, signOutUri)\n\t})\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Sign-In Callback Handler in Python\nDESCRIPTION: This code sets up a Flask route to handle the callback from Logto after user authentication. It uses the Logto client to process the callback URL, handles any exceptions that might occur during the process, and redirects the user to the home page upon successful sign-in.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/_implement-callback-route.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/callback\")\nasync def callback():\n    try:\n        await client.handleSignInCallback(request.url) # Handle a lot of stuff\n        return redirect(\"/\") # Redirect the user to the home page after a successful sign-in\n    except Exception as e:\n        # Change this to your error handling logic\n        return \"Error: \" + str(e)\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This snippet sets up NextAuth with a Logto provider, specifying custom scopes and a resource for authorization. It exports the necessary functions for authentication handling in a Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email shopping:read shopping:write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signatures Using HMAC in Node.js\nDESCRIPTION: This function verifies that a webhook request came from Logto by computing an HMAC hex digest of the raw request body using the signing key and comparing it with the expected signature from the 'logto-signature-sha-256' header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/secure-webhooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHmac } from 'node:crypto';\n\nexport const verify = (signingKey: string, rawBody: Buffer[], expectedSignature: string) => {\n  const hmac = createHmac('sha256', signingKey);\n  hmac.update(rawBody);\n  const signature = hmac.digest('hex');\n  return signature === expectedSignature;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources in Logto Express (TypeScript)\nDESCRIPTION: This snippet demonstrates how to include 'scopes' and 'resources' properties in a LogtoExpressConfig object for an Express.js application using @logto/express. The 'scopes' array defines the permissions (like 'read' and 'write') that users are eligible to request, while the 'resources' array specifies API endpoints the application will secure. Dependencies include the '@logto/express' package and correct typing for TypeScript. The configuration is intended to be merged with other required options such as clientId, endpoint, and secret, and expects the consuming Express app to use this config for integrating Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Out Method in CustomAuthManager for Flutter\nDESCRIPTION: Implements the sign-out method using Logto SDK to clear the user session and update the current user stream.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture signOut() async {\n    await logtoClient.signOut();\n\n    customAuthUserProviderSubject.add(\n      CustomAuthUserProvider(loggedIn: false),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: Demonstrates how to create a LogtoClient instance with configuration for access scopes and API resource endpoints. Sets up read/write permissions and defines multiple API resource URLs that the client can access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"read\", \"write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Messages in Chrome Extension Background Script\nDESCRIPTION: This snippet sets up a message listener in the background script to handle sign-in and sign-out actions from other parts of the extension.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.action === 'signIn') {\n    const redirectUri = chrome.identity.getRedirectURL('/callback');\n    logtoClient.signIn(redirectUri).finally(sendResponse);\n    return true;\n  }\n\n  if (message.action === 'signOut') {\n    const redirectUri = chrome.identity.getRedirectURL();\n    logtoClient.signOut(redirectUri).finally(sendResponse);\n    return true;\n  }\n\n  return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token and Claims with Logto in Flask\nDESCRIPTION: This snippet demonstrates two ways to work with access tokens using Logto in a Flask application. It shows how to obtain an access token for a specific API endpoint and how to retrieve the claims associated with that token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naccessToken = await client.getAccessToken(\"https://shopping.your-app.com/api\")\n# ou\nclaims = await client.getAccessTokenClaims(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information from ID Token Claims in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve user information using logtoClient.getIdTokenClaims() and dynamically generate an HTML table to display the ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.getIdTokenClaims();\n\n// 为 ID 令牌 (ID token) 声明 (Claims) 生成显示表格\nconst table = document.createElement('table');\nconst thead = document.createElement('thead');\nconst tr = document.createElement('tr');\nconst thName = document.createElement('th');\nconst thValue = document.createElement('th');\nthName.innerHTML = 'Name';\nthValue.innerHTML = 'Value';\ntr.append(thName, thValue);\nthead.append(tr);\ntable.append(thead);\n\nconst tbody = document.createElement('tbody');\n\nfor (const [key, value] of Object.entries(userInfo)) {\n  const tr = document.createElement('tr');\n  const tdName = document.createElement('td');\n  const tdValue = document.createElement('td');\n  tdName.innerHTML = key;\n  tdValue.innerHTML = typeof value === 'string' ? value : JSON.stringify(value);\n  tr.append(tdName, tdValue);\n  tbody.append(tr);\n}\n\ntable.append(tbody);\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources for LogtoClient Initialization in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `LogtoClient` with specific OAuth 2.0 `scopes` ('shopping:read', 'shopping:write', 'store:read', 'store:write') and corresponding API `resources` ('https://shopping.your-app.com/api', 'https://store.your-app.com/api'). This configuration is essential for requesting access tokens that are authorized to interact with the specified APIs according to the requested permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token Using Refresh Token in Next.js Page\nDESCRIPTION: This snippet shows how to retrieve a resource-specific access token from Logto's OIDC token endpoint using the refresh token stored in the user session. It includes setting up proper Basic Auth with app credentials and forming the token request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nexport default async function Home() {\n  const session = await auth();\n\n  if (session?.refreshToken) {\n    // Substitua o ID e o segredo do aplicativo pelo seu próprio, você pode verificar a seção \"Integration\".\n    const basicAuth = Buffer.from('<logto-app-id>:<logto-app-secret>').toString('base64');\n\n    // Substitua a URL pelo seu endpoint Logto, deve terminar com `/oidc/token`\n    const response = await fetch('https://xxx.logto.app/oidc/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Basic ${basicAuth}`,\n      },\n      body: new URLSearchParams({\n        grant_type: 'refresh_token',\n        refresh_token: session.refreshToken,\n        resource: 'https://shopping.your-app.com/api',\n      }).toString(),\n    });\n\n    const data = await response.json();\n    console.log(data.access_token);\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing sendMessage Function for Aliyun Direct Mail Connector in TypeScript\nDESCRIPTION: This function sends messages using Aliyun Direct Mail service. It requires config and endpoint to be set up correctly. The function handles message templating, API request formation, and error handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/develop-your-connector/implement-connectors.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst sendMessage = async (data, inputConfig) => {\n  const { to, type, payload } = data;\n  const config = inputConfig ?? (await getConfig(defaultMetadata.id));\n  validateConfig<AliyunDmConfig>(config, aliyunDmConfigGuard);\n  const { accessKeyId, accessKeySecret, accountName, fromAlias, templates } = config;\n  const template = templates.find((template) => template.usageType === type);\n\n  assert(\n    template,\n    new ConnectorError(\n      ConnectorErrorCodes.TemplateNotFound,\n      `Cannot find template for type: ${type}`\n    )\n  );\n\n  const parameters = {\n    AccessKeyId: accessKeyId,\n    AccountName: accountName,\n    ReplyToAddress: 'false',\n    AddressType: '1',\n    ToAddress: to,\n    FromAlias: fromAlias,\n    Subject: template.subject,\n    HtmlBody:\n      typeof payload.code === 'string'\n        ? template.content.replace(/{{code}}/g, payload.code)\n        : template.content,\n  };\n\n  try {\n    const httpResponse = await request(\n      endpoint,\n      { Action: 'SingleSendMail', ...staticConfigs, ...parameters },\n      accessKeySecret\n    );\n\n    const result = sendEmailResponseGuard.safeParse(parseJson(httpResponse.body));\n\n    if (!result.success) {\n      throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n    }\n\n    return result.data;\n  } catch (error: unknown) {\n    if (error instanceof HTTPError) {\n      const {\n        response: { body: rawBody },\n      } = error;\n\n      assert(typeof rawBody === 'string', new ConnectorError(ConnectorErrorCodes.InvalidResponse));\n\n      errorHandler(rawBody);\n    }\n\n    throw error;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Sign-In Callback Handler in Go\nDESCRIPTION: This code snippet adds a route to handle the sign-in callback from Logto. It uses the Logto client to process the callback, manages user sessions, and redirects the user to the home page upon successful sign-in.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_implement-callback-route.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// ...\n\n\t// Add a route for handling sign-in callback requests\n\trouter.GET(\"/callback\", func(ctx *gin.Context) {\n\t\tsession := sessions.Default(ctx)\n\t\tlogtoClient := client.NewLogtoClient(\n\t\t\tlogtoConfig,\n\t\t\t&SessionStorage{session: session},\n\t\t)\n\n\t\t// The sign-in callback request is handled by Logto\n\t\terr := logtoClient.HandleSignInCallback(ctx.Request)\n\t\tif err != nil {\n\t\t\tctx.String(http.StatusInternalServerError, err.Error())\n\t\t\treturn\n\t\t}\n\n\t\t// Jump to the page specified by the developer.\n\t\t// This example takes the user back to the home page.\n\t\tctx.Redirect(http.StatusTemporaryRedirect, \"/\")\n\t})\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In/Sign-Out Button Component\nDESCRIPTION: Implements a form component in Svelte that dynamically shows a sign-in or sign-out button based on the user's authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"?/{data.user ? 'signOut' : 'signIn'}\">\n  <button type=\"submit\">Sign {data.user ? 'out' : 'in'}</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes and Resources in Kotlin\nDESCRIPTION: Configures a LogtoConfig instance with specific access scopes for shopping and store operations, along with corresponding API resource endpoints. The configuration enables granular access control for different parts of the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ..other configs\n    // highlight-start\n    scopes = listOf(\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy for Logto Auth Endpoint\nDESCRIPTION: Nginx server configuration for setting up reverse proxy to Logto authentication endpoint running on port 3001 with SSL support.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/deployment-and-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 443 ssl;\n  server_name <your_endpoint_url>; // e.g. auth.your-domain.com\n  ...\n\n  location / {\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto https;\n\n    proxy_pass http://127.0.0.1:3001;\n  }\n\n  ssl_certificate <path-to-your-certificate-for-auth-endpoint>;\n  ssl_certificate_key <path-to-your-certificate-key-for-auth-endpoint>\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and Resources in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new LogtoClient instance with custom scopes and resources. It imports the necessary modules, sets up the client with read and write scopes, and specifies two API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-shared-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Method in CustomAuthManager for Dart\nDESCRIPTION: Adds a signIn method to CustomAuthManager that initiates the OIDC authentication flow using Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<FlutterFlowAuthAuthUser?> signIn(\n    String redirectUri,\n  ) async {\n    await logtoClient.signIn(redirectUri);\n\n    var idTokenClaims = await logtoClient.idTokenClaims;\n\n    return _updateCurrentUser(\n      loggedIn: idTokenClaims != null,\n      uid: idTokenClaims?.subject,\n      idToken: idTokenClaims,\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Route in Go\nDESCRIPTION: Implements a sign-out route for a Go web application using Logto. This route clears the user's session and redirects to the Logto sign-out URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandleFunc(\"/sign-out\", func(w http.ResponseWriter, r *http.Request) {\n    signOutUri, err := logtoClient.SignOut(r.Context(), \"http://localhost:8080\")\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n    http.Redirect(w, r, signOutUri, http.StatusFound)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Authentication Services in ASP.NET Core\nDESCRIPTION: Code snippet showing how to configure Logto authentication services in Program.cs. The configuration includes setting up the endpoint, application ID, and application secret from the configuration system. This setup handles cookie-based authentication and OpenID Connect authentication handlers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_add-authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Logto.AspNetCore.Authentication;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  options.Endpoint = builder.Configuration[\"Logto:Endpoint\"]!;\n  options.AppId = builder.Configuration[\"Logto:AppId\"]!;\n  options.AppSecret = builder.Configuration[\"Logto:AppSecret\"];\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto in Vue.js\nDESCRIPTION: This snippet demonstrates how to use the getIdTokenClaims() method from Logto to fetch and display user information in a Vue.js component. It includes both the script and template parts of the component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type IdTokenClaims } from '@logto/vue';\nimport { ref } from 'vue';\n\nconst { isAuthenticated, getIdTokenClaims } = useLogto();\nconst user = ref<IdTokenClaims>();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const claims = await getIdTokenClaims();\n    user.value = claims;\n  })();\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"isAuthenticated && user\">\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>名稱</th>\n          <th>值</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(value, key) in user\" v-bind:key=\"key\">\n          <td>{{ key }}</td>\n          <td>{{ typeof value === \"string\" ? value : JSON.stringify(value) }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto in Vue with Custom Scopes and Resources\nDESCRIPTION: This snippet shows how to initialize Logto in a Vue application with custom scopes and resources. It uses the createLogto function from the @logto/vue package and configures specific access scopes and API resource endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization-based Authentication with Logto in React Native\nDESCRIPTION: This component uses the Logto SDK to fetch and display organization IDs from the authenticated user's ID token claims. It also provides a button to retrieve organization-specific tokens. The component relies on the useLogto hook for authentication state and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID token claims', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  // highlight-start\n                  console.log('raw token', await getOrganizationToken(organizationId));\n                  // highlight-end\n                }}\n              >\n                fetch token (see console)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying User Claims via Frontend API in Next.js (TypeScript)\nDESCRIPTION: This snippet shows how to use SWR and Logto\\'s frontend API to retrieve the current user\\'s authentication claims and render them in a table in a React component. Requires @logto/next, SWR, and React. Expects a Logto-backed API endpoint at /api/logto/user returning a LogtoContext. Returns a JSX element that displays claim names and values if authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type LogtoContext } from '@logto/next';\\nimport { useMemo } from 'react';\\nimport useSWR from 'swr';\\n\\nconst Home = () => {\\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\\n\\n  const claims = useMemo(() => {\\n    if (!data?.isAuthenticated || !data.claims) {\\n      return null;\\n    }\\n\\n    return (\\n      <div>\\n        <h2>声明 (Claims):</h2>\\n        <table>\\n          <thead>\\n            <tr>\\n              <th>名称</th>\\n              <th>值</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            {Object.entries(data.claims).map(([key, value]) => (\\n              <tr key={key}>\\n                <td>{key}</td>\\n                <td>{String(value)}</td>\\n              </tr>\\n            ))}\\n          </tbody>\\n        </table>\\n      </div>\\n    );\\n  }, [data]);\\n\\n  return (\\n    <div>\\n      {claims}\\n    </div>\\n  );\\n};\\n\\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Organization Token Fetch Implementation\nDESCRIPTION: Component setup for fetching organization-specific tokens for user authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode package={props.package} />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in Logto TypeScript Configuration\nDESCRIPTION: This code snippet shows how to configure API resources in the Logto authentication configuration. It specifies multiple API endpoints that the application will need to access, which allows Logto to properly handle authentication for these resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 添加 API 资源 (API resources)\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Ruby on Rails Controller\nDESCRIPTION: This code shows how to initialize the Logto client specifically in a Ruby on Rails controller. It uses the Rails session object for storage and sets up redirection.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\nclass SampleController < ApplicationController\n  before_action :initialize_logto_client\n\n  private\n\n  def initialize_logto_client\n    @client = LogtoClient.new(\n      config: LogtoClient::Config.new(\n        # ...your configuration\n      ),\n      # クライアントが他のホスト（つまり、あなたの Logto テナント）にリダイレクトできるようにする\n      navigate: ->(uri) { redirect_to(uri, allow_other_host: true) },\n      # コントローラーはセッションオブジェクトにアクセスできる\n      storage: LogtoClient::SessionStorage.new(session)\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Retrieving Organization Token with Logto in JavaScript\nDESCRIPTION: This snippet demonstrates how to check authentication status, retrieve ID token claims, and obtain an organization-specific access token using the Logto client. It imports the UserScope from Logto's browser package, checks if the user is authenticated, logs the ID token claims and organization IDs, and then retrieves an access token for the first organization in the list.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UserScope } from 'https://esm.run/@logto/browser';\n\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\n(async () => {\n  if (!isAuthenticated) {\n    return;\n  }\n  const claims = await logtoClient.getIdTokenClaims();\n\n  console.log('ID 權杖 (ID token) 宣告 (claims):', claims);\n  console.log('組織 (Organization) IDs:', claims.organizations);\n\n  // 假設至少有一個組織 (organization)，我們取第一個\n  const organizationId = claims.organizations[0];\n  const token = await logtoClient.getOrganizationToken(organizationId);\n\n  console.log('組織 (Organization) 存取權杖 (access token):', token);\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes for Next.js in TypeScript\nDESCRIPTION: This snippet sets up the Logto authentication configuration in a Next.js application by importing the UserScope enumeration from '@logto/next' and assigning the Organizations scope to the scopes property of the logtoConfig object. This enables organization-level access control in apps using Logto. Dependencies include the '@logto/next' package, and key configuration involves modifying the scopes array inside the logtoConfig object. Expected input is a set of enabled scopes, and the output is the config object consumed by Logto middleware and hooks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the LogtoClient and UserScope from the Logto package and initialize a new LogtoClient instance. It configures the client with an application ID, Logto endpoint, and required user scopes for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/code/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\nappId: '<your-application-id>',\nendpoint: '<your-logto-endpoint>',\nscopes: [UserScope.Email, UserScope.Phone, UserScope.CustomData, UserScope.Identities],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM-like Installation Component for Logto React SDK\nDESCRIPTION: This code imports a reusable MDX fragment that contains npm installation instructions and renders it with the package name '@logto/react' as a prop. This approach allows for consistent installation instructions across documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/react\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration for Capacitor in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a Logto configuration object for a Capacitor application. It sets the application ID, Logto endpoint, and specifies API resources that the application will access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Logto OIDC Configuration Response\nDESCRIPTION: Example JSON response from Logto's OpenID Connect configuration endpoint, showing the jwks_uri for token verification and issuer for token validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/python.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwks_uri\": \"https://tenant-id.logto.app/oidc/jwks\",\n  \"issuer\": \"https://tenant-id.logto.app/oidc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logto Scopes and Resources in Nuxt.js Config (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates configuring the `logto` module within a Nuxt.js application's configuration file (`nuxt.config.ts`). It specifically shows how to define the required OAuth `scopes` (permissions like 'shopping:read') and the target API `resources` (URLs like 'https://shopping.your-app.com/api') that the application needs access to. These settings are essential for defining the permissions requested during authentication and the APIs the application will interact with.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"nuxt.config.ts\"\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Logto Express Configuration with Organization Scopes\nDESCRIPTION: Shows how to configure Logto Express middleware by importing UserScope and setting up organization scopes. The configuration object includes organization scopes as part of the authentication setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...autres configurations\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Callback in Next.js App Router\nDESCRIPTION: This code snippet demonstrates how to handle the authentication callback in a Next.js App Router application. It uses the handleSignIn helper function from @logto/next/server-actions to process the sign-in and redirects the user to the home page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleSignIn } from '@logto/next/server-actions';\nimport { redirect } from 'next/navigation';\nimport { NextRequest } from 'next/server';\nimport { logtoConfig } from '../logto';\n\nexport async function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams;\n  await handleSignIn(logtoConfig, searchParams);\n\n  redirect('/');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in Flutter Widget\nDESCRIPTION: This code snippet demonstrates how to implement Logto authentication in a Flutter widget. It includes buttons for sign-in, sign-out, and retrieving user information. The widget conditionally renders these buttons based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_display-userinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget getUserInfoButton = TextButton(\n      onPressed: () async {\n        // highlight-start\n        final userClaims = await logtoClient.idTokenClaims;\n        print(userInfo);\n        // highlight-end\n      },\n      child: const Text('Get user info'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n            isAuthenticated == true ? getUserInfoButton : const SizedBox.shrink(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Ruby\nDESCRIPTION: This code initializes a LogtoClient object with custom configuration. It specifically sets scopes for read and write permissions, and defines multiple API resources for the client to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...outras configurações\n    # highlight-start\n    scopes: [\"read\", \"write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...outras configurações\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser SDK with Custom Scopes and Resources\nDESCRIPTION: This script imports the Logto Browser SDK from the jsdelivr CDN and creates a new client instance with custom configuration. It specifies the Logto endpoint, application ID, and sets up custom scopes and resources for API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Import `@logto/browser` SDK from the jsdelivr CDN\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-application-id>',\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in JavaScript\nDESCRIPTION: This code demonstrates how to create a new LogtoClient instance with custom scopes and API resources. The configuration includes read and write permissions for shopping and store domains, along with their respective API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/code/_config-resources-with-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up the Logto Express configuration object with custom scopes and resources. It imports the UserScope type from '@logto/express' and defines a config object with specific scopes and API resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Configuration with Scopes and Resources in TypeScript\nDESCRIPTION: This TypeScript snippet initializes a `LogtoConfig` object for the Logto React Native SDK. It sets the required `appId` and `endpoint` placeholders, and specifies the desired access `scopes` (e.g., 'shopping:read', 'store:write') and the API `resources` (e.g., 'https://shopping.your-app.com/api') the application needs to interact with. This configuration is crucial for defining the permissions and target APIs for authentication and authorization flows. It requires the `@logto/rn` package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"App.tsx\"\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Flutter\nDESCRIPTION: This snippet demonstrates how to import the Logto SDK, initialize the LogtoClient instance, and set up the basic structure of a Flutter app with Logto integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_dart_sdk.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Flutter Demo',\n      home: MyHomePage(title: 'Logto Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  late LogtoClient logtoClient;\n\n  void render() {\n    // State change\n  }\n\n  final logtoConfig = const LogtoConfig(\n    endpoint: \"<your-logto-endpoint>\",\n    appId: \"<your-app-id>\"\n  );\n\n  void _init() {\n    logtoClient = LogtoClient(\n      config: logtoConfig,\n      httpClient: http.Client(), // Optional HTTP client\n    );\n    render();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _init();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Callback in Next.js\nDESCRIPTION: Implements the callback route handler for processing user authentication after successful login.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleSignIn } from '@logto/next/server-actions';\nimport { redirect } from 'next/navigation';\nimport { NextRequest } from 'next/server';\nimport { logtoConfig } from '../logto';\n\nexport async function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams;\n  await handleSignIn(logtoConfig, searchParams);\n\n  redirect('/');\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new LogtoClient instance with multiple API resources specified. The client is configured to access APIs at different endpoints ('shopping' and 'store'), which enables the application to request authentication tokens for these specific resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Route in Flask with Logto\nDESCRIPTION: Creates a Flask route that handles user sign-in by redirecting to the Logto authentication page. This implementation uses the client.signIn method to generate the appropriate redirect URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-in\")\nasync def sign_in():\n    # Obtén la URL de inicio de sesión y redirige al usuario a ella\n    return redirect(await client.signIn(\n        redirectUri=\"${defaultRedirectUri}\",\n    ))\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information with Logto Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to asynchronously fetch the current user's information using the Logto Client in a TypeScript/React (TSX) environment. The code assumes that an instance of logtoClient is available and authenticated. The fetchUserInfo method retrieves user profile details, which are then logged to the console. Required dependencies include an initialized Logto Client instance and async/await support; outputs are logged user info objects. Some fields or behaviors may depend on user authentication state, and handling for unauthenticated cases is not included.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_fetch-userinfo-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\nconsole.log(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization List and Token Fetching in React using Logto SDK\nDESCRIPTION: This React component (`Organizations`) uses the `useLogto` hook from `@logto/react` to manage user authentication and organization data. It fetches ID token claims using `getIdTokenClaims` within a `useEffect` hook triggered by changes in authentication status (`isAuthenticated`). The component stores organization IDs in state (`organizationIds`) and renders a list (`<ul>`). Each list item displays an organization ID and a button that, when clicked, calls `getOrganizationToken` with the specific organization ID to fetch and log the corresponding organization token to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"pages/Organizations/index.tsx\"\nimport { useLogto } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID token claims', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  console.log('raw token', await getOrganizationToken(organizationId));\n                }}\n              >\n                fetch token (see console)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Scopes and Resources in React TypeScript\nDESCRIPTION: Example showing how to define scopes and resources in a Logto configuration object for React. The configuration specifies read/write access scopes and API resource endpoints that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resource Settings in .NET\nDESCRIPTION: Configuration settings in appsettings.json to enable JWT token access for API resources. Includes scope definition, resource URL, and extra token parameters following RFC 8707 specifications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"IdentityServer\": {\n    \"Scope\": \"openid profile email <your-api-scopes>\",\n    \"Resource\": \"https://my-api-resource\",\n    \"ExtraTokenParams\": {\n        \"resource\": \"https://my-api-resource\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up NextAuth for a Next.js application with a custom Logto provider, specifying OAuth scopes for openid, offline access, profile, email, and shopping-specific permissions. It exports authentication handlers and control functions (signIn, signOut, auth) for use across the application. Dependencies include 'next-auth' and a configured Logto provider; the 'scope' and 'resource' parameters are critical for API and identity access, and any misconfiguration may limit application capabilities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport NextAuth from 'next-auth';\\n\\nexport const { handlers, signIn, signOut, auth } = NextAuth({\\n  providers: [\\n    {\\n      id: 'logto',,\\n      // ...\\n      authorization: {\\n        params: {\\n          // highlight-next-line\\n          scope: 'openid offline_access profile email shopping:read shopping:write',\\n          resource: 'https://shopping.your-app.com/api',\\n        },\\n      },\\n      // ...\\n    },\\n  ],\\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Logto Data with signOut Method in JavaScript\nDESCRIPTION: The signOut() method is used to clear all Logto-related data from both memory and localStorage. This is typically used when a user logs out of the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_web-sign-out-note.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n.signOut()\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Claims and ID in C# using Logto\nDESCRIPTION: This snippet shows how to access user claims and extract the user ID using the Logto library in an ASP.NET Core application. It utilizes the User.Claims property and filters for the specific claim type defined in LogtoParameters.Claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_the-user-object.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar claims = User.Claims;\n\n// Get the user ID\nvar userId = claims.FirstOrDefault(c => c.Type == LogtoParameters.Claims.Subject)?.Value;\n```\n\n----------------------------------------\n\nTITLE: Adding Sign-Out Functionality in Go with Gin and Logto\nDESCRIPTION: This code snippet shows how to add a sign-out link to the home page and create a route to handle sign-out requests using Gin and Logto. It demonstrates updating the main function to include these new features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_implement-sign-out-route.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// ...\n\n\t// Agregar un enlace para realizar una solicitud de cierre de sesión en la página de inicio\n\trouter.GET(\"/\", func(ctx *gin.Context) {\n\t\t// ...\n\t\thomePage := `<h1>Hello Logto</h1>` +\n\t\t\t\"<div>\" + authState + \"</div>\" +\n\t\t\t`<div><a href=\"/sign-in\">Sign In</a></div>` +\n\t\t\t// Agregar enlace\n\t\t\t`<div><a href=\"/sign-out\">Sign Out</a></div>`\n\n\t\tctx.Data(http.StatusOK, \"text/html; charset=utf-8\", []byte(homePage))\n\t})\n\n\t// Agregar una ruta para manejar solicitudes de cierre de sesión\n\trouter.GET(\"/sign-out\", func(ctx *gin.Context) {\n\t\tsession := sessions.Default(ctx)\n\t\tlogtoClient := client.NewLogtoClient(\n\t\t\tlogtoConfig,\n\t\t\t&SessionStorage{session: session},\n\t\t)\n\n\t\t// La solicitud de cierre de sesión es manejada por Logto.\n\t\t// El usuario será redirigido al URI de redirección posterior al cierre de sesión al cerrar sesión.\n\t\tsignOutUri, signOutErr := logtoClient.SignOut(\"http://localhost:3000\")\n\n\t\tif signOutErr != nil {\n\t\t\tctx.String(http.StatusOK, signOutErr.Error())\n\t\t\treturn\n\t\t}\n\n\t\tctx.Redirect(http.StatusTemporaryRedirect, signOutUri)\n\t})\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Access Token to API Request Headers\nDESCRIPTION: This snippet demonstrates how to attach an access token to the Authorization header of an API request using the Bearer token format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nawait LogtoRequest.get(\n  useSession: session,\n  endpoint: userInfoEndpoint,\n  // highlight-next-line\n  headers: [\"Authorization\": \"Bearer \\(accessToken)\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code instantiates a LogtoClient with specific authorization scopes ('read', 'write') and multiple API resources. The highlighted portion emphasizes the custom configuration for access control and resource targeting.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Parameters in React Native TSX\nDESCRIPTION: Shows how to initialize Logto configuration object with application ID, endpoint URL, access scopes, and API resource endpoints. This setup is essential for implementing Logto authentication in a React Native application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-Out Component for Next.js\nDESCRIPTION: This snippet defines a client-side Sign-Out component for Next.js. It creates a button that triggers the onSignOut function passed as a prop when clicked.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignOut: () => Promise<void>;\n};\n\nconst SignOut = ({ onSignOut }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignOut();\n      }}\n    >\n      Sign Out\n    </button>\n  );\n};\n\nexport default SignOut;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Resource and Scopes in C#\nDESCRIPTION: This code snippet demonstrates how to add Logto authentication to a .NET application's service collection with specific resource URL and authorization scopes. It configures the resource endpoint and defines required scopes including openid, profile, offline_access, read, and write permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Resource = \"https://shopping.your-app.com/api\";\n  options.Scopes = new string[] {\n    \"openid\",\n    \"profile\",\n    \"offline_access\",\n    \"read\",\n    \"write\"\n  };\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Callback Handler\nDESCRIPTION: JavaScript code that handles the OAuth sign-in callback using Logto SDK. The code processes the callback URL and redirects back to the home page after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/_handle-redirect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  (async () => {\n    // Handle sign-in callback logic by calling the SDK method\n    await logtoClient.handleSignInCallback(window.location.href);\n\n    // Redirect back to the home page when the handling is done\n    window.location.assign('https://your-awesome-site.webflow.io');\n  })();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generating Sign-In URI for OpenID Connect Authorization\nDESCRIPTION: Function to generate a sign-in URI based on the authorization endpoint with required parameters such as client ID, redirect URI, and PKCE challenge. The function constructs a URL with appropriate query parameters for initiating the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/sdk-conventions/core-sdk-conventions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateSignInUri({authorizationEndpoint, clientId, redirectUri, codeChallenge, state, scopes, resources, prompt})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources in Logto Go SDK\nDESCRIPTION: This snippet shows how to configure the LogtoConfig struct with multiple API resource endpoints. The Resources field is populated with an array of API URLs that the application needs to access, allowing proper authentication and authorization for these resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...outras configurações\n    // highlight-next-line\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import the `LogtoClient` and `UserScope` from the Logto browser SDK (dynamically specified by `props.package` or defaulting to `@logto/browser`). It then initializes a `logtoClient` instance by providing the application ID, Logto endpoint URL, and specifying the user data scopes (email, phone, custom data, identities) the application requires access to. Replace the placeholder values (`<your-application-id>`, `<your-logto-endpoint>`) with your actual configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\nappId: '<your-application-id>',\nendpoint: '<your-logto-endpoint>',\nscopes: [UserScope.Email, UserScope.Phone, UserScope.CustomData, UserScope.Identities],\n});\n```\n\n----------------------------------------\n\nTITLE: API Request with Bearer Token using Bash\nDESCRIPTION: Demonstrates how to include the JWT access token in an API request using the Authorization header with Bearer scheme. This is the standard way to authenticate API requests with a token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nGET https://resource-server.com/api/users\nAuthorization: Bearer eyJhbGciOiJIUz...\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize the `LogtoClient` from a specified package (defaulting to `@logto/browser` if `props.package` is not provided). It highlights the configuration of custom `scopes` (e.g., 'read', 'write') and `resources` (API identifiers like 'https://shopping.your-app.com/api') which define the permissions and target APIs the client will request access to during the authentication flow. Other configuration options are omitted for brevity.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-shared-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Sign-In/Sign-Out Button in SvelteKit\nDESCRIPTION: This snippet shows how to create a dynamic sign-in/sign-out button component in Svelte that changes its behavior based on the user's authentication status, submitting the appropriate form action to either log in or log out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"?/{data.user ? 'signOut' : 'signIn'}\">\n  <button type=\"submit\">Sign {data.user ? 'out' : 'in'}</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes and Resources in Kotlin\nDESCRIPTION: This snippet shows how to create a LogtoConfig object with custom scopes and resources. The scopes define the permissions requested, while the resources specify the API endpoints that can be accessed with the acquired token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ..other configs\n    // highlight-start\n    scopes = listOf(\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Authentication with Vue\nDESCRIPTION: This code shows how to import and use the Logto authentication plugin in a Vue application. It specifically highlights the configuration of scopes and resources which control API access permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in Logto React Integration\nDESCRIPTION: This snippet shows how to configure multiple API resources in the LogtoConfig object for a React application. The resources property defines the API endpoints that will be secured by Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 添加 API 资源 (API resources)\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Flow in React Native with Logto\nDESCRIPTION: This code demonstrates a React Native component that manages authentication state using the Logto library. It fetches user information when authenticated, and renders different UI elements based on the authentication status. The component includes buttons for signing in and out, and displays user information when authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_fetch-user-info-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { fetchUserInfo, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // highlight-start\n      fetchUserInfo().then((userInfo) => {\n        setUser(userInfo);\n      });\n      // highlight-end\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Route and UI in Go with Logto\nDESCRIPTION: Demonstrates how to add a sign-out link to the homepage and implement a sign-out route handler using Gin framework and Logto client. The code handles session management, performs the sign-out request through Logto, and redirects the user to a specified post-logout URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_implement-sign-out-route.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// ...\n\n\t// Add a link to perform a sign-out request on the home page\n\trouter.GET(\"/\", func(ctx *gin.Context) {\n\t\t// ...\n\t\thomePage := `<h1>Hello Logto</h1>` +\n\t\t\t\"<div>\" + authState + \"</div>\" +\n\t\t\t`<div><a href=\"/sign-in\">Sign In</a></div>` +\n\t\t\t// Add link\n\t\t\t`<div><a href=\"/sign-out\">Sign Out</a></div>`\n\n\t\tctx.Data(http.StatusOK, \"text/html; charset=utf-8\", []byte(homePage))\n\t})\n\n\t// Add a route for handling signing out requests\n\trouter.GET(\"/sign-out\", func(ctx *gin.Context) {\n\t\tsession := sessions.Default(ctx)\n\t\tlogtoClient := client.NewLogtoClient(\n\t\t\tlogtoConfig,\n\t\t\t&SessionStorage{session: session},\n\t\t)\n\n\t\t// The sign-out request is handled by Logto.\n\t\t// The user will be redirected to the Post Sign-out Redirect URI on signed out.\n\t\tsignOutUri, signOutErr := logtoClient.SignOut(\"http://localhost:3000\")\n\n\t\tif signOutErr != nil {\n\t\t\tctx.String(http.StatusOK, signOutErr.Error())\n\t\t\treturn\n\t\t}\n\n\t\tctx.Redirect(http.StatusTemporaryRedirect, signOutUri)\n\t})\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Passport.js with OpenID Connect Strategy in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize Passport.js with OpenID Connect strategy for Logto authentication. It sets up the strategy with necessary configurations and defines serialize and deserialize methods for user management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport passport from 'passport';\nimport OpenIDConnectStrategy, { type Profile, type VerifyCallback } from 'passport-openidconnect';\n\nconst endpoint = '<your-logto-endpoint>';\nconst appId = '<your-application-id>';\nconst appSecret = '<your-application-secret>';\n\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        issuer: `${endpoint}/oidc`,\n        authorizationURL: `${endpoint}/oidc/auth`,\n        tokenURL: `${endpoint}/oidc/token`,\n        userInfoURL: `${endpoint}/oidc/me`,\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        scope: ['profile', 'offline_access'],\n      },\n      (issuer: string, profile: Profile, callback: VerifyCallback) => {\n        callback(null, profile);\n      }\n    )\n  );\n\n  passport.serializeUser((user, callback) => {\n    callback(null, user);\n  });\n\n  passport.deserializeUser(function (user, callback) {\n    callback(null, user as Express.User);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in Swift\nDESCRIPTION: Creates a LogtoConfig object with endpoint URL, application ID, and API resources, then initializes a LogtoClient with this configuration. The resources array contains URLs for API endpoints that require authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // E.g. http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-next-line\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Add API resources\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In with Logto in Capacitor (TypeScript)\nDESCRIPTION: This code demonstrates how to implement the sign-in functionality using Logto in a Capacitor app. It uses a redirect URI to handle the authentication flow and logs the authentication status and ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst onClick = async () => {\n  await logtoClient.signIn('com.example.app://callback');\n  console.log(await logtoClient.isAuthenticated()); // true\n  console.log(await logtoClient.getIdTokenClaims()); // { sub: '...', ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto for React Native Authentication - TypeScript\nDESCRIPTION: This snippet defines a TypeScript configuration object (of type LogtoConfig) to initialize the Logto authentication library in a React Native project. The configuration includes parameters such as appId for uniquely identifying the app, endpoint for specifying the Logto server instance, scopes for listing required authentication scopes, and resources to declare backend API endpoints protected by Logto. Both scopes and resources are customizable arrays, and correct values must be supplied based on your Logto setup. The configuration object must be used during Logto client initialization to enable secure access control and proper API authorization within the app.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Ruby\nDESCRIPTION: Basic initialization of the Logto client with configuration parameters including endpoint, app ID, and app secret. Sets up navigation and session storage handlers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    endpoint: \"https://your-logto-endpoint.com\",\n    app_id: \"your-logto-app-id\",\n    app_secret: \"your-logto-app-secret\"\n  ),\n  navigate: ->(uri) { a_redirect_method(uri) },\n  storage: LogtoClient::SessionStorage.new(the_session_object)\n)\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in a Rails Controller\nDESCRIPTION: Demonstrates how to initialize the Logto client in a Rails controller using a before_action callback. The implementation includes proper configuration for navigation (allowing redirects to external hosts) and session storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\nclass SampleController < ApplicationController\n  before_action :initialize_logto_client\n\n  private\n\n  def initialize_logto_client\n    @client = LogtoClient.new(\n      config: LogtoClient::Config.new(\n        # ...your configuration\n      ),\n      # Allow the client to redirect to other hosts (i.e. your Logto tenant)\n      navigate: ->(uri) { redirect_to(uri, allow_other_host: true) },\n      # Controller has access to the session object\n      storage: LogtoClient::SessionStorage.new(session)\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Vue.js with Logto\nDESCRIPTION: This snippet demonstrates how to use the getIdTokenClaims() method from Logto to fetch and display user information in a Vue.js component. It checks for authentication status and renders user claims in a table format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type IdTokenClaims } from '@logto/vue';\nimport { ref } from 'vue';\n\nconst { isAuthenticated, getIdTokenClaims } = useLogto();\nconst user = ref<IdTokenClaims>();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const claims = await getIdTokenClaims();\n    user.value = claims;\n  })();\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"isAuthenticated && user\">\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Nom</th>\n          <th>Valeur</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(value, key) in user\" v-bind:key=\"key\">\n          <td>{{ key }}</td>\n          <td>{{ typeof value === \"string\" ? value : JSON.stringify(value) }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Passport.js with OpenID Connect Strategy in TypeScript\nDESCRIPTION: This function initializes Passport.js with OpenID Connect authentication strategy. It configures the client credentials, callback URL, and explicitly defines the required scopes including openid, offline_access, profile, and email for user authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        // ... other options\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        // highlight-start\n        scope: ['openid', 'offline_access', 'profile', 'email'],\n        // highlight-end\n      }\n      // ... other options\n    )\n  );\n  // ... other options\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Middleware in Express\nDESCRIPTION: Implementation of an authentication middleware in Express. This middleware verifies if a user is signed in, refreshes tokens if necessary, and attaches the user ID to the request object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// auth.js\n\nconst { decodeIdToken } = require('@logto/js');\nconst { refreshTokens } = require('./logto');\n\nconst withAuth =\n  ({ requireAuth } = { requireAuth: true }) =>\n  async (req, res, next) => {\n    if (requireAuth && !req.session.tokens) {\n      res.redirect('/sign-in');\n      return;\n    }\n\n    if (req.session.tokens) {\n      if (req.session.tokens.expiresAt >= Date.now()) {\n        // Access token expired, refresh for new tokens\n        try {\n          const response = await refreshTokens(req.session.tokens.refreshToken);\n          req.session.tokens = {\n            ...response,\n            expiresAt: response.expiresIn + Date.now(),\n            idToken: decodeIdToken(response.idToken),\n          };\n        } catch {\n          // Exchange failed, redirect to sign in\n          res.redirect('/sign-in');\n          return;\n        }\n      }\n\n      req.auth = req.session.tokens.idToken.sub;\n    }\n\n    next();\n  };\n\nmodule.exports = withAuth;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto in Vue.js\nDESCRIPTION: This snippet demonstrates how to use the Logto authentication library in a Vue.js component to check authentication status and retrieve an access token for a specific API endpoint. It imports the necessary functions from the Logto Vue library, checks if the user is authenticated, and then retrieves an access token for the specified API.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type UserInfoResponse } from '@logto/vue';\n\nconst { isAuthenticated, getAccessToken } = useLogto();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const accessToken = await getAccessToken('https://shopping.your-app.com/api');\n    console.log(accessToken);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig and LogtoClient in Swift\nDESCRIPTION: This code initializes a LogtoConfig object with a custom endpoint, app ID, and API resources. It then creates a LogtoClient instance using the configuration. The configuration includes multiple API resources for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // 例如 http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-next-line\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // 添加 API 资源 (API resources)\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: User Profile Type Definition in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for additional OpenID Connect standard claims stored in the user profile, including personal information and address details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype UserProfile = Partial<{\n  familyName: string;\n  givenName: string;\n  middleName: string;\n  nickname: string;\n  preferredUsername: string;\n  profile: string;\n  website: string;\n  gender: string;\n  birthdate: string;\n  zoneinfo: string;\n  locale: string;\n  address: Partial<{\n    formatted: string;\n    streetAddress: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    country: string;\n  }>;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client in Express.js\nDESCRIPTION: Sets up the configuration object for the Logto client in an Express.js application. It includes the application ID, secret, Logto endpoint, and the base URL of the Express app.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-application-secret>',\n  endpoint: '<your-logto-endpoint>', // Par exemple, http://localhost:3001\n  baseUrl: '<your-express-app-base-url>', // Par exemple, http://localhost:3000\n};\n```\n\n----------------------------------------\n\nTITLE: Visualizando el flujo de autorización RBAC con Mermaid\nDESCRIPTION: Diagrama de secuencia que muestra el flujo completo de autorización RBAC, incluyendo la autenticación, solicitud de token, filtrado de alcances basado en política RBAC, y validación de JWT en la API.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/role-based-access-control/protect-api-resources-with-rbac.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    Note over Client,API: Autenticación y Solicitud de Token\n    Client->>Logto: GET /oidc/auth & POST /oidc/token\n    Note right of Client: con recurso y alcances solicitados\n\n    Note over Logto: Filtrar alcances solicitados basado en<br/>la política RBAC del usuario\n    Logto-->>Client: Devuelve token de acceso JWT\n    Note left of Logto: El token contiene:<br/>- Reclamos estándar de JWT<br/>- Alcances otorgados (filtrados por RBAC)\n\n    Note over Client,API: Solicitud de API\n    Client->>API: Solicitud con token Bearer\n\n    Note over API: Validar token JWT:<br/>- Validación estándar de JWT<br/>- Verificar alcances otorgados\n\n    alt Token Inválido\n        API-->>Client: 401 No autorizado\n    else Token Válido\n        alt Alcances requeridos no están en los alcances otorgados\n            API-->>Client: 403 Prohibido\n        else Tiene alcances requeridos\n            API-->>Client: Recurso Protegido\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Implementing getAuthorizationUri for OAuth Social Connector\nDESCRIPTION: TypeScript implementation of getAuthorizationUri method that generates authorization URL for social login\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/develop-your-connector/implement-connectors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAuthorizationUri = async ({ state, redirectUri }) => {\n  const queryParameters = new URLSearchParams({\n    client_id: config.clientId, // `config` contains your GitHub application credential\n    redirect_uri: redirectUri,\n    state,\n  });\n\n  return `${authorizationEndpoint}?${queryParameters.toString()}`;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomAuthManager Class with Logto Integration in Dart\nDESCRIPTION: A class that manages authentication using the Logto SDK in a Flutter application. It initializes the Logto client with configuration settings, updates the current user state, and provides authentication initialization logic.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomAuthManager {\n  late LogtoClient logtoClient;\n\n  final logtoConfig = const LogtoConfig(\n      appId: '<YOUR-APP-ID>',\n      endpoint: '<YOUR-LOGTO-ENDPOINT>');\n\n\n  // ...\n\n  FlutterFlowAuthAuthUser? _updateCurrentUser(\n      {bool loggedIn = false, String? uid, OpenIdClaims? idToken}) {\n    // Mettre à jour le flux de l'utilisateur actuel.\n    final updatedUser = FlutterFlowAuthAuthUser(\n      loggedIn: loggedIn,\n      uid: uid,\n      idToken: idToken,\n    );\n\n    flutterFlowAuthAuthUserSubject.add(updatedUser);\n\n    return updatedUser;\n  }\n\n  Future initialize() async {\n    logtoClient = LogtoClient(config: logtoConfig, httpClient: http.Client());\n\n    late OpenIdClaims? idToken;\n\n    try {\n      idToken = await logtoClient.idTokenClaims;\n    } catch (e) {\n      if (kDebugMode) {\n        print('Erreur lors de l\\'initialisation de l\\'authentification : $e');\n      }\n    }\n\n    _updateCurrentUser(\n        loggedIn: idToken != null, uid: idToken?.subject, idToken: idToken);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Logto Authentication in Next.js Home Page\nDESCRIPTION: This code snippet shows how to integrate Logto authentication into a Next.js home page. It uses server actions to handle sign-in and sign-out, and conditionally renders authentication buttons based on the user's authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext, signIn, signOut } from '@logto/next/server-actions';\nimport SignIn from './sign-in';\nimport SignOut from './sign-out';\nimport { logtoConfig } from './logto';\n\nconst Home = () => {\n  const { isAuthenticated, claims } = await getLogtoContext(logtoConfig);\n\n  return (\n    <nav>\n      {isAuthenticated ? (\n        <p>\n          Bonjour, {claims?.sub},\n          <SignOut\n            onSignOut={async () => {\n              'use server';\n\n              await signOut(logtoConfig);\n            }}\n          />\n        </p>\n      ) : (\n        <p>\n          <SignIn\n            onSignIn={async () => {\n              'use server';\n\n              await signIn(logtoConfig);\n            }}\n          />\n        </p>\n      )}\n    </nav>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: Sets up NextAuth authentication by exporting handlers, signIn, signOut, and auth functions. Configures Logto provider with specific OpenID scopes and resource endpoint for shopping API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email shopping:read shopping:write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Access Token Response in JSON\nDESCRIPTION: Shows the structure of a successful access token response from the Logto Management API. It includes the access token, expiration time, token type, and scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrate-logto/interact-with-management-api/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"eyJhbG...2g\",\n  \"expires_in\": 3600,\n  \"token_type\": \"Bearer\",\n  \"scope\": \"all\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Resources in Vue - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to register the Logto authentication middleware in a Vue application by calling 'app.use' with 'createLogto' and a configuration object. The 'resources' array specifies which API endpoints will be protected by Logto, enabling OAuth or access token based security for specified resources. Dependencies include the '@logto/vue' package and an initialized Vue app instance. The 'resources' entry expects an array of endpoint URLs as strings, and other configuration properties can be added as needed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\\n\\napp.use(createLogto, {\\n  // ...other configs\\n  // highlight-next-line\\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Method in CustomAuthManager for Dart\nDESCRIPTION: Adds a signOut method to CustomAuthManager that handles user sign-out using Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture signOut() async {\n    await logtoClient.signOut();\n\n    flutterFlowAuthAuthUserSubject.add(\n      FlutterFlowAuthAuthUser(loggedIn: false),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client for Next.js\nDESCRIPTION: Sets up the basic configuration for Logto client including app credentials, endpoints, and cookie settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoNextConfig } from '@logto/next';\n\nexport const logtoConfig: LogtoNextConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // Z.B. http://localhost:3001\n  baseUrl: '<your-nextjs-app-base-url>', // Z.B. http://localhost:3000\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI Logic\nDESCRIPTION: Implements the home route with conditional rendering based on authentication status, showing either sign-in or sign-out options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  res.setHeader('content-type', 'text/html');\n\n  if (req.user.isAuthenticated) {\n    res.end(`<div>Hello ${req.user.claims?.sub}, <a href=\"/logto/sign-out\">Sign Out</a></div>`);\n  } else {\n    res.end('<div><a href=\"/logto/sign-in\">Sign In</a></div>');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Kotlin ViewModel\nDESCRIPTION: This snippet creates a LogtoViewModel class that initializes the LogtoClient with a LogtoConfig. It also includes a companion object with a Factory for creating the ViewModel.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_init-logto-client.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n//...with other imports\nimport io.logto.sdk.android.LogtoClient\nimport io.logto.sdk.android.type.LogtoConfig\n\nclass LogtoViewModel(application: Application) : AndroidViewModel(application) {\n    private val logtoConfig = LogtoConfig(\n          endpoint = \"<your-logto-endpoint>\",\n          appId = \"<your-app-id>\",\n          scopes = null,\n          resources = null,\n          usingPersistStorage = true,\n    )\n\n    private val logtoClient = LogtoClient(logtoConfig, application)\n\n    companion object {\n        val Factory: ViewModelProvider.Factory = object : ViewModelProvider.Factory {\n            @Suppress(\"UNCHECKED_CAST\")\n            override fun <T : ViewModel> create(\n                modelClass: Class<T>,\n                extras: CreationExtras\n            ): T {\n                // Get the Application object from extras\n                val application = checkNotNull(extras[APPLICATION_KEY])\n                return LogtoViewModel(application) as T\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoClient Scopes and Resources in TypeScript\nDESCRIPTION: This TypeScript snippet shows the instantiation of `LogtoClient`, focusing on the `scopes` and `resources` properties. The `scopes` array defines the permissions the application requests (e.g., 'read', 'write'), while the `resources` array lists the unique identifiers (URIs) of the target APIs the application intends to access. These configurations are essential for Logto's OAuth 2.0 and OIDC flows to manage access control.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Organization Scope in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the LogtoClient and UserScope from the Logto package and create a new LogtoClient instance with the Organizations scope. It's typically used to set up authentication and authorization for applications that require organization-level access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-organization-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Authentication with Custom Scopes and Resources in Vue (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to initialize the Logto authentication plugin in a Vue application. It showcases the configuration of custom scopes and resources, which are essential for defining access permissions and API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Manual User Info Fetching in API Route\nDESCRIPTION: Implementation of an API route that manually fetches user information with the fetchUserInfo option enabled. Includes authentication check and response handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute(\n  (request, response) => {\n    if (!request.user.isAuthenticated) {\n      response.status(401).json({ message: 'Unauthorized' });\n\n      return;\n    }\n\n    response.json({\n      userInfo: request.user.userInfo,\n    });\n  },\n  { fetchUserInfo: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Blorc OpenIdConnect Services in C#\nDESCRIPTION: This code snippet demonstrates how to register and configure Blorc OpenIdConnect services in the Program.cs file of a Blazor WebAssembly application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blorc.OpenIdConnect;\nusing Blorc.Services;\n\nbuilder.Services.AddBlorcCore();\nbuilder.Services.AddAuthorizationCore();\nbuilder.Services.AddBlorcOpenIdConnect(\n    options =>\n    {\n        builder.Configuration.Bind(\"IdentityServer\", options);\n    });\n\nvar webAssemblyHost = builder.Build();\n\nawait webAssemblyHost\n    .ConfigureDocumentAsync(async documentService =>\n    {\n        await documentService.InjectBlorcCoreJsAsync();\n        await documentService.InjectOpenIdConnectAsync();\n    });\n\nawait webAssemblyHost.RunAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Middleware for Access Token Retrieval in TypeScript\nDESCRIPTION: This code configures a GET route '/fetch-access-token' using Logto middleware. It enables access token retrieval for a specific resource and logs the token before sending the user information as a JSON response. The middleware is set up with 'getAccessToken: true' and a specified resource URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-access-token',\n  withLogto({\n    ...config,\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }),\n  (request, response) => {\n    // highlight-next-line\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in Nuxt.js (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates configuring the Logto module within a Nuxt.js application's `nuxt.config.ts` file. It specifically defines the `scopes` array (requesting 'read' and 'write' permissions) and the `resources` array (specifying target API endpoints). These configurations are essential for the Logto authentication flow to determine access rights.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in JavaScript\nDESCRIPTION: Demonstrates how to import the LogtoClient class and create a new instance with application configuration. The configuration includes the application ID, Logto endpoint, and requested user scopes such as email, phone, custom data, and identities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\nappId: '<your-application-id>',\nendpoint: '<your-logto-endpoint>',\nscopes: [UserScope.Email, UserScope.Phone, UserScope.CustomData, UserScope.Identities],\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Next.js with Auth Session\nDESCRIPTION: This snippet demonstrates how to display authenticated user information by accessing the session object returned from the auth() function. It renders a table showing all user claims (key-value pairs) when a user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from '@/auth';\n\nexport default async function Home() {\n  const session = await auth();\n\n  return (\n    <main>\n      {session?.user && (\n        <div>\n          <h2>Reivindicações (Claims):</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Nome</th>\n                <th>Valor</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(session.user).map(([key, value]) => (\n                <tr key={key}>\n                  <td>{key}</td>\n                  <td>{String(value)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK with API Resources in Kotlin\nDESCRIPTION: This snippet shows how to create a LogtoConfig object with API resources. The resources parameter is highlighted and specifies the API endpoints that the application needs access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    // highlight-start\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"), // API リソースを追加\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Web Key Set Example Structure\nDESCRIPTION: Example structure of a JSON Web Key Set (JWKS) used for ID token verification. Contains cryptographic keys with properties like key type, usage, key ID, and RSA parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/sdk-conventions/core-sdk-conventions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// JsonWebKeySet example\n{\n  \"keys\": [\n    {\n      \"kty\": \"RSA\",\n      \"use\": \"sig\",\n      \"kid\": \"xxxx\",\n      \"e\": \"xxxx\",\n      \"n\": \"xxxx\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Module Options in Nuxt Config\nDESCRIPTION: Sets up Logto authentication configuration in nuxt.config.ts by specifying custom scopes for permission control and API resource endpoints. The configuration enables access to shopping and store related API endpoints with read/write permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Organizations Scope in Go\nDESCRIPTION: This snippet initializes a LogtoConfig struct with the 'organizations' scope added to the user's permissions. It demonstrates how to extend the default configuration to include additional access rights.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Scopes: []string{core.UserScopeOrganizations},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client for Next.js\nDESCRIPTION: Creates a configuration object for Logto client with application credentials and settings. Includes app ID, secret, endpoints, and cookie configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoNextConfig } from '@logto/next';\n\nexport const logtoConfig: LogtoNextConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // 例: http://localhost:3001\n  baseUrl: '<your-nextjs-app-base-url>', // 例: http://localhost:3000\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims in Vue Template\nDESCRIPTION: This HTML template renders a table of user claims when a user is authenticated. It dynamically generates table rows for each claim, properly formatting string and non-string values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"isAuthenticated && user\">\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(value, key) in user\" v-bind:key=\"key\">\n          <td>{{ key }}</td>\n          <td>{{ typeof value === \"string\" ? value : JSON.stringify(value) }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client in React Native with TypeScript\nDESCRIPTION: Shows how to create a LogtoConfig object for React Native applications. Includes setting the app ID, endpoint URL, access scopes, and protected API resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Configuration with Scopes and Resources in TypeScript (React Native)\nDESCRIPTION: This TypeScript code defines a `LogtoConfig` object for the Logto React Native SDK. It specifies the application ID, Logto endpoint, required OAuth scopes ('shopping:read', 'shopping:write', 'store:read', 'store:write'), and the target API resource identifiers ('https://shopping.your-app.com/api', 'https://store.your-app.com/api') necessary for authentication and authorization flows. Requires the `@logto/rn` package and replacement of placeholder values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI in SwiftUI with Logto\nDESCRIPTION: SwiftUI view implementation showing how to handle authentication state and implement sign-in/sign-out functionality using Logto client. The code demonstrates state management, error handling, and async/await pattern for authentication operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Button(\"Sign Out\") {\n          Task { [self] in\n            await client.signOut()\n            isAuthenticated = false\n          }\n        }\n      } else {\n        Button(\"Sign In\") {\n          Task { [self] in\n            do {\n              try await client.signInWithBrowser(redirectUri: \"${props.redirectUris[0] ?? 'io.logto://callback'}\")\n              isAuthenticated = true\n            } catch let error as LogtoClientErrors.SignIn {\n              // error occured during sign in\n            } catch {\n              // other errors\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Scopes and Resources in Logto Go Client Configuration\nDESCRIPTION: This Go code snippet demonstrates initializing a `LogtoConfig` struct, specifically setting the `Scopes` and `Resources` fields. The `Scopes` array specifies the permissions the application requests (e.g., reading/writing shopping data), while the `Resources` array lists the unique identifiers of the target APIs (resource servers) the application needs access to. This configuration is crucial for requesting appropriate access tokens during the Logto authentication flow. Requires the Logto Go client library.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Swift\nDESCRIPTION: Creates a LogtoConfig object with required parameters (endpoint and appId) plus optional scopes and resources arrays. The config is then used to instantiate a LogtoClient. The highlighted lines show how to specify custom scopes and resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with Logto in React Native\nDESCRIPTION: This component retrieves an access token for a specific API resource using the Logto authentication library. It checks if the user is authenticated before requesting the token and stores it in the component state to display it in the UI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\n\nconst AccessToken = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        // highlight-start\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        // highlight-end\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Visualizing Scope-Claim Relationships with Mermaid Diagram\nDESCRIPTION: A class diagram showing the relationship between OAuth scopes (openid, profile, email, phone) and their associated claims. The diagram illustrates what user information is accessible through each scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_scopes-claims-introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n  class openid {\n    +sub\n  }\n\n  class profile {\n    +name\n    +username\n    +picture\n    +...\n  }\n\n  class email {\n    +email\n    +email_verified\n  }\n\n  class phone {\n    +phone_number\n    +phone_number_verified\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client (Kotlin)\nDESCRIPTION: This snippet demonstrates how to request additional scopes when configuring the Logto client. It adds 'email' and 'phone' scopes to the LogtoConfig object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val logtoConfig = LogtoConfig(\n    // ...other configs\n    scopes = listOf(\"email\", \"phone\"), // or `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Creating API Routes for Logto Authentication in Next.js\nDESCRIPTION: This code creates API routes for handling Logto authentication. It sets up routes for sign-in, sign-in callback, sign-out, and user information retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.handleAuthRoutes();\n```\n\n----------------------------------------\n\nTITLE: Inicializando LogtoClient com LogtoConfig em Swift\nDESCRIPTION: Este snippet mostra como criar uma instância de LogtoClient usando LogtoConfig. É necessário fornecer o endpoint do Logto e o ID do aplicativo. O código importa os módulos necessários e configura o cliente.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/_init-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Logto\nimport LogtoClient\n\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // Ex.: http://localhost:3001\n  appId: \"<your-app-id>\"\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Basic Sign-In Route Implementation in PHP with Logto\nDESCRIPTION: Creates a basic sign-in route that redirects users to the Logto authentication page. Uses the client's signIn method with a redirect URI parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_implement-sign-in-route.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/sign-in', function () {\n  return redirect($client->signIn('${defaultRedirectUri}'));\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Organization-Scoped Token with Logto SDK\nDESCRIPTION: Demonstrates how to request an access token with organization-specific scopes using the Logto SDK. Shows both direct token retrieval and claims access methods with organization_id parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-api-reources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst accessToken = await logto.getAccessToken('https://my-resource.com/api', 'org_1');\n\n// O obtener reclamos directamente\nconst accessTokenClaims = await logto.getAccessTokenClaims('https://my-resource.com/api', 'org_1');\nconsole.log(accessTokenClaims.organization_id); // 'org_1'\nconsole.log(accessTokenClaims.aud); // 'https://my-resource.com/api'\n```\n\n----------------------------------------\n\nTITLE: Injecting User Data into SvelteKit Layout\nDESCRIPTION: This snippet demonstrates how to inject the user object into the SvelteKit layout, making it available across all pages. It uses the LayoutServerLoad type and returns the user object from locals.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = async ({ locals }) => {\n  return { user: locals.user };\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration for Capacitor\nDESCRIPTION: Sets up the Logto configuration object with application ID, endpoint URL, required scopes for shopping and store operations, and API resource endpoints. The configuration is typed using the LogtoConfig interface from the @logto/capacitor package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information from ID Token in Flutter\nDESCRIPTION: Demonstrates how to access and display user information stored in ID token claims using the Logto client in a Flutter application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal claims = logtoClient.idTokenClaims;\\nif (claims != null) {\\n  print('User ID: ${claims.sub}');\\n  print('Name: ${claims.name}');\\n  print('Email: ${claims.email}');\\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with GetIdTokenClaims in Go Logto SDK\nDESCRIPTION: This snippet demonstrates how to use the GetIdTokenClaims method to retrieve and display user information in a Gin route handler. It initializes the Logto client and returns the ID token claims as a JSON response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    //...\n\n    router.GET(\"/user-id-token-claims\", func(ctx *gin.Context) {\n      session := sessions.Default(ctx)\n      logtoClient := client.NewLogtoClient(logtoConfig, &SessionStorage{session: session})\n\n      // highlight-start\n      idTokenClaims, err := logtoClient.GetIdTokenClaims()\n      // highlight-end\n\n      if err != nil {\n        ctx.String(http.StatusOK, err.Error())\n      }\n\n      ctx.JSON(http.StatusOK, idTokenClaims)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in Vanilla JS\nDESCRIPTION: Add sign-in and sign-out functionality to a Vanilla JavaScript application using Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst signIn = async () => {\n  await logtoClient.signIn('http://localhost:3000');\n};\n\nconst signOut = async () => {\n  await logtoClient.signOut();\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in TypeScript\nDESCRIPTION: This code snippet shows how to create a new LogtoClient instance with configuration options. It specifically highlights the addition of API resources to the client configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n});\n```\n\n----------------------------------------\n\nTITLE: Handling User Info in Next.js API Route\nDESCRIPTION: API route implementation that returns user claims when authenticated. Includes authentication check and proper error handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute((request, response) => {\n  if (!request.user.isAuthenticated) {\n    response.status(401).json({ message: 'Unauthorized' });\n\n    return;\n  }\n\n  response.json({\n    data: request.user.claims,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: Creates a LogtoConfig instance with endpoint URL, application ID, API resource URLs, and permission scopes. This configuration is used to initialize the Logto client for authentication and authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-shared-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Gemeinsame Berechtigungen für alle Ressourcen\n  // highlight-start\n  scopes: [\"read\", \"write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes in Next.js (TypeScript)\nDESCRIPTION: This snippet shows how to initialize the LogtoClient with additional OAuth scopes (such as email and phone) to request more user claims upon authentication. Requires @logto/next. The scopes array can be extended; extra config fields may also be passed. This pattern enables applications to control which user information is accessible in the authentication context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/next';\\n\\nexport const logtoClient = new LogtoClient({\\n  // highlight-next-line\\n  scopes: [UserScope.Email, UserScope.Phone], // 如有需要可添加更多权限\\n  // ...other configs\\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Tokens in PHP\nDESCRIPTION: Code examples for obtaining organization tokens or token claims in PHP using the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$token = $client->getOrganizationToken('<organization-id>');\n// or\n$claims = $client->getOrganizationTokenClaims('<organization-id>');\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button Component in Next.js\nDESCRIPTION: This snippet creates a client-side Sign-In button component for a Next.js application. It uses the 'use client' directive and accepts an onSignIn prop to handle the sign-in action.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignIn: () => Promise<void>;\n};\n\nconst SignIn = ({ onSignIn }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignIn();\n      }}\n    >\n      Sign In\n    </button>\n  );\n};\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Organization Scope\nDESCRIPTION: Demonstrates how to create a new LogtoClient instance with organization scopes enabled. Uses the @logto/browser package or a custom package specified via props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-organization-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\\n\\nconst logtoClient = new LogtoClient({\\n  // ...other configs\\n  scopes: [UserScope.Organizations],\\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in SwiftUI\nDESCRIPTION: This snippet demonstrates how to display user information in a SwiftUI app using the Logto client. It checks authentication status and displays the user's name if authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n  @State var name: String?\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n    name = try? client.getIdTokenClaims().name\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Text(\"Welcome, \\(name)\")\n      } else {\n        Text(\"Please sign in\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Access Token from Logto Client\nDESCRIPTION: Uses the Logto client to fetch an access token for a specific API endpoint. The token can be used to authenticate subsequent API requests to the specified URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst accessToken = await logtoClient.getAccessToken('https://store.your-app.com/api');\nconsole.log('Access token', accessToken);\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client\nDESCRIPTION: Demonstrates how to initialize a Logto client with additional user scopes for email and phone information. This configuration enables access to additional user claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [UserScope.Email, UserScope.Phone],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication Decorator to Flask API Endpoints\nDESCRIPTION: Example of how to apply the authentication decorator to a Flask API endpoint. This code sets up a route with cross-origin support and ensures that requests are authenticated before processing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_cors import cross_origin\n\nAPP = Flask(__name__)\n\n@APP.route(\"/user/info\")\n@cross_origin(headers=[\"Content-Type\", \"Authorization\"])\n@requires_auth\ndef api:\n# あなたの API ロジック\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Access Token from Logto Client\nDESCRIPTION: Demonstrates retrieving organization IDs from user claims and obtaining an organization access token. The code first extracts organization IDs from the ID token claims, then uses the first organization ID to get a specific organization access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Get organizationIds from the userInfo\n\nconst claims = await logtoClient.getIdTokenClaims();\nconst organizationIds = claims.organizations;\n\n/**\n * Or from the ID token claims\n *\n * const claims = await logtoClient.getIdTokenClaims();\n * const organizationIds = claims.organizations;\n */\n\n// Get the organization access token\nif (organizationIds.length > 0) {\n  const organizationId = organizationIds[0];\n  const organizationAccessToken = await logtoClient.getOrganizationToken(organizationId);\n  console.log('Organization access token', organizationAccessToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Token - React Example\nDESCRIPTION: Example of retrieving an organization token in a React component using the Logto React SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst App = () => {\n  const { getOrganizationToken } = useLogto();\n\n  const getToken = async () => {\n    const token = await getOrganizationToken('<organization-id>');\n  };\n\n  return <button onClick={getToken}>Obtener token de organización</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in JavaScript\nDESCRIPTION: This code initializes a LogtoClient instance with specific scopes for read and write operations on shopping and store APIs. It also configures the client to access multiple API resources. This setup is crucial for proper authentication and authorization in a multi-resource application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Adicionar recursos de API\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Authentication State in Angular Component\nDESCRIPTION: This snippet demonstrates how to use OidcSecurityService to subscribe to the authentication state and retrieve user information including ID token claims and access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OidcSecurityService } from 'angular-auth-oidc-client';\nimport { decodeIdToken, type IdTokenClaims } from '@logto/js';\n\nexport class AppComponent implements OnInit {\n  isAuthenticated = false;\n  idTokenClaims?: IdTokenClaims;\n  accessToken?: string;\n\n  constructor(public oidcSecurityService: OidcSecurityService) {}\n\n  ngOnInit() {\n    this.oidcSecurityService.checkAuth().subscribe(({ isAuthenticated, idToken, accessToken }) => {\n      console.log('app authenticated', isAuthenticated, idToken);\n      this.isAuthenticated = isAuthenticated;\n      this.idTokenClaims = decodeIdToken(idToken);\n      this.accessToken = accessToken;\n    });\n  }\n\n  // ...other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Config with Scopes and Resources in TypeScript\nDESCRIPTION: Exports a configuration object for Logto authentication that defines access scopes and API resource endpoints. The configuration includes read/write permissions and specifies multiple API endpoints that the application can access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Logto Interaction Session Flow Architecture\nDESCRIPTION: This flowchart demonstrates the architecture of Logto's interaction session management, showing the relationships between client applications, the OIDC provider, interaction sessions, and the experience app in the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-up-and-sign-in/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n  %% Layers\n  subgraph Layer1 [Client Application Layer]\n      A[Client Application]\n  end\n\n  subgraph Layer2 [Interaction Management Layer]\n      B[OIDC Provider]\n      C[Interaction Session]\n  end\n\n  subgraph Layer3 [Experience Layer]\n      D[Experience App]\n  end\n\n  %% Connections\n  A --> |Authorization Request| B\n  B --> |Session State| C\n  C -.-> |User Sign-In| D\n  D --> |Identification and Verification | C\n  C --> |Finalized Session Result| B\n  B --> |Authorization Response| A\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Custom Scopes and Resources in React\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object in a React application with custom scopes and resources. It imports the necessary LogtoConfig type from '@logto/react' and sets the 'scopes' and 'resources' properties in the configuration object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Runtime Logto Client in Next.js\nDESCRIPTION: Demonstrates how to set up a Logto client configuration for edge runtime usage in Next.js applications. Includes essential parameters like appId, appSecret, endpoint, and cookie settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient from '@logto/next/edge';\n\nexport const logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // E.g. http://localhost:3001\n  baseUrl: '<your-nextjs-app-base-url>', // E.g. http://localhost:3000\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n  resources: ['<your-api-resource>'],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying User Information in Vue with Logto\nDESCRIPTION: This snippet demonstrates how to retrieve ID token claims using the Logto Vue SDK and conditionally display user information. It uses the useLogto hook to access authentication state and the getIdTokenClaims method to fetch user details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type IdTokenClaims } from '@logto/vue';\nimport { ref } from 'vue';\n\nconst { isAuthenticated, getIdTokenClaims } = useLogto();\nconst user = ref<IdTokenClaims>();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const claims = await getIdTokenClaims();\n    user.value = claims;\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out with useLogto Hook in React Native\nDESCRIPTION: This code snippet demonstrates how to use the useLogto hook to implement sign-in and sign-out functionality in a React Native component. It shows conditional rendering based on the authentication state and how to trigger sign-in and sign-out actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button } from 'react-native';\n\nconst Content = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <Button title=\"Sign out\" onPress={async () => signOut()} />\n      ) : (\n        // Replace the redirect URI with your own\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the LogtoClient and UserScope from the Logto package, and create a new LogtoClient instance with the Organizations scope. It includes a dynamic package name that can be customized.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-organization-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Organizations Component with Logto in React Native\nDESCRIPTION: This component uses the Logto SDK to handle authentication, retrieve organization IDs from ID token claims, and fetch organization-specific tokens. It demonstrates the usage of useLogto hook, async operations, and state management in a React Native context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID token claims', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  // highlight-start\n                  console.log('raw token', await getOrganizationToken(organizationId));\n                  // highlight-end\n                }}\n              >\n                fetch token (see console)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Custom Data in Vue.js using Logto\nDESCRIPTION: This snippet shows how to use the fetchUserInfo() method from Logto to retrieve user information including custom data. It demonstrates accessing the custom_data claim from the userInfo object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { fetchUserInfo } = useLogto();\n\nconst userInfo = await fetchUserInfo();\n\n// 現在你可以訪問宣告 `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler with User Scopes in SvelteKit\nDESCRIPTION: This snippet initializes the Logto authentication handler for a SvelteKit application. It imports the required UserScope and handleLogto from the @logto/sveltekit package and configures the handler with email and phone scopes. Additional scopes can be added as needed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope, handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto({\n  // ...other options\n  scopes: [UserScope.email, UserScope.phone], // Ajoutez plus de portées si nécessaire\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token with Resource in Ruby\nDESCRIPTION: Retrieves an access token for a specific resource using the Logto Ruby client. The resource parameter specifies the API endpoint that the token will be used to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntoken = @client.access_token(resource: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Custom Scopes and Resources in Vue.js\nDESCRIPTION: This code snippet shows how to initialize Logto authentication in a Vue.js application with custom scopes and resources. It configures access permissions for shopping and store APIs with appropriate read and write scopes for each resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto React Organization Scopes in TypeScript\nDESCRIPTION: Configuration example for Logto React SDK that shows how to set up organization scopes. The code imports necessary types from @logto/react package and creates a configuration object with organization scopes enabled.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: Sets up a LogtoConfig instance with endpoint URL, application ID, API resources and their associated permission scopes. This configuration is used to initialize the Logto authentication client in a Dart/Flutter application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_resource-with-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Add your API resources' scopes\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client for Next.js\nDESCRIPTION: This snippet shows how to prepare the configuration for the Logto client in a Next.js application. It includes setting up the app ID, secret, endpoint, and other necessary parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoNextConfig } from '@logto/next';\n\nexport const logtoConfig: LogtoNextConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // E.g. http://localhost:3001\n  baseUrl: '<your-nextjs-app-base-url>', // E.g. http://localhost:3000\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Android Activity\nDESCRIPTION: This code snippet shows how to observe and display user information in an Android Activity. It uses a TextView to show the user info and converts the response to a formatted JSON string.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        //...otros códigos\n\n        // Supón que tienes un TextView con id `user_info_text_view` en tu diseño\n        val userInfoResponseTextView: TextView = findViewById(R.id.user_info_text_view)\n        logtoViewModel.userInfoResponse.observe(this) { userInfoResponse ->\n            userInfoResponseTextView.text = if (userInfoResponse !== null) {\n                val json = Gson().toJson(userInfoResponse, UserInfoResponse::class.java)\n                JSONObject(json).toString(2)\n            } else {\n                \"\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Bearer Token from Request Headers in TypeScript\nDESCRIPTION: This function extracts the Bearer token from the Authorization header of an incoming HTTP request. It throws errors for missing or invalid Authorization headers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/node-express.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// auth_middleware.ts\n\nimport { IncomingHttpHeaders } from 'http';\n\nconst extractBearerTokenFromHeaders = ({ authorization }: IncomingHttpHeaders) => {\n  const bearerTokenIdentifier = 'Bearer';\n\n  if (!authorization) {\n    throw new Error({ code: 'auth.authorization_header_missing', status: 401 });\n  }\n\n  if (!authorization.startsWith(bearerTokenIdentifier)) {\n    throw new Error({ code: 'auth.authorization_token_type_not_supported', status: 401 });\n  }\n\n  return authorization.slice(bearerTokenIdentifier.length + 1);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Endpoints with Logto Client in Go\nDESCRIPTION: This Go code snippet shows how to initialize the LogtoConfig struct to specify multiple resource endpoints for authentication. Required dependency: the Logto Go SDK and its client package. The Resources parameter is a string slice containing the URLs of the application's protected APIs, which the client will manage access for. Input consists of the API resource URLs, and output is a configured LogtoConfig struct which can be used for further authentication operations. All other necessary configuration keys should be supplied as needed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Access Token with ACT Claim\nDESCRIPTION: Example JWT payload showing the 'act' claim structure in an access token generated through impersonation. The act claim identifies the impersonator (Sarah) who is acting on behalf of the subject (Alex).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aud\": \"https://api.techcorp.com\",\n  \"iss\": \"https://techcorp.logto.app\",\n  \"exp\": 1443904177,\n  \"sub\": \"alex123\",\n  \"act\": {\n    \"sub\": \"sarah789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in PHP\nDESCRIPTION: This code demonstrates how to create a LogtoClient instance with custom authorization scopes and API resources. The highlighted sections show how to specify multiple permission scopes for different operations and define multiple API resource endpoints that the client will access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"], // 新增權限範圍 (Scopes)\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // 新增 API 資源 (API resources)\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes in Logto SDK Initialization - Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize the LogtoConfig object in Kotlin and set its scopes parameter to enable organization-related permissions using UserScope.Organizations. The surrounding comments indicate that only the relevant line is highlighted, implying it is a change or addition. Prerequisites include importing the LogtoConfig class and enum UserScope from the Logto SDK. The input is a list of scopes (here, UserScope.Organizations), and the output is a configured LogtoConfig instance. Limitations depend on the available UserScope enum values and the correct setup of Logto SDK dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(UserScope.Organizations),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: User Information Display Template\nDESCRIPTION: HTML template for displaying user information in a table format. Iterates through user claims and displays them as key-value pairs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"isAuthenticated && user\">\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Nombre</th>\n          <th>Valor</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(value, key) in user\" v-bind:key=\"key\">\n          <td>{{ key }}</td>\n          <td>{{ typeof value === \"string\" ? value : JSON.stringify(value) }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client Scopes Using @logto/next in TypeScript\nDESCRIPTION: This snippet initializes a LogtoClient instance with custom configuration, particularly setting the 'scopes' parameter to include UserScope.Organizations, thereby adjusting the authentication scope within the application. It depends on the '@logto/next' package and the availability of the LogtoClient class. Key parameters include any additional configurations (represented by the spread) and the scopes array. This code expects that both LogtoClient and the UserScope enumeration are properly imported and accessible, and outputs a configured client object for authentication interactions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto React Auth with Custom Scopes and Resources\nDESCRIPTION: Demonstrates setting up Logto configuration object with custom scopes for read/write permissions and multiple API resource endpoints. Uses TypeScript with React to define the configuration structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In in Flutter with Logto\nDESCRIPTION: This code snippet shows how to implement a sign-in button that triggers the Logto sign-in flow in a Flutter application. It includes setting up the redirect URI and handling the sign-in process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  final redirectUri = 'io.logto://callback';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signInButton = TextButton(\n      onPressed: () async {\n        await logtoClient.signIn(redirectUri);\n        render();\n      },\n      child: const Text('Sign In'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sign-In Route with Flask and Logto\nDESCRIPTION: Sets up a '/sign-in' route in a Flask application that redirects users to the Logto authentication page. This code initiates the sign-in process by calling the client.signIn method with a redirect URI that will be used after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-in\")\nasync def sign_in():\n    # Get the sign-in URL and redirect the user to it\n    return redirect(await client.signIn(\n        redirectUri=\"${defaultRedirectUri}\",\n    ))\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in Go\nDESCRIPTION: Creates a basic Logto configuration object with endpoint, application ID, and secret. This configuration is required for initializing the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_init-logto-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// ...\n\tlogtoConfig := &client.LogtoConfig{\n\t\tEndpoint:  \"<your-logto-endpoint>\", // E.g. http://localhost:3001\n\t\tAppId:     \"<your-application-id>\",\n\t\tAppSecret: \"<your-application-secret>\",\n\t}\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI in Android Activity\nDESCRIPTION: MainActivity implementation showing how to integrate authentication UI elements and handle authentication state changes. Demonstrates button click handling for sign-in/sign-out and UI updates based on authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        //...other codes\n\n        // Assume you have a button with id \"sign_in_button\" in your layout\n        val signInButton = findViewById<Button>(R.id.sign_in_button)\n        signInButton.setOnClickListener {\n            logtoViewModel.signIn(this)\n        }\n\n        // Assume you have a button with id \"sign_out_button\" in your layout\n        val signOutButton = findViewById<Button>(R.id.sign_out_button)\n        signOutButton.setOnClickListener {\n            if (logtoViewModel.authenticated) { // Check if the user is authenticated\n                logtoViewModel.signOut()\n            }\n        }\n\n        // Observe the authentication status to update the UI\n        logtoViewModel.authenticated.observe(this) { authenticated ->\n            if (authenticated) {\n                // The user is authenticated\n                signInButton.visibility = View.GONE\n                signOutButton.visibility = View.VISIBLE\n            } else {\n                // The user is not authenticated\n                signInButton.visibility = View.VISIBLE\n                signOutButton.visibility = View.GONE\n            }\n        }\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Module in Nuxt Configuration\nDESCRIPTION: This snippet shows how to register and configure the Logto module in the Nuxt.js configuration file. It includes setting up the Logto endpoint, app ID, app secret, and cookie encryption key.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // highlight-start\n  modules: ['@logto/nuxt'],\n  runtimeConfig: {\n    logto: {\n      endpoint: '<your-logto-endpoint>',\n      appId: '<your-logto-app-id>',\n      appSecret: '<your-logto-app-secret>',\n      cookieEncryptionKey: '<a-random-string>',\n    },\n  },\n  // highlight-end\n  // ...outras configurações\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token in Next.js Server Component\nDESCRIPTION: Demonstrates how to use the getAccessTokenRSC function to fetch an access token for an API resource in a Next.js server component. This method is used in server-side rendering contexts.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAccessTokenRSC } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\n\nexport default async function Home() {\n  const accessToken = await getAccessTokenRSC(logtoConfig, 'https://shopping.your-app.com/api');\n\n  return (\n    <main>\n      <p>Access token: {accessToken}</p>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with getIdTokenClaims in React Native\nDESCRIPTION: This code demonstrates how to retrieve and display user information after authentication in a React Native application using the getIdTokenClaims() method from the Logto SDK. It shows conditional rendering based on authentication status and basic user profile display.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { getIdTokenClaims, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // highlight-start\n      getIdTokenClaims().then((claims) => {\n        setUser(claims);\n      });\n      // highlight-end\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling IdP-initiated SSO in React Client Application\nDESCRIPTION: A React component example demonstrating how to handle IdP-initiated SSO authentication in a client application. It extracts the ssoConnectorId parameter from the URL and initiates a direct sign-in flow using the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// React example\nimport { Prompt, useLogto } from '@logto/react';\nimport { useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nconst SsoDirectSignIn = () => {\n  const { signIn } = useLogto();\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const ssoConnectorId = searchParams.get('ssoConnectorId');\n    if (ssoConnectorId) {\n      void signIn({\n        redirectUri,\n        prompt: Prompt.Login,\n        directSignIn: {\n          method: 'sso',\n          target: ssoConnectorId,\n        },\n      });\n    }\n  }, [searchParams, signIn]);\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve and display user information using both getIdTokenClaims and fetchUserInfo methods in a route handler. It checks authentication status and returns different responses based on that status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/userinfo', function () {\n  if ($client->isAuthenticated() === false) {\n    return \"Not authenticated <a href='/sign-in'>Sign in</a>\";\n  }\n\n  return (\n    // Get local ID token claims\n    json_decode($client->getIdTokenClaims())\n    . \"<br>\"\n    // Fetch user info from Logto userinfo endpoint\n    json_decode($client->fetchUserInfo())\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Route in Go\nDESCRIPTION: Handles the authentication callback in a Go web application using Logto. This route processes the authorization code, exchanges it for tokens, and manages user sessions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandleFunc(\"/callback\", func(w http.ResponseWriter, r *http.Request) {\n    code := r.URL.Query().Get(\"code\")\n    if code == \"\" {\n        http.Error(w, \"Missing code\", http.StatusBadRequest)\n        return\n    }\n\n    _, err := logtoClient.HandleAuthCodeCallback(r.Context(), code)\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n\n    http.Redirect(w, r, \"/\", http.StatusFound)\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing RBAC Authorization Flow with Mermaid\nDESCRIPTION: A sequence diagram showing the authorization flow for RBAC in Logto, including client authentication, token request, scope filtering, and API request validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/authorization/role-based-access-control/protect-api-resources-with-rbac.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    Note over Client,API: 인증 (Authentication) & 토큰 요청\n    Client->>Logto: GET /oidc/auth & POST /oidc/token\n    Note right of Client: 리소스 및 요청된 스코프와 함께\n\n    Note over Logto: 사용자의 RBAC 정책에 따라<br/>요청된 스코프 필터링\n    Logto-->>Client: JWT 액세스 토큰 반환\n    Note left of Logto: 토큰에는 다음이 포함됨:<br/>- 표준 JWT 클레임<br/>- RBAC에 의해 필터링된 승인된 스코프\n\n    Note over Client,API: API 요청\n    Client->>API: Bearer 토큰과 함께 요청\n\n    Note over API: JWT 토큰 검증:<br/>- 표준 JWT 검증<br/>- 승인된 스코프 확인\n\n    alt 토큰이 유효하지 않음\n        API-->>Client: 401 인증되지 않음\n    else 토큰이 유효함\n        alt 필요한 스코프가 승인된 스코프에 없음\n            API-->>Client: 403 금지됨\n        else 필요한 스코프가 있음\n            API-->>Client: 보호된 리소스\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Ruby\nDESCRIPTION: This snippet shows how to initialize the Logto client in a Ruby application. It includes setting up the configuration, navigation, and storage options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    endpoint: \"https://your-logto-endpoint.com\",\n    app_id: \"your-logto-app-id\",\n    app_secret: \"your-logto-app-secret\"\n  ),\n  navigate: ->(uri) { a_redirect_method(uri) },\n  storage: LogtoClient::SessionStorage.new(the_session_object)\n)\nend\n```\n\n----------------------------------------\n\nTITLE: Initialize Logto Client with Scopes\nDESCRIPTION: Creates a new Logto client instance with configuration for application ID, endpoint URL, and required user scopes. The client is configured to access email, phone, custom data, and identity information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\nappId: '<your-application-id>',\nendpoint: '<your-logto-endpoint>',\nscopes: [UserScope.Email, UserScope.Phone, UserScope.CustomData, UserScope.Identities],\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information using getIdTokenClaims in React\nDESCRIPTION: This code snippet demonstrates how to use the getIdTokenClaims() method to retrieve and display user information in a React component. It uses the useLogto hook and React's useState and useEffect hooks to manage the authentication state and user data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto, type IdTokenClaims } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Home = () => {\n  const { isAuthenticated, getIdTokenClaims } = useLogto();\n  const [user, setUser] = useState<IdTokenClaims>();\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const claims = await getIdTokenClaims();\n        setUser(claims);\n      }\n    })();\n  }, [getIdTokenClaims, isAuthenticated]);\n\n  return (\n    // ...\n    {isAuthenticated && user && (\n      <table>\n        <thead>\n          <tr>\n            <th>Nome</th>\n            <th>Valor</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(user).map(([key, value]) => (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{typeof value === 'string' ? value : JSON.stringify(value)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    )}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Retrieving Access Tokens with Logto in Vue - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Logto authentication library in a Vue component to check if a user is authenticated and, if so, obtain an access token for a protected API. It imports \"useLogto\" and \"UserInfoResponse\" from the \"@logto/vue\" package, destructures authentication helpers, and uses an asynchronous IIFE to fetch the access token securely. Inputs include the Logto Vue SDK and a target API audience; outputs are logged tokens, and the component assumes the standard Vue 3 composition API structure. Requires that the Logto context has already been established higher in the component hierarchy.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type UserInfoResponse } from '@logto/vue';\n\nconst { isAuthenticated, getAccessToken } = useLogto();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const accessToken = await getAccessToken('https://shopping.your-app.com/api');\n    console.log(accessToken);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sign-Out URI for OpenID Connect Session Termination\nDESCRIPTION: Function to generate a sign-out URI based on the end session endpoint with the required ID token and optional post-logout redirect URI. This constructs a URL that will terminate the user's session when accessed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/sdk-conventions/core-sdk-conventions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateSignOutUri({endSessionEndpoint, idToken, postLogoutRedirectUri})\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information from ID Token Claims in React\nDESCRIPTION: This code shows how to retrieve and display user information from ID token claims in a React component. It uses the useLogto hook to access authentication state and fetch claims when the user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto, type IdTokenClaims } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Home = () => {\n  const { isAuthenticated, getIdTokenClaims } = useLogto();\n  const [user, setUser] = useState<IdTokenClaims>();\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const claims = await getIdTokenClaims();\n        setUser(claims);\n      }\n    })();\n  }, [getIdTokenClaims, isAuthenticated]);\n\n  return (\n    // ...\n    {isAuthenticated && user && (\n      <table>\n        <thead>\n          <tr>\n            <th>Nom</th>\n            <th>Valeur</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(user).map(([key, value]) => (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{typeof value === 'string' ? value : JSON.stringify(value)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    )}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and Resources in JavaScript\nDESCRIPTION: This snippet shows how to initialize a Logto client with custom scopes and API resources. It demonstrates setting up multiple scopes for different permissions and defining multiple API resource endpoints that the client will interact with.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API リソースを追加\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Observing Authentication Status in MainActivity\nDESCRIPTION: This snippet demonstrates how to observe the authentication status in the MainActivity and update the UI accordingly. It shows/hides sign-in and sign-out buttons based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_handle-authentication-status.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n//...with other imports\nclass MainActivity : AppCompatActivity() {\n    //...other codes\n    override fun onCreate(savedInstanceState: Bundle?) {\n        //...other codes\n        val signInButton = findViewById<Button>(R.id.sign_in_button)\n        val signOutButton = findViewById<Button>(R.id.sign_out_button)\n        // ...handle button click codes\n\n        // Observe the authentication status\n        logtoViewModel.authenticated.observe(this) { authenticated ->\n            if (authenticated) {\n                // The user is authenticated\n                signInButton.visibility = View.GONE\n                signOutButton.visibility = View.VISIBLE\n            } else {\n                // The user is not authenticated\n                signInButton.visibility = View.VISIBLE\n                signOutButton.visibility = View.GONE\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Access Token (TypeScript)\nDESCRIPTION: This code snippet shows how to fetch an organization access token using Logto's client SDK in TypeScript. It demonstrates the process of obtaining the token and handling potential errors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_organization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const accessToken = await logtoClient.getOrganizationToken(['write:products']);\n  console.log(accessToken);\n} catch (error) {\n  console.log(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client with JWT Authentication in JavaScript\nDESCRIPTION: A utility function that generates a Supabase client with JWT authentication using a userId. The JWT is signed with the Supabase JWT secret and includes the userId in the payload.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js';\nimport { sign } from 'jsonwebtoken';\n\n/*\n * 注意:\n * SUPABASE_URL、SUPABASE_ANON_KEY は JWT シークレットを見つけた場所と同じ場所で見つけることができます。\n */\nconst SUPABASE_URL = process.env.SUPABASE_URL;\nconst SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;\n\nconst SUPABASE_JWT_SECRET = process.env.SUPABASE_JWT_SECRET;\n\nexport const getSupabaseClient = (userId) => {\n  const jwtPayload = {\n    userId,\n  };\n\n  const jwt = sign(jwtPayload, SUPABASE_JWT_SECRET, {\n    expiresIn: '1h', // デモ用\n  });\n\n  const client = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n    global: {\n      headers: {\n        Authorization: `Bearer ${jwt}`,\n      },\n    },\n  });\n\n  return client;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes for Logto Client in Next.js\nDESCRIPTION: This snippet shows how to configure additional scopes when initializing the Logto client in a Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone], // Añadir más alcances si es necesario\n  // ...otras configuraciones\n});\n```\n\n----------------------------------------\n\nTITLE: Signing Out in Logto SDK for Web and SPA Applications\nDESCRIPTION: The `client.signOut()` method clears local token storage and redirects to Logto's end session endpoint. A post-logout redirect URI can be specified for user redirection after session clearance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-out.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.signOut()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Logto client to retrieve an access token for a specific API resource. The code uses an async/await pattern to get the token for the 'shopping.your-app.com/api' resource, which can then be used to make authenticated API requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes in Kotlin\nDESCRIPTION: Demonstrates creating a LogtoConfig instance with specified scopes for user data access. Shows both string-based and enum-based approaches for defining scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/_scopes-sample-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // or `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Applying the Authorization Decorator to Flask API Endpoints\nDESCRIPTION: Example of how to apply the requires_auth decorator to a Flask API endpoint. This demonstrates the pattern for protecting API routes with the JWT validation logic.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/python.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_cors import cross_origin\n\nAPP = Flask(__name__)\n\n@APP.route(\"/user/info\")\n@cross_origin(headers=[\"Content-Type\", \"Authorization\"])\n@requires_auth\ndef api:\n# Your API Logic\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Go\nDESCRIPTION: This snippet demonstrates obtaining an access token for the URL 'https://shopping.your-app.com/api' using the Logto client in Go. It requires the Logto Go SDK to be installed and a properly initialized instance of logtoClient. The main parameter is the API audience URL, and the returned values are an access token and an error object, allowing for error handling. This pattern is essential for authenticating API requests in applications that require OAuth2 or OpenID Connect support.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := logtoClient.GetAccessToken(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Setting up LogtoConfig with Scopes and Resources in Kotlin\nDESCRIPTION: Configures a LogtoConfig instance with custom OAuth scopes for read/write permissions and resource API endpoints. The configuration specifies access permissions through scopes and defines the target API resources that can be accessed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(\"read\", \"write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes for Logto Provider in React\nDESCRIPTION: This code snippet shows how to configure additional scopes for the Logto provider in a React application. It demonstrates setting up scopes for email, phone, custom data, identities, and organizations using the LogtoConfig object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...outras configurações\n  // highlight-start\n  scopes: [\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n  ],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes and Resources in Kotlin\nDESCRIPTION: Sets up a LogtoConfig instance with custom OAuth scopes for shopping and store operations, along with their corresponding API resource endpoints. The configuration enables specific access permissions for shopping and store functionalities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ..other configs\n    // highlight-start\n    scopes = listOf(\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Ruby\nDESCRIPTION: Creates a new Logto client instance with configuration for endpoint, app ID, and app secret. The code also defines navigation and storage handlers for the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    endpoint: \"https://your-logto-endpoint.com\",\n    app_id: \"your-logto-app-id\",\n    app_secret: \"your-logto-app-secret\"\n  ),\n  navigate: ->(uri) { a_redirect_method(uri) },\n  storage: LogtoClient::SessionStorage.new(the_session_object)\n)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page with Authentication Check using Logto SDK in Python\nDESCRIPTION: This code snippet demonstrates how to use the Logto SDK's isAuthenticated() method to check the user's authentication status and render appropriate content. It creates a simple home route that displays a sign-in button for unauthenticated users and a sign-out button for authenticated users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/_handle-authentication-status.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/\")\nasync def home():\n    if client.isAuthenticated() is False:\n        return \"Not authenticated <a href='/sign-in'>Sign in</a>\"\n    return \"Authenticated <a href='/sign-out'>Sign out</a>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Routes with Passport.js for Logto Authentication\nDESCRIPTION: This snippet defines routes for sign-in, callback, and sign-out processes using Passport.js. It sets up authentication endpoints and handles session management for Logto integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/sign-in', passport.authenticate('openidconnect'));\napp.get(\n  '/callback',\n  passport.authenticate('openidconnect', {\n    successReturnToOrRedirect: '/',\n  })\n);\napp.get('/sign-out', (request, response, next) => {\n  request.logout((error) => {\n    if (error) {\n      next(error);\n      return;\n    }\n    response.redirect(`${endpoint}/oidc/session/end?client_id=${appId}`);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Passport.js with OpenID Connect Strategy\nDESCRIPTION: This code sets up Passport.js with the OpenID Connect strategy for authentication. It configures the necessary endpoints, client credentials, and callback functions for the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport passport from 'passport';\nimport OpenIDConnectStrategy, { type Profile, type VerifyCallback } from 'passport-openidconnect';\n\nconst endpoint = '<your-logto-endpoint>';\nconst appId = '<your-application-id>';\nconst appSecret = '<your-application-secret>';\n\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        issuer: `${endpoint}/oidc`,\n        authorizationURL: `${endpoint}/oidc/auth`,\n        tokenURL: `${endpoint}/oidc/token`,\n        userInfoURL: `${endpoint}/oidc/me`,\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        scope: ['profile', 'offline_access'],\n      },\n      (issuer: string, profile: Profile, callback: VerifyCallback) => {\n        callback(null, profile);\n      }\n    )\n  );\n\n  passport.serializeUser((user, callback) => {\n    callback(null, user);\n  });\n\n  passport.deserializeUser(function (user, callback) {\n    callback(null, user as Express.User);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express Client\nDESCRIPTION: Sets up the basic configuration object for the Logto Express client with application credentials and endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-application-secret>',\n  endpoint: '<your-logto-endpoint>', // E.g. http://localhost:3001\n  baseUrl: '<your-express-app-base-url>', // E.g. http://localhost:3000\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in React Native Component\nDESCRIPTION: A React Native component that manages user authentication state and user information using Logto's useLogto hook. The component displays different UI elements based on authentication status and handles user info fetching when authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_fetch-user-info-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { fetchUserInfo, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchUserInfo().then((userInfo) => {\n        setUser(userInfo);\n      });\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with API Resources in SvelteKit\nDESCRIPTION: This snippet shows how to set up Logto authentication in a SvelteKit application's server hooks file. It demonstrates configuring multiple API resources that the application will need access to, specifically for shopping and store APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 新增 API 資源 (API resources)\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in Kotlin\nDESCRIPTION: This snippet shows how to create a LogtoConfig object with specific scopes and resources. It sets up read and write scopes, and defines two API resource URLs for the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(\"read\", \"write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Logto\nDESCRIPTION: Example of using the fetchUserInfo method to retrieve additional user information including custom data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst { fetchUserInfo } = useLogto();\n\nconst userInfo = await fetchUserInfo();\n\n// Now you can access the claim `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional User Claims\nDESCRIPTION: This snippet demonstrates how to access additional user claims after configuring the Logto client with extra scopes. It retrieves the ID token claims and accesses email and phone information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet claims = try? client.getIdTokenClaims()\n// Now you can access additional claims `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing Logto Client in Swift\nDESCRIPTION: This code configures a LogtoConfig object with a Logto endpoint, app ID, custom scopes, and resources. It then uses this configuration to create a LogtoClient instance. The custom scopes and resources are highlighted, indicating their importance in the setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List for User Management Features in JSX\nDESCRIPTION: This JSX code creates a list of documentation cards using the DocCardList component. Each card represents a different aspect of user management in Logto, including user data, user management operations, advanced search, and personal access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: '了解用户数据',\n      href: '/user-management/user-data',\n      description:\n        '在 Logto 中，用户数据包括基于 OpenID Connect 协议的基本认证 (Authentication) 数据，以及自定义数据。',\n      customProps: {\n        icon: <DatabaseIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: '管理用户',\n      href: '/user-management/manage-users',\n      description: '通过 Logto 控制台或 Logto Management API 创建、更新、读取和删除用户。',\n      customProps: {\n        icon: <GearIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: '高级用户搜索',\n      href: '/user-management/advanced-user-search',\n      description: '直接使用 Logto Management API 执行高级用户搜索。',\n      customProps: {\n        icon: <SearchIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: '个人访问令牌',\n      href: '/user-management/personal-access-token',\n      description:\n        '个人访问令牌 (PAT) 为用户提供了一种安全的方式来授予访问令牌 (Access token)，而无需使用他们的凭据和交互式登录。',\n      customProps: {\n        icon: <KeyIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources in Logto Config\nDESCRIPTION: Shows how to define multiple API resource endpoints in the Logto configuration object. The resources array specifies the protected API endpoints that will be accessible after authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Organizations with Logto SDK in React Native - TypeScript\nDESCRIPTION: This React component 'Organizations' fetches the authenticated user's organization claims using the Logto SDK and displays each organization ID in a list. Each organization has a button to fetch and log the organization-specific authentication token using Logto's 'getOrganizationToken' method. Dependencies include '@logto/rn' (Logto React Native SDK), 'react', and 'react' hooks ('useEffect', 'useState'). The key parameters are 'isAuthenticated', which ensures the user is logged in before fetching claims, and 'getIdTokenClaims', which retrieves JWT claims (including organizations). The component expects that organizations exist in the user's token claims, and outputs them as a list with action buttons. It requires a properly configured Logto provider context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID token claims', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  // highlight-start\n                  console.log('raw token', await getOrganizationToken(organizationId));\n                  // highlight-end\n                }}\n              >\n                buscar token (veja o console)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Strategy in Passport\nDESCRIPTION: This function initializes Passport with OpenID Connect strategy. It sets up the client ID, secret, callback URL, and specifies the required scopes for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        // ... other options\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        // highlight-start\n        scope: ['openid', 'offline_access', 'profile', 'email'],\n        // highlight-end\n      }\n      // ... other options\n    )\n  );\n  // ... other options\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out with Logto Hooks in React\nDESCRIPTION: This snippet demonstrates how to use the useLogto hook to implement sign-in and sign-out functionality in a React component. It conditionally renders sign-in or sign-out buttons based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return isAuthenticated ? (\n    <button onClick={signOut}>Abmelden</button>\n  ) : (\n    <button onClick={() => signIn('http://localhost:3000/callback')}>Anmelden</button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a User Controller for Handling Authenticated Users\nDESCRIPTION: A controller that handles authenticated user sessions by extracting user information from the OAuth2 principal and passing it to the user template.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport java.security.Principal;\nimport java.util.Map;\n\nimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n\n  @GetMapping\n  public String user(Model model, Principal principal) {\n    if (principal instanceof OAuth2AuthenticationToken) {\n      OAuth2AuthenticationToken token = (OAuth2AuthenticationToken) principal;\n      OAuth2User oauth2User = token.getPrincipal();\n      Map<String, Object> attributes = oauth2User.getAttributes();\n\n      model.addAttribute(\"username\", attributes.get(\"username\"));\n      model.addAttribute(\"email\", attributes.get(\"email\"));\n      model.addAttribute(\"sub\", attributes.get(\"sub\"));\n    }\n\n    return \"user\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the LogtoExpressConfig object with custom scopes and resources. It defines specific read and write permissions for shopping and store functionalities, as well as the corresponding API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Defining API Resources in Logto Express Configuration (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to define the API resources your application requires access to within the `LogtoExpressConfig` object. The `resources` property takes an array of strings, where each string is the unique identifier (audience) of an API resource defined in Logto. This allows the application to request access tokens for these specific APIs during the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"app.ts\"\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Adicionar recursos de API\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Flow Diagram - Organization Resource Protection\nDESCRIPTION: Sequence diagram showing the authentication flow for protecting organization resources, including OIDC flow, organization token requests, and API validation\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    %% Standard OIDC Flow\n    Note over Client,Logto: Standard OIDC Flow\n    Client->>Logto: Authorization Request\n    Note right of Client: Includes organization scopes:<br/>\"urn:logto:scope:organizations\"\n    Logto->>Client: Authorization Code\n    Client->>Logto: Token Request\n    Logto->>Client: ID Token + Access Token\n    Note right of Client: ID Token contains `organizations`\n\n    %% Organization Token Request\n    Note over Client,API: Organization Token Request\n    Client->>Logto: POST /oidc/token\n    Note right of Client: with resource \"urn:logto:scope:organizations\"<br/>and requested scopes including<br/>\"urn:logto:scope:organizations\"\n    Note right of Client: includes organization_id parameter\n\n    Note over Logto: Check user's organization access\n\n    alt No access to organization_id\n        Logto-->>Client: 403 Forbidden\n    else Has organization access\n        Note over Logto: Filter requested scopes\n        Logto-->>Client: Returns JWT access token\n        Note left of Logto: Token contains:<br/>- Standard JWT claims<br/>- Granted scopes<br/>- audience `urn:logto:organization:{organization_id}`\n    end\n\n    Note over Client,API: API Request\n    Client->>API: Request with Bearer token (organization token JWT)\n\n    Note over API: Validate JWT token:<br/>- Standard JWT validation<br/>- Verify organization_id\n\n    alt Token Invalid\n        API-->>Client: 401 Unauthorized\n    else Token Valid\n        alt Invalid organization_id\n            API-->>Client: 403 Forbidden\n        else Valid organization_id\n            API-->>Client: Protected Resource\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Authentication UI in Next.js Page\nDESCRIPTION: Implements a Next.js page that conditionally displays sign-in or sign-out buttons based on the user's authentication status using Auth.js session management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport SignIn from './components/sign-in';\nimport SignOut from './components/sign-out';\nimport { auth } from '@/auth';\n\nexport default function Home() {\n  const session = await auth();\n\n  return <div>{session?.user ? <SignOut /> : <SignIn />}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OAuth 2.0 Token Using Refresh Token\nDESCRIPTION: Function to obtain a new access token by using a refresh token. Makes a POST request to the token endpoint with the refresh token, client ID, and optional resource and scopes. Returns a RefreshTokenTokenResponse object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/sdk-conventions/core-sdk-conventions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfetchTokenByRefreshToken({tokenEndpoint, clientId, refreshToken, resource, scopes})\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional User Claims in Swift\nDESCRIPTION: Shows how to access additional claims from ID token after requesting extra scopes. This lets developers utilize more user information in their application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet claims = try? client.getIdTokenClaims()\n// Ahora puedes acceder a los reclamos adicionales `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Creating an Organization using Logto Management API with cURL\nDESCRIPTION: This snippet demonstrates how to create an organization in Logto using the Management API via a cURL request. It requires an M2M access token for authorization and includes organization details like name, description, and branding information in the request body.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/organization-experience/create-organization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X POST https://[tenant_id].logto.app/api/organizations \\\n -H \"Authorization: Bearer $M2M_ACCESS_TOKEN\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\"tenantId\":\"string\",\"name\":\"string\",\"description\":\"string\",\"customData\":{},\"isMfaRequired\":false,\"branding\":{\"logoUrl\":\"string\",\"darkLogoUrl\":\"string\",\"favicon\":\"string\",\"darkFavicon\":\"string\"},\"createdAt\":1234567890}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Custom Scopes and Resources in SvelteKit\nDESCRIPTION: This code snippet demonstrates how to use the handleLogto function to set up Logto authentication in a SvelteKit application. It configures custom scopes for shopping and store operations, and specifies API resources for both shopping and store endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing MemorySessionWrapper for External Session Storage (TypeScript)\nDESCRIPTION: This code defines a MemorySessionWrapper class that implements the SessionWrapper interface from @logto/next. It provides in-memory storage for session data, using a Map to store session information with UUIDs as keys.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_external-storage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { randomUUID } from 'node:crypto';\n\nimport { type SessionWrapper, type SessionData } from '@logto/next';\n\nexport class MemorySessionWrapper implements SessionWrapper {\n  private readonly storage = new Map<string, unknown>();\n\n  async wrap(data: unknown, _key: string): Promise<string> {\n    const sessionId = randomUUID();\n    this.storage.set(sessionId, data);\n    return sessionId;\n  }\n\n  async unwrap(value: string, _key: string): Promise<SessionData> {\n    if (!value) {\n      return {};\n    }\n\n    const data = this.storage.get(value);\n    return data ?? {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Sign-in/Sign-out Button Visibility with Logto SDK in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto SDK's isAuthenticated() method to conditionally display sign-in and sign-out buttons on a Webflow site. It checks the user's authentication status and sets the CSS display property of the buttons accordingly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/_handle-authentication-status.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nsignInButton.style.display = isAuthenticated ? 'none' : 'block';\nsignOutButton.style.display = isAuthenticated ? 'block' : 'none';\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization Validation Decorator in Python\nDESCRIPTION: This decorator function validates the JWT token using python-jose. It checks the token signature, expiration status, and required claims against Logto's OIDC configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom flask import request,  _request_ctx_stack\nfrom six.moves.urllib.request import urlopen\nfrom functools import wraps\nfrom jose import jwt\n\ndef requires_auth(f):\n  @wraps(f)\n  def decorated(*args, **kwargs):\n    token = get_token_auth_header()\n\n    jwks_uri = urlopen('https://<your-logto-domain>/oidc/jwks')\n\n    issuer = 'https://<your-logto-domain>/oidc'\n\n    jwks = json.loads(jwks_uri.read())\n\n    try:\n      payload = jwt.decode(\n        token,\n        jwks,\n        algorithms=jwt.get_unverified_header(token).get('alg'),\n        audience='<your request listener resource indicator>',\n        issuer=issuer,\n        options={\n          'verify_at_hash': False\n        }\n      )\n    except Exception:\n      raise Error({code: 'invalid_token', status: 401})\n\n    _request_ctx_stack.top.user_id = payload.get('sub')\n\n    return f(*args, **kwargs)\n  return decorated\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Request for PAT in Logto\nDESCRIPTION: HTTP POST request to exchange a Personal Access Token for an access token. It includes required parameters such as client_id, grant_type, subject_token, and subject_token_type.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/user-management/personal-access-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /oidc/token HTTP/1.1\nHost: tenant.logto.app\nContent-Type: application/x-www-form-urlencoded\nAuthorization: Basic <base64(client-id:client-secret)>\n\ngrant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange\n&scope=profile\n&subject_token=pat_W51arOqe7nynW75nWhvYogyc\n&subject_token_type=urn%3Alogto%3Atoken-type%3Apersonal_access_token\n```\n\n----------------------------------------\n\nTITLE: Fetching API Access Token using Logto Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to asynchronously retrieve an access token for a specific API resource (identified by its URL, e.g., 'https://shopping.your-app.com/api') using the `getAccessToken` method of an initialized Logto client instance (`logtoClient`). The method requires the resource identifier (audience) as an argument and returns a promise resolving to the access token string. This token is typically used in the Authorization header of subsequent API requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst token = await logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This snippet shows how to instantiate the LogtoClient by providing explicit arrays of scopes and resources. Dependencies include having the LogtoClient class imported and available in scope. The 'scopes' array determines what resource permissions the client will request, while the 'resources' array specifies which endpoints this authentication should apply to. The inputs include the configuration object, particularly the 'scopes' and 'resources' fields; the output is a fully configured LogtoClient object. This setup is essential for applications that require fine-grained access control. Some required configurations are omitted (indicated by the placeholder comment), so a complete config is necessary in practice.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\\n  // ...other configs\\n  // highlight-start\\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\\n  // highlight-end\\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Connector Directory Structure\nDESCRIPTION: A file tree representation showing the organization of connector files in a TypeScript project. The structure includes required files like package.json, README.md, and logo.svg, as well as optional files marked with '^'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/develop-your-connector/connector-file-structure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nConnectorRootDir/\n├── package.json\n├── README.md\n├── logo.svg\n├── logo-dark.svg^\n└── src/\n    ├── index.ts\n    ├── index.test.ts\n    ├── types.ts\n    ├── constant.ts\n    ├── mock.ts^\n    ├── utils.ts^\n    ├── utils.test.ts^\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code sets up the Logto configuration object with custom scopes and resources. The scopes array defines the permission levels ('read' and 'write'), while the resources array specifies the API endpoints that will be accessed with these permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out Functionality in Chrome Extension Popup\nDESCRIPTION: This JavaScript code adds event listeners to the sign-in and sign-out buttons in the popup. It sends messages to the background script to initiate the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('sign-in').addEventListener('click', async () => {\n  await chrome.runtime.sendMessage({ action: 'signIn' });\n  // Sign-in completed (or failed), you can update the UI here.\n});\n\ndocument.getElementById('sign-out').addEventListener('click', async () => {\n  await chrome.runtime.sendMessage({ action: 'signOut' });\n  // Sign-out completed (or failed), you can update the UI here.\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication - Dart\nDESCRIPTION: This Dart snippet defines and initializes a constant LogtoConfig object, which is used to configure the Logto authentication service within a Dart app. It requires the Logto dependency, with parameters including the authentication endpoint, application identifier, and user access scopes. The endpoint and appId values must be replaced with actual credentials, and the configuration enables specific access to organizational data through 'scopes'. Inputs include endpoint and appId strings and an array of scope values. The output is a configured constant ready for authentication workflow, and improper values will result in authentication errors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_organization-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\\nfinal logtoConfig = const LogtoConfig(\\n  endpoint: \"<your-logto-endpoint>\",\\n  appId: \"<your-app-id>\",\\n  // highlight-start\\n  scopes: [LogtoUserScopes.organizations.value]\\n  // highlight-end\\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth to Include Access Token in Session\nDESCRIPTION: This code configures NextAuth to include the access token in the session object. It updates the jwt and session callbacks to pass the access token from the account to the token and then to the session.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // ...\n  callbacks: {\n    async jwt({ token, account }) {\n      if (account) {\n        token.accessToken = account.access_token;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      // Inject the access token into the session object\n      session.accessToken = token.accessToken;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Resources and Scopes in Dart\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig instance with authentication endpoint, app ID, API resources, and scopes. The configuration includes multiple API resources and their associated scopes for authorization purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Add your API resources' scopes\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring User Scopes in Logto Nuxt Plugin - TypeScript\nDESCRIPTION: This snippet configures the Logto plugin for a Nuxt.js project by importing the UserScope enumeration from '@logto/nuxt' and specifying a scope of 'Organizations'. This setup restricts authentication or authorization to organization-level users. Dependencies include the '@logto/nuxt' package, and this configuration should reside within the Nuxt config file (nuxt.config.ts). The main input is the list of scopes, and the expected outcome is that users will be authenticated with the defined organization scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\\n\\nexport default defineNuxtConfig({\\n  logto: {\\n    // highlight-next-line\\n    scopes: [UserScope.Organizations],\\n    // ...other configs\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources in Logto Go Client\nDESCRIPTION: Sets up Logto client configuration with custom scopes and resources. The Scopes array defines the permission levels requested, while Resources array specifies the API endpoints that will be accessed with these permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"read\", \"write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in Ruby\nDESCRIPTION: This code initializes a new LogtoClient instance with custom API resources. The resources array specifies the API endpoints that the authentication token will be valid for, in this case for shopping and store APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-next-line\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"] # 添加 API 资源 (API resources)\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with custom scopes and resources. It sets up read and write scopes, and specifies two API resources for the client to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Middleware in ASP.NET Core (C#)\nDESCRIPTION: This snippet shows how to register and configure Logto authentication in the service collection of an ASP.NET Core application. The 'AddLogtoAuthentication' method is called with an options delegate, where the 'Resource' property can be set to specify an API resource for protected routes. Dependencies include the Logto authentication library and ASP.NET Core dependency injection. The configuration is intended to be placed in the 'Program.cs' file during application startup, with 'options.Resource' being replaced by the actual API resource indicator as required.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.Resource = \"https://<your-api-resource-indicator>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto React SDK Scopes and Resources\nDESCRIPTION: Configuration example showing how to specify custom OAuth scopes and protected API resource endpoints in the Logto React SDK config object. The code sets up read/write permissions for shopping and store domains along with their corresponding API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Component for Organization Token Retrieval in Next.js\nDESCRIPTION: This client component provides a button interface that triggers the organization token retrieval process. When clicked, it calls the server action passed as a prop and logs the returned token to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetOrganizationToken: () => Promise<string>;\n};\n\nconst GetOrganizationToken = ({ onGetOrganizationToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetOrganizationToken();\n        console.log(token);\n      }}\n    >\n      組織トークンを取得 (コンソールログを参照)\n    </button>\n  );\n};\n\nexport default GetOrganizationToken;\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Flutter\nDESCRIPTION: This snippet demonstrates how to import the Logto SDK, initialize a LogtoClient instance, and set up the basic structure of a Flutter app with Logto integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_dart_sdk.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Flutter Demo',\n      home: MyHomePage(title: 'Logto Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  late LogtoClient logtoClient;\n\n  void render() {\n    // state change\n  }\n\n  final logtoConfig = const LogtoConfig(\n    endpoint: \"<your-logto-endpoint>\",\n    appId: \"<your-app-id>\"\n  );\n\n  void _init() {\n    logtoClient = LogtoClient(\n      config: logtoConfig,\n      httpClient: http.Client(), // Optional http client\n    );\n    render();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _init();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated API Route with Logto in TypeScript\nDESCRIPTION: This code snippet defines an API route using Logto for authentication. It checks if the user is authenticated, retrieves an access token for a specific resource, and returns the user information. The route is wrapped with Logto's API route handler for seamless integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute(\n  (request, response) => {\n    if (!request.user.isAuthenticated) {\n      response.status(401).json({ message: 'Unauthorized' });\n\n      return;\n    }\n\n    // Get access token here\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  },\n  {\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configurando Middleware Logto com Recursos de API em TypeScript\nDESCRIPTION: Este trecho de código configura o middleware Logto para autenticação, especificando recursos de API protegidos. Ele usa a função handleLogto para definir as configurações, incluindo uma lista de URLs de API que requerem autenticação.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Adicionar recursos de API\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Specific API Resources in Python\nDESCRIPTION: This snippet demonstrates initializing the `LogtoClient` from the Logto Python SDK. It uses `LogtoConfig` to pass configuration, specifically setting the `resources` parameter with a list of API resource identifiers (e.g., `https://shopping.your-app.com/api`, `https://store.your-app.com/api`). This configuration informs Logto which protected APIs the client application requires access to. This setup is necessary for requesting access tokens scoped for these specific resources. Requires the `LogtoClient` and `LogtoConfig` classes from the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"client.py\"\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], # API 리소스를 추가하세요\n    ),\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in PHP\nDESCRIPTION: This snippet shows how to import and use the UserScope constant and configure a LogtoClient instance with the organizations scope. This configuration is required to access organization-related features in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// highlight-next-line\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    scopes: [UserScope::organizations], // 新增權限範圍 (Scopes)\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express API Resources in TypeScript\nDESCRIPTION: Configuration example showing how to specify multiple API resource endpoints in Logto Express config. The resources array defines the protected API endpoints that the application will have access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n};\n```\n\n----------------------------------------\n\nTITLE: Injecting User Information into SvelteKit Layout\nDESCRIPTION: This snippet demonstrates how to inject the user object into the SvelteKit layout, making it available to all pages. It uses the LayoutServerLoad type and returns the user object from locals.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = async ({ locals }) => {\n  return { user: locals.user };\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organization Scope in Ruby\nDESCRIPTION: This snippet demonstrates how to create a new LogtoClient instance with the organizations scope. It requires the logto/core and logto/client libraries and configures the client with specific scopes needed for organization-related functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/core\"\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-next-line\n    scopes: [LogtoCore::USER_SCOPE[:organizations]]\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication in Nuxt - TypeScript\nDESCRIPTION: This snippet demonstrates how to extend the Nuxt configuration to enable Logto integration, specifying access scopes and protected resources required by the application. Dependencies include the Nuxt framework and the Logto module or plugin. The 'scopes' array lists the actions and domains the app is permitted to access, while the 'resources' array enumerates the protected API endpoints. Inputs are the scope and resource lists, and outputs are applied configurations in the running Nuxt app. Take care to align scopes and resources with corresponding API permissions for secure operation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineNuxtConfig({\\n  logto: {\\n    // highlight-start\\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\\n    // highlight-end\\n    // ...other configs\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button Component in Next.js with Auth.js\nDESCRIPTION: This code snippet demonstrates how to create a sign-in button component using Auth.js in a Next.js application. It uses the server-side action to initiate the sign-in process with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from '@/auth';\n\nexport default function SignIn() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signIn('logto');\n      }}\n    >\n      <button type=\"submit\">Sign In</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React SDK Installation Component in MDX\nDESCRIPTION: This code imports a reusable MDX component for npm-like installation instructions and uses it to show installation steps for Logto's React SDK package (@logto/react).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/react\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing API Resource with Access Token using cURL\nDESCRIPTION: This snippet shows how to use the obtained access token to make a request to a protected API resource using a cURL command. It demonstrates setting the authorization header for a GET request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/machine-to-machine/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n  --request GET 'https://your.api.endpoint/products' \\\n  --header 'Authorization: Bearer eyJhbG...2 # Access Token\n```\n\n----------------------------------------\n\nTITLE: Handling Logto Authentication Callback in Next.js\nDESCRIPTION: This code snippet demonstrates how to handle the authentication callback from Logto in a Next.js application. It uses the handleSignIn helper function to process the callback and redirects the user after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleSignIn } from '@logto/next/server-actions';\nimport { redirect } from 'next/navigation';\nimport { NextRequest } from 'next/server';\nimport { logtoConfig } from '../logto';\n\nexport async function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams;\n  await handleSignIn(logtoConfig, searchParams);\n\n  redirect('/');\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Angular Template\nDESCRIPTION: This HTML template snippet shows how to conditionally render sign-in/sign-out buttons and display user information based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button *ngIf=\"!isAuthenticated\" (click)=\"signIn()\">Sign in</button>\n<ng-container *ngIf=\"isAuthenticated\">\n  <pre>{{ idTokenClaims | json }}</pre>\n  <p>Access token: {{ accessToken }}</p>\n  <!-- ... -->\n  <button (click)=\"signOut()\">Sign out</button>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Authenticating User and Retrieving Organization Token with Logto in JavaScript\nDESCRIPTION: This snippet demonstrates how to check user authentication status, retrieve ID token claims, and fetch an organization access token using the Logto client. It imports the UserScope from Logto browser package, checks authentication status, logs ID token claims and organization IDs, and retrieves an access token for the first organization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UserScope } from 'https://esm.run/@logto/browser';\n\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\n(async () => {\n  if (!isAuthenticated) {\n    return;\n  }\n  const claims = await logtoClient.getIdTokenClaims();\n\n  console.log('ID 令牌声明 (ID token claims):', claims);\n  console.log('组织 (Organization) IDs:', claims.organizations);\n\n  // 假设至少有一个组织 (Organization)，我们取第一个\n  const organizationId = claims.organizations[0];\n  const token = await logtoClient.getOrganizationToken(organizationId);\n\n  console.log('组织 (Organization) 访问令牌 (access token):', token);\n})();\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Scopes in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the initialization of the `LogtoClient` from the `@logto/browser` package (or a package specified by `props.package`). It requires the application ID and Logto endpoint as configuration parameters and specifies the user scopes (Email, Phone, CustomData, Identities) to be requested during authentication. Placeholders `<your-application-id>` and `<your-logto-endpoint>` must be replaced with actual values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\nappId: '<your-application-id>',\nendpoint: '<your-logto-endpoint>',\nscopes: [UserScope.Email, UserScope.Phone, UserScope.CustomData, UserScope.Identities],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Configuration in Swift\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object with custom endpoint, app ID, scopes, and resources. It then uses this configuration to initialize a LogtoClient instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"read\", \"write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Authentication Routes in Express.js\nDESCRIPTION: Uses the handleAuthRoutes function from the Logto SDK to register three authentication routes: sign-in, sign-in callback, and sign-out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleAuthRoutes } from '@logto/express';\n\napp.use(handleAuthRoutes(config));\n```\n\n----------------------------------------\n\nTITLE: Adding Logto TypeScript Types in SvelteKit\nDESCRIPTION: This snippet demonstrates how to add TypeScript types for Logto client and user information in the SvelteKit application's global namespace.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LogtoClient, UserInfoResponse } from '@logto/sveltekit';\n\ndeclare global {\n  namespace App {\n    interface Locals {\n      logtoClient: LogtoClient;\n      user?: UserInfoResponse;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: This code configures a Logto client with specific access scopes and API resources. It sets up read and write permissions for two different API endpoints, which will be used during authentication and authorization flows.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"read\", \"write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Language Translations using Management API in JSON\nDESCRIPTION: Example JSON structure for customizing language translations via the Management API PUT /api/custom-phrases/{languageTag} endpoint. Shows how to define custom phrases for input fields, actions, errors, and user scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/localized-languages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": { \"username\": \"Username\", \"password\": \"Password\" },\n  \"secondary\": {\n    \"social_bind_with\": \"Already had an account? Sign in to link {{methods, list(type: disjunction;)}} with your social identity.\"\n  },\n  \"action\": { \"sign_in\": \"Sign in\" },\n  \"error\": {\n    \"general_required\": \"{{types, list(type: disjunction;)}} is required\"\n  },\n  \"list\": { \"or\": \"or\" },\n  \"user_scopes\": {\n    \"descriptions\": { \"custom_data\": \"Your custom data\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Multiple API Resources in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Logto Express configuration object, particularly focusing on defining multiple API resources. It imports the UserScope from @logto/express and configures the resources array with two API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Añadir recursos de API\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Capacitor\nDESCRIPTION: Sets up the Logto client in a Capacitor project by importing the necessary modules from @logto/capacitor and configuring it with endpoint and application ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient, { type LogtoConfig } from '@logto/capacitor';\n\nconst logtoConfig: LogtoConfig = {\n  endpoint: '<your-logto-endpoint>',\n  appId: '<your-application-id>',\n};\n\nconst logtoClient = new LogtoClient(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client\nDESCRIPTION: Configuration example showing how to request additional user scopes when initializing the Logto client in a Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { UserScope, LogtoNextConfig } from '@logto/next';\n\nexport const logtoConfig: LogtoNextConfig = {\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone], // Adicione mais escopos se necessário\n  // ...outras configurações\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Logto client to obtain an access token for a specific API endpoint. It uses an asynchronous function to get the token and then logs it to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst accessToken = await logtoClient.getAccessToken('https://store.your-app.com/api');\nconsole.log('アクセス トークン', accessToken);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client Scopes and Resources in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the Logto client with specific scopes and resources. It sets up read and write scopes, and defines two API resources for a shopping application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in React TypeScript\nDESCRIPTION: This snippet shows how to create a LogtoConfig object with custom scopes and resources for a React application. It defines specific permission scopes like 'shopping:read' and 'shopping:write', and specifies resource endpoints that the authentication will protect.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto PHP Client with Scopes and Resources\nDESCRIPTION: This snippet shows how to initialize a LogtoClient with custom scopes and API resources. The highlighted portion demonstrates adding specific read/write permissions and defining API resource endpoints that the client will have access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"read\", \"write\"], // Add scopes\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Add API resources\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources in Logto React Client\nDESCRIPTION: This snippet shows how to configure the LogtoConfig object with multiple API resource URLs. The configuration specifies two different API endpoints that the application needs to access, which will be included in the authentication tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Ajouter des ressources API\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoProvider in React Native\nDESCRIPTION: This snippet demonstrates how to import and use the LogtoProvider component to provide a Logto context in a React Native application. It requires the @logto/rn package and configuration parameters including the Logto endpoint and application ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  endpoint: '<your-logto-endpoint>',\n  appId: '<your-application-id>',\n};\n\nconst App = () => (\n  <LogtoProvider config={config}>\n    <YourAppContent />\n  </LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with API Resources in Nuxt.js (TypeScript)\nDESCRIPTION: This code snippet shows how to configure the Logto authentication module in a Nuxt.js application's configuration file. It specifically demonstrates setting up multiple API resources that will be protected by Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Adicionar recursos de API\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in Nuxt Config\nDESCRIPTION: Defines the Logto configuration object within Nuxt config, specifying authorization scopes for shopping and store operations, along with their corresponding API resource endpoints. The configuration enables granular access control through defined permission scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token in React\nDESCRIPTION: This code shows how to access additional user claims after configuring the required scopes. It retrieves the ID token claims and shows how to access specific properties like email and phone.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Maintenant, vous pouvez accéder aux revendications supplémentaires `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Configuration for Capacitor in TypeScript\nDESCRIPTION: This TypeScript snippet defines a constant `config` of type `LogtoConfig` from `@logto/capacitor`. It initializes the configuration object with placeholders for `appId` and `endpoint`, and includes an example array of `resources` (API identifiers) that the application intends to access after authentication. Replace the placeholders with your actual Logto application ID and endpoint URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Adicionar recursos de API\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In in Flutter with Logto\nDESCRIPTION: This code snippet shows how to implement the sign-in functionality using Logto in a Flutter application. It adds a sign-in button to the UI and uses the logtoClient.signIn method to initiate the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  final redirectUri = 'io.logto://callback';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signInButton = TextButton(\n      onPressed: () async {\n        await logtoClient.signIn(redirectUri);\n        render();\n      },\n      child: const Text('Sign In'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In/Out Methods in Rails\nDESCRIPTION: Controller methods and routes for handling sign-in and sign-out functionality with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  def sign_in\n    @client.sign_in(redirect_uri: request.base_url + \"/callback\")\n  end\n\n  def sign_out\n    @client.sign_out(post_logout_redirect_uri: request.base_url)\n  end\n\n  # ...\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  get \"/sign_in\", to: \"sample#sign_in\"\n  get \"/sign_out\", to: \"sample#sign_out\"\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Access Token in Express.js Route\nDESCRIPTION: This snippet demonstrates how to configure an Express.js route with Logto authentication middleware that fetches an access token for a specific resource. The middleware is set up with `getAccessToken: true` and a resource URL, allowing the route handler to access the token via the request.user object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-access-token',\n  withLogto({\n    ...config,\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }),\n  (request, response) => {\n    // highlight-next-line\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token with Logto Client\nDESCRIPTION: Retrieves an organization-specific token using the Logto client's getOrganizationToken method. The function takes an organizationId parameter and returns a Promise that resolves to the token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Routes with Passport.js in TypeScript\nDESCRIPTION: This snippet defines Express routes for sign-in, callback, and sign-out processes using Passport.js authentication. It handles the OpenID Connect authentication flow and session management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/sign-in', passport.authenticate('openidconnect'));\napp.get(\n  '/callback',\n  passport.authenticate('openidconnect', {\n    successReturnToOrRedirect: '/',\n  })\n);\napp.get('/sign-out', (request, response, next) => {\n  request.logout((error) => {\n    if (error) {\n      next(error);\n      return;\n    }\n    response.redirect(`${endpoint}/oidc/session/end?client_id=${appId}`);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to obtain an access token for a specific API endpoint. The getAccessToken method is called with the target API URL as an argument, returning a Promise that resolves to the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst token = await logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Next.js with Logto Auth\nDESCRIPTION: This code snippet demonstrates how to display user information in a Next.js application after the user has signed in using Logto authentication. It uses the auth() function to retrieve the session and renders the user's claims in a table.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from '@/auth';\n\nexport default async function Home() {\n  const session = await auth();\n\n  return (\n    <main>\n      {session?.user && (\n        <div>\n          <h2>Claims:</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(session.user).map(([key, value]) => (\n                <tr key={key}>\n                  <td>{key}</td>\n                  <td>{String(value)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Messages in Chrome Extension Background Script\nDESCRIPTION: This snippet shows how to set up message listeners in the background script to handle sign-in and sign-out actions from other extension pages. It uses the Chrome Identity API to generate redirect URIs for the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.action === 'signIn') {\n    const redirectUri = chrome.identity.getRedirectURL('/callback');\n    logtoClient.signIn(redirectUri).finally(sendResponse);\n    return true;\n  }\n\n  if (message.action === 'signOut') {\n    const redirectUri = chrome.identity.getRedirectURL();\n    logtoClient.signOut(redirectUri).finally(sendResponse);\n    return true;\n  }\n\n  return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Passport with OpenID Connect Strategy in TypeScript\nDESCRIPTION: This function initializes Passport authentication using OpenID Connect strategy. It configures the client ID, client secret, callback URL, and specifies the required scopes for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        // ... other options\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        // highlight-start\n        scope: ['openid', 'offline_access', 'profile', 'email'],\n        // highlight-end\n      }\n      // ... other options\n    )\n  );\n  // ... other options\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Server-Side Hook in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Logto server-side hook with custom scopes and resources. It uses the handleLogto function to define access scopes and API endpoints for shopping and store functionalities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Express.js SDK\nDESCRIPTION: This code snippet shows how to request additional scopes by adding them to the Logto Express.js SDK configuration. It imports necessary types and adds email and phone scopes to the config object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig, UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone], // 必要に応じてスコープを追加\n  // ...他の設定\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Callback Route in React Router TSX\nDESCRIPTION: This snippet demonstrates how to create a /callback route in a React application using react-router. The route is set up to render the Callback component and does not require authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_handle-redirect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Assuming react-router\n<Route path=\"/callback\" element={<Callback />} />\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with custom scopes and resources. It sets up 'read' and 'write' scopes, and specifies two API resources for the client to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Next.js\nDESCRIPTION: This snippet demonstrates how to import and initialize LogtoClient from @logto/next. It sets up the client with necessary configuration parameters including appId, appSecret, endpoint, baseUrl, and cookie settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // 예: http://localhost:3001\n  baseUrl: 'http://localhost:3000',\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Passport with OpenID Connect Strategy in TypeScript\nDESCRIPTION: Sets up Passport.js authentication middleware with OpenID Connect strategy, configuring client credentials and essential OAuth scopes. The configuration includes openid, offline_access, profile, and email scopes for comprehensive user authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/passport/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        // ... other options\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        // highlight-start\n        scope: ['openid', 'offline_access', 'profile', 'email'],\n        // highlight-end\n      }\n      // ... other options\n    )\n  );\n  // ... other options\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in PHP with Logto\nDESCRIPTION: Code demonstrating how to retrieve and display user information using both getIdTokenClaims (local ID token data) and fetchUserInfo (from Logto's userinfo endpoint) methods in a PHP route.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/userinfo', function () {\n  if ($client->isAuthenticated() === false) {\n    return \"Não autenticado <a href='/sign-in'>Entrar</a>\";\n  }\n\n  return (\n    // Obter reivindicações do Token de ID local\n    json_decode($client->getIdTokenClaims())\n    . \"<br>\"\n    // Buscar informações do usuário do endpoint userinfo do Logto\n    json_decode($client->fetchUserInfo())\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto Express Middleware\nDESCRIPTION: Shows how to access and display user claims using the Logto Express middleware through the req.user object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  response.json(request.user.claims);\n});\n```\n\n----------------------------------------\n\nTITLE: IDトークンから組織情報を取得する例\nDESCRIPTION: 認証後にIDトークンから組織ID情報を取得する方法を示す例です。getIdTokenClaims メソッドを使用して organizations クレームを取得します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// JavaScript を例として使用\nconst idToken = await logto.getIdTokenClaims();\n\nconsole.log(idToken.organizations); // 組織 ID の文字列配列\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto PHP SDK\nDESCRIPTION: Shows how to get an access token for a specific API endpoint using the Logto client. The code requests an access token for the shopping API endpoint which can then be used to make authenticated requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$accessToken = $client->getAccessToken(\"https://shopping.your-app.com/api\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Organization Token Retrieval in Vue.js\nDESCRIPTION: TypeScript code that uses the Logto Vue SDK to retrieve user organization IDs from ID token claims and fetch organization-specific tokens. It sets up reactive state for organization IDs and defines functions to retrieve and display token information in the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto } from '@logto/vue';\nimport { onMounted, ref } from 'vue';\n\nconst { getOrganizationToken, getOrganizationTokenClaims, getIdTokenClaims } = useLogto();\nconst organizationIds = ref<string[]>();\n\nonMounted(async () => {\n  const claims = await getIdTokenClaims();\n\n  console.log('ID token claims', claims);\n  organizationIds.value = claims?.organizations;\n});\n\nconst onClickFetchOrganizationToken = async (organizationId: string) => {\n  console.log('raw token', await getOrganizationToken(organizationId));\n  console.log('claims', await getOrganizationTokenClaims(organizationId));\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out with Custom Redirect in Capacitor (TypeScript)\nDESCRIPTION: This code shows how to implement sign-out with a custom redirect URI in a Capacitor app using Logto. It allows specifying where the user should be redirected after signing out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst onClick = async () => {\n  await logtoClient.signOut('com.example.app://callback/sign-out');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in Kotlin\nDESCRIPTION: Initializes a LogtoConfig instance with custom scopes for read/write permissions and multiple API resource endpoints. Shows how to specify access control and resource definitions for authentication configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(\"read\", \"write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Popular Enterprise Connectors List in DocCardList Component\nDESCRIPTION: JSX component that displays a list of popular enterprise connectors with their respective icons and links to integration guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/enterprise-connectors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Microsoft Entra ID (OIDC)',\n      href: '/integrations/entra-id-oidc',\n      customProps: {\n        icon: <MicrosoftEntraId />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Microsoft Entra ID (SAML)',\n      href: '/integrations/entra-id-saml',\n      customProps: {\n        icon: <MicrosoftEntraId />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Google Workspace (OIDC)',\n      href: '/integrations/google-workspace',\n      customProps: {\n        icon: <GoogleWorkspace />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Okta (OIDC)',\n      href: '/integrations/okta',\n      customProps: {\n        icon: <Okta />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Identity Server Scopes\nDESCRIPTION: Configuration example for setting up basic OpenID Connect scopes in appsettings.json. Demonstrates how to request openid, profile, email, and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_fetch-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ...\n  \"IdentityServer\": {\n    // ...\n    // highlight-next-line\n    \"Scope\": \"openid profile email phone\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Ruby\nDESCRIPTION: This snippet demonstrates how to initialize the Logto client in a Ruby file. It includes setting up the configuration, navigation, and storage options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    endpoint: \"https://your-logto-endpoint.com\",\n    app_id: \"your-logto-app-id\",\n    app_secret: \"your-logto-app-secret\"\n  ),\n  navigate: ->(uri) { a_redirect_method(uri) },\n  storage: LogtoClient::SessionStorage.new(the_session_object)\n)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding OAuth2 Dependencies in Gradle for Spring Boot\nDESCRIPTION: Gradle dependencies configuration for adding Spring Boot web and OAuth2 resource server support to a Spring Boot project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Storage in PHP\nDESCRIPTION: Creates a LogtoClient with a custom storage implementation instead of the default PHP session storage. This allows for alternative storage mechanisms for Logto authentication data. The custom storage class must implement the Storage interface from the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_init-logto-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...\n  ),\n  new YourCustomStorage(),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler with API Resources in SvelteKit\nDESCRIPTION: This snippet shows how to set up the Logto authentication handler in a SvelteKit server hooks file. It demonstrates how to specify multiple API resources that the application needs access to, enabling proper authentication and authorization for these resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API リソースを追加\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Security Scopes and Resources in Nuxt - TypeScript\nDESCRIPTION: This snippet defines custom authentication scopes and API resource endpoints within the logto section of the Nuxt configuration file (nuxt.config.ts). It requires the Nuxt framework, the Logto module/plugin, and valid API URLs for the protected resources. The 'scopes' array controls which access tokens are requested, and the 'resources' array registers the protected API endpoints that Logto will attempt to secure. This configuration snippet should be placed in the root nuxt.config.ts file and expects Logto to be set up for your project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\\n  logto: {\\n    // highlight-start\\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\\n    // highlight-end\\n    // ...other configs\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Logto client to obtain an organization token. It requires an organization ID as a parameter and returns a promise that resolves to the token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await client.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Customizing Sign-In to Show Registration First in Flask with Logto\nDESCRIPTION: Modifies the basic sign-in route to display the registration page as the first screen by setting the interactionMode parameter to 'signUp'. This allows new users to register directly without navigating through the login screen first.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-in\")\nasync def sign_in():\n    return redirect(await client.signIn(\n        redirectUri=\"${defaultRedirectUri}\",\n        interactionMode=\"signUp\", # Muestra la página de registro en la primera pantalla\n    ))\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Capacitor\nDESCRIPTION: This snippet shows how to import and initialize the Logto client in a Capacitor project. It requires setting up the endpoint and application ID in the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient, { type LogtoConfig } from '@logto/capacitor';\n\nconst logtoConfig: LogtoConfig = {\n  endpoint: '<your-logto-endpoint>',\n  appId: '<your-application-id>',\n};\n\nconst logtoClient = new LogtoClient(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in TypeScript\nDESCRIPTION: This snippet shows how to create a LogtoClient instance with custom configurations. It specifically highlights the addition of API resources, which are URLs for different API endpoints that the client will interact with.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Ajouter des ressources API\n});\n```\n\n----------------------------------------\n\nTITLE: MDX Import Structure for Okta SSO Documentation\nDESCRIPTION: MDX import statements for organizing documentation fragments related to Okta SSO integration with Express\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-express-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Swift\nDESCRIPTION: Creates a LogtoClient instance with endpoint and appId configuration. This is the basic initialization required to use Logto authentication in a Swift application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/_init-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Logto\nimport LogtoClient\n\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // E.g. http://localhost:3001\n  appId: \"<your-app-id>\"\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims in Next.js Component\nDESCRIPTION: This code snippet demonstrates how to fetch and display user claims in a Next.js component using the SWR library for data fetching.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoContext } from '@logto/next';\nimport { useMemo } from 'react';\nimport useSWR from 'swr';\n\nconst Home = () => {\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\n\n  const claims = useMemo(() => {\n    if (!data?.isAuthenticated || !data.claims) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h2>Reclamos (Claims):</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Nombre</th>\n              <th>Valor</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(data.claims).map(([key, value]) => (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>{String(value)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }, [data]);\n\n  return (\n    <div>\n      {claims}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Creating WebSecurityConfig Class\nDESCRIPTION: This Java class defines the WebSecurityConfig, which is used to configure security settings for the Spring Boot application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity\n\npublic class WebSecurityConfig {\n // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In/Sign-Out Button in SvelteKit\nDESCRIPTION: This snippet shows how to create a dynamic sign-in/sign-out button in a Svelte component, utilizing the server-side actions defined earlier.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"?/{data.user ? 'signOut' : 'signIn'}\">\n  <button type=\"submit\">Sign {data.user ? 'out' : 'in'}</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and Resources - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the creation of a \\'LogtoClient\\' instance with customized \\'scopes\\' and \\'resources\\' arrays for controlling access rights. It assumes the \\'LogtoClient\\' class is already imported or available in the project context. The \\'scopes\\' parameter specifies the access permissions (e.g., \\'read\\', \\'write\\'), while the \\'resources\\' array defines the API endpoints the client should have access to. This setup is intended for applications integrating resource-based authorization with Logto, and requires proper client credentials and environment configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Access Token Using Logto Ruby Client\nDESCRIPTION: Makes a request to obtain an access token for a specific resource endpoint using the Logto client instance. Takes a resource URL parameter and returns an access token that can be used for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntoken = @client.access_token(resource: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with API Resources in Dart\nDESCRIPTION: This snippet shows the creation of a `LogtoConfig` constant object in Dart. It specifies the authentication endpoint, the application's unique ID, and crucially, lists the API resource indicators (`resources`) the application will interact with using placeholder values. This configuration is essential for requesting access tokens scoped for these specific resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // 新增你的 API 資源\n  // highlight-start\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in Logto Go SDK in Go\nDESCRIPTION: This Go code snippet demonstrates how to set up the Logto SDK configuration to include specific API resource URLs for authentication or authorization. It requires importing the Logto Go client package and setting the 'Resources' field in the 'LogtoConfig' struct to a slice of API endpoint strings. Configuring resource URLs enables granular authorization rules; at least one valid API resource should be specified in the slice for proper functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client for Next.js\nDESCRIPTION: This snippet sets up the configuration for the Logto client in a Next.js application. It includes essential parameters such as app ID, secret, endpoints, and cookie settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoNextConfig } from '@logto/next';\n\nexport const logtoConfig: LogtoNextConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // Par exemple, http://localhost:3001\n  baseUrl: '<your-nextjs-app-base-url>', // Par exemple, http://localhost:3000\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Fetching in Logto Config\nDESCRIPTION: Configuration example showing how to enable user info fetching in the Logto Express configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // highlight-next-line\n  fetchUserInfo: true,\n  // ...other configs\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token for Protected Resource in React Native with Logto\nDESCRIPTION: This component demonstrates how to fetch an access token for a specific API resource after authenticating with Logto. It checks if the user is authenticated before attempting to retrieve the token, then stores it in component state for display or further use.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\n\nconst AccessToken = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        // highlight-start\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        // highlight-end\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving an OAuth 2.0 Access Token for a Specific API Resource in Swift\nDESCRIPTION: This code demonstrates how to asynchronously retrieve an OAuth 2.0 access token for a specific API endpoint using Logto's client SDK. The method uses Swift's async/await pattern to handle the asynchronous token acquisition process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet accessToken = try await client.getAccessToken(for: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Ruby\nDESCRIPTION: Basic code to initialize the Logto client in a Ruby application by configuring the endpoint, app credentials, and defining navigation and storage handlers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    endpoint: \"https://your-logto-endpoint.com\",\n    app_id: \"your-logto-app-id\",\n    app_secret: \"your-logto-app-secret\"\n  ),\n  navigate: ->(uri) { a_redirect_method(uri) },\n  storage: LogtoClient::SessionStorage.new(the_session_object)\n)\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving ID Token Claims with Go Logto SDK\nDESCRIPTION: Example of implementing a route handler to fetch and display user ID token claims using the Logto client. Uses Gin framework for routing and session management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    //...\n\n    router.GET(\"/user-id-token-claims\", func(ctx *gin.Context) {\n      session := sessions.Default(ctx)\n      logtoClient := client.NewLogtoClient(logtoConfig, &SessionStorage{session: session})\n\n      // highlight-start\n      idTokenClaims, err := logtoClient.GetIdTokenClaims()\n      // highlight-end\n\n      if err != nil {\n        ctx.String(http.StatusOK, err.Error())\n      }\n\n      ctx.JSON(http.StatusOK, idTokenClaims)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Access Token with Refresh Token in Next.js\nDESCRIPTION: This code snippet demonstrates how to use a refresh token to obtain an organization access token from Logto in a Next.js application. It includes setting up the API request with proper headers, using basic authentication, and specifying the required parameters in the request body.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Home() {\n  const session = await auth();\n\n  if (session?.refreshToken) {\n    // Replace the app ID and secret with your own, you can check the \"Integration\" section.\n    const basicAuth = Buffer.from('<logto-app-id>:<logto-app-secret>').toString('base64');\n\n    // Replace the URL with your Logto endpoint, should ends with `/oidc/token`\n    const response = await fetch('https://xxx.logto.app/oidc/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Basic ${basicAuth}`,\n      },\n      body: new URLSearchParams({\n        grant_type: 'refresh_token',\n        refresh_token: session.refreshToken,\n        // highlight-next-line\n        resource: 'urn:logto:scope:organizations',\n        // highlight-next-line\n        organization_id: 'organization-id',\n      }).toString(),\n    });\n\n    const data = await response.json();\n    console.log(data.access_token);\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomSuccessHandler for Login Success\nDESCRIPTION: Custom handler to manage successful login events, redirecting users to the /user page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport java.io.IOException;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\npublic class CustomSuccessHandler implements AuthenticationSuccessHandler {\n  @Override\n  public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,\n      Authentication authentication) throws IOException, ServletException {\n    response.sendRedirect(\"/user\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Button Functionality with Logto in JavaScript\nDESCRIPTION: This code snippet demonstrates how to implement a sign-out button functionality using Logto in a Webflow project. It selects the sign-out button, defines a sign-out function that uses the Logto client, and adds a click event listener to the button.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/_implement-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst signOutButton = document.getElementById('sign-out');\nconst onClickSignOut = () => logtoClient.signOut('https://your-awesome-site.webflow.io');\nsignOutButton.addEventListener('click', onClickSignOut);\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in LogtoConfig\nDESCRIPTION: Demonstrates how to request additional scopes by passing them to the LogtoConfig object during initialization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val logtoConfig = LogtoConfig(\n    // ...other configurations\n    scopes = listOf(\"email\", \"phone\"), // or `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Organizations Component in React TSX\nDESCRIPTION: This component uses the Logto React hook to authenticate users, retrieve organization IDs from ID token claims, and fetch organization tokens. It displays a list of organization IDs and provides a button to get the token for each organization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID トークン クレーム', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  console.log('raw token', await getOrganizationToken(organizationId));\n                }}\n              >\n                トークンを取得 (コンソールを参照)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication in Vue with Custom Scopes and Resources\nDESCRIPTION: This snippet demonstrates how to use the createLogto function to set up Logto authentication in a Vue application. It shows how to specify custom scopes and resources for the authentication configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration de la sécurité Spring pour JWT\nDESCRIPTION: Configuration Java pour Spring Security, incluant la configuration du décodeur JWT et de la chaîne de filtres de sécurité.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.logto.springboot.sample.configuration;\n\nimport com.nimbusds.jose.JOSEObjectType;\nimport com.nimbusds.jose.proc.DefaultJOSEObjectTypeVerifier;\nimport com.nimbusds.jose.proc.SecurityContext;\nimport io.logto.springboot.sample.validator.AudienceValidator;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;\nimport org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidator;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.JwtValidators;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\nimport org.springframework.security.web.DefaultSecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration {\n\n    @Value(\"${logto.audience}\")\n    private String audience;\n\n    @Value(\"${spring.security.oauth2.resourceserver.jwt.issuer-uri}\")\n    private String issuer;\n\n    @Value(\"${spring.security.oauth2.resourceserver.jwt.jwk-set-uri}\")\n    private String jwksUri;\n\n    @Bean\n    public JwtDecoder jwtDecoder() {\n        NimbusJwtDecoder jwtDecoder = NimbusJwtDecoder.withJwkSetUri(jwksUri)\n                // Logto utilise l'algorithme ES384 pour signer les JWT par défaut.\n                .jwsAlgorithm(ES384)\n                // Le décodeur doit prendre en charge le type de jeton : Jeton d'accès + JWT.\n                .jwtProcessorCustomizer(customizer -> customizer.setJWSTypeVerifier(\n                        new DefaultJOSEObjectTypeVerifier<SecurityContext>(new JOSEObjectType(\"at+jwt\"))))\n                .build();\n\n        jwtDecoder.setJwtValidator(new DelegatingOAuth2TokenValidator<>(\n                new AudienceValidator(audience),\n                new JwtIssuerValidator(issuer),\n                new JwtTimestampValidator()));\n\n        return jwtDecoder;\n    }\n\n    @Bean\n    public DefaultSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n         http\n          .securityMatcher(\"/api/**\")\n          .oauth2ResourceServer(oauth2 -> oauth2\n              .jwt(Customizer.withDefaults()))\n          .authorizeHttpRequests(requests -> requests\n              // Autoriser toutes les requêtes aux API publiques.\n              .requestMatchers(\"/api/.wellknown/**\").permitAll()\n              // Exiger la validation du jeton jwt pour les API protégées.\n              .anyRequest().authenticated());\n\n        return http.build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Configuration in Swift\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object with necessary parameters and use it to initialize a LogtoClient. It sets the Logto endpoint, app ID, and specifies API resources for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // Exemplo: http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-next-line\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Adicionar recursos de API\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure Logto Express with custom scopes and resources. It imports the UserScope from @logto/express and defines a LogtoExpressConfig object with 'read' and 'write' scopes, and two API resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomAuthManager with Logto Client in Dart\nDESCRIPTION: This snippet defines the CustomAuthManager class, which initializes a LogtoClient with a specified configuration. It includes methods for updating the current user and initializing the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomAuthManager {\n  late LogtoClient logtoClient;\n\n  final logtoConfig = const LogtoConfig(\n      appId: '<YOUR-APP-ID>',\n      endpoint: '<YOUR-LOGTO-ENDPOINT>');\n\n\n  // ...\n\n  FlutterFlowAuthAuthUser? _updateCurrentUser(\n      {bool loggedIn = false, String? uid, OpenIdClaims? idToken}) {\n    // 현재 사용자 스트림을 업데이트합니다.\n    final updatedUser = FlutterFlowAuthAuthUser(\n      loggedIn: loggedIn,\n      uid: uid,\n      idToken: idToken,\n    );\n\n    flutterFlowAuthAuthUserSubject.add(updatedUser);\n\n    return updatedUser;\n  }\n\n  Future initialize() async {\n    logtoClient = LogtoClient(config: logtoConfig, httpClient: http.Client());\n\n    late OpenIdClaims? idToken;\n\n    try {\n      idToken = await logtoClient.idTokenClaims;\n    } catch (e) {\n      if (kDebugMode) {\n        print('인증 초기화 오류: $e');\n      }\n    }\n\n    _updateCurrentUser(\n        loggedIn: idToken != null, uid: idToken?.subject, idToken: idToken);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Logto Client with Organization Scope\nDESCRIPTION: Example of initializing Logto client in Python with organization scope\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...\n        scopes=[UserInfoScope.organizations],\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with custom scopes and resources. The scopes define the permissions requested, while the resources specify the API endpoints that will be accessed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with Logto SDK in TypeScript\nDESCRIPTION: Shows how to obtain an access token for a specific resource using the Logto SDK. This code retrieves a token with audience restricted to the specified API resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst accessToken = await logtoClient.getAccessToken('https://resource-server.com/api');\n```\n\n----------------------------------------\n\nTITLE: Token Introspection Request - Curl\nDESCRIPTION: Example curl command demonstrating how to make a POST request to the introspection endpoint with client credentials and token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/opaque-token.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n  --request POST 'https://[tenant-id].logto.app/oidc/token/introspection' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'token=some-random-string' \\\n  --data-urlencode 'client_id=1234567890' \\\n  --data-urlencode 'client_secret=1234567890'\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth v4 with Logto Provider\nDESCRIPTION: Sets up NextAuth v4 with Logto as an OAuth provider. Includes well-known configuration endpoint, client credentials, token algorithm settings, and profile mapping.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oauth',\n      // Logto アプリケーションの詳細ページから well-known URL を取得できます。\n      // フィールド「OpenID Provider configuration endpoint」にあります。\n      wellKnown: 'https://xxxx.logto.app/oidc/.well-known/openid-configuration',\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      client: {\n        id_token_signed_response_alg: 'ES384',\n      },\n      profile(profile) {\n        // ユーザープロファイルのマッピングをここでカスタマイズできます\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in Go\nDESCRIPTION: This snippet shows how to create a Logto configuration object with endpoint, app ID, and app secret. These values are required to set up the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_init-logto-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// ...\n\tlogtoConfig := &client.LogtoConfig{\n\t\tEndpoint:  \"<your-logto-endpoint>\", // Z.B. http://localhost:3001\n\t\tAppId:     \"<your-application-id>\",\n\t\tAppSecret: \"<your-application-secret>\",\n\t}\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button Component in Next.js\nDESCRIPTION: This snippet shows how to create a sign-in button component using Auth.js in a Next.js application. It uses the 'signIn' function from Auth.js to initiate the Logto sign-in process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from '@/auth';\n\nexport default function SignIn() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signIn('logto');\n      }}\n    >\n      <button type=\"submit\">Sign In</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Custom Scopes and Resources in Go\nDESCRIPTION: This code snippet initializes a LogtoConfig struct with custom scopes and resources. It sets up read and write scopes, and specifies two API endpoints as resources. This configuration is crucial for defining the access permissions and target resources for the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"read\", \"write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out with Logto in Capacitor\nDESCRIPTION: This snippet shows how to implement the sign-out functionality using Logto in a Capacitor app. It demonstrates signing out the user and verifying the authentication status afterward.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst onClick = async () => {\n  await logtoClient.signOut();\n  console.log(await logtoClient.isAuthenticated()); // false\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Scopes and Resources in Logto React SDK Configuration (TypeScript)\nDESCRIPTION: This TypeScript snippet configures the `LogtoConfig` object for the Logto React SDK. It imports the `LogtoConfig` type and defines a configuration object specifying desired permission scopes (`read`, `write`) and the target API resources (`https://shopping.your-app.com/api`, `https://store.your-app.com/api`) the application needs access to. This configuration is typically used when initializing the Logto provider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Express Route with Logto\nDESCRIPTION: This snippet demonstrates how to access additional claims (like email) in an Express route after configuring additional scopes. It uses the 'withLogto' middleware and retrieves the email claim from the user object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  response.end(`Benutzer-E-Mail: ${req.user.claims.email}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in Vue Component\nDESCRIPTION: This snippet demonstrates how to use Logto's Vue SDK to implement sign-in and sign-out functionality in a Vue component. It uses the useLogto composition function to manage authentication state and actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/vue';\n\nconst { signIn, signOut, isAuthenticated } = useLogto();\n\nconst onClickSignIn = () => signIn('http://localhost:3000/callback');\nconst onClickSignOut = () => signOut('http://localhost:3000');\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with `getAccessToken` in React Native (TSX)\nDESCRIPTION: This TSX snippet defines a React Native component that utilizes the `useLogto` hook from `@logto/rn`. It checks if the user is authenticated (`isAuthenticated`) and then calls the asynchronous `getAccessToken` function, passing the unique resource indicator URI ('https://shopping.your-app.com/api') as an argument. The retrieved access token is stored in the component's state using `useState` and displayed within a `<p>` tag. Dependencies include React (`useEffect`, `useState`) and `@logto/rn` (`useLogto`).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"AccessToken.tsx\"\nimport { useLogto } from '@logto/rn';\n\nconst AccessToken = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        // highlight-start\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        // highlight-end\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Go\nDESCRIPTION: Creates and initializes a Logto client instance with necessary configuration options for a Go web application. This setup includes endpoint URLs, client credentials, and session storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/logto-io/go/client\"\n)\n\nsessionStorage := NewSessionStorage()\n\nlogtoClient, err := client.NewLogtoClient(\n    \"https://your-logto-endpoint.app\",\n    \"your-app-id\",\n    \"your-app-secret\",\n    \"http://localhost:8080/callback\",\n    []string{\"your-resource-indicator\"},\n    client.WithSessionStorage(sessionStorage),\n)\nif err != nil {\n    // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Auth Providers with Resource and Scopes\nDESCRIPTION: Sets up Angular application configuration with HTTP client and authentication providers. Defines the authentication configuration including custom API resource endpoint and required OAuth scopes for authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        scopes: ['openid', 'profile', 'offline_access', 'read', 'write'],\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Route for Logto Authentication\nDESCRIPTION: Express route for handling the authentication callback, processing the response, and storing tokens in the session.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/callback', async (req, res) => {\n  if (!req.session.signIn) {\n    res.send('Incorrect request.');\n    return;\n  }\n\n  const response = await handleSignIn(\n    req.session.signIn,\n    `${req.protocol}://${req.get('host')}${req.originalUrl}`\n  );\n  req.session.tokens = {\n    ...response,\n    expiresAt: response.expiresIn + Date.now(),\n    idToken: decodeIdToken(response.idToken),\n  };\n  req.session.signIn = null;\n\n  res.redirect('/');\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Swift SDK\nDESCRIPTION: This snippet demonstrates how to asynchronously obtain an access token for a specific resource using the Logto Swift client. It uses Swift's async/await syntax for handling asynchronous operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet accessToken = try await client.getAccessToken(for: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto SDK\nDESCRIPTION: This code snippet demonstrates how to add more scopes when configuring Logto SDK. By default, Logto SDK requests 'openid', 'profile', and 'offline_access' scopes, which cannot be removed. The placeholder {props.configScopesCode} would be replaced with actual configuration code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{props.configScopesCode}\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication State in Chrome Extension Popup\nDESCRIPTION: This code snippet demonstrates how to check the authentication state and load user profile information in the Chrome extension's popup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst loadAuthenticationState = async () => {\n  const isAuthenticated = await logtoClient.isAuthenticated();\n  // Actualiza la UI basado en el estado de autenticación\n\n  if (isAuthenticated) {\n    const user = await logtoClient.getIdTokenClaims(); // { sub: '...', email: '...', ... }\n    // Actualiza la UI con el perfil del usuario\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Auth Provider in Angular\nDESCRIPTION: Sets up the authentication configuration in Angular's app.config.ts using @logto/js and angular-auth-oidc-client. Configures essential parameters like endpoint, appId, and redirect URIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildAngularAuthConfig } from '@logto/js';\nimport { provideAuth } from 'angular-auth-oidc-client';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        endpoint: '<your-logto-endpoint>',\n        appId: '<your-app-id>',\n        redirectUri: 'http://localhost:3000/callback',\n        postLogoutRedirectUri: 'http://localhost:3000/',\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Logto Sign-In Callback in JavaScript\nDESCRIPTION: This code snippet defines an asynchronous function 'callbackHandler' that processes the sign-in callback from Logto. It handles both successful and failed sign-in attempts, redirecting to the home page on success or displaying an alert on failure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_handle-redirect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst callbackHandler = async (logtoClient) => {\n  await logtoClient.handleSignInCallback(window.location.href);\n\n  if (!logtoClient.isAuthenticated) {\n    // Handle failed sign-in\n    alert('Failed to sign in');\n    return;\n  }\n\n  // Handle successful sign-in\n  window.location.assign('/');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client Scopes and Resources in Go\nDESCRIPTION: This snippet demonstrates how to configure the Logto client with specific scopes and resources. It sets up an array of scopes for read and write permissions on shopping and store functionalities, as well as an array of API resource URLs for the shopping and store services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Server Actions\nDESCRIPTION: Defines server actions for sign-in and sign-out functionality in a SvelteKit page server file, specifying the callback and post-logout redirect URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actions } from './$types';\n\nexport const actions: Actions = {\n  signIn: async ({ locals }) => {\n    await locals.logtoClient.signIn('http://localhost:3000/callback');\n  },\n  signOut: async ({ locals }) => {\n    await locals.logtoClient.signOut('http://localhost:3000/');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client - TypeScript\nDESCRIPTION: This snippet shows how to use the Logto client library to obtain an access token for the API resource at 'https://shopping.your-app.com/api'. It requires an initialized logtoClient instance and assumes the asynchronous context (e.g., an async function). The input is the resource URI as a parameter, and the output is an access token string (stored in the variable 'token'). Make sure that Logto client is properly configured before executing this function.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst token = await logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Scopes in LogtoConfig for Android\nDESCRIPTION: This snippet shows how to configure the LogtoConfig object with the Organizations user scope. The highlighted lines demonstrate how to add the Organizations scope to the list of scopes that the application will request during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(UserScope.Organizations),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out Routes with Passport.js in TypeScript\nDESCRIPTION: This snippet demonstrates how to create routes for sign-in, callback, and sign-out using Passport.js with OpenID Connect strategy. It handles authentication and logout processes, including redirecting to Logto's session end endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/sign-in', passport.authenticate('openidconnect'));\napp.get(\n  '/callback',\n  passport.authenticate('openidconnect', {\n    successReturnToOrRedirect: '/',\n  })\n);\napp.get('/sign-out', (request, response, next) => {\n  request.logout((error) => {\n    if (error) {\n      next(error);\n      return;\n    }\n    response.redirect(`${endpoint}/oidc/session/end?client_id=${appId}`);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Logto React Native SDK and Peer Dependencies using npm, Yarn, or pnpm\nDESCRIPTION: These commands demonstrate how to install the Logto React Native SDK (`@logto/rn`) and its required peer dependencies (`expo-crypto`, `expo-secure-store`, `expo-web-browser`, `@react-native-async-storage/async-storage`) using npm, Yarn, or pnpm. These peer dependencies are necessary for the SDK's functionality within an Expo environment and must be installed directly in the project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/rn\nnpm i expo-crypto expo-secure-store expo-web-browser @react-native-async-storage/async-storage\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/rn\nyarn add expo-crypto expo-secure-store expo-web-browser @react-native-async-storage/async-storage\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/rn\npnpm add expo-crypto expo-secure-store expo-web-browser @react-native-async-storage/async-storage\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Chrome Extension Background Script\nDESCRIPTION: This code initializes the Logto client in the Chrome extension's background script (service worker). It sets up the client with the Logto endpoint and app ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/chrome-extension';\n\nexport const logtoClient = new LogtoClient({\n  endpoint: '<your-logto-endpoint>'\n  appId: '<your-logto-app-id>',\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Tokens and Claims using Logto in Python Flask\nDESCRIPTION: This snippet demonstrates how to retrieve an organization token and token claims using the Logto client in a Flask application. The code requires a valid organization ID, which can be found in the ID token claim 'organizations'. The client provides two methods: getOrganizationToken for retrieving the full token and getOrganizationTokenClaims for accessing just the claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Replace the parameter with a valid organization ID.\n# Valid organization IDs for the user can be found in the ID token claim `organizations`.\norganizationToken = await client.getOrganizationToken(organization_id)\n# or\norganizationTokenClaims = await client.getOrganizationTokenClaims(organization_id)\n```\n\n----------------------------------------\n\nTITLE: Setting Scopes and Resources in Logto Go Client Configuration\nDESCRIPTION: This Go code snippet demonstrates how to initialize or modify a `LogtoConfig` struct to specify the required OAuth 2.0 scopes (e.g., 'shopping:read', 'store:write') and the target resource indicators (API identifiers like 'https://shopping.your-app.com/api'). This configuration is essential for requesting specific permissions and accessing protected resources via Logto. It assumes the existence of a `client.LogtoConfig` struct, likely part of a Logto Go SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In Button Component for Next.js\nDESCRIPTION: Implements a client-side Sign-In button component that triggers the authentication flow when clicked. This component accepts an onSignIn callback function that will be executed on button click.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignIn: () => Promise<void>;\n};\n\nconst SignIn = ({ onSignIn }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignIn();\n      }}\n    >\n      Sign In\n    </button>\n  );\n};\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Configuring Gin Session Middleware\nDESCRIPTION: Example of setting up a Gin web server with memory-based session storage using gin-contrib/sessions middleware. Demonstrates basic route configuration and session initialization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_create-session-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/gin-contrib/sessions\"\n\t\"github.com/gin-contrib/sessions/memstore\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/logto-io/go/client\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\n\t// We use memory-based session in this example\n\tstore := memstore.NewStore([]byte(\"your session secret\"))\n\trouter.Use(sessions.Sessions(\"logto-session\", store))\n\n\trouter.GET(\"/\", func(ctx *gin.Context) {\n\t\t// Get user session\n\t\tsession := sessions.Default(ctx)\n\t\t// ...\n\t\tctx.String(200, \"Hello Logto!\")\n\t})\n\trouter.Run(\":3000\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next Auth v4 Provider for Logto in Next.js\nDESCRIPTION: This snippet demonstrates the setup of Next Auth v4 provider for Logto in a Next.js application. It includes the configuration for the OAuth provider, profile mapping, and the necessary OIDC settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oauth',\n      // Vous pouvez obtenir l'URL bien connue depuis la page Détails de l'application Logto,\n      // dans le champ \"Endpoint de configuration du fournisseur OpenID\"\n      wellKnown: 'https://xxxx.logto.app/oidc/.well-known/openid-configuration',\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      client: {\n        id_token_signed_response_alg: 'ES384',\n      },\n      profile(profile) {\n        // Vous pouvez personnaliser le mappage du profil utilisateur ici\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new LogtoClient instance with a LogtoConfig object that includes multiple API resources. The resources are specified as an array of URLs, allowing the client to access multiple API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Adicionar recursos de API\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 with Logto Provider\nDESCRIPTION: Configures Auth.js v5 with Logto as an OIDC provider, including authentication settings, scope configuration, and user profile mapping.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oidc',\n      // 你可以从 Logto 应用详情页面的\"发行者 (Issuer) 端点\"字段获取发行者 (Issuer) 值\n      issuer: 'https://xxxx.logto.app/oidc',\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      authorization: {\n        params: { scope: 'openid offline_access profile email' },\n      },\n      profile(profile) {\n        // 你可以在这里自定义用户资料映射\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing LogtoClient in Swift\nDESCRIPTION: This code initializes a LogtoConfig object with an endpoint URL, application ID, and API resource URLs, then creates a LogtoClient instance with that configuration. The resources parameter specifies the API endpoints that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // E.g. http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-next-line\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Ajouter des ressources API\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Callback in Next.js App Router\nDESCRIPTION: Implements a route handler to process the authentication callback from Logto. It uses the handleSignIn function to complete the authentication flow and redirects the user to the home page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleSignIn } from '@logto/next/server-actions';\nimport { redirect } from 'next/navigation';\nimport { NextRequest } from 'next/server';\nimport { logtoConfig } from '../logto';\n\nexport async function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams;\n  await handleSignIn(logtoConfig, searchParams);\n\n  redirect('/');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client in Next.js\nDESCRIPTION: This snippet shows how to set up the Logto configuration for a Next.js application. It includes the necessary parameters such as appId, appSecret, endpoint, baseUrl, and cookie settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoNextConfig } from '@logto/next';\n\nexport const logtoConfig: LogtoNextConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // 예: http://localhost:3001\n  baseUrl: '<your-nextjs-app-base-url>', // 예: http://localhost:3000\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in TypeScript\nDESCRIPTION: Demonstrates how to retrieve an access token using the Logto client library. The code makes an asynchronous call to get an access token for a specific API endpoint URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst token = await logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Rails Controller\nDESCRIPTION: This snippet shows how to initialize the Logto client within a Rails controller. It sets up the client with configuration, navigation function for redirects, and session storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\nclass SampleController < ApplicationController\n  before_action :initialize_logto_client\n\n  private\n\n  def initialize_logto_client\n    @client = LogtoClient.new(\n      config: LogtoClient::Config.new(\n        # ...你的配置\n      ),\n      # 允许客户端重定向到其他主机（即你的 Logto 租户）\n      navigate: ->(uri) { redirect_to(uri, allow_other_host: true) },\n      # 控制器可以访问会话对象\n      storage: LogtoClient::SessionStorage.new(session)\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Next.js\nDESCRIPTION: Creates and exports a LogtoClient instance with application credentials and configuration. It requires the app ID, secret, Logto endpoint, and cookie settings for secure authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // E.g. http://localhost:3001\n  baseUrl: 'http://localhost:3000',\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getAccessToken for OAuth Social Connector\nDESCRIPTION: TypeScript implementation of getAccessToken method that exchanges authorization code for access token\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/develop-your-connector/implement-connectors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAccessToken = async (config: GithubConfig, code: string) => {\n  const { clientId: client_id, clientSecret: client_secret } = config;\n\n  const httpResponse = await got.post({\n    url: accessTokenEndpoint,\n    json: {\n      client_id,\n      client_secret,\n      code,\n    },\n    timeout: defaultTimeout,\n  });\n\n  const result = accessTokenResponseGuard.safeParse(qs.parse(httpResponse.body));\n\n  if (!result.success) {\n    throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n  }\n\n  const { access_token: accessToken } = result.data;\n\n  assert(accessToken, new ConnectorError(ConnectorErrorCodes.SocialAuthCodeInvalid));\n\n  return { accessToken };\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Go\nDESCRIPTION: This code snippet demonstrates how to obtain an access token using the Logto client. It takes a target API URL as an argument and returns an access token along with any potential error. This token can be used to authenticate requests to the specified API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := logtoClient.GetAccessToken(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Route in Flask with Logto\nDESCRIPTION: This code snippet shows how to create a sign-out route in a Flask application using Logto. It cleans up both the Python session and the Logto session, then redirects the user to the home page after a successful sign-out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-out\")\nasync def sign_out():\n    return redirect(\n        # Leite den Benutzer nach einer erfolgreichen Abmeldung zur Startseite um\n        await client.signOut(postLogoutRedirectUri=\"${defaultBaseUrl}\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out with Logto in React\nDESCRIPTION: This snippet demonstrates how to use the Logto hooks 'useHandleSignInCallback()' and 'useLogto()' to manage authentication flow in a React component. It shows conditional rendering based on authentication status and handles sign-in and sign-out actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return isAuthenticated ? (\n    <button onClick={signOut}>Sign Out</button>\n  ) : (\n    <button onClick={() => signIn('http://localhost:3000/callback')}>Sign In</button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Access Tokens and Claims with Logto Flask Client\nDESCRIPTION: Shows two approaches for working with access tokens: directly retrieving the access token string using getAccessToken(), and extracting token claims using getAccessTokenClaims(). Both methods require specifying the target API URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naccessToken = await client.getAccessToken(\"https://shopping.your-app.com/api\")\n# ou\nclaims = await client.getAccessTokenClaims(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Audience Validator for Spring Security\nDESCRIPTION: Java implementation of OAuth2TokenValidator to validate the audience claim in JWTs and optionally check for required scopes for role-based access control.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// path/to/project/src/main/java/io/logto/springboot/sample/validator/AudienceValidator.java\npackage io.logto.springboot.sample.validator;\n\nimport org.springframework.security.oauth2.core.OAuth2Error;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidator;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\nimport org.springframework.security.oauth2.jwt.Jwt;\n\npublic class AudienceValidator implements OAuth2TokenValidator<Jwt> {\n\n    private final String audience;\n\n    public AudienceValidator(String audience) {\n        this.audience = audience;\n    }\n\n    @Override\n    public OAuth2TokenValidatorResult validate(Jwt jwt) {\n        if (!jwt.getAudience().contains(audience)) {\n            return OAuth2TokenValidatorResult.failure(new OAuth2Error(\"invalid_token\", \"Required audience not found\", null));\n        }\n\n\t      // Optional: For RBAC validate the scopes of the JWT.\n\t      String scopes = jwt.getClaimAsString(\"scope\");\n\t      if (scopes == null || !scopes.contains(\"read:profile\")) {\n\t          return OAuth2TokenValidatorResult.failure(new OAuth2Error(\"invalid_token\", \"Insufficient permission\", null));\n\t      }\n\n        return OAuth2TokenValidatorResult.success();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Organization Token Handler Component\nDESCRIPTION: A client-side React component that provides a button interface for requesting organization tokens. The component handles the token retrieval interaction and displays the result in the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetOrganizationToken: () => Promise<string>;\n};\n\nconst GetOrganizationToken = ({ onGetOrganizationToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetOrganizationToken();\n        console.log(token);\n      }}\n    >\n      Get organization token (see console log)\n    </button>\n  );\n};\n\nexport default GetOrganizationToken;\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Next.js Component\nDESCRIPTION: This code shows how to access additional claims, such as email, in a Next.js component after configuring additional scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function Home() {\n  const { claims: { email } = {}, } = await getLogtoContext(logtoConfig);\n\n  return (\n    <div>\n      {email && <p>Email: {email}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional User Claims in Express\nDESCRIPTION: Shows how to access additional user claims like email after configuring the required scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  response.end(`User email: ${req.user.claims.email}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Azure AD Configuration Template for Logto\nDESCRIPTION: A markdown table showing the required configuration parameters for connecting Logto to Microsoft Azure AD. It specifies the parameter names and their data types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/integrations/social/azure-ad/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name          | Type   |\n| ------------- | ------ |\n| clientId      | string |\n| clientSecret  | string |\n| tenantId      | string |\n| cloudInstance | string |\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto for React Native with Custom Scopes\nDESCRIPTION: Sets up a LogtoConfig object for React Native authentication with Logto. Includes the application ID, endpoint URL, custom permission scopes, and API resource endpoints that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In Button Component\nDESCRIPTION: Creates a client-side sign-in button component that handles authentication initiation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignIn: () => Promise<void>;\n};\n\nconst SignIn = ({ onSignIn }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignIn();\n      }}\n    >\n      Anmelden\n    </button>\n  );\n};\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Blazor AuthorizeView\nDESCRIPTION: This snippet demonstrates how to display user information within an AuthorizeView component in a Blazor application. It shows the user's name if available, or a default message if the name is unknown.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_fetch-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n<AuthorizeView>\n    <Authorized>\n        @* Vista de inicio de sesión *@\n        @* ... *@\n        <p>Has iniciado sesión como @(@User?.Profile?.Name ?? \"(nombre desconocido)\").</p>\n    </Authorized>\n    @* ... *@\n</AuthorizeView>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token Using Logto Server Actions in Next.js (TypeScript)\nDESCRIPTION: This snippet implements the Home component in a Next.js application. It uses the getAccessToken function from @logto/next/server-actions to retrieve an access token for a specific API endpoint by passing in the logtoConfig and the API URL. The handler is provided as a prop to the GetAccessToken component. Dependencies include @logto/next/server-actions, React, and the custom logtoConfig. The expected input is an API URL passed to getAccessToken; the output is an access token. This snippet is intended for use within a Next.js project using the App Router and server actions architecture.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAccessToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetAccessToken from './get-access-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetAccessToken\n        onGetAccessToken={async () => {\n          'use server';\n\n          return getAccessToken(logtoConfig, 'https://shopping.your-app.com/api');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in PHP\nDESCRIPTION: This snippet demonstrates how to instantiate a LogtoClient with custom scopes and API resources. The configuration includes shopping and store-related scopes for read/write operations and specifies the corresponding API resource endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"], // スコープを追加\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // API リソースを追加\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Access Tokens with Logto in React Native\nDESCRIPTION: This component demonstrates how to obtain an access token for a specific API resource using the Logto React Native SDK. It checks the authentication status and fetches the token when the user is authenticated, storing it in component state for display or further use.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\n\nconst AccessToken = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        // highlight-start\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        // highlight-end\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Authentication with Logto\nDESCRIPTION: This snippet demonstrates how to set up authentication in an Angular application using Logto. It includes configuration for HTTP client and custom authentication settings with specific resource and scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        scopes: ['openid', 'profile', 'offline_access', 'read', 'write'],\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Logto Client - TypeScript\nDESCRIPTION: This TypeScript/TSX snippet demonstrates how to asynchronously fetch user profile information using the Logto client and log the result to the console. The logtoClient instance must be correctly initialized and authenticated prior to calling fetchUserInfo. The fetchUserInfo method returns a promise resolved with the user object, which is then printed. Inputs: none; Output: userInfo object logged to the console. Ensure appropriate error handling for production environments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_fetch-userinfo-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\nconsole.log(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Options in C#\nDESCRIPTION: Configures Logto authentication service by setting the resource URL and defining access scopes. The code specifies the API endpoint and requests various permission scopes including openid, profile, offline access, and read/write capabilities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Resource = \"https://shopping.your-app.com/api\";\n  options.Scopes = new string[] {\n    \"openid\",\n    \"profile\",\n    \"offline_access\",\n    \"read\",\n    \"write\"\n  };\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Options in .NET\nDESCRIPTION: Configuration of Logto authentication service with custom resource URL and required OAuth scopes. Sets up the authentication middleware with specific resource endpoint and required access scopes including openid, profile, offline_access, read, and write permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Resource = \"https://shopping.your-app.com/api\";\n  options.Scopes = new string[] {\n    \"openid\",\n    \"profile\",\n    \"offline_access\",\n    \"read\",\n    \"write\"\n  };\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out with Logto in Capacitor (TypeScript)\nDESCRIPTION: This snippet shows how to implement the sign-out functionality in a Capacitor app using Logto. It demonstrates signing out the user and verifying the authentication status afterward.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst onClick = async () => {\n  await logtoClient.signOut();\n  console.log(await logtoClient.isAuthenticated()); // false\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler in SvelteKit (TypeScript)\nDESCRIPTION: This code snippet shows how to set up the Logto authentication handler in a SvelteKit application. It configures custom scopes and resources for API access control.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info Using Logto Client in TypeScript\nDESCRIPTION: This snippet asynchronously retrieves the authenticated user's profile information with the Logto client using the fetchUserInfo method. It then outputs the result to the console for verification or further processing. Dependencies include an initialized logtoClient instance and a user authenticated session. The fetchUserInfo method returns a promise that resolves to user profile data, so proper error handling and authentication state checks are recommended for production use.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_fetch-userinfo-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\nconsole.log(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Security for JWT Validation with ES384 Algorithm\nDESCRIPTION: Java configuration class for Spring Security that sets up JWT decoding with ES384 algorithm support, audience validation, and configures protected API routes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// path/to/project/src/main/java/io/logto/springboot/sample/configuration/SecurityConfiguration.java\npackage io.logto.springboot.sample.configuration;\n\nimport com.nimbusds.jose.JOSEObjectType;\nimport com.nimbusds.jose.proc.DefaultJOSEObjectTypeVerifier;\nimport com.nimbusds.jose.proc.SecurityContext;\nimport io.logto.springboot.sample.validator.AudienceValidator;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;\nimport org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidator;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.JwtValidators;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\nimport org.springframework.security.web.DefaultSecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration {\n\n    @Value(\"${logto.audience}\")\n    private String audience;\n\n    @Value(\"${spring.security.oauth2.resourceserver.jwt.issuer-uri}\")\n    private String issuer;\n\n    @Value(\"${spring.security.oauth2.resourceserver.jwt.jwk-set-uri}\")\n    private String jwksUri;\n\n    @Bean\n    public JwtDecoder jwtDecoder() {\n        NimbusJwtDecoder jwtDecoder = NimbusJwtDecoder.withJwkSetUri(jwksUri)\n                // Logto uses the ES384 algorithm to sign the JWTs by default.\n                .jwsAlgorithm(ES384)\n                // The decoder should support the token type: Access Token + JWT.\n                .jwtProcessorCustomizer(customizer -> customizer.setJWSTypeVerifier(\n                        new DefaultJOSEObjectTypeVerifier<SecurityContext>(new JOSEObjectType(\"at+jwt\"))))\n                .build();\n\n        jwtDecoder.setJwtValidator(new DelegatingOAuth2TokenValidator<>(\n                new AudienceValidator(audience),\n                new JwtIssuerValidator(issuer),\n                new JwtTimestampValidator()));\n\n        return jwtDecoder;\n    }\n\n    @Bean\n    public DefaultSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n         http\n          .securityMatcher(\"/api/**\")\n          .oauth2ResourceServer(oauth2 -> oauth2\n              .jwt(Customizer.withDefaults()))\n          .authorizeHttpRequests(requests -> requests\n              // Allow all requests to the public APIs.\n              .requestMatchers(\"/api/.wellknown/**\").permitAll()\n              // Require jwt token validation for the protected APIs.\n              .anyRequest().authenticated());\n\n        return http.build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JWT Claims for Impersonation\nDESCRIPTION: A TypeScript implementation of the getCustomJwtClaims() function that extracts context from a token exchange grant and adds it to the final access token as custom claims under the impersonation_context property.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst getCustomJwtClaims = async ({ token, context, environmentVariables }) => {\n  if (context.grant?.type === 'urn:ietf:params:oauth:grant-type:token-exchange') {\n    const { ticketId, reason, supportEngineerId } = context.grant.subjectTokenContext;\n    return {\n      impersonation_context: {\n        ticket_id: ticketId,\n        reason: reason,\n        support_engineer: supportEngineerId,\n      },\n    };\n  }\n  return {};\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in React Component\nDESCRIPTION: A React component that uses the Logto authentication hook to manage authentication state and retrieve access tokens. The component checks authentication status and fetches an access token for a specific API endpoint when authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in PHP\nDESCRIPTION: This code initializes a LogtoClient instance with custom configuration including scopes and API resources. The scopes define permission levels for different operations, while resources specify the API endpoints that will be accessed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"], // Ajouter des portées\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Ajouter des ressources API\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In with Logto in Capacitor\nDESCRIPTION: This code demonstrates how to implement the sign-in process using Logto in a Capacitor app. It includes initiating the sign-in, checking authentication status, and retrieving ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst onClick = async () => {\n  await logtoClient.signIn('com.example.app://callback');\n  console.log(await logtoClient.isAuthenticated()); // true\n  console.log(await logtoClient.getIdTokenClaims()); // { sub: '...', ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser SDK in HTML with JavaScript\nDESCRIPTION: Imports the Logto Browser SDK from a CDN and creates a client instance with the required configuration. The client is attached to the window object for global access and configured with authentication endpoint, application ID, permission scopes, and API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Import `@logto/browser` SDK from the jsdelivr CDN\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-application-id>',\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Scopes and Resources - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new LogtoClient instance in JavaScript, specifying custom scopes and resource endpoints as part of the configuration. The code expects the '@logto/browser' package to be installed and accepts alternate package names through a props object for documentation flexibility. Key parameters include 'scopes' (array of permission strings) and 'resources' (array of resource API URLs), enabling granular control over API access permissions when authenticating users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport LogtoClient from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API 리소스를 추가하세요\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Webflow Head Code\nDESCRIPTION: This code snippet initializes the Logto client by importing the browser SDK from jsdelivr CDN and assigns it to the window object for global access across the Webflow site.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_init-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // jsdelivr CDN から `@logto/browser` SDK をインポート\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  // `logtoClient` インスタンスを window オブジェクトに割り当て、\n  // 他のページでのグローバルな使用を可能にする\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>', // 例: http://localhost:3001\n    appId: '<your-application-id>',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Enum Scopes in Dart\nDESCRIPTION: Shows how to create a LogtoConfig instance using the LogtoUserScope enum values for email and phone permissions, providing type safety.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_scopes-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [LogtoUserScope.email.value, LogtoUserScope.phone.value],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in Logto TypeScript Client\nDESCRIPTION: This snippet shows how to configure API resources in the Logto client. It adds multiple API endpoints to the resources array in the logtoConfig object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Ajouter des ressources API\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Network Request in React\nDESCRIPTION: This snippet demonstrates how to use the fetchUserInfo method from the useLogto hook to retrieve user information that requires a network request, such as custom data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst { fetchUserInfo } = useLogto();\n\nconst userInfo = await fetchUserInfo();\n\n// Maintenant, vous pouvez accéder à la revendication `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Handle Function with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the Logto handle function with custom scopes and resources. It sets up authentication middleware for a server application, specifying access permissions for shopping and store-related operations across different API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Home Page with Authentication State Display\nDESCRIPTION: This snippet implements a simple home page that displays the user's authentication state. It shows different content depending on whether the user is signed in or not, with appropriate sign-in and sign-out links.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (request: Request, response) => {\n  const { user } = request;\n  response.setHeader('content-type', 'text/html');\n\n  if (user) {\n    response.end(\n      `<h1>Hello Logto</h1><p>Signed in as ${JSON.stringify(\n        user\n      )}, <a href=\"/sign-out\">Sign Out</a></p>`\n    );\n  } else {\n    response.end(`<h1>Hello Logto</h1><p><a href=\"/sign-in\">Sign In</a></p>`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Nuxt.js Template\nDESCRIPTION: This snippet shows how to display user information in a Nuxt.js template using the useLogtoUser() composable. It also includes a simple sign-in/out button.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- highlight-start -->\n  <!-- 로그인 시 사용자 정보 표시 -->\n  <ul v-if=\"Boolean(user)\">\n    <li v-for=\"(value, key) in user\"><b>{{ key }}:</b> {{ value }}</li>\n  </ul>\n  <!-- highlight-end -->\n  <!-- 로그인 및 로그아웃을 위한 간단한 버튼 -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Logto Scopes in Kotlin Configuration\nDESCRIPTION: This Kotlin snippet shows how to configure the `scopes` property when creating a `LogtoConfig` object. It initializes the `scopes` with a list containing 'email' and 'phone', indicating the user information the application requests access to during authentication. An alternative using predefined constants (e.g., `UserScope.EMAIL`) is also mentioned.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // or `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page with Authentication in Next.js App Router\nDESCRIPTION: This code snippet shows how to implement the home page of a Next.js App Router application with Logto authentication. It uses getLogtoContext to check the authentication state and renders either a Sign-In or Sign-Out button accordingly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext, signIn, signOut } from '@logto/next/server-actions';\nimport SignIn from './sign-in';\nimport SignOut from './sign-out';\nimport { logtoConfig } from './logto';\n\nconst Home = () => {\n  const { isAuthenticated, claims } = await getLogtoContext(logtoConfig);\n\n  return (\n    <nav>\n      {isAuthenticated ? (\n        <p>\n          Hello, {claims?.sub},\n          <SignOut\n            onSignOut={async () => {\n              'use server';\n\n              await signOut(logtoConfig);\n            }}\n          />\n        </p>\n      ) : (\n        <p>\n          <SignIn\n            onSignIn={async () => {\n              'use server';\n\n              await signIn(logtoConfig);\n            }}\n          />\n        </p>\n      )}\n    </nav>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Logto configuration for a Capacitor project, specifically including the Organizations user scope. It imports necessary types from the @logto/capacitor package and defines a LogtoConfig object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Scopes and Resources in React TSX\nDESCRIPTION: Shows how to configure Logto authentication by defining scopes for read/write permissions and specifying API resource endpoints. The configuration is typed using LogtoConfig interface from the @logto/react package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Scopes in Logto SDK - Go\nDESCRIPTION: This snippet demonstrates how to initialize a LogtoConfig object in Go with custom authentication scopes, specifically adding UserScopeOrganizations to define access rights. Requires the Logto Go client library (import as client) and the core dependency for scope constants. Inputs include configuration fields for the client configuration struct, and outputs a configured LogtoConfig object for use in authentication workflows. Ensure that the dependencies client and core are imported and available in your Go project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Scopes: []string{core.UserScopeOrganizations},\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Auth Status and Getting Access Token with Logto\nDESCRIPTION: Demonstrates checking if a user is authenticated using Logto client's isAuthenticated() method, and if authenticated, retrieves an access token using getAccessToken(). The code uses async/await pattern for handling asynchronous operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nif (isAuthenticated) {\n  (async () => {\n    const token = await logtoClient.getAccessToken();\n    console.log(token);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Method in CustomAuthManager\nDESCRIPTION: Implements the sign-out method using Logto SDK to clear the authentication state and update the current user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture signOut() async {\n    await logtoClient.signOut();\n\n    flutterFlowAuthAuthUserSubject.add(\n      FlutterFlowAuthAuthUser(loggedIn: false),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Info with Logto Client in Dart\nDESCRIPTION: This snippet shows how to fetch user information using the Logto client in a Flutter app. It uses an async function to retrieve the user info and print it to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_fetch-userinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal userInfo = await logtoClient.getUserInfo();\nprint(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto with Multiple API Resources in Vue\nDESCRIPTION: This snippet demonstrates how to use the createLogto function from @logto/vue to set up Logto authentication in a Vue application. It showcases the configuration of multiple API resources that the app will interact with.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Authorization URL for Social Connection in Logto\nDESCRIPTION: This snippet demonstrates how to request an authorization URL for linking a new social connection to a user account. It requires the connector ID, redirect URI, and a state parameter for CSRF protection.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://[tenant-id].logto.app/api/verifications/social \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'content-type: application/json' \\\n  --data-raw '{\"connectorId\":\"...\",\"redirectUri\":\"...\",\"state\":\"...\"}'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FetchOrganizationTokenForUser Component in React\nDESCRIPTION: This snippet imports the necessary components and uses the FetchOrganizationTokenForUser component with specific props. It demonstrates how to set up the component for fetching an organization token for a user in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Scopes and Resources in Go\nDESCRIPTION: This snippet illustrates how to set up a LogtoConfig struct with specific scopes and resources. It defines read and write scopes, and specifies two API resource URLs for the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...otros configs\n    // highlight-start\n    Scopes:    []string{\"read\", \"write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Retrieving Organization Token with Logto in JavaScript\nDESCRIPTION: This snippet demonstrates how to check authentication status, retrieve ID token claims, and obtain an organization token using the Logto client. It imports the UserScope from Logto browser package, checks if the user is authenticated, logs the ID token claims and organization IDs, and then retrieves an access token for the first organization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UserScope } from 'https://esm.run/@logto/browser';\n\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\n(async () => {\n  if (!isAuthenticated) {\n    return;\n  }\n  const claims = await logtoClient.getIdTokenClaims();\n\n  console.log('Reclamos del token de ID:', claims);\n  console.log('IDs de organizaciones:', claims.organizations);\n\n  // Asumiendo que hay al menos una organización, tomemos la primera\n  const organizationId = claims.organizations[0];\n  const token = await logtoClient.getOrganizationToken(organizationId);\n\n  console.log('Token de acceso de la organización:', token);\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Tokens with Logto Browser Client\nDESCRIPTION: Demonstrates checking authentication status, retrieving ID token claims including organization IDs, and obtaining an organization-specific access token. Uses async/await pattern and includes error handling through early return.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UserScope } from 'https://esm.run/@logto/browser';\n\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\n(async () => {\n  if (!isAuthenticated) {\n    return;\n  }\n  const claims = await logtoClient.getIdTokenClaims();\n\n  console.log('ID token claims:', claims);\n  console.log('Organization IDs:', claims.organizations);\n\n  // Assuming there's at least one organization, let's take the first one\n  const organizationId = claims.organizations[0];\n  const token = await logtoClient.getOrganizationToken(organizationId);\n\n  console.log('Organization access token:', token);\n})();\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in Ruby\nDESCRIPTION: This code initializes a LogtoClient object with custom configuration. It specifically demonstrates how to add multiple API resources to the client configuration. The resources are specified as an array of URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...autres configurations\n    # highlight-next-line\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"] # Ajouter des ressources API\n  ),\n  # ...autres configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Index Route with Authentication in Express\nDESCRIPTION: Implementation of the index route in Express using the authentication middleware. This route displays different content based on whether the user is authenticated or not.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/', withAuth({ requireAuth: false }), function (req, res, next) {\n  res.render('index', { auth: Boolean(req.auth) });\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Flutter using Logto SDK\nDESCRIPTION: This snippet demonstrates how to display user information in a Flutter app using the Logto SDK. It uses the logtoClient.idTokenClaims getter to access user claims and displays them in a ListView.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nListView(\n  children: [\n    Text('ID: ${logtoClient.idTokenClaims?.sub ?? 'N/A'}'),\n    Text('Name: ${logtoClient.idTokenClaims?.name ?? 'N/A'}'),\n    Text('Email: ${logtoClient.idTokenClaims?.email ?? 'N/A'}'),\n    // Add more claims as needed\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Session Storage in Go\nDESCRIPTION: Implements a simple in-memory session storage for Logto authentication in a Go web application. This storage handles session creation, retrieval, and deletion.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype SessionStorage struct {\n    sessions map[string]string\n    mutex    sync.RWMutex\n}\n\nfunc NewSessionStorage() *SessionStorage {\n    return &SessionStorage{\n        sessions: make(map[string]string),\n    }\n}\n\nfunc (s *SessionStorage) GetSession(key string) (string, bool) {\n    s.mutex.RLock()\n    defer s.mutex.RUnlock()\n    value, ok := s.sessions[key]\n    return value, ok\n}\n\nfunc (s *SessionStorage) SetSession(key, value string) {\n    s.mutex.Lock()\n    defer s.mutex.Unlock()\n    s.sessions[key] = value\n}\n\nfunc (s *SessionStorage) DeleteSession(key string) {\n    s.mutex.Lock()\n    defer s.mutex.Unlock()\n    delete(s.sessions, key)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Tokens with Logto Client in Python Flask\nDESCRIPTION: Code demonstrating two methods for working with access tokens in a Flask application. The first approach gets the raw access token string for a specific API resource, while the second retrieves the decoded token claims which can be used for validation or extraction of user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naccessToken = await client.getAccessToken(\"https://shopping.your-app.com/api\")\n# 或者\nclaims = await client.getAccessTokenClaims(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Provider in NextAuth.js with TypeScript\nDESCRIPTION: Sets up a NextAuth handler with Logto configured as an authentication provider. The configuration specifies 'openid offline_access profile email' as the required scopes for authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      // ... other options\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      // ... other options\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CustomAuthManager Class with Logto Configuration\nDESCRIPTION: Defines a CustomAuthManager class with LogtoClient initialization and configuration. The configuration includes placeholders for app ID and Logto endpoint that need to be replaced with actual values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomAuthManager {\n  late LogtoClient logtoClient;\n\n  final logtoConfig = const LogtoConfig(\n      appId: '<YOUR-APP-ID>',\n      endpoint: '<YOUR-LOGTO-ENDPOINT>');\n\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in Nuxt.js (TypeScript)\nDESCRIPTION: This code snippet shows how to configure Logto in a Nuxt.js application's configuration file. It sets custom scopes for read and write permissions, and defines specific API resources that the application will access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Scope to Logto Vue SDK Initialization in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the Logto Vue SDK (`@logto/vue`) when integrating it into a Vue application using `app.use`. It specifically highlights adding the `UserScope.Organizations` enum value to the `scopes` array within the configuration object passed to `createLogto`. This step is necessary to enable organization-related features and request corresponding permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"main.ts\"\nimport { createLogto, UserScope } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [UserScope.Organizations],\n  // highlight-end\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Express Config\nDESCRIPTION: This code snippet shows how to configure additional scopes in the Logto Express configuration. It adds email and phone scopes to request additional user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig, UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone], // Füge bei Bedarf weitere Berechtigungen hinzu\n  // ...andere Konfigurationen\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express Scopes in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Logto configuration object for an Express application. It specifically shows how to define the 'scopes' property, which determines the permissions requested during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  scopes: ['email', 'phone'],\n};\n```\n\n----------------------------------------\n\nTITLE: Protected User Info Route in Flask\nDESCRIPTION: Implements a protected route that displays user information using the authentication decorator. Handles errors and returns formatted user data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/protected/userinfo\")\n@authenticated(shouldRedirect=True, fetchUserInfo=True)\nasync def protectedUserinfo():\n    try:\n        return (\n            \"<h2>User info</h2>\"\n            + g.user.model_dump_json(indent=2, exclude_unset=True).replace(\"\\n\", \"<br>\")\n            + navigationHtml\n        )\n    except LogtoException as e:\n        return \"<h2>Error</h2>\" + str(e) + \"<br>\" + navigationHtml\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Client in Rails Controller\nDESCRIPTION: Example of initializing Logto client within a Rails controller, showing proper configuration with redirect handling and session storage setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\nclass SampleController < ApplicationController\n  before_action :initialize_logto_client\n\n  private\n\n  def initialize_logto_client\n    @client = LogtoClient.new(\n      config: LogtoClient::Config.new(\n        # ...votre configuration\n      ),\n      # Permettre au client de rediriger vers d'autres hôtes (c'est-à-dire votre locataire Logto)\n      navigate: ->(uri) { redirect_to(uri, allow_other_host: true) },\n      # Le contrôleur a accès à l'objet session\n      storage: LogtoClient::SessionStorage.new(session)\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Attaching Passport Middleware in TypeScript\nDESCRIPTION: This snippet shows how to initialize and attach the Passport middleware to your application. It imports the previously defined initPassport function and uses it to set up Passport authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport initPassport from './passport';\n\n// ... 他のコード\ninitPassport();\n// ... 他のコード\napp.use(passport.authenticate('session'));\n// ... 他のコード\n```\n\n----------------------------------------\n\nTITLE: Implementing Organizations Component with Logto Authentication in React\nDESCRIPTION: This React component uses the Logto authentication library to fetch and display user's organization IDs. It also provides a button for each organization to fetch its specific token. The component utilizes React hooks for state management and side effects.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID token claims', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  console.log('raw token', await getOrganizationToken(organizationId));\n                }}\n              >\n                fetch token (see console)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Adding Machine-to-Machine Applications as Bots to Organizations in Bash\nDESCRIPTION: This curl command demonstrates how to add M2M applications to an organization as bots. It requires an access token with appropriate permissions and accepts an array of application IDs in the request body.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/organization-experience/organization-management.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X POST https://[tenant_id].logto.app/api/organizations/{id}/applications \\\n -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\"applicationIds\":[\"botAppId\"]}'\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Scope in Spring Security OAuth2 Client Configuration\nDESCRIPTION: This snippet demonstrates how to add a custom scope 'urn:logto:scope:organizations' to the existing default scopes in the application.properties file for a Spring Security OAuth2 client registration with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nspring.security.oauth2.client.registration.logto.scope=openid,profile,offline_access,urn:logto:scope:organizations\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Custom Scopes in Go\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig struct with custom scopes. The code sets the 'Scopes' field to include 'email' and 'phone' scopes, which will be requested during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler with Organization Scope in SvelteKit\nDESCRIPTION: This code sets up the Logto authentication handler in a SvelteKit application by importing necessary functions and configuring the handle function with organization scopes. It demonstrates how to integrate Logto authentication into the SvelteKit request handling pipeline.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto, UserScope } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: [UserScope.Organizations],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication Decorator to Flask API Endpoints\nDESCRIPTION: Example of applying the requires_auth decorator to a Flask API endpoint. It demonstrates how to configure cross-origin resource sharing (CORS) headers and secure the endpoint by requiring authentication for all requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_cors import cross_origin\n\nAPP = Flask(__name__)\n\n@APP.route(\"/user/info\")\n@cross_origin(headers=[\"Content-Type\", \"Authorization\"])\n@requires_auth\ndef api:\n# Deine API-Logik\n```\n\n----------------------------------------\n\nTITLE: Protected User Information Route in Flask with Authentication\nDESCRIPTION: This code snippet demonstrates how to create a protected Flask route that displays user information. It uses the authenticated decorator to ensure that only authenticated users can access the route and fetches user information before rendering the page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/protected/userinfo\")\n@authenticated(shouldRedirect=True, fetchUserInfo=True)\nasync def protectedUserinfo():\n    try:\n        return (\n            \"<h2>User info</h2>\"\n            + g.user.model_dump_json(indent=2, exclude_unset=True).replace(\"\\n\", \"<br>\")\n            + navigationHtml\n        )\n    except LogtoException as e:\n        return \"<h2>Error</h2>\" + str(e) + \"<br>\" + navigationHtml\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button in Next.js with Auth.js\nDESCRIPTION: This code snippet shows how to implement a sign-in button component using Auth.js in a Next.js application. It uses the signIn function from Auth.js to initiate the sign-in process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from '@/auth';\n\nexport default function SignIn() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signIn('logto');\n      }}\n    >\n      <button type=\"submit\">Iniciar sesión</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token for API Resources in Go\nDESCRIPTION: Retrieves an access token for a specific API resource in a Go web application using Logto. This token can be used to authenticate requests to the protected API.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\naccessToken, err := logtoClient.GetAccessToken(r.Context(), \"https://your-api-resource.com\")\nif err != nil {\n    // Handle error\n}\n// Use the accessToken to make authenticated requests to your API\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Logto Client\nDESCRIPTION: Demonstrates how to use the Logto client to fetch user information asynchronously. The code uses await to handle the Promise returned by fetchUserInfo() and logs the result to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_fetch-userinfo-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\nconsole.log(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Extension Popup\nDESCRIPTION: JavaScript code to create a new Logto client instance in the extension popup or reuse the one from the service worker.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/chrome-extension';\n\nconst logtoClient = new LogtoClient({\n  endpoint: '<your-logto-endpoint>'\n  appId: '<your-logto-app-id>',\n});\n\n// Ou réutilisez l'instance logtoClient créée dans le script d'arrière-plan\nimport { logtoClient } from './service-worker.js';\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser Client with Organizations Scope in JavaScript\nDESCRIPTION: This code initializes a Logto client for browser applications. It imports the LogtoClient and UserScope from the Logto browser SDK using a CDN. The client is then configured with the Organizations scope, allowing for organization-related operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from 'https://esm.run/@logto/browser';\n\nwindow.logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication and Retrieving Access Token with Logto Client in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a user is authenticated using the Logto client and, if authenticated, retrieve an access token. It uses async/await for handling asynchronous operations and logs the token to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nif (isAuthenticated) {\n  (async () => {\n    const token = await logtoClient.getAccessToken();\n    console.log(token);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to asynchronously retrieve an access token using the Logto client. It specifies a target API endpoint for which the token is requested. This operation is crucial for authenticating and authorizing API requests in a Logto-integrated application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in React Native\nDESCRIPTION: This snippet shows how to create a LogtoConfig object for use with the Logto library in a React Native application. It sets up essential properties such as the application ID, Logto endpoint, scopes, and resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['read', 'write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Email/Phone Sign-up Screen\nDESCRIPTION: This snippet demonstrates how to direct users to a specific sign-up form that accepts either email or phone number identifiers by configuring both 'first_screen' and 'identifier' parameters in a cURL request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/authentication-parameters/first-screen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location \\\n--request GET 'https://<your-tenant>.logto.app/oidc/auth?client_id=<client_id>&...&first_screen=identifier:register&identifier=email phone'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Swift Client\nDESCRIPTION: This code snippet demonstrates how to use the Logto Swift client to asynchronously obtain an access token for a specific API resource. It uses Swift's async/await syntax for handling asynchronous operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet accessToken = try await client.getAccessToken(for: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Android ViewModel\nDESCRIPTION: This snippet shows how to retrieve and display user information using LogtoClient in an Android ViewModel. It includes methods for getting ID token claims and observing the data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LogtoViewModel(application: Application) : AndroidViewModel(application) {\n    // ...autres codes\n\n    // Ajouter une donnée en direct pour observer les revendications du jeton d'identifiant\n    private val _idTokenClaims = MutableLiveData<IdTokenClaims>()\n    val idTokenClaims: LiveData<IdTokenClaims>\n        get() = _idTokenClaims\n\n    fun getIdTokenClaims() {\n        logtoClient.getIdTokenClaims { logtoException, idTokenClaims ->\n            logtoException?.let { _logtoException.postValue(it) } ?: _idTokenClaims.postValue(idTokenClaims)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims via getServerSideProps in Next.js\nDESCRIPTION: Server-side implementation for fetching and displaying user claims using Next.js getServerSideProps. The component receives user data as props and displays claims in a table format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoContext } from '@logto/next';\nimport { logtoClient } from '../../libraries/logto';\n\ntype Props = {\n  user: LogtoContext;\n};\n\nconst Home = ({ user }: Props) => {\n  const claims = useMemo(() => {\n    if (!user.isAuthenticated || !user.claims) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h2>Claims:</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(user.claims).map(([key, value]) => (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>{String(value)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }, [user]);\n\n  return (\n    <div>\n      {claims}\n    </div>\n  );\n};\n\nexport default Home;\n\nexport const getServerSideProps = logtoClient.withLogtoSsr(async function ({ request }) {\n  const { user } = request;\n\n  return {\n    props: { user },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code exports a logtoConfig object with custom scopes and resources defined. The scopes specify permissions for reading and writing to shopping and store services, while the resources define the API endpoints that will be accessed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in PHP\nDESCRIPTION: This snippet demonstrates how to initialize a LogtoClient instance with the LogtoConfig configuration. It specifically shows how to add multiple API resources URLs to the resources array, which is highlighted as an important configuration parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Add API resources\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in TypeScript\nDESCRIPTION: This snippet initializes a LogtoClient instance with the Organizations user scope enabled. It imports the UserScope enum from the @logto/next package and creates a new LogtoClient with appropriate configuration options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info for Custom Data in Go\nDESCRIPTION: Example of using the FetchUserInfo method to retrieve additional user information such as custom data that requires a network request rather than being available in the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nuserInfo, error := client.FetchUserInfo()\n// Now you can access the claim `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Specifying Logto API Resources in Nuxt Configuration (TypeScript)\nDESCRIPTION: This snippet configures the Logto module in a Nuxt.js application by defining an array of API resource identifiers (URLs) in the `resources` property within the `logto` configuration object inside `nuxt.config.ts`. This ensures that the application requests access tokens scoped for these specific backend APIs during the authentication flow. Requires the `@logto/nuxt` module and Nuxt.js.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 新增 API 資源 (API resources)\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in JavaScript\nDESCRIPTION: This snippet shows how to import the LogtoClient and UserScope from a Logto package and create a new client instance with the Organizations scope. This setup is necessary for applications that need to access organization-related user data or resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-organization-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organisations],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: This snippet demonstrates how to create a LogtoClient instance with a custom configuration. It specifies scopes for read and write permissions, and defines two resource URLs for API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"read\", \"write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Example of Social Identities with Google and Facebook Logins in JSON\nDESCRIPTION: This snippet shows an example of the 'identities' object for a user who has logged in with both Google and Facebook, including user IDs and details from each provider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"facebook\": {\n    \"userId\": \"5110888888888888\",\n    \"details\": {\n      \"id\": \"5110888888888888\",\n      \"name\": \"John Doe\",\n      \"email\": \"johndoe@logto.io\",\n      \"avatar\": \"https://example.com/avatar.png\"\n    }\n  },\n  \"google\": {\n    \"userId\": \"111000000000000000000\",\n    \"details\": {\n      \"id\": \"111000000000000000000\",\n      \"name\": \"John Doe\",\n      \"email\": \"johndoe@gmail.com\",\n      \"avatar\": \"https://example.com/avatar.png\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Authentication with Logto\nDESCRIPTION: This snippet demonstrates how to set up authentication in an Angular application using Logto. It configures the authentication provider with a resource endpoint and defines the required OAuth scopes for authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        scopes: ['openid', 'profile', 'offline_access', 'read', 'write'],\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in SwiftUI with Logto SDK\nDESCRIPTION: This Swift code demonstrates how to implement sign-in and sign-out functionality in a SwiftUI app using Logto SDK. It includes a button that changes based on authentication state and handles sign-in and sign-out operations asynchronously.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Button(\"Sign Out\") {\n          Task { [self] in\n            await client.signOut()\n            isAuthenticated = false\n          }\n        }\n      } else {\n        Button(\"Sign In\") {\n          Task { [self] in\n            do {\n              try await client.signInWithBrowser(redirectUri: \"${props.redirectUris[0] ?? 'io.logto://callback'}\")\n              isAuthenticated = true\n            } catch let error as LogtoClientErrors.SignIn {\n              // サインイン中にエラーが発生しました\n            } catch {\n              // その他のエラー\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Organization Invitation Flow with Mermaid Diagram\nDESCRIPTION: A sequence diagram illustrating the process of inviting members to an organization, from the admin initiating the invitation to the invitee accepting or rejecting it.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/organization-experience/invite-organization-members.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tParticipant U as End user\n  Participant A as Organization admin\n  Participant C as Your multi-organization app\n\tParticipant L as Logto\n\n  A ->> C: Input invitee email and role\n  C ->> L: Create organization invitation with Management API\n  L -->> C: Return invitation ID\n  C ->> C: Compose invitation link with invitation ID\n  C ->> L: Request sending invitation email with invitation link\n  L -->> U: Send invitation email with invitation link\n  U ->> C: Click invitation link and navigate to your landing page,<br /> accept or reject the invitation\n  C ->> L: Update invitation status with Management API\n```\n\n----------------------------------------\n\nTITLE: Creating Logto Client and Handling Authentication State in Go\nDESCRIPTION: Demonstrates how to create a LogtoClient instance for each user request and use it to check authentication status. The code shows integration with Gin framework and session management to display different content based on auth state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_init-logto-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// ...\n\n\trouter.GET(\"/\", func(ctx *gin.Context) {\n\t\t// Create LogtoClient\n\t\tsession := sessions.Default(ctx)\n\t\tlogtoClient := client.NewLogtoClient(\n\t\t\tlogtoConfig,\n\t\t\t&SessionStorage{session: session},\n\t\t)\n\n\t\t// Use Logto to control the content of the home page\n\t\tauthState := \"You are not logged in to this website. :(\"\n\n\t\tif logtoClient.IsAuthenticated() {\n\t\t\tauthState = \"You are logged in to this website! :)\"\n\t\t}\n\n\t\thomePage := `<h1>Hello Logto</h1>` +\n\t\t\t\"<div>\" + authState + \"</div>\"\n\n\t\tctx.Data(http.StatusOK, \"text/html; charset=utf-8\", []byte(homePage))\n\t})\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In and Sign Out with Logto in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement authentication in a web application using Logto's client methods. It shows how to check authentication status, create sign-in and sign-out buttons with appropriate redirect URLs, and attach event listeners to handle authentication actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nconst onClickSignIn = () => {\n  logtoClient.signIn('http://localhost:3000/callback');\n};\nconst onClickSignOut = () => {\n  logtoClient.signOut('http://localhost:3000');\n};\n\nconst button = document.createElement('button');\nbutton.innerHTML = isAuthenticated ? 'Sign Out' : 'Sign In';\nbutton.addEventListener('click', isAuthenticated ? onClickSignOut : onClickSignIn);\n\ndocument.body.appendChild(button);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Resource Endpoints in PHP\nDESCRIPTION: This snippet demonstrates how to initialize a LogtoClient instance in PHP, specifying API resources through the LogtoConfig object. It requires the Logto PHP SDK and any dependencies for client and config classes. The 'resources' parameter accepts an array of API URLs that the client will protect or recognize, and other configuration fields can be set as needed. The snippet is intended for backend PHP applications integrating Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Add API resources\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Organization Token Retrieval in Next.js Home Component\nDESCRIPTION: This server-side component sets up the organization token retrieval using Logto's getOrganizationToken function. It passes the token retrieval function to the GetOrganizationToken component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { getOrganizationToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetOrganizationToken from './get-organization-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetOrganizationToken\n        onGetOrganizationToken={async () => {\n          'use server';\n\n          return getOrganizationToken(logtoConfig, 'organization-id');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Go\nDESCRIPTION: This code snippet demonstrates how to obtain an access token using the Logto client in Go. It calls the GetAccessToken method with a specific API endpoint URL as an argument. The method returns an access token string and an error object for handling potential issues.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := logtoClient.GetAccessToken(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Additional Scopes in Python\nDESCRIPTION: This code shows how to initialize a LogtoClient with additional scopes to request more user information. It specifically requests email and phone scopes in addition to the default ones, which will provide these claims in the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# highlight-next-line\nfrom logto import UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...outras configurações\n        # highlight-start\n        scopes = [\n            UserInfoScope.email,\n            UserInfoScope.phone,\n        ],\n        # highlight-end\n    ),\n    storage=SessionStorage(),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with WeChat Social Plugin in Swift\nDESCRIPTION: Swift code for initializing the LogtoClient with the WeChat social plugin for iOS apps. This connects the Logto authentication system with WeChat's native sign-in capabilities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet logtoClient = LogtoClient(\n  useConfig: config,\n  socialPlugins: [LogtoSocialPluginWechat()]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Functionality in Flutter with Logto\nDESCRIPTION: This snippet demonstrates how to add a sign-out button to a Flutter app and implement the sign-out functionality using Logto. It includes setting up the post-sign-out redirect URI and calling the signOut method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  final postSignOutRedirectUri = 'io.logto//home';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signOutButton = TextButton(\n      onPressed: () async {\n        await logtoClient.signOut(postSignOutRedirectUri);\n        render();\n      },\n      child: const Text('Sign Out'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n            signOutButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Basic Access and ID Tokens in C#\nDESCRIPTION: Demonstrates how to retrieve the basic access token and ID token using the GetTokenAsync method. The access token returned is an opaque token for the userinfo endpoint in OpenID Connect.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_fetch-tokens.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar accessToken = await HttpContext.GetTokenAsync(LogtoParameters.Tokens.AccessToken);\nvar idToken = await HttpContext.GetTokenAsync(LogtoParameters.Tokens.IdToken);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code initializes a LogtoClient instance with specific scopes for read and write operations on shopping and store data, as well as resource URLs for the shopping and store APIs. The configuration allows for fine-grained access control to different parts of the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client with JWT Authentication in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a Supabase client with JWT authentication using user ID. It signs a JWT with the Supabase secret, sets an expiration time, and attaches the token as an Authorization header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js';\nimport { sign } from 'jsonwebtoken';\n\n/\n * Note:\n * You can find the SUPABASE_URL, SUPABASE_ANON_KEY in the same place where you find the JWT Secret.\n */\nconst SUPABASE_URL = process.env.SUPABASE_URL;\nconst SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;\n\nconst SUPABASE_JWT_SECRET = process.env.SUPABASE_JWT_SECRET;\n\nexport const getSupabaseClient = (userId) => {\n  const jwtPayload = {\n    userId,\n  };\n\n  const jwt = sign(jwtPayload, SUPABASE_JWT_SECRET, {\n    expiresIn: '1h', // Just for demonstration\n  });\n\n  const client = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n    global: {\n      headers: {\n        Authorization: `Bearer ${jwt}`,\n      },\n    },\n  });\n\n  return client;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Authentication with Resource and Scopes in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `ApplicationConfig` for an Angular application within `app.config.ts`. It includes providers for `HttpClient` (using fetch) and authentication (`provideAuth`). The `provideAuth` configuration uses `buildAngularAuthConfig` to specify the target API resource endpoint (`resource`) and the required OAuth scopes (`scopes`) such as `openid`, `profile`, `offline_access`, `read`, and `write` needed for accessing protected resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        scopes: ['openid', 'profile', 'offline_access', 'read', 'write'],\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Scopes and Resources in Python\nDESCRIPTION: This snippet shows how to instantiate `LogtoClient` using `LogtoConfig`. It specifically configures the client to request 'read' and 'write' scopes and to interact with two distinct resource APIs identified by their URIs. This configuration is essential for defining the client's access permissions and intended target APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"client.py\"\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"read\", \"write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating SessionStorage Implementation for Logto\nDESCRIPTION: Implementation of the Logto Storage interface using Gin sessions. This SessionStorage struct provides methods to get and set items in the user session, satisfying Logto's storage requirements.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_create-session-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/gin-contrib/sessions\"\n)\n\ntype SessionStorage struct {\n\tsession sessions.Session\n}\n\nfunc (storage *SessionStorage) GetItem(key string) string {\n\tvalue := storage.session.Get(key)\n\tif value == nil {\n\t\treturn \"\"\n\t}\n\treturn value.(string)\n}\n\nfunc (storage *SessionStorage) SetItem(key, value string) {\n\tstorage.session.Set(key, value)\n\tstorage.session.Save()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Specific Scopes in Kotlin\nDESCRIPTION: This Kotlin code snippet illustrates the creation of a `LogtoConfig` instance and setting the `scopes` property. It specifies that the application requests access to the user's 'email' and 'phone' information during the authentication flow. The example shows two ways to define scopes: using a list of strings or using predefined enum constants (like `UserScope.EMAIL`, `UserScope.PHONE`).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/_scopes-sample-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // or `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with Logto Client in TypeScript/React\nDESCRIPTION: Retrieves an access token from Logto authentication service for a specific API endpoint. The token can be used to authorize requests to protected API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst token = await logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization Token Retrieval with Logto in Next.js API Route\nDESCRIPTION: This code creates a protected API endpoint that fetches organization data for an authenticated user. It uses the Logto client to verify authentication, retrieve organization IDs from the user's ID token claims, and then collect organization tokens and claims for further processing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute(async (request, response) => {\n  if (!request.user.isAuthenticated) {\n    response.status(401).json({ message: 'Unauthorized' });\n\n    return;\n  }\n\n  const client = await logtoClient.createNodeClientFromNextApi(request, response);\n\n  // 組織 (Organization) ID はユーザーの ID トークンのクレームに保存されています\n  const { organizations = [] } = await client.getIdTokenClaims();\n\n  const organizationTokens = await Promise.all(\n    organizations.map(async (organizationId) => client.getOrganizationToken(organizationId))\n  );\n\n  const organizationClaims = await Promise.all(\n    organizations.map(async (organizationId) => client.getOrganizationTokenClaims(organizationId))\n  );\n\n  // 組織トークンおよび / またはクレームを使用して処理を行う\n\n  response.json({\n    organizations,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token for Organization API Resource in TypeScript\nDESCRIPTION: This snippet shows how to use the Logto client to get an access token for a specific API resource within an organization. It requires both the API resource URL and the organization ID as parameters, returning a promise that resolves to the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst accessToken = await client.getAccessToken(\n  'https://shopping.your-app.com/api',\n  organizationId\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Logto Client with Organizations Scope\nDESCRIPTION: Configures a new Logto client instance with UserScope.Organizations enabled. The code imports the necessary UserScope type from @logto/next package and sets up the client with organization scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto PHP Client\nDESCRIPTION: Shows how to request additional user information by configuring scopes when initializing the Logto client. This enables access to more user claims like email and phone number.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...outras configurações\n    // highlight-next-line\n    scopes: [\"email\", \"phone\"], // Atualize conforme suas necessidades\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Organization Scope in Vue.js\nDESCRIPTION: This snippet demonstrates how to initialize Logto authentication in a Vue.js application using the createLogto plugin. The code specifically highlights the configuration of scopes to include UserScope.Organizations, which enables organization-related functionality in the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [UserScope.Organizations],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in TypeScript for Capacitor\nDESCRIPTION: Sets up the Logto configuration object with essential parameters including application ID, endpoint URL, access scopes, and API resource endpoints. This configuration is required for integrating Logto authentication into a Capacitor application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scope in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with custom configurations, specifically adding the 'Organisationen' user scope. It imports the UserScope from '@logto/next' and uses it to set up the client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organisationen],\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Logto Authentication and Retrieving Access Token in JavaScript\nDESCRIPTION: This JavaScript snippet checks if a user is authenticated using `logtoClient.isAuthenticated()`. If the user is authenticated, it asynchronously fetches the access token using `logtoClient.getAccessToken()` within an immediately invoked async function expression (IIAFE) and logs the token to the console. It depends on a pre-configured `logtoClient` instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nif (isAuthenticated) {\n  (async () => {\n    const token = await logtoClient.getAccessToken();\n    console.log(token);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Callback Route in Express for Logto Authentication\nDESCRIPTION: Implementation of the callback route in Express to handle the authentication response from Logto. This route completes the sign-in process and stores the tokens in the session.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/callback', async (req, res) => {\n  if (!req.session.signIn) {\n    res.send('Bad request.');\n    return;\n  }\n\n  const response = await handleSignIn(\n    req.session.signIn,\n    `${req.protocol}://${req.get('host')}${req.originalUrl}`\n  );\n  req.session.tokens = {\n    ...response,\n    expiresAt: response.expiresIn + Date.now(),\n    idToken: decodeIdToken(response.idToken),\n  };\n  req.session.signIn = null;\n\n  res.redirect('/');\n});\n```\n\n----------------------------------------\n\nTITLE: React Component for Fetching Posts with Logto Authentication\nDESCRIPTION: React component that uses Logto authentication to fetch posts from a protected API endpoint. The component passes the access token in the Authorization header and renders the posts once retrieved.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\nimport { useState, useEffect } from 'react';\nimport PostList from './PostList';\n\nconst endpoint = '<https://www.mysite.com/api/posts>';\nconst resource = '<https://www.mysite.com/api>';\n\nfunction PostPage() {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [posts, setPosts] = useState();\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const response = await fetch(endpoint, {\n        headers: {\n          Authorization: `Bearer ${await getAccessToken(resource)}`,\n        },\n      });\n      setPosts(response.json());\n    };\n\n    if (isAuthenticated) {\n      void fetchPosts();\n    }\n  }, [isAuthenticated, getAccessToken]);\n\n  return <PostList posts={posts} />;\n}\n\nexport default PostPage;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token using Logto in Next.js Server Component\nDESCRIPTION: This server component sets up the structure for retrieving an organization token using Logto's Next.js integration. It imports the necessary functions and components, and defines an async Home function that renders a GetOrganizationToken component with a server action to obtain the token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getOrganizationToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetOrganizationToken from './get-organization-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetOrganizationToken\n        onGetOrganizationToken={async () => {\n          'use server';\n\n          return getOrganizationToken(logtoConfig, 'organization-id');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info for Additional Claims\nDESCRIPTION: This code demonstrates how to use the fetchUserInfo method to request additional user information from the server. This is necessary for certain claims that aren't included in the ID token and require a network request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { fetchUserInfo } = useLogto();\n\nconst userInfo = await fetchUserInfo();\n\n// Now you can access the claim `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Next.js with Logto\nDESCRIPTION: This snippet shows how to configure the Logto provider to request additional scopes in a Next.js application. It modifies the NextAuth configuration to include additional scopes in the authorization parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing idTokenDecoderFactory Bean in WebSecurityConfig\nDESCRIPTION: Creation of idTokenDecoderFactory bean to use ES384 algorithm for Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.oauth2.client.oidc.authentication.OidcIdTokenDecoderFactory;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\nimport org.springframework.security.oauth2.jwt.JwtDecoderFactory;\n\npublic class WebSecurityConfig {\n  // ...\n\n  @Bean\n  public JwtDecoderFactory<ClientRegistration> idTokenDecoderFactory() {\n    OidcIdTokenDecoderFactory idTokenDecoderFactory = new OidcIdTokenDecoderFactory();\n    idTokenDecoderFactory.setJwsAlgorithmResolver(clientRegistration -> SignatureAlgorithm.ES384);\n    return idTokenDecoderFactory;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims in Express.js with Logto\nDESCRIPTION: This snippet demonstrates how to display user information after sign-in using the Logto Express.js SDK. It uses the 'withLogto' middleware and accesses user claims from the 'req.user' object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  response.json(request.user.claims);\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Custom Token Claims Flow with Mermaid\nDESCRIPTION: A sequence diagram showing the flow of custom token claims processing between User/User Agent, Logto (Identity Provider), and Service Provider. It illustrates the steps from authentication request to token issuance including custom claims generation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/developers/custom-token-claims/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant U as Usuario o agente de usuario\n  participant IdP as Logto (proveedor de identidad)\n  participant SP as Proveedor de Servicio\n\n  autonumber\n  U ->> IdP: Solicitud de autenticación (con credenciales)\n  activate IdP\n  IdP-->>IdP: Validar credenciales y<br/>generar carga útil de token de acceso en bruto\n  rect var(--mermaid-rect-fill)\n  note over IdP: Reclamos personalizados de tokens\n  IdP->>IdP: Ejecutar script de reclamos personalizados de tokens (`getCustomJwtClaims`) y<br/>obtener reclamos de tokens adicionales\n  end\n  IdP-->>IdP: Fusionar carga útil de token de acceso en bruto y reclamos de tokens adicionales\n  IdP-->>IdP: Firmar y cifrar carga útil para obtener token de acceso\n  deactivate IdP\n  IdP-->>U: Emitir token de acceso en formato JWT\n  par Obtener servicio a través de API\n  U->>SP: solicitud de servicio (con token de acceso JWT)\n  SP-->>U: respuesta de servicio\n  end\n```\n\n----------------------------------------\n\nTITLE: Initializing Authentication with Logto Client\nDESCRIPTION: Implements the initialization method for authentication. It creates a LogtoClient instance, attempts to retrieve the ID token claims, and updates the current user accordingly, with error handling for debugging.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n  Future initialize() async {\n    logtoClient = LogtoClient(config: logtoConfig, httpClient: http.Client());\n\n    late OpenIdClaims? idToken;\n\n    try {\n      idToken = await logtoClient.idTokenClaims;\n    } catch (e) {\n      if (kDebugMode) {\n        print('認証 (Authentication) の初期化中にエラーが発生しました: $e');\n      }\n    }\n\n    _updateCurrentUser(\n        loggedIn: idToken != null, uid: idToken?.subject, idToken: idToken);\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing API Resource with Access Token in Node.js\nDESCRIPTION: This snippet demonstrates how to use the obtained access token to make a request to a protected API resource using Node.js. It shows setting up the authorization header for a GET request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/machine-to-machine/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apiEndpoint = 'https://your.api.endpoint';\nconst accessToken = 'eyJhb...2g'; // Access Token\n\nconst fetchProducts = async () => {\n  return await fetch(`${apiEndpoint}/products`, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Organization Token Using logtoClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to call the asynchronous getOrganizationToken method on a logtoClient instance to obtain an access token for a given organization. It requires a previously instantiated logtoClient object and an existing organizationId parameter. The method returns a Promise that resolves to the organization token; handle any errors using appropriate async/await error handling. This pattern is typically used in authentication workflows where tokens scoped to organizations are needed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information Table in JavaScript\nDESCRIPTION: This code snippet creates a table to display the ID token claims obtained from Logto. It uses the logtoClient.getIdTokenClaims() method to fetch user information and dynamically generates an HTML table to show the claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.getIdTokenClaims();\n\n// 為 ID 權杖 (ID token) 宣告 (Claims) 生成顯示表格\nconst table = document.createElement('table');\nconst thead = document.createElement('thead');\nconst tr = document.createElement('tr');\nconst thName = document.createElement('th');\nconst thValue = document.createElement('th');\nthName.innerHTML = 'Name';\nthValue.innerHTML = 'Value';\ntr.append(thName, thValue);\nthead.append(tr);\ntable.append(thead);\n\nconst tbody = document.createElement('tbody');\n\nfor (const [key, value] of Object.entries(userInfo)) {\n  const tr = document.createElement('tr');\n  const tdName = document.createElement('td');\n  const tdValue = document.createElement('td');\n  tdName.innerHTML = key;\n  tdValue.innerHTML = typeof value === 'string' ? value : JSON.stringify(value);\n  tr.append(tdName, tdValue);\n  tbody.append(tr);\n}\n\ntable.append(tbody);\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig for React Native\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object for a React Native application using Logto. It sets the appId, endpoint, and includes an array of API resources that the application will access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // Add API resources\n  // highlight-start\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out with Logto in React\nDESCRIPTION: This React component demonstrates how to implement authentication using Logto's React hooks. It uses the useLogto hook to access signIn, signOut, and isAuthenticated functions, displaying either a Sign In or Sign Out button based on the user's authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return isAuthenticated ? (\n    <button onClick={signOut}>Sign Out</button>\n  ) : (\n    <button onClick={() => signIn('http://localhost:3000/callback')}>Sign In</button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK Initialization in Dart\nDESCRIPTION: This code snippet illustrates the initialization of a LogtoConfig object in Dart, which sets up the endpoint for the Logto service, the application ID, and an array of API resources and permission scopes. It requires the Logto Dart SDK as a dependency, and parameters such as 'endpoint' and 'appId' must be replaced with your specific credentials to function. The input consists of configuration values, and the output is a LogtoConfig instance ready for use in authentication flows.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Add your API resources' scopes\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication with Organization Scopes in SvelteKit\nDESCRIPTION: This code configures the Logto authentication handler for a SvelteKit application with Organizations scope enabled. It imports the necessary functions and types from the @logto/sveltekit package and sets up the handle function with the appropriate configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto, UserScope } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: [UserScope.Organizations],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Configuration in Swift\nDESCRIPTION: This code initializes a LogtoConfig object with a custom endpoint, app ID, and API resources. It then creates a LogtoClient instance using this configuration. The resources array specifies multiple API endpoints that the client will have access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // 例: http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-next-line\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // API リソースを追加\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Logic in Razor Page Code-Behind\nDESCRIPTION: This C# snippet shows the code-behind logic for a Razor component (`Home.razor.cs`) that handles authentication. It uses the `[Authorize]` attribute, injects `IUserManager` from Blorc.OpenIdConnect, and retrieves the user's authentication state and profile information. Event handlers `OnLoginButtonClickAsync` and `OnLogoutButtonClickAsync` trigger the sign-in and sign-out redirect flows using the `UserManager`.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.AspNetCore.Components.Web;\nusing Blorc.OpenIdConnect;\nusing Microsoft.AspNetCore.Components.Authorization;\n\n[Authorize]\npublic partial class Home : ComponentBase\n{\n    [Inject]\n    public required IUserManager UserManager { get; set; }\n\n    public User<Profile>? User { get; set; }\n\n    [CascadingParameter]\n    protected Task<AuthenticationState>? AuthenticationStateTask { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n        User = await UserManager.GetUserAsync<User<Profile>>(AuthenticationStateTask!);\n    }\n\n    private async Task OnLoginButtonClickAsync(MouseEventArgs obj)\n    {\n        await UserManager.SignInRedirectAsync();\n    }\n\n    private async Task OnLogoutButtonClickAsync(MouseEventArgs obj)\n    {\n        await UserManager.SignOutRedirectAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information from OIDC Endpoint in Next.js\nDESCRIPTION: This code demonstrates how to fetch additional user information from the Logto OIDC endpoint using the access token. It retrieves the token from the auth session and makes a network request to the user info endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// ...\n\nexport default async function Home() {\n  const session = await auth();\n  // Remplacez l'URL par votre point de terminaison Logto, doit se terminer par `/oidc/me`\n  const response = await fetch('https://xxx.logto.app/oidc/me', {\n    headers: {\n      Authorization: `Bearer ${session?.accessToken}`,\n    },\n  });\n  const user = await response.json();\n  console.log(user);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Logto Sign-In Callback in Next.js\nDESCRIPTION: This code demonstrates how to handle the sign-in callback from Logto in a Next.js application. It uses the handleSignIn helper function from @logto/next/server-actions to process the callback and redirect the user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleSignIn } from '@logto/next/server-actions';\nimport { redirect } from 'next/navigation';\nimport { NextRequest } from 'next/server';\nimport { logtoConfig } from '../logto';\n\nexport async function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams;\n  await handleSignIn(logtoConfig, searchParams);\n\n  redirect('/');\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Header Format for Protected App Authentication\nDESCRIPTION: Example of the JWT header format used by the Protected App. The header contains an ID Token that can be validated to ensure the request comes from the Protected App and includes user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrate-logto/protected-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nLogto-ID-Token: <JWT>\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomAuthManager Class for Logto Authentication\nDESCRIPTION: Defines a CustomAuthManager class that handles Logto authentication integration with Flutter. Includes initialization of LogtoClient, user state management, and token processing. Requires Logto Dart SDK and HTTP client dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// lib/auth/custom_auth/custom_auth_manager.dart\n\nimport 'dart:async';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:logto_dart_sdk/logto_client.dart';\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nimport 'custom_auth_user_provider.dart';\n\nexport 'custom_auth_manager.dart';\n\n\nclass CustomAuthManager {\n  late LogtoClient logtoClient;\n\n  final logtoConfig = const LogtoConfig(\n      appId: '<YOUR-APP-ID>',\n      endpoint: '<YOUR-LOGTO-ENDPOINT>');\n\n\n  // ...\n\n  FlutterFlowAuthAuthUser? _updateCurrentUser(\n      {bool loggedIn = false, String? uid, OpenIdClaims? idToken}) {\n    // Aktualisiere den aktuellen Benutzerstream.\n    final updatedUser = FlutterFlowAuthAuthUser(\n      loggedIn: loggedIn,\n      uid: uid,\n      idToken: idToken,\n    );\n\n    flutterFlowAuthAuthUserSubject.add(updatedUser);\n\n    return updatedUser;\n  }\n\n  Future initialize() async {\n    logtoClient = LogtoClient(config: logtoConfig, httpClient: http.Client());\n\n    late OpenIdClaims? idToken;\n\n    try {\n      idToken = await logtoClient.idTokenClaims;\n    } catch (e) {\n      if (kDebugMode) {\n        print('Fehler bei der Initialisierung der Authentifizierung: $e');\n      }\n    }\n\n    _updateCurrentUser(\n        loggedIn: idToken != null, uid: idToken?.subject, idToken: idToken);\n  }\n}\n\nFlutterFlowAuthAuthUser? currentUser;\nbool get loggedIn => currentUser?.loggedIn ?? false;\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Client in Rails Controller\nDESCRIPTION: Example showing how to initialize the Logto client in a Rails controller using a before_action callback, with proper redirect handling and session storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\nclass SampleController < ApplicationController\n  before_action :initialize_logto_client\n\n  private\n\n  def initialize_logto_client\n    @client = LogtoClient.new(\n      config: LogtoClient::Config.new(\n        # ...你的配置\n      ),\n      # 允許客戶端重定向到其他主機（即你的 Logto 租戶）\n      navigate: ->(uri) { redirect_to(uri, allow_other_host: true) },\n      # 控制器可以存取 session 物件\n      storage: LogtoClient::SessionStorage.new(session)\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto React SDK with Organization Scopes\nDESCRIPTION: This code snippet demonstrates how to set up the Logto React SDK configuration object with organization scopes. The configuration enables access to organization-related resources by including the UserScope.Organizations scope in the scopes array.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Logto Client with Organization Scope\nDESCRIPTION: Example of initializing Logto client in PHP with organization scope\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...\n    scopes: [UserScope::organizations],\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 Provider for Logto in Next.js\nDESCRIPTION: This snippet shows how to set up the Auth.js v5 provider for Logto in a Next.js application. It includes the configuration for the OIDC provider and user profile mapping.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oidc',\n      // Puedes obtener el valor del emisor desde la página de Detalles de la Aplicación de Logto,\n      // en el campo \"Punto final del emisor\"\n      issuer: 'https://xxxx.logto.app/oidc',\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      authorization: {\n        params: { scope: 'openid offline_access profile email' },\n      },\n      profile(profile) {\n        // Puedes personalizar el mapeo del perfil de usuario aquí\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v4 Provider for Logto in Next.js\nDESCRIPTION: This snippet shows the configuration for Auth.js v4 provider to use Logto as an OIDC provider in a Next.js application. It includes settings for the OAuth flow and profile mapping.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oauth',\n      // Du kannst die bekannte URL von der Logto-Anwendungsdetailseite erhalten,\n      // im Feld \"OpenID Provider configuration endpoint\"\n      wellKnown: 'https://xxxx.logto.app/oidc/.well-known/openid-configuration',\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      client: {\n        id_token_signed_response_alg: 'ES384',\n      },\n      profile(profile) {\n        // Du kannst hier die Zuordnung des Benutzerprofils anpassen\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Middleware to Fetch Access Token in Express.js (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to configure the `withLogto` middleware for an Express.js GET route (`/fetch-access-token`). By setting `getAccessToken` to `true` and specifying the `resource` URL ('https://shopping.your-app.com/api'), the middleware automatically requests and attaches an audience-specific access token to `request.user.accessToken`. The route handler then accesses this token for subsequent use.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-access-token',\n  withLogto({\n    ...config,\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }),\n  (request, response) => {\n    // highlight-next-line\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Microsoft Entra ID OIDC SSO Tutorial\nDESCRIPTION: This code snippet imports various MDX fragments used to compose the tutorial. It includes sections for introduction, application creation, SSO connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-next-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources Documentation Components\nDESCRIPTION: Imports documentation fragments and code components, then assembles them into a ConfigApiResources component with the necessary props for displaying API resource configuration examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with New Permission Scopes in TypeScript\nDESCRIPTION: Example of initializing a Logto client with new permission scopes in TypeScript. This is necessary when new permissions are introduced into the system and assigned to a user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/authorization/role-based-access-control/protect-api-resources-with-rbac.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nnew LogtoClient({\n  appId: 'your-app-id',\n  endpoint: 'your-logto-endpoint',\n  resources: ['your-api-resource'],\n  scopes: [\n    // ... 기존 권한 스코프,\n    'new-scope',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Securing API Route to Get User Claims via Logto in Next.js (TypeScript)\nDESCRIPTION: This API route snippet secures access to user claims by wrapping a handler with Logto\\'s withLogtoApiRoute middleware. If the user is authenticated, their claims are sent as JSON; otherwise, a 401 Unauthorized response is returned. Requires a properly inited logtoClient and authentication context. Used to fetch claims from server endpoints safely.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { logtoClient } from '../../libraries/logto';\\n\\nexport default logtoClient.withLogtoApiRoute((request, response) => {\\n  if (!request.user.isAuthenticated) {\\n    response.status(401).json({ message: 'Unauthorized' });\\n\\n    return;\\n  }\\n\\n  response.json({\\n    data: request.user.claims,\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes in Go\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig struct with custom scopes for the Logto client. It sets the Scopes field to an array of strings containing 'email' and 'phone', which are likely used to request specific user information during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Dart\nDESCRIPTION: This function asynchronously retrieves an access token for a given resource using the Logto client. It takes a resource string as input and returns a Future<AccessToken?> object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_get-resource-access-token.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<AccessToken?> getAccessToken(String resource) async {\n  var token = await logtoClient.getAccessToken(resource: resource);\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Logto Client Config with Organization Scope\nDESCRIPTION: Initializes a LogtoConfig struct with organization user scope. This configuration enables organization-related functionality in the Logto authentication client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Scopes: []string{core.UserScopeOrganizations},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Handler with Organizations Scope in SvelteKit\nDESCRIPTION: This snippet sets up the Logto authentication handler for a SvelteKit application. It imports necessary functions from '@logto/sveltekit' and configures the handler with the Organizations user scope. This allows the application to access organization-related data for authenticated users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto, UserScope } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: [UserScope.Organizations],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Components in MDX\nDESCRIPTION: Imports MDX fragments and code components for API resource configuration, then renders them using the ConfigApiResources component with appropriate props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Custom User Information in JavaScript\nDESCRIPTION: This code shows how to fetch user information including custom data using the fetchUserInfo method of the Logto client. This is necessary for retrieving user information that requires network requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\n// Ahora puedes acceder al reclamo `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Nuxt.js Component\nDESCRIPTION: This snippet demonstrates how to display user information in a Nuxt.js component using the useLogtoUser() hook. It shows a list of user properties when logged in and a sign-in/out button.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- highlight-start -->\n  <!-- Benutzerinformationen anzeigen, wenn angemeldet -->\n  <ul v-if=\"Boolean(user)\">\n    <li v-for=\"(value, key) in user\"><b>{{ key }}:</b> {{ value }}</li>\n  </ul>\n  <!-- highlight-end -->\n  <!-- Vereinfachter Button für An- und Abmeldung -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Manager Implementation in Dart\nDESCRIPTION: Implements a custom authentication manager class that integrates Logto authentication in a Flutter application. It handles user state management, token validation, and authentication status updates using the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// lib/auth/custom_auth/custom_auth_manager.dart\n\nimport 'dart:async';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:logto_dart_sdk/logto_client.dart';\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nimport 'custom_auth_user_provider.dart';\n\nexport 'custom_auth_manager.dart';\n\n\nclass CustomAuthManager {\n  late LogtoClient logtoClient;\n\n  final logtoConfig = const LogtoConfig(\n      appId: '<YOUR-APP-ID>',\n      endpoint: '<YOUR-LOGTO-ENDPOINT>');\n\n\n  // ...\n\n  FlutterFlowAuthAuthUser? _updateCurrentUser(\n      {bool loggedIn = false, String? uid, OpenIdClaims? idToken}) {\n    // Atualiza o fluxo do usuário atual.\n    final updatedUser = FlutterFlowAuthAuthUser(\n      loggedIn: loggedIn,\n      uid: uid,\n      idToken: idToken,\n    );\n\n    flutterFlowAuthAuthUserSubject.add(updatedUser);\n\n    return updatedUser;\n  }\n\n  Future initialize() async {\n    logtoClient = LogtoClient(config: logtoConfig, httpClient: http.Client());\n\n    late OpenIdClaims? idToken;\n\n    try {\n      idToken = await logtoClient.idTokenClaims;\n    } catch (e) {\n      if (kDebugMode) {\n        print('Erro ao inicializar a autenticação: $e');\n      }\n    }\n\n    _updateCurrentUser(\n        loggedIn: idToken != null, uid: idToken?.subject, idToken: idToken);\n  }\n}\n\nFlutterFlowAuthAuthUser? currentUser;\nbool get loggedIn => currentUser?.loggedIn ?? false;\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Resource Access Token with Logto in React Native (TSX)\nDESCRIPTION: This React Native component utilizes the `useLogto` hook from `@logto/rn`. It checks if the user is authenticated and, if so, calls `getAccessToken` with a specific resource identifier ('https://shopping.your-app.com/api') to retrieve a scoped access token. The fetched token is then stored in the component's state and displayed. Requires the `@logto/rn` package and React.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"AccessToken.tsx\"\nimport { useLogto } from '@logto/rn';\n\nconst AccessToken = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        // highlight-start\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        // highlight-end\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>; // Note: In React Native, use <Text>{accessToken}</Text>\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Application YAML Configuration\nDESCRIPTION: YAML configuration for setting up the server port, audience, and OAuth2 resource server properties.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  port: 3000\n\nlogto:\n  audience: http://localhost:3000/\n\nspring:\n  security:\n    oauth2:\n      resourceserver:\n        jwt:\n          issuer-uri: <your-logto-issuer-uri>\n          jwk-set-uri: <your-logto-jwks-uri>\n```\n\n----------------------------------------\n\nTITLE: Registering OpenID Connect Authentication Services in Blazor\nDESCRIPTION: Configures the necessary services for OpenID Connect authentication in the Program.cs file. It adds Blorc Core services, authorization, and configures the OpenID Connect options from application settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blorc.OpenIdConnect;\nusing Blorc.Services;\n\nbuilder.Services.AddBlorcCore();\nbuilder.Services.AddAuthorizationCore();\nbuilder.Services.AddBlorcOpenIdConnect(\n    options =>\n    {\n        builder.Configuration.Bind(\"IdentityServer\", options);\n    });\n\nvar webAssemblyHost = builder.Build();\n\nawait webAssemblyHost\n    .ConfigureDocumentAsync(async documentService =>\n    {\n        await documentService.InjectBlorcCoreJsAsync();\n        await documentService.InjectOpenIdConnectAsync();\n    });\n\nawait webAssemblyHost.RunAsync();\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Capacitor (TypeScript)\nDESCRIPTION: This snippet shows how to import and initialize the Logto client in a Capacitor project. It requires setting up the Logto endpoint and application ID in the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient, { type LogtoConfig } from '@logto/capacitor';\n\nconst logtoConfig: LogtoConfig = {\n  endpoint: '<your-logto-endpoint>',\n  appId: '<your-application-id>',\n};\n\nconst logtoClient = new LogtoClient(config);\n```\n\n----------------------------------------\n\nTITLE: Adding Cascading Authentication State in Blazor Application Builder\nDESCRIPTION: This code snippet demonstrates how to add the cascading authentication state to the Blazor application builder. This is necessary for the AuthorizeView component to function properly in Blazor Server applications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-server/_authorize-view-component.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddCascadingAuthenticationState();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token using Logto Client in TypeScript\nDESCRIPTION: Asynchronous function call to obtain an organization-specific authentication token using the Logto client instance. The function takes an organizationId parameter and returns a Promise that resolves to the token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Components for API Resources\nDESCRIPTION: This code imports MDX fragments and code examples, then composes them into a ConfigApiResources component to display API resource configuration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Ruby Client with Scopes and Resources\nDESCRIPTION: Demonstrates how to create a new LogtoClient instance with custom scopes for shopping and store operations, along with corresponding API resource endpoints. The configuration sets up authentication permissions for both shopping and store APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Authentication in Vue with Custom Scopes and Resources\nDESCRIPTION: This snippet shows how to configure the Logto authentication client in a Vue application. It sets custom access scopes ('read', 'write') and defines specific API resources that the authenticated user can access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource and Scopes for Logto Authentication in C#\nDESCRIPTION: This snippet shows how to configure the `Resource` (API identifier) and `Scopes` (requested permissions) within the Logto authentication options in an ASP.NET Core application's `Program.cs`. It utilizes the `AddLogtoAuthentication` extension method on `builder.Services` to define these settings, requesting standard OIDC scopes along with custom `read` and `write` scopes for a specific API resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Resource = \"https://shopping.your-app.com/api\";\n  options.Scopes = new string[] {\n    \"openid\",\n    \"profile\",\n    \"offline_access\",\n    \"read\",\n    \"write\"\n  };\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Headers for Hasura API Requests\nDESCRIPTION: Code snippet showing how to obtain and use the Logto access token for Hasura API requests, including setting the required authorization headers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/hasura/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst accessToken = await logto.getAccessToken('https://*.hasura.app/api');\n\n// Before sending the request to Hasura\nrequest.headers.set('Authorization', `Bearer ${accessToken}`);\nrequest.headers.set('x-Hasura-Role', '<required-role-for-the-endpoint>');\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token with Logto Ruby Client\nDESCRIPTION: This code retrieves an access token from the Logto authentication service using the Ruby client. The token is scoped to a specific resource URL, which in this case is a shopping API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntoken = @client.access_token(resource: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Flutter using Logto\nDESCRIPTION: This code snippet demonstrates how to fetch additional user information using the Logto client's getUserInfo method in a Flutter application. It retrieves the user info and logs it to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal userInfo = await logtoClient.getUserInfo();\nprint(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Python SDK での組織トークン取得\nDESCRIPTION: Logto Python SDK で特定の組織に対する組織トークンを取得する方法です。getOrganizationToken または getOrganizationTokenClaims メソッドに組織IDを渡します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntoken = await client.getOrganizationToken(\"<organization-id>\")\n# または\nclaims = await client.getOrganizationTokenClaims(\"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Flow with Logto in React Native\nDESCRIPTION: A React Native component that manages authentication state using the Logto SDK. It fetches and displays user information when authenticated and provides login/logout buttons. The component uses the useLogto hook to access authentication methods and state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_fetch-user-info-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { fetchUserInfo, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // highlight-start\n      fetchUserInfo().then((userInfo) => {\n        setUser(userInfo);\n      });\n      // highlight-end\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Se déconnecter\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Se connecter\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in SwiftUI\nDESCRIPTION: This snippet demonstrates how to display user information in a SwiftUI app using the Logto client's getIdTokenClaims() method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n  @State var name: String?\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n    name = try? client.getIdTokenClaims().name\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Text(\"Bem-vindo, \\(name)\")\n      } else {\n        Text(\"Por favor, faça login\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Swift\nDESCRIPTION: This code initializes a Logto client configuration with custom scopes and resources. It sets up the Logto endpoint, app ID, defines read/write scopes, and specifies API resource endpoints before creating a LogtoClient instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"read\", \"write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto React with Custom Scopes and Resources\nDESCRIPTION: This code snippet shows how to set up the Logto configuration object with custom scopes for read/write permissions and multiple API resource endpoints. The configuration is used to initialize Logto authentication in a React application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Android ViewModel\nDESCRIPTION: This snippet demonstrates how to retrieve and display user information using Logto in an Android ViewModel. It includes methods for getting ID token claims and updating a LiveData object with the user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LogtoViewModel(application: Application) : AndroidViewModel(application) {\n    // ...otros códigos\n\n    // Añadir un live data para observar los reclamos del token de ID\n    private val _idTokenClaims = MutableLiveData<IdTokenClaims>()\n    val idTokenClaims: LiveData<IdTokenClaims>\n        get() = _idTokenClaims\n\n    fun getIdTokenClaims() {\n        logtoClient.getIdTokenClaims { logtoException, idTokenClaims ->\n            logtoException?.let { _logtoException.postValue(it) } ?: _idTokenClaims.postValue(idTokenClaims)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet imports necessary fragments and code, then renders a custom component for fetching access tokens for API resources in Logto. It passes the API name and code snippet as props to the component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser SDK with CDN Import\nDESCRIPTION: This snippet imports the Logto Browser SDK from a CDN and initializes a LogtoClient instance with custom configurations. It sets the endpoint, application ID, scopes, and resources for the client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Importar el SDK de `@logto/browser` desde el CDN de jsdelivr\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-application-id>',\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Passport.js with OpenIDConnectStrategy and Scopes in TypeScript\nDESCRIPTION: This TypeScript function `initPassport` configures and registers the `OpenIDConnectStrategy` with Passport.js. It depends on the `passport` library and an OpenID Connect strategy implementation (like `passport-openidconnect`). Key parameters shown are `clientID`, `clientSecret`, `callbackURL`, and `scope`. The `scope` array explicitly requests 'openid', 'offline_access', 'profile', and 'email' permissions from the identity provider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        // ... other options\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        // highlight-start\n        scope: ['openid', 'offline_access', 'profile', 'email'],\n        // highlight-end\n      }\n      // ... other options\n    )\n  );\n  // ... other options\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto React Integration\nDESCRIPTION: This snippet demonstrates how to configure additional scopes in the Logto provider configuration to request more user information. It shows how to request email, phone, custom data, identities, and organizations scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: [\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n  ],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out UI in Nuxt Vue Component\nDESCRIPTION: Vue component code that uses the useLogtoUser composable to implement a dynamic sign-in/sign-out link. The component displays different text based on whether the user is authenticated or not.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { useLogtoUser } from '#imports'; // Ajoutez cette ligne si l'importation automatique est désactivée\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- Bouton simplifié pour la connexion et la déconnexion -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Module in Nuxt Configuration\nDESCRIPTION: This snippet shows how to add and configure the Logto module in the Nuxt configuration file. It includes setting up the endpoint, app ID, app secret, and cookie encryption key.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // highlight-start\n  modules: ['@logto/nuxt'],\n  runtimeConfig: {\n    logto: {\n      endpoint: '<your-logto-endpoint>',\n      appId: '<your-logto-app-id>',\n      appSecret: '<your-logto-app-secret>',\n      cookieEncryptionKey: '<a-random-string>',\n    },\n  },\n  // highlight-end\n  // ...andere Konfigurationen\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Express.js with Logto\nDESCRIPTION: This snippet demonstrates how to access additional claims, such as email, from the 'req.user' object after configuring additional scopes in the Logto Express.js SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  response.end(`User email: ${req.user.claims.email}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Custom Scopes and Resources in Nuxt.js\nDESCRIPTION: This snippet demonstrates how to configure the Logto authentication module in a Nuxt.js application. It specifically shows how to define custom scopes (read/write permissions) and multiple API resources that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building Flutter UI with Conditional Authentication Buttons\nDESCRIPTION: This code builds a Flutter UI with conditional rendering of sign-in, sign-out, and get user info buttons based on the authentication state. It demonstrates how to structure a widget tree with authentication-dependent elements.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_fetch-userinfo.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget getUserInfoButton = TextButton(\n      onPressed: () async {\n        // highlight-start\n        final userInfo = await logtoClient.getUserInfo();\n        print(userInfo);\n        // highlight-end\n      },\n      child: const Text('Get user info'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n            isAuthenticated == true ? getUserInfoButton : const SizedBox.shrink(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token from Logto Client in PHP\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to obtain an access token for a specific API endpoint. The getAccessToken method is called with the API URL as a parameter to request authorization for that specific resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$accessToken = $client->getAccessToken(\"https://shopping.your-app.com/api\");\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Configuration Object in TypeScript for Capacitor\nDESCRIPTION: This TypeScript snippet defines a `LogtoConfig` object required for initializing the Logto SDK in a Capacitor application. It imports the `LogtoConfig` type from '@logto/capacitor' and sets placeholders for the application ID (`appId`) and the Logto instance endpoint (`endpoint`), along with example scopes and API resource identifiers (`resources`). This configuration dictates how the SDK interacts with the Logto service for authentication and authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components\nDESCRIPTION: Imports MDX documentation fragments and renders them using JSX to display access token fetching documentation and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: UserProfile Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the UserProfile object in Logto, showing the structure of OpenID Connect standard claims that are stored in the profile property. These fields include personal information, locale settings, and address details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype UserProfile = Partial<{\n  familyName: string;\n  givenName: string;\n  middleName: string;\n  nickname: string;\n  preferredUsername: string;\n  profile: string;\n  website: string;\n  gender: string;\n  birthdate: string;\n  zoneinfo: string;\n  locale: string;\n  address: Partial<{\n    formatted: string;\n    streetAddress: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    country: string;\n  }>;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Token Validation Decorator in Flask with Python-jose\nDESCRIPTION: This decorator function validates JWT tokens using the Python-jose library. It verifies the token's signature using Logto's JWKS endpoint, checks the issuer claim, and validates that the token is intended for the correct audience.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/python.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"requires-auth.py\n\"\"\"\n\nimport json\nfrom flask import request,  _request_ctx_stack\nfrom six.moves.urllib.request import urlopen\nfrom functools import wraps\nfrom jose import jwt\n\ndef requires_auth(f):\n  @wraps(f)\n  def decorated(*args, **kwargs):\n    token = get_token_auth_header()\n\n# jwks_uri endpoint retrieved from Logto\n    jwks_uri = urlopen('https://<your-logto-domain>/oidc/jwks')\n\n# issuer retrieved from Logto\n    issuer = 'https://<your-logto-domain>/oidc'\n\n    jwks = json.loads(jwks_uri.read())\n\n    try:\n      payload = jwt.decode(\n        token,\n        jwks,\n# The jwt encode algorithm retrieved along with jwks. ES384 by default\n        algorithms=jwt.get_unverified_header(token).get('alg'),\n# The API's registered resource indicator in Logto\n        audience='<your request listener resource indicator>',\n        issuer=issuer,\n        options={\n          'verify_at_hash': False\n        }\n      )\n    except Exception:\n# exception handler\n      raise Error({code: 'invalid_token', status: 401})\n\n# Custom code to process payload\n    _request_ctx_stack.top.user_id = payload.get('sub')\n\n    return f(*args, **kwargs)\n  return decorated\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser SDK in HTML with JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Logto Browser SDK from the jsdelivr CDN and initialize it with configuration parameters. It configures the client with a Logto endpoint, application ID, permission scopes, and resource endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Import `@logto/browser` SDK von der jsdelivr CDN\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-application-id>',\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Organization API Resource Access Token in Ruby\nDESCRIPTION: This snippet shows how to get an access token for a specific API resource within a Logto organization. It uses the client's access_token method with both api_resource and organization_id parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ntoken = @client.access_token(\n  api_resource: \"https://shopping.your-app.com/api\",\n  organization_id: \"organization_id\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Button Component in Next.js\nDESCRIPTION: This snippet demonstrates how to create a sign-out button component using Auth.js in a Next.js application. It uses the 'signOut' function from Auth.js to initiate the sign-out process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signOut } from '@/auth';\n\nexport function SignOut() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signOut();\n      }}\n    >\n      <button type=\"submit\">Sign Out</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication State in Chrome Extension\nDESCRIPTION: JavaScript function to check if the user is authenticated and retrieve user profile information from ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst loadAuthenticationState = async () => {\n  const isAuthenticated = await logtoClient.isAuthenticated();\n  // Mettez à jour l'interface utilisateur en fonction de l'état d'authentification\n\n  if (isAuthenticated) {\n    const user = await logtoClient.getIdTokenClaims(); // { sub: '...', email: '...', ... }\n    // Mettez à jour l'interface utilisateur avec le profil de l'utilisateur\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: Creates a LogtoConfig instance with endpoint, appId and API resource configurations. The configuration specifies the Logto endpoint URL, application ID, and an array of API resource endpoints that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // Add your API resources\n  // highlight-start\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Tokens with Logto Middleware\nDESCRIPTION: Express route handler that uses Logto middleware to fetch organization tokens. The middleware is configured with getOrganizationToken set to true, and returns the organization tokens in the response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-organization-token',\n  withLogto({\n    ...config,\n    // highlight-next-line\n    getOrganizationToken: true,\n  }),\n  (request, response) => {\n    // highlight-next-line\n    response.json(request.user.organizationTokens);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in Express.js with Logto (TypeScript)\nDESCRIPTION: This code demonstrates how to implement sign-in and sign-out functionality using Logto in an Express.js application. It uses the withLogto middleware to inject the authentication status into req.user and renders different HTML based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  res.setHeader('content-type', 'text/html');\n\n  if (req.user.isAuthenticated) {\n    res.end(`<div>Hallo ${req.user.claims?.sub}, <a href=\"/logto/sign-out\">Abmelden</a></div>`);\n  } else {\n    res.end('<div><a href=\"/logto/sign-in\">Anmelden</a></div>');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Scopes in Application Properties\nDESCRIPTION: Property configuration for requesting additional OAuth2 scopes and claims from the authentication provider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\nspring.security.oauth2.client.registration.logto.scope=openid,profile,offline_access,email,phone,urn:logto:scope:organizations\n```\n\n----------------------------------------\n\nTITLE: Logto SDK Configuration for Resource Access\nDESCRIPTION: TypeScript example showing how to configure the Logto SDK with resources and scopes for API access. Specifies the resource URL and access scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config: LogtoConfig = {\n  // ...andere Konfigurationen\n  resources: ['https://resource-server.com/api'],\n  scopes: ['read', 'write'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in Vue (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the initialization of the Logto Vue plugin (`@logto/vue`) within a Vue application (`app`). It uses the `createLogto` function and passes a configuration object. Specifically highlighted are the `scopes` array, defining requested OAuth 2.0 permissions ('read', 'write'), and the `resources` array, specifying the identifiers of the target API resources the application intends to access ('https://shopping.your-app.com/api', 'https://store.your-app.com/api'). This configuration is essential for the application to request the correct access tokens during authentication. Requires the `@logto/vue` package and a Vue application instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"main.ts\"\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Settings in React TypeScript\nDESCRIPTION: Configuration setup for Logto authentication in a React application, specifying custom scopes for read/write permissions and API resource endpoints. The configuration is defined using TypeScript with the LogtoConfig type from @logto/react package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources in Logto for Nuxt.js Application\nDESCRIPTION: This snippet shows how to configure multiple API resources in the Logto section of a Nuxt.js configuration file. It defines two API endpoints that the application will be authorized to access, which is useful for applications that need to interact with multiple backend services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Ajouter des ressources API\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Get Access Token Using Logto Go Client\nDESCRIPTION: Retrieves an access token for a specific API resource using the Logto client. Takes a resource URL as parameter and returns an access token string along with any potential errors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := logtoClient.GetAccessToken(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to set up the LogtoConfig object with precise access scopes (such as \\\"shopping:read\\\", \\\"shopping:write\\\", \\\"store:read\\\", and \\\"store:write\\\") and a list of resource URLs for application APIs. No external dependencies beyond the Logto SDK for Kotlin/Android are assumed. The 'scopes' parameter controls the permissions requested during authentication, while 'resources' specifies the base URIs of backend APIs. Inputs include the list of scopes and resource URLs, and these values affect which APIs and data the authenticated user can interact with. The snippet does not include error handling or dynamic configuration, and is intended as a static example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ..other configs\n    // highlight-start\n    scopes = listOf(\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with User Organization Scope in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Logto Express configuration object to include the Organizations user scope. It imports the UserScope from the @logto/express package and adds it to the scopes array in the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler in SvelteKit (TypeScript)\nDESCRIPTION: This code snippet shows how to configure the Logto authentication handler in a SvelteKit application. It sets up custom scopes for shopping and store operations, and defines API resources for the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Using Logto Authentication Hook in React\nDESCRIPTION: A React component that demonstrates how to use the Logto authentication hook to check authentication status and retrieve an access token for a specific API resource. The component uses React hooks to manage state and side effects.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Scopes and Resources with Logto Express in TypeScript\nDESCRIPTION: This snippet defines a LogtoExpressConfig object in TypeScript, specifying custom authorization scopes and resource URIs for access control using the @logto/express integration. It requires the Logto Express library as a dependency, and the configuration enables fine-grained permission management by mapping scopes to specific API resources. The scopes array lists the allowed operations for shopping and store APIs, while the resources array specifies their endpoints. This setup expects integration into an Express.js server, and the configuration is to be applied to Logto's middleware or SDK initialization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\\n\\nconst config: LogtoExpressConfig = {\\n  // ...other configs\\n  // highlight-start\\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\\n  // highlight-end\\n};\n```\n\n----------------------------------------\n\nTITLE: Using Logto Authentication in React Component\nDESCRIPTION: A React component that uses the Logto authentication library to check if a user is authenticated and retrieve an access token for a specific API endpoint. The component uses useEffect to fetch the token when authentication state changes and displays the token in the UI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in JavaScript\nDESCRIPTION: This code snippet shows how to create a new instance of LogtoClient with custom scopes and resources. It imports the necessary components from the Logto package and configures the client with read/write permissions for specific API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-shared-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with Logto Client in JavaScript\nDESCRIPTION: Retrieves an access token for a specific API endpoint using the Logto client. The token can be used to authenticate requests to protected resources. The example uses an async/await pattern and logs the token to console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst accessToken = await logtoClient.getAccessToken('https://store.your-app.com/api');\nconsole.log('Access token', accessToken);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info in Android using Logto Client\nDESCRIPTION: This snippet demonstrates how to fetch additional user information using the Logto client's fetchUserInfo method. It shows how to access custom data from the user info response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.fetchUserInfo {_, userInfoResponse ->\n    println(\"UserInfoResponse:$userInfoResponse\")\n}\n// 이제 클레임 `userInfo.custom_data`에 접근할 수 있습니다.\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Components for Access Token Documentation\nDESCRIPTION: This snippet imports MDX/MD fragments and composes them to create documentation on how to fetch access tokens for API resources. It uses a reusable component with specific code examples passed as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Saving Refresh Token to Session in Next.js Authentication\nDESCRIPTION: This code snippet demonstrates how to add callbacks to save the refresh token to the session in a Next.js application using NextAuth. It includes both the JWT and session callbacks to ensure the refresh token is properly stored and accessible.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // ...\n  callbacks: {\n    async jwt({ token, account }) {\n      if (account) {\n        // ...\n        // highlight-next-line\n        token.refreshToken = account.refresh_token;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      // ...\n      // highlight-next-line\n      session.refreshToken = token.refreshToken;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opaque Token Response Structure - JSON\nDESCRIPTION: Example response structure when Logto issues an opaque token, showing the access token, expiration, ID token, scope and token type.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/opaque-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"some-random-string\",\n  \"expires_in\": 3600,\n  \"id_token\": \"eyJhbGc...aBc\",\n  \"scope\": \"openid profile email\",\n  \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token in iOS Swift\nDESCRIPTION: Example of how to access additional claims like email and phone from the ID token after configuring the appropriate scopes in the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet claims = try? client.getIdTokenClaims()\n// 現在你可以訪問額外的宣告 `claims.email`、`claims.phone` 等。\n```\n\n----------------------------------------\n\nTITLE: Configuring GET Route for Fetching Organization Tokens with Logto in TypeScript\nDESCRIPTION: This snippet configures a GET route '/fetch-organization-token' using Logto middleware to retrieve organization tokens. It sets the 'getOrganizationToken' option to true and returns the organization tokens in the response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-organization-token',\n  withLogto({\n    ...config,\n    // highlight-next-line\n    getOrganizationToken: true,\n  }),\n  (request, response) => {\n    // highlight-next-line\n    response.json(request.user.organizationTokens);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Access Token in React Component (TypeScript)\nDESCRIPTION: This React component (`Home`) uses the `useLogto` hook from `@logto/react` to check if the user is authenticated (`isAuthenticated`). If authenticated, it asynchronously calls `getAccessToken` with a specific resource identifier ('https://shopping.your-app.com/api') to fetch a scoped access token. The fetched token is stored in the component's state using `useState` and displayed within a paragraph element. The `useEffect` hook ensures this process runs when the component mounts or when `isAuthenticated` or `getAccessToken` changes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"pages/Home/index.tsx\"\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Access Token Retrieval Example (TSX)\nDESCRIPTION: Example showing how to use Logto SDK to retrieve an access token for a specific resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst accessToken = await logtoClient.getAccessToken('https://resource-server.com/api');\n```\n\n----------------------------------------\n\nTITLE: Initializing NextAuth with Logto Provider in TypeScript\nDESCRIPTION: Configures NextAuth authentication by setting up a Logto provider with specific OAuth scopes and resource endpoint. The configuration exports authentication handlers and methods for sign-in/sign-out functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          scope: 'openid offline_access profile email',\n          // highlight-next-line\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Chrome Extension Background Script\nDESCRIPTION: This code initializes the Logto client in the Chrome extension's background script (service worker). It sets up the client with the Logto endpoint and app ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/chrome-extension';\n\nexport const logtoClient = new LogtoClient({\n  endpoint: '<your-logto-endpoint>'\n  appId: '<your-logto-app-id>',\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Token Claims in JavaScript\nDESCRIPTION: This code retrieves user information from the ID token claims and displays it in an HTML table format. It iterates through each claim and creates table rows to display the name and value pairs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.getIdTokenClaims();\n\n// Generar tabla de visualización para reclamos del token de ID\nconst table = document.createElement('table');\nconst thead = document.createElement('thead');\nconst tr = document.createElement('tr');\nconst thName = document.createElement('th');\nconst thValue = document.createElement('th');\nthName.innerHTML = 'Nombre';\nthValue.innerHTML = 'Valor';\ntr.append(thName, thValue);\nthead.append(tr);\ntable.append(thead);\n\nconst tbody = document.createElement('tbody');\n\nfor (const [key, value] of Object.entries(userInfo)) {\n  const tr = document.createElement('tr');\n  const tdName = document.createElement('td');\n  const tdValue = document.createElement('td');\n  tdName.innerHTML = key;\n  tdValue.innerHTML = typeof value === 'string' ? value : JSON.stringify(value);\n  tr.append(tdName, tdValue);\n  tbody.append(tr);\n}\n\ntable.append(tbody);\n```\n\n----------------------------------------\n\nTITLE: Handling URL Opening in SwiftUI for WeChat Authentication\nDESCRIPTION: Code snippet for handling URLs in SwiftUI apps to support WeChat authentication callbacks. This enables WeChat to communicate authentication results back to your app.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftUI\nYourRootView()\n  .onOpenURL { url in\n      LogtoClient.handle(url: url)\n  }\n\n// 또는 AppDelegate\nfunc application(_ app: UIApplication, open url: URL, options: /*...*/) -> Bool {\n  LogtoClient.handle(url: url)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Custom User Data in ERB Template\nDESCRIPTION: ERB template snippet showing how to access custom user data using the fetch_user_info method. This demonstrates retrieving data that may not be available in the standard ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>Custom data: <%= @client.fetch_user_info[\"custom_data\"] %></p>\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token with Logto Client in TypeScript\nDESCRIPTION: This code retrieves an organization-specific access token using the Logto authentication client. It calls the asynchronous getOrganizationToken method with an organization ID and stores the returned token for future API requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Fetching Components in JSX\nDESCRIPTION: This code snippet imports necessary components and renders them to provide instructions for fetching an access token for API resources in Logto. It uses a reusable component and includes a specific code implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoProvider with Scopes in React Native (TypeScript)\nDESCRIPTION: This TSX snippet demonstrates how to configure the Logto React Native SDK. It defines a `LogtoConfig` object specifying the application ID, Logto endpoint, and the desired user scopes (including Email, Phone, CustomData, Identities, and Organizations). The application's root component is then wrapped with `LogtoProvider`, passing the configuration object to make Logto context available throughout the app. Requires the `@logto/rn` package and a React Native environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"App.tsx\"\nimport { LogtoProvider, LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [\n    // highlight-start\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n    // highlight-end\n  ],\n};\n\nconst App = () => <LogtoProvider config={config}>{/* Your app content */}</LogtoProvider>;\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Nuxt.js Component\nDESCRIPTION: This snippet demonstrates how to use the useLogtoUser() hook to display user information in a Nuxt.js component. It conditionally renders user details and a sign-in/out button based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- Mostrar información del usuario cuando ha iniciado sesión -->\n  <ul v-if=\"Boolean(user)\">\n    <li v-for=\"(value, key) in user\"><b>{{ key }}:</b> {{ value }}</li>\n  </ul>\n  <!-- Botón simplificado para iniciar y cerrar sesión -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token Using Logto Client in Dart\nDESCRIPTION: Asynchronous function that wraps Logto client's getAccessToken method to fetch an access token for a given resource. The function takes a resource string parameter and returns a Future that resolves to an optional AccessToken.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_get-resource-access-token.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<AccessToken?> getAccessToken(String resource) async {\n  var token = await logtoClient.getAccessToken(resource: resource);\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Code Component in MDX\nDESCRIPTION: Imports a React/MDX component named GetAccessTokenCode and renders it on the page. The component likely contains code examples for retrieving access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<GetAccessTokenCode />\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization API Resource Access Token in Go\nDESCRIPTION: Demonstrates how to retrieve an access token for organization API resources using the Logto client. The method requires specifying both the API resource URL and the organization ID as parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := client.GetAccessToken(\n  'https://shopping.your-app.com/api',\n  organizationId\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Callback in Next.js\nDESCRIPTION: Creates a route handler for the authentication callback. Processes the sign-in response and redirects the user to the home page after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleSignIn } from '@logto/next/server-actions';\nimport { redirect } from 'next/navigation';\nimport { NextRequest } from 'next/server';\nimport { logtoConfig } from '../logto';\n\nexport async function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams;\n  await handleSignIn(logtoConfig, searchParams);\n\n  redirect('/');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Logto SDK via CDN in Webflow Custom Head Code\nDESCRIPTION: This code snippet adds the Logto SDK to a Webflow site using a CDN import. It creates a global LogtoClient instance accessible across all pages. The code should be added to the 'Head code' section in Webflow's 'Custom code' settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_init-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // 从 jsdelivr CDN 导入 `@logto/browser` SDK\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  // 将 `logtoClient` 实例分配给 window 对象，\n  // 以便在其他页面中全局使用\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>', // 例如 http://localhost:3001\n    appId: '<your-application-id>',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Logto Hook in SvelteKit Server\nDESCRIPTION: This snippet shows how to add the Logto hook to the SvelteKit server using the handleLogto function. It includes options for using environment variables and chaining multiple hooks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\nimport { env } from '$env/dynamic/private';\n\nexport const handle = handleLogto(\n  {\n    endpoint: env.LOGTO_ENDPOINT,\n    appId: env.LOGTO_APP_ID,\n    appSecret: env.LOGTO_APP_SECRET,\n  },\n  {\n    encryptionKey: env.LOGTO_COOKIE_ENCRYPTION_KEY,\n  }\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sequence } from '@sveltejs/kit/hooks';\n\nexport const handle = sequence(handleLogto, handleOtherHook);\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Access Token for Resource in Swift\nDESCRIPTION: This Swift code snippet demonstrates asynchronously retrieving an access token from a Logto client instance using `getAccessToken(for:)`. It requires a previously configured `client` object and the resource identifier string (audience) for which the token is requested. The operation utilizes Swift's `async/await` syntax with `try await`, returning the access token string upon successful authentication and authorization, or throwing an error if the process fails.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet accessToken = try await client.getAccessToken(for: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Tokens in Razor Component\nDESCRIPTION: A Razor component implementation that shows how to access authentication tokens using HttpContextAccessor and AuthenticationStateProvider. The component displays the resource name and access token, with methods to fetch token data when the user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-server/_fetch-token-in-razor-components.md#2025-04-22_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n@using Microsoft.AspNetCore.Components.Authorization\n@using System.Security.Claims\n@using Logto.AspNetCore.Authentication\n@using Microsoft.AspNetCore.Authentication\n@inject AuthenticationStateProvider AuthenticationStateProvider\n@inject IHttpContextAccessor HttpContextAccessor\n\n@* ... *@\n\n<p><b>Resource:</b> @(Resource ?? \"(null)\")</p>\n<p><b>Access Token:</b> @(AccessToken ?? \"(null)\")</p>\n\n@* ... *@\n\n@code {\n    private ClaimsPrincipal? User { get; set; }\n    private string? AccessToken { get; set; }\n    private string? Resource { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();\n        User = authState.User;\n\n        if (User?.Identity?.IsAuthenticated == true)\n        {\n            await FetchTokenAsync();\n        }\n    }\n\n    private async Task FetchTokenAsync()\n    {\n        var httpContext = HttpContextAccessor.HttpContext;\n        if (httpContext == null)\n        {\n            return;\n        }\n\n        var logtoOptions = httpContext.GetLogtoOptions();\n        Resource = logtoOptions?.Resource;\n        // Replace with other token types if needed\n        AccessToken = await httpContext.GetTokenAsync(LogtoParameters.Tokens.AccessTokenForResource);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Controller for Authentication Flow\nDESCRIPTION: Home controller implementation that handles root and home routes, with conditional redirect based on authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport java.security.Principal;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HomeController {\n  @GetMapping({ \"/\", \"/home\" })\n  public String home(Principal principal) {\n    return principal != null ? \"redirect:/user\" : \"home\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication UI in Blazor Razor Component (C#/CSHTML)\nDESCRIPTION: This code snippet demonstrates how to create an authentication UI in a Blazor Razor component. It displays the user's authentication status and provides buttons for signing in and out. The component uses AuthenticationStateProvider to get the current user's authentication state and NavigationManager for handling redirections.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-server/_implement-buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n@using Microsoft.AspNetCore.Components.Authorization\n@using System.Security.Claims\n@inject AuthenticationStateProvider AuthenticationStateProvider\n@inject NavigationManager NavigationManager\n\n@* ... *@\n\n<p>Is authenticated: @User.Identity?.IsAuthenticated</p>\n@if (User.Identity?.IsAuthenticated == true)\n{\n    <button @onclick=\"SignOut\">Sign out</button>\n}\nelse\n{\n    <button @onclick=\"SignIn\">Sign in</button>\n}\n\n@* ... *@\n\n@code {\n    private ClaimsPrincipal? User { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();\n        User = authState.User;\n    }\n\n    private void SignIn()\n    {\n        NavigationManager.NavigateTo(\"/SignIn\", forceLoad: true);\n    }\n\n    private void SignOut()\n    {\n        NavigationManager.NavigateTo(\"/SignOut\", forceLoad: true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: This snippet shows how to create a LogtoConfig instance with specific parameters. It sets the Logto endpoint, app ID, resources (API endpoints), and shared scopes for all resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_resource-with-shared-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Shared scopes by all resources\n  // highlight-start\n  scopes: [\"read\", \"write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with npm\nDESCRIPTION: This command installs the @logto/chrome-extension package using npm (Node Package Manager).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Configuring User Scopes with Logto Express in TypeScript\nDESCRIPTION: This code snippet shows how to include the 'UserScope.Organizations' scope in the LogtoExpressConfig configuration for a TypeScript Express application. It requires the '@logto/express' package and assumes other configuration settings are defined elsewhere in the object (as indicated by the comment). The primary parameter is the 'scopes' array, which controls the permissions requested from users, specifically allowing access at the organization level. The input is a config object for Express middleware, and the output is its direct use in subsequent authentication middleware setups.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { UserScope } from '@logto/express';\\n\\nconst config: LogtoExpressConfig = {\\n  // ...other configs\\n  // highlight-next-line\\n  scopes: [UserScope.Organizations],\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Logto Organizations Scope Configuration in Next.js TypeScript\nDESCRIPTION: Configuration object for Logto that enables the Organizations scope functionality. This setup allows access to organization-related features in a Next.js application using the @logto/next package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/chrome-extension using pnpm (Bash)\nDESCRIPTION: This command uses the pnpm package manager to install the `@logto/chrome-extension` library. It adds the package as a dependency to the current project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims via API Request in Next.js\nDESCRIPTION: This code snippet demonstrates how to fetch and display user claims using an API request in a Next.js component. It uses the useSWR hook for data fetching and renders the claims in a table format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoContext } from '@logto/next';\nimport { useMemo } from 'react';\nimport useSWR from 'swr';\n\nconst Home = () => {\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\n\n  const claims = useMemo(() => {\n    if (!data?.isAuthenticated || !data.claims) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h2>Revendications :</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Nom</th>\n              <th>Valeur</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(data.claims).map(([key, value]) => (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>{String(value)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }, [data]);\n\n  return (\n    <div>\n      {claims}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Settings in appsettings.json\nDESCRIPTION: Sets up the OpenID Connect configuration in appsettings.json for a Blazor WebAssembly application. Specifies the Logto endpoint, client ID, redirect URIs, and required scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ...\n  IdentityServer: {\n    Authority: 'https://<your-logto-endpoint>/oidc',\n    ClientId: '<your-logto-app-id>',\n    PostLogoutRedirectUri: 'http://localhost:5000',\n    RedirectUri: 'http://localhost:5000/authentication/login-callback',\n    ResponseType: 'code',\n    Scope: 'openid profile', // Ajoutez plus de portées (Portées) si nécessaire\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication in Nuxt.js\nDESCRIPTION: This snippet demonstrates how to configure the Logto authentication module in a Nuxt.js application. It shows setting custom scopes and resources in the Logto configuration block of the Nuxt config file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Auth Provider with Resource and Scopes in Angular\nDESCRIPTION: This TypeScript snippet shows the configuration of the `provideAuth` provider within an Angular application's `ApplicationConfig`. It utilizes `buildAngularAuthConfig` to specify the target API `resource` (e.g., 'https://your-api-resource.com') and the desired `scopes` (openid, profile, offline_access, read, write) needed for authentication and authorization. This setup ensures the application requests the correct audience and permissions during the Logto authentication flow. It assumes dependencies on `@logto/angular` and `@angular/common/http`.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"app/app.config.ts\"\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        scopes: ['openid', 'profile', 'offline_access', 'read', 'write'],\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token using Logto Client in TypeScript\nDESCRIPTION: Makes an asynchronous call to retrieve an access token from Logto authentication service for a specific API resource. The method requires the target API URL as a parameter and returns a promise that resolves to the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to get an access token using the Logto client's getAccessToken method. It requires a local Logto client instance and accepts a resource URL as a parameter to scope the token for a specific API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto in React Native\nDESCRIPTION: This component uses the useLogto hook to check authentication status and retrieve an access token for a specific API resource. It demonstrates how to handle asynchronous token retrieval and state updates in a React Native environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\n\nconst AccessToken = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        // highlight-start\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        // highlight-end\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Logto client to obtain an access token for a specific API endpoint. It uses a callback function to handle the result, which can be either an access token or an exception.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getAccessToken(\"https://shopping.your-app.com/api\") { logtoException, accessToken ->\n    logtoException?.let { println(it) }\n    accessToken?.let { println(it) }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Button Component in Next.js\nDESCRIPTION: This snippet demonstrates the implementation of a client-side Sign-Out button component for Next.js. It receives an onSignOut prop function to handle the sign-out action.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignOut: () => Promise<void>;\n};\n\nconst SignOut = ({ onSignOut }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignOut();\n      }}\n    >\n      Sign Out\n    </button>\n  );\n};\n\nexport default SignOut;\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes in Kotlin\nDESCRIPTION: Configures a LogtoConfig instance with specified OAuth scopes. Shows how to set scopes using either string literals or UserScope enum values for email and phone permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/_scopes-sample-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // または `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token in Python\nDESCRIPTION: Example of obtaining an organization token using Python Logto client\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntoken = await client.getOrganizationToken(\"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Account Information (Bash)\nDESCRIPTION: This snippet shows how to retrieve user account information using the Account API. It sends a GET request with an access token in the Authorization header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://[tenant-id].logto.app/api/my-account \\\n  -H 'authorization: Bearer <access_token>'\n```\n\n----------------------------------------\n\nTITLE: Configuring and Accessing Organization Tokens with Logto in Express.js\nDESCRIPTION: This snippet demonstrates how to configure the Logto middleware to fetch organization tokens and how to access these tokens from the authenticated user object in an Express route handler. The getOrganizationToken flag is enabled to request organization tokens during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-organization-token',\n  withLogto({\n    ...config,\n    // highlight-next-line\n    getOrganizationToken: true,\n  }),\n  (request, response) => {\n    // highlight-next-line\n    response.json(request.user.organizationTokens);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: This snippet shows how to create a LogtoClient instance with custom scopes and resources. The scopes define the permission levels ('shopping:read', 'shopping:write', etc.), while the resources specify the API endpoints that the client will interact with.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoViewModel for User Information Display in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize a ViewModel to fetch and display user information using Logto in an Android application. It includes methods for retrieving ID token claims and handling exceptions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LogtoViewModel(application: Application) : AndroidViewModel(application) {\n    // ...다른 코드\n\n    // ID 토큰 클레임을 관찰하기 위한 라이브 데이터를 추가합니다\n    private val _idTokenClaims = MutableLiveData<IdTokenClaims>()\n    val idTokenClaims: LiveData<IdTokenClaims>\n        get() = _idTokenClaims\n\n    fun getIdTokenClaims() {\n        logtoClient.getIdTokenClaims { logtoException, idTokenClaims ->\n            logtoException?.let { _logtoException.postValue(it) } ?: _idTokenClaims.postValue(idTokenClaims)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom User Data from Logto in Python\nDESCRIPTION: This code snippet demonstrates how to access custom user data from the Logto userinfo endpoint. The fetchUserInfo method performs a network request to retrieve the latest user information including custom data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n(await client.fetchUserInfo()).custom_data\n```\n\n----------------------------------------\n\nTITLE: Accessing User Claims in ASP.NET Core Controller\nDESCRIPTION: Demonstrates how to access user claims and extract the user ID from the claims collection in an ASP.NET Core controller.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar claims = User.Claims;\n\n// Get the user ID\nvar userId = claims.FirstOrDefault(c => c.Type == LogtoParameters.Claims.Subject)?.Value;\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in React Native Component\nDESCRIPTION: A React Native component that implements Logto authentication flow with user info fetching. The component uses the useLogto hook to manage authentication state and display different UI based on authentication status. It handles both sign-in and sign-out functionality with user information display.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_fetch-user-info-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { fetchUserInfo, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // highlight-start\n      fetchUserInfo().then((userInfo) => {\n        setUser(userInfo);\n      });\n      // highlight-end\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in Python\nDESCRIPTION: This snippet initializes a LogtoClient with LogtoConfig, specifically including the organizations scope. The configuration enables the client to access organization-related information for authenticated users. Note that other configuration options are assumed to be provided separately.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import LogtoClient, LogtoConfig, UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        scopes=[UserInfoScope.organizations],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Logto Authentication API Routes in Next.js\nDESCRIPTION: Creates API routes for authentication by using the handleAuthRoutes method from LogtoClient. This automatically generates routes for sign-in, sign-in callback, sign-out, and user information retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.handleAuthRoutes();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Dart\nDESCRIPTION: This function asynchronously retrieves an access token for a given resource using the Logto client. It takes a resource string as input and returns a Future<AccessToken?> object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_get-resource-access-token.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<AccessToken?> getAccessToken(String resource) async {\n  var token = await logtoClient.getAccessToken(resource: resource);\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Organization IDs from ID Token\nDESCRIPTION: Example of retrieving organization IDs from the ID token claims\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Use JavaScript as an example\nconst idToken = await logto.getIdTokenClaims();\n\nconsole.log(idToken.organizations); // A string array of organization IDs\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto to Fetch User Info in Nuxt.js\nDESCRIPTION: This snippet demonstrates how to configure Logto to fetch user info by setting the fetchUserInfo option to true in the Nuxt.js configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    scopes: [UserScope.CustomData],\n    // highlight-next-line\n    fetchUserInfo: true,\n  },\n  // ...other configurations\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication SDK with Capacitor in TypeScript\nDESCRIPTION: This code snippet imports the LogtoConfig type from the @logto/capacitor package and initializes a config object used to set up Logto authentication in a Capacitor-enabled TypeScript application. Dependencies include the @logto/capacitor npm package, and valid Logto appId and endpoint values must be provided. The properties 'scopes' and 'resources' define the permissions requested and the API endpoints to be accessed, respectively. The config object serves as a core prerequisite for initializing Logto within the mobile app's authentication flow. Only placeholder values are present, so developers must supply their actual credentials for production use.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import Declarations\nDESCRIPTION: Import statements for various MDX components used throughout the tutorial document to modularize the content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-facebook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/swift/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/facebook/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with Logto Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates asynchronously fetching an access token using the `getAccessToken` method of a `logtoClient` instance. It requires the Logto client library to be initialized and configured. The method takes the unique resource indicator (URI) of the target API (e.g., 'https://shopping.your-app.com/api') as an argument and returns a promise that resolves with the access token string.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst token = await logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in React\nDESCRIPTION: This snippet shows how to set up the LogtoConfig object for a React application using @logto/react. It defines custom scopes for shopping and store operations, as well as specifies API resource URLs for these services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Using MDX Components in Kakao Guide\nDESCRIPTION: This snippet shows the usage of imported MDX components within the documentation page. `<GuideTip />` renders a tip element, and `<Integration />` renders the content from the shared integration partial, likely containing common setup instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/integrations/social/kakao/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<GuideTip />\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Logto Configuration\nDESCRIPTION: This snippet demonstrates how to set up environment variables for sensitive Logto configuration information, including the endpoint, app ID, app secret, and cookie encryption key.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNUXT_LOGTO_ENDPOINT=\"<your-logto-endpoint>\"\nNUXT_LOGTO_APP_ID=\"<your-logto-app-id>\"\nNUXT_LOGTO_APP_SECRET=\"<your-logto-app-secret>\"\nNUXT_LOGTO_COOKIE_ENCRYPTION_KEY=\"<a-random-string>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Resources in Nuxt - TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up Logto authentication resources in a Nuxt project's configuration file using TypeScript. It shows the inclusion of a 'resources' array under the 'logto' configuration, where each item is an API endpoint that requires authentication. To use this configuration, ensure both Nuxt and the Logto module are installed; this setup enables Logto to manage secure access for the specified API routes. All other Nuxt and Logto configurations remain unchanged.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineNuxtConfig({\\n  logto: {\\n    // highlight-next-line\\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\\n    // ...other configs\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status and Retrieving Access Token with Logto Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to verify if a user is authenticated using Logto's isAuthenticated() method, and then retrieves the user's access token if they are authenticated. The access token can be used for making authenticated API requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nif (isAuthenticated) {\n  (async () => {\n    const token = await logtoClient.getAccessToken();\n    console.log(token);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Module in Nuxt\nDESCRIPTION: Configuration setup for the Logto module in nuxt.config.ts, including endpoint, app credentials, and cookie encryption settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@logto/nuxt'],\n  runtimeConfig: {\n    logto: {\n      endpoint: '<your-logto-endpoint>',\n      appId: '<your-logto-app-id>',\n      appSecret: '<your-logto-app-secret>',\n      cookieEncryptionKey: '<a-random-string>',\n    },\n  },\n  // ...other configurations\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims in Next.js Page Component\nDESCRIPTION: This snippet demonstrates how to retrieve and display user claims in a Next.js page component using the getLogtoContext function from @logto/next/server-actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\n\nexport default async function Home() {\n  const { claims } = await getLogtoContext(logtoConfig);\n\n  return (\n    <main>\n      {claims && (\n        <div>\n          <h2>Claims:</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(claims).map(([key, value]) => (\n                <tr key={key}>\n                  <td>{key}</td>\n                  <td>{String(value)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in React Native\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object for a React Native application. It includes setting the appId, endpoint, and an array of API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // Add API resources\n  // highlight-start\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Client Component Triggering Server Action for Logto Token (TypeScript)\nDESCRIPTION: This is a Next.js Client Component (`'use client'`) designed to trigger a Server Action for fetching a Logto access token. It receives an asynchronous function (`onGetAccessToken`) as a prop. It renders a button which, when clicked, invokes the `onGetAccessToken` function (the Server Action), awaits the returned access token, and logs it to the browser's console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"app/get-access-token.ts\"\n'use client';\n\ntype Props = {\n  onGetAccessToken: () => Promise<string>;\n};\n\nconst GetAccessToken = ({ onGetAccessToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetAccessToken();\n        console.log(token);\n      }}\n    >\n      取得存取權杖 (查看控制台日誌)\n    </button>\n  );\n};\n\nexport default GetAccessToken;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Route in Go\nDESCRIPTION: Creates a sign-in route for a Go web application using Logto. This route generates and redirects to the Logto authorization URL, initiating the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandleFunc(\"/sign-in\", func(w http.ResponseWriter, r *http.Request) {\n    signInUri, err := logtoClient.SignIn(r.Context(), \"\")\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n    http.Redirect(w, r, signInUri, http.StatusFound)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Custom Scopes and Resources\nDESCRIPTION: Creates a LogtoConfig instance with endpoint, appId, custom scopes for shopping and store permissions, and API resource endpoints. The configuration is then used to initialize a LogtoClient instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Token Request Using HTTP POST\nDESCRIPTION: HTTP POST request example for obtaining an access token from Logto. Uses the authorization code flow with parameters for grant_type, redirect_uri, code, and resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPOST https://tenant-id.logto.app/oidc/token HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&code=10esc29BWC2qZB0acc9v8zAv9ltc2pko105tQauZ&resource=https%3A%2F%2Fresource-server.com%2Fapi\n```\n\n----------------------------------------\n\nTITLE: Manually Fetching User Information with Logto Client in Nuxt.js\nDESCRIPTION: This snippet demonstrates how to manually fetch user information using the Logto client in a Nuxt.js component. It uses the useLogtoClient() composable and handles potential errors during the fetch process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogtoClient, useState, callOnce } from '#imports';\n\nconst client = useLogtoClient();\nconst userInfo = useState(null);\n\n// Einmal aufrufen, um zu verhindern, dass es auf der Clientseite ausgeführt wird\nawait callOnce(async () => {\n  if (!client) {\n    throw new Error('Logto client ist nicht verfügbar');\n  }\n\n  if (!(await client.isAuthenticated())) {\n    return;\n  }\n\n  try {\n    userInfo.value = await client.fetchUserInfo();\n  } catch (error) {\n    console.error('Fehler beim Abrufen der Benutzerinformationen:', error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration for Capacitor in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a LogtoConfig object for use with the Logto Capacitor plugin. It includes setting the application ID, Logto endpoint, required scopes, and API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuración de SDK Logto para recursos y alcances\nDESCRIPTION: Ejemplo de configuración del SDK de Logto para especificar recursos protegidos y alcances necesarios para la aplicación cliente.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config: LogtoConfig = {\n  // ...otras configuraciones\n  resources: ['https://resource-server.com/api'],\n  scopes: ['read', 'write'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources in Logto React\nDESCRIPTION: This code demonstrates how to configure the LogtoConfig object with custom scopes and resources. It defines read and write permissions for shopping and store domains, along with their corresponding API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Chrome Extension Service Worker\nDESCRIPTION: JavaScript code to initialize the Logto client in the Chrome extension's service worker background script with endpoint and app ID configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/chrome-extension';\n\nexport const logtoClient = new LogtoClient({\n  endpoint: '<your-logto-endpoint>'\n  appId: '<your-logto-app-id>',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoProvider in React Native\nDESCRIPTION: This snippet shows how to set up the LogtoProvider component with a configuration object containing the Logto endpoint and application ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  endpoint: '<your-logto-endpoint>',\n  appId: '<your-application-id>',\n};\n\nconst App = () => (\n  <LogtoProvider config={config}>\n    <YourAppContent />\n  </LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code snippet configures NextAuth with a Logto provider. It sets up authorization parameters including scope and resource. The scope includes OpenID, offline access, profile, read, and write permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile read write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with String Scopes in Dart\nDESCRIPTION: Demonstrates how to create a LogtoConfig instance with string literal scopes for email and phone permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"email\", \"phone\"],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in React\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object with custom scopes and resources. It includes read and write permissions for shopping and store functionalities, as well as API resource URLs for both services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Configuration in Swift\nDESCRIPTION: This code creates a LogtoConfig object with a specific endpoint, app ID, scopes, and resources. It then uses this configuration to initialize a LogtoClient instance. The scopes and resources are highlighted to emphasize their customization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Configuring User Scopes and Resources with Logto Express in TypeScript\nDESCRIPTION: This snippet demonstrates setting up the LogtoExpressConfig object by specifying arrays for 'scopes' and 'resources', representing the actions a user can perform and the protected API resource URIs, respectively. The example uses TypeScript and requires the '@logto/express' package; it assumes a broader server configuration context (omitted for brevity). Key parameters are 'scopes', an array of granular permissions, and 'resources', the corresponding APIs that enforce these permissions. Inputs are static string arrays, and this configuration is consumed by the Logto middleware. Used for securing API endpoints in a Node.js/Express application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\\n\\nconst config: LogtoExpressConfig = {\\n  // ...other configs\\n  // highlight-start\\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\\n  // highlight-end\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Middleware (ASP.NET Core, C#)\nDESCRIPTION: This snippet demonstrates how to register and configure Logto authentication in an ASP.NET Core application's Program.cs file. It leverages the AddLogtoAuthentication extension method, setting the resource identifier to 'https://shopping.your-app.com/api' and specifying the required authentication scopes: 'openid', 'profile', 'offline_access', 'read', and 'write'. Dependencies include the Logto authentication package and ASP.NET Core Identity; ensure these packages are installed. Parameters customized in the options object directly impact token claims and permissions granted during authentication. Input: builder.Services, output: middleware configured for Logto authentication and proper scope enforcement. Requires .NET 6+ and the relevant Logto middleware.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Resource = \"https://shopping.your-app.com/api\";\n  options.Scopes = new string[] {\n    \"openid\",\n    \"profile\",\n    \"offline_access\",\n    \"read\",\n    \"write\"\n  };\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token for API in PHP\nDESCRIPTION: Uses the Logto client to get an access token for a specific API endpoint. The function takes the API URL as a parameter and returns the appropriate access token for that resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$accessToken = $client->getAccessToken(\"https://shopping.your-app.com/api\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Resource Indicator in ASP.NET Core\nDESCRIPTION: This snippet shows how to add Logto authentication to an ASP.NET Core application using the AddLogtoAuthentication extension method. It specifically highlights the configuration of the Resource property, which specifies the API resource indicator for authorization purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.Resource = \"https://<votre-indicateur-de-ressource-api>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Defining API Resources for Logto Express in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the `resources` property within the `LogtoExpressConfig` object for the `@logto/express` middleware. It lists the identifiers (URLs) of the API resources the application needs access to, enabling Logto to issue appropriately scoped access tokens. The configuration includes example resource URLs like 'https://shopping.your-app.com/api'. Requires the `@logto/express` package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"app.ts\"\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 添加 API 资源\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Logto Client with Organization Scope\nDESCRIPTION: Example of initializing Logto client in JavaScript with organization scope configuration\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoClient, UserScope } from '@logto/browser'; // or @logto/node, @logto/client\n\nconst logto = new LogtoClient({\n  // ...\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Authentication Request Example (Bash)\nDESCRIPTION: Example of an authentication request with resource parameter that indicates the protected resources a user can request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET https://tenant-id.logto.app/oidc/auth?response_type=code\n    &client_id=s6BhdRkqt3\n    &state=tNwzQ87pC6llebpmac_IDeeq-mCR2wLDYljHUZUAWuI\n    &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n    &resource=https%3A%2F%2Fresource-server.com%2Fapi\n    &scope=read%20write\n```\n\n----------------------------------------\n\nTITLE: Obtención de token de acceso con SDK Logto\nDESCRIPTION: Código de ejemplo utilizando el SDK de Logto para obtener un token de acceso para un recurso específico.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst accessToken = await logtoClient.getAccessToken('https://resource-server.com/api');\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with Logto Client in Go\nDESCRIPTION: This Go snippet demonstrates how to retrieve an access token for a specific resource URI using the `GetAccessToken` method of a `logtoClient` instance. It takes the resource identifier (e.g., an API endpoint) as input and returns the access token string and a potential error. Ensure the `logtoClient` is properly configured beforehand.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := logtoClient.GetAccessToken(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button Event Listener in HTML/JavaScript\nDESCRIPTION: This snippet demonstrates how to create a sign-in button in Webflow and add a click event listener to trigger the Logto sign-in process. It uses the logtoClient to initiate the sign-in flow with a specified callback URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/_implement-sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  const signInButton = document.getElementById('sign-in');\n  const onClickSignIn = () => logtoClient.signIn('https://your-awesome-site.webflow.io/callback');\n  signInButton.addEventListener('click', onClickSignIn);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in JSX\nDESCRIPTION: Imports MDX fragments and code components, then renders ConfigApiResources component with the imported code snippets as props for different resource configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token for Logto Management API in Node.js\nDESCRIPTION: This code demonstrates how to authenticate and request an access token for the Logto Management API using Node.js. It creates a POST request with the necessary headers and parameters, including the application credentials, tenant ID, and required scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/machine-to-machine/fragments/_fetch-access-token-for-logto-management-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst logtoEndpoint = 'https://your.logto.endpoint'; // Replace with your Logto endpoint\nconst tokenEndpoint = `${logtoEndpoint}/oidc/token`;\nconst applicationId = 'your-application-id';\nconst applicationSecret = 'your-application-secret';\nconst tenantId = 'your-tenant-id';\n\nconst fetchAccessToken = async () => {\n  return await fetch(tokenEndpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Basic ${Buffer.from(`${applicationId}:${applicationSecret}`).toString(\n        'base64'\n      )}`,\n    },\n    body: new URLSearchParams({\n      grant_type: 'client_credentials',\n      resource: `https://${tenantId}.logto.app/api`,\n      scope: 'all',\n    }).toString(),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Organizations Scope in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure Logto Express by importing the UserScope enum and setting up the Organizations scope in the configuration object. It uses TypeScript and the @logto/express package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Server-Side Organization Token Generation in Next.js\nDESCRIPTION: Server-side implementation for generating organization tokens using Logto configuration and Next.js server actions. Uses the getOrganizationToken function from @logto/next/server-actions package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getOrganizationToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetOrganizationToken from './get-organization-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetOrganizationToken\n        onGetOrganizationToken={async () => {\n          'use server';\n\n          return getOrganizationToken(logtoConfig, 'organization-id');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser SDK with Organization Scope\nDESCRIPTION: This code snippet demonstrates how to import the Logto Browser SDK and initialize a client instance with organization scopes. The client is attached to the window object for global access, and configured to request the Organizations user scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from 'https://esm.run/@logto/browser';\n\nwindow.logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organization Scopes in Kotlin\nDESCRIPTION: Shows how to initialize LogtoConfig object with Organizations scope enabled. This configuration allows access to organization-related features in the Logto authentication system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(UserScope.Organizations),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Configuration - Swift\nDESCRIPTION: This Swift snippet shows how to set up the Logto client by creating a LogtoConfig object with your authentication endpoint, application ID, and an array of resource API URLs. It requires the Logto SDK for Swift to be installed and imported. The 'config' object is initialized using provided application details, followed by creating a 'client' instance using this configuration. Inputs include your endpoint URL, app ID, and API resource URLs; outputs are the configured client instance for authentication tasks. Ensure that all required values (endpoint, appId, and resources) are correctly set.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // 예: http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-next-line\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // API 리소스 추가\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in Vue.js\nDESCRIPTION: This code demonstrates how to use the Logto authentication library with Vue.js. It shows importing the required Logto components, checking the authentication status, and retrieving an access token for a specific API endpoint when the user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type UserInfoResponse } from '@logto/vue';\n\nconst { isAuthenticated, getAccessToken } = useLogto();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const accessToken = await getAccessToken('https://shopping.your-app.com/api');\n    console.log(accessToken);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Next.js with Logto\nDESCRIPTION: This code snippet demonstrates how to display authenticated user information in a Next.js application. It uses the auth() function to retrieve the user session and renders the user claims in a table format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from '@/auth';\n\nexport default async function Home() {\n  const session = await auth();\n\n  return (\n    <main>\n      {session?.user && (\n        <div>\n          <h2>Revendications :</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Nom</th>\n                <th>Valeur</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(session.user).map(([key, value]) => (\n                <tr key={key}>\n                  <td>{key}</td>\n                  <td>{String(value)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Ruby\nDESCRIPTION: This snippet shows how to create a LogtoClient instance with custom scopes and resources. The code configures specific permissions for shopping and store APIs, enabling the client to access different endpoints with appropriate authorization levels.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: This snippet demonstrates how to create a LogtoClient instance with custom scopes and resources. The configuration specifies read and write permissions for both shopping and store services, along with their respective API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing getAuthorizationUri for GitHub Social Connector in TypeScript\nDESCRIPTION: This function generates a redirect URL for user authentication in the GitHub social connector. It uses the authorization endpoint, client ID, redirect URI, and state for CSRF protection.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/develop-your-connector/implement-connectors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAuthorizationUri = async ({ state, redirectUri }) => {\n  const queryParameters = new URLSearchParams({\n    client_id: config.clientId, // `config` contiene las credenciales de tu aplicación de GitHub\n    redirect_uri: redirectUri,\n    state,\n  });\n\n  return `${authorizationEndpoint}?${queryParameters.toString()}`;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Resource in ASP.NET Core (C#)\nDESCRIPTION: This snippet configures the Logto authentication middleware in an ASP.NET Core project via the AddLogtoAuthentication extension method. It sets the Resource property to specify the targeted API resource, which determines how access tokens are validated. This requires the Logto ASP.NET Core authentication library as a prerequisite, and is typically placed inside the Program.cs file when setting up dependency injection. The key parameter, options.Resource, should be replaced with your actual API audience identifier. Inputs include authentication configuration options; outputs are registered authentication services. Use this pattern when securing APIs with OAuth 2.0 and Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.Resource = \"https://<seu-indicador-de-recurso-de-api>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Using AuthorizeView Component in Razor Page\nDESCRIPTION: This CSHTML snippet demonstrates how to use the `AuthorizeView` component in a Razor page (e.g., `Home.razor`) to conditionally render different UI elements based on the user's authentication status. The `Authorized` template is shown when the user is logged in, and the `NotAuthorized` template is shown otherwise. Buttons for signing out and signing in are placed within the respective templates.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: cshtml\nCODE:\n```\n@using Microsoft.AspNetCore.Components.Authorization\n@page \"/\"\n\n<AuthorizeView>\n    <Authorized>\n        @* 已登录视图 *@\n        <button @onclick=\"OnLogoutButtonClickAsync\">\n            Sign out\n        </button>\n    </Authorized>\n    <NotAuthorized>\n        @* 未认证视图 *@\n        <button @onclick=\"OnLoginButtonClickAsync\">\n            Sign in\n        </button>\n    </NotAuthorized>\n</AuthorizeView>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser SDK Client in HTML\nDESCRIPTION: This snippet demonstrates how to import the Logto browser SDK from an ESM CDN and initialize a client with the necessary configuration parameters. It sets up the endpoint, application ID, required scopes, and API resources to enable authentication in a web application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Import `@logto/browser` SDK from the jsdelivr CDN\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-application-id>',\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info for Custom Claims (Kotlin)\nDESCRIPTION: This snippet demonstrates how to fetch user info to access custom claims that are not included in the ID token. It uses the fetchUserInfo method of the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.fetchUserInfo {_, userInfoResponse ->\n    println(\"UserInfoResponse:$userInfoResponse\")\n}\n// Now you can access the claim `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Manually Fetching User Information in Next.js API Route\nDESCRIPTION: This code snippet demonstrates how to manually fetch user information in a Next.js API route using the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute(\n  (request, response) => {\n    if (!request.user.isAuthenticated) {\n      response.status(401).json({ message: 'Unauthorized' });\n\n      return;\n    }\n\n    response.json({\n      userInfo: request.user.userInfo,\n    });\n  },\n  { fetchUserInfo: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information in Vanilla JS\nDESCRIPTION: Fetch and display user information after successful authentication in a Vanilla JavaScript application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchUserInfo = async () => {\n  const user = await logtoClient.fetchUserInfo();\n  console.log(user);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Connector Variable in JSX\nDESCRIPTION: This snippet defines a dynamic 'connector' variable using JSX syntax, which is likely used throughout the document to reference the specific SSO connector being integrated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/_template-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = '${connector}';\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up Logto Express configuration with custom scopes and resources. It defines specific access scopes for shopping and store operations (read and write), and specifies resource URLs for the shopping and store APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring User Scopes in Logto Capacitor SDK with TypeScript\nDESCRIPTION: This snippet shows how to create a LogtoConfig object and set the \"scopes\" property to include the organizations scope using the UserScope enum. It requires the @logto/capacitor library as a dependency and the LogtoConfig type for configuration typing. The configuration object can be used for authentication or authorization where specific user organizational access is required. The code expects the rest of the configuration fields to be filled as necessary, and it supports extension for additional scopes or settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\\n\\nconst config: LogtoConfig = {\\n  // ...other configs\\n  scopes: [UserScope.Organizations],\\n};\n```\n\n----------------------------------------\n\nTITLE: Rotating OIDC Cookie Keys in Logto OSS using CLI\nDESCRIPTION: CLI command to generate a new OIDC cookie key. The new key will be automatically used after reboot.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/rotate-signing-keys.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogto db config rotate oidc.cookieKeys\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli db config rotate oidc.cookieKeys\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db config rotate oidc.cookieKeys\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express Claim Scopes in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to specify 'email' and 'phone' claim scopes in the LogtoExpressConfig object for Logto Express authentication middleware. It assumes you have the Logto Express SDK and TypeScript configured in your project. The 'scopes' array defines which user information claims will be available to your application after authentication. The input is a config object and the expected output is in the behavior of the middleware using those scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  scopes: ['email', 'phone'],\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token with Logto Client (TypeScript)\nDESCRIPTION: This snippet shows how to asynchronously call the `getOrganizationToken` method on a `logtoClient` instance. It requires a valid `organizationId` as input and returns a Promise that resolves to the organization-specific access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a new instance of the LogtoClient using essential configuration options such as 'appId', 'endpoint', and requested user scopes. The snippet relies on the '@logto/browser' package (or a custom package name provided via props), and makes use of the 'UserScope' enum to specify authentication scopes like Email, Phone, CustomData, and Identities. Expected inputs include valid application identifiers and endpoints; upon execution, it prepares an authentication client for subsequent authentication flows. The snippet needs to be placed within a project that has the appropriate Logto library installed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\\n\\nconst logtoClient = new LogtoClient({\\nappId: '<your-application-id>',\\nendpoint: '<your-logto-endpoint>',\\nscopes: [UserScope.Email, UserScope.Phone, UserScope.CustomData, UserScope.Identities],\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Hooks for User Info Fetching\nDESCRIPTION: This snippet demonstrates how to configure the Logto hooks in SvelteKit to fetch user information. It sets the fetchUserInfo option to true, enabling the use of the fetchUserInfo method results.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    /* Logto config */\n  },\n  {\n    /* Cookie config */\n  },\n  {\n    fetchUserInfo: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Module in Nuxt Configuration\nDESCRIPTION: Configuration code to register and configure the Logto module in a Nuxt.js application by adding it to the modules array and providing necessary configuration options in the runtime config.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // highlight-start\n  modules: ['@logto/nuxt'],\n  runtimeConfig: {\n    logto: {\n      endpoint: '<your-logto-endpoint>',\n      appId: '<your-logto-app-id>',\n      appSecret: '<your-logto-app-secret>',\n      cookieEncryptionKey: '<a-random-string>',\n    },\n  },\n  // highlight-end\n  // ...other configurations\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token for API Resource in Node.js\nDESCRIPTION: This snippet demonstrates how to fetch an access token for a custom API resource using Node.js. It includes setting up the request parameters and sending a POST request to the token endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/machine-to-machine/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst logtoEndpoint = 'https://your.logto.endpoint';\nconst tokenEndpoint = `${logtoEndpoint}/oidc/token`;\nconst applicationId = 'your-application-id';\nconst applicationSecret = 'your-application-secret';\n\nconst fetchAccessToken = async () => {\n  return await fetch(tokenEndpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Basic ${Buffer.from(`${applicationId}:${applicationSecret}`).toString(\n        'base64'\n      )}`,\n    },\n    body: new URLSearchParams({\n      grant_type: 'client_credentials',\n      resource: 'https://shopping.api',\n      scope: 'read:products write:products',\n    }).toString(),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-In and Sign-Out Routes in Rails\nDESCRIPTION: This snippet demonstrates how to configure routes for sign-in and sign-out actions in a Rails application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-start\n  get \"/sign_in\", to: \"sample#sign_in\"\n  get \"/sign_out\", to: \"sample#sign_out\"\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto to Fetch User Information in SvelteKit\nDESCRIPTION: This snippet demonstrates how to configure the Logto handler in SvelteKit to fetch user information. It sets the fetchUserInfo option to true, which will include additional user data in the locals.user object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    /* Logto Configuration */\n  },\n  {\n    /* Cookie Configuration */\n  },\n  {\n    fetchUserInfo: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organization Scope in Python\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with custom configuration, specifically setting the scope to include user organization information. It imports necessary classes from the logto module and configures the client with UserInfoScope.organizations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import LogtoClient, LogtoConfig, UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        scopes=[UserInfoScope.organizations],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out in Flutter with Logto\nDESCRIPTION: This snippet demonstrates how to add a sign-out button to a Flutter app and implement the sign-out functionality using the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  final postSignOutRedirectUri = 'io.logto//home';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signOutButton = TextButton(\n      onPressed: () async {\n        await logtoClient.signOut(postSignOutRedirectUri);\n        render();\n      },\n      child: const Text('Sign Out'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n            signOutButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in Flutter Widget\nDESCRIPTION: This code snippet shows the build method of a Flutter widget that integrates Logto for user authentication. It includes buttons for signing in, signing out, and retrieving user information based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_fetch-userinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget getUserInfoButton = TextButton(\n      onPressed: () async {\n        // highlight-start\n        final userInfo = await logtoClient.getUserInfo();\n        print(userInfo);\n        // highlight-end\n      },\n      child: const Text('Get user info'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n            isAuthenticated == true ? getUserInfoButton : const SizedBox.shrink(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Scopes and Resources in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates the initialization of a `LogtoConfig` object. It highlights setting the `scopes` property to request specific permissions (e.g., 'read', 'write') and the `resources` property to specify the target API endpoints (e.g., shopping and store APIs) for which these permissions are requested. This configuration is crucial for defining the access level and target services during Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin title=\"LogtoViewModel.kt\"\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(\"read\", \"write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Tencent SMS Connector Types\nDESCRIPTION: Type definitions for the Tencent SMS connector configuration, including the main config structure and template properties for different usage scenarios.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sms/tencent-sms/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessKeyId\": \"string\",\n  \"accessKeySecret\": \"string\",\n  \"signName\": \"string\",\n  \"region\": \"string\",\n  \"sdkAppId\": \"string\",\n  \"templates\": [\n    {\n      \"templateCode\": \"string\",\n      \"usageType\": \"Register | SignIn | ForgotPassword | Generic\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token in PHP using Logto Client\nDESCRIPTION: Demonstrates retrieving an access token for a specific API endpoint using the Logto PHP client. The getAccessToken method takes the API URL as a parameter and returns the access token for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$accessToken = $client->getAccessToken(\"https://shopping.your-app.com/api\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto\nDESCRIPTION: Configuration example showing how to request additional scopes like email and phone in the Logto configuration object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in Python\nDESCRIPTION: This code initializes a LogtoClient object with a LogtoConfig that includes API resources. The resources parameter is used to specify multiple API endpoints that the client will have access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], # Adicionar recursos de API\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto to Fetch User Information\nDESCRIPTION: Configures the Logto SvelteKit integration to automatically fetch user information. Setting the fetchUserInfo option to true enables access to additional user claims that require network requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    /* Logto config */\n  },\n  {\n    /* Cookie config */\n  },\n  {\n    fetchUserInfo: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration for React Native\nDESCRIPTION: This snippet creates a LogtoConfig object with essential settings for authenticating and authorizing a React Native app using Logto. It specifies the app ID, Logto endpoint, required scopes, and API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Organization Token Management in Vue\nDESCRIPTION: TypeScript code that initializes Logto integration in a Vue component, fetches organization IDs from the user's ID token claims, and provides a function to retrieve organization-specific tokens. It demonstrates the use of Vue's composition API with Logto's authentication hooks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto } from '@logto/vue';\nimport { onMounted, ref } from 'vue';\n\nconst { getOrganizationToken, getOrganizationTokenClaims, getIdTokenClaims } = useLogto();\nconst organizationIds = ref<string[]>();\n\nonMounted(async () => {\n  const claims = await getIdTokenClaims();\n\n  console.log('ID token claims', claims);\n  organizationIds.value = claims?.organizations;\n});\n\nconst onClickFetchOrganizationToken = async (organizationId: string) => {\n  console.log('raw token', await getOrganizationToken(organizationId));\n  console.log('claims', await getOrganizationTokenClaims(organizationId));\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Profile After Logto Authentication in React Native (TypeScript)\nDESCRIPTION: This snippet defines a React Native component that checks authentication status with the useLogto hook, fetches user information asynchronously when authenticated, and conditionally renders either profile information or authentication buttons. It depends on React, useState, useEffect, and the @logto/rn library. Key parameters include the authentication state, user profile fields (name, email), and handler functions for sign in and sign out. The component expects Logto to be properly initialized in the project. User data is displayed when authenticated; otherwise, sign-in and sign-out controls are shown. Limitations: the signIn and signOut functions should be imported or defined elsewhere, and the UI uses a <div> which may not be supported natively in pure React Native.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_fetch-user-info-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { fetchUserInfo, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // highlight-start\n      fetchUserInfo().then((userInfo) => {\n        setUser(userInfo);\n      });\n      // highlight-end\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"退出\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"登录\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Auth.js v5 Middleware for Session Management\nDESCRIPTION: Implements an optional middleware to maintain the Auth.js session active across page navigations in a Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { auth as middleware } from '@/auth';\n```\n\n----------------------------------------\n\nTITLE: Accessing Organization Roles from ID Token\nDESCRIPTION: Example of retrieving organization roles from the ID token claims\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Use JavaScript as an example\nconst idToken = await logto.getIdTokenClaims();\n\nconsole.log(idToken.organization_roles); // A string array of organization roles\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Roles from ID Token\nDESCRIPTION: Example of how to extract organization roles from the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Usar JavaScript como ejemplo\nconst idToken = await logto.getIdTokenClaims();\n\nconsole.log(idToken.organization_roles); // Un array de cadenas de roles de organización\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resource URL in Angular Authentication\nDESCRIPTION: This snippet shows how to set up the Angular application configuration with HTTP client and authentication providers. It specifically highlights how to specify a resource URL that the authenticated client can access, which is important for API authorization scenarios.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Multiple API Resources in Python\nDESCRIPTION: Initializes a LogtoClient instance with multiple API resources specified in the LogtoConfig. This configuration allows the client to access multiple API endpoints during authentication flows.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], # Add API resources\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Auth Provider with Resource and Scopes\nDESCRIPTION: This Typescript snippet configures the root providers for an Angular application within `appConfig`. It specifically sets up the Logto authentication provider (`provideAuth`) using `buildAngularAuthConfig`, defining the target API `resource` endpoint ('https://your-api-resource.com') and the required OAuth `scopes` like `openid`, `profile`, `offline_access`, `read`, and `write`. This ensures the application requests the necessary permissions during the authentication flow. It also includes `provideHttpClient` configured with `withFetch` for making HTTP requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"app/app.config.ts\"\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        scopes: ['openid', 'profile', 'offline_access', 'read', 'write'],\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionStorage Adapter\nDESCRIPTION: Custom implementation of Logto's Storage interface using Gin sessions. Includes methods for getting and setting session values with proper type handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_create-session-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/gin-contrib/sessions\"\n)\n\ntype SessionStorage struct {\n\tsession sessions.Session\n}\n\nfunc (storage *SessionStorage) GetItem(key string) string {\n\tvalue := storage.session.Get(key)\n\tif value == nil {\n\t\treturn \"\"\n\t}\n\treturn value.(string)\n}\n\nfunc (storage *SessionStorage) SetItem(key, value string) {\n\tstorage.session.Set(key, value)\n\tstorage.session.Save()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Handlers in PageModel\nDESCRIPTION: Adds sign-in and sign-out handler methods to the Index page model. The handlers use authentication challenges and sign-out operations with redirect configuration back to the home page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-razor/_implement-buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class IndexModel : PageModel\n{\n  public async Task OnPostSignInAsync()\n  {\n    await HttpContext.ChallengeAsync(new AuthenticationProperties\n    {\n      RedirectUri = \"/\"\n    });\n  }\n\n  public async Task OnPostSignOutAsync()\n  {\n    await HttpContext.SignOutAsync(new AuthenticationProperties\n    {\n      RedirectUri = \"/\"\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected API Route with Logto Authentication in TypeScript\nDESCRIPTION: This code snippet creates a protected API route using Logto authentication. It checks if the user is authenticated, retrieves an access token for a specific resource, and returns the user information. The route is wrapped with Logto's API route handler for seamless integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute(\n  (request, response) => {\n    if (!request.user.isAuthenticated) {\n      response.status(401).json({ message: 'Unauthorized' });\n\n      return;\n    }\n\n    // Zugangstoken hier abrufen\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  },\n  {\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoProvider with Configuration in React Native\nDESCRIPTION: Configures and implements the LogtoProvider component with specific user scopes for authentication. The configuration includes application ID, endpoint URL, and various user scopes like email, phone, custom data, identities, and organizations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n  ],\n};\n\nconst App = () => <LogtoProvider config={config}>{/* Your app content */}</LogtoProvider>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Scopes and Resources in Go\nDESCRIPTION: This code snippet demonstrates how to initialize a Logto client configuration in Go, specifically setting up scopes and resources. It shows how to define multiple scopes for different levels of access and specify multiple resource endpoints for API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client Configuration with Custom Scopes in Go\nDESCRIPTION: Shows how to create a LogtoConfig struct instance with custom scope parameters 'email' and 'phone'. This configuration is used to specify which OAuth scopes the client will request during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Organization Scopes\nDESCRIPTION: Example demonstrating how to initialize a Logto client with organization scopes, including newly added permission scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/organization-template/configure-organization-template.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nnew LogtoClient({\n  appId: 'your-app-id',\n  endpoint: 'your-logto-endpoint',\n  scopes: [\n    'urn:logto:scope:organizations',\n    // ... deine anderen bestehenden Organisationsberechtigungsumfänge,\n    'new-organization-permission-scope',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object with custom scopes in Kotlin. It shows two ways to specify scopes: using string literals or predefined UserScope enum values. This configuration is crucial for defining the permissions and data access your application requires during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // or `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with WeChat Plugin in Swift\nDESCRIPTION: This Swift code demonstrates how to initialize the `LogtoClient` by passing the `LogtoSocialPluginWechat` instance into the `socialPlugins` array within the initializer. This step registers the WeChat social login plugin with the Logto SDK, enabling WeChat Native authentication capabilities within the iOS application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet logtoClient = LogtoClient(\n  useConfig: config,\n  socialPlugins: [LogtoSocialPluginWechat()]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Provider in Angular\nDESCRIPTION: This snippet demonstrates how to configure the Logto authentication provider in an Angular application. It sets up the HTTP client with fetch and configures the auth provider with custom resource and scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        scopes: ['openid', 'profile', 'offline_access', 'read', 'write'],\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Session Middleware\nDESCRIPTION: Configures required express-session middleware with cookie settings and session secret for authentication state management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\n\napp.use(cookieParser());\napp.use(\n  session({\n    secret: 'random_session_key', // Replace with your own secret\n    cookie: { maxAge: 14 * 24 * 60 * 60 * 1000 }, // In miliseconds\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token and Claims in PHP\nDESCRIPTION: This code demonstrates how to get an organization token or its claims using the Logto client in PHP. It requires a valid organization ID, which can be found in the ID token claim 'organizations'. The code provides two alternative methods: one for retrieving the full token and another for obtaining just the claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# Replace the parameter with a valid organization ID.\n# Valid organization IDs for the user can be found in the ID token claim `organizations`.\n$organizationToken = $client->getOrganizationToken(organization_id);\n# or\n$claims = $client->getOrganizationTokenClaims(organization_id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources in Logto React\nDESCRIPTION: This code demonstrates how to configure the LogtoConfig object with custom scopes and API resource endpoints for a React application using Logto authentication. The example shows setting up multiple scopes for reading and writing operations across different services, along with their corresponding API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Resulting Access Token with Custom Claims\nDESCRIPTION: Example of the final JSON Web Token (JWT) that includes the custom impersonation_context claim with the metadata provided during the token request. This token allows for better auditing and understanding of impersonation activities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"alex123\",\n  \"aud\": \"https://api.techcorp.com/customer-data\",\n  \"impersonation_context\": {\n    \"ticket_id\": \"TECH-1234\",\n    \"reason\": \"Resource access issue\",\n    \"support_engineer\": \"sarah789\"\n  }\n  // ... other standard claims\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In and Sign Out in SwiftUI with Logto iOS SDK\nDESCRIPTION: This code snippet demonstrates how to implement sign-in and sign-out functionality in a SwiftUI view using the Logto iOS SDK. It uses the client.signInWithBrowser() method for sign-in and client.signOut() for sign-out, updating the authentication state accordingly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Button(\"Sign Out\") {\n          Task { [self] in\n            await client.signOut()\n            isAuthenticated = false\n          }\n        }\n      } else {\n        Button(\"Sign In\") {\n          Task { [self] in\n            do {\n              try await client.signInWithBrowser(redirectUri: \"${props.redirectUris[0] ?? 'io.logto://callback'}\")\n              isAuthenticated = true\n            } catch let error as LogtoClientErrors.SignIn {\n              // error occured during sign in\n            } catch {\n              // other errors\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes in Logto React SDK - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the LogtoConfig and UserScope types from '@logto/react', and then configure a LogtoConfig object to include organization-level scopes for user authentication. The 'scopes' property is set to include 'UserScope.Organizations', ensuring that authentication and authorization requests can request organization-based permissions. Dependencies include the '@logto/react' library. The key parameter is 'scopes', which determines the OAuth scopes to request. The output is a 'config' object suitable for initializing authentication features in a React application. Ensure that the scope provided is supported by your Logto configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Tokens with Logto Client in Python\nDESCRIPTION: This snippet demonstrates two ways to work with access tokens in a Flask application using Logto's client SDK. The first method retrieves the full access token for a specific API endpoint, while the second method extracts the claims (decoded payload) from the token for validation and authorization purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naccessToken = await client.getAccessToken(\"https://shopping.your-app.com/api\")\n# or\nclaims = await client.getAccessTokenClaims(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Running the Logto Tunnel CLI Command with Local Development Server\nDESCRIPTION: Bash commands showing how to use the logto-tunnel tool to connect a local development server hosting custom sign-in UI (at port 4000) to a Logto Cloud endpoint using CLI or npx.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlogto-tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://foobar.logto.app/\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://foobar.logto.app/\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Logto Access Token Components in JSX\nDESCRIPTION: This snippet imports and uses Logto components for fetching an access token. It includes a reusable FetchAccessTokenForApiResources component and a GetAccessTokenCode component for displaying the actual code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Configuration for React Native in TypeScript\nDESCRIPTION: This snippet defines the `LogtoConfig` object used to initialize the Logto React Native SDK. It requires replacing placeholders for `appId` and `endpoint` with actual values from your Logto setup. The configuration specifies requested permission `scopes` (e.g., 'read', 'write') and target API `resources` for which access tokens will be requested. This configuration is typically set up in the main application file, like `App.tsx`.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"App.tsx\"\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['read', 'write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Handling in Next.js with Logto\nDESCRIPTION: This code configures NextAuth to include the access token in the session object. It uses callbacks to inject the access token into the token and session objects for later use in API requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // ...\n  callbacks: {\n    async jwt({ token, account }) {\n      if (account) {\n        token.accessToken = account.access_token;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      // 세션 객체에 액세스 토큰을 주입합니다\n      session.accessToken = token.accessToken;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and API Resources in JavaScript\nDESCRIPTION: This snippet shows how to create a new LogtoClient instance with custom scopes and API resources. It sets up access permissions for shopping and store operations, and specifies the API endpoints for these resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 添加 API 资源 (API resources)\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler in SvelteKit\nDESCRIPTION: Sets up the Logto authentication handler with custom scopes and API resource endpoints. The configuration specifies read and write permissions and defines multiple API resource URLs that the authentication will protect.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization Token Management with Logto in Vue.js\nDESCRIPTION: This TypeScript code utilizes the Logto Vue SDK to manage organization authentication tokens. It extracts organization IDs from the user's ID token claims and provides a function to fetch organization-specific tokens on demand.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto } from '@logto/vue';\nimport { onMounted, ref } from 'vue';\n\nconst { getOrganizationToken, getOrganizationTokenClaims, getIdTokenClaims } = useLogto();\nconst organizationIds = ref<string[]>();\n\nonMounted(async () => {\n  const claims = await getIdTokenClaims();\n\n  console.log('ID token claims', claims);\n  organizationIds.value = claims?.organizations;\n});\n\nconst onClickFetchOrganizationToken = async (organizationId: string) => {\n  console.log('raw token', await getOrganizationToken(organizationId));\n  console.log('claims', await getOrganizationTokenClaims(organizationId));\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Organizations Scope in TypeScript\nDESCRIPTION: This code sets up NextAuth.js with Logto as an authentication provider, configuring it to request the organizations scope in addition to standard OpenID Connect scopes. It exports the handlers, signIn, signOut, and auth functions for use in the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access urn:logto:scope:organizations',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Flutter Web Auth 2\nDESCRIPTION: This XML snippet shows how to update the AndroidManifest.xml file to include the necessary activity for flutter_web_auth_2. It adds the CallbackActivity with intent filters for handling authentication callbacks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<manifest>\n<application>\n\n  <!-- add the com.linusu.flutter_web_auth_2.CallbackActivity activity -->\n  <activity\n    android:name=\"com.linusu.flutter_web_auth_2.CallbackActivity\"\n    android:exported=\"true\">\n    <intent-filter android:label=\"flutter_web_auth_2\">\n      <action android:name=\"android.intent.action.VIEW\" />\n      <category android:name=\"android.intent.category.DEFAULT\" />\n      <category android:name=\"android.intent.category.BROWSABLE\" />\n      <data android:scheme=\"YOUR_CALLBACK_URL_SCHEME_HERE\" />\n    </intent-filter>\n  </activity>\n\n</application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code snippet sets up NextAuth.js with Logto as an authentication provider. It configures the authorization parameters with specific scopes (openid, offline_access, profile, read, write) and a resource URL for API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile read write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto in Nuxt Application - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the Logto authentication provider within the nuxt.config.ts file. It sets the scopes (such as 'read' and 'write') required for access, as well as resource URIs for permitted APIs. Dependencies include a Nuxt project with the Logto module installed. The 'scopes' array defines the permissions granted to authenticated users, and 'resources' contains API endpoints the app can access. Adjust these parameters as needed to match your application's required permissions and endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication in Vue.js with TypeScript\nDESCRIPTION: This snippet shows how to use the createLogto function from @logto/vue to set up authentication in a Vue.js application. It includes configuration for scopes and resources, which are important for defining access permissions and API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Middleware in SvelteKit\nDESCRIPTION: This code example shows how to configure the Logto authentication handler in a SvelteKit hooks.server.ts file. It specifies custom scopes ('read', 'write') and resources to control API access permissions for different endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Organization Scope in Logto React Native Config (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to configure the Logto React Native SDK by importing `LogtoConfig` and `UserScope` from `@logto/rn`. It defines a `config` object where the `scopes` array is set to include `UserScope.Organizations`, enabling the application to request organization-related permissions during the Logto authentication flow. This config object is typically passed when initializing the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"App.tsx\"\nimport { LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Resources in Vue Application - TypeScript\nDESCRIPTION: This snippet demonstrates the integration of the Logto authentication library into a Vue.js application using TypeScript. It shows the use of the createLogto function with configuration that specifies which API resources should be protected by authentication. The 'resources' array parameter lists endpoint URLs that require authentication through Logto. Dependencies include Vue, @logto/vue, and any additional Logto configuration relevant to your project. The expected input is an array of resource API URLs, and this enables authenticated access control for those endpoints within the app.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token for API Resource in Logto\nDESCRIPTION: This code snippet shows how to fetch an access token for an API resource using the Logto client. It uses the 'getAccessToken' API and includes a code example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in Python\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with multiple API resources. The resources array specifies the API endpoints that the client will have access to after authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], # 添加 API 资源 (API resources)\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Flowchart: Social Sign-up without Verified Email Address\nDESCRIPTION: This flowchart shows the sign-up process when the social identity doesn't provide a verified email address. The user must enter and verify an email address, then provide a username.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-up-and-sign-in/social-sign-in.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n   A[Authenticate with social identity] --> B{{Contains verified email address?}}\n   B -- No --> C[Enter email address]\n   C --> D[Enter verification code]\n   D --> E[Enter username]\n   E --> F[Successful sign-up]\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Handler in SvelteKit\nDESCRIPTION: Sets up the Logto authentication handler for SvelteKit with organization scopes. The code imports necessary dependencies and configures the handle function with specific user scope settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto, UserScope } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: [UserScope.Organisations],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Feishu Callback URI Configuration\nDESCRIPTION: The callback URL format that needs to be configured in Feishu's Security Settings. The URL consists of the Logto endpoint and connector ID, which can be found in the Logto Console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/feishu-web/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n${logto_endpoint}/callback/${connector_id}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims in Next.js Page Component\nDESCRIPTION: This code snippet demonstrates how to retrieve and display user claims in a Next.js page component using the getLogtoContext function from @logto/next/server-actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\n\nexport default async function Home() {\n  const { claims } = await getLogtoContext(logtoConfig);\n\n  return (\n    <main>\n      {claims && (\n        <div>\n          <h2>クレーム (Claims):</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>名前</th>\n                <th>値</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(claims).map(([key, value]) => (\n                <tr key={key}>\n                  <td>{key}</td>\n                  <td>{String(value)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Fetching in Logto Express Configuration\nDESCRIPTION: This snippet demonstrates how to enable fetching of user information in the Logto Express configuration. It sets the fetchUserInfo option to true.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // highlight-next-line\n  fetchUserInfo: true,\n  // ...otras configuraciones\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Match Mode in Logto User Search\nDESCRIPTION: This example demonstrates how to override the match mode for specific fields in a Logto user search query.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n  ['search.primaryEmail', 'tom%'], // Like mode\n  ['mode.primaryEmail', 'like'],\n  ['search.phone', '0{3,}'], // Posix mode\n  ['joint', 'and'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration for Capacitor in TypeScript\nDESCRIPTION: This code sets up the configuration for the Logto SDK in a Capacitor project. It specifies the application ID, Logto endpoint, required scopes, and protected resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to asynchronously fetch an access token using the Logto client. It specifies a target API endpoint for which the token is requested.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Implementing Organizations Component with Logto React SDK\nDESCRIPTION: A React component that fetches organization IDs from a user's ID token claims and renders them in a list. For each organization, it provides a button to retrieve the organization token and log it to the console. The component uses Logto's authentication hooks to verify the user is authenticated before accessing their organization data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('Revendications du jeton d'identifiant', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  console.log('jeton brut', await getOrganizationToken(organizationId));\n                }}\n              >\n                récupérer le jeton (voir la console)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the scopes and resources for Logto authentication. It sets up read and write permissions for shopping and store functionalities, along with the corresponding API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth 2.0 Token\nDESCRIPTION: Function to revoke a previously issued token by making a POST request to the revocation endpoint. Requires the revocation endpoint URL, client ID, and the token to be revoked. Returns void or throws an error if revocation fails.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/sdk-conventions/core-sdk-conventions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrevoke({revocationEndpoint, clientId, token})\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Python Package using pip or poetry\nDESCRIPTION: Command for installing the Logto package in a Python project. The command demonstrates installation using pip, with an alternative comment showing how to use poetry or other package managers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install logto # or `poetry add logto` or whatever you use\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Tokens in Sign-In Callback Page\nDESCRIPTION: This React component shows how to clear cached tokens in the sign-in callback page when using the Logto SDK. It uses the useLogto and useHandleSignInCallback hooks to manage the sign-in process and token clearing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/one-time-token.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// React example\nimport { useHandleSignInCallback, useLogto } from '@logto/react';\nimport { useEffect } from 'react';\n\nconst Callback = () => {\n  const { clearAllTokens } = useLogto();\n\n  useEffect(() => {\n    void clearAllTokens();\n  }, [clearAllTokens]);\n\n  useHandleSignInCallback(() => {\n    // Navigate to your home page\n  });\n\n  return <>Please wait...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating API Routes for Logto Authentication in Next.js\nDESCRIPTION: This code creates API routes for handling Logto authentication in a Next.js application. It uses the handleAuthRoutes method from the initialized logtoClient to automatically generate routes for sign-in, sign-in callback, sign-out, and user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.handleAuthRoutes();\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoClient with Organizations Scope in PHP\nDESCRIPTION: This snippet demonstrates how to initialize a LogtoClient with the organizations scope permission. The highlighted lines show the required import statement for UserScope and how to add the organizations scope to the client configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// highlight-next-line\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    scopes: [UserScope::organizations], // 添加权限 (Scopes)\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Logto Configuration\nDESCRIPTION: Environment variable setup for Logto integration with Nuxt.js, storing sensitive information like endpoint URL, app ID, app secret, and cookie encryption key in a .env file for better security.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNUXT_LOGTO_ENDPOINT=\"<your-logto-endpoint>\"\nNUXT_LOGTO_APP_ID=\"<your-logto-app-id>\"\nNUXT_LOGTO_APP_SECRET=\"<your-logto-app-secret>\"\nNUXT_LOGTO_COOKIE_ENCRYPTION_KEY=\"<a-random-string>\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional User Claims in ERB Template\nDESCRIPTION: ERB template that displays extended user information including name, email, and phone number when authenticated. This example demonstrates how to access the additional claims requested through custom scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>Name: <%= @client.id_token_claims[\"name\"] %></p>\n  <p>Email: <%= @client.id_token_claims[\"email\"] %></p>\n  <p>Phone: <%= @client.id_token_claims[\"phone\"] %></p>\n<% else %>\n  <p>Please sign in</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Scope in Logto Config - Go\nDESCRIPTION: Demonstrates how to initialize a LogtoConfig struct with the organizations scope. The configuration includes the UserScopeOrganizations value from the core package to enable organization-related functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Scopes: []string{core.UserScopeOrganizations},\n}\n```\n\n----------------------------------------\n\nTITLE: Discord OAuth Configuration Parameters for Logto\nDESCRIPTION: This table outlines the required configuration parameters for the Discord OAuth connector in Logto, including clientId, clientSecret, and scope, along with their data types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/integrations/social/discord/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 名前         | タイプ |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n| scope        | string |\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Organization Scope - JavaScript\nDESCRIPTION: Initialize a Logto client with organization scopes to enable organization-related authentication features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoClient, UserScope } from '@logto/browser';\n\nconst logto = new LogtoClient({\n  // ...\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to initialize a `LogtoConfig` object. It specifically shows setting the `scopes` property to request 'read' and 'write' permissions and the `resources` property to specify the target API endpoints ('https://shopping.your-app.com/api' and 'https://store.your-app.com/api') for which the access token should be valid. This configuration is typically used when setting up the Logto client for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin title=\"LogtoViewModel.kt\"\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(\"read\", \"write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Application with Authentication and Resource\nDESCRIPTION: This code snippet configures an Angular application by providing necessary services, including HTTP client and authentication. It specifically highlights the addition of a custom API resource for authentication purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Organization Permissions with Logto Management API\nDESCRIPTION: This code snippet demonstrates how to use the Logto Management API to fetch a user's organization permissions. It's useful for dynamically checking permission changes during a session.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/configure-organization-template.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X GET https://[tenant_id].logto.app/api/organizations/{id}/users/{userId}/scopes \\\n -H \"Authorization: Bearer $ORGANIZATION_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out UI with Logto in Vue Template\nDESCRIPTION: Vue template that demonstrates how to implement sign-in and sign-out functionality in a Nuxt application using the useLogtoUser composable. The template shows a dynamic link that changes based on the user's authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { useLogtoUser } from '#imports'; // 自動インポートが無効な場合はこの行を追加\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- サインインとサインアウトのための簡略化されたボタン -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code shows how to configure Logto authentication by setting custom scopes and resources. The highlighted section defines specific permission scopes for shopping and store operations, as well as the API resource endpoints that these permissions apply to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Edge Runtime Sign-in Handler in Next.js\nDESCRIPTION: Shows how to set up a sign-in handler with edge runtime configuration in Next.js API routes. Demonstrates the usage of the Logto client for handling sign-in functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../../libraries/logto';\n\nexport default logtoClient.handleSignIn();\n\nexport const config = {\n  runtime: 'experimental-edge',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Express.js Route for Organization Token Retrieval with Logto (TypeScript)\nDESCRIPTION: This TypeScript snippet defines an Express.js GET route (`/fetch-organization-token`) protected by the `withLogto` middleware. The middleware is configured with `getOrganizationToken: true` to fetch organization-specific tokens for the authenticated user. The route handler accesses these tokens via `request.user.organizationTokens` and returns them as a JSON response. Requires Express.js and the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"app.ts\"\napp.get(\n  '/fetch-organization-token',\n  withLogto({\n    ...config,\n    // highlight-next-line\n    getOrganizationToken: true,\n  }),\n  (request, response) => {\n    // highlight-next-line\n    response.json(request.user.organizationTokens);\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Ruby\nDESCRIPTION: This snippet demonstrates how to initialize the Logto client in a Ruby file. It sets up the client with configuration details, navigation function, and session storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    endpoint: \"https://your-logto-endpoint.com\",\n    app_id: \"your-logto-app-id\",\n    app_secret: \"your-logto-app-secret\"\n  ),\n  navigate: ->(uri) { a_redirect_method(uri) },\n  storage: LogtoClient::SessionStorage.new(the_session_object)\n)\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in SwiftUI\nDESCRIPTION: This snippet demonstrates how to display user information in a SwiftUI app using the Logto client. It checks authentication status and displays the user's name if authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n  @State var name: String?\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n    name = try? client.getIdTokenClaims().name\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Text(\"Welcome, \\(name)\")\n      } else {\n        Text(\"Please sign in\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in CustomAuthManager for Flutter\nDESCRIPTION: Initializes the Logto client in the CustomAuthManager class and updates the current user stream with the stored authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'package:flutter/material.dart';\nimport 'package:logto_dart_sdk/logto_client.dart';\nimport 'package:http/http.dart' as http;\n\n// ...\n\nclass CustomAuthManager {\n  final StreamController<CustomAuthUserProvider>\n      customAuthUserProviderSubject =\n      StreamController<CustomAuthUserProvider>.broadcast();\n\n  late LogtoClient logtoClient;\n  bool isInitialized = false;\n\n  Future initialize() async {\n    if (isInitialized) {\n      return;\n    }\n\n    logtoClient = LogtoClient(\n      httpClient: http.Client(),\n      endpoint: 'https://your-logto-endpoint.app', // Replace with your Logto endpoint\n      appId: 'your-app-id', // Replace with your Logto application ID\n    );\n\n    // Check if the user is already signed in\n    final hasSession = await logtoClient.isAuthenticated;\n    final idTokenClaims = await logtoClient.idTokenClaims;\n\n    customAuthUserProviderSubject.add(\n      CustomAuthUserProvider(\n        loggedIn: hasSession,\n        uid: idTokenClaims?.subject,\n        idToken: idTokenClaims,\n      ),\n    );\n\n    isInitialized = true;\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript SDK での組織トークン取得\nDESCRIPTION: Logto JavaScript SDK で特定の組織に対する組織トークンを取得する方法です。getOrganizationToken メソッドに組織IDを渡します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await logto.getOrganizationToken('<organization-id>');\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token for Logto Management API in Node.js\nDESCRIPTION: This code snippet demonstrates how to obtain an access token for the Logto Management API using Node.js. It sets up the necessary endpoints and credentials, then sends a POST request to the token endpoint with the required parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/generic/machine-to-machine/fragments/_fetch-access-token-for-logto-management-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst logtoEndpoint = 'https://your.logto.endpoint'; // 用你的 Logto 端点替换\nconst tokenEndpoint = `${logtoEndpoint}/oidc/token`;\nconst applicationId = 'your-application-id';\nconst applicationSecret = 'your-application-secret';\nconst tenantId = 'your-tenant-id';\n\nconst fetchAccessToken = async () => {\n  return await fetch(tokenEndpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Basic ${Buffer.from(`${applicationId}:${applicationSecret}`).toString(\n        'base64'\n      )}`,\n    },\n    body: new URLSearchParams({\n      grant_type: 'client_credentials',\n      resource: `https://${tenantId}.logto.app/api`,\n      scope: 'all',\n    }).toString(),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom User Data from Logto in Python\nDESCRIPTION: Shows how to access custom user data by fetching user information from Logto's userinfo endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(await client.fetchUserInfo()).custom_data\n```\n\n----------------------------------------\n\nTITLE: UserProfile Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the UserProfile object, which stores additional OpenID Connect standard claims not included in user attributes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype UserProfile = Partial<{\n  familyName: string;\n  givenName: string;\n  middleName: string;\n  nickname: string;\n  preferredUsername: string;\n  profile: string;\n  website: string;\n  gender: string;\n  birthdate: string;\n  zoneinfo: string;\n  locale: string;\n  address: Partial<{\n    formatted: string;\n    streetAddress: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    country: string;\n  }>;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Express Integration\nDESCRIPTION: This snippet shows how to request additional user information by configuring scopes in the Logto Express configuration. It adds email and phone scopes to access these claims during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig, UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone], // 필요에 따라 더 많은 스코프 추가\n  // ...other configs\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto to Fetch User Information\nDESCRIPTION: This snippet shows how to configure the Logto handleLogto hook to automatically fetch user information, making it available in the locals.user object without having to manually call fetchUserInfo.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    /* Logto config */\n  },\n  {\n    /* Cookie config */\n  },\n  {\n    fetchUserInfo: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Functions in Angular Component\nDESCRIPTION: Implements sign-in and sign-out functionality in an Angular component using OidcSecurityService. The service handles the authentication flow and redirect processing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OidcSecurityService } from 'angular-auth-oidc-client';\n\nexport class AppComponent implements OnInit {\n  constructor(public oidcSecurityService: OidcSecurityService) {}\n\n  signIn() {\n    this.oidcSecurityService.authorize();\n  }\n\n  signOut() {\n    this.oidcSecurityService.logoff().subscribe((result) => {\n      console.log('app sign-out', result);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Logto Client with Organization Scope in Go\nDESCRIPTION: This snippet demonstrates how to configure a Logto client in Go with the organizations scope. It initializes a LogtoConfig struct and sets the Scopes field to include the UserScopeOrganizations value from the core package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Scopes: []string{core.UserScopeOrganizations},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This snippet demonstrates the initialization of NextAuth with a Logto provider, customizing the OAuth authorization parameters to request specific scopes including OpenID, offline access, and organization-level scopes. Dependencies include NextAuth, a compatible Next.js project, and the Logto provider configuration. Key exports (`handlers`, `signIn`, `signOut`, `auth`) facilitate integration with Next.js API routes or middleware, allowing flexible authentication handling tailored to the project's needs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport NextAuth from 'next-auth';\\n\\nexport const { handlers, signIn, signOut, auth } = NextAuth({\\n  providers: [\\n    {\\n      id: 'logto',,\\n      // ...\\n      authorization: {\\n        params: {\\n          // highlight-next-line\\n          scope: 'openid offline_access urn:logto:scope:organizations',\\n        },\\n      },\\n      // ...\\n    },\\n  ],\\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto SDK in Chrome Extension Background Script\nDESCRIPTION: This code snippet demonstrates how to initialize the Logto SDK in the background script (service worker) of a Chrome extension. It creates a LogtoClient instance with the necessary configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/chrome-extension';\n\nexport const logtoClient = new LogtoClient({\n  endpoint: '<your-logto-endpoint>'\n  appId: '<your-logto-app-id>',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Session Storage Instance\nDESCRIPTION: Code snippet showing how to instantiate the custom SessionStorage implementation using an existing session context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_create-session-storage.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsession := sessions.Default(ctx)\nsessionStorage := &SessionStorage{session: session}\n```\n\n----------------------------------------\n\nTITLE: Initializing Passport.js with OpenID Connect Strategy in TypeScript\nDESCRIPTION: This function initializes Passport.js with an OpenID Connect authentication strategy. It configures essential parameters including client credentials, callback URL, and required scopes. The highlighted section emphasizes the scope configuration which includes openid, offline_access, profile, and email scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        // ... other options\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        // highlight-start\n        scope: ['openid', 'offline_access', 'profile', 'email'],\n        // highlight-end\n      }\n      // ... other options\n    )\n  );\n  // ... other options\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure Logto Express with custom scopes and resources. It imports the UserScope type from '@logto/express' and creates a LogtoExpressConfig object with specific scopes and resource URLs. The configuration includes read and write scopes, and defines two API resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Swift\nDESCRIPTION: Creates a LogtoClient instance with customized configuration including scopes and API resources. The configuration specifies the Logto endpoint, app ID, required permission scopes ('read' and 'write'), and protected API resources that the app needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"read\", \"write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Spring Boot OAuth2\nDESCRIPTION: Adds required Spring Boot dependencies for web and OAuth2 resource server functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Bearer Token from Request Header in Python\nDESCRIPTION: Function to extract the authorization token from the request header. It validates the presence of the Authorization header and ensures it follows the 'Bearer <token>' format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"requires-auth.py\n\"\"\"\ndef get_auth_token():\n  auth = request.headers.get(\"Authorization\", None)\n\n  if not auth:\n    raise Error({ code: 'auth.authorization_header_missing', status: 401 })\n\n  contents = auth.split()\n\n  if len(contents) < 2\n    raise Error({code: 'auth.authorization_token_invalid_format', status: 401})\n\n  elif contents[0] != 'Bearer'\n    raise Error({code: 'auth.authorization_token_type_not_supported', status: 401})\n\n  return contents[1]\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes and Resources in Kotlin\nDESCRIPTION: Demonstrates setting up LogtoConfig object with custom OAuth scopes for shopping and store operations, along with their corresponding API resource endpoints. The configuration enables specific read/write permissions for shopping and store features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ..other configs\n    // highlight-start\n    scopes = listOf(\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize a LogtoConfig object in Kotlin with specified authorization scopes and resource URLs. Dependencies include the Logto Kotlin library, and key parameters are 'scopes' (defining access levels like \\\"read\\\" and \\\"write\\\") and 'resources' (listing endpoint URLs the configuration will grant API access to). Inputs are lists for scopes and resource endpoints; the output is a properly configured LogtoConfig instance ready for use in authentication flows. Limitations may depend on correct URL and scope syntax as required by the Logto authentication service.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(\"read\", \"write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig Object in React Native\nDESCRIPTION: This snippet shows how to import and initialize the LogtoConfig object for React Native authentication. It configures the application ID, endpoint URL, required OAuth scopes, and target API resources to access after authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Apple Sign-In Tutorial\nDESCRIPTION: This code imports various MDX fragments used throughout the tutorial to structure the content. It also sets a 'connector' variable for use in the document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-apple.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/apple/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Apple';\n```\n\n----------------------------------------\n\nTITLE: Creating Client Button to Trigger Logto Server Action in Next.js (TSX)\nDESCRIPTION: This Next.js Client Component (`GetOrganizationToken`) renders a button designed to initiate a server action passed via props. Marked with `'use client'`, it accepts an `onGetOrganizationToken` function prop (expected to be a Server Action). Clicking the button executes this asynchronous function, awaits the resulting organization token (string), and logs the token to the browser console. The button text includes non-English characters: \"取得組織權杖 (查看控制台日誌)\".\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"app/get-organization-token.ts\"\n'use client';\n\ntype Props = {\n  onGetOrganizationToken: () => Promise<string>;\n};\n\nconst GetOrganizationToken = ({ onGetOrganizationToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetOrganizationToken();\n        console.log(token);\n      }}\n    >\n      取得組織權杖 (查看控制台日誌)\n    </button>\n  );\n};\n\nexport default GetOrganizationToken;\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and Resources in JavaScript\nDESCRIPTION: Creates a new LogtoClient instance configured with multiple OAuth scopes for read/write permissions and multiple API resource endpoints. The configuration highlights the scopes and resources parameters, which are essential for proper API authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 新增 API 資源 (API resources)\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication in Vue with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the createLogto function from @logto/vue to set up authentication in a Vue application. It includes configuration for scopes and resources, which are important for defining access permissions and API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Svelte Component\nDESCRIPTION: This Svelte component snippet shows how to display user information in a list format, iterating over the user object properties.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n</script>\n\n{#if data.user}\n<ul>\n  {#each Object.entries(data.user) as [key, value]}\n  <li>{key}: {value}</li>\n  {/each}\n</ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto with Custom Scopes and Resources in Vue\nDESCRIPTION: This snippet demonstrates how to use the createLogto function from @logto/vue to set up Logto authentication in a Vue application. It configures custom scopes for different levels of access and specifies API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Sign-in/Sign-out Buttons with Logto SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isAuthenticated method from Logto SDK to conditionally render either a sign-in or sign-out button based on the user's authentication status. The code creates a button element and attaches the appropriate event handler based on whether the user is authenticated or not.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_handle-authentication-status.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst redirectUrl = 'http://localhost:3000/callback';\nconst baseUrl = 'http://localhost:3000';\n\n// Conditional rendering of sign-in and sign-out buttons\nconst render = async (logtoClient) => {\n  const isAuthenticated = await logtoClient.isAuthenticated();\n  const container = document.querySelector('#container');\n\n  const onClickSignIn = () => logtoClient.signIn(redirectUrl);\n  const onClickSignOut = () => logtoClient.signOut(baseUrl);\n\n  const button = document.createElement('button');\n  button.innerHTML = isAuthenticated ? 'Sign Out' : 'Sign In';\n  button.addEventListener('click', isAuthenticated ? onClickSignOut : onClickSignIn);\n\n  container.append(button);\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Domain in TypeScript\nDESCRIPTION: Code snippet showing how to initialize the Logto SDK client with a custom domain endpoint. This configuration directs authentication requests to your branded domain instead of the default Logto domain.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-cloud/custom-domain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new LogtoClient({\n  ...,// other options\n  endpoint: 'https://auth.example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info for Custom Data in JavaScript\nDESCRIPTION: This snippet shows how to use logtoClient.fetchUserInfo() to retrieve custom user data that may not be available in the ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\n// 现在你可以访问声明 (Claim) `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK Authorization in TypeScript\nDESCRIPTION: Demonstrates declaring a Logto authentication configuration object in TypeScript, highlighting how to specify authorization scopes and resources for granular API permissions. Dependencies include the Logto SDK for TypeScript and any associated type definitions. The key parameters are 'scopes' (an array of permission strings controlling allowed actions like 'shopping:read' and 'store:write') and 'resources' (an array of resource API endpoints that define where the tokens are valid). The input is an exported config object, and the output depends on Logto SDK usage within the broader app. Only relevant config lines are shown; omitted configs should be filled in as required by the SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express Scopes in TypeScript\nDESCRIPTION: Demonstrates setting up Logto Express configuration with custom scopes for email and phone access. The snippet shows the type-safe way to define scopes as part of the LogtoExpressConfig object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  scopes: ['email', 'phone'],\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Tokens and Claims in Python with Logto Client\nDESCRIPTION: This code snippet demonstrates how to retrieve an access token or access token claims for a specific API URL using the Logto client in Python. It shows two alternative approaches - either getting the full access token or extracting the claims from the token directly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naccessToken = await client.getAccessToken(\"https://shopping.your-app.com/api\")\n# または\nclaims = await client.getAccessTokenClaims(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Session Middleware\nDESCRIPTION: Code snippet to set up express-session middleware in an Express application. This is used to store user tokens and interaction data during the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// app.js\n\nconst session = require('express-session');\n\napp.use(\n  session({\n    secret: 'keyboard cat', // Change to your own secret key\n    cookie: { maxAge: 86400 },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Middleware for Access Token Retrieval in Express (TypeScript)\nDESCRIPTION: This code configures a GET route in an Express app using Logto middleware. It demonstrates how to set up the middleware to fetch an access token for a specific resource, and then log and return the user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-access-token',\n  withLogto({\n    ...config,\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }),\n  (request, response) => {\n    // highlight-next-line\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in TypeScript for Capacitor\nDESCRIPTION: Sets up the Logto configuration object with application ID, endpoint URL, OAuth scopes, and resource endpoints. This configuration is required for integrating Logto authentication into a Capacitor application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Custom Data in JavaScript\nDESCRIPTION: This code snippet demonstrates how to fetch user information including custom data using the logtoClient.fetchUserInfo() method. It allows access to additional claims like custom_data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\n// 現在你可以訪問宣告 (Claim) `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Silent Logto Installation Commands\nDESCRIPTION: Commands for performing a silent installation of Logto with specified database URL and path options. Useful for CI environments and automated deployments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/install-logto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogto init -p ./logto --db-url postgresql://your-postgres-dsn:5432/logto --oc\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli init -p ./logto --db-url postgresql://your-postgres-dsn:5432/logto --oc\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Actions for Token Retrieval in Next.js\nDESCRIPTION: A server component that exposes a server action to retrieve an access token from Logto. The component imports the getAccessToken function and uses the 'use server' directive to define a server action.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAccessToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetAccessToken from './get-access-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetAccessToken\n        onGetAccessToken={async () => {\n          'use server';\n\n          return getAccessToken(logtoConfig, 'https://shopping.your-app.com/api');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Organization Scope in JavaScript\nDESCRIPTION: This snippet shows how to import the LogtoClient and UserScope from the Logto browser package and initialize a new client instance with organization scopes. The code sets up the client with the required scopes for accessing organization-related features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/code/_config-organization-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting One-Time Token via Logto Management API\nDESCRIPTION: This snippet shows how to use the Logto Management API to create a one-time token for magic link authentication. It includes the API endpoint and a sample request body payload.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/one-time-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/one-time-tokens\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"user@example.com\",\n  // Optional. Defaults to 600 (10 mins).\n  \"expiresIn\": 3600,\n  // Optional. User will be provisioned to the specified organizations upon successful verification.\n  \"context\": {\n    \"jitOrganizationIds\": [\"abcdefgh1234\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in Logto TypeScript Configuration\nDESCRIPTION: This snippet shows how to export a Logto configuration object with multiple API resources defined. The configuration includes two API endpoints for different services within the same application domain.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API リソースを追加\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in Nuxt.js\nDESCRIPTION: This code snippet shows how to configure Logto in a Nuxt.js application's configuration file. It sets custom scopes and resources for authentication and API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes for Additional Claims in Logto Flutter SDK\nDESCRIPTION: This code snippet shows how to configure additional scopes when initializing the Logto client in a Flutter app. It demonstrates setting custom scopes to request additional user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal config = LogtoConfig(\n  appId: '<your-app-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [\n    UserInfoScope.email,\n    UserInfoScope.phone,\n    UserInfoScope.customData,\n    // Add more scopes as needed\n  ],\n);\n\nfinal client = LogtoClient(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 Handlers for Next.js Route\nDESCRIPTION: Sets up the API route handlers for Auth.js v5 in a Next.js application, exporting GET and POST handlers from auth configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handlers } from '@/auth';\nexport const { GET, POST } = handlers;\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: This code initializes a LogtoClient object with specific scopes for read and write permissions on shopping and store resources. It also defines the resource URLs for the shopping and store APIs. This configuration is crucial for proper authentication and authorization in a multi-service environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Side Component for Triggering Access Token Retrieval in Next.js\nDESCRIPTION: This client component defines a button that, when clicked, triggers the server action to retrieve an access token and logs it to the console. It uses TypeScript for type safety and demonstrates the use of async functions in event handlers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetAccessToken: () => Promise<string>;\n};\n\nconst GetAccessToken = ({ onGetAccessToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetAccessToken();\n        console.log(token);\n      }}\n    >\n      Get access token (see console log)\n    </button>\n  );\n};\n\nexport default GetAccessToken;\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Storage Interface in Go\nDESCRIPTION: The Storage interface from Logto SDK used to store user authentication information. The interface requires implementing GetItem and SetItem methods for session storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_create-session-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage client\n\ntype Storage interface {\n\tGetItem(key string) string\n\tSetItem(key, value string)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Express with Logto\nDESCRIPTION: This snippet shows how to access additional claims in the Express application using the Logto middleware. It retrieves the user's email from the claims object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  response.end(`Correo electrónico del usuario: ${req.user.claims.email}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto React with Organization Scope\nDESCRIPTION: Demonstrates how to set up Logto configuration in a React application with organization scope access. The configuration object includes the Organizations user scope which enables organization-related features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organisations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Scopes and Resources in Go\nDESCRIPTION: This snippet shows how to initialize a Logto client configuration with scopes and resources. The code sets read and write permissions and defines API resources that the client can access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Portées:    []string{\"read\", \"write\"},\n    Ressources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Access Token Retrieval in Next.js\nDESCRIPTION: This component defines the main page of the Next.js application. It imports the necessary Logto functions and components, and sets up a server action to retrieve an access token for a specific API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAccessToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetAccessToken from './get-access-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetAccessToken\n        onGetAccessToken={async () => {\n          'use server';\n\n          return getAccessToken(logtoConfig, 'https://shopping.your-app.com/api');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client Configuration with Custom Scopes and Resources in Go\nDESCRIPTION: Sets up a Logto client configuration object with specified OAuth scopes ('read', 'write') and protected API resource endpoints. The configuration defines access permissions and target API resources for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"read\", \"write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchOrganizationTokenForUser Component in React\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component with specific props. It sets the organization scope and passes code snippets for configuration and token retrieval as child components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific Version Alterations with npx\nDESCRIPTION: Alternative command to deploy database alterations to a specific target version using npx instead of globally installed CLI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/database-alteration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db alteration deploy 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with API Resources in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new LogtoClient instance with configured API resources. It imports the LogtoClient from the '@logto/browser' package and sets up the client with multiple API endpoint URLs in the resources array.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet shows how to asynchronously fetch an organization token using the Logto client. It requires the Logto client to be initialized and available in the 'locals' object, and takes an 'organizationId' as a parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Handling URL Opening in SwiftUI for Logto\nDESCRIPTION: This Swift code snippet shows how to handle incoming URLs in a SwiftUI application using the `.onOpenURL` view modifier. It calls `LogtoClient.handle(url:)` to process URLs, which is necessary for completing the authentication flow after returning from external apps like WeChat or browser-based logins handled by the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftUI\nYourRootView()\n  .onOpenURL { url in\n      LogtoClient.handle(url: url)\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration for Capacitor in TypeScript\nDESCRIPTION: Sets up the Logto configuration object with application credentials, endpoint, OAuth scopes, and API resource endpoints. The configuration includes read and write permissions for shopping and store functionalities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Scopes and Resources in Python\nDESCRIPTION: This code snippet shows how to create a LogtoClient instance with specific scopes and resources. The configuration specifies read and write permissions for both shopping and store APIs, along with their respective API endpoint URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Client for Logto in application.properties\nDESCRIPTION: Configuration settings for OAuth2 client in application.properties file, including client credentials and Logto endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nspring.security.oauth2.client.registration.logto.client-name=logto\nspring.security.oauth2.client.registration.logto.client-id={{YOUR_CLIENT_ID}}\nspring.security.oauth2.client.registration.logto.client-secret={{YOUR_CLIENT_ID}}\nspring.security.oauth2.client.registration.logto.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}\nspring.security.oauth2.client.registration.logto.authorization-grant-type=authorization_code\nspring.security.oauth2.client.registration.logto.scope=openid,profile,offline_access\nspring.security.oauth2.client.registration.logto.provider=logto\n\nspring.security.oauth2.client.provider.logto.issuer-uri={{LOGTO_ENDPOINT}}/oidc\nspring.security.oauth2.client.provider.logto.authorization-uri={{LOGTO_ENDPOINT}}/oidc/auth\nspring.security.oauth2.client.provider.logto.jwk-set-uri={{LOGTO_ENDPOINT}}/oidc/jwks\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in Dart\nDESCRIPTION: This snippet initializes a constant `LogtoConfig` object named `logtoConfig`. It configures the necessary parameters for the Logto client, including the authentication endpoint, application ID, requested API resources, and the permissions (scopes) required across those resources. Placeholders for `endpoint` and `appId` must be replaced with actual values from your Logto console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-shared-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // 所有资源共享的权限 (scopes)\n  // highlight-start\n  scopes: [\"read\", \"write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Creating LogtoConfig with API Resources and Scopes in Dart\nDESCRIPTION: This snippet initializes a LogtoConfig instance with the Logto endpoint, app ID, API resources, and their corresponding scopes. The resources and scopes are specified as string arrays, with scopes including read and write permissions for shopping and store APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Ajoutez les portées de vos ressources API\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client Resources in Go\nDESCRIPTION: This snippet demonstrates how to set up the Resources field in the LogtoConfig struct. It specifies multiple API endpoints that will be protected by Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Dart\nDESCRIPTION: Async function that fetches an access token for a specified resource using the Logto client. Takes a resource string parameter and returns a Future containing an optional AccessToken object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_get-resource-access-token.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<AccessToken?> getAccessToken(String resource) async {\n  var token = await logtoClient.getAccessToken(resource: resource);\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logto Hook in SvelteKit\nDESCRIPTION: This snippet demonstrates how to add the Logto hook to the SvelteKit server. It includes options for using hardcoded values or environment variables for sensitive information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-logto-app-id>',\n    appSecret: '<your-logto-app-secret>',\n  },\n  {\n    encryptionKey: '<a-random-string>',\n  }\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\nimport { env } from '$env/dynamic/private';\n\nexport const handle = handleLogto(\n  {\n    endpoint: env.LOGTO_ENDPOINT,\n    appId: env.LOGTO_APP_ID,\n    appSecret: env.LOGTO_APP_SECRET,\n  },\n  {\n    encryptionKey: env.LOGTO_COOKIE_ENCRYPTION_KEY,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Go\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to obtain an access token for a specific API endpoint. The GetAccessToken method is called with the target API URL as an argument, returning both the access token and any potential error.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\naccessToken, error := logtoClient.GetAccessToken(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In/Sign-Out Button in Svelte Component\nDESCRIPTION: This snippet demonstrates how to create a button in a Svelte component that toggles between sign-in and sign-out functionality based on the user's authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"?/{data.user ? 'signOut' : 'signIn'}\">\n  <button type=\"submit\">Sign {data.user ? 'out' : 'in'}</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Custom Scopes and Resources in Go\nDESCRIPTION: Sets up a Logto client configuration with specific API access scopes and resource endpoints. The configuration includes read and write permissions for shopping and store domains, along with their respective API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resource Settings in Blazor\nDESCRIPTION: Configuration settings in appsettings.json for enabling JWT token access to API resources. Includes scope definition, resource URL, and extra token parameters following RFC 8707 specifications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"IdentityServer\": {\n    \"Scope\": \"openid profile email <your-api-scopes>\",\n    \"Resource\": \"https://my-api-resource\",\n    \"ExtraTokenParams\": {\n        \"resource\": \"https://my-api-resource\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: Demonstrates how to create a LogtoClient instance with defined access scopes for shopping and store operations, along with their corresponding API resource endpoints. The configuration includes read and write permissions for both shopping and store features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig with scopes and resources in React TypeScript\nDESCRIPTION: This code shows how to initialize the LogtoConfig object for a React application, specifically setting up scopes and resources for API access. It imports the LogtoConfig type from @logto/react and defines scopes for reading and writing to shopping and store data, along with corresponding resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto with Vue.js and Configuring Organization Scope\nDESCRIPTION: This snippet demonstrates how to create and configure a Logto instance in a Vue.js application. It specifically highlights the addition of the Organizations scope to the user authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [UserScope.Organizations],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and Resources in Python\nDESCRIPTION: This snippet demonstrates initializing a LogtoClient in Python with explicit authorization scopes and resource endpoints. The client requires the LogtoClient and LogtoConfig classes, which must be installed and imported from the Logto Python SDK. Key parameters are the 'scopes' array—defining specific access rights (e.g., shopping:read, store:write)—and the 'resources' list specifying the protected API base URLs. Input consists of configuration objects, while output is a client instance ready for authentication and API authorization. Proper values should be supplied for other required configuration fields to fully activate the client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Logic in Blazor WASM Component Class\nDESCRIPTION: Implements the authentication logic in a component class file that pairs with the Razor view. It handles user management, login/logout functionality, and retrieves user information after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.AspNetCore.Components.Web;\nusing Blorc.OpenIdConnect;\nusing Microsoft.AspNetCore.Components.Authorization;\n\n[Authorize]\npublic partial class Home : ComponentBase\n{\n    [Inject]\n    public required IUserManager UserManager { get; set; }\n\n    public User<Profile>? User { get; set; }\n\n    [CascadingParameter]\n    protected Task<AuthenticationState>? AuthenticationStateTask { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n        User = await UserManager.GetUserAsync<User<Profile>>(AuthenticationStateTask!);\n    }\n\n    private async Task OnLoginButtonClickAsync(MouseEventArgs obj)\n    {\n        await UserManager.SignInRedirectAsync();\n    }\n\n    private async Task OnLogoutButtonClickAsync(MouseEventArgs obj)\n    {\n        await UserManager.SignOutRedirectAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Organizations Scope in Dart\nDESCRIPTION: This snippet shows how to create a LogtoConfig object with the required endpoint, app ID, and organizations scope. It demonstrates the configuration setup for integrating Logto authentication in a Dart application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_organization-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [LogtoUserScopes.organizations.value]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Auth Routes\nDESCRIPTION: Sets up authentication routes for sign-in, sign-out and callback handling using Logto helper function.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleAuthRoutes } from '@logto/express';\n\napp.use(handleAuthRoutes(config));\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with React and Logto\nDESCRIPTION: Component that displays authenticated user information by fetching ID token claims and rendering them in a table format. Uses React hooks and Logto authentication hooks to manage state and authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto, type IdTokenClaims } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Home = () => {\n  const { isAuthenticated, getIdTokenClaims } = useLogto();\n  const [user, setUser] = useState<IdTokenClaims>();\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const claims = await getIdTokenClaims();\n        setUser(claims);\n      }\n    })();\n  }, [getIdTokenClaims, isAuthenticated]);\n\n  return (\n    // ...\n    {isAuthenticated && user && (\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(user).map(([key, value]) => (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{typeof value === 'string' ? value : JSON.stringify(value)}</td>\n            </tr>\n          ))}          \n        </tbody>\n      </table>\n    )}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes with UserScope Enum in Logto PHP SDK\nDESCRIPTION: Shows how to request additional scopes using the UserScope enum constants during LogtoClient initialization for better type safety.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// highlight-next-line\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...他の設定\n    // highlight-next-line\n    scopes: [UserScope::email, UserScope::phone], // 必要に応じて更新\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementando Rota de Login com Logto em Python Flask\nDESCRIPTION: Este snippet mostra como criar uma rota '/sign-in' em Flask que redireciona o usuário para a página de login do Logto. Utiliza o método client.signIn() do SDK do Logto para gerar a URL de login.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-in\")\nasync def sign_in():\n    # Obtenha a URL de login e redirecione o usuário para ela\n    return redirect(await client.signIn(\n        redirectUri=\"${defaultRedirectUri}\",\n    ))\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js with Logto Provider in TypeScript\nDESCRIPTION: Sets up NextAuth.js authentication with Logto as the identity provider. It configures authentication handlers, signin, signout functions, and specifies OAuth scopes including 'openid', 'offline_access', profile, email, and custom shopping scopes. The code also defines a resource URL for the API.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email shopping:read shopping:write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize Logto Client with Organization Scope\nDESCRIPTION: Sets up a new Logto client instance with organization scopes enabled. The code imports the necessary dependencies and creates a client with the organizations user scope configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-organization-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth to Access Access Token in Session\nDESCRIPTION: This snippet shows how to modify NextAuth configuration to make the access token available in the session object. It implements callbacks for JWT and session to preserve the access token from the authentication response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // ...\n  callbacks: {\n    async jwt({ token, account }) {\n      if (account) {\n        token.accessToken = account.access_token;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      // Injeta o token de acesso no objeto da sessão\n      session.accessToken = token.accessToken;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Component with Auth.js\nDESCRIPTION: Creates a React component with a server action that triggers sign-out functionality using Auth.js signOut function.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signOut } from '@/auth';\n\nexport function SignOut() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signOut();\n      }}\n    >\n      <button type=\"submit\">Sign Out</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Unpublished Alterations with npx for Contributors\nDESCRIPTION: Alternative command for contributors to deploy unpublished 'next' alterations using npx instead of globally installed CLI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/database-alteration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db alteration deploy next\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional OAuth2 Scopes in application.properties\nDESCRIPTION: Property configuration to request additional OAuth2 scopes from Logto, including email, phone, and organization information alongside standard OpenID scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nspring.security.oauth2.client.registration.logto.scope=openid,profile,offline_access,email,phone,urn:logto:scope:organizations\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes for Organizations in Next.js\nDESCRIPTION: This code snippet demonstrates how to set up the Logto configuration object in a Next.js application, specifically adding the Organizations scope to the user authentication process. It imports the UserScope from the Logto Next.js package and includes it in the scopes array of the configuration object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Spring Security Properties\nDESCRIPTION: Configuration example showing how to add extra scopes like organization access to the OAuth2 client registration in Spring Security properties file. This allows requesting additional user information through the OIDC protocol.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nspring.security.oauth2.client.registration.logto.scope=openid,profile,offline_access,urn:logto:scope:organizations\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources with Logto in Vue\nDESCRIPTION: This code snippet demonstrates how to initialize Logto in a Vue application while configuring multiple API resources that the application needs to access. The createLogto function is used with the resources parameter set to an array of API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info in Vue.js with Logto\nDESCRIPTION: This code snippet shows how to use the fetchUserInfo() method from Logto to retrieve additional user information, including custom data, in a Vue.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { fetchUserInfo } = useLogto();\n\nconst userInfo = await fetchUserInfo();\n\n// Maintenant, vous pouvez accéder à la revendication `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization Authentication Component with Logto in React\nDESCRIPTION: A React component that displays a list of organization IDs from authenticated user's claims and provides functionality to fetch organization-specific tokens. Uses Logto SDK for authentication and token management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID token claims', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  console.log('raw token', await getOrganizationToken(organizationId));\n                }}\n              >\n                Token abrufen (siehe Konsole)\n              </button>\n            </li>\n          );\n        })}            \n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Information from ID Token\nDESCRIPTION: Example of how to extract organization information from the ID token after authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Usar JavaScript como ejemplo\nconst idToken = await logto.getIdTokenClaims();\n\nconsole.log(idToken.organizations); // Un array de cadenas de IDs de organización\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Next.js Component\nDESCRIPTION: This code snippet demonstrates how to access additional claims (e.g., email) in a Next.js component after configuring additional scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst Home = () => {\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\n\n  const email = data?.claims?.email;\n\n  return (\n    <div>\n      {email && <p>Email: {email}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Component for Access Token Retrieval in Next.js\nDESCRIPTION: A client-side React component that displays a button to trigger the server action for retrieving an access token. When clicked, it calls the server action and logs the returned token to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetAccessToken: () => Promise<string>;\n};\n\nconst GetAccessToken = ({ onGetAccessToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetAccessToken();\n        console.log(token);\n      }}\n    >\n      Obtenir le jeton d'accès (voir le journal de la console)\n    </button>\n  );\n};\n\nexport default GetAccessToken;\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Nuxt.js Vue Template\nDESCRIPTION: This snippet demonstrates how to display user information in a Nuxt.js application using the useLogtoUser() composable. It conditionally renders user details when the user is signed in and provides a toggle link for sign-in/sign-out functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- highlight-start -->\n  <!-- サインイン時にユーザー情報を表示 -->\n  <ul v-if=\"Boolean(user)\">\n    <li v-for=\"(value, key) in user\"><b>{{ key }}:</b> {{ value }}</li>\n  </ul>\n  <!-- highlight-end -->\n  <!-- サインインとサインアウトの簡略化されたボタン -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Provider for Additional Scopes in Vue.js\nDESCRIPTION: This snippet shows how to configure the Logto provider in a Vue.js application to request additional scopes. It includes setting up user scopes such as email, phone, custom data, identities, and organizations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\nconst app = createApp(App);\n\napp.use(createLogto, {\n  // ...其他設定\n  // highlight-start\n  scopes: [\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n  ],\n  // highlight-end\n});\napp.use(router);\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token for Logto Management API with cURL\nDESCRIPTION: This code shows how to obtain an access token for the Logto Management API using cURL. It creates a POST request with the necessary headers and form parameters, including authorization credentials, grant type, resource endpoint, and scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/generic/machine-to-machine/fragments/_fetch-access-token-for-logto-management-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n  --request POST 'https://your.logto.endpoint' \\\n  --header 'Authorization: Basic ${your_auth_string}' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'grant_type=client_credentials' \\\n  --data-urlencode 'resource=https://${tenantId}.logto.app/api' \\\n  --data-urlencode 'scope=all'\n```\n\n----------------------------------------\n\nTITLE: Accessing ID Token Claims in Python\nDESCRIPTION: A code snippet demonstrating how to retrieve user claims from the ID token after authentication with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nidTokenClaims = await client.getIdTokenClaims();\n```\n\n----------------------------------------\n\nTITLE: Verifying Logto Access Token in Express Middleware\nDESCRIPTION: An Express middleware that verifies the Logto access token from request headers and extracts the user ID. This middleware can be used to authenticate API requests before accessing Supabase.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// auth-middleware.ts\nimport { createRemoteJWKSet, jwtVerify } from 'jose';\n\n//...\n\nexport const verifyAuthFromRequest = async (ctx, next) => {\n  // トークンを抽出\n  const token = extractBearerTokenFromHeaders(ctx.request.headers);\n\n  const { payload } = await jwtVerify(\n    token, // リクエストヘッダーから抽出された生の Bearer トークン\n    createRemoteJWKSet(new URL('https://<your-logto-domain>/oidc/jwks')), // Logto サーバーから取得した jwks_uri を使用して jwks を生成\n    {\n      // トークンの発行者、Logto サーバーによって発行されるべき\n      issuer: 'https://<your-logto-domain>/oidc',\n      // トークンのオーディエンス、現在の API のリソースインジケーターであるべき\n      audience: '<your request listener resource indicator>',\n    }\n  );\n\n  // RBAC を使用している場合\n  assert(payload.scope.includes('some_scope'));\n\n  // カスタムペイロードロジック\n  ctx.auth = {\n    userId: payload.sub,\n  };\n\n  return next();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Additional Scopes\nDESCRIPTION: This code shows how to configure the Logto client with additional user scopes like Email and Phone. These scopes allow the application to access additional user claims beyond the default ones.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// highlight-next-line\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone],\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize LogtoClient with Config\nDESCRIPTION: Creates a new LogtoClient instance by importing from @logto/browser and configuring with endpoint and application ID parameters. These credentials can be found in the Logto Console application details page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_init-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  endpoint: '<your-logto-endpoint>',\n  appId: '<your-application-id>',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Scopes in Logto Go Client Configuration\nDESCRIPTION: This Go code snippet demonstrates how to specify the desired OpenID Connect scopes within the `LogtoConfig` struct when initializing a Logto client. The `Scopes` field is set to a string slice containing the requested scopes, such as \"email\" and \"phone\". This configuration determines what user information the application will request access to during the authentication flow. Requires the Logto Go client library.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Organizations Scope in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the LogtoClient and UserScope enumerator from the Logto browser SDK via an ESM URL, then instantiate and configure the client object on the window. The 'scopes' configuration uses the 'Organizations' user scope, enabling permissions related to organizations for authentication. No additional dependencies are required beyond the Logto browser SDK, and the code should be run in a browser context. Expected input is valid configuration for LogtoClient, and the output is an initialized client available on the global window object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport LogtoClient, { UserScope } from 'https://esm.run/@logto/browser';\n\nwindow.logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Fetching in Next.js Auth Routes\nDESCRIPTION: This snippet shows how to enable fetching of user information in Next.js authentication routes by setting the fetchUserInfo option to true when handling auth routes with the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.handleAuthRoutes({ fetchUserInfo: true });\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token in React\nDESCRIPTION: Example of obtaining an organization token using React Logto hooks\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst App = () => {\n  const { getOrganizationToken } = useLogto();\n\n  const getToken = async () => {\n    const token = await getOrganizationToken('<organization-id>');\n  };\n\n  return <button onClick={getToken}>Get organization token</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Vue SDK with yarn\nDESCRIPTION: Installs the Logto Vue SDK (@logto/vue) using yarn package manager. This command adds the SDK as a dependency to your Vue project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Scopes and Resources in Ruby\nDESCRIPTION: Creates a new Logto client instance with specific access scopes and API resource endpoints. The configuration includes read/write permissions and multiple API resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-start\n    portées: [\"read\", \"write\"],\n    ressources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object with custom scopes. It shows two ways to specify scopes: using string literals or predefined UserScope constants. The scopes 'email' and 'phone' are added to request access to the user's email and phone number during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // または `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Invoking FetchOrganizationTokenForUser Component in MDX\nDESCRIPTION: This JSX snippet shows the usage of the `FetchOrganizationTokenForUser` component within an MDX file. It sets the `organizationScope` prop to `UserScope.Organizations` and passes imported components (`ConfigOrganizationCode` and `GetOrganizationAccessTokenCode`) as props to render specific code examples within the documentation. This component likely orchestrates the display of steps for configuring and obtaining an organization access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Organization Access Token in Ruby\nDESCRIPTION: This snippet demonstrates how to obtain an access token for a Logto organization using the client's access_token method. It requires the organization_id as a parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntoken = @client.access_token(organization_id: \"organization_id\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organization Scope in React Native\nDESCRIPTION: This snippet shows how to create a LogtoConfig object with the Organizations scope enabled. The configuration includes the necessary imports from '@logto/rn' package and sets up the scopes array to allow the application to access organization data for the authenticated user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organisations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in Vue\nDESCRIPTION: This snippet demonstrates how to use the createLogto function from @logto/vue to set up Logto authentication in a Vue application. It showcases the configuration of custom scopes and resources, which are essential for defining access permissions and API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: Sets up NextAuth authentication by exporting handlers, signIn, signOut, and auth functions. Configures Logto provider with specific OAuth scopes for shopping operations and defines the API resource endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email shopping:read shopping:write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: MDX Import Statements for Documentation Components\nDESCRIPTION: Import statements for various MDX documentation fragments and components used to structure the tutorial documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-naver.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/naver/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Angular Component\nDESCRIPTION: This snippet demonstrates how to use OidcSecurityService to subscribe to authentication status and user information in an Angular component. It shows how to decode the ID token and store relevant information in component properties.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OidcSecurityService } from 'angular-auth-oidc-client';\nimport { decodeIdToken, type IdTokenClaims } from '@logto/js';\n\nexport class AppComponent implements OnInit {\n  isAuthenticated = false;\n  idTokenClaims?: IdTokenClaims;\n  accessToken?: string;\n\n  constructor(public oidcSecurityService: OidcSecurityService) {}\n\n  ngOnInit() {\n    this.oidcSecurityService.checkAuth().subscribe(({ isAuthenticated, idToken, accessToken }) => {\n      console.log('app authenticated', isAuthenticated, idToken);\n      this.isAuthenticated = isAuthenticated;\n      this.idTokenClaims = decodeIdToken(idToken);\n      this.accessToken = accessToken;\n    });\n  }\n\n  // ...andere Methoden\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources in LogtoConfig for Kotlin Android\nDESCRIPTION: Creates a LogtoConfig instance with custom scopes and resources. The scopes define the permissions requested by the application while resources specify the API endpoints that the application will access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ..other configs\n    // highlight-start\n    scopes = listOf(\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in TypeScript\nDESCRIPTION: Creates a new LogtoClient instance with configuration for multiple API resource endpoints. The resources array specifies the protected API endpoints that the client will have access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving ID Token Claims in Go with Logto Client\nDESCRIPTION: This snippet demonstrates how to retrieve a user's ID token claims using the GetIdTokenClaims method from the Logto client in a Gin web application. The function returns the ID token claims which can then be displayed to the user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    //...\n\n    router.GET(\"/user-id-token-claims\", func(ctx *gin.Context) {\n      session := sessions.Default(ctx)\n      logtoClient := client.NewLogtoClient(logtoConfig, &SessionStorage{session: session})\n\n      // highlight-start\n      idTokenClaims, err := logtoClient.GetIdTokenClaims()\n      // highlight-end\n\n      if err != nil {\n        ctx.String(http.StatusOK, err.Error())\n      }\n\n      ctx.JSON(http.StatusOK, idTokenClaims)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoClient with Custom Scopes in Python\nDESCRIPTION: These examples demonstrate two equivalent methods to initialize a LogtoClient with additional scopes. The first approach uses string literals ('email', 'phone'), while the second approach uses predefined enum values from UserInfoScope for type safety. Both methods achieve the same result of requesting additional user information scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        scopes=[\"email\", \"phone\"], # Add more scopes\n    ),\n)\n\n# or\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        scopes=[UserInfoScope.email, UserInfoScope.profile], # Same result\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Ruby Logto Client\nDESCRIPTION: Ruby code snippet demonstrating how to initialize a Logto client with additional scopes. This configuration enables requesting more user data like email and phone number during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-next-line\n    scopes: [\"email\", \"phone\"] # Add more scopes as needed\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Handling User Authentication in Next.js API Route\nDESCRIPTION: This code snippet demonstrates how to handle user authentication in a Next.js API route using Logto. It checks if the user is authenticated and returns the user claims if authorized.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute((request, response) => {\n  if (!request.user.isAuthenticated) {\n    response.status(401).json({ message: 'Non autorisé' });\n\n    return;\n  }\n\n  response.json({\n    data: request.user.claims,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code snippet initializes NextAuth with Logto as an authentication provider. It configures specific OAuth scopes including openid, offline_access, profile, email, and custom shopping scopes, along with a resource URL for API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email shopping:read shopping:write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Capacitor Configuration with Organizations Scope\nDESCRIPTION: Sets up a Logto configuration object with the Organizations user scope. Shows how to import necessary types and define a typed configuration object that includes organization-related permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler with User Scopes in SvelteKit\nDESCRIPTION: This snippet imports the necessary functions from @logto/sveltekit and sets up the Logto authentication handler with email and phone scopes. It demonstrates how to configure user scopes for authentication in a SvelteKit application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope, handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto({\n  // ...other options\n  scopes: [UserScope.email, UserScope.phone], // Adicione mais escopos se necessário\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new LogtoClient instance with custom scopes and API resources. It uses the LogtoConfig class to specify additional configuration options, including read and write scopes and multiple API resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"read\", \"write\"], // Adicionar escopos\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Adicionar recursos de API\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organization Scopes in TypeScript\nDESCRIPTION: This code snippet configures Logto authentication for a Next.js application with organization scopes enabled. It imports the UserScope enum from the @logto/next package and adds the Organizations scope to the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Authentication with Logto\nDESCRIPTION: This configuration sets up authentication in an Angular application using Logto. It specifies the API resource URL and the required OAuth scopes including openid, profile, offline_access, read, and write permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        scopes: ['openid', 'profile', 'offline_access', 'read', 'write'],\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Swift SDK\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to asynchronously obtain an access token for a specific API resource. It uses Swift's async/await syntax for handling asynchronous operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet accessToken = try await client.getAccessToken(for: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Specifying API Resources in LogtoConfig Initialization (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates initializing a `LogtoConfig` object, focusing on the `resources` parameter. This parameter accepts a list of API resource identifiers (URLs) for which specific access tokens will be requested during the authentication flow using the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntitle=\"LogtoViewModel.kt\"\nval logtoConfig = LogtoConfig(\n    //...other configs\n    // highlight-start\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"), // 添加 API 资源\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token with Logto Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Logto client to retrieve an access token for a specific API endpoint. It uses an asynchronous function to get the token and then logs it to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst accessToken = await logtoClient.getAccessToken('https://store.your-app.com/api');\nconsole.log('Token de acesso', accessToken);\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client Initialization\nDESCRIPTION: This code shows how to request additional scopes by passing them in the LogtoConfig object when initializing the Logto client. It includes scopes for email, phone, custom data, and organizations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst logtoConfig = {\n  scopes: ['email', 'phone', 'custom_data', 'organizations'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Controller Actions in ASP.NET Core\nDESCRIPTION: Controller implementation with SignIn and SignOut actions for Logto authentication. The SignIn method redirects to Logto's sign-in page, while SignOut clears the authentication cookie and redirects to Logto's sign-out page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_implement-buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HomeController : Controller\n{\n  public IActionResult SignIn()\n  {\n    // This will redirect the user to the Logto sign-in page.\n    return Challenge(new AuthenticationProperties { RedirectUri = \"/\" });\n  }\n\n  // Use the `new` keyword to avoid conflict with the `ControllerBase.SignOut` method\n  new public IActionResult SignOut()\n  {\n    // This will clear the authentication cookie and redirect the user to the Logto sign-out page\n    // to clear the Logto session as well.\n    return SignOut(new AuthenticationProperties { RedirectUri = \"/\" });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to obtain an access token for a specific API endpoint. The getAccessToken method is called with the target API URL as an argument, and it returns a Promise that resolves to the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst token = await logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code sets up NextAuth authentication using the Logto provider. It specifies the provider ID, name, and authorization scope. The scope includes 'openid', 'offline_access', 'profile', and 'email' permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      // ... other options\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      // ... other options\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Access Token with useLogto Hook in React (TypeScript)\nDESCRIPTION: This React component uses the `useLogto` hook from `@logto/react` to check if a user is authenticated (`isAuthenticated`). If true, it calls `getAccessToken` with the specific resource identifier 'https://shopping.your-app.com/api' to retrieve a JWT access token asynchronously within a `useEffect` hook. The obtained token is stored in the component's state (`accessToken`) using `useState` and rendered within a paragraph tag. It requires `@logto/react` and React libraries.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntitle=\"pages/Home/index.tsx\"\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Logto Client in Nuxt.js\nDESCRIPTION: This snippet shows how to access the Logto client instance directly using the useLogtoClient() composable. This provides access to all methods offered by the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = useLogtoClient();\n```\n\n----------------------------------------\n\nTITLE: AND Joint Mode Search Parameters\nDESCRIPTION: Example of constructing search parameters with AND joint mode\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/advanced-user-search.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', '%foo%'],\n  ['search.primaryEmail', '%@gmail.com'],\n  ['joint', 'and'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Options in C#\nDESCRIPTION: This code configures Logto authentication options by setting the resource URL and specifying the required scopes. It's part of the service configuration in a C# application, likely in the Program.cs file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Resource = \"https://shopping.your-app.com/api\";\n  options.Scopes = new string[] {\n    \"openid\",\n    \"profile\",\n    \"offline_access\",\n    \"read\",\n    \"write\"\n  };\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing LogtoClient in Swift\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object with custom parameters and use it to initialize a LogtoClient. The configuration includes the Logto endpoint, application ID, requested scopes (read and write), and API resources that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"read\", \"write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Rendering ConnectorGuide Component for Apple Sign-in Setup\nDESCRIPTION: JSX code that renders the ConnectorGuide component which provides detailed instructions on setting up Apple Sign-in connector in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ConnectorGuide />\n```\n\n----------------------------------------\n\nTITLE: Alteration Script Naming Format for Contributors\nDESCRIPTION: Example format for naming database alteration scripts when developing features that require schema changes. Should follow the pattern with timestamp and descriptive name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/database-alteration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnext-[timestamp]-what-to-do.ts\n```\n\n----------------------------------------\n\nTITLE: Loading User Data in SvelteKit Layout Server\nDESCRIPTION: Sets up a layout server load function that retrieves the user object from locals and makes it available to all pages in the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = async ({ locals }) => {\n  return { user: locals.user };\n};\n```\n\n----------------------------------------\n\nTITLE: Obtenir un jeton d'organisation en Swift\nDESCRIPTION: Code Swift pour récupérer de façon asynchrone un jeton d'organisation pour un identifiant d'organisation spécifique.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet token = try await client.getOrganizationToken(forId: \"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Scopes and Resources in Nuxt\nDESCRIPTION: Demonstrates how to set up Logto authentication in a Nuxt.js configuration file with custom API scopes and resource endpoints. The configuration includes read/write permissions for shopping and store APIs along with their respective resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Component for Access Token Retrieval in Next.js\nDESCRIPTION: A client component that receives a server action as a prop and uses it to retrieve an access token when a button is clicked. The component logs the token to the console for demonstration purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetAccessToken: () => Promise<string>;\n};\n\nconst GetAccessToken = ({ onGetAccessToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetAccessToken();\n        console.log(token);\n      }}\n    >\n      获取访问令牌 (访问控制台日志)\n    </button>\n  );\n};\n\nexport default GetAccessToken;\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Actions in SvelteKit (TypeScript)\nDESCRIPTION: This code defines server-side actions for sign-in and sign-out functionality using the Logto client in a SvelteKit application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actions } from './$types';\n\nexport const actions: Actions = {\n  signIn: async ({ locals }) => {\n    await locals.logtoClient.signIn('http://localhost:3000/callback');\n  },\n  signOut: async ({ locals }) => {\n    await locals.logtoClient.signOut('http://localhost:3000/');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in Nuxt Config\nDESCRIPTION: Defines Logto configuration in Nuxt.js application settings, specifying authorization scopes for shopping and store operations along with their corresponding API resource endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler for Logto Client in Expo\nDESCRIPTION: This code snippet shows how to configure the Metro bundler to resolve the '@logto/client/shim' module in Expo projects. It enables package exports support, which is necessary for versions of the Logto SDK <= v0.3.0.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  // ...\n  resolver: {\n    unstable_enablePackageExports: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Resources in Kotlin\nDESCRIPTION: Demonstrates how to set up multiple API resource endpoints in Logto configuration. The example shows adding shopping and store API endpoints to the resources list.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    // highlight-start\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"), // Add API resources\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Hooks in SvelteKit with sequence()\nDESCRIPTION: This snippet shows how to combine the Logto hook with other SvelteKit hooks using the sequence() helper function, allowing multiple hooks to be chained together.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sequence } from '@sveltejs/kit/hooks';\n\nexport const handle = sequence(handleLogto, handleOtherHook);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization API Access Token in Go\nDESCRIPTION: This snippet demonstrates how to obtain an access token for a specific API resource within an organization using the Logto client. It uses the 'GetAccessToken' method, passing the API URL and organization ID as parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := client.GetAccessToken(\n  'https://shopping.your-app.com/api',\n  organizationId\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sign-Out with Logto in Capacitor\nDESCRIPTION: Handles user sign-out from the application by calling the signOut method without a redirect URI, which will show the Logto logout page to the user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst onClick = async () => {\n  await logtoClient.signOut();\n  console.log(await logtoClient.isAuthenticated()); // false\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Request Claims in Logto Authentication Configuration\nDESCRIPTION: This code shows how to enable fetching additional claims that require network requests by setting GetClaimsFromUserInfoEndpoint to true in the Logto authentication options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.GetClaimsFromUserInfoEndpoint = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope for Capacitor in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a configuration object for Logto in a Capacitor project. It imports necessary types from '@logto/capacitor' and sets up the config object with the Organizations scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Manually Fetching User Information with Logto in Nuxt.js\nDESCRIPTION: This snippet shows how to manually fetch user information using the Logto client in a Nuxt.js application. It uses the useLogtoClient() composable and handles authentication check and error handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogtoClient, useState, callOnce } from '#imports';\n\nconst client = useLogtoClient();\nconst userInfo = useState(null);\n\n// 클라이언트 사이드에서 실행되지 않도록 한 번만 호출\nawait callOnce(async () => {\n  if (!client) {\n    throw new Error('Logto 클라이언트를 사용할 수 없습니다');\n  }\n\n  if (!(await client.isAuthenticated())) {\n    return;\n  }\n\n  try {\n    userInfo.value = await client.fetchUserInfo();\n  } catch (error) {\n    console.error('사용자 정보를 가져오지 못했습니다:', error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Route in Express\nDESCRIPTION: Express route for handling user sign-out by clearing the session tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/sign-out', (req, res) => {\n  req.session.tokens = null;\n  res.send('Sign-out successful');\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature in Node.js\nDESCRIPTION: This code snippet demonstrates how to verify the signature of a Webhook request from Logto using Node.js crypto module. It creates an HMAC using SHA-256 algorithm with the signing key and raw request body, then compares the generated signature with the expected signature.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/developers/webhooks/secure-webhooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHmac } from 'node:crypto';\n\nexport const verify = (signingKey: string, rawBody: Buffer[], expectedSignature: string) => {\n  const hmac = createHmac('sha256', signingKey);\n  hmac.update(rawBody);\n  const signature = hmac.digest('hex');\n  return signature === expectedSignature;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with API Resource in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to add Logto authentication to the service collection in an ASP.NET Core application. It specifically highlights the setting of the 'Resource' option, which is used to specify the API resource indicator for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.Resource = \"https://<your-api-resource-indicator>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Multiple API Resources in React Native\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object for a React Native application. It shows the configuration with appId, endpoint, and multiple API resources that the application will need access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // API 리소스를 추가하세요\n  // highlight-start\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple Value Exact Match Parameters\nDESCRIPTION: Example of searching for multiple exact name matches\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/advanced-user-search.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', 'Alice'],\n  ['search.name', 'Bob'],\n  ['mode.name', 'exact'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Callback URL in AndroidManifest.xml\nDESCRIPTION: XML configuration needed in AndroidManifest.xml to register the callback URL for Logto sign-in functionality. This enables capturing the callback URL from Logto's sign-in web page using flutter_web_auth.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/code-snippets/_flutter-web-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<activity android:name=\"com.linusu.flutter_web_auth.CallbackActivity\" android:exported=\"true\">\n    <intent-filter android:label=\"flutter_web_auth\">\n        <action android:name=\"android.intent.action.VIEW\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <category android:name=\"android.intent.category.BROWSABLE\"/>\n        <data android:scheme=\"io.logto\"/>\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Handler with API Resources in TypeScript\nDESCRIPTION: Demonstrates how to set up the Logto authentication handler with multiple API resource endpoints. The configuration shows the resources array being populated with different API URLs that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Creating CustomLogoutHandler for Logout Success\nDESCRIPTION: This Java class implements the LogoutSuccessHandler to handle successful logout events by clearing the session and redirecting users to the home page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport java.io.IOException;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\n\npublic class CustomLogoutHandler implements LogoutSuccessHandler {\n  @Override\n  public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)\n      throws IOException, ServletException {\n    HttpSession session = request.getSession();\n\n    if (session != null) {\n      session.invalidate();\n    }\n\n    response.sendRedirect(\"/home\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Organization-Specific Access Token with Logto SDK\nDESCRIPTION: Example of how to request an access token with organization context using Logto SDK. The code demonstrates adding the organization_id parameter to getAccessToken method and retrieving token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-api-reources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst accessToken = await logto.getAccessToken('https://my-resource.com/api', 'org_1');\n\n// Oder Ansprüche direkt abrufen\nconst accessTokenClaims = await logto.getAccessTokenClaims('https://my-resource.com/api', 'org_1');\nconsole.log(accessTokenClaims.organization_id); // 'org_1'\nconsole.log(accessTokenClaims.aud); // 'https://my-resource.com/api'\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in NextAuth for Logto Provider\nDESCRIPTION: This code shows how to request additional scopes from the Logto provider by configuring the authorization parameters in NextAuth setup. The example adds 'openid', 'offline_access', 'profile', and 'email' scopes to the request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Organization Scope - Python\nDESCRIPTION: Initialize a Logto client in Python with organization scopes enabled.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...\n        scopes=[UserInfoScope.organizations],\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Gin Web Server with Logto SDK in Go\nDESCRIPTION: This code snippet demonstrates how to set up a basic Gin web server and incorporate the Logto SDK. It imports the necessary packages, including the Logto client, and defines a simple route that responds with 'Hello Logto!'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_installation.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// main.go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t// Add dependency\n\t\"github.com/logto-io/go/client\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello Logto!\")\n\t})\n\trouter.Run(\":3000\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler in SvelteKit Server Hooks\nDESCRIPTION: This code configures the SvelteKit server hooks to handle Logto authentication. It imports the necessary components from the Logto SvelteKit SDK and sets up the authentication handler with custom user scopes for email and phone.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope, handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto({\n  // ...other options\n  scopes: [UserScope.email, UserScope.phone], // 如有需要，添加更多权限 (Scopes)\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-In and Sign-Out Routes in Rails\nDESCRIPTION: Adds routes for the sign-in and sign-out functionality to the Rails application, mapping them to the appropriate controller actions that will handle the Logto authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-start\n  get \"/sign_in\", to: \"sample#sign_in\"\n  get \"/sign_out\", to: \"sample#sign_out\"\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Plugin in Vue Application\nDESCRIPTION: This code snippet shows how to import and configure the Logto plugin in a Vue application. It requires setting up the Logto endpoint and application ID in the configuration object before registering the plugin with the Vue app instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_init-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, LogtoConfig } from '@logto/vue';\nimport { createApp } from 'vue';\nimport App from './App.vue';\n\nconst config: LogtoConfig = {\n  endpoint: '<your-logto-endpoint>',\n  appId: '<your-application-id>',\n};\n\nconst app = createApp(App);\n\napp.use(createLogto, config);\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication and Fetching Access Token with Logto Client in JavaScript\nDESCRIPTION: This code demonstrates how to use the Logto client to check if a user is authenticated before retrieving an access token. It utilizes async/await syntax to ensure asynchronous actions complete before proceeding and runs additional logic only when the user is authenticated. Dependencies include an initialized instance of 'logtoClient'. The key parameter is the authentication status, and if true, the code retrieves the access token and logs it. The snippet must be executed in an environment where 'logtoClient' is available and authorized.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\\n\\nif (isAuthenticated) {\\n  (async () => {\\n    const token = await logtoClient.getAccessToken();\\n    console.log(token);\\n  })();\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: Creates a LogtoConfig instance with required authentication parameters including endpoint, app ID, API resources and their associated scopes. Used to configure Logto authentication for a Flutter application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Add your API resources' scopes\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Logto Authentication with API Resource in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to add Logto authentication to the service collection in an ASP.NET Core application. It specifically highlights the configuration of the API resource indicator, which is essential for proper authentication setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.Resource = \"https://<your-api-resource-indicator>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Types for Logto Client\nDESCRIPTION: This snippet demonstrates how to add TypeScript type definitions for the Logto client in a SvelteKit application's app.d.ts file, enhancing type safety and developer experience when working with Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LogtoClient, UserInfoResponse } from '@logto/sveltekit';\n\ndeclare global {\n  namespace App {\n    interface Locals {\n      logtoClient: LogtoClient;\n      user?: UserInfoResponse;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Express\nDESCRIPTION: This snippet demonstrates how to configure additional scopes in the Logto Express middleware. It adds email and phone scopes to the configuration object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig, UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone], // Agrega más alcances si es necesario\n  // ...otras configuraciones\n};\n```\n\n----------------------------------------\n\nTITLE: Triggering Re-consent for New Permissions in TypeScript\nDESCRIPTION: Code snippet demonstrating how to trigger a re-consent or re-login process for users to receive new permission changes. This is required when new permissions are introduced and assigned to a user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/role-based-access-control/protect-api-resources-with-rbac.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nsignIn({ redirectUri: 'your-redirect-url', prompt: 'consent' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Auth Provider with API Resource in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to configure the Angular application's providers array within `appConfig`. It specifically highlights setting the `resource` property within the `buildAngularAuthConfig` function to specify the intended audience or API endpoint for which access tokens should be requested. It utilizes `provideHttpClient` with `withFetch` and `provideAuth` for setting up HTTP client and authentication services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client in Next.js\nDESCRIPTION: Initializes the Logto client configuration with application credentials, endpoints, and cookie settings for a Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoNextConfig } from '@logto/next';\n\nexport const logtoConfig: LogtoNextConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // Ex.: http://localhost:3001\n  baseUrl: '<your-nextjs-app-base-url>', // Ex.: http://localhost:3000\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto React SDK with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the LogtoConfig object for the Logto React SDK. It includes setting custom scopes for read and write permissions, as well as defining specific API resources for a shopping application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Using Logto Authentication in Vue with TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto authentication library in a Vue component. It imports the useLogto hook, destructures authentication state and methods, checks if a user is authenticated, and retrieves an access token for a specific API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type UserInfoResponse } from '@logto/vue';\n\nconst { isAuthenticated, getAccessToken } = useLogto();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const accessToken = await getAccessToken('https://shopping.your-app.com/api');\n    console.log(accessToken);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope in React Native\nDESCRIPTION: This snippet shows how to create a LogtoConfig object with the Organizations user scope enabled. The configuration is defined in a React Native TypeScript file and imports necessary types from the @logto/rn package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Access Token for API Resource in Go\nDESCRIPTION: This code snippet demonstrates how to use the `GetAccessToken` method to retrieve an access token for a specific API resource within an organization. It requires the API resource URL and the organization ID as parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := client.GetAccessToken(\n  'https://shopping.your-app.com/api',\n  organizationId\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Logto Client in Go Web Application\nDESCRIPTION: This snippet demonstrates how to create a LogtoClient for each user request using the Logto configuration. It also shows how to check authentication status and display different content based on the auth state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_init-logto-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// ...\n\n\trouter.GET(\"/\", func(ctx *gin.Context) {\n\t\t// LogtoClient erstellen\n\t\tsession := sessions.Default(ctx)\n\t\tlogtoClient := client.NewLogtoClient(\n\t\t\tlogtoConfig,\n\t\t\t&SessionStorage{session: session},\n\t\t)\n\n\t\t// Verwende Logto, um den Inhalt der Startseite zu steuern\n\t\tauthState := \"Du bist nicht auf dieser Website angemeldet. :(\"\n\n\t\tif logtoClient.IsAuthenticated() {\n\t\t\tauthState = \"Du bist auf dieser Website angemeldet! :)\"\n\t\t}\n\n\t\thomePage := `<h1>Hallo Logto</h1>` +\n\t\t\t\"<div>\" + authState + \"</div>\"\n\n\t\tctx.Data(http.StatusOK, \"text/html; charset=utf-8\", []byte(homePage))\n\t})\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple SvelteKit Hooks with Logto\nDESCRIPTION: This snippet shows how to use SvelteKit's sequence function to chain multiple hooks together when Logto is one of several hooks needed in the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sequence } from '@sveltejs/kit/hooks';\n\nexport const handle = sequence(handleLogto, handleOtherHook);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organization Scope in TypeScript\nDESCRIPTION: Sets up Logto configuration object with organization scopes enabled. Imports the UserScope from @logto/next package and configures the scopes array to include organization access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Express Middleware for Decoding JWT Token without Validation\nDESCRIPTION: Express.js middleware that decodes the JWT token from the Logto-ID-Token header without validating it. This provides access to user information contained in the token for use within the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrate-logto/protected-app.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\n\nconst decodeIdToken = (req, res, next) => {\n  const token = req.headers['Logto-ID-Token'];\n\n  if (!token) {\n    return res.status(403).send({\n      status: false,\n      message: 'missing required Logto-ID-Token header',\n    });\n  }\n\n  const parts = token.split('.');\n  if (parts.length !== 3) {\n    throw new Error('Invalid ID token');\n  }\n\n  const payload = parts[1];\n  const decodedPayload = atob(payload.replace(/-/g, '+').replace(/_/g, '/'));\n  const claims = JSON.parse(decodedPayload);\n\n  req.user = claims;\n  next();\n};\n\nconst app = express();\n\napp.use(decodeIdToken);\n\napp.get('/', (req, res) => {\n  res.json(req.user);\n});\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In with Logto in Capacitor\nDESCRIPTION: Handles user sign-in by invoking the signIn method with a callback URL, checking authentication status, and retrieving token claims after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst onClick = async () => {\n  await logtoClient.signIn('com.example.app://callback');\n  console.log(await logtoClient.isAuthenticated()); // true\n  console.log(await logtoClient.getIdTokenClaims()); // { sub: '...', ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in Kotlin\nDESCRIPTION: Demonstrates the initialization of LogtoConfig object with custom API scopes for shopping and store operations, along with their corresponding resource endpoints. The configuration defines read/write permissions for shopping and store APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ..other configs\n    // highlight-start\n    scopes = listOf(\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering FurtherReadings Component in MDX\nDESCRIPTION: This MDX code renders the `FurtherReadings` component without any props. This component likely contains links to related documentation or resources for further information, imported from './fragments/_further-readings.mdx'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-saml-enterprise-sso.mdx#2025-04-22_snippet_9\n\nLANGUAGE: mdx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Next.js with Logto\nDESCRIPTION: This code snippet demonstrates how to display user information after authentication in a Next.js application using Logto. It renders a table of user claims obtained from the session object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from '@/auth';\n\nexport default async function Home() {\n  const session = await auth();\n\n  return (\n    <main>\n      {session?.user && (\n        <div>\n          <h2>클레임 (Claims):</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>이름</th>\n                <th>값</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(session.user).map(([key, value]) => (\n                <tr key={key}>\n                  <td>{key}</td>\n                  <td>{String(value)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in PHP\nDESCRIPTION: This snippet demonstrates how to create a LogtoClient instance with specific access scopes and API resources. The configuration includes shopping and store related permissions, along with their corresponding API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"], // 添加权限 (Scopes)\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // 添加 API 资源 (API resources)\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating CustomSuccessHandler for Login Success\nDESCRIPTION: This Java class implements the AuthenticationSuccessHandler to handle successful login events by redirecting users to the /user page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport java.io.IOException;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\npublic class CustomSuccessHandler implements AuthenticationSuccessHandler {\n  @Override\n  public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,\n      Authentication authentication) throws IOException, ServletException {\n    response.sendRedirect(\"/user\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SAML Profile Mapping Fields\nDESCRIPTION: Table defining the profile mapping fields for SAML integration, specifying how user profile attributes should be mapped between systems.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/saml/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| ProfileMap fields | Type   | Required | Default value |\n| ----------------- | ------ | -------- | ------------- |\n| id                | string | false    | id            |\n| name              | string | false    | name          |\n| avatar            | string | false    | avatar        |\n| email             | string | false    | email         |\n| phone             | string | false    | phone         |\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Authentication with API Resource in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Angular's authentication by providing an auth provider with a specific API resource URL. The code shows a section of an app.config.ts file where the authentication configuration is set up, highlighting the resource parameter specifically.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token in JavaScript\nDESCRIPTION: Example of obtaining an organization token using JavaScript Logto SDK\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await logto.getOrganizationToken('<organization-id>');\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Route in Express\nDESCRIPTION: Code snippet for creating a sign-out route in Express. This route clears the tokens from the session to sign out the user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/sign-out', (req, res) => {\n  req.session.tokens = null;\n  res.send('Sign out successful');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: This snippet creates a LogtoConfig object with essential parameters for Logto integration. It includes the Logto endpoint, app ID, resource URLs, and shared scopes for API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-shared-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Alcances compartidos por todos los recursos\n  // highlight-start\n  scopes: [\"read\", \"write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope in TypeScript\nDESCRIPTION: This snippet shows how to create a Logto configuration object with the Organizations user scope enabled. The code imports necessary types from the '@logto/capacitor' package and sets up the configuration with specific scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Vue.js with Logto\nDESCRIPTION: This code snippet shows how to configure additional scopes when initializing Logto in a Vue.js application. It includes scopes for email, phone, custom data, identities, and organizations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\nconst app = createApp(App);\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n  ],\n  // highlight-end\n});\napp.use(router);\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: Creates a Logto client instance with custom access scopes and API resource endpoints. The configuration specifies read and write permissions for shopping and store domains, targeting specific API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet uses the Logto client to asynchronously fetch an organization token. It requires the Logto client to be properly initialized and available in the 'locals' object. The 'organizationId' parameter is used to specify which organization's token to retrieve.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client Config with Custom Scopes in Go\nDESCRIPTION: Demonstrates how to set up the Logto client configuration object with custom authentication scopes for email and phone access. This configuration is used to initialize the Logto SDK with specific permission scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomAuthManager with Logto Configuration in Dart\nDESCRIPTION: This snippet defines the CustomAuthManager class with Logto configuration. It sets up the LogtoClient with the provided app ID and endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomAuthManager {\n  late LogtoClient logtoClient;\n\n  final logtoConfig = const LogtoConfig(\n      appId: '<YOUR-APP-ID>',\n      endpoint: '<YOUR-LOGTO-ENDPOINT>');\n\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Actions in SvelteKit\nDESCRIPTION: This code defines server-side actions for sign-in and sign-out functionality using the Logto client in a SvelteKit application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actions } from './$types';\n\nexport const actions: Actions = {\n  signIn: async ({ locals }) => {\n    await locals.logtoClient.signIn('http://localhost:3000/callback');\n  },\n  signOut: async ({ locals }) => {\n    await locals.logtoClient.signOut('http://localhost:3000/');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Hook in SvelteKit Server\nDESCRIPTION: Adds the Logto authentication hook to the SvelteKit server in hooks.server.ts file. This initializes the Logto client with your application credentials.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-logto-app-id>',\n    appSecret: '<your-logto-app-secret>',\n  },\n  {\n    encryptionKey: '<a-random-string>',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to asynchronously fetch an organization token using the Logto client. It requires an initialized logtoClient instance and an organizationId as input. The function returns a promise that resolves to the organization token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto PHP Client with Organization Scope\nDESCRIPTION: Demonstrates how to create a new LogtoClient instance with organizations scope. This setup is required for accessing organization-related features in Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// highlight-next-line\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    scopes: [UserScope::organizations], // Ajouter des portées\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources in Logto React Config\nDESCRIPTION: This snippet demonstrates how to configure multiple API resources in Logto's React integration. The code imports LogtoConfig type from the @logto/react package and creates a configuration object that includes an array of API resource URLs that the application will access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Añadir recursos de API\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-In and Sign-Out Routes in Ruby on Rails\nDESCRIPTION: This code shows how to set up routes for sign-in and sign-out actions in a Ruby on Rails application's routes file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-start\n  get \"/sign_in\", to: \"sample#sign_in\"\n  get \"/sign_out\", to: \"sample#sign_out\"\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Config Object in TypeScript\nDESCRIPTION: Creates a LogtoConfig object with application settings including app ID, endpoint URL, authentication scopes and protected resource URLs. This configuration is required to set up Logto authentication in a Capacitor app.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token with Logto Client in Kotlin\nDESCRIPTION: This code demonstrates how to request an access token for a specific API endpoint using the Logto client. It implements a callback pattern to handle both successful token retrieval and potential exceptions. The access token is targeted for a shopping API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getAccessToken(\"https://shopping.your-app.com/api\") { logtoException, accessToken ->\n    logtoException?.let { println(it) }\n    accessToken?.let { println(it) }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthorizeView Component in Razor\nDESCRIPTION: This Razor snippet demonstrates how to use the AuthorizeView component to create conditional UI based on the user's authentication state in a Blazor WebAssembly application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: cshtml\nCODE:\n```\n@using Microsoft.AspNetCore.Components.Authorization\n@page \"/\"\n\n<AuthorizeView>\n    <Authorized>\n        @* Signed in view *@\n        <button @onclick=\"OnLogoutButtonClickAsync\">\n            Sign out\n        </button>\n    </Authorized>\n    <NotAuthorized>\n        @* Unauthenticated view *@\n        <button @onclick=\"OnLoginButtonClickAsync\">\n            Sign in\n        </button>\n    </NotAuthorized>\n</AuthorizeView>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Dart\nDESCRIPTION: This function asynchronously fetches an access token for a given resource using the Logto client. It takes a resource string as input and returns a Future that resolves to an AccessToken object or null.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_get-resource-access-token.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Jeton d'accès?> getAccessToken(String resource) async {\n  var token = await logtoClient.getAccessToken(resource: resource);\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Nuxt.js Component\nDESCRIPTION: This snippet illustrates how to access additional user claims (name, email, phone) in a Nuxt.js component after configuring extra scopes in the Logto module.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"user\">\n    <p>Nombre: {{ user.name }}</p>\n    <p>Email: {{ user.email }}</p>\n    <p>Teléfono: {{ user.phone }}</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information in Next.js API Route Handler\nDESCRIPTION: This code snippet shows how to get user information in a Next.js API route handler using the getLogtoContext function from @logto/next/server-actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext } from '@logto/next/server-actions';\nimport { logtoConfig } from '../../logto';\n\nexport const dynamic = 'force-dynamic';\n\nexport async function GET() {\n  const { claims } = await getLogtoContext(logtoConfig);\n\n  return Response.json({ claims });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet sets up the Logto authentication handler with custom scopes and resources. It exports a 'handle' function that uses the 'handleLogto' function, specifying read and write scopes and two API resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with User Organizations Scope in Go\nDESCRIPTION: This code snippet illustrates how to set up the LogtoConfig struct for the Logto client, specifically adding the UserScopeOrganizations to the Scopes array. This configuration enables the client to request access to user organization information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Scopes: []string{core.UserScopeOrganizations},\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments - MDX and JavaScript\nDESCRIPTION: This snippet demonstrates how to import multiple MDX document fragments and components, both local and package-based, into a modular documentation file. These imports inject content sections dynamically, allowing content reuse, better organization, and separation of concerns. MDX and JavaScript syntax are both used, and the imported components represent various setup steps for Azure AD and Flutter integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-azure-ad.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/azure-ad/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exact Matching for User Search\nDESCRIPTION: This snippet demonstrates how to perform an exact match search on a field by setting the mode to 'exact'. It searches for users whose name is exactly 'Alice'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', 'Alice'],\n  ['mode.name', 'exact'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK for Hasura Integration in React\nDESCRIPTION: Configuration setup for Logto SDK including endpoint, application credentials, required scopes and resources for Hasura integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/hasura/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config: LogtoConfig = {\n  endpoint: 'http://localhost:3001',\n  appId: '<your-application-id>',\n  appSecret: '<your-application-secret>',\n  scopes: [\n    ...// existing scopes\n    'read:user',\n    'maintain:user',\n  ],\n  resources: [\n    ...// existing resources\n    'https://*.hasura.app/api',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with multiple API resources. The resources array specifies the URLs of the API endpoints that the client will have access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API リソースを追加\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet shows how to configure the Logto SDK with custom authorization scopes and resource API endpoints. The scopes define permissions for shopping and store operations, while resources specify the API endpoints that these permissions apply to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Handler with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This snippet shows how to configure the Logto handler with custom scopes and resources. It sets up read and write scopes and defines specific API endpoints as resources for authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Button with Logto in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a sign-out button, add it to the DOM, and implement the sign-out functionality using Logto. It creates a button element, sets its text, adds a click event listener, and appends it to the document body. The sign-out function uses the Logto client to perform the sign-out action.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_implement-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = document.createElement('button');\nbutton.innerHTML = 'Sign Out';\n\nbutton.addEventListener('click', onClickSignOut);\n\ndocument.body.appendChild(button);\n\nconst onClickSignOut = () => {\n  logtoClient.signOut('http://localhost:3000');\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser Client with Organizations Scope\nDESCRIPTION: This code imports the Logto browser SDK and initializes a new LogtoClient instance with the Organizations user scope. The client is attached to the window object for global access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from 'https://esm.run/@logto/browser';\n\nwindow.logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token for a Resource with LogtoClient (Kotlin)\nDESCRIPTION: This Kotlin snippet demonstrates using the `logtoClient.getAccessToken` method to request an access token for the specified resource URL (`https://shopping.your-app.com/api`). It uses a callback function to handle the result, printing either the `LogtoException` if an error occurs or the `accessToken` if successful. It depends on an initialized `logtoClient` instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getAccessToken(\"https://shopping.your-app.com/api\") { logtoException, accessToken ->\n    logtoException?.let { println(it) }\n    accessToken?.let { println(it) }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In in Flutter with Logto\nDESCRIPTION: This code snippet shows how to add a sign-in button to a Flutter app and implement the sign-in functionality using the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  final redirectUri = 'io.logto://callback';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signInButton = TextButton(\n      onPressed: () async {\n        await logtoClient.signIn(redirectUri);\n        render();\n      },\n      child: const Text('Sign In'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Pathnames for Logto Routes\nDESCRIPTION: This snippet shows how to customize the pathnames for sign-in, sign-out, and callback routes in the Nuxt configuration file when using the Logto module.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // highlight-start\n  logto: {\n    pathnames: {\n      signIn: '/login',\n      signOut: '/logout',\n      callback: '/auth/callback',\n    },\n  },\n  // highlight-end\n  // ...andere Konfigurationen\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token with Logto Client\nDESCRIPTION: Asynchronous call to retrieve an organization token using the Logto client SDK. Takes an organizationId parameter and returns a token for organization-specific operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in Vue\nDESCRIPTION: This snippet shows how to use the createLogto function from @logto/vue to configure Logto authentication in a Vue application. It demonstrates setting custom scopes and resources for API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information with Logto Client in TSX\nDESCRIPTION: This code retrieves user information using the Logto client's fetchUserInfo method and logs the result to the console. The method returns a promise that resolves to the user's information object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_fetch-userinfo-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\nconsole.log(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Hook with Environment Variables in SvelteKit\nDESCRIPTION: This snippet demonstrates how to use environment variables for Logto configuration in SvelteKit. This approach is recommended for handling sensitive information like API keys and secrets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\nimport { env } from '$env/dynamic/private';\n\nexport const handle = handleLogto(\n  {\n    endpoint: env.LOGTO_ENDPOINT,\n    appId: env.LOGTO_APP_ID,\n    appSecret: env.LOGTO_APP_SECRET,\n  },\n  {\n    encryptionKey: env.LOGTO_COOKIE_ENCRYPTION_KEY,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Logto Browser SDK in HTML\nDESCRIPTION: This snippet shows how to import the Logto Browser SDK from the jsdelivr CDN and initialize a client instance with configuration for authentication. It sets up the client with an endpoint, application ID, required scopes, and API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Importer le SDK \\`@logto/browser\\` depuis le CDN jsdelivr\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-application-id>',\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting up LogtoConfig with Custom Scopes in Kotlin\nDESCRIPTION: Demonstrates how to initialize a LogtoConfig object with custom scopes for user data access. Shows two equivalent ways to specify scopes - using string literals or UserScope enum values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/android/_scopes-sample-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // oder `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in PHP\nDESCRIPTION: This code initializes a LogtoClient instance with custom scopes and API resources. It adds 'read' and 'write' scopes, and specifies two API resource URLs for the client to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"read\", \"write\"], // Ajouter des portées (scopes)\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Ajouter des ressources API\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Manually Fetching User Info in Logto-Protected API Route in Next.js (TypeScript)\nDESCRIPTION: This API route demonstrates how to manually fetch and return userInfo from Logto in a Next.js backend route, with fetchUserInfo set to true. Returns userInfo JSON if authenticated, else 401 Unauthorized. Ensures user profile data is available via the authentication context. Requires a correctly setup logtoClient and API integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { logtoClient } from '../../libraries/logto';\\n\\nexport default logtoClient.withLogtoApiRoute(\\n  (request, response) => {\\n    if (!request.user.isAuthenticated) {\\n      response.status(401).json({ message: 'Unauthorized' });\\n\\n      return;\\n    }\\n\\n    response.json({\\n      userInfo: request.user.userInfo,\\n    });\\n  },\\n  { fetchUserInfo: true }\\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in Rails Controller\nDESCRIPTION: This snippet shows how to implement sign-in and sign-out methods in a Rails controller using the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def sign_in\n    @client.sign_in(redirect_uri: request.base_url + \"/callback\")\n  end\n\n  def sign_out\n    @client.sign_out(post_logout_redirect_uri: request.base_url)\n  end\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing ID Token Claims in Python\nDESCRIPTION: This snippet demonstrates how to access the user claims from the ID token after authentication. It shows the pattern for retrieving the claims asynchronously from the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nidTokenClaims = await client.getIdTokenClaims();\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Vue Provider\nDESCRIPTION: This snippet shows how to configure the Logto Vue provider to request additional user scopes such as email, phone, custom data, identities, and organizations. These scopes are required to access additional user claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\nconst app = createApp(App);\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n  ],\n  // highlight-end\n});\napp.use(router);\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Scope in Logto PHP Client Configuration\nDESCRIPTION: This PHP code snippet demonstrates initializing the LogtoClient with specific user scopes. It imports the `UserScope` constant and includes `UserScope::organizations` in the `scopes` array within the `LogtoConfig` constructor. This configuration requests permission to access organization-related user information during the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// highlight-next-line\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    scopes: [UserScope::organizations], // Añadir alcances\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and initialize a LogtoClient instance. It sets up the client with an application ID, Logto endpoint, and specifies the required user scopes for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\nappId: '<your-application-id>',\nendpoint: '<your-logto-endpoint>',\nscopes: [UserScope.Email, UserScope.Phone, UserScope.CustomData, UserScope.Identities],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Strategy in Passport (TypeScript)\nDESCRIPTION: This function initializes Passport with an OpenID Connect strategy. It sets up the client ID, secret, callback URL, and specifies the required scopes for authentication. The highlighted section emphasizes the scope configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        // ... other options\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        // highlight-start\n        scope: ['openid', 'offline_access', 'profile', 'email'],\n        // highlight-end\n      }\n      // ... other options\n    )\n  );\n  // ... other options\n}\n```\n\n----------------------------------------\n\nTITLE: 配置额外权限范围 (Ruby)\nDESCRIPTION: 通过在LogtoClient::Config对象中配置scopes选项来请求额外的权限范围，如email和phone。这允许应用获取更多用户信息。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...其他配置\n    # highlight-next-line\n    scopes: [\"email\", \"phone\"] # 根據需要新增更多權限範圍\n  ),\n  # ...其他配置\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes for Logto Provider in Next.js\nDESCRIPTION: This snippet shows how to configure the Logto provider in Next.js to request additional scopes. It modifies the NextAuth configuration to include specific scopes in the authorization params.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information with Logto Client in Flutter Dart\nDESCRIPTION: This Dart snippet, part of a Flutter application's `build` method, defines a `TextButton`. When pressed, it asynchronously calls `logtoClient.getUserInfo()` to retrieve details about the authenticated user and prints the result. This button is typically shown only after a user has successfully authenticated. It depends on an available `logtoClient` instance and the Flutter framework.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_fetch-userinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```dart title=\"lib/main.dart\"\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget getUserInfoButton = TextButton(\n      onPressed: () async {\n        // highlight-start\n        final userInfo = await logtoClient.getUserInfo();\n        print(userInfo);\n        // highlight-end\n      },\n      child: const Text('取得使用者資訊'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('我的示範應用程式'),\n            isAuthenticated == true ? signOutButton : signInButton,\n            isAuthenticated == true ? getUserInfoButton : const SizedBox.shrink(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Actions in SvelteKit\nDESCRIPTION: This snippet shows how to implement sign-in and sign-out actions in a SvelteKit server-side page file (+page.server.ts).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actions } from './$types';\n\nexport const actions: Actions = {\n  signIn: async ({ locals }) => {\n    await locals.logtoClient.signIn('http://localhost:3000/callback');\n  },\n  signOut: async ({ locals }) => {\n    await locals.logtoClient.signOut('http://localhost:3000/');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Token - JavaScript Example\nDESCRIPTION: Example of retrieving an organization token using the Logto JavaScript SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await logto.getOrganizationToken('<organization-id>');\n```\n\n----------------------------------------\n\nTITLE: Visualizing Custom Token Claims Process with Mermaid\nDESCRIPTION: A sequence diagram showing the flow of adding custom token claims to an access token in Logto. It illustrates the interaction between the user, Logto (identity provider), and the service provider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/custom-token-claims/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant U as User or user agent\n  participant IdP as Logto (identity provider)\n  participant SP as Service Provider\n\n  autonumber\n  U ->> IdP: Auth request (with credentials)\n  activate IdP\n  IdP-->>IdP: Validate credentials &<br/>generate raw access token payload\n  rect var(--mermaid-rect-fill)\n  note over IdP: Custom token claims\n  IdP->>IdP: Run custom token claims script (`getCustomJwtClaims`) &<br/>get extra token claims\n  end\n  IdP-->>IdP: Merge raw access token payload and extra token claims\n  IdP-->>IdP: Sign & encrypt payload to get access token\n  deactivate IdP\n  IdP-->>U: Issue JWT-format access token\n  par Get service via API\n  U->>SP: service request (with JWT access token)\n  SP-->>U: service response\n  end\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client Configuration with Custom Scopes in Go\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig struct for the Logto client, specifically showing how to add custom scopes. It includes the 'organizations' scope from the core package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Scopes: []string{core.UserScopeOrganizations},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Organization Scope - PHP\nDESCRIPTION: Set up Logto client in PHP with organization scopes enabled.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...\n    scopes: [UserScope::organizations],\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up the Logto Express configuration object with custom scopes and resources. It imports the UserScope from '@logto/express' and defines a config object with specific scopes and API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js with yarn in Next.js\nDESCRIPTION: This command installs the beta version of next-auth package using yarn. It's another option for adding Auth.js to a Next.js application using a different package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next-auth@beta\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info in Android Logto Client\nDESCRIPTION: This snippet demonstrates how to fetch additional user information that requires a network request in the Logto Android client. It shows how to use the fetchUserInfo method to retrieve custom data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.fetchUserInfo {_, userInfoResponse ->\n    println(\"UserInfoResponse:$userInfoResponse\")\n}\n// Ahora puedes acceder al reclamo `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Setting Up Gin Application with Session Middleware\nDESCRIPTION: Example of initializing a Gin application with memory-based session middleware. This setup creates a router with session support that will be used to store Logto authentication information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_create-session-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/gin-contrib/sessions\"\n\t\"github.com/gin-contrib/sessions/memstore\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/logto-io/go/client\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\n\t// Nous utilisons une session basée sur la mémoire dans cet exemple\n\tstore := memstore.NewStore([]byte(\"your session secret\"))\n\trouter.Use(sessions.Sessions(\"logto-session\", store))\n\n\trouter.GET(\"/\", func(ctx *gin.Context) {\n\t\t// Obtenir la session utilisateur\n\t\tsession := sessions.Default(ctx)\n\t\t// ...\n\t\tctx.String(200, \"Hello Logto!\")\n\t})\n\trouter.Run(\":3000\")\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Logto Authentication in PHP Applications\nDESCRIPTION: Implementation guide for adding Logto authentication to PHP web applications, covering core functionality like sign-in, sign-out, and session management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nsession_start();\n\n// Redirect to the callback URL after user authentication\n$result = $logto->signIn('http://localhost:5000/sign-in-callback');\nheader('Location: ' . $result);\nexit;\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Authentication Routes in Express.js (TypeScript)\nDESCRIPTION: This snippet shows how to use the handleAuthRoutes helper function from @logto/express to register the necessary authentication routes (/logto/sign-in, /logto/sign-in-callback, and /logto/sign-out) in an Express.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleAuthRoutes } from '@logto/express';\n\napp.use(handleAuthRoutes(config));\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization List with Token Fetching in Vue.js Template\nDESCRIPTION: HTML template that renders a list of organization IDs with buttons to fetch organization tokens. For each organization ID, it displays the ID and provides a button that triggers the token fetching function when clicked.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <ul>\n    <li v-for=\"organizationId of organizationIds\" v-bind:key=\"organizationId\">\n      <span>{{ organizationId }}</span>\n      <button type=\"button\" @click=\"onClickFetchOrganizationToken(organizationId)\">\n        fetch token (see console)\n      </button>\n    </li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Authentication Components in React Native\nDESCRIPTION: Imports necessary components and code snippets for organization authentication in a React Native application. It uses the FetchOrganizationTokenForUser component with specific organization scope and code references.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Logto Routes in Nuxt Configuration\nDESCRIPTION: This code demonstrates how to customize the default Logto authentication routes (sign-in, sign-out, and callback) in the Nuxt.js configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // highlight-start\n  logto: {\n    pathnames: {\n      signIn: '/login',\n      signOut: '/logout',\n      callback: '/auth/callback',\n    },\n  },\n  // highlight-end\n  // ...outras configurações\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in LogtoConfig for Kotlin\nDESCRIPTION: This snippet demonstrates how to set up the 'resources' parameter in a LogtoConfig object. The resources parameter accepts a list of API endpoint URLs that the application needs to access, allowing Logto to manage authentication for these resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    // highlight-start\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"), // Ajouter des ressources API\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in TypeScript for Capacitor\nDESCRIPTION: Creates a LogtoConfig object with essential authentication parameters including application ID, endpoint URL, scopes, and resource endpoints. This configuration is required for setting up Logto authentication in a Capacitor application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in SwiftUI with Logto\nDESCRIPTION: Creates a SwiftUI view that displays user information retrieved from Logto authentication. This snippet demonstrates how to check authentication status and display the user's name from ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n  @State var name: String?\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n    name = try? client.getIdTokenClaims().name\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Text(\"Bienvenido, \\(name)\")\n      } else {\n        Text(\"Por favor, inicia sesión\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementando Rota de Logout com Logto em Python Flask\nDESCRIPTION: Este snippet mostra como criar uma rota '/sign-out' em Flask que realiza o logout do usuário. Utiliza o método client.signOut() do SDK do Logto para limpar as sessões e redirecionar o usuário após o logout.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-out\")\nasync def sign_out():\n    return redirect(\n        # Redirecionar o usuário para a página inicial após um logout bem-sucedido\n        await client.signOut(postLogoutRedirectUri=\"${defaultBaseUrl}\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Swift\nDESCRIPTION: This code initializes a LogtoClient by first creating a LogtoConfig object with custom endpoint, appId, scopes, and resources parameters. The scopes define the permission levels for different actions, while the resources specify the API endpoints that will be accessed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Shared Logto Session Cookie Flow\nDESCRIPTION: This diagram shows how a shared Logto session cookie works across multiple client applications within the same user agent. It illustrates the single sign-on experience where a user only needs to sign in once for multiple applications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph User [User agent A]\n      U[User]\n\n      subgraph Layer1 [Client domain A]\n        A[Client Application A]\n      end\n\n      subgraph Layer1 [Client domain B]\n        B[Client Application B]\n      end\n\n      subgraph Layer2 [Logto domain]\n          C{{Logto sign-in session?}}\n          D[sign-in page]\n      end\n    end\n\n    U --> |Sign-in| A\n    A --> |Redirect to Logto| C\n    U --> |Sign-in| B\n    B --> |Redirect to Logto| C\n    C --> |No| D\n    D --> |Create session| C\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional User Claims\nDESCRIPTION: Demonstrates how to access additional user claims, specifically retrieving the user's email from the claims collection.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar claims = User.Claims;\n\n// Get the user email\nvar email = claims.FirstOrDefault(c => c.Type == LogtoParameters.Claims.Email)?.Value;\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources with Logto SDK in Kotlin\nDESCRIPTION: This Kotlin snippet configures the Logto SDK by creating a LogtoConfig object with a list of API resource endpoints. The 'resources' parameter accepts a list of resource URLs which the application will request access to during authentication (e.g., OAuth2/OpenID Connect flows). Prerequisites include the Logto Kotlin SDK and access to the respective APIs. The configuration allows secure API integration and resource-based authorization, with the flexibility to add multiple resource URIs as required. Inputs include a list of resource URLs, and the output is a configured LogtoConfig object ready for use within the app.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    // highlight-start\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"), // Adicionar recursos de API\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Updating manifest.json for Logto SDK permissions in Chrome Extension\nDESCRIPTION: This snippet shows the required permissions in the manifest.json file for the Logto SDK to function in a Chrome extension. It includes identity and storage permissions, as well as host permissions for Logto API communication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"identity\", \"storage\"],\n  \"host_permissions\": [\"https://*.logto.app/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Organizations Scope to LogtoConfig in Go\nDESCRIPTION: This Go code snippet demonstrates initializing a `client.LogtoConfig` struct and setting the `Scopes` field. It specifically includes `core.UserScopeOrganizations` to request access to the user's organization information during the authentication flow using the Logto Go SDK. This is necessary when interacting with organization-related features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Scopes: []string{core.UserScopeOrganizations},\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In/Sign-Out Links in Rails View\nDESCRIPTION: This snippet demonstrates how to create conditional sign-in and sign-out links in a Rails view. It uses ERB to check the authentication status and render the appropriate link.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <a href=\"<%= sign_out_path %>\">Sign out</a>\n<% else %>\n  <a href=\"<%= sign_in_path %>\">Sign in</a>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and Resources in JavaScript\nDESCRIPTION: Creates a new LogtoClient instance with custom authorization scopes and API resources. The example configures the client with 'read' and 'write' scopes for two different API resources, extending the standard authentication setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-shared-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Fetching User Information in Nuxt.js with Logto\nDESCRIPTION: This code demonstrates how to manually fetch user information using the Logto client in a Nuxt.js application. It includes error handling and ensures the operation is performed only on the server side.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogtoClient, useState, callOnce } from '#imports';\n\nconst client = useLogtoClient();\nconst userInfo = useState(null);\n\n// Llamar una vez para evitar ejecución desde el lado del cliente\nawait callOnce(async () => {\n  if (!client) {\n    throw new Error('El cliente de Logto no está disponible');\n  }\n\n  if (!(await client.isAuthenticated())) {\n    return;\n  }\n\n  try {\n    userInfo.value = await client.fetchUserInfo();\n  } catch (error) {\n    console.error('Error al obtener la información del usuario:', error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Logic in Home Component\nDESCRIPTION: C# code-behind file for the Home.razor component that implements authentication logic using Blorc.OpenIdConnect. It handles user sign-in, sign-out, and retrieves user information after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.AspNetCore.Components.Web;\nusing Blorc.OpenIdConnect;\nusing Microsoft.AspNetCore.Components.Authorization;\n\n[Authorize]\npublic partial class Home : ComponentBase\n{\n    [Inject]\n    public required IUserManager UserManager { get; set; }\n\n    public User<Profile>? User { get; set; }\n\n    [CascadingParameter]\n    protected Task<AuthenticationState>? AuthenticationStateTask { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n        User = await UserManager.GetUserAsync<User<Profile>>(AuthenticationStateTask!);\n    }\n\n    private async Task OnLoginButtonClickAsync(MouseEventArgs obj)\n    {\n        await UserManager.SignInRedirectAsync();\n    }\n\n    private async Task OnLogoutButtonClickAsync(MouseEventArgs obj)\n    {\n        await UserManager.SignOutRedirectAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token for a Resource using Logto Client in Dart\nDESCRIPTION: This Dart function `getAccessToken` asynchronously retrieves an access token from the Logto service for a specified `resource`. It utilizes an instance of `logtoClient` to make the request and returns the resulting `AccessToken` object, which might be null if the token cannot be obtained. The function takes the resource identifier as a string parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_get-resource-access-token.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```dart title=\"lib/main.dart\"\nFuture<AccessToken?> getAccessToken(String resource) async {\n  var token = await logtoClient.getAccessToken(resource: resource);\n\n  return token;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Scopes with Logto in Express - TypeScript\nDESCRIPTION: This snippet defines a LogtoExpressConfig object, specifying required OAuth2 scopes ('email' and 'phone') for Logto authentication integration in an Express application. Dependencies include the LogtoExpressConfig type and the Logto SDK for Express. The config object should be used when initializing Logto middleware; 'scopes' determines which user information endpoints are accessible after login. Inputs are the required scope array; output is the configuration object. Make sure to include all other necessary config options as required by Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  scopes: ['email', 'phone'],\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto Express Integration\nDESCRIPTION: This snippet demonstrates how to display user information after successful authentication using the Logto Express integration. It accesses the user claims through the req.user object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  response.json(request.user.claims);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating manifest.json for Logto SDK in Chrome Extension\nDESCRIPTION: This snippet shows the required permissions in manifest.json for the Logto SDK to function properly in a Chrome extension. It includes identity and storage permissions, as well as host permissions for Logto API communication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"identity\", \"storage\"],\n  \"host_permissions\": [\"https://*.logto.app/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Passport OpenID Connect Strategy in TypeScript\nDESCRIPTION: Function that initializes Passport.js with OpenID Connect authentication strategy. Sets up client credentials, callback URL, and required OAuth scopes including openid, offline_access, profile, and email permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        // ... other options\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        // highlight-start\n        scope: ['openid', 'offline_access', 'profile', 'email'],\n        // highlight-end\n      }\n      // ... other options\n    )\n  );\n  // ... other options\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Vue.js with Logto\nDESCRIPTION: This snippet demonstrates how to access additional claims after configuring the Logto provider with additional scopes. It shows how to use the getIdTokenClaims() method to retrieve the claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// 現在你可以訪問額外的宣告 `claims.email`、`claims.phone` 等。\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK for Capacitor in TypeScript\nDESCRIPTION: This snippet shows how to import and configure the Logto SDK for a Capacitor application. The configuration includes the application ID, Logto endpoint URL, required scopes, and protected resource APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Access Token in Next.js\nDESCRIPTION: This snippet demonstrates how to use the access token to fetch additional user information from the OIDC user info endpoint. It makes a network request to the Logto endpoint using the access token for authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function Home() {\n  const session = await auth();\n  // URL을 Logto 엔드포인트로 교체하세요, `/oidc/me`로 끝나야 합니다\n  const response = await fetch('https://xxx.logto.app/oidc/me', {\n    headers: {\n      Authorization: `Bearer ${session?.accessToken}`,\n    },\n  });\n  const user = await response.json();\n  console.log(user);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Method in CustomAuthManager\nDESCRIPTION: Implements the sign-in method using Logto SDK to initiate the OIDC authentication flow and update the current user state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<FlutterFlowAuthAuthUser?> signIn(\n    String redirectUri,\n  ) async {\n    await logtoClient.signIn(redirectUri);\n\n    var idTokenClaims = await logtoClient.idTokenClaims;\n\n    return _updateCurrentUser(\n      loggedIn: idTokenClaims != null,\n      uid: idTokenClaims?.subject,\n      idToken: idTokenClaims,\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring React Logto Provider with Organization Scope\nDESCRIPTION: Example of setting up LogtoProvider in React with organization scope\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoProvider, UserScope } from '@logto/react';\n\nconst App = () => (\n  <LogtoProvider\n    config={{\n      // ...\n      scopes: [UserScope.Organizations],\n    }}\n  >\n    {/* ... */}\n  </LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with User Scopes in JavaScript\nDESCRIPTION: Creates a new LogtoClient instance with configuration including application ID, endpoint, and requested user scopes. The specified scopes include email, phone, custom data, and identities access permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\nappId: '<your-application-id>',\nendpoint: '<your-logto-endpoint>',\nscopes: [UserScope.Email, UserScope.Phone, UserScope.CustomData, UserScope.Identities],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Interface in Go\nDESCRIPTION: Core Storage interface definition from Logto SDK that needs to be implemented for session management. It defines methods for getting and setting items in storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_create-session-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage client\n\ntype Storage interface {\n\tGetItem(key string) string\n\tSetItem(key, value string)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider and Organizations Scope in TypeScript\nDESCRIPTION: This code sets up NextAuth.js with Logto as an authentication provider, specifically requesting the 'organizations' scope in addition to standard OpenID Connect scopes. The configuration exports NextAuth's core functions for use throughout the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access urn:logto:scope:organizations',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Provider in Angular\nDESCRIPTION: Sets up the authentication provider in app.config.ts using @logto/js and angular-auth-oidc-client. This configuration initializes the auth service with Logto endpoint, application ID, and redirect URIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildAngularAuthConfig } from '@logto/js';\nimport { provideAuth } from 'angular-auth-oidc-client';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        endpoint: '<your-logto-endpoint>',\n        appId: '<your-app-id>',\n        redirectUri: 'http://localhost:3000/callback',\n        postLogoutRedirectUri: 'http://localhost:3000/',\n      }),\n    }),\n    // ...他のプロバイダー\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Configuration for React Native in TypeScript\nDESCRIPTION: This TypeScript snippet, typically found in a file like `App.tsx`, defines the `LogtoConfig` object required by the Logto React Native SDK. It imports the `LogtoConfig` type and sets properties such as `appId`, `endpoint`, requested OAuth `scopes` (highlighted as 'read' and 'write'), and target API `resources`. This configuration object is crucial for initializing the Logto client within a React Native application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"App.tsx\"\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['read', 'write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in React Home Component\nDESCRIPTION: This React component uses the Logto authentication hook to check if the user is authenticated and retrieve an access token for a specific API. It utilizes React hooks like useState and useEffect for state management and side effects.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Flutter\nDESCRIPTION: This snippet demonstrates how to import the Logto SDK, initialize LogtoClient, and set up the basic structure of a Flutter app with Logto integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_dart_sdk.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Flutter Demo',\n      home: MyHomePage(title: 'Logto Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  late LogtoClient logtoClient;\n\n  void render() {\n    // cambio de estado\n  }\n\n  // LogtoConfig\n  final logtoConfig = const LogtoConfig(\n    endpoint: \"<your-logto-endpoint>\",\n    appId: \"<your-app-id>\"\n  );\n\n  void _init() {\n    logtoClient = LogtoClient(\n      config: logtoConfig,\n      httpClient: http.Client(), // Cliente http opcional\n    );\n    render();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _init();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Spring Security OAuth2 Client for Logto\nDESCRIPTION: This code snippet shows how to add additional scopes, including a custom organization scope, to the spring.security.oauth2.client.registration.logto.scope property in the application.properties file. This configuration allows requesting more user information, including organization claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nspring.security.oauth2.client.registration.logto.scope=openid,profile,offline_access,urn:logto:scope:organizations\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Middleware in ASP.NET Core (C#)\nDESCRIPTION: This snippet registers the Logto authentication middleware in an ASP.NET Core project using the dependency injection container. The AddLogtoAuthentication method is invoked within the Program.cs file, allowing customization via the options parameter. The Resource property is specified to identify the secured API or resource audience, which is required for correct scope validation. Dependencies: Logto ASP.NET Core middleware package and a correctly configured DI builder (builder.Services). Inputs include the optional configuration delegate; outputs are side effects on the application's authentication pipeline. Ensure replacement of placeholder values before deploying.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.Resource = \"https://<your-api-resource-indicator>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Functionality\nDESCRIPTION: Creates a home page route with conditional rendering based on authentication status. Uses the withLogto middleware to inject authentication state into req.user, allowing the application to show either a sign-in or sign-out link.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  res.setHeader('content-type', 'text/html');\n\n  if (req.user.isAuthenticated) {\n    res.end(`<div>Hello ${req.user.claims?.sub}, <a href=\"/logto/sign-out\">Sign Out</a></div>`);\n  } else {\n    res.end('<div><a href=\"/logto/sign-in\">Sign In</a></div>');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Provider for Next.js\nDESCRIPTION: This code shows how to configure the Logto provider in Next.js to request additional OIDC scopes. It customizes the authorization parameters to include specific scopes like 'profile' and 'email'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: 配置 Flask 应用的 Logto 登录路由\nDESCRIPTION: 创建一个登录路由，使用 Logto 客户端的 signIn 方法获取登录 URL 并将用户重定向到 Logto 认证页面。需要提供有效的回调 URL 作为参数。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-in\")\nasync def sign_in():\n    # 获取登录 URL 并重定向用户到该 URL\n    return redirect(await client.signIn(\n        redirectUri=\"${defaultRedirectUri}\",\n    ))\n```\n\n----------------------------------------\n\nTITLE: PHP SDK での組織トークン取得\nDESCRIPTION: Logto PHP SDK で特定の組織に対する組織トークンを取得する方法です。getOrganizationToken または getOrganizationTokenClaims メソッドに組織IDを渡します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$token = $client->getOrganizationToken('<organization-id>');\n// または\n$claims = $client->getOrganizationTokenClaims('<organization-id>');\n```\n\n----------------------------------------\n\nTITLE: Displaying ID Token Claims with JavaScript in Logto\nDESCRIPTION: This snippet shows how to fetch the user's ID token claims using logtoClient.getIdTokenClaims() and dynamically generate an HTML table to display all the claims and their values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.getIdTokenClaims();\n\n// ID トークンのクレーム (Claims) を表示するためのテーブルを生成\nconst table = document.createElement('table');\nconst thead = document.createElement('thead');\nconst tr = document.createElement('tr');\nconst thName = document.createElement('th');\nconst thValue = document.createElement('th');\nthName.innerHTML = 'Name';\nthValue.innerHTML = 'Value';\ntr.append(thName, thValue);\nthead.append(tr);\ntable.append(thead);\n\nconst tbody = document.createElement('tbody');\n\nfor (const [key, value] of Object.entries(userInfo)) {\n  const tr = document.createElement('tr');\n  const tdName = document.createElement('td');\n  const tdValue = document.createElement('td');\n  tdName.innerHTML = key;\n  tdValue.innerHTML = typeof value === 'string' ? value : JSON.stringify(value);\n  tr.append(tdName, tdValue);\n  tbody.append(tr);\n}\n\ntable.append(tbody);\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto in SwiftUI\nDESCRIPTION: This snippet demonstrates how to display user information in a SwiftUI application by using the client.getIdTokenClaims() method to access user details such as name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n  @State var name: String?\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n    name = try? client.getIdTokenClaims().name\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Text(\"Welcome, \\(name)\")\n      } else {\n        Text(\"Please sign in\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information via API in Flutter\nDESCRIPTION: Illustrates how to fetch additional user information using the Logto client's getUserInfo method to access claims not available in the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal userInfo = await logtoClient.getUserInfo();\\nprint('User Info: $userInfo');\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto PHP SDK\nDESCRIPTION: Shows how to retrieve and display user information using both getIdTokenClaims (local) and fetchUserInfo (remote) methods when a user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/userinfo', function () {\n  if ($client->isAuthenticated() === false) {\n    return \"認証されていません <a href='/sign-in'>サインイン</a>\";\n  }\n\n  return (\n    // ローカル ID トークンのクレームを取得\n    json_decode($client->getIdTokenClaims())\n    . \"<br>\"\n    // Logto userinfo エンドポイントからユーザー情報を取得\n    json_decode($client->fetchUserInfo())\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out Actions in Rails Controller\nDESCRIPTION: Controller methods to initiate the Logto sign-in flow with proper redirect URI and handle sign-out with redirect back to the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def sign_in\n    @client.sign_in(redirect_uri: request.base_url + \"/callback\")\n  end\n\n  def sign_out\n    @client.sign_out(post_logout_redirect_uri: request.base_url)\n  end\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Scope Configuration Documentation in JSX/Markdown\nDESCRIPTION: A conditional rendering block that displays additional documentation about configuring scopes in Logto SDK when 'configScopesCode' prop is provided. This includes explanation text and renders the code snippet passed via props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/fragments/_scopes-and-claims.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{props.configScopesCode &&\n\n<>\n<p>\nEn bref, lorsque vous demandez une Portée, vous obtiendrez les Revendications correspondantes dans les informations utilisateur. Par exemple, si vous demandez la portée `email`, vous obtiendrez les données `email` et `email_verified` de l'utilisateur.\n</p>\n\n<p>\n  Par défaut, le SDK Logto demandera toujours trois Portées : `openid`, `profile` et\n  `offline_access`, et il n'est pas possible de supprimer ces Portées par défaut. Mais vous pouvez\n  ajouter plus de Portées lors de la configuration de Logto :\n</p>\n\n{props.configScopesCode}\n\n</>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon Callback URL in Logto\nDESCRIPTION: The URL format that needs to be added to the 'Allowed redirect URLs' field in the Amazon Developer Portal. This URL handles the authentication callback from Amazon to Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/amazon/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n${your_logto_origin}/callback/${connector_id}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: This snippet creates a LogtoConfig object with the required endpoint and appId. It also includes an optional list of API resources that the application will access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // Add your API resources\n  // highlight-start\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Auth User Provider with Logto in Dart\nDESCRIPTION: This code snippet defines a custom authentication user class and sets up a reactive stream for auth state changes. It uses Logto's OpenID Connect functionality and RxDart for reactive programming.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-user-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\nimport 'package:rxdart/rxdart.dart';\n\nimport 'custom_auth_manager.dart';\n\nclass FlutterFlowAuthAuthUser {\n  FlutterFlowAuthAuthUser({required this.loggedIn, this.uid, this.idToken});\n\n  bool loggedIn;\n  String? uid;\n  OpenIdClaims? idToken;\n}\n\n/// Generates a stream of the authenticated user.\nBehaviorSubject<FlutterFlowAuthAuthUser> flutterFlowAuthAuthUserSubject =\n    BehaviorSubject.seeded(FlutterFlowAuthAuthUser(loggedIn: false));\nStream<FlutterFlowAuthAuthUser> flutterFlowAuthAuthUserStream() =>\n    flutterFlowAuthAuthUserSubject\n        .asBroadcastStream()\n        .map((user) => currentUser = user);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Scopes in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates the initialization of a `LogtoConfig` object. It specifically shows how to set the `scopes` property with a list of strings (`\"email\"`, `\"phone\"`) to request corresponding user information during authentication. A comment suggests an alternative using `UserScope` enum values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/_scopes-sample-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // ou `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Logto Authentication with Resource Configuration in C#\nDESCRIPTION: Demonstrates how to add Logto authentication to the service collection with a custom API resource indicator configuration. The code uses the builder.Services pattern common in ASP.NET Core applications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.Resource = \"https://<your-api-resource-indicator>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Scopes and Resources in PHP\nDESCRIPTION: This PHP code snippet shows how to instantiate the LogtoClient with specific scopes (such as 'read' and 'write') and resources (API endpoints) during configuration. Dependencies include LogtoClient and LogtoConfig classes, which must be included prior to usage. The scopes array defines the access permissions, and the resources array lists the relevant API resource URLs; both are key to customizing OAuth2 flow for a PHP application. Inputs: an array for 'scopes' and 'resources'. Outputs: a configured LogtoClient object ready for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"read\", \"write\"], // Añadir alcances\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Añadir recursos de API\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Multiple Resource Endpoints in Go\nDESCRIPTION: This code snippet demonstrates how to create a LogtoConfig struct and set multiple resource endpoints. The Resources field is populated with an array of strings representing API endpoints that the Logto client will be authorized to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resource in Blazor WebAssembly appsettings.json\nDESCRIPTION: Configuration settings to add in appsettings.json to obtain a JWT access token for a specific API resource. This includes adding the API scope, resource identifier, and extra token parameters required for RFC 8707 compliance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ...\n  \"IdentityServer\": {\n    // ...\n    // highlight-start\n    \"Scope\": \"openid profile email <your-api-scopes>\", // Ajoutez vos portées API ici\n    \"Resource\": \"https://my-api-resource\",\n    \"ExtraTokenParams\": {\n        \"resource\": \"https://my-api-resource\" // Assurez-vous que la clé \"resource\" est en minuscule\n    }\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto in React Native\nDESCRIPTION: This component uses the useLogto hook to check authentication status and retrieve an access token for a specific API. It demonstrates how to handle asynchronous token retrieval and state updates in a React Native environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\n\nconst AccessToken = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        // highlight-start\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        // highlight-end\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for API Resource Configuration\nDESCRIPTION: Imports MDX fragments containing documentation about configuring API resources in Logto. These fragments provide explanations and examples for API resource configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Additional Scopes\nDESCRIPTION: This code snippet shows how to configure the Logto client with additional scopes for requesting more user information. It includes email and phone scopes in the LogtoConfig object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // E.g. http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\n    UserScope.Email.rawValue,\n    UserScope.Phone.rawValue,\n  ]\n  // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Ruby Client\nDESCRIPTION: Demonstrates how to fetch an access token using the Logto client for a specific resource endpoint. The token is retrieved by calling the access_token method with a resource URL parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntoken = @client.access_token(resource: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Additional Scopes in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Logto client with additional scopes to request more user information. It imports UserScope enum from the Logto package and configures the client to request email and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// highlight-next-line\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone],\n});\n```\n\n----------------------------------------\n\nTITLE: Token Introspection Response - JSON\nDESCRIPTION: Example response from the introspection endpoint showing token validity status and subject claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/opaque-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active\": true,\n  \"sub\": \"1234567890\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: Demonstrates creating a LogtoClient instance with configuration for access scopes ('read', 'write') and protected API resource endpoints. The configuration specifies which permissions the client can request and which API endpoints it can access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"read\", \"write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: 組織トークン取得の完全な例\nDESCRIPTION: 複数の組織に対するトークン取得とトークン内容確認の完全な例です。各組織に対するトークンの取得方法とクレームの確認方法を示します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// JavaScript を例として使用\nconst org1Token = await logto.getOrganizationTokenClaims('org_1');\nconst org2Token = await logto.getOrganizationTokenClaims('org_2');\n\nconsole.log(org1Token.aud); // 'urn:logto:organization:org_1'\nconsole.log(org1Token.scope); // 'read:logs write:logs'\nconsole.log(org2Token.aud); // 'urn:logto:organization:org_2'\nconsole.log(org2Token.scope); // 'read:logs'\n\nconst org3Token = await logto.getOrganizationTokenClaims('org_3'); // エラー: ユーザーは組織のメンバーではありません\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomLogoutHandler for Logout Success\nDESCRIPTION: Custom handler to manage successful logout events, clearing the session and redirecting users to the home page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport java.io.IOException;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\n\npublic class CustomLogoutHandler implements LogoutSuccessHandler {\n  @Override\n  public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)\n      throws IOException, ServletException {\n    HttpSession session = request.getSession();\n\n    if (session != null) {\n      session.invalidate();\n    }\n\n    response.sendRedirect(\"/home\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Kakao Connector Settings\nDESCRIPTION: A configuration table showing the required parameters for setting up the Kakao connector in Logto. It defines the clientId (required) and clientSecret (optional) parameters used for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/social/kakao/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Nom          | Type    |\n| ------------ | ------- |\n| clientId     | string  |\n| clientSecret | string? |\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with custom scopes and resources in Python\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with custom scopes and resources. It configures the client with read and write permissions and specifies API resources for shopping and store endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"read\", \"write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: Configures a LogtoClient instance with specific API permission scopes and resource endpoints. The configuration includes read/write access for shopping and store APIs, targeting specific API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring External Session Storage in Logto SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the Logto SDK to use an external session storage implementation. It imports a MemorySessionWrapper class and sets it as the sessionWrapper in the configuration object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_external-storage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MemorySessionWrapper } from './storage';\n\nexport const config = {\n  // ...\n  sessionWrapper: new MemorySessionWrapper(),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code exports NextAuth authentication functions after configuring them with a Logto provider. The configuration includes specific OAuth scopes (openid, offline_access, profile, read, write) and defines a resource URL for the authorization request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile read write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization User Scopes with Management API\nDESCRIPTION: Example showing how to use the Logto Management API to fetch organization scopes for a specific user in an organization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/organization-template/configure-organization-template.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X GET https://[tenant_id].logto.app/api/organizations/{id}/users/{userId}/scopes \\\n -H \"Authorization: Bearer $ORGANIZATION_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto-Client with API Resources in JSX\nDESCRIPTION: This section renders the ConfigApiResources component, passing in various code snippets as props. These snippets likely contain examples of configuring resources with different scope settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Fetch Fragments in React (JavaScript)\nDESCRIPTION: This snippet imports a documentation fragment component for fetching access tokens for API resources, alongside another fragment that contains sample code for getting an access token. Both are imported as modules for later use in React components. Dependencies include React, support for MDX/Markdown imports, and proper project configuration to recognize these file types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: LogtoConfig Type Definition\nDESCRIPTION: Type definition for Logto configuration object that specifies endpoint, application ID, scopes, resources, prompt settings and storage preferences.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/sdk-conventions/platform-sdk-conventions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LogtoConfig {\n  endpoint: string;           // OIDC service endpoint\n  appId: string;              // Application ID from Logto Service\n  scopes?: string[];          // Default: [openid, offline_access, profile]\n  resources?: string[];       // Protected resource indicators\n  prompt?: string;            // Default: consent\n  usingPersistStorage?: boolean; // Default: true\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Scopes and Claims Configuration in JSX\nDESCRIPTION: This code snippet imports necessary components and renders the ScopesAndClaims component with the ScopesAndClaimsCode component passed as a prop. It demonstrates how to compose React components for configuring scopes and claims in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in MDX\nDESCRIPTION: Imports multiple code fragments from external files and passes them as props to a ConfigApiResources component. The code handles configuration of API resources, including basic resources, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Protected API with cURL and Bearer Token\nDESCRIPTION: cURL command to make a request to a protected API endpoint using an Access Token as a Bearer token in the Authorization header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include 'http://localhost:3000/api/profile' --header 'Authorization: Bearer <your-access-token>'\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It demonstrates how to structure and compose documentation for API resource configuration in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Configuration in Swift\nDESCRIPTION: This code configures a LogtoClient with custom settings including endpoint, app ID, scopes, and resources. It demonstrates how to create a LogtoConfig object and use it to initialize a LogtoClient instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"read\", \"write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token in TypeScript\nDESCRIPTION: This snippet demonstrates how to access additional user claims that were requested with additional scopes. It retrieves the claims from the ID token and shows how to access specific properties like email and phone.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Vous pouvez maintenant accéder aux revendications supplémentaires `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Provider in Vue - TypeScript\nDESCRIPTION: This snippet demonstrates how to integrate Logto into a Vue application by using the createLogto method and passing specific configuration options. It shows how to set up authorization scopes, which define the permissions the app will request, and how to list resource endpoints (such as shopping and store APIs) that will be secured via Logto. Dependencies include '@logto/vue' and a properly initialized Vue app instance. The key configuration options are 'scopes' (array of OAuth scopes required) and 'resources' (array of protected API endpoints). This code is intended for inclusion in the main entry point (e.g., main.ts) of a Vue project and expects the rest of the application to be set up with Vue and Logto authentication workflows.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Using LogtoViewModel in MainActivity\nDESCRIPTION: This snippet shows how to use the LogtoViewModel in the MainActivity of an Android application. It demonstrates the use of the viewModels delegate with the custom Factory.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_init-logto-client.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n//...with other imports\nclass MainActivity : AppCompatActivity() {\n    private val logtoViewModel: LogtoViewModel by viewModels { LogtoViewModel.Factory }\n    //...other codes\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom User Data from UserInfo Endpoint in Python\nDESCRIPTION: This code snippet shows how to access the custom_data field from the user information fetched from the UserInfo endpoint. This is useful for retrieving additional user attributes that may not be included in the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(await client.fetchUserInfo()).custom_data\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Scopes and Resources in Ruby\nDESCRIPTION: This snippet demonstrates how to initialize a LogtoClient object with custom scopes and resources. The scopes define the permissions requested, while resources specify the API endpoints that will be accessed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...otras configuraciones\n    # highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...otras configuraciones\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Authentication Routes in Express.js\nDESCRIPTION: Uses the handleAuthRoutes helper function from the Logto SDK to register three authentication routes: sign-in, sign-in callback, and sign-out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleAuthRoutes } from '@logto/express';\n\napp.use(handleAuthRoutes(config));\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Additional Scopes\nDESCRIPTION: This code snippet shows how to configure the Logto client with additional scopes for requesting more user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // Ex.: http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\n    UserScope.Email.rawValue,\n    UserScope.Phone.rawValue,\n  ]\n  // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client Initialization\nDESCRIPTION: Demonstrates how to initialize the Logto client with additional scopes to request more user information. This example configures the client to request email and phone scopes during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...andere Konfigurationen\n    # highlight-next-line\n    scopes: [\"email\", \"phone\"] # Füge bei Bedarf weitere Berechtigungen hinzu\n  ),\n  # ...andere Konfigurationen\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Multiple API Resources in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new LogtoClient instance with multiple API resources. The client is configured with two API endpoints that will be available after authentication, which is useful for applications that need to access multiple backend services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 新增 API 資源 (API resources)\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto to Fetch User Information in SvelteKit Hooks\nDESCRIPTION: Sets up the Logto handler with the fetchUserInfo option enabled to automatically retrieve additional user claims through network requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    /* Logto config */\n  },\n  {\n    /* Cookie config */\n  },\n  {\n    fetchUserInfo: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out with Custom Redirect in Capacitor\nDESCRIPTION: Handles user sign-out with a custom redirect URI, automatically redirecting the user back to the Capacitor app after logout instead of showing the Logto logout page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst onClick = async () => {\n  await logtoClient.signOut('com.example.app://callback/sign-out');\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Access Token with Logto in Dart\nDESCRIPTION: This function uses the Logto client to fetch an organization-specific access token. It takes an organization ID as input and returns a Future<AccessToken?>. Valid organization IDs can be found in the 'organizations' claim of the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_get-organization-access-token.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Valid organization IDs for the user can be found in the ID token claim `organizations`.\nFuture<AccessToken?> getOrganizationAccessToken(String organizationId) async {\n  var token = await logtoClient.getOrganizationToken(organizationId);\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in Vue\nDESCRIPTION: This snippet demonstrates how to use the createLogto function to set up Logto authentication in a Vue application. It specifies custom scopes for different levels of access to shopping and store functionalities, as well as defining API resource endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in JavaScript\nDESCRIPTION: This code snippet shows how to access additional claims after configuring Logto with extra scopes. It uses the logtoClient.getIdTokenClaims() method to retrieve the claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// 現在你可以訪問額外的宣告 (Claims) `claims.email`、`claims.phone` 等。\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization List with Token Retrieval in Vue Template\nDESCRIPTION: HTML template that displays a list of organization IDs retrieved from the user's ID token claims. For each organization, it renders a button that calls the function to fetch organization-specific tokens when clicked, with results logged to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <ul>\n    <li v-for=\"organizationId of organizationIds\" v-bind:key=\"organizationId\">\n      <span>{{ organizationId }}</span>\n      <button type=\"button\" @click=\"onClickFetchOrganizationToken(organizationId)\">\n        obtener token (ver consola)\n      </button>\n    </li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Posts with Logto Context in Next.js\nDESCRIPTION: Example of using Logto SDK in Next.js to retrieve user context and interact with Supabase. The code demonstrates how to get user claims and use them to create an authenticated Supabase client for querying posts.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLogtoContext } from '@logto/next-server-actions';\nimport { logtoConfig } from '@/logto';\nimport { getSupabaseClient } from '@/utils';\nimport PostList from './PostList';\n\nexport default async function PostPage() {\n  const { cliams } = await getLogtoContext(logtoConfig);\n\n  // `sub` value in `cliams` is user id.\n  const supabase = getSupabaseClient(cliams.sub);\n\n  const { data: posts } = await supabase.from('posts').select('*');\n\n  return <PostList posts={posts} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto in React Native\nDESCRIPTION: This code snippet demonstrates how to use the useLogto hook to fetch and display user information in a React Native application. It shows how to use getIdTokenClaims() to retrieve user claims and conditionally render user details or a sign-in button based on authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { getIdTokenClaims, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // highlight-start\n      getIdTokenClaims().then((claims) => {\n        setUser(claims);\n      });\n      // highlight-end\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Custom Data in JavaScript\nDESCRIPTION: This code snippet shows how to fetch user information including custom data using the fetchUserInfo method of the Logto client. This is useful for retrieving custom user data that may not be included in the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\n// Vous pouvez maintenant accéder à la revendication `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources in LogtoConfig for Android SDK\nDESCRIPTION: This snippet demonstrates how to initialize a LogtoConfig object with custom scopes and resource APIs. The code sets specific permission scopes ('read', 'write') and defines resource endpoints that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(\"read\", \"write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info in Logto\nDESCRIPTION: This snippet demonstrates how to use the fetchUserInfo() method to retrieve user information, including custom data that may not be available in the ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\n// これでクレーム (Claim) `userInfo.custom_data` にアクセスできます。\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Nuxt.js Logto Module\nDESCRIPTION: This code snippet shows how to configure the Logto module in Nuxt.js to request additional user information scopes such as email and phone. These scopes determine what user information will be available in the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    scopes: [UserScope.Email, UserScope.Phone], // 必要に応じてスコープを追加\n    // ...その他の設定\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Next.js\nDESCRIPTION: This snippet shows how to import and initialize LogtoClient with necessary configuration parameters. It sets up the client with the application ID, secret, endpoints, and cookie settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  appSecret: '<your-app-secret-copied-from-console>',\n  endpoint: '<your-logto-endpoint>', // z.B. http://localhost:3001\n  baseUrl: 'http://localhost:3000',\n  cookieSecret: 'complex_password_at_least_32_characters_long',\n  cookieSecure: process.env.NODE_ENV === 'production',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Hook with User Info Fetching in SvelteKit\nDESCRIPTION: This TypeScript code shows how to configure the Logto hook in SvelteKit to fetch user information automatically. It sets the 'fetchUserInfo' option to true for the hook.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    /* Logto config */\n  },\n  {\n    /* Cookie config */\n  },\n  {\n    fetchUserInfo: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Svelte Component\nDESCRIPTION: This snippet shows how to display user information in a Svelte component. It checks if user data exists and then iterates over the user object to display each key-value pair.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n</script>\n\n{#if data.user}\n<ul>\n  {#each Object.entries(data.user) as [key, value]}\n  <li>{key}: {value}</li>\n  {/each}\n</ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Route for Fetching Organization Tokens with Logto\nDESCRIPTION: This code snippet sets up an Express.js route that uses Logto authentication to fetch organization tokens. It configures the 'withLogto' middleware to enable organization token retrieval and sends the tokens as a JSON response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-organization-token',\n  withLogto({\n    ...config,\n    // highlight-next-line\n    getOrganizationToken: true,\n  }),\n  (request, response) => {\n    // highlight-next-line\n    response.json(request.user.organizationTokens);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth Access Token with Logto Client in Ruby\nDESCRIPTION: This code snippet demonstrates how to obtain an access token using the Logto client library. It specifies a resource URL for which the token is requested, likely for API access to a shopping application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntoken = @client.access_token(resource: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto\nDESCRIPTION: Shows how to configure additional scopes in the LogtoConfig object during client initialization to access more user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst logtoConfig = {\n  scopes: ['email', 'phone', 'custom_data', 'organizations'],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token for Organization API Resources in Kotlin\nDESCRIPTION: This code demonstrates how to use the `getAccessToken` method to retrieve an access token for a specific API resource within an organization. It requires the API resource URL and organization ID as parameters, and returns either an exception or access token through a callback.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getAccessToken(\n  'https://shopping.your-app.com/api',\n  organizationId\n) { logtoException, accessToken ->\n    println(\"AccessToken:$accessToken\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication in Nuxt.js (TypeScript)\nDESCRIPTION: This code snippet shows how to configure Logto authentication in a Nuxt.js application's configuration file. It sets custom scopes and resources for the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information from OIDC Endpoint with Access Token\nDESCRIPTION: This code demonstrates how to fetch additional user information by making a request to the Logto OIDC user info endpoint using the access token stored in the session. This approach is necessary to access claims that aren't included in the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// ...\n\nexport default async function Home() {\n  const session = await auth();\n  // Substitua a URL pelo seu endpoint Logto, deve terminar com `/oidc/me`\n  const response = await fetch('https://xxx.logto.app/oidc/me', {\n    headers: {\n      Authorization: `Bearer ${session?.accessToken}`,\n    },\n  });\n  const user = await response.json();\n  console.log(user);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Logto Client with Organizations Scope\nDESCRIPTION: Shows how to create a new LogtoClient instance with organization user scope configuration. The code requires the logto/core and logto/client libraries and sets up the client with specific scope permissions for organization access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/core\"\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-next-line\n    scopes: [LogtoCore::USER_SCOPE[:organizations]]\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Custom Scopes and Resources in Nuxt.js\nDESCRIPTION: This snippet demonstrates how to configure the Logto authentication module in a Nuxt.js application by specifying custom OAuth scopes and API resources. The configuration includes read and write permissions for shopping and store domains, along with their corresponding API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Claims with Network Requests in appsettings.json\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up claims that require network requests in a Blazor WebAssembly application. It includes the custom_data scope and sets LoadUserInfo to true to fetch additional user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_fetch-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"IdentityServer\": {\n    // ...\n    // highlight-start\n    \"Scope\": \"openid profile email custom_data\",\n    \"LoadUserInfo\": true\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organization Scope in Vue.js Application\nDESCRIPTION: This code snippet demonstrates how to integrate Logto authentication in a Vue.js application with organization scope access. It uses the createLogto function from the @logto/vue package, configuring it with the Organizations user scope to enable organization-related features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [UserScope.Organizations],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in React Native TypeScript\nDESCRIPTION: This code configures the Logto authentication SDK for a React Native application. It creates a LogtoConfig object with application ID, endpoint URL, authorization scopes, and API resource endpoints that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['read', 'write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring FetchOrganizationTokenForUser Component in JSX\nDESCRIPTION: This snippet imports and configures the FetchOrganizationTokenForUser component with specific props. It sets the organization scope and includes code snippets for organization configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Tokens in Logto\nDESCRIPTION: This snippet demonstrates how to fetch organization tokens for a user in Logto. It includes configuration for organization scope and code examples for getting organization access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode package={props.package} />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoProvider with Scopes in React Native (TypeScript)\nDESCRIPTION: This snippet shows how to configure the Logto authentication provider (`LogtoProvider`) for a React Native application. It defines a `LogtoConfig` object specifying the `appId`, `endpoint`, and various `UserScope` values (Email, Phone, CustomData, Identities, Organizations) required for authentication. The `App` component then uses this configuration to wrap the main application content. Dependencies include `@logto/rn`. Placeholders `<your-application-id>` and `<your-logto-endpoint>` need to be replaced with actual values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"App.tsx\"\nimport { LogtoProvider, LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [\n    // highlight-start\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n    // highlight-end\n  ],\n};\n\nconst App = () => <LogtoProvider config={config}>{/* Seu conteúdo do aplicativo */}</LogtoProvider>;\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Fragments for Access Token Documentation\nDESCRIPTION: This code imports MDX fragments and composes them to create documentation for fetching access tokens for API resources. It references a reusable fragment component and includes code examples from separate files.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Logto Flutter SDK\nDESCRIPTION: This snippet demonstrates how to fetch additional user information using the logtoClient.getUserInfo() method in a Flutter app. It shows error handling and displaying the fetched user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  final userInfo = await logtoClient.getUserInfo();\n  print('User info: $userInfo');\n} catch (e) {\n  print('Failed to fetch user info: $e');\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Organization Token with Next.js Server Actions\nDESCRIPTION: This server-side component uses Logto's getOrganizationToken function within a Next.js server action to generate an organization token. It demonstrates how to integrate Logto authentication with Next.js server-side rendering.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getOrganizationToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetOrganizationToken from './get-organization-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetOrganizationToken\n        onGetOrganizationToken={async () => {\n          'use server';\n\n          return getOrganizationToken(logtoConfig, 'organization-id');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Fetching in Logto Auth Routes (TypeScript)\nDESCRIPTION: Demonstrates how to enable the fetchUserInfo option in Logto authentication route handling, so the handler includes userInfo in the context. Used when additional user profile info is required up front. Requires a properly initialized logtoClient. Wraps auth routes with fetching enabled.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\\n\\nexport default logtoClient.handleAuthRoutes({ fetchUserInfo: true });\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Resources in Nuxt Config\nDESCRIPTION: Configuration snippet showing how to define API resources for Logto authentication in a Nuxt.js application. The resources array specifies the API endpoints that require authentication protection.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing getUserInfo for OAuth Social Connector\nDESCRIPTION: TypeScript implementation of getUserInfo method that fetches user profile using access token\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/develop-your-connector/implement-connectors.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUserInfo = async (\n  data: { code: string; config: GithubConfig },\n  getSession: GetSession,\n  { set: SetStorageValue, get: GetStorageValue }\n) => {\n  const { code, config } = data;\n  const { accessToken } = await getAccessToken(config, code);\n\n  try {\n    const httpResponse = await got.get(userInfoEndpoint, {\n      headers: {\n        authorization: `token ${accessToken}`,\n      },\n      timeout: defaultTimeout,\n    });\n\n    const result = userInfoResponseGuard.safeParse(parseJson(httpResponse.body));\n\n    if (!result.success) {\n      throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n    }\n\n    const { id, avatar_url: avatar, email, name } = result.data;\n\n    return {\n      id: String(id),\n      avatar: conditional(avatar),\n      email: conditional(email),\n      name: conditional(name),\n    };\n  } catch (error: unknown) {\n    if (error instanceof HTTPError) {\n      const { statusCode, body: rawBody } = error.response;\n\n      if (statusCode === 401) {\n        throw new ConnectorError(ConnectorErrorCodes.SocialAccessTokenInvalid);\n      }\n\n      throw new ConnectorError(ConnectorErrorCodes.General, JSON.stringify(rawBody));\n    }\n\n    throw error;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims using getIdTokenClaims in React\nDESCRIPTION: This code snippet demonstrates how to access additional claims after configuring the Logto provider with extended scopes. It shows how to use the getIdTokenClaims() method to retrieve the claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Agora você pode acessar reivindicações adicionais `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Network Request in Go\nDESCRIPTION: This code demonstrates how to fetch user information that requires a network request using the FetchUserInfo method. This allows access to additional user data like custom_data that might not be included in the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nuserInfo, error := client.FetchUserInfo()\n// これでクレーム `userInfo.custom_data` にアクセスできます。\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This snippet imports two components related to scopes and claims documentation and renders the main component with the code component passed as a prop. It demonstrates how to compose React components for documentation purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes for Angular Auth Provider\nDESCRIPTION: This code snippet demonstrates how to configure the Angular auth provider to request additional scopes, allowing access to more user information claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope, buildAngularAuthConfig } from '@logto/js';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other configs\n        scopes: [\n          UserScope.Email,\n          UserScope.Phone,\n          UserScope.CustomData,\n          UserScope.Identities,\n          UserScope.Organizations,\n        ],\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto for iOS\nDESCRIPTION: This snippet shows how to request additional permission scopes by passing them to the LogtoConfig object, enabling access to more user information like email and phone.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // 例如 http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\n    UserScope.Email.rawValue,\n    UserScope.Phone.rawValue,\n  ]\n  // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Basic Configuration in PHP\nDESCRIPTION: Creates a new LogtoClient instance with a LogtoConfig object containing the essential parameters: endpoint URL, application ID, and application secret. This is the basic setup required to integrate Logto authentication in a PHP application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_init-logto-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Logto\\Sdk\\LogtoClient;\nuse Logto\\Sdk\\LogtoConfig;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    endpoint: \"https://you-logto-endpoint.app\",\n    appId: \"replace-with-your-app-id\",\n    appSecret: \"replace-with-your-app-secret\",\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Authentication Routes with Logto\nDESCRIPTION: Uses the handleAuthRoutes helper function to register three essential authentication routes: sign-in, sign-in-callback, and sign-out. These routes handle the authentication flow with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleAuthRoutes } from '@logto/express';\n\napp.use(handleAuthRoutes(config));\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in LogtoConfig for Kotlin\nDESCRIPTION: This snippet demonstrates how to configure the resources parameter in LogtoConfig for a Kotlin application. It shows how to specify multiple API endpoints that the application will need to access, which is essential for proper authentication and authorization with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    // highlight-start\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"), // API 리소스를 추가하세요\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to fetch user information asynchronously. It utilizes the `fetchUserInfo()` method of the Logto client and logs the retrieved user information to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_fetch-userinfo-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\nconsole.log(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: Sets up NextAuth authentication by configuring the Logto provider with specific OAuth scopes and resource endpoint. Exports authentication handlers and utility functions for sign-in/out operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile read write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Application-Level Providers in Angular (TypeScript)\nDESCRIPTION: This snippet shows how to configure global providers in an Angular application's configuration file. It adds HTTP client capabilities using provideHttpClient with a fetch-based implementation and sets up authentication with provideAuth, specifying a protected resource using buildAngularAuthConfig. Dependencies include Angular dependency injection, provideHttpClient, provideAuth, and a valid ApplicationConfig type. The main parameters are providers (array of provider functions), with resource specifying the back-end API to be protected via authentication. Inputs are provider functions; outputs are configured services available throughout the app. Must be used in the Angular module or bootstrap context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with ERB in Ruby\nDESCRIPTION: An ERB template snippet that conditionally displays a welcome message with the user's name if authenticated, or prompts for sign-in if not authenticated. It uses the Logto client's is_authenticated? method to check authentication status and id_token_claims to access user data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>Welcome, <%= @client.id_token_claims[\"name\"] %></p>\n<% else %>\n  <p>Please sign in</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in CustomAuthManager for Dart\nDESCRIPTION: Implements the initialize method in CustomAuthManager to set up Logto client and handle user authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_client.dart';\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nclass CustomAuthManager {\n  late LogtoClient logtoClient;\n\n  Future<void> initialize() async {\n    logtoClient = LogtoClient(\n      endpoint: 'YOUR_LOGTO_ENDPOINT',\n      appId: 'YOUR_LOGTO_APP_ID',\n    );\n\n    var hasValidSession = await logtoClient.isAuthenticated;\n    var idTokenClaims = await logtoClient.idTokenClaims;\n\n    _updateCurrentUser(\n      loggedIn: hasValidSession,\n      uid: idTokenClaims?.subject,\n      idToken: idTokenClaims,\n    );\n  }\n\n  FlutterFlowAuthAuthUser? _updateCurrentUser({\n    bool loggedIn = false,\n    String? uid,\n    OpenIdClaims? idToken,\n  }) {\n    FlutterFlowAuthAuthUser user = FlutterFlowAuthAuthUser(\n      loggedIn: loggedIn,\n      uid: uid,\n      idToken: idToken,\n    );\n\n    flutterFlowAuthAuthUserSubject.add(user);\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Browser Client with Multiple API Resources\nDESCRIPTION: Initializes a new LogtoClient instance with configuration options including multiple API resource endpoints. The resources array specifies the protected API endpoints that the client will need to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API リソースを追加\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Implementing a Sign-Out Button with Logto in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a sign-out button, add it to the DOM, and implement the sign-out functionality using Logto's client library. It creates a button element, sets its text, adds a click event listener, and appends it to the document body. The sign-out function redirects to a specified URL after signing out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_implement-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = document.createElement('button');\nbutton.innerHTML = 'Sign Out';\n\nbutton.addEventListener('click', onClickSignOut);\n\ndocument.body.appendChild(button);\n\nconst onClickSignOut = () => {\n  logtoClient.signOut('http://localhost:3000');\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Sign-In/Sign-Out Button Based on Auth State in Next.js\nDESCRIPTION: This code snippet shows how to conditionally render sign-in or sign-out buttons based on the user's authentication state in a Next.js application using Auth.js. It uses the auth function to check the session status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport SignIn from './components/sign-in';\nimport SignOut from './components/sign-out';\nimport { auth } from '@/auth';\n\nexport default function Home() {\n  const session = await auth();\n\n  return <div>{session?.user ? <SignOut /> : <SignIn />}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Token Endpoint with Logto Middleware in TypeScript\nDESCRIPTION: Sets up an Express route handler that uses Logto middleware to fetch organization tokens. The middleware is configured with getOrganizationToken flag enabled, and returns the organization tokens from the user object in the response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-organization-token',\n  withLogto({\n    ...config,\n    // highlight-next-line\n    getOrganizationToken: true,\n  }),\n  (request, response) => {\n    // highlight-next-line\n    response.json(request.user.organizationTokens);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler in TypeScript\nDESCRIPTION: This TypeScript snippet configures and exports a Logto authentication handler by calling handleLogto with a configuration object. The configuration includes a 'resources' parameter, specifying one or more API resource URLs that the authenticated session should be allowed to access. Required dependencies include the Logto SDK for TypeScript and any project-specific configuration for API resource management. The exported 'handle' can be used as a server-side hook in frameworks like SvelteKit, enabling protected access to specified APIs. The code expects valid resource URLs and depends on Logto's middleware support.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API 리소스를 추가하세요\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Logto Client Config with Scopes and Resources\nDESCRIPTION: Demonstrates how to initialize a Logto client configuration with custom scopes and API resource endpoints. The configuration specifies read/write access scopes and defines multiple API resource URLs that the client can access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"read\", \"write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role Mapping in WordPress functions.php\nDESCRIPTION: This PHP function maps Logto roles to WordPress roles upon user login. It retrieves the user's Logto roles from metadata and assigns corresponding WordPress roles. The example assigns the 'editor' role to users with the 'group:editors' role from Logto, and 'subscriber' to others.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/wordpress/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction logto_handler($user_login, $user = null) {\n\tif (!$user) {\n\t\t$user = get_user_by('login', $user_login);\n\t}\n\n\t$oidc_claims = get_user_meta($user->ID, 'openid-connect-generic-last-user-claim', true);\n\n\tif (in_array('group:editors', $oidc_claims['roles'])) {\n\t\t$user->set_role('editor');\n\t} else {\n\t\t$user->set_role('subscriber');\n\t}\n}\n\nadd_action('wp_login', 'logto_handler', 10, 2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler in SvelteKit\nDESCRIPTION: This code configures the Logto authentication handler in a SvelteKit application by defining required scopes and resources. It specifies the permissions needed for shopping and store operations, and designates the API endpoints that will be protected.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Component with Auth.js\nDESCRIPTION: Creates a React component with a server action that triggers sign-in with the Logto provider using Auth.js signIn function.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from '@/auth';\n\nexport default function SignIn() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signIn('logto');\n      }}\n    >\n      <button type=\"submit\">Sign In</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: Creates a LogtoConfig instance with endpoint URL, application ID, resource URLs, and authorization scopes. The configuration specifies the Logto endpoint, app identifier, protected API resources, and required access scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-shared-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Portées partagées par toutes les ressources\n  // highlight-start\n  scopes: [\"read\", \"write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig and LogtoClient with Scopes and Resources in Swift\nDESCRIPTION: This Swift code snippet demonstrates the initialization of a `LogtoConfig` object for the Logto authentication service. It requires the Logto endpoint and application ID. The example specifically includes arrays for `scopes` (permissions like 'shopping:read') and `resources` (target API endpoints like 'https://shopping.your-app.com/api'). A `LogtoClient` instance is then created using this configuration, ready for authentication flows. Placeholders `<your-logto-endpoint>` and `<your-app-id>` need to be replaced with actual values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Get Access Token Using Logto PHP Client\nDESCRIPTION: Retrieves an access token from Logto for a specific API endpoint. The code uses the Logto PHP client to request an access token that can be used to authenticate requests to a shopping API.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$accessToken = $client->getAccessToken(\"https://shopping.your-app.com/api\");\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK via Ruby Bundler\nDESCRIPTION: Uses the bundler package manager to add the Logto SDK to a Ruby project. This command will add the 'logto' gem to your Gemfile and install it.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbundle add logto\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This React component imports configuration fragments and code examples, then renders them using the ConfigApiResources component. It demonstrates how documentation for API resource configuration is structured and displayed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URIs for Authentication Flow\nDESCRIPTION: Configures the redirect URIs in the Angular auth configuration for handling authentication callbacks after sign-in and sign-out operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...他の設定\n        // highlight-start\n        redirectUri: 'http://localhost:3000/callback',\n        postLogoutRedirectUri: 'http://localhost:3000/',\n        // highlight-end\n      }),\n    }),\n    // ...他のプロバイダー\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: This Dart code snippet initializes a `LogtoConfig` constant named `logtoConfig` required for the Logto client SDK. It sets the authentication endpoint, application ID, target API resources (e.g., shopping and store APIs), and specific permission scopes (like `shopping:read`, `store:write`) needed for the application to interact with protected resources. Placeholder values for endpoint and appId must be replaced with actual credentials.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // 添加你的 API 资源的权限\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Logto CLI globally with Yarn\nDESCRIPTION: Installs the Logto CLI package globally using Yarn package manager, making the 'logto' command available system-wide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add @logto/cli\n```\n\n----------------------------------------\n\nTITLE: Customizing Sign-In Process in Flask with Logto\nDESCRIPTION: This code snippet demonstrates how to customize the sign-in process by setting the 'interactionMode' to 'signUp', which displays the registration page as the first screen during the sign-in process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-in\")\nasync def sign_in():\n    return redirect(await client.signIn(\n        redirectUri=\"${defaultRedirectUri}\",\n        interactionMode=\"signUp\", # Zeige die Registrierungsseite auf dem ersten Bildschirm\n    ))\n```\n\n----------------------------------------\n\nTITLE: Specifying API Resources in LogtoConfig (Kotlin)\nDESCRIPTION: This Kotlin snippet shows the initialization of a `LogtoConfig` object, specifically highlighting the configuration of the `resources` parameter. The `resources` property takes a list of strings, where each string is the unique identifier (often a URI) of a backend API resource that the application needs access to. This allows the Logto client to request access tokens intended for these specific audiences.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    // highlight-start\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"), // 新增 API 資源 (API resources)\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: Creates a LogtoConfig object with endpoint, appId, resources, and scopes. The configuration includes API resources for shopping and store endpoints, along with read and write scopes that are shared across all resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-shared-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // すべてのリソースで共有されるスコープ\n  // highlight-start\n  scopes: [\"read\", \"write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Home Page with Authentication Status in TypeScript Express\nDESCRIPTION: This code creates a home page route that displays different content based on the user's authentication status. It shows a sign-in link for unauthenticated users and user information with a sign-out link for authenticated users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (request: Request, response) => {\n  const { user } = request;\n  response.setHeader('content-type', 'text/html');\n\n  if (user) {\n    response.end(\n      `<h1>Hello Logto</h1><p>Angemeldet als ${JSON.stringify(\n        user\n      )}, <a href=\"/sign-out\">Abmelden</a></p>`\n    );\n  } else {\n    response.end(`<h1>Hello Logto</h1><p><a href=\"/sign-in\">Anmelden</a></p>`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes for Capacitor in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and configure Logto for use with Capacitor. It focuses on setting up the scopes for user authentication, specifically including email and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  // ...other options\n  scopes: [UserScope.Email, UserScope.Phone], // Add the scopes you need\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Logto API Resource Configuration Components\nDESCRIPTION: This code imports configuration fragments and code snippets for API resources in Logto, then composes them together using the ConfigApiResources component. The imported code examples demonstrate different approaches to configuring API resources with various scoping options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organization Scope in Ruby\nDESCRIPTION: This snippet demonstrates how to create a new LogtoClient instance with custom configuration. It specifically highlights the addition of the organizations scope to the client's configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/core\"\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...outras configurações\n    # highlight-next-line\n    scopes: [LogtoCore::USER_SCOPE[:organizations]]\n  ),\n  # ...outras configurações\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring FetchOrganizationTokenForUser Component in JSX\nDESCRIPTION: This snippet imports necessary components and code fragments, then renders the FetchOrganizationTokenForUser component with specific props. It sets up the organization scope and passes code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client Scopes and Resources in Ruby\nDESCRIPTION: This snippet demonstrates initializing a LogtoClient in Ruby with custom configuration parameters, particularly specifying arrays of scopes and resource URLs. Required dependencies include the 'logto/client' Ruby library. The 'scopes' parameter defines OAuth2 permissions (like 'read' or 'write'), while the 'resources' parameter lists the URLs of APIs for which the access tokens should be valid. The code expects arrays for both 'scopes' and 'resources', and can be extended with additional configuration options as needed. Expected output is a configured LogtoClient instance linked to the given scopes and resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-start\n    scopes: [\"read\", \"write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Components in MDX\nDESCRIPTION: Imports required components and code fragments for fetching access tokens, then renders the FetchAccessTokenForApiResources component with specified props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Actions in SvelteKit\nDESCRIPTION: This snippet shows how to implement sign-in and sign-out actions in a SvelteKit server-side page file using the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actions } from './$types';\n\nexport const actions: Actions = {\n  signIn: async ({ locals }) => {\n    await locals.logtoClient.signIn('http://localhost:3000/callback');\n  },\n  signOut: async ({ locals }) => {\n    await locals.logtoClient.signOut('http://localhost:3000/');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring User Scopes in Logto Express - TypeScript\nDESCRIPTION: This snippet configures the scopes parameter in the LogtoExpressConfig object to include the Organizations user scope, which is useful for permission and access management in Logto-based applications. It requires the @logto/express dependency and assumes the LogtoExpressConfig type is available. The scopes array determines which user information or permissions are requested; here, only UserScope.Organizations is specified. This setup is typically part of the broader Logto Express initialization in a Node.js or TypeScript backend.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing GetAccessTokenCode Component in JSX\nDESCRIPTION: Imports a React component that contains code examples for retrieving access tokens and renders it within the current page. This is part of a documentation site using MDX format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<GetAccessTokenCode />\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: Sets up NextAuth authentication by exporting handler functions and configuring the Logto provider with specific OAuth scopes and resource endpoints. The configuration includes openid, offline_access, profile, read, and write scopes targeting a shopping API resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile read write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources in Logto Client with Go\nDESCRIPTION: This snippet shows how to set up a LogtoConfig object with custom scopes and resources. The configuration defines specific permission scopes for shopping and store operations, and specifies the resource API endpoints that the client will access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for User Search\nDESCRIPTION: This snippet shows the structure of the JSON response returned by the user search API. It contains an array of User entities with various user properties.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"MgUzzDsyX0iB\",\n    \"username\": \"alice_123\",\n    \"primaryEmail\": \"alice@some.email.domain\",\n    \"primaryPhone\": null,\n    \"name\": null,\n    \"avatar\": null\n    // ...\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Organization Scope in Dart\nDESCRIPTION: This Dart snippet demonstrates the creation of a `LogtoConfig` object. It requires the Logto Dart SDK and is used to configure the Logto client with the specified endpoint, application ID, and crucially includes the `LogtoUserScopes.organizations.value` scope to enable organization-related functionality. The `endpoint` and `appId` values need to be replaced with actual credentials.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_organization-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [LogtoUserScopes.organizations.value]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: This code initializes a LogtoClient instance with a LogtoConfig object, specifically highlighting the configuration of scopes and resources. The scopes define the access permissions ('read' and 'write'), while resources specify the target APIs for the client to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"read\", \"write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in Ruby on Rails Controller\nDESCRIPTION: This snippet shows how to implement sign-in and sign-out actions in a Ruby on Rails controller using the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def sign_in\n    @client.sign_in(redirect_uri: request.base_url + \"/callback\")\n  end\n\n  def sign_out\n    @client.sign_out(post_logout_redirect_uri: request.base_url)\n  end\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Express Config with Custom Scopes\nDESCRIPTION: Sets up a Logto Express configuration object with custom scopes for email and phone access. This configuration can be used when initializing the Logto middleware in an Express application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  scopes: ['email', 'phone'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuration YAML pour l'application Spring Boot\nDESCRIPTION: Configuration YAML pour définir le port du serveur, l'audience et les paramètres du serveur de ressources OAuth2.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  port: 3000\n\nlogto:\n  audience: http://localhost:3000/\n\nspring:\n  security:\n    oauth2:\n      resourceserver:\n        jwt:\n          issuer-uri: <your-logto-issuer-uri>\n          jwk-set-uri: <your-logto-jwks-uri>\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources in Logto Ruby Client\nDESCRIPTION: Creates a new Logto client instance with specified scopes for permission control and resource endpoints. The highlighted section shows how to set custom scopes for shopping and store operations, along with corresponding API resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI in Expo app.json for Android\nDESCRIPTION: This JSON snippet shows how to configure the redirect URI scheme in the Expo app.json file for Android. This is necessary for the Logto authentication flow to work correctly on Android devices.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"io.logto\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client for Express Applications\nDESCRIPTION: Sets up the basic configuration object for the Logto Express client. It includes application ID, secret, Logto endpoint, and the base URL of your Express application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-application-secret>',\n  endpoint: '<your-logto-endpoint>', // 예: http://localhost:3001\n  baseUrl: '<your-express-app-base-url>', // 예: http://localhost:3000\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Logto Browser Client\nDESCRIPTION: This snippet demonstrates how to access additional claims, such as email and phone, after configuring the Logto Browser Client with the appropriate scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Agora você pode acessar as reivindicações adicionais `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Implementing getCustomJwtClaims Function in JavaScript\nDESCRIPTION: Basic implementation of the getCustomJwtClaims function that returns an empty object. This function can be customized to return custom claims for access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/developers/custom-token-claims/create-script.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst getCustomJwtClaims = async ({ token, context, environmentVariables }) => {\n  return {};\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Ruby on Rails View\nDESCRIPTION: This code snippet demonstrates how to display user information in a Ruby on Rails view using the Logto client's id_token_claims method. It checks if the user is authenticated and displays a welcome message with the user's name if logged in.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>欢迎, <%= @client.id_token_claims[\"name\"] %></p>\n<% else %>\n  <p>请登录</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: OIDC API Content Type Header\nDESCRIPTION: Required header configuration for making direct OIDC API calls to the Logto core service.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/core-service/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nContent-Type: application/x-www-form-urlencoded\n```\n\n----------------------------------------\n\nTITLE: Configuring SecurityFilterChain in Spring Security\nDESCRIPTION: Implementation of SecurityFilterChain bean that configures authentication and authorization rules. Defines public routes, authentication requirements, and custom handlers for login/logout events.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.DefaultSecurityFilterChain;\n\npublic class WebSecurityConfig {\n  // ...\n\n  @Bean\n  public DefaultSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n    http\n      .authorizeRequests(authorizeRequests ->\n        authorizeRequests\n          .antMatchers(\"/\", \"/home\").permitAll() // Allow access to the home page\n          .anyRequest().authenticated() // All other requests require authentication\n      )\n      .oauth2Login(oauth2Login ->\n        oauth2Login\n          .successHandler(new CustomSuccessHandler())\n      )\n      .logout(logout ->\n        logout\n          .logoutSuccessHandler(new CustomLogoutHandler())\n      );\n    return http.build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Retrieval in React\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring and retrieving organization tokens in a Logto application. It includes imports for configuration and token retrieval code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Express Middleware for Creating Supabase Client\nDESCRIPTION: Middleware that creates a Supabase client with the authenticated user's ID and attaches it to the request context. This allows subsequent request handlers to interact with Supabase without repeatedly creating clients.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport const withSupabaseClient = async (ctx, next) => {\n  ctx.supabase = getSupabaseClient(ctx.auth.userId);\n\n  return next();\n};\n```\n\n----------------------------------------\n\nTITLE: Updating User's Email (Bash)\nDESCRIPTION: This snippet demonstrates how to update a user's email after verification. It sends a PATCH request with the new email and verification details, including the verification record id in the header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH https://[tenant-id].logto.app/api/my-account/primary-email \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'logto-verification-id: <verification_record_id>' \\\n  -H 'content-type: application/json' \\\n  --data-raw '{\"email\":\"...\",\"newIdentifierVerificationRecordId\":\"...\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out UI in Next.js with Logto\nDESCRIPTION: This React component implements a simple UI for sign-in and sign-out using Logto in a Next.js application. It uses the useSWR hook to fetch the authentication state and displays either a login or logout button based on the user's authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoContext } from '@logto/next';\nimport useSWR from 'swr';\n\nconst Home = () => {\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\n\n  return (\n    <nav>\n      {data?.isAuthenticated ? (\n        <p>\n          안녕하세요, {data.claims?.sub},\n          <button\n            onClick={() => {\n              window.location.assign('/api/logto/sign-out');\n            }}\n          >\n            로그아웃\n          </button>\n        </p>\n      ) : (\n        <p>\n          <button\n            onClick={() => {\n              window.location.assign('/api/logto/sign-in');\n            }}\n          >\n            로그인\n          </button>\n        </p>\n      )}\n    </nav>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes in TypeScript\nDESCRIPTION: Configuration object for Logto Express middleware that specifies custom authentication scopes for email and phone. The code shows how to define the configuration using TypeScript interfaces.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  scopes: ['email', 'phone'],\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Callback in Rails Controller\nDESCRIPTION: Code for handling the Logto authentication callback in a Rails controller by processing the original request URL through the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def callback\n    @client.handle_sign_in_callback(url: request.original_url)\n  end\n  # highlight-end\nend\n```\n\n----------------------------------------\n\nTITLE: Requesting Organization Tokens with HTTP in JavaScript\nDESCRIPTION: Example showing how to request an organization token directly via HTTP POST request with URLSearchParams in JavaScript, useful for platforms without dedicated SDKs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Use JavaScript as an example\n\nconst params = new URLSearchParams();\n\nparams.append('grant_type', 'refresh_token');\nparams.append('client_id', 'YOUR_CLIENT_ID');\nparams.append('refresh_token', 'REFRESH_TOKEN');\nparams.append('organization_id', 'org_123');\n\nconst response = await fetch('https://YOUR_LOGTO_ENDPOINT/oidc/token', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  body: params,\n});\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Subject Token from Logto Management API\nDESCRIPTION: HTTP request example for obtaining a subject token from Logto's Management API. The server validates the impersonation request and uses an M2M access token to request a subject token for the target user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/subject-tokens HTTP/1.1\nHost: techcorp.logto.app\nAuthorization: Bearer <TechCorp_m2m_access_token>\nContent-Type: application/json\n\n{\n  \"userId\": \"alex123\",\n  \"context\": {\n    \"ticketId\": \"TECH-1234\",\n    \"reason\": \"Resource access issue\",\n    \"supportEngineerId\": \"sarah789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional User Claims in Angular Component\nDESCRIPTION: This snippet shows how to modify the Angular component to access additional user claims, including custom data, after configuring extra scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OidcSecurityService } from 'angular-auth-oidc-client';\nimport { type UserInfoResponse } from '@logto/js';\n\nexport class AppComponent implements OnInit {\n  isAuthenticated = false;\n  userData?: UserInfoResponse;\n  accessToken?: string;\n\n  constructor(public oidcSecurityService: OidcSecurityService) {}\n\n  ngOnInit() {\n    this.oidcSecurityService\n      .checkAuth()\n      .subscribe(({ isAuthenticated, userData, accessToken }) => {\n        console.log('app authenticated', isAuthenticated, idToken);\n        this.isAuthenticated = isAuthenticated;\n        this.userData = userData;\n        this.accessToken = accessToken;\n      });\n  }\n\n  // ...other methods\n}\n\n// Now you can access the claim `userData.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser SDK in JavaScript to Request Organization Scope\nDESCRIPTION: This JavaScript snippet initializes the Logto Browser SDK using `LogtoClient`. It imports necessary components, including `UserScope`, from `@logto/browser` via an ESM CDN (`esm.run`) and configures the client instance to request the `UserScope.Organizations` scope. This enables the application to request and handle organization-related user information during the authentication process. The client instance is assigned to the global `window` object for potential access elsewhere in the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient, { UserScope } from 'https://esm.run/@logto/browser';\n\nwindow.logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Bearer Token Format in Authorization Headers\nDESCRIPTION: Shows the proper format for including an access token in the Authorization header when making API requests. The token must be prefixed with 'Bearer ' followed by the actual token value.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/machine-to-machine/fragments/_access-token-usage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBearer YOUR_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token\nDESCRIPTION: This snippet demonstrates how to access additional claims from the ID token after configuring additional scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet claims = try? client.getIdTokenClaims()\n// Agora você pode acessar as reivindicações adicionais `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoClient with Organizations Scope\nDESCRIPTION: Demonstrates how to initialize a LogtoClient instance with UserScope.Organizations scope setting. Uses the @logto/next package and configures the client with organization-related permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Authentication in Vue with TypeScript\nDESCRIPTION: This snippet sets up Logto authentication in a Vue component. It uses a composable to access the Logto client, checks if the user is authenticated, and retrieves an access token for a specific API. The access token is then made available globally using useState.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  // A composable to access Logto client\n  const client = useLogtoClient();\n  // Make the token available globally\n  const accessToken = useState<string | undefined>('access-token');\n\n  // Call once in the server side\n  await callOnce(async () => {\n    if (!client) {\n      throw new Error('Logto client is not available');\n    }\n\n    if (!(await client.isAuthenticated())) {\n      return;\n    }\n\n    try {\n      // highlight-next-line\n      accessToken.value = await client.getAccessToken('https://shopping.your-app.com/api');\n    } catch (error) {\n      console.error('Failed to get access token', error);\n    }\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with Logto Client - JavaScript\nDESCRIPTION: This code demonstrates how to request and retrieve an access token using the Logto client library. The token is requested for a specific resource endpoint 'https://store.your-app.com/api' and then logged to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst accessToken = await logtoClient.getAccessToken('https://store.your-app.com/api');\nconsole.log('Zugangstoken', accessToken);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Ruby\nDESCRIPTION: This code snippet shows how to create a LogtoClient instance with specific scopes for permission control and resource endpoints. The configuration includes shopping and store related scopes for both read and write operations, as well as the corresponding API resources they apply to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected User Info Route in Flask with Logto\nDESCRIPTION: Creates a protected Flask route that displays user information. Uses the authenticated decorator to ensure the user is logged in and to fetch user data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/protected/userinfo\")\n@authenticated(shouldRedirect=True, fetchUserInfo=True)\nasync def protectedUserinfo():\n    try:\n        return (\n            \"<h2>User info</h2>\"\n            + g.user.model_dump_json(indent=2, exclude_unset=True).replace(\"\\n\", \"<br>\")\n            + navigationHtml\n        )\n    except LogtoException as e:\n        return \"<h2>Error</h2>\" + str(e) + \"<br>\" + navigationHtml\n```\n\n----------------------------------------\n\nTITLE: Injecting User Information into Layout in SvelteKit\nDESCRIPTION: This TypeScript code demonstrates how to inject the user object into the layout, making it available to all pages in a SvelteKit application using Logto for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = async ({ locals }) => {\n  return { user: locals.user };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Documentation Components for Access Token Fetching in React\nDESCRIPTION: This snippet imports Markdown and MDX fragments containing documentation about fetching access tokens for API resources, then renders them with the FetchAccessTokenForApiResources component, providing necessary props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"access_tpken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Integrating Sign-In in Home Page for Dart\nDESCRIPTION: Implements the sign-in functionality in the home page using the CustomAuthManager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal redirectUri = 'io.logto://callback';\n\n// ...\n\nFFButtonWidget(\n  onPressed: () async {\n    GoRouter.of(context).prepareAuthEvent();\n\n    await authManager.signIn(redirectUri);\n\n    context.replaceNamed('user');\n  },\n  text: 'Sign In',\n  // ...\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Extended User Information\nDESCRIPTION: Demonstrates how to fetch additional user information including custom data using the fetchUserInfo method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\n// Now you can access the claim `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto\nDESCRIPTION: Configuration setup for requesting additional user scopes in Logto provider, including email, phone, custom data, identities, and organizations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\nconst app = createApp(App);\n\napp.use(createLogto, {\n  // ...otras configuraciones\n  // highlight-start\n  scopes: [\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n  ],\n  // highlight-end\n});\napp.use(router);\n```\n\n----------------------------------------\n\nTITLE: API Request with Bearer Token\nDESCRIPTION: HTTP GET request example showing how to make an authenticated API request using a Bearer token in the Authorization header. Demonstrates the proper format for sending the JWT token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nGET https://resource-server.com/api/users\nAuthorization: Bearer eyJhbGciOiJIUz...\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with Logto Client in Kotlin\nDESCRIPTION: Retrieves an access token for a specified API endpoint using the Logto client. The code uses a callback to handle both success and error cases, providing access to either the token or any exceptions that occur.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getAccessToken(\"https://shopping.your-app.com/api\") { logtoException, accessToken ->\n    logtoException?.let { println(it) }\n    accessToken?.let { println(it) }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Access Token to Request Headers\nDESCRIPTION: This snippet demonstrates how to attach an access token to the Authorization header of an HTTP request using the Bearer token format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nawait LogtoRequest.get(\n  useSession: session,\n  endpoint: userInfoEndpoint,\n  headers: [\"Authorization\": \"Bearer \\(accessToken)\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components and Styles in React/JSX\nDESCRIPTION: This code snippet imports a custom SCSS file and a Topbar component from the components directory, then renders the Topbar component within the page. It also includes a comment for content truncation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/terms/of-service.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport './custom.scss';\nimport Topbar from '@components/Topbar';\n\n{/* truncate */}\n\n<Topbar />\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI in Expo app.json\nDESCRIPTION: This JSON snippet demonstrates how to set up the redirect URI scheme in the Expo app.json configuration file for Android applications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"io.logto\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This snippet sets up NextAuth with a custom Logto provider. It exports authentication handlers and methods, and configures the provider with specific scopes and a resource parameter for authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          scope: 'openid offline_access profile email',\n          // highlight-next-line\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Demande manuelle de jeton d'organisation avec refresh token\nDESCRIPTION: Exemple de requête HTTP pour obtenir un jeton d'organisation en utilisant un refresh token et en spécifiant l'identifiant d'organisation comme paramètre.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Utiliser JavaScript comme exemple\n\nconst params = new URLSearchParams();\n\nparams.append('grant_type', 'refresh_token');\nparams.append('client_id', 'YOUR_CLIENT_ID');\nparams.append('refresh_token', 'REFRESH_TOKEN');\nparams.append('organization_id', 'org_123');\n\nconst response = await fetch('https://YOUR_LOGTO_ENDPOINT/oidc/token', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  body: params,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in CustomAuthManager\nDESCRIPTION: Initializes the Logto client in the CustomAuthManager class, setting up the necessary configurations and handling the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_dart_sdk.dart';\nimport 'package:http/http.dart' as http;\n\nclass CustomAuthManager {\n  late final LogtoClient logtoClient;\n\n  Future<void> initialize() async {\n    logtoClient = LogtoClient(\n      config: LogtoConfig(\n        endpoint: 'YOUR_LOGTO_ENDPOINT',\n        appId: 'YOUR_LOGTO_APP_ID',\n      ),\n      httpClient: http.Client(),\n    );\n\n    await logtoClient.getOidcConfig();\n\n    var idTokenClaims = await logtoClient.idTokenClaims;\n\n    _updateCurrentUser(\n      loggedIn: idTokenClaims != null,\n      uid: idTokenClaims?.subject,\n      idToken: idTokenClaims,\n    );\n  }\n\n  // ... other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sign-In Route with Logto in PHP\nDESCRIPTION: Code for creating a basic sign-in route that redirects users to Logto's authentication page. The route uses the client's signIn method with a redirect URI parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_implement-sign-in-route.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/sign-in', function () {\n  return redirect($client->signIn('${defaultRedirectUri}'));\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token using Logto Client in Dart\nDESCRIPTION: This function asynchronously retrieves an access token for a specified resource using the Logto client. It takes a resource string as input and returns a Future<AccessToken?> object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_get-resource-access-token.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<AccessToken?> getAccessToken(String resource) async {\n  var token = await logtoClient.getAccessToken(resource: resource);\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser Client with User Scopes\nDESCRIPTION: This snippet shows how to import the Logto browser SDK via CDN and create a global client instance. It configures the client with a Logto endpoint, application ID, and specific user scopes for email, phone, custom data, identities, and organizations access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Import `@logto/browser` SDK from the jsdelivr CDN\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  // Assign the `logtoClient` instance to window object,\n  // enabling global usage in other pages\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>', // E.g. http://localhost:3001\n    appId: '<your-application-id>',\n    scopes: [\n      UserScope.Email,\n      UserScope.Phone,\n      UserScope.CustomData,\n      UserScope.Identities,\n      UserScope.Organizations,\n    ],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom User Data in PHP\nDESCRIPTION: Shows how to access custom user data by using the fetchUserInfo method, which retrieves the most up-to-date user information from Logto's userinfo endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$client->fetchUserInfo()->custom_data;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Organization Scopes in Nuxt Config\nDESCRIPTION: Configuration snippet that shows how to import and enable organization scopes in a Nuxt.js application using Logto authentication. The code imports the UserScope enum from the Logto Nuxt package and adds the Organizations scope to the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    scopes: [UserScope.Organizations],\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Additional Scopes\nDESCRIPTION: This code snippet shows how to configure the Logto client with additional scopes for requesting extra user information such as email and phone number.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // 例如 http://localhost:3001\n  appId: \"<your-app-id>\",\n  scopes: [\n    UserScope.Email.rawValue,\n    UserScope.Phone.rawValue,\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Logto with Supabase in Next.js Server Components\nDESCRIPTION: This server component demonstrates how to use Logto's Next.js SDK to get the authenticated user's claims and create a Supabase client. It retrieves posts from Supabase using the user's identity for proper Row Level Security filtering.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLogtoContext } from '@logto/next-server-actions';\nimport { logtoConfig } from '@/logto';\nimport { getSupabaseClient } from '@/utils';\nimport PostList from './PostList';\n\nexport default async function PostPage() {\n  const { claims } = await getLogtoContext(logtoConfig);\n\n  // La valeur `sub` dans `claims` est l'identifiant de l'utilisateur.\n  const supabase = getSupabaseClient(claims.sub);\n\n  const { data: posts } = await supabase.from('posts').select('*');\n\n  return <PostList posts={posts} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Logto Integration in Express\nDESCRIPTION: Commands for installing required dependencies including @logto/js, node-fetch, express-session, and js-base64 using npm, Yarn, or pnpm.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/js node-fetch@v2 express-session js-base64\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/js node-fetch@v2 express-session js-base64\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/js node-fetch@v2 express-session js-base64\n```\n\n----------------------------------------\n\nTITLE: Listing Existing Connectors in Logto using CLI Commands\nDESCRIPTION: Command to list all existing connectors that have been added to your Logto instance. This will display both official and third-party connectors categorized accordingly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlogto connector list\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli connector list\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli connector list\n```\n\n----------------------------------------\n\nTITLE: 사용자 정보 가져오기 - Go\nDESCRIPTION: FetchUserInfo 메서드를 사용하여 사용자 정보를 가져오는 방법을 보여줍니다. 이 메서드를 통해 custom_data와 같은 추가 클레임에 접근할 수 있습니다.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nuserInfo, error := client.FetchUserInfo()\n// 이제 클레임 `userInfo.custom_data`에 접근할 수 있습니다.\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status and Retrieving Access Token with Logto in JavaScript\nDESCRIPTION: This code first checks if a user is authenticated using the Logto client's isAuthenticated method. If the user is authenticated, it executes an immediately invoked async function to retrieve the access token using getAccessToken and logs it to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nif (isAuthenticated) {\n  (async () => {\n    const token = await logtoClient.getAccessToken();\n    console.log(token);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Access Token to Request Headers in Markdown\nDESCRIPTION: This snippet provides instructions in Markdown format on how to attach an access token to request headers using the Bearer format. It includes a note about integration variations based on the framework or requester used.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### 將存取權杖 (Access token) 附加到請求標頭 \\{#attach-access-token-to-request-headers}\n\n將權杖放入 HTTP 標頭的 `Authorization` 欄位，使用 Bearer 格式（`Bearer YOUR_TOKEN`），即可完成。\n\n:::note\nBearer 權杖的整合流程可能會根據你使用的框架或請求者而有所不同。選擇適合你的方式來應用請求的 `Authorization` 標頭。\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components\nDESCRIPTION: JSX/MDX code that imports necessary documentation fragments and renders a component for displaying access token fetching implementation details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources Component with Code Fragments\nDESCRIPTION: Imports and configures a ConfigApiResources component with various code fragments related to API resource configuration including basic resources, scoped resources, and shared scoped resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Organization Scope in Dart\nDESCRIPTION: Creates a LogtoConfig instance with the required parameters for connecting to Logto authentication service. The configuration includes the Logto endpoint URL, application ID, and specifically enables organization-related scopes for authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_organization-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [LogtoUserScopes.organizations.value]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Module Options in Nuxt Config\nDESCRIPTION: Configuration example showing how to set up Logto authentication scopes and protected API resources in a Nuxt.js application. The configuration defines read and write scopes along with multiple API endpoint resources that require authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments for Organization Token Management in JSX\nDESCRIPTION: Imports documentation fragments related to organization token management, including a fragment for fetching organization tokens for users and code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing Reusable Components for Organization Token Management (JavaScript)\nDESCRIPTION: This snippet imports modular code fragments—one from an MDX file and two from Markdown files—preparing them for use within a React application. It expects the imported files to contain either components or code examples for authentication and token management. Dependencies include support for ES module imports, React, and MDX/Markdown integration tooling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Access Token Payload Example\nDESCRIPTION: Example of a decoded JWT access token payload containing issuer, audience, and scope claims. Shows the structure of the token that would be used for authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  iss: '<your-logto-endpoint>/oidc',\n  aud: 'https://resource-server.com/api',\n  scope: 'read write'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Discord OAuth Configuration Types for Logto\nDESCRIPTION: This snippet outlines the configuration types required for setting up Discord OAuth in Logto. It includes clientId, clientSecret, and scope, along with their respective data types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/discord/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name         | Type   |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n| scope        | string |\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Ruby Client with API Resources\nDESCRIPTION: Code example showing how to create a new LogtoClient instance with configured API resources. Demonstrates setting multiple API endpoints in the resources array during client initialization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-next-line\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"] # Add API resources\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth Authentication with Logto Provider - TypeScript\nDESCRIPTION: This snippet defines and exports authentication handlers from NextAuth using a Logto provider, with custom authorization parameters. It requires the 'next-auth' package and a configured Logto application. The 'scope' and 'resource' parameters in the Logto provider allow for granular access control and integration with protected backend resources. Inputs include provider options, and outputs are ready-to-use NextAuth handlers and authentication utilities for use in route handlers or API routes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\\n\\nexport const { handlers, signIn, signOut, auth } = NextAuth({\\n  providers: [\\n    {\\n      id: 'logto',,\\n      // ...\\n      authorization: {\\n        params: {\\n          // highlight-next-line\\n          scope: 'openid offline_access profile read write',\\n          resource: 'https://shopping.your-app.com/api',\\n        },\\n      },\\n      // ...\\n    },\\n  ],\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Handler with Organization Scope in SvelteKit\nDESCRIPTION: Sets up the Logto authentication handler in SvelteKit's server hooks with organization scope enabled. This configuration allows the application to handle organization-level authentication and access control.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto, UserScope } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: [UserScope.Organizations],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Extracting Bearer Token from Request Headers in Python\nDESCRIPTION: A function that extracts the authorization token from the request header. It validates the header format and token type, ensuring it follows the 'Bearer <token>' pattern, and raises appropriate errors for missing or invalid authorization headers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"requires-auth.py\n\"\"\"\ndef get_auth_token():\n  auth = request.headers.get(\"Authorization\", None)\n\n  if not auth:\n    raise Error({ code: 'auth.authorization_header_missing', status: 401 })\n\n  contents = auth.split()\n\n  if len(contents) < 2\n    raise Error({code: 'auth.authorization_token_invalid_format', status: 401})\n\n  elif contents[0] != 'Bearer'\n    raise Error({code: 'auth.authorization_token_type_not_supported', status: 401})\n\n  return contents[1]\n```\n\n----------------------------------------\n\nTITLE: Adding Gradle Dependencies for Spring Boot and OAuth2\nDESCRIPTION: Gradle configuration to add required dependencies for Spring Boot, Spring Security, and OAuth2 client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\n  implementation 'org.springframework.boot:spring-boot-starter-security'\n\timplementation 'org.springframework.boot:spring-boot-starter-oauth2-client'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Module Scopes in Nuxt - TypeScript\nDESCRIPTION: This TypeScript code snippet configures the Logto authentication module within a Nuxt.js project by setting the allowed scopes to include 'UserScope.Organizations'. It imports the 'UserScope' enum from '@logto/nuxt', then exports the Nuxt configuration using 'defineNuxtConfig'. The 'logto' property within the config object specifies 'scopes', which controls what permissions users can request during authentication. Required dependencies include '@logto/nuxt', and the snippet assumes a Nuxt.js application supporting TypeScript. The input is a TypeScript configuration object, and the output is a properly initialized Logto module setup with organization-level permission scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\\n\\nexport default defineNuxtConfig({\\n  logto: {\\n    // highlight-next-line\\n    scopes: [UserScope.Organizations],\\n    // ...other configs\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes in Logto Go SDK Client\nDESCRIPTION: This code snippet shows how to configure the Logto client in Go with custom scopes. The example defines a LogtoConfig object and specifies 'email' and 'phone' scopes that will be requested during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Template for Authentication Buttons\nDESCRIPTION: This template provides conditional rendering of sign-in and sign-out buttons based on the authentication state. It displays the sign-in button when the user is not authenticated and shows the sign-out button when the user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <button v-if=\"!isAuthenticated\" @click=\"onClickSignIn\">Sign In</button>\n  <button v-else @click=\"onClickSignOut\">Sign Out</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Nuxt.js with Logto\nDESCRIPTION: This code snippet shows how to configure additional scopes for the Logto module in a Nuxt.js application. It adds email and phone scopes to request more user information during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    scopes: [UserScope.Email, UserScope.Phone], // Añadir más alcances si es necesario\n    // ...otras configuraciones\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Response in Logto\nDESCRIPTION: HTTP response for a successful token exchange request. It includes the access_token, token_type, expires_in, and other relevant information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/user-management/personal-access-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"access_token\": \"eyJhbGci...zg\",\n  \"issued_token_type\": \"urn:ietf:params:oauth:token-type:access_token\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"profile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express Authentication Settings\nDESCRIPTION: Shows how to define a Logto Express configuration object with custom authorization scopes for shopping and store operations, along with their corresponding API resource endpoints. The configuration enables fine-grained access control for different API operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token in Android\nDESCRIPTION: This code snippet shows how to access additional claims from the ID token after configuring extra scopes. It demonstrates printing the ID token claims and accessing specific claims like email and phone.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getIdTokenClaims { logtoException, idTokenClaims ->\n    println(\"IdTokenClaims:$idTokenClaims\")\n}\n// 이제 추가 클레임 `claims.email`, `claims.phone` 등에 접근할 수 있습니다.\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Scopes and Resources in Go\nDESCRIPTION: This snippet initializes a LogtoConfig struct with custom scopes and resources. It defines read and write permissions for shopping and store APIs, specifying the API endpoints as resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Ruby on Rails View\nDESCRIPTION: This code snippet illustrates how to access additional claims in a Ruby on Rails view after configuring extra scopes. It displays the user's name, email, and phone number if the user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>姓名: <%= @client.id_token_claims[\"name\"] %></p>\n  <p>电子邮件: <%= @client.id_token_claims[\"email\"] %></p>\n  <p>电话: <%= @client.id_token_claims[\"phone\"] %></p>\n<% else %>\n  <p>请登录</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Accessing Supabase from Next.js Server Component\nDESCRIPTION: A Next.js server component that uses Logto authentication to access Supabase data. It demonstrates how to authenticate with Supabase in a traditional web application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getLogtoContext } from '@logto/next-server-actions';\nimport { logtoConfig } from '@/logto';\nimport { getSupabaseClient } from '@/utils';\nimport PostList from './PostList';\n\nexport default async function PostPage() {\n  const { claims } = await getLogtoContext(logtoConfig);\n\n  // `claims` の `sub` 値はユーザー ID です。\n  const supabase = getSupabaseClient(claims.sub);\n\n  const { data: posts } = await supabase.from('posts').select('*');\n\n  return <PostList posts={posts} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with ID Token Claims in ERB Templates\nDESCRIPTION: Shows how to access and display the authenticated user's name using the ID token claims in an ERB view. The code checks if the user is authenticated and conditionally displays a personalized welcome message.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>Willkommen, <%= @client.id_token_claims[\"name\"] %></p>\n<% else %>\n  <p>Bitte melde dich an</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Reference\nDESCRIPTION: Reference to the REST API endpoints for user management in Logto\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/manage-users.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n/api/users\n/api/logs?userId=:userId\n```\n\n----------------------------------------\n\nTITLE: Manually Fetching User Information in Next.js API Route\nDESCRIPTION: This code snippet demonstrates how to manually fetch user information in a Next.js API route using the Logto client. It checks for authentication and returns the user info if authorized.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute(\n  (request, response) => {\n    if (!request.user.isAuthenticated) {\n      response.status(401).json({ message: 'Non autorisé' });\n\n      return;\n    }\n\n    response.json({\n      userInfo: request.user.userInfo,\n    });\n  },\n  { fetchUserInfo: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Org Token Fetch via Server Action in Next.js Page (TSX)\nDESCRIPTION: This Next.js Server Component (`Home`) sets up the mechanism to fetch a Logto organization token. It renders the `GetOrganizationToken` client component and provides it with an asynchronous server action (`onGetOrganizationToken`). This action, marked with `'use server'`, utilizes `getOrganizationToken` from Logto's server actions library, passing the application's Logto configuration (`logtoConfig`) and the target organization ID ('organization-id') to retrieve the token when invoked by the client component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"app/page.ts\"\nimport { getOrganizationToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetOrganizationToken from './get-organization-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetOrganizationToken\n        onGetOrganizationToken={async () => {\n          'use server';\n\n          return getOrganizationToken(logtoConfig, 'organization-id');\n        }}\n      />\n    </main>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing IdP-initiated SSO Authentication Flow with Mermaid\nDESCRIPTION: Sequence diagram showing the authentication flow between User, IdP, Logto, Experience, and SP client during an IdP-initiated SSO process. It illustrates how a SAML assertion is processed and used to authenticate the user bypassing normal OIDC validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n  sequenceDiagram\n\n  actor User\n  participant IdP as IdP\n  participant Logto as Logto\n  participant Experience as expérience de connexion\n  participant SP as Client\n\n  User->>IdP: Se connecter et sélectionner l'application SP\n  IdP->>Logto: Rediriger vers Logto avec l'assertion SAML\n  Logto-->>Logto: Conserver la session d'assertion IdP-initiated SSO\n  Logto-->>Logto: Initier la requête d'authentification OIDC\n  Logto->>Experience: Rediriger l'utilisateur vers l'expérience de connexion\n  Experience-->>Logto: Valider la session d'assertion IdP-initiated SSO (authentification silencieuse)\n  Logto->>SP: Authentifier et rediriger vers l'application SP avec le code d'autorisation (Pas de validation de l'état ou de PKCE)\n  SP->>Logto: Requête de jeton OIDC\n  Logto->>SP: Réponse de jeton\n  SP->>User: Authentifier l'utilisateur\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client Resources in Go\nDESCRIPTION: This snippet demonstrates how to set up the LogtoConfig struct for a Logto client in Go. It specifically shows how to configure multiple resource endpoints that the client will have access to. The Resources field is highlighted to emphasize its importance in the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ID Token Claims in Logto Capacitor\nDESCRIPTION: Demonstrates how to retrieve user claims information using the getIdTokenClaims() method in a Capacitor application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userClaims = await logtoClient.getIdTokenClaims();\nconsole.log(userClaims);\n```\n\n----------------------------------------\n\nTITLE: Handling API Route with Logto and Access Token Retrieval in TypeScript\nDESCRIPTION: This TypeScript code defines a Next.js API route using `logtoClient.withLogtoApiRoute`. It first checks if the user is authenticated (`request.user.isAuthenticated`). If not, it returns a 401 Unauthorized response. If authenticated, it logs the user's access token (`request.user.accessToken`) and returns the complete user object in the JSON response. The configuration options specify that an access token should be fetched (`getAccessToken: true`) for the defined resource (`resource: 'https://shopping.your-app.com/api'`). Requires the `logtoClient` instance from '../../libraries/logto'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"pages/api/get-access-token.ts\"\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute(\n  (request, response) => {\n    if (!request.user.isAuthenticated) {\n      response.status(401).json({ message: 'Unauthorized' });\n\n      return;\n    }\n\n    // 在此取得存取權杖 (Access token)\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  },\n  {\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto to Fetch User Info in Nuxt.js\nDESCRIPTION: This code snippet shows how to configure Logto to fetch user information, including custom data, by setting the fetchUserInfo option to true in the Nuxt.js configuration file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    scopes: [UserScope.CustomData],\n    // highlight-next-line\n    fetchUserInfo: true,\n  },\n  // ...andere Konfigurationen\n});\n```\n\n----------------------------------------\n\nTITLE: Using Access Token with HttpClient in Blazor WebAssembly\nDESCRIPTION: Example of configuring an HttpClient to automatically include the access token in API requests. This uses the AddAccessToken extension method to add the token to the request headers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blorc.OpenIdConnect;\n\nbuilder.Services\n    .AddHttpClient(\"MyApiResource\", client =>\n    {\n        client.BaseAddress = new Uri(\"https://my-api-resource\");\n    })\n    .AddAccessToken(); // Ajouter le jeton d'accès à l'en-tête de la requête\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue package with npm\nDESCRIPTION: Command to install the Logto Vue SDK using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Server Handle with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet shows how to configure the Logto server handle with custom scopes and resources. It sets up read and write scopes and specifies two API resources for a shopping application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Tokens and Claims with Logto Go SDK\nDESCRIPTION: Demonstrates two methods for working with organization tokens: getting the raw access token and retrieving token claims. Organization ID must be provided and can be found in the ID token's 'organizations' claim.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Replace the parameter with a valid organization ID.\n// Valid organization IDs for the user can be found in the ID token claim `organizations`.\naccessToken, error := logtoClient.GetOrganizationToken(\"organization-id\")\n\n// or\naccessTokenClaims, error := logtoClient.GetOrganizationTokenClaims(\"organization-id\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Bearer Token from Request Headers in Python\nDESCRIPTION: A function that extracts the Bearer token from the Authorization header of an HTTP request. It includes validation to ensure the header exists and follows the proper format with appropriate error handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"requires-auth.py\n\"\"\"\ndef get_auth_token():\n  auth = request.headers.get(\"Authorization\", None)\n\n  if not auth:\n    raise Error({ code: 'auth.authorization_header_missing', status: 401 })\n\n  contents = auth.split()\n\n  if len(contents) < 2:\n    raise Error({code: 'auth.authorization_token_invalid_format', status: 401})\n\n  elif contents[0] != 'Bearer':\n    raise Error({code: 'auth.authorization_token_type_not_supported', status: 401})\n\n  return contents[1]\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token in Next.js Auth Callbacks\nDESCRIPTION: This snippet shows how to configure NextAuth callbacks to include the access token in the session object. It extracts the token from the account object and injects it into both the JWT token and the session.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // ...\n  callbacks: {\n    async jwt({ token, account }) {\n      if (account) {\n        token.accessToken = account.access_token;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      // Injecter le jeton d'accès dans l'objet session\n      session.accessToken = token.accessToken;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto for Capacitor in TypeScript\nDESCRIPTION: This code initializes the Logto configuration for a Capacitor application. It specifies the application ID, Logto endpoint, and an array of API resource URLs that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Ajouter des ressources API\n};\n```\n\n----------------------------------------\n\nTITLE: Requesting Additional Scopes in Logto Authentication Configuration\nDESCRIPTION: This code shows how to configure Logto authentication to request additional scopes like email and phone when setting up the authentication service in ASP.NET Core.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Scopes = new string[] {\n    LogtoParameters.Scopes.Email,\n    LogtoParameters.Scopes.Phone\n  }\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources Component\nDESCRIPTION: React component implementation for configuring API resources with various code examples for different scoping scenarios.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode package={props.package} />}\n  configResourcesWithSharedScopesCode={\n    <ConfigResourcesWithSharedScopesCode package={props.package} />\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Translating Keys with ChatGPT\nDESCRIPTION: Command to automatically translate all untranslated keys using ChatGPT API across all languages in the phrases and phrases-experience packages. Requires OPENAI_API_KEY environment variable.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/translation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli translate sync\n```\n\n----------------------------------------\n\nTITLE: 配置 Flask 应用的 Logto 注销路由\nDESCRIPTION: 创建一个注销路由，使用 Logto 客户端的 signOut 方法清除会话中的所有用户认证信息，并将用户重定向到指定的 URL（此例中为应用的主页）。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-out\")\nasync def sign_out():\n    return redirect(\n        # 在成功注销后将用户重定向到主页\n        await client.signOut(postLogoutRedirectUri=\"${defaultBaseUrl}\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Ruby\nDESCRIPTION: Demonstrates how to create a new Logto client instance with custom scope and resource configurations. The highlighted section shows how to specify specific scopes ('read', 'write') and API resources that the client will need access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...otras configuraciones\n    # highlight-start\n    scopes: [\"read\", \"write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...otras configuraciones\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with DOM Manipulation in JavaScript\nDESCRIPTION: Creates a dynamic HTML table to display user information fetched from Logto ID token claims. The code iterates through the claims and creates table rows for each claim-value pair.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.getIdTokenClaims();\n\n// Generate display table for ID token claims\nconst table = document.createElement('table');\nconst thead = document.createElement('thead');\nconst tr = document.createElement('tr');\nconst thName = document.createElement('th');\nconst thValue = document.createElement('th');\nthName.innerHTML = 'Name';\nthValue.innerHTML = 'Value';\ntr.append(thName, thValue);\nthead.append(tr);\ntable.append(thead);\n\nconst tbody = document.createElement('tbody');\n\nfor (const [key, value] of Object.entries(userInfo)) {\n  const tr = document.createElement('tr');\n  const tdName = document.createElement('td');\n  const tdValue = document.createElement('td');\n  tdName.innerHTML = key;\n  tdValue.innerHTML = typeof value === 'string' ? value : JSON.stringify(value);\n  tr.append(tdName, tdValue);\n  tbody.append(tr);\n}\n\ntable.append(tbody);\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoClient with API Resources in PHP\nDESCRIPTION: This code initializes a LogtoClient instance with multiple API resource endpoints in the configuration. The resources parameter takes an array of API endpoint URLs that the client will have access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // API リソースを追加\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Routes with Passport.js\nDESCRIPTION: This code creates the necessary routes for handling sign-in, callback, and sign-out processes using Passport.js with OpenID Connect authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/sign-in', passport.authenticate('openidconnect'));\napp.get(\n  '/callback',\n  passport.authenticate('openidconnect', {\n    successReturnToOrRedirect: '/',\n  })\n);\napp.get('/sign-out', (request, response, next) => {\n  request.logout((error) => {\n    if (error) {\n      next(error);\n      return;\n    }\n    response.redirect(`${endpoint}/oidc/session/end?client_id=${appId}`);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Jose Library for Token Validation in Node.js\nDESCRIPTION: This command installs the 'jose' package as a dependency for JWT validation in the Node.js project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/node-express.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i jose --save\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to asynchronously fetch an organization token using the Logto client. It requires an initialized logtoClient instance and takes an organizationId as a parameter. The function returns a Promise that resolves to the organization token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Performing GET Request for User Search in Logto\nDESCRIPTION: This snippet shows how to make a GET request to the Logto API endpoint for searching users. It includes a sample search parameter for users with 'alice' in their details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  --location \\\n  --request GET \\\n  'http://<your-logto-endpoint>/api/users?search=%25alice%25'\n```\n\n----------------------------------------\n\nTITLE: Using FetchAccessTokenForApiResources Component in MDX\nDESCRIPTION: This MDX snippet demonstrates the usage of the `FetchAccessTokenForApiResources` component. It configures the component by passing the `getAccessTokenApi` prop with the value 'getAccessToken' and embeds the content of the `GetAccessTokenCode` component (imported from './code/_get-access-token-code.md') into the `getAccessTokenCode` prop. This setup is intended to display documentation and code examples for fetching access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Fetching Fragment in React (JavaScript)\nDESCRIPTION: This snippet imports a React component (written in MDX) responsible for fetching organization tokens for a user. The purpose is to modularize authentication functionalities, keeping code maintainable and separated by feature. The fragment likely contains both backend API interactions and UI logic, and requires proper path resolution as well as React/MDX loader setup in the project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n```\n\n----------------------------------------\n\nTITLE: Sign-Up Mode Sign-In Route Implementation in PHP with Logto\nDESCRIPTION: Creates a sign-in route that displays the sign-up page first by setting the interactionMode to signUp. Uses the client's signIn method with both redirect URI and interaction mode parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_implement-sign-in-route.mdx#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/sign-in', function () {\n  return redirect($client->signIn('${defaultRedirectUri}', InteractionMode::signUp));\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting User Data into SvelteKit Layout\nDESCRIPTION: This snippet shows how to make user information available across all pages by injecting the locals.user object into the SvelteKit layout using the load function. This allows user data to be accessible throughout the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = async ({ locals }) => {\n  return { user: locals.user };\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Organization Authentication in React Native with Logto\nDESCRIPTION: A React component that fetches and displays organization IDs from ID token claims and provides a button to retrieve organization-specific tokens. The component uses the useLogto hook to access authentication state and token functions, demonstrating how to work with organization-based authentication in a React Native application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('Revendications de jeton d'identifiant', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  // highlight-start\n                  console.log('jeton brut', await getOrganizationToken(organizationId));\n                  // highlight-end\n                }}\n              >\n                récupérer le jeton (voir la console)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with LogTo Client in Swift\nDESCRIPTION: This code demonstrates how to asynchronously retrieve an access token for a specific API endpoint using the LogTo client. It utilizes Swift's async/await pattern for handling asynchronous operations and includes error handling with try/await.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet accessToken = try await client.getAccessToken(for: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Récupérer les identifiants d'organisation depuis les revendications du token d'ID\nDESCRIPTION: Extrait les identifiants d'organisation auxquels l'utilisateur appartient à partir des revendications du token d'ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclaims = await client.getOrganizationTokenClaims(\"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK Scopes and Resources in Kotlin\nDESCRIPTION: This snippet shows how to initialize a LogtoConfig object with specific OAuth scopes and resource URLs in Kotlin. The scopes define granular API permissions such as read and write access to shopping and store endpoints, while the resources list specifies authorized API base URLs. This approach requires the Logto SDK as a dependency, and expects all scope strings to match defined backend permissions. Inputs include the scopes and resources as lists, and the resulting LogtoConfig instance is used to authorize API calls based on these permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ..other configs\n    // highlight-start\n    scopes = listOf(\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Translating SDK and Connector Guides Command in Bash\nDESCRIPTION: CLI command for translating SDK and connector guide fragments to French locale with sync and all options, using the translate.mjs script.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/plugins/tutorial-generator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode translate.mjs --locale fr --sync --all\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Card Lists in JSX\nDESCRIPTION: This code snippet demonstrates the use of a DocCardList component to create a list of documentation cards. Each card includes a label, href, description, and a custom icon prop. This is likely part of a React-based documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Get started with OSS',\n      href: '/logto-oss/get-started-with-oss',\n      description: 'Step-by-step guides for initializing Logto OSS version.',\n      customProps: {\n        icon: <RocketIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Deployment and configuration',\n      href: '/logto-oss/deployment-and-configuration',\n      description:\n        'Best practices and detailed steps for deploying Logto in a production environment. ',\n      customProps: {\n        icon: <GearIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Vue Integration with Multiple API Resources\nDESCRIPTION: This snippet shows how to initialize the Logto authentication library in a Vue application by adding multiple API resources. The highlighted line indicates the configuration of multiple API endpoints that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Example of Access Token Payload in Logto\nDESCRIPTION: Example of a decoded JSON payload from an access token obtained through PAT exchange. It contains standard JWT claims including subject, issuer, expiration time, and scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/personal-access-token.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jti\": \"iFtbZBeh2M1cTTBuKbHk4\",\n  \"sub\": \"123\",\n  \"iss\": \"https://tenant.logto.app/oidc\",\n  \"exp\": 1672531200,\n  \"iat\": 1672527600,\n  \"scope\": \"profile\",\n  \"client_id\": \"client-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status and Retrieving Access Token with Logto Client\nDESCRIPTION: This snippet demonstrates how to verify a user's authentication status using the Logto client SDK and then retrieve an access token if authenticated. The code first checks the authentication status and then uses an immediately invoked async function to get and log the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nif (isAuthenticated) {\n  (async () => {\n    const token = await logtoClient.getAccessToken();\n    console.log(token);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Applications with Node.js\nDESCRIPTION: A Node.js function that uses fetch to retrieve all applications from the Logto Management API. It requires an access token and the Logto endpoint URL as inputs. The function makes a GET request to the applications endpoint with the access token in the Authorization header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/machine-to-machine/fragments/_access-logto-management-api-using-access-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst logtoEndpoint = 'https://your.logto.endpoint'; // Replace with your Logto endpoint\nconst accessToken = 'eyJhb...2g'; // Access Token\n\nconst fetchLogtoApplications = async () => {\n  return await fetch(`${logtoEndpoint}/api/applications`, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Decorator for Flask Applications\nDESCRIPTION: This code snippet creates a Python decorator function that checks if a user is authenticated before allowing access to protected routes. It can optionally redirect unauthenticated users to the sign-in page and fetch user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom flask import g, jsonify, redirect\nfrom samples.client import client\ndef authenticated(shouldRedirect: bool = False, fetchUserInfo: bool = False):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            if client.isAuthenticated() is False:\n                if shouldRedirect:\n                    return redirect(\"/sign-in\")\n                return jsonify({\"error\": \"Not authenticated\"}), 401\n            # Store user info in Flask application context\n            g.user = (\n                await client.fetchUserInfo()\n                if fetchUserInfo\n                else client.getIdTokenClaims()\n            )\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes in Kotlin\nDESCRIPTION: This code initializes a LogtoConfig object with email and phone scopes. It shows how scopes can be specified either as string literals or using UserScope enum constants. Other configuration options are omitted in this example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/_scopes-sample-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // ou `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration (MDX)\nDESCRIPTION: This MDX snippet imports a main documentation component (`ConfigApiResources`) and references two external files (`_config-resources-code.md`, `_config-resources-with-scopes-code.md`) which are likely imported as components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`). It then renders the `ConfigApiResources` component, passing the code example components as props (`configResourcesCode`, `configResourcesWithScopesCode`) to display structured documentation about configuring API resources, including examples with and without scopes. This relies on the imported components/files existing at the specified relative paths and the MDX processing environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Logto\nDESCRIPTION: This snippet shows how to access the additional claims requested through scopes using the getIdTokenClaims() method. After configuring the client with additional scopes, you can access properties like email and phone.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// これで追加のクレーム (Claims) `claims.email`, `claims.phone` などにアクセスできます。\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Sign-In/Sign-Out Button in Next.js Page\nDESCRIPTION: This snippet demonstrates how to conditionally render Sign-In or Sign-Out buttons based on the user's authentication status in a Next.js page component. It uses the Auth.js session to determine the user's login state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport SignIn from './components/sign-in';\nimport SignOut from './components/sign-out';\nimport { auth } from '@/auth';\n\nexport default function Home() {\n  const session = await auth();\n\n  return <div>{session?.user ? <SignOut /> : <SignIn />}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Settings in appsettings.json\nDESCRIPTION: This JSON snippet shows how to configure the OpenID Connect settings within the `appsettings.json` file for the Blazor WASM application. It defines the `IdentityServer` section with essential properties like `Authority` (Logto OIDC endpoint), `ClientId` (Logto App ID), redirect URIs (`PostLogoutRedirectUri`, `RedirectUri`), `ResponseType`, and requested `Scope`. Placeholders need to be replaced with actual Logto endpoint and App ID values. The redirect URIs must be added to the allowed list in the Logto application settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ...\n  IdentityServer: {\n    Authority: 'https://<your-logto-endpoint>/oidc',\n    ClientId: '<your-logto-app-id>',\n    PostLogoutRedirectUri: '${defaultBaseUrl}',\n    RedirectUri: '${defaultRedirectUri}',\n    ResponseType: 'code',\n    Scope: 'openid profile', // 如有需要可添加更多 scopes\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Vue SDK with Organization Scope\nDESCRIPTION: This code snippet shows how to set up the Logto authentication plugin in a Vue application with organization scope enabled. The configuration includes UserScope.Organizations in the scopes array, which allows the application to access organization-related features and data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [UserScope.Organizations],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token\nDESCRIPTION: This snippet demonstrates how to access additional claims like email and phone after configuring the required scopes. It retrieves the claims using the getIdTokenClaims method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Now you can access additional claims `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object with custom scopes. It shows two ways to specify scopes: using string literals or predefined UserScope enum values. The scopes 'email' and 'phone' are requested, allowing access to the user's email and phone number.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_scopes-sample-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // or `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization List with Token Fetch Functionality in Vue.js\nDESCRIPTION: This HTML template renders a list of organization IDs with buttons to fetch organization-specific tokens. When a button is clicked, it calls the function to retrieve the token and displays the information in the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <ul>\n    <li v-for=\"organizationId of organizationIds\" v-bind:key=\"organizationId\">\n      <span>{{ organizationId }}</span>\n      <button type=\"button\" @click=\"onClickFetchOrganizationToken(organizationId)\">\n        トークンを取得 (コンソールを参照)\n      </button>\n    </li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Tokens and Claims in Flask using Logto\nDESCRIPTION: Examples of fetching an access token and token claims using the Logto client in a Flask application. The code demonstrates two methods - direct access token retrieval and getting token claims for the specified API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naccessToken = await client.getAccessToken(\"https://shopping.your-app.com/api\")\n# oder\nclaims = await client.getAccessTokenClaims(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Multiple API Resources in Swift\nDESCRIPTION: Creates a LogtoConfig object with endpoint, appId, and multiple API resources, then initializes a LogtoClient instance with this configuration. The resources array specifies the API endpoints that the client will have access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // 例如：http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-next-line\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // 新增 API 資源 (API resources)\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up a configuration object for Logto Express with custom scopes and resources. It imports the UserScope from @logto/express and defines an array of scopes and resources for the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Logto Configuration with Organizations Scope\nDESCRIPTION: Demonstrates how to configure Logto by importing UserScope from @logto/next package and enabling organizations scope. The configuration object includes the organizations scope setting while allowing for other config options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Plugin in Vue (TypeScript)\nDESCRIPTION: This snippet demonstrates how to integrate the Logto authentication plugin into a Vue.js application using TypeScript. The plugin is registered via the app.use method and configured with custom scopes (e.g., 'read', 'write') and protected resource endpoints. Prerequisites include installing the '@logto/vue' package and initializing the Vue app instance. Expected input is a configuration object with scopes and resources arrays; successful configuration allows authenticated access to listed APIs. Limitations include the need to further configure other Logto settings as required for your authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching External Data in getCustomJwtClaims Function\nDESCRIPTION: Example showing how to use the built-in fetch function to retrieve data from an external API and include it in custom token claims. This demonstrates how to use environment variables for API authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/custom-token-claims/create-script.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst getCustomJwtClaims = async ({ environmentVariables }) => {\n  const response = await fetch('https://api.example.com/data', {\n    headers: {\n      Authorization: `Bearer ${environmentVariables.API_KEY}`,\n    },\n  });\n\n  const data = await response.json();\n\n  return {\n    data,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser SDK Using JavaScript Module in HTML\nDESCRIPTION: This code snippet demonstrates how to import the Logto Browser SDK from a CDN via an ES module script in HTML, and globally attach the Logto client instance to the window object for use within different pages of a web application. Dependencies include the '@logto/browser' JavaScript package served by esm.run CDN, and the surrounding HTML document must support ES module scripts (type='module'). Key parameters are 'endpoint' (the authentication server URL), 'appId' (application identifier), and 'scopes' (the list of user data scopes required for authentication). The snippet expects placeholder values for endpoint and appId to be replaced with actual configuration. Output is a globally available 'logtoClient' instance under 'window.logtoClient', which other components can utilize for authentication flows.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Import `@logto/browser` SDK from the jsdelivr CDN\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  // Assign the `logtoClient` instance to window object,\n  // enabling global usage in other pages\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>', // E.g. http://localhost:3001\n    appId: '<your-application-id>',\n    scopes: [\n      UserScope.Email,\n      UserScope.Phone,\n      UserScope.CustomData,\n      UserScope.Identities,\n      UserScope.Organizations,\n    ],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Client Button Component for Access Token Fetching in Next.js (TypeScript)\nDESCRIPTION: This snippet defines the GetAccessToken React functional component, used on the client side within a Next.js application. It takes a single prop, onGetAccessToken, which is an asynchronous callback function returning a Promise that resolves to a string (the access token). On button click, it awaits the token and logs it to the console. This component must be rendered within a client component context. No external dependencies are required except React, and it expects a properly defined onGetAccessToken prop. The button is labeled in Spanish and informs the user to check the console for the retrieved token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetAccessToken: () => Promise<string>;\n};\n\nconst GetAccessToken = ({ onGetAccessToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetAccessToken();\n        console.log(token);\n      }}\n    >\n      Obtener token de acceso (ver registro de consola)\n    </button>\n  );\n};\n\nexport default GetAccessToken;\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources with Code Props - React - JavaScript\nDESCRIPTION: This snippet renders the ConfigApiResources React component and passes in code sample components as props. The props contain rendered Markdown/MDX nodes for configuration resources, optionally with scopes or shared scopes, which are displayed within the documentation interface. The component assumes all child components are available and properly imported.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional User Claims in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to access additional claims like email after requesting them through scopes in an ASP.NET Core controller.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar claims = User.Claims;\n\n// ユーザーのメールを取得\nvar email = claims.FirstOrDefault(c => c.Type == LogtoParameters.Claims.Email)?.Value;\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Provider with User Scopes in React Native\nDESCRIPTION: Demonstrates configuration of LogtoProvider with application ID, endpoint URL, and user scopes for authentication. The code sets up email, phone, custom data, identities, and organizations scopes for user authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/get-user-information/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n  ],\n};\n\nconst App = () => <LogtoProvider config={config}>{/* Your app content */}</LogtoProvider>;\n```\n\n----------------------------------------\n\nTITLE: Adding Logto Dart SDK dependency to pubspec.yaml\nDESCRIPTION: YAML configuration to add the logto_dart_sdk dependency to a Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  logto_dart_sdk: ^3.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with npm\nDESCRIPTION: Installs the @logto/chrome-extension package using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Importing Step Components for OIDC SSO Configuration in JSX\nDESCRIPTION: This code imports three separate MDX components, each representing a step in the OIDC SSO configuration process. These components are then rendered within the main content structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sso/oidc/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Step1 from './_step-1.mdx';\nimport Step2 from './_step-2.mdx';\nimport Step3 from './_step-3.mdx';\n\n### Step 1: Create an OIDC application on your IdP {#step-1-create-an-oidc-application-on-your-idp}\n\n<Step1 />\n\n### Step 2: Configure OIDC SSO on Logto {#step-2-configure-oidc-sso-on-logto}\n\n<Step2 />\n\n### Step 3: Set email domains and enable the SSO connector {#step-3-set-email-domains-and-enable-the-sso-connector}\n\n<Step3 />\n```\n\n----------------------------------------\n\nTITLE: Rendering the FetchOrganizationTokenForUser Component with Props in React (JSX)\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component in a JSX context, providing it with three props: organizationScope (a string), configOrganizationCode (a Markdown fragment/component), and getOrganizationAccessTokenCode (another Markdown fragment/component). The component likely consumes these props to display or manage organization token workflows, importing snippets of documentation or code for enhanced user guidance. Required dependencies are the React import system, and required parameters are the specific prop values; missing imported modules will cause runtime errors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Google OAuth Configuration Types Schema\nDESCRIPTION: Defines the configuration types for the Google OAuth connector including clientId, clientSecret, scope and prompts parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/google/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name         | Type     |\n| ------------ | -------- |\n| clientId     | string   |\n| clientSecret | string   |\n| scope        | string   |\n| prompts      | string[] |\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Access Token Fetching in React\nDESCRIPTION: This snippet imports necessary components and code snippets for fetching an access token in Logto. It uses a custom MDX component and a separate code file for the implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Google One-tap Authentication Flow\nDESCRIPTION: Sequence diagram illustrating the simplified authentication process using Google One-tap integration in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/sign-up-and-sign-in/social-sign-in.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nactor user as Usuario\n    participant app as Aplicación cliente\n    participant experience as Página de inicio de sesión\n    participant logto as Servicio central de Logto\n\n    user->>app: Visitar la aplicación\n    app->>experience: Redirigir a la página de inicio de sesión\n    user->>experience: Hacer clic en el botón \"Iniciar sesión con Google\"\n    experience->>Logto: Solicitar inicio de sesión usando autenticación de Google\n    Logto->>app: Autenticar usuario y redirigir de vuelta a la aplicación\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client for API Resources in JSX\nDESCRIPTION: This snippet renders the ConfigApiResources component, passing in various code snippets as props for different configuration scenarios, including basic resources, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Organization Management in Vue.js\nDESCRIPTION: This script initializes the Logto integration in a Vue component to retrieve organization information. It uses the Logto Vue hooks to get organization tokens and claims, and provides a function to fetch organization-specific tokens when requested.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto } from '@logto/vue';\nimport { onMounted, ref } from 'vue';\n\nconst { getOrganizationToken, getOrganizationTokenClaims, getIdTokenClaims } = useLogto();\nconst organizationIds = ref<string[]>();\n\nonMounted(async () => {\n  const claims = await getIdTokenClaims();\n\n  console.log('ID token claims', claims);\n  organizationIds.value = claims?.organizations;\n});\n\nconst onClickFetchOrganizationToken = async (organizationId: string) => {\n  console.log('raw token', await getOrganizationToken(organizationId));\n  console.log('claims', await getOrganizationTokenClaims(organizationId));\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources for Logto Client in Go\nDESCRIPTION: This snippet shows how to initialize a LogtoConfig struct with multiple API resources. The Resources field is set to an array of strings, each representing a different API endpoint that the Logto client will interact with.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Fragment Components to Structure Documentation - MDX\nDESCRIPTION: This snippet demonstrates the embedding of imported MDX fragments as React components to create a structured, multi-sectioned tutorial within a Docusaurus-supported MDX file. Each directive (e.g., <Intro />, <FrameworkGuide />) represents a step or topic in the workflow, supplying props when needed for configuration. Inputs are typically page-specific variables like the connector name or SDK, and there are no strict output values except rendered documentation content. This pattern modularizes documentation and supports automatic Table of Contents generation and section navigation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-aws-ses.mdx#2025-04-22_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Razor Pages)\" link=\"https://learn.microsoft.com/aspnet/core/razor-pages\" />\\n\\n## Create an application in Logto \\{#create-an-application-in-logto}\\n\\n<CreateApplication type=\"Traditional web\" framework=\".NET Core (Razor Pages)\" />\\n\\n## Integrate .NET Core (Razor Pages) with Logto \\{#integrate-with-logto}\\n\\n<FrameworkGuide />\\n\\n## Add AWS SES connector \\{#add-connector-connector}\\n\\n<AddPasswordlessConnector\\n  connector={connector}\\n  connectorType=\"Email\"\\n  passwordlessSignUpIdentifier=\"Email address\"\\n/>\\n\\n## Set up AWS SES email connector \\{#set-up-connectorconfigname}\\n\\n<ConnectorGuide />\\n\\n### Save your configuration \\{#save-your-configuration}\\n\\n<SaveYourConfiguration connector={connector} />\\n\\n## Enable AWS SES connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\\n\\n<EnablePasswordlessConnector\\n  connectorType=\"Email\"\\n  passwordlessSignUpIdentifier=\"Email address\"\\n/>\\n\\n## Testing and Validation \\{#testing-and-validation}\\n\\n<TestingAndValidation connector={connector} sdk=\".NET Core (Razor Pages)\" />\\n\\n## Further readings \\{#further-readings}\\n\\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Using ConfigApiResources Component with Code Props in MDX\nDESCRIPTION: This MDX snippet demonstrates rendering the `ConfigApiResources` component. It passes other imported components, which are expected to contain code examples (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`), as props. This pattern allows the `ConfigApiResources` component to dynamically display different code snippets related to API resource configuration based on the passed props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Passing Organization ID in Logto Browser SDK Sign-in Method\nDESCRIPTION: This code demonstrates how to pass an organization_id parameter in the extraParams object when calling the signIn method using Logto browser SDK. This allows the sign-in experience to display organization-specific branding based on the provided ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/match-your-brand.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nlogtoClient.signIn({\n  // ...other parameters\n  redirectUri: 'https://your-redirect-uri',\n  extraParams: {\n    organization_id: '123456',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in Ruby\nDESCRIPTION: This snippet shows how to create a new LogtoClient instance with the organizations scope. It requires importing the necessary Logto modules and configuring the client with the USER_SCOPE organizations permission to enable organization-related features in the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/core\"\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...otras configuraciones\n    # highlight-next-line\n    scopes: [LogtoCore::USER_SCOPE[:organizations]]\n  ),\n  # ...otras configuraciones\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Capacitor SDK in TypeScript\nDESCRIPTION: This snippet defines a LogtoConfig object, initializing it with application-specific parameters for authentication and authorization purposes using TypeScript. Dependencies include the '@logto/capacitor' package, and required fields such as appId, endpoint, scopes, and resources are demonstrated. The configuration object is intended for use with Logto's authentication flows in a Capacitor application, with placeholder values to be replaced by the developer; output is a strongly-typed configuration object that can be consumed by the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\\n\\nconst config: LogtoConfig = {\\n  appId: '<your-application-id>',\\n  endpoint: '<your-logto-endpoint>',\\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization Display and Token Fetching with Logto React SDK in TSX\nDESCRIPTION: This TSX snippet defines a React functional component named `Organizations`. It uses the `useLogto` hook from `@logto/react` to check authentication status (`isAuthenticated`), fetch ID token claims (`getIdTokenClaims`), and retrieve organization-specific tokens (`getOrganizationToken`). Upon authentication, it uses `useEffect` to asynchronously fetch the claims, extracts the `organizations` array (containing organization IDs), and stores them in the component's state using `useState`. The component then renders an unordered list where each item displays an organization ID and a button. Clicking the button calls `getOrganizationToken` with the corresponding ID and logs the resulting token to the console. The button text is in Portuguese.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"pages/Organizations/index.tsx\"\nimport { useLogto } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID token claims', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  console.log('raw token', await getOrganizationToken(organizationId));\n                }}\n              >\n                buscar token (ver console)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope in React TypeScript\nDESCRIPTION: This code demonstrates how to set up a Logto configuration object in a React application with TypeScript. It specifically highlights how to include the Organizations user scope in the configuration, which allows the application to access organization-related data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Visualizing 'Get Started' Sign-in Flow with Mermaid\nDESCRIPTION: This sequence diagram shows the process when a user clicks 'Get started', illustrating the default sign-in experience where the user is redirected to Logto's sign-in page and then back to the app.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/sign-in-experience.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant A as Your app\n  participant B as Logto\n\n  Note over A: User clicks<br/>\"Get started\"\n  A->>B: Redirect\n  B->B: User finishes sign-in\n  B->>A: Redirect back\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Ruby Client with Custom Scopes\nDESCRIPTION: Demonstrates initialization of a LogtoClient instance with custom scopes for shopping and store operations, along with their corresponding API resource endpoints. The configuration specifies read and write permissions for both shopping and store functionalities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Multiple API Resources in JavaScript\nDESCRIPTION: This code initializes a new LogtoClient instance with multiple API resources. It demonstrates how to configure the client to access different API endpoints, which is crucial for applications that interact with multiple backend services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Adicionar recursos de API\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-in and Sign-out Routes in Rails\nDESCRIPTION: Setting up Rails routes for the sign-in and sign-out actions that will trigger the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-start\n  get \"/sign_in\", to: \"sample#sign_in\"\n  get \"/sign_out\", to: \"sample#sign_out\"\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Access Token Conditionally in Vue.js (TypeScript)\nDESCRIPTION: This TypeScript snippet, intended for use within a Vue.js component, checks if the user is authenticated using the `isAuthenticated` reactive reference from Logto's `useLogto` composable. If authenticated, it uses an immediately invoked async function expression (IIAFE) to call `getAccessToken` with a specific resource server URL ('https://shopping.your-app.com/api') and logs the retrieved access token to the console. It depends on the `@logto/vue` package and assumes Logto has been properly initialized in the Vue application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useLogto, type UserInfoResponse } from '@logto/vue';\n\nconst { isAuthenticated, getAccessToken } = useLogto();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const accessToken = await getAccessToken('https://shopping.your-app.com/api');\n    console.log(accessToken);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: User Account Information Response (JSON)\nDESCRIPTION: This snippet shows the expected response format when retrieving user account information. It includes basic user details such as id, username, name, and avatar.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"...\",\n  \"username\": \"...\",\n  \"name\": \"...\",\n  \"avatar\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration for Capacitor in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object for use with Capacitor. It includes the necessary import statement and configuration parameters such as appId, endpoint, scopes, and resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info for Custom Claims\nDESCRIPTION: This code shows how to fetch user info to access custom claims that are not included in the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet userInfo = try? client.fetchUserInfo()\n// 现在你可以访问声明 `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope in TypeScript for Next.js\nDESCRIPTION: This code snippet demonstrates how to set up the Logto configuration object in a Next.js application. It imports the UserScope from the Logto Next.js package and sets the 'Organizations' scope in the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing User Claims in Vue Template\nDESCRIPTION: Example of accessing additional user claims in a Vue template after configuring the required scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"user\">\n    <p>Name: {{ user.name }}</p>\n    <p>Email: {{ user.email }}</p>\n    <p>Phone: {{ user.phone }}</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Swift\nDESCRIPTION: This code snippet demonstrates how to asynchronously obtain an access token using the Logto client. It specifies a target API endpoint for which the access token is requested.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet accessToken = try await client.getAccessToken(for: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Attaching Access Token to API Requests in Swift\nDESCRIPTION: Demonstrates how to add an OAuth access token to HTTP request headers using the Bearer token format, which is necessary for making authenticated API calls.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nawait LogtoRequest.get(\n  useSession: session,\n  endpoint: userInfoEndpoint,\n  // highlight-next-line\n  headers: [\"Authorization\": \"Bearer \\(accessToken)\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Initialisation de LogtoClient avec le plugin WeChat sur iOS\nDESCRIPTION: Code Swift pour initialiser LogtoClient avec le plugin social WeChat sur iOS, nécessaire pour activer la connexion WeChat native.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet logtoClient = LogtoClient(\n  useConfig: config,\n  socialPlugins: [LogtoSocialPluginWechat()]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler with French Parameters in TypeScript\nDESCRIPTION: This code example demonstrates how to configure the Logto authentication handler in a server hooks file. It specifies scopes (portées) and API resources (ressources) that the authentication should have access to, using French parameter names.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    portées: ['read', 'write'],\n    ressources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Organizations Component with Logto Authentication in TSX\nDESCRIPTION: A React component that displays a user's organizations and provides functionality to generate organization-specific tokens. It uses Logto's authentication hooks to fetch organization IDs from ID token claims and render them in a list with buttons to generate tokens for each organization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID token claims', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  console.log('raw token', await getOrganizationToken(organizationId));\n                }}\n              >\n                fetch token (see console)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Authentication Flow in JSX\nDESCRIPTION: Imports necessary components and code fragments for setting up organization token authentication. This includes fragments for fetching organization tokens for users and code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organisations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: JWT Audience Validator Implementation\nDESCRIPTION: Custom validator class implementing OAuth2TokenValidator to verify JWT audience claims and optional RBAC scope validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.logto.springboot.sample.validator;\n\nimport org.springframework.security.oauth2.core.OAuth2Error;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidator;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\nimport org.springframework.security.oauth2.jwt.Jwt;\n\npublic class AudienceValidator implements OAuth2TokenValidator<Jwt> {\n\n    private final String audience;\n\n    public AudienceValidator(String audience) {\n        this.audience = audience;\n    }\n\n    @Override\n    public OAuth2TokenValidatorResult validate(Jwt jwt) {\n        if (!jwt.getAudience().contains(audience)) {\n            return OAuth2TokenValidatorResult.failure(new OAuth2Error(\"invalid_token\", \"Required audience not found\", null));\n        }\n\n\t      String scopes = jwt.getClaimAsString(\"scope\");\n\t      if (scopes == null || !scopes.contains(\"read:profile\")) {\n\t          return OAuth2TokenValidatorResult.failure(new OAuth2Error(\"invalid_token\", \"Insufficient permission\", null));\n\t      }\n\n        return OAuth2TokenValidatorResult.success();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logto Client Scopes in Go\nDESCRIPTION: Demonstrates configuring a Logto client instance with email and phone scopes. These scopes determine what user data the client can access after authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logto Authentication in Vue Component\nDESCRIPTION: Demonstrates how to use the Logto Vue composable to check authentication status and retrieve an access token for a specific API endpoint. The code imports necessary types and hooks from @logto/vue package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type UserInfoResponse } from '@logto/vue';\n\nconst { isAuthenticated, getAccessToken } = useLogto();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const accessToken = await getAccessToken('https://shopping.your-app.com/api');\n    console.log(accessToken);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Organization Scope - Swift\nDESCRIPTION: Initialize a Logto client in Swift with organization scopes enabled.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Logto\nimport LogtoClient\n\nlet config = try? LogtoConfig(\n    // ...\n    scopes: [\n        UserScope.organizations.rawValue,\n    ],\n    // ...\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication and Retrieving Access Token with Logto in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to check if a user is authenticated and retrieve an access token. It first checks the authentication status using isAuthenticated() method, and if authenticated, it obtains the access token using getAccessToken() method and logs it to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nif (isAuthenticated) {\n  (async () => {\n    const token = await logtoClient.getAccessToken();\n    console.log(token);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Logto PHP SDK via Composer (Bash)\nDESCRIPTION: This command utilizes Composer, the standard package manager for PHP, to install the Logto PHP SDK (`logto/sdk`). Running this command within a PHP project directory adds the SDK as a dependency, downloads the necessary files, and updates the `composer.json` and `composer.lock` files accordingly. Requires Composer and PHP to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require logto/sdk\n```\n\n----------------------------------------\n\nTITLE: Initializing Passport Middleware in TypeScript Express Application\nDESCRIPTION: This code snippet shows how to initialize and attach the Passport middleware in an Express application. It imports the previously defined initPassport function and sets up session authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport initPassport from './passport';\n\n// ... anderer Code\ninitPassport();\n// ... anderer Code\napp.use(passport.authenticate('session'));\n// ... anderer Code\n```\n\n----------------------------------------\n\nTITLE: Node.js Implementation of User Impersonation\nDESCRIPTION: Complete TypeScript/Node.js example implementing the entire impersonation workflow. Includes functions for requesting impersonation, obtaining subject tokens, and exchanging them for access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\ninterface ImpersonationResponse {\n  subjectToken: string;\n  expiresIn: number;\n}\n\ninterface TokenExchangeResponse {\n  access_token: string;\n  issued_token_type: string;\n  token_type: string;\n  expires_in: number;\n  scope: string;\n}\n\nasync function impersonateUser(\n  userId: string,\n  clientId: string,\n  ticketId: string,\n  resource: string\n): Promise<string> {\n  try {\n    // Step 1 & 2: Request impersonation and get subject token\n    const impersonationResponse = await fetch(\n      'https://api.techcorp.com/api/request-impersonation',\n      {\n        method: 'POST',\n        headers: {\n          Authorization: \"Bearer <Sarah's_access_token>\",\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId,\n          reason: 'Investigating resource access issue',\n          ticketId,\n        }),\n      }\n    );\n\n    if (!impersonationResponse.ok) {\n      throw new Error(`HTTP error occurred. Status: ${impersonationResponse.status}`);\n    }\n\n    const { subjectToken } = (await impersonationResponse.json()) as ImpersonationResponse;\n\n    // Step 3: Exchange subject token for access token\n    const tokenExchangeBody = new URLSearchParams({\n      grant_type: 'urn:ietf:params:oauth:grant-type:token-exchange',\n      client_id: clientId,\n      scope: 'openid profile resource.read',\n      subject_token: subjectToken,\n      subject_token_type: 'urn:ietf:params:oauth:token-type:access_token',\n      resource: resource,\n    });\n\n    const tokenExchangeResponse = await fetch('https://techcorp.logto.app/oidc/token', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: tokenExchangeBody,\n    });\n\n    if (!tokenExchangeResponse.ok) {\n      throw new Error(`HTTP error! status: ${tokenExchangeResponse.status}`);\n    }\n\n    const tokenData = (await tokenExchangeResponse.json()) as TokenExchangeResponse;\n    return tokenData.access_token;\n  } catch (error) {\n    console.error('Impersonation failed:', error);\n    throw error;\n  }\n}\n\n// Sarah uses this function to impersonate Alex\nasync function performImpersonation(): Promise<void> {\n  try {\n    const accessToken = await impersonateUser(\n      'alex123',\n      'techcorp_support_app',\n      'TECH-1234',\n      'https://api.techcorp.com/customer-data'\n    );\n    console.log('Impersonation access token for Alex:', accessToken);\n  } catch (error) {\n    console.error('Failed to perform impersonation:', error);\n  }\n}\n\n// Execute the impersonation\nvoid performImpersonation()\n```\n\n----------------------------------------\n\nTITLE: Defining Config Types for GitHub OAuth Connector in Logto\nDESCRIPTION: This snippet defines the configuration types required for the GitHub OAuth connector in Logto. It specifies the clientId, clientSecret, and scope as string types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/github/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name         | Type   |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n| scope        | string |\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Client in application.properties\nDESCRIPTION: This properties file snippet shows the configuration for the OAuth2 client, including client ID, secret, redirect URI, and Logto endpoint details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nspring.security.oauth2.client.registration.logto.client-name=logto\nspring.security.oauth2.client.registration.logto.client-id={{YOUR_CLIENT_ID}}\nspring.security.oauth2.client.registration.logto.client-secret={{YOUR_CLIENT_ID}}\nspring.security.oauth2.client.registration.logto.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}\nspring.security.oauth2.client.registration.logto.authorization-grant-type=authorization_code\nspring.security.oauth2.client.registration.logto.scope=openid,profile,offline_access\nspring.security.oauth2.client.registration.logto.provider=logto\n\nspring.security.oauth2.client.provider.logto.issuer-uri={{LOGTO_ENDPOINT}}/oidc\nspring.security.oauth2.client.provider.logto.authorization-uri={{LOGTO_ENDPOINT}}/oidc/auth\nspring.security.oauth2.client.provider.logto.jwk-set-uri={{LOGTO_ENDPOINT}}/oidc/jwks\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Support with Logto in SvelteKit\nDESCRIPTION: This snippet shows how to set up the Logto handler in a SvelteKit application with organization features enabled. It imports the necessary components from @logto/sveltekit and configures the handle function with the Organizations scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto, UserScope } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: [UserScope.Organizations],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token for Resource Server API using PHP Client\nDESCRIPTION: This PHP code snippet demonstrates retrieving an access token scoped for the resource server identified by the URL `https://shopping.your-app.com/api`. It assumes a `$client` object (likely an OAuth2 or Logto client instance) has already been initialized and uses its `getAccessToken` method. The obtained token is assigned to the `$accessToken` variable.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php title=\"index.php\"\n$accessToken = $client->getAccessToken(\"https://shopping.your-app.com/api\");\n```\n```\n\n----------------------------------------\n\nTITLE: Requesting Additional Scopes in Flutter with Logto\nDESCRIPTION: This code snippet shows how to request additional scopes when configuring the Logto client in a Flutter application. It adds the 'email' and 'phone' scopes to the LogtoConfig object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal config = LogtoConfig(\n  // ...\n  scopes: ['openid', 'profile', 'email', 'phone'],\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in PHP\nDESCRIPTION: This code initializes a LogtoClient instance with custom configuration. It specifically adds read and write scopes for permissions and defines multiple API resources that the client will be able to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"read\", \"write\"], // 添加权限 (Scopes)\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // 添加 API 资源\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scopes and Resources in Logto for TypeScript\nDESCRIPTION: This snippet demonstrates how to set up custom scopes and resources in the Logto configuration. It defines specific read and write permissions for shopping and store functionalities, along with their corresponding API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Additional Option in Next.js\nDESCRIPTION: This code snippet demonstrates how to fetch user information by setting the fetchUserInfo option to true when calling getLogtoContext. It then displays the email from the retrieved user info.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function Home() {\n  const { userInfo } = await getLogtoContext(logtoConfig, { fetchUserInfo: true });\n  return (\n    <div>\n      {userInfo && <p>Email: {userInfo.email}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom API Resources in Python\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with a custom configuration that includes multiple API resources. The resources parameter is highlighted to emphasize the addition of API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], # API リソースを追加\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to obtain an access token for a specific API endpoint. It utilizes an async function to retrieve the token, which is likely used for authenticating API requests in a web application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Rendering Logto Documentation Components\nDESCRIPTION: Renders the imported documentation components with proper section headers for API resources configuration and token management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/_index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiResourcesDescription />\n\n### Configure Logto client \\{#configure-logto-client}\n\n<ConfigApiResources />\n\n### Fetch access token for the API resource \\{#fetch-access-token-for-the-api-resource}\n\n<FetchAccessTokenForApiResources />\n\n### Fetch organization tokens \\{#fetch-organization-tokens}\n\n<FetchOrganizationTokenForUser />\n```\n\n----------------------------------------\n\nTITLE: Creating User Profile Route in Express\nDESCRIPTION: Implementation of a user profile route in Express that requires authentication. This route displays the user's ID (subject) from the authentication token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/user', withAuth(), (req, res, next) => {\n  res.render('user', { userId: req.auth });\n});\n```\n\n----------------------------------------\n\nTITLE: PHP SDK での組織スコープ設定\nDESCRIPTION: Logto PHP SDK で組織スコープを設定する方法です。LogtoClient インスタンスを作成する際に LogtoConfig の scopes パラメーターに UserScope::organizations を追加します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...\n    scopes: [UserScope::organizations],\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This snippet configures NextAuth with a Logto provider. It sets up the authorization parameters, including specific scopes and a resource URL. The code exports handlers, signIn, signOut, and auth functions from NextAuth.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          scope: 'openid offline_access profile email',\n          // highlight-next-line\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding WXEntryActivity to AndroidManifest.xml\nDESCRIPTION: XML configuration to add the WXEntryActivity to the AndroidManifest.xml file with the required exported attribute for WeChat authentication to work.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  package=\"com.sample.app\">\n\n  <application>\n    <!-- line to be added -->\n    <activity android:name=\".wxapi.WXEntryActivity\" android:exported=\"true\"/>\n  </application>\n\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with OAuth Client in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to request an access token for a specific API resource using an OAuth 2.0 client instance. The code requires a pre-initialized @client object that supports an access_token method and the corresponding gem (such as 'oauth2' or a similar library). The 'resource' parameter specifies the audience or target API for which the token is intended (here, 'https://shopping.your-app.com/api'). The output of this line will be a token object or string that can be used for authenticated requests. Ensure that valid client credentials and configuration are set up for @client before invoking this method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntoken = @client.access_token(resource: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Displaying User Profile in User Page for Dart\nDESCRIPTION: Shows how to access and display user information in the user profile page using auth util getters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport '/auth/custom_auth/auth_util.dart';\n\n// ...\n\nchildren: [\n  Text(\n    'User ID: $currentUserUid',\n  ),\n  Text(\n    'Display Name: ${currentUserData?.name}',\n  ),\n  Text(\n    'Username: ${currentUserData?.username}',\n  ),\n  Text(\n    'Email: ${currentUserData?.emailVerified ?? currentUserData?.email}',\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Variable in MDX\nDESCRIPTION: This snippet exports a JavaScript constant named 'connector' with the value 'OAuth2'. This constant is likely used within the MDX file or imported components to dynamically refer to the specific connector being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-oauth2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OAuth2';\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resource Configuration Sections using MDX Component\nDESCRIPTION: This MDX snippet demonstrates the usage of the `ConfigApiResources` component. It imports three separate code example components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) and passes them as props to the `ConfigApiResources` component. This allows for modular documentation structure, where the main component orchestrates the display of different code examples related to API resource configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig Object in React Native TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a configuration object for Logto authentication in a React Native application. It specifies the application ID, endpoint, OAuth scopes, and protected resources that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['read', 'write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Middleware in SvelteKit (TypeScript)\nDESCRIPTION: This code snippet initializes the Logto authentication handle for a SvelteKit server application using TypeScript. It imports the required Logto middleware and user scope definitions, then configures the handleLogto middleware to request organizational user data by specifying the 'Organizations' scope. The snippet assumes '@logto/sveltekit' is installed and that additional configuration may be provided as needed. The exported handle is typically used by SvelteKit to intercept and manage authentication on incoming requests, outputting user session details with the requested scopes. Key input: list of authentication scopes; Output: a middleware handle function for SvelteKit. Ensure the Logto service is properly set up and accessible to avoid authentication errors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { handleLogto, UserScope } from '@logto/sveltekit';\\n\\nexport const handle = handleLogto(\\n  {\\n    // ...other configs\\n    scopes: [UserScope.Organizations],\\n  }\\n  // ...other configs\\n);\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Token Exchange Using PAT in Logto\nDESCRIPTION: Example of an HTTP POST request to the token endpoint for exchanging a Personal Access Token for an access token. The request includes required parameters like grant_type, subject_token, and subject_token_type in the request body.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/personal-access-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /oidc/token HTTP/1.1\nHost: tenant.logto.app\nContent-Type: application/x-www-form-urlencoded\nAuthorization: Basic <base64(client-id:client-secret)>\n\ngrant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange\n&scope=profile\n&subject_token=pat_W51arOqe7nynW75nWhvYogyc\n&subject_token_type=urn%3Alogto%3Atoken-type%3Apersonal_access_token\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Ruby\nDESCRIPTION: Basic code for initializing the Logto client with configuration settings, navigation handler, and session storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    endpoint: \"https://your-logto-endpoint.com\",\n    app_id: \"your-logto-app-id\",\n    app_secret: \"your-logto-app-secret\"\n  ),\n  navigate: ->(uri) { a_redirect_method(uri) },\n  storage: LogtoClient::SessionStorage.new(the_session_object)\n)\nend\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Configuration for Logto\nDESCRIPTION: Kubernetes deployment manifest for running Logto with shared connectors folder using init containers and volume mounts.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/deployment-and-configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: logto\n  namespace: default\nspec:\n  template:\n    spec:\n      volumes:\n        - name: connectors\n          emptyDir: {}\n      initContainers:\n        - image: ghcr.io/logto-io/logto\n          command:\n            - /bin/sh\n          args:\n            - '-c'\n            - 'npm run cli connector add -- --official'\n          name: init\n          volumeMounts:\n            - name: connectors\n              mountPath: /etc/logto/packages/core/connectors\n      containers:\n        - image: ghcr.io/logto-io/logto\n          name: logto\n          volumeMounts:\n            - name: connectors\n              mountPath: /etc/logto/packages/core/connectors\n```\n\n----------------------------------------\n\nTITLE: Client-Side Access Token Button Component\nDESCRIPTION: A client-side React component that renders a button to trigger access token retrieval. When clicked, it calls the provided server action and logs the retrieved token to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetAccessToken: () => Promise<string>;\n};\n\nconst GetAccessToken = ({ onGetAccessToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetAccessToken();\n        console.log(token);\n      }}\n    >\n      Zugangstoken abrufen (siehe Konsolenprotokoll)\n    </button>\n  );\n};\n\nexport default GetAccessToken;\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with Logto in React Native\nDESCRIPTION: A React component that uses the Logto authentication hook to retrieve an access token for a specific API endpoint. The component monitors authentication state and fetches the token when authenticated, storing it in local state for display.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\n\nconst AccessToken = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Scope in Logto Vue Plugin (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Logto Vue plugin using `app.use` and `createLogto`. It specifically highlights adding `UserScope.Organizations` to the `scopes` array in the configuration object. This configuration requests permission to access the user's organization data during the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"main.ts\"\nimport { createLogto, UserScope } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [UserScope.Organizations],\n  // highlight-end\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configurando LogtoConfig sem Persistência de Armazenamento em Swift\nDESCRIPTION: Este snippet demonstra como configurar LogtoConfig com a opção de desativar o armazenamento persistente de credenciais. Por padrão, as credenciais são armazenadas no Keychain, mas isso pode ser desativado definindo 'usingPersistStorage' como false.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/_init-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  // ...\n  usingPersistStorage: false\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organization Scopes in Next.js\nDESCRIPTION: This snippet demonstrates how to configure Logto authentication in a Next.js application, specifically adding the Organizations scope to the configuration. It imports the UserScope from the Logto Next.js package and sets up the logtoConfig object with the Organizations scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Documentation Components\nDESCRIPTION: Imports MDX fragments and code examples, then composes them into a documentation component for explaining access token fetching. Uses custom components to structure API documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: SMTP Template Properties Schema\nDESCRIPTION: Schema definition for email templates in the SMTP connector, including subject, content, usageType and contentType properties.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/email/smtp/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Template Properties | Type        | Enum values                                             |\n| ------------------- | ----------- | ------------------------------------------------------- |\n| subject             | string      | N/A                                                     |\n| content             | string      | N/A                                                     |\n| usageType           | enum string | 'Register' \\| 'SignIn' \\| 'ForgotPassword' \\| 'Generic' |\n| contentType         | enum string | 'text/plain' \\| 'text/html'                             |\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fragments in React (JavaScript)\nDESCRIPTION: This code snippet imports two modules: a reusable React component for fetching access tokens and a code sample demonstrating how to get an access token. It then composes these pieces by rendering the FetchAccessTokenForApiResources component, passing in the API name and embedding the sample code fragment as a prop. Dependencies include React, support for ECMAScript module imports, and proper resolution of the relevant Markdown and MDX fragments. Inputs are the prop values (including the code sample), and the component handles their display or usage. No business logic is executed directly in this file; it is for documentation or illustrative UI only.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Access Token Documentation Components\nDESCRIPTION: This code imports necessary documentation fragments and combines them into a complete guide for fetching access tokens. It uses MDX components to create reusable documentation with customizable parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with pnpm\nDESCRIPTION: This command installs the @logto/chrome-extension package using pnpm (Performant npm) package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Example URI for Logto Management API Base\nDESCRIPTION: This snippet shows the base URI format for the Logto Management API, which is pre-registered in the Logto service. All Management APIs under this URI are protected by Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://tenantId.logto.app/api\n```\n\n----------------------------------------\n\nTITLE: Injecting User Data into SvelteKit Layout\nDESCRIPTION: This TypeScript code snippet demonstrates how to inject the user object into the SvelteKit layout, making it available on all pages. It exports a load function that returns the user object from locals.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = async ({ locals }) => {\n  return { user: locals.user };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It's used to display API resource configuration examples in the Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resources Configuration Component\nDESCRIPTION: React/MDX component that imports code snippets and renders them using the ConfigApiResources component. The component accepts three props for different code configurations: basic resources, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Organization Documentation Components\nDESCRIPTION: Imports the necessary documentation components and code snippets for configuring organization tokens in Vue applications. This includes fragments for fetching organization tokens and Vue-specific code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page with Authentication State\nDESCRIPTION: Creates the main page component that handles authentication state and renders appropriate sign-in/sign-out buttons.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext, signIn, signOut } from '@logto/next/server-actions';\nimport SignIn from './sign-in';\nimport SignOut from './sign-out';\nimport { logtoConfig } from './logto';\n\nconst Home = () => {\n  const { isAuthenticated, claims } = await getLogtoContext(logtoConfig);\n\n  return (\n    <nav>\n      {isAuthenticated ? (\n        <p>\n          Hallo, {claims?.sub},\n          <SignOut\n            onSignOut={async () => {\n              'use server';\n\n              await signOut(logtoConfig);\n            }}\n          />\n        </p>\n      ) : (\n        <p>\n          <SignIn\n            onSignIn={async () => {\n              'use server';\n\n              await signIn(logtoConfig);\n            }}\n          />\n        </p>\n      )}\n    </nav>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Using Logto Authentication in Vue\nDESCRIPTION: This snippet demonstrates how to use the Logto authentication library in a Vue.js application. It imports necessary functions, checks authentication status, and retrieves an access token for a specific API.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type UserInfoResponse } from '@logto/vue';\n\nconst { isAuthenticated, getAccessToken } = useLogto();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const accessToken = await getAccessToken('https://shopping.your-app.com/api');\n    console.log(accessToken);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Nuxt.js Template\nDESCRIPTION: This snippet demonstrates how to access the additional claims (email and phone) in the Nuxt.js template after configuring the scopes. It displays the user's name, email, and phone number if available.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"user\">\n    <p>Name: {{ user.name }}</p>\n    <p>Email: {{ user.email }}</p>\n    <p>Telefon: {{ user.phone }}</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Components for API Resource Configuration\nDESCRIPTION: React/MDX code that imports configuration fragments and composes them into a ConfigApiResources component. The code demonstrates modular composition of API resource configurations with different scoping options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in TypeScript\nDESCRIPTION: Shows how to access additional user claims after configuring extended scopes in the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Now you can access additional claims `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Specifying Search Fields in Logto User Search\nDESCRIPTION: This example demonstrates how to limit the search to specific fields, such as 'name' or 'primaryEmail', using URLSearchParams in JavaScript.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', '%foo%'],\n  ['search.primaryEmail', '%@gmail.com'],\n]);\n```\n\n----------------------------------------\n\nTITLE: SQL Statement for Row-Level Security Policy in Supabase\nDESCRIPTION: SQL code for creating a Row-Level Security policy in Supabase. This policy restricts users to only access their own data by matching the authenticated user ID with the user_id field in the table.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nauth.user_id() = user_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Additional Scopes in Python\nDESCRIPTION: Shows how to initialize a Logto client with additional user information scopes like email and phone to request more user data during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# highlight-next-line\nfrom logto import UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configurations\n        # highlight-start\n        scopes = [\n            UserInfoScope.email,\n            UserInfoScope.phone,\n        ],\n        # highlight-end\n    ),\n    storage=SessionStorage(),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client Configuration in Swift\nDESCRIPTION: Creates a Logto client configuration with custom endpoint, app ID, scopes for shopping and store operations, and API resource endpoints. The configuration is then used to initialize a Logto client instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new LogtoClient instance with the Organizations user scope. It imports the UserScope from '@logto/next' and sets it in the client configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organisations],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair for Alipay Integration with OpenSSL\nDESCRIPTION: This snippet shows how to generate a private and public key pair using OpenSSL, which is required for the Alipay app integration. The private key is used for signing API requests while the public key is uploaded to the Alipay console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/alipay-web/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out private.pem 2048\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Database Structure in Markdown\nDESCRIPTION: This snippet describes the structure of the connector database, including properties like id, connectorId, metadata, syncProfile, config, and createdAt. It explains the purpose and format of each field in the database.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/connectors/connector-data-structure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Remote-Speicher des Connectors: _Connector DB_ \\{#connectors-remote-storage-_connector-db_\\}\n\n### id \\{#id-1\\}\n\n_id_, das als Primärschlüssel der Connector-DB fungiert, ist ein zufällig generierter string-typisierter Schlüssel, um den Connector in der DB zu identifizieren.\n\n### connectorId \\{#connectorid\\}\n\n_connectorId_ ist ein string-typisierter Schlüssel und die EINZIGE Verbindung, um _Connector DB_ und _ConnectorMetadata_ abzugleichen. Für jedes übereinstimmende Connector-DB-Daten- und Connector-Code-Modul-Paar entspricht _connectorId_ immer [metadata._id_](#id) des Code-Moduls.\n\n### metadata \\{#metadata\\}\n\n_metadata_ ist ein Teil von [ConnectorMetadata](#connectors-local-storage-connectormetadata), das konfigurierbare Attribute enthält, d.h. [_logo_](#logo), [_logoDark_](#logodark), [_target_](#target-identity-provider-name) und [_name_](#name).\n\n### syncProfile \\{#syncprofile\\}\n\n_syncProfile_ ist ein boolescher Wert, um das Aktualisierungsschema des Benutzerprofils zu bestimmen, standardmäßig auf FALSE.\n\nWenn _syncProfile_ FALSE ist, werden die Basisinformationen des Logto-Benutzers (einschließlich Name und Avatar) nur aktualisiert, wenn sich der Benutzer zum ersten Mal über diesen Connector bei Logto anmeldet. Andernfalls wird jedes Mal, wenn sich Benutzer über den Connector bei Logto anmelden, das Logto-Kontoprofil aktualisiert.\n\n### config \\{#config\\}\n\n_config_ könnte ein beliebiges nicht-leeres Objekt sein.\n\nEs ist der Ort, an dem ein Connector seine Konfiguration speichert. Jeder Connector hat unterschiedliche Eigenschaften in _config_ und es ist verpflichtet, gültig zu sein (Connectors haben unterschiedliche Standards für \"gültig\".) bevor es in der DB gespeichert wird. NUR diejenigen _config_, die die Gültigkeitsprüfung bestehen, können in die DB aktualisiert werden, oder es wird ein Fehler ausgelöst.\n\nEntwickler sind verpflichtet, einen _config_-Schutz zu implementieren, wenn sie ihre eigenen Connectors entwickeln, siehe [Entwickle deinen Connector](/logto-oss/develop-your-connector) für weitere Details.\n\nMöchtest du einen Blick auf _config_-Beispiele werfen? Gehe zu [Connectors](/connectors) oder zur Einstellungsseite jedes Connectors.\n\n:::note\nIn der aktuellen Logto-Version kann zur gleichen Zeit nur ein _E-Mail/SMS_-Connector existieren, alle anderen Connectors desselben Typs werden automatisch gelöscht.\n\nDie Regel, einzigartiger funktionierender E-Mail- oder SMS-Connector, gilt nicht für _soziale Connectors_.<br/>\nMit anderen Worten, du kannst mehrere _soziale Connectors_ hinzufügen.\n:::\n\n### createdAt \\{#createdat\\}\n\n_createdAt_ ist ein automatisch generierter Zeitstempel-String, um die Zeit zu verfolgen, wann ein Connector in der DB erstellt wurde.\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code snippet initializes NextAuth with a Logto provider. It sets up custom authorization parameters, including a specific scope and resource URL. The configuration exports handlers, signIn, signOut, and auth functions for use in the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          scope: 'openid offline_access profile email',\n          // highlight-next-line\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow Sequence Diagram using Mermaid\nDESCRIPTION: Illustrates the OAuth 2.0 authentication flow between Client, Logto authentication server, and API resource server using a sequence diagram. Shows the three main steps: authentication request, token request, and API request with token validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    Note over Client,API: 1. Authentication Request\n    Client->>Logto: GET /oidc/auth\n    Note right of Client: with resource=https://resource-server.com/api<br/>and optional scope=read write\n    Logto-->>Client: Returns authorization_code\n\n    Note over Client,API: 2. Token Request\n    Client->>Logto: POST /oidc/token\n    Note right of Client: with authorization_code<br/>resource=https://resource-server.com/api<br/>and optional scope=read write\n    Logto-->>Client: Returns JWT access token\n    Note left of Logto: Token contains:<br/>- Audience restricted to resource<br/>- Granted scopes (if any)\n\n    Note over Client,API: 3. API Request\n    Client->>API: Request with Bearer token\n    Note over API: Validate JWT token:\n    Note over API: - Check signature<br/>- Verify issuer<br/>- Check audience<br/>- Verify expiration<br/>- Check scopes (if RBAC enabled)\n    alt Token Valid\n        API-->>Client: Protected Resource\n    else Token Invalid\n        API-->>Client: 401 Unauthorized\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining Global Authentication Variables in Dart\nDESCRIPTION: This snippet defines global variables for the current user and a getter for the logged-in state. These are used to manage the authentication state across the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFlutterFlowAuthAuthUser? currentUser;\nbool get loggedIn => currentUser?.loggedIn ?? false;\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with Logto Middleware in TypeScript\nDESCRIPTION: This snippet demonstrates configuring an Express.js route using the Logto middleware to obtain an access token for a specific API resource. It requires the Logto SDK, a valid configuration object (config), and Express.js. Parameters such as 'getAccessToken' (set to true) and 'resource' specify the authorization target. The endpoint '/fetch-access-token' returns the authenticated user's information as JSON, with their access token attached. Inputs are incoming HTTP GET requests, and outputs are JSON payloads containing user and token information. The snippet assumes prior setup of Express.js app and Logto config.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-access-token',\n  withLogto({\n    ...config,\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }),\n  (request, response) => {\n    // highlight-next-line\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Components in React\nDESCRIPTION: This code snippet imports necessary components and renders the FetchAccessTokenForApiResources component with specific props. It sets up the structure for fetching access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Middleware in SvelteKit\nDESCRIPTION: This snippet shows how to configure the handleLogto middleware in a SvelteKit hooks.server.ts file. It defines specific scopes ('read', 'write') and resource endpoints for API access control while indicating other configuration options are available.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in React Native with Logto\nDESCRIPTION: Demonstrates how to use the useLogto hook to get user information from ID token claims in a React Native application. The code shows how to retrieve and display user data when authenticated and provide sign-in/sign-out functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { getIdTokenClaims, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // highlight-start\n      getIdTokenClaims().then((claims) => {\n        setUser(claims);\n      });\n      // highlight-end\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources for Logto Browser Client in JavaScript\nDESCRIPTION: This JavaScript snippet shows the initialization of `LogtoClient` from the `@logto/browser` package (or a package specified by `props.package`). It highlights how to configure the `scopes` parameter with an array of requested permission scopes (e.g., 'read', 'write') and the `resources` parameter with an array of API resource identifiers for which access tokens should be requested (e.g., 'https://shopping.your-app.com/api'). This setup is crucial for requesting appropriate access tokens for different APIs during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-shared-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Status UI with ERB in Rails\nDESCRIPTION: Implements a conditional UI element in an ERB template that displays either a sign-in or sign-out link based on the user's authentication status. It uses the Logto client's is_authenticated? method to determine the current state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <a href=\"<%= sign_out_path %>\">Sign out</a>\n<% else %>\n  <a href=\"<%= sign_in_path %>\">Sign in</a>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Additional Scopes in SvelteKit\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the Logto handler with additional scopes. It uses the handleLogto function and sets the fetchUserInfo option to true to include user info fetched from the network.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    /* Logto config */\n  },\n  {\n    /* Cookie config */\n  },\n  {\n    fetchUserInfo: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info for Custom Claims\nDESCRIPTION: This code shows how to fetch user info to access custom claims that are not included in the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet userInfo = try? client.fetchUserInfo()\n// Agora você pode acessar a reivindicação `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Alipay Plugin in iOS\nDESCRIPTION: Swift code to initialize LogtoClient with the Alipay social plugin, requiring a callback scheme for app navigation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/alipay-native/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet logtoClient = LogtoClient(\n  useConfig: config,\n  socialPlugins: [LogtoSocialPluginAlipay(callbackScheme: \"your-scheme\")]\n)\n```\n\n----------------------------------------\n\nTITLE: Requesting Data with Logto Access Token in React SPA\nDESCRIPTION: This snippet demonstrates how to use the Logto React SDK to obtain an access token and make authenticated requests to a backend API. It shows how to fetch posts data while properly including the access token in the authorization header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\nimport { useState, useEffect } from 'react';\nimport PostList from './PostList';\n\nconst endpoint = '<https://www.mysite.com/api/posts>';\nconst resource = '<https://www.mysite.com/api>';\n\nfunction PostPage() {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [posts, setPosts] = useState();\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const response = await fetch(endpoint, {\n        headers: {\n          Authorization: `Bearer ${await getAccessToken(resource)}`,\n        },\n      });\n      setPosts(response.json());\n    };\n\n    if (isAuthenticated) {\n      void fetchPosts();\n    }\n  }, [isAuthenticated, getAccessToken]);\n\n  return <PostList posts={posts} />;\n}\n\nexport default PostPage;\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes with Logto PHP SDK\nDESCRIPTION: This snippet shows how to request additional scopes by configuring the scopes option when initializing the Logto client. This allows access to additional user claims like email and phone.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    scopes: [\"email\", \"phone\"], // Update per your needs\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Extracting Bearer Token from Request Header in Python\nDESCRIPTION: This function extracts the bearer token from the Authorization header of an HTTP request. It includes error handling for missing or invalid headers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_auth_token():\n  auth = request.headers.get(\"Authorization\", None)\n\n  if not auth:\n    raise Error({ code: 'auth.authorization_header_missing', status: 401 })\n\n  contents = auth.split()\n\n  if len(contents) < 2:\n    raise Error({code: 'auth.authorization_token_invalid_format', status: 401})\n\n  elif contents[0] != 'Bearer':\n    raise Error({code: 'auth.authorization_token_type_not_supported', status: 401})\n\n  return contents[1]\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Middleware in TypeScript\nDESCRIPTION: This snippet defines the export of the 'handle' constant by calling 'handleLogto' with specific configuration options, including authorization scopes and API resources, to enforce authentication on protected routes. It requires the 'handleLogto' function from the Logto authentication framework and is intended to be used as middleware in a TypeScript server environment. The primary parameters are 'scopes', defining access permissions (e.g., 'read', 'write'), and 'resources', listing the API URLs that require protection; usage is constrained to environments properly integrated with Logto and supporting the relevant middleware architecture.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Express Authentication Middleware for JWT Verification\nDESCRIPTION: Middleware for verifying Logto access tokens in an Express backend. It extracts the bearer token from headers, verifies it using JOSE, and attaches the user ID to the request context for subsequent handlers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// auth-middleware.ts\nimport { createRemoteJWKSet, jwtVerify } from 'jose';\n\n//...\n\nexport const verifyAuthFromRequest = async (ctx, next) => {\n  // Extract the token\n  const token = extractBearerTokenFromHeaders(ctx.request.headers);\n\n  const { payload } = await jwtVerify(\n    token, // The raw Bearer Token extracted from the request header\n    createRemoteJWKSet(new URL('https://<your-logto-domain>/oidc/jwks')), // generate a jwks using jwks_uri inquired from Logto server\n    {\n      // expected issuer of the token, should be issued by the Logto server\n      issuer: 'https://<your-logto-domain>/oidc',\n      // expected audience token, should be the resource indicator of the current API\n      audience: '<your request listener resource indicator>',\n    }\n  );\n\n  // if you are using RBAC\n  assert(payload.scope.includes('some_scope'));\n\n  // custom payload logic\n  ctx.auth = {\n    userId: payload.sub,\n  };\n\n  return next();\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Resource Access Token using Logto Client in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to asynchronously request an access token for a specific resource URI ('https://shopping.your-app.com/api') using an instance of `logtoClient`. It utilizes a callback lambda function that receives either a `logtoException` in case of failure or the `accessToken` upon success. The example prints the exception or the token to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin title=\"LogtoViewModel.kt\"\nlogtoClient.getAccessToken(\"https://shopping.your-app.com/api\") { logtoException, accessToken ->\n    logtoException?.let { println(it) }\n    accessToken?.let { println(it) }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Express with Logto\nDESCRIPTION: This snippet shows how to display user information using the Logto Express middleware. It uses the withLogto function to protect the route and access the user claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  response.json(request.user.claims);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling URL Opening in Swift for WeChat Authentication\nDESCRIPTION: Swift code examples for handling URL opening in both SwiftUI and UIKit (AppDelegate) to properly manage WeChat authentication callbacks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftUI\nYourRootView()\n  .onOpenURL { url in\n      LogtoClient.handle(url: url)\n  }\n\n// or AppDelegate\nfunc application(_ app: UIApplication, open url: URL, options: /*...*/) -> Bool {\n  LogtoClient.handle(url: url)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out with useLogto Hook\nDESCRIPTION: Uses the useLogto hook to implement authentication functionality in a React Native component. Displays sign-in or sign-out buttons based on the authentication state and handles the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button } from 'react-native';\n\nconst Content = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <Button title=\"Sign out\" onPress={async () => signOut()} />\n      ) : (\n        // リダイレクト URI を自分のものに置き換えてください\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM Installation Component for Logto Next.js\nDESCRIPTION: Imports and renders a reusable NPM installation component passing the @logto/next package name as a prop. The component likely displays standardized package installation instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/next\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Function to Retrieve User ID from JWT Claims\nDESCRIPTION: SQL function that retrieves the user ID from JWT claims in Supabase. The function extracts the 'userId' field from the JWT payload that was attached to the request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function auth.user_id() returns text as $$\n  select nullif(current_setting('request.jwt.claims', true)::json->>'userId', '')::text;\n$$ language sql stable;\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in Vue.js\nDESCRIPTION: This snippet demonstrates how to use the Logto Vue package to handle authentication in a Vue.js component. It checks if the user is authenticated and retrieves an access token for a specific API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type UserInfoResponse } from '@logto/vue';\n\nconst { isAuthenticated, getAccessToken } = useLogto();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const accessToken = await getAccessToken('https://shopping.your-app.com/api');\n    console.log(accessToken);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Création de WXEntryActivity pour WeChat en Kotlin\nDESCRIPTION: Implémentation de WXEntryActivity en Kotlin nécessaire pour recevoir les résultats de l'authentification WeChat dans une application Android.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// WXEntryActivity.kt\npackage com.sample.app.wxapi\n\nimport io.logto.sdk.android.auth.social.wechat.WechatSocialResultActivity\n\nclass WXEntryActivity: WechatSocialResultActivity()\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Android Client\nDESCRIPTION: This snippet demonstrates how to request additional scopes when initializing the Logto client in an Android application. It shows how to add email and phone scopes to the LogtoConfig object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val logtoConfig = LogtoConfig(\n    // ...otras configuraciones\n    // highlight-start\n    scopes = listOf(\"email\", \"phone\"), // o `listOf(UserScope.EMAIL, UserScope.PHONE)`\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Tokens in Swift\nDESCRIPTION: Swift code example for fetching an organization token using the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nlet token = try await client.getOrganizationToken(forId: \"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express Organization Scopes in TypeScript\nDESCRIPTION: Configuration example showing how to import and set up Logto Express with organization scopes. Uses the UserScope enum from @logto/express package to specify organization access permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Organizations Scope in Dart\nDESCRIPTION: This snippet creates a LogtoConfig instance with the required parameters for Logto authentication. It includes the Logto endpoint, app ID, and specifically adds the organizations scope to the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_organization-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [LogtoUserScopes.organizations.value]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Vue SDK with yarn - Bash\nDESCRIPTION: This command installs the @logto/vue package in a JavaScript project using the yarn package manager. Yarn should be installed prior to usage. Running the command from the project directory adds @logto/vue as a dependency and updates yarn.lock and package.json.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto PHP Client with Custom Scopes and Resources\nDESCRIPTION: Configures a Logto PHP client by setting up specific access scopes for shopping and store operations, along with their corresponding API resource endpoints. The configuration enables read and write permissions for both shopping and store functionalities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"], // Add scopes\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Add API resources\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Provider in React Native\nDESCRIPTION: This code shows how to set up the LogtoProvider component with necessary configuration including app ID, endpoint, and user scopes. The highlighted section emphasizes the different user scopes being requested, such as Email, Phone, CustomData, Identities, and Organizations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [\n    // highlight-start\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n    // highlight-end\n  ],\n};\n\nconst App = () => <LogtoProvider config={config}>{/* Your app content */}</LogtoProvider>;\n```\n\n----------------------------------------\n\nTITLE: Basic Fuzzy Search Parameters\nDESCRIPTION: JavaScript example showing how to construct URLSearchParams for basic fuzzy search\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/advanced-user-search.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([['search', '%foo%']]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto API Resources in Nuxt.js (TypeScript)\nDESCRIPTION: This snippet shows how to define the API resources that the Nuxt.js application requires access tokens for when using the Logto module. The `resources` property within the `logto` configuration object accepts an array of resource indicator URIs. This configuration ensures that the requested OAuth2 access token includes the necessary audiences for these APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"nuxt.config.ts\"\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API 리소스를 추가하세요\n    // ...other configs\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring API Resources Documentation in Markdown\nDESCRIPTION: This snippet outlines the structure of the API resources documentation, including sections for configuring the Logto client, fetching access tokens, and fetching organization tokens for users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/_index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ApiResourcesDescription />\n\n### Configure Logto client \\{#configure-logto-client}\n\n<ConfigApiResources />\n\n### Fetch access token for the API resource \\{#fetch-access-token-for-the-api-resource}\n\n<FetchAccessTokenForApiResources />\n\n### Fetch organization token for user \\{#fetch-organization-token-for-user}\n\n<FetchOrganizationTokenForUser />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto PHP Client\nDESCRIPTION: Gets an access token from the Logto client for a specific API endpoint. This code uses the client instance to request an access token for the shopping API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$accessToken = $client->getAccessToken(\"https://shopping.your-app.com/api\");\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Logto Authentication in Dart\nDESCRIPTION: Imports required packages for implementing custom authentication with Logto SDK in a Flutter application, including dart:async, Flutter's foundation package, HTTP client, and Logto SDK components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:logto_dart_sdk/logto_client.dart';\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nimport 'custom_auth_user_provider.dart';\n\nexport 'custom_auth_manager.dart';\n```\n\n----------------------------------------\n\nTITLE: Importing API Resources Configuration Components in React/JSX\nDESCRIPTION: This code imports various configuration code fragments from Markdown files and passes them as props to a ConfigApiResources component. The imports demonstrate how to organize and modularize API resource configuration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Script References in Blazor WebAssembly\nDESCRIPTION: Adds the Blorc.Core injector.js script reference to the HTML head section, which is required for OpenID Connect authentication in Blazor WebAssembly applications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- ... -->\n  <script src=\"_content/Blorc.Core/injector.js\"></script>\n  <!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Attaching Access Token to Request Headers\nDESCRIPTION: Instructions for adding the access token to the Authorization header in Bearer format when making API requests. The process may vary depending on the framework or requester being used.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nトークンを HTTP ヘッダーの `Authorization` フィールドに Bearer 形式 (`Bearer YOUR_TOKEN`) で入れれば準備完了です。\n\n:::note\nBearer トークンの統合フローは、使用しているフレームワークやリクエスターによって異なる場合があります。リクエスト `Authorization` ヘッダーを適用する独自の方法を選択してください。\n:::\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenID Connect Strategy with Passport in TypeScript\nDESCRIPTION: This snippet defines a TypeScript function that configures Passport with an OpenID Connect strategy. It passes clientID, clientSecret, and a callbackURL as mandatory options, and explicitly sets the scope to request 'openid', 'offline_access', 'profile', and 'email' claims. Dependencies include Passport.js, passport-openidconnect, and valid application credentials (appId and appSecret). Inputs are the Passport instance and OpenID Connect strategy options; expected output is an authenticated Passport setup for handling OpenID Connect flows. This example assumes other properties and handlers are set elsewhere, and is intended for environments using Node.js with TypeScript and Passport middleware for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function initPassport() {\n  passport.use(\n    new OpenIDConnectStrategy(\n      {\n        // ... other options\n        clientID: appId,\n        clientSecret: appSecret,\n        callbackURL: '/callback',\n        // highlight-start\n        scope: ['openid', 'offline_access', 'profile', 'email'],\n        // highlight-end\n      }\n      // ... other options\n    )\n  );\n  // ... other options\n}\n\n```\n\n----------------------------------------\n\nTITLE: 获取用户自定义数据 (Ruby ERB)\nDESCRIPTION: 使用`fetch_user_info`方法获取用户的自定义数据。这需要额外的网络请求来获取存储在用户信息中的custom_data字段。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>自訂資料: <%= @client.fetch_user_info[\"custom_data\"] %></p>\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with PHP Client\nDESCRIPTION: This PHP snippet demonstrates how to retrieve an access token for a specific API resource ('https://shopping.your-app.com/api') using a client object (`$client`). It calls the `getAccessToken` method, passing the resource identifier (audience) as an argument. Assumes a pre-configured `$client` object is available.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php title=\"index.php\"\n$accessToken = $client->getAccessToken(\"https://shopping.your-app.com/api\");\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Methods in Rails Controller\nDESCRIPTION: Controller methods for initiating sign-in and sign-out operations with Logto, including proper redirect handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def sign_in\n    @client.sign_in(redirect_uri: request.base_url + \"/callback\")\n  end\n\n  def sign_out\n    @client.sign_out(post_logout_redirect_uri: request.base_url)\n  end\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve user information using the Logto client's getIdTokenClaims() method and display it in an HTML table. It creates a dynamic table that shows all claims from the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.getIdTokenClaims();\n\n// Générer un tableau d'affichage pour les revendications du jeton d'identifiant\nconst table = document.createElement('table');\nconst thead = document.createElement('thead');\nconst tr = document.createElement('tr');\nconst thName = document.createElement('th');\nconst thValue = document.createElement('th');\nthName.innerHTML = 'Nom';\nthValue.innerHTML = 'Valeur';\ntr.append(thName, thValue);\nthead.append(tr);\ntable.append(thead);\n\nconst tbody = document.createElement('tbody');\n\nfor (const [key, value] of Object.entries(userInfo)) {\n  const tr = document.createElement('tr');\n  const tdName = document.createElement('td');\n  const tdValue = document.createElement('td');\n  tdName.innerHTML = key;\n  tdValue.innerHTML = typeof value === 'string' ? value : JSON.stringify(value);\n  tr.append(tdName, tdValue);\n  tbody.append(tr);\n}\n\ntable.append(tbody);\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript code snippet exports a constant named `connector` containing the string 'Microsoft Entra ID OIDC enterprise SSO'. This constant is likely used within the MDX components or related scripts to reference the specific SSO connector being configured in the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This code snippet imports various components and renders a ConfigApiResources component, passing in code examples as props. It demonstrates how to structure and compose React components for displaying API resource configuration examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Composing Access Token Fetch Example - React JSX - JavaScript\nDESCRIPTION: This React JSX snippet uses the previously imported FetchAccessTokenForApiResources component, passing getAccessTokenApi and getAccessTokenCode as props. This composition pattern allows for customized code and API injection into the parent component. The getAccessTokenApi prop is set to a string denomination, while getAccessTokenCode passes the imported code example component directly, demonstrating dynamic content rendering in React. The snippet presumes React 16.8+ and appropriate MDX transpilation in the build process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with Logto Middleware in TypeScript\nDESCRIPTION: This code snippet sets up an Express route handler in TypeScript that uses the Logto middleware configured with getAccessToken set to true for a resource-specific API. When the '/fetch-access-token' endpoint is hit, the request is passed through the middleware, which attaches the accessToken to the request.user object. The handler then logs the accessToken to the console and returns the entire user object as a JSON response. Dependencies include the Express framework and the Logto authentication middleware. The resource parameter specifies the intended audience for the issued access token. The output is a JSON response containing user authentication information, including the accessToken if available.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-access-token',\n  withLogto({\n    ...config,\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }),\n  (request, response) => {\n    // highlight-next-line\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Client-side Component for Triggering Organization Token Generation\nDESCRIPTION: This client-side component provides a button that, when clicked, triggers the server action to generate an organization token and logs it to the console. It demonstrates how to interact with server actions from the client side in a Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetOrganizationToken: () => Promise<string>;\n};\n\nconst GetOrganizationToken = ({ onGetOrganizationToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetOrganizationToken();\n        console.log(token);\n      }}\n    >\n      Obtener token de organización (ver registro de consola)\n    </button>\n  );\n};\n\nexport default GetOrganizationToken;\n```\n\n----------------------------------------\n\nTITLE: Assigning Organization Roles to Bot Applications in Bash\nDESCRIPTION: This curl command shows how to assign organization roles to bot applications. It requires an access token with appropriate permissions and accepts arrays of application IDs and organization role IDs in the request body.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/organization-experience/organization-management.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X POST https://[tenant_id].logto.app/api/organizations/{id}/applications/roles \\\n -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\"applicationIds\":[\"botApp1\"],\"organizationRoleIds\":[\"botRoleId\"]}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Vue Plugin with Multiple Resources\nDESCRIPTION: Demonstrates how to initialize the Logto Vue plugin with multiple API resource endpoints. The configuration shows setting up protected API resources for a shopping application across different domains.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components\nDESCRIPTION: Imports MDX fragments and code components, then renders them in a ConfigApiResources component with relevant code snippet props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 Provider for Logto in Next.js\nDESCRIPTION: This snippet shows how to set up the Auth.js v5 provider for Logto in a Next.js application. It includes the configuration for the OIDC provider and profile mapping.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oidc',\n      // Vous pouvez obtenir la valeur de l'émetteur depuis la page Détails de l'application Logto,\n      // dans le champ \"Endpoint de l'émetteur\"\n      issuer: 'https://xxxx.logto.app/oidc',\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      authorization: {\n        params: { scope: 'openid offline_access profile email' },\n      },\n      profile(profile) {\n        // Vous pouvez personnaliser le mappage du profil utilisateur ici\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching API Resource Access Token in C#\nDESCRIPTION: Shows how to retrieve a JWT access token specifically for API resource access using LogtoParameters.Tokens.AccessTokenForResource. This token includes the API resource as the audience.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_fetch-tokens.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar accessToken = await HttpContext.GetTokenAsync(LogtoParameters.Tokens.AccessTokenForResource);\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Next.js Component\nDESCRIPTION: This snippet shows how to access additional claims, specifically the email claim, in a Next.js page component after configuring additional scopes in the Logto client initialization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function Home() {\n  const { claims: { email } = {}, } = await getLogtoContext(logtoConfig);\n\n  return (\n    <div>\n      {email && <p>Email: {email}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Status Check with Logto SDK in PHP\nDESCRIPTION: This code snippet demonstrates how to create a route handler that checks authentication status using Logto SDK's isAuthenticated() method. It conditionally displays either a sign-in or sign-out link based on the user's authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_handle-authentication-status.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function () {\n  if ($client->isAuthenticated() === false) {\n    return \"Not authenticated <a href='/sign-in'>Sign in</a>\";\n  }\n\n  return \"<a href='/sign-out'>Sign out</a>\";\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for ApplicationInfo Object in Email Templates\nDESCRIPTION: Defines the structure of the ApplicationInfo object available in various email templates. This type contains application identification and branding information that can be used in email templates.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/email-connectors/email-templates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ApplicationInfo = {\n  id: string;\n  name: string;\n  displayName?: string;\n  branding?: {\n    logoUrl?: string;\n    darkLogoUrl?: string;\n    favicon?: string;\n    darkFavicon?: string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Documentation in JSX\nDESCRIPTION: Imports necessary MDX fragments and code snippets for displaying organization token documentation. The imports include a main fragment for fetching organization tokens and code examples for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Go Client\nDESCRIPTION: Example of requesting additional claims by configuring scopes in the LogtoConfig object. This allows access to more user information such as email and phone number.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Enviando invitación de organización con Logto Management API en JSON\nDESCRIPTION: Ejemplo de carga útil JSON para enviar una invitación de organización utilizando la API de Logto Management. Incluye un enlace personalizado para la invitación.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/organization-experience/invite-organization-members.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"link\": \"https://your-app.com/invitation/accept/{your-invitation-id}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with API Resources in Dart\nDESCRIPTION: This Dart snippet initializes a `LogtoConfig` object. It requires the Logto endpoint URL and the application's App ID. The `resources` list specifies the API resource indicators for which the application needs access tokens. These identifiers will be included in the audience (`aud`) claim of the requested access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // 添加你的 API 资源\n  // highlight-start\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication State in Next.js Home Page\nDESCRIPTION: Creates a home page that displays different content based on authentication state. Uses server actions to handle sign-in and sign-out operations and displays user information when authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext, signIn, signOut } from '@logto/next/server-actions';\nimport SignIn from './sign-in';\nimport SignOut from './sign-out';\nimport { logtoConfig } from './logto';\n\nconst Home = () => {\n  const { isAuthenticated, claims } = await getLogtoContext(logtoConfig);\n\n  return (\n    <nav>\n      {isAuthenticated ? (\n        <p>\n          こんにちは, {claims?.sub},\n          <SignOut\n            onSignOut={async () => {\n              'use server';\n\n              await signOut(logtoConfig);\n            }}\n          />\n        </p>\n      ) : (\n        <p>\n          <SignIn\n            onSignIn={async () => {\n              'use server';\n\n              await signIn(logtoConfig);\n            }}\n          />\n        </p>\n      )}\n    </nav>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Updating SDK Endpoint Configuration for Custom Domain in TypeScript\nDESCRIPTION: This code snippet shows how to modify the Logto client initialization to use a custom domain endpoint instead of the default one. The endpoint parameter should be updated to point to your personalized authentication domain.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-cloud/custom-domain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new LogtoClient({\n  ...,// otras opciones\n  endpoint: 'https://auth.example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Provider with Organization Scope - React\nDESCRIPTION: Set up Logto Provider in a React application with organization scopes enabled.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoProvider, UserScope } from '@logto/react';\n\nconst App = () => (\n  <LogtoProvider\n    config={{\n      // ...\n      scopes: [UserScope.Organizations],\n    }}\n  >\n    {/* ... */}\n  </LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Handler with Organization Scope in SvelteKit (TypeScript)\nDESCRIPTION: This code snippet sets up the Logto authentication handler for a SvelteKit application. It imports necessary functions from @logto/sveltekit and configures the handle function with organization scopes enabled.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto, UserScope } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: [UserScope.Organizations],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Pro-rated Enterprise SSO Billing Example in Math Notation\nDESCRIPTION: Mathematical example showing how pro-rated billing works when adding and removing an Enterprise SSO feature for a partial billing period.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-cloud/billing-and-pricing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: math\nCODE:\n```\n\\$16 + \\$48 \\times (1 \\times 15 / 30) - \\$48 \\times (1 \\times 5 / 30) = \\$32\n```\n\n----------------------------------------\n\nTITLE: Initializing CustomAuthManager with Logto Client in Dart\nDESCRIPTION: This snippet defines the CustomAuthManager class, which initializes a LogtoClient with a given configuration. It includes methods for updating the current user and initializing the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomAuthManager {\n  late LogtoClient logtoClient;\n\n  final logtoConfig = const LogtoConfig(\n      appId: '<YOUR-APP-ID>',\n      endpoint: '<YOUR-LOGTO-ENDPOINT>');\n\n\n  // ...\n\n  FlutterFlowAuthAuthUser? _updateCurrentUser(\n      {bool loggedIn = false, String? uid, OpenIdClaims? idToken}) {\n    // Update the current user stream.\n    final updatedUser = FlutterFlowAuthAuthUser(\n      loggedIn: loggedIn,\n      uid: uid,\n      idToken: idToken,\n    );\n\n    flutterFlowAuthAuthUserSubject.add(updatedUser);\n\n    return updatedUser;\n  }\n\n  Future initialize() async {\n    logtoClient = LogtoClient(config: logtoConfig, httpClient: http.Client());\n\n    late OpenIdClaims? idToken;\n\n    try {\n      idToken = await logtoClient.idTokenClaims;\n    } catch (e) {\n      if (kDebugMode) {\n        print('Error initializing auth: $e');\n      }\n    }\n\n    _updateCurrentUser(\n        loggedIn: idToken != null, uid: idToken?.subject, idToken: idToken);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Documentation Fragments in MDX\nDESCRIPTION: This group of snippets shows how the previously imported documentation fragments/components and inline comments are assembled within an MDX document. Each fragment is included via JSX syntax, sometimes with props, to render individual sections such as introduction, application creation, adding connectors, configuration, enabling, validation, and further readings. The use of curly braces (\\{\\}) ensures correct MDX/JSX expression evaluation, which is necessary to insert dynamic content and variables like 'connector'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-python-aws-ses.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n{/*\\n  We have to divide templates into sections because imported mdx will not show in the TOC.\\n  There's no way to customize TOC either. :-)\\n\\n  @see https://github.com/facebook/docusaurus/issues/3915\\n*/}\\n\\n<Intro connector={connector} sdk=\"Python\" link=\"https://www.python.org\" />\\n\\n## Create an application in Logto \\{#create-an-application-in-logto}\\n\\n<CreateApplication type=\"Traditional web\" framework=\"Flask\" />\\n\\n## Integrate Flask with Logto \\{#integrate-with-logto}\\n\\n<FrameworkGuide />\\n\\n## Add AWS SES connector \\{#add-connector-connector}\\n\\n<AddPasswordlessConnector\\n  connector={connector}\\n  connectorType=\"Email\"\\n  passwordlessSignUpIdentifier=\"Email address\"\\n/>\\n\\n## Set up AWS SES email connector \\{#set-up-connectorconfigname}\\n\\n<ConnectorGuide />\\n\\n### Save your configuration \\{#save-your-configuration}\\n\\n<SaveYourConfiguration connector={connector} />\\n\\n## Enable AWS SES connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\\n\\n<EnablePasswordlessConnector\\n  connectorType=\"Email\"\\n  passwordlessSignUpIdentifier=\"Email address\"\\n/>\\n\\n## Testing and Validation \\{#testing-and-validation}\\n\\n<TestingAndValidation connector={connector} sdk=\"Python\" />\\n\\n## Further readings \\{#further-readings}\\n\\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Organization Token Components\nDESCRIPTION: Imports the necessary components and code snippets for organization token documentation and renders them using the FetchOrganizationTokenForUser component with specific props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Logto OIDC migration\nDESCRIPTION: This code snippet shows the required environment variables that need to be set before running the migration command. It includes OIDC private keys, cookie keys, and the database URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/using-cli/migrate-from-env.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOIDC_PRIVATE_KEYS=some_secret_key # O OIDC_PRIVATE_KEY_PATHS\nOIDC_COOKIE_KEYS=key1,key2\nDB_URL=postgresql://localhost:5432/logto\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components\nDESCRIPTION: JSX component setup that imports configuration fragments and code examples for API resources implementation. The component combines multiple code snippets showing different aspects of API resource configuration including basic resources, scoped resources, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Fetching Components in React\nDESCRIPTION: This snippet imports and uses React components to fetch an access token for API resources. It demonstrates how to use the FetchAccessTokenForApiResources component with custom props and a code snippet.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Registering Authentication Services in Blazor WASM Program.cs\nDESCRIPTION: Configures the required services for OpenID Connect authentication in a Blazor WebAssembly application. This includes adding Blorc core services, authorization, and setting up the document injection process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blorc.OpenIdConnect;\nusing Blorc.Services;\n\nbuilder.Services.AddBlorcCore();\nbuilder.Services.AddAuthorizationCore();\nbuilder.Services.AddBlorcOpenIdConnect(\n    options =>\n    {\n        builder.Configuration.Bind(\"IdentityServer\", options);\n    });\n\nvar webAssemblyHost = builder.Build();\n\nawait webAssemblyHost\n    .ConfigureDocumentAsync(async documentService =>\n    {\n        await documentService.InjectBlorcCoreJsAsync();\n        await documentService.InjectOpenIdConnectAsync();\n    });\n\nawait webAssemblyHost.RunAsync();\n```\n\n----------------------------------------\n\nTITLE: Basic Billing Structure Formula in Math Notation\nDESCRIPTION: Mathematical representation of Logto's basic billing structure, showing how the next bill is calculated by combining the base price with unbilled usage and next cycle charges.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-cloud/billing-and-pricing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\begin{align*}\n\\text{Your next bill} &= \\$16 \\text{(base price)} \\\\\n&+ \\text{add-on cost (unbilled usage)} \\\\\n&+ \\text{add-on cost (next cycle charge)}\n\\end{align*}\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Icons for User Management Documentation\nDESCRIPTION: This code snippet imports SVG icons as React components for use in the user management documentation. The icons represent different aspects of user management such as database, settings, security, and search.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DatabaseIcon from '@site/src/assets/database.svg';\nimport GearIcon from '@site/src/assets/gear.svg';\nimport KeyIcon from '@site/src/assets/key.svg';\nimport SearchIcon from '@site/src/assets/search.svg';\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Logto API Resources Configuration Components\nDESCRIPTION: This code imports fragment components and configuration code snippets to compose a ConfigApiResources component. The component displays various API resource configuration examples including basic resources, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: SAML Enterprise SSO Documentation Structure\nDESCRIPTION: The document structure showing the organization of SAML SSO implementation guide with React, including imports of various documentation fragments and configuration of connector settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-react-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: how-to-build-saml-enterprise-sso-sign-in-with-react-and-logto\ntags: [SSO providers, saml-enterprise-sso, react, js, SAML authentication, enterprise login, SSO login]\ntitle: How to build SAML enterprise SSO with React\nsdk: React\nconnector: SAML enterprise SSO\n---\n\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Fetching Organization Token in React\nDESCRIPTION: This snippet imports necessary components and code fragments for fetching organization tokens. It includes a main component and two code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Route with Logto Middleware in TypeScript\nDESCRIPTION: Sets up an Express route handler that uses Logto middleware to fetch access tokens. The configuration enables token retrieval and specifies a resource endpoint. The handler logs the access token and returns the user object in the response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-access-token',\n  withLogto({\n    ...config,\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }),\n  (request, response) => {\n    // highlight-next-line\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token Using JavaScript Fetch API\nDESCRIPTION: This snippet shows how to fetch an organization token using the JavaScript Fetch API, which can be used as an example for other languages without specific SDK support.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Usar JavaScript como ejemplo\n\nconst params = new URLSearchParams();\n\nparams.append('grant_type', 'refresh_token');\nparams.append('client_id', 'YOUR_CLIENT_ID');\nparams.append('refresh_token', 'REFRESH_TOKEN');\nparams.append('organization_id', 'org_123');\n\nconst response = await fetch('https://YOUR_LOGTO_ENDPOINT/oidc/token', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  body: params,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Component with Auth.js\nDESCRIPTION: Creates a sign-in component that uses Auth.js's signIn function with the Logto provider in a server action.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from '@/auth';\n\nexport default function SignIn() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signIn('logto');\n      }}\n    >\n      <button type=\"submit\">Sign In</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchAccessTokenForApiResources Component in Logto\nDESCRIPTION: This snippet renders the FetchAccessTokenForApiResources component with specific props. It sets the getAccessTokenApi prop to 'getAccessToken' and passes the GetAccessTokenCode component as the getAccessTokenCode prop.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Sample Password Encryption Data in JSON\nDESCRIPTION: An example of password_encrypted and password_encryption_method fields for a user with password '123456', using Argon2 encryption.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"password_encryption_method\": \"Argon2i\",\n  \"password_encrypted\": \"$argon2i$v=19$m=4096,t=10,p=1$aZzrqpSX45DOo+9uEW6XVw$O4MdirF0mtuWWWz68eyNAt2u1FzzV3m3g00oIxmEr0U\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Logto Configuration in Markdown\nDESCRIPTION: A markdown table listing key environment variables for Logto configuration, including their default values, types, and descriptions. It covers settings for server ports, database connection, HTTPS setup, and other core functionalities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/core-service/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Key                     | Default Value                        | Type                                                     | Description                                                                                                                                                                                                              |\n| ----------------------- | ------------------------------------ | -------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| NODE_ENV                | `undefined`                          | <code>'production' &#124; 'test' &#124; undefined</code> | What kind of environment that Logto runs in.                                                                                                                                                                             |\n| PORT                    | `3001`                               | `number`                                                 | The local port that Logto listens to.                                                                                                                                                                                    |\n| ADMIN_PORT              | `3002`                               | `number`                                                 | The local port that Logto Admin Console listens to.                                                                                                                                                                      |\n| ADMIN_DISABLE_LOCALHOST | N/A                                  | <code>string &#124; boolean &#124; number</code>         | Set it to `1` or `true` to disable the port for Admin Console. With `ADMIN_ENDPOINT` unset, it'll completely disable the Admin Console.                                                                                  |\n| DB_URL                  | N/A                                  | `string`                                                 | The [Postgres DSN](https://www.postgresql.org/docs/14/libpq-connect.html#id-1.7.3.8.3.6) for Logto database.                                                                                                             |\n| HTTPS_CERT_PATH         | `undefined`                          | <code>string &#124; undefined</code>                     | See [Enabling HTTPS](#enabling-https) for details.                                                                                                                                                                       |\n| HTTPS_KEY_PATH          | `undefined`                          | <code>string &#124; undefined</code>                     | Ditto.                                                                                                                                                                                                                   |\n| TRUST_PROXY_HEADER      | `false`                              | `boolean`                                                | Ditto.                                                                                                                                                                                                                   |\n| ENDPOINT                | `'protocol://localhost:$PORT'`       | `string`                                                 | You may specify a URL with your custom domain for online testing or production. This will also affect the value of the [OIDC issuer identifier](https://openid.net/specs/openid-connect-core-1_0.html#IssuerIdentifier). |\n| ADMIN_ENDPOINT          | `'protocol://localhost:$ADMIN_PORT'` | `string`                                                 | You may specify a URL with your custom domain for production (E.g. `ADMIN_ENDPOINT=https://admin.domain.com`). This will also affect the value of Admin Console Redirect URIs.                                           |\n| CASE_SENSITIVE_USERNAME | `true`                               | `boolean`                                                | Specifies whether the username is case-sensitive. Exercise caution when modifying this value; changes will not automatically adjust existing database data, requiring manual management.                                 |\n```\n\n----------------------------------------\n\nTITLE: Passing Organization ID in Logto Sign-In with TypeScript\nDESCRIPTION: Example of how to pass the organization_id parameter in the signIn method using Logto browser SDK. This allows displaying organization-specific branding during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/customization/match-your-brand.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlogtoClient.signIn({\n  // ...autres paramètres\n  redirectUri: 'https://your-redirect-uri',\n  extraParams: {\n    organization_id: '123456',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and Resources in Swift\nDESCRIPTION: Creates a LogtoConfig object with custom scopes and resource APIs, then initializes a LogtoClient with this configuration. The code specifies read and write scopes and includes multiple API endpoints as resources for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"read\", \"write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client for Next.js\nDESCRIPTION: This snippet shows how to configure additional scopes when initializing the Logto client in a Next.js application. It demonstrates requesting email and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone], // Ajoutez plus de portées si nécessaire\n  // ...other configs\n});\n```\n\n----------------------------------------\n\nTITLE: Loading User Data in SvelteKit Layout\nDESCRIPTION: Sets up a SvelteKit layout server load function to make user information available throughout the application by adding it to the returned data object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = async ({ locals }) => {\n  return { user: locals.user };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic getCustomJwtClaims Function in JavaScript\nDESCRIPTION: The base implementation of the getCustomJwtClaims function that returns an empty object. This function is used to define custom claims for access tokens and takes parameters for token data, context, and environment variables.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/custom-token-claims/create-script.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst getCustomJwtClaims = async ({ token, context, environmentVariables }) => {\n  return {};\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpClient with Access Token in Blazor\nDESCRIPTION: Setup for HttpClient configuration with automatic access token inclusion for API requests. Demonstrates how to configure the HTTP client with base address and token authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services\n    .AddHttpClient(\"MyApiResource\", client =>\n    {\n        client.BaseAddress = new Uri(\"https://my-api-resource\");\n    })\n    .AddAccessToken();\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Enterprise SSO Sign-In in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto SDK in JavaScript to initiate a direct enterprise SSO sign-in. It shows setting the directSignIn parameter with 'sso:1234567890' when calling the signIn method of the logtoClient.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/authentication-parameters/direct-sign-in.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlogtoClient.signIn({\n  redirectUri: 'https://your-app.com/callback',\n  directSignIn: 'sso:1234567890',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Endpoints for Blazor Server in C#\nDESCRIPTION: This code snippet adds two endpoints (/SignIn and /SignOut) to handle authentication in a Blazor Server application. It uses the MapGet method to define routes that either challenge for authentication or sign out the user, redirecting to the home page afterwards.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-server/_add-routes.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapGet(\"/SignIn\", async context =>\n{\n    if (!(context.User?.Identity?.IsAuthenticated ?? false))\n    {\n        await context.ChallengeAsync(new AuthenticationProperties { RedirectUri = \"/\" });\n    } else {\n        context.Response.Redirect(\"/\");\n    }\n});\n\napp.MapGet(\"/SignOut\", async context =>\n{\n    if (context.User?.Identity?.IsAuthenticated ?? false)\n    {\n        await context.SignOutAsync(new AuthenticationProperties { RedirectUri = \"/\" });\n    } else {\n        context.Response.Redirect(\"/\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Organization Token Components in MDX\nDESCRIPTION: Imports required components and fragments for organization token documentation and configures the FetchOrganizationTokenForUser component with organization scope and code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Scopes in Logto ViewModel - Kotlin\nDESCRIPTION: This snippet demonstrates how to set the required OAuth scopes when initializing the LogtoConfig in a Kotlin ViewModel. It sets the \\'scopes\\' parameter to include organization-related user scopes, enabling the application to request access to organization-specific data during authentication. Dependencies include the Logto SDK and the UserScope enumeration. The main input is a list of scopes; the output configures user permissions for login flows. Ensure that the correct imports and context for LogtoConfig and UserScope are present.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(UserScope.Organizations),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication UI Buttons in Angular Template\nDESCRIPTION: Adds sign-in and sign-out buttons to the Angular component template, connecting them to the respective authentication methods.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button (click)=\"signIn()\">Sign in</button>\n<br />\n<button (click)=\"signOut()\">Sign out</button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Authentication State with Logto in React Native (TypeScript)\nDESCRIPTION: This TypeScript (TSX) snippet demonstrates the use of the Logto authentication provider in a React Native application. It leverages the \\'useLogto\\' hook to access authentication state and methods, rendering user details (name and email) upon successful authentication and providing sign-in/sign-out controls. Dependencies include \\'@logto/rn\\', \\'react\\', and \\'react-native\\'. The snippet expects Logto to be correctly configured, and \\'signOut\\' and \\'signIn\\' must be defined and available in the context for usage; missing imports like useEffect and useState need to be added for a fully functional example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_fetch-user-info-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useLogto } from '@logto/rn';\\nimport { Button, Text } from 'react-native';\\n\\nconst Content = () => {\\n  const { fetchUserInfo, isAuthenticated } = useLogto();\\n  const [user, setUser] = useState(null);\\n\\n  useEffect(() => {\\n    if (isAuthenticated) {\\n      // highlight-start\\n      fetchUserInfo().then((userInfo) => {\\n        setUser(userInfo);\\n      });\\n      // highlight-end\\n    }\\n  }, [isAuthenticated]);\\n\\n  return (\\n    <div>\\n      {isAuthenticated ? (\\n        <>\\n          <Text>{user?.name}</Text>\\n          <Text>{user?.email}</Text>\\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\\n        </>\\n      ) : (\\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\\n      )}\\n    </div>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Logto Callback in Rails Controller\nDESCRIPTION: This snippet demonstrates how to handle the Logto callback in a Rails controller. It uses the Logto client to process the sign-in callback with the original request URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def callback\n    @client.handle_sign_in_callback(url: request.original_url)\n  end\n  # highlight-end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Organization Scopes in Dart\nDESCRIPTION: Creates a LogtoConfig instance with required parameters for authentication setup. Includes endpoint URL, application ID, and specifically enables organization scopes for user management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_organization-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [LogtoUserScopes.organizations.value]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in JSX\nDESCRIPTION: This code imports the necessary fragments and code snippets to display documentation for organization token functionality. It uses a reusable component to render the documentation with consistent formatting.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Global Authentication Variables in Dart\nDESCRIPTION: This snippet defines global variables for the current user and a getter for the logged-in state. These are likely used throughout the application to check authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFlutterFlowAuthAuthUser? currentUser;\nbool get loggedIn => currentUser?.loggedIn ?? false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK for Capacitor in TypeScript\nDESCRIPTION: This snippet defines a TypeScript object conforming to the LogtoConfig interface, intended for use with the Logto SDK in a Capacitor application. It specifies the required dependencies, namely the '@logto/capacitor' package and its type definitions. Key parameters include appId (your application's unique identifier), endpoint (your Logto service endpoint), scopes (the OAuth scopes to request), and resources (specific API endpoints for which authentication is required). Expected inputs are string values for appId and endpoint, as well as arrays of strings for scopes and resources. The output is a properly structured LogtoConfig object suitable for initializing authentication. Placeholders must be replaced with actual values before production use.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\\n\\nconst config: LogtoConfig = {\\n  appId: '<your-application-id>',\\n  endpoint: '<your-logto-endpoint>',\\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User ID Token Claims in Flutter\nDESCRIPTION: This Dart snippet demonstrates how to fetch the authenticated user's ID token claims within a Flutter application using the Logto client. It defines an asynchronous `onPressed` handler for a `TextButton`. Inside the handler, it accesses the `idTokenClaims` property of a `logtoClient` instance (assumed to be initialized elsewhere) and prints the retrieved claims to the console. This is typically used after successful user authentication to get details like user ID, email, etc.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_display-userinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget getUserInfoButton = TextButton(\n      onPressed: () async {\n        // highlight-start\n        final userClaims = await logtoClient.idTokenClaims;\n        print(userInfo); // Note: The code prints `userInfo`, but likely intends to print `userClaims`. Assuming `userInfo` is a typo for `userClaims` based on the previous line.\n        // highlight-end\n      },\n      child: const Text('Get user info'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n            isAuthenticated == true ? getUserInfoButton : const SizedBox.shrink(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Access Token Fetching Components in JSX/MDX\nDESCRIPTION: This snippet imports necessary components and composes them to create a documentation section for fetching access tokens. It uses a reusable component 'FetchAccessTokenForApiResources' and passes custom props including a localized API name and a code snippet component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"jeton_d'accès\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Organization Permission Scopes in TypeScript\nDESCRIPTION: This snippet shows how to initialize a Logto client with organization permission scopes, including how to add new permission scopes when they are introduced to the system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/configure-organization-template.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nnew LogtoClient({\n  appId: 'your-app-id',\n  endpoint: 'your-logto-endpoint',\n  scopes: [\n    'urn:logto:scope:organizations',\n    // ... tus otros alcances de permisos de organización existentes,\n    'new-organization-permission-scope',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching API Resource Access Token for Organization in TypeScript\nDESCRIPTION: This code shows how to get an access token for a specific API resource within an organization context. The 'getAccessToken' method is used with both the API resource URL and organization ID as parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst accessToken = await client.getAccessToken(\n  'https://shopping.your-app.com/api',\n  organizationId\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express Scopes in TypeScript\nDESCRIPTION: Demonstrates setting up the Logto Express configuration object with custom OAuth scopes. The configuration includes email and phone scopes for user authorization requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  scopes: ['email', 'phone'],\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token in Go\nDESCRIPTION: Example of accessing additional user claims after configuring scopes. This demonstrates how to retrieve the email and phone number from the ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nidTokenClaims, error := client.GetIdTokenClaims()\n// Now you can access additional claims `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js with pnpm in Next.js\nDESCRIPTION: This command adds the beta version of next-auth package using pnpm. It's an alternative package manager for installing Auth.js in a Next.js project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add next-auth@beta\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Access Token Components in MDX\nDESCRIPTION: MDX file that imports fragment components for fetching API access tokens and renders them with specific props for token retrieval functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Logto Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Logto client to fetch user information asynchronously. It utilizes the 'fetchUserInfo' method of the Logto client and logs the retrieved user information to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_fetch-userinfo-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\nconsole.log(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Global Authentication State Management in Dart\nDESCRIPTION: Global variables that track the current user and logged-in state, providing easy access to authentication information throughout the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFlutterFlowAuthAuthUser? currentUser;\nbool get loggedIn => currentUser?.loggedIn ?? false;\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Components for API Resource Documentation\nDESCRIPTION: This snippet imports various Markdown components used to construct the API resource documentation. It includes descriptions, configuration instructions, and token fetching guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ApiResourcesDescription from '../../../fragments/_api-resources-description.md';\n\nimport ConfigApiResources from './_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from './_fetch-access-token-for-api-resources.mdx';\nimport FetchOrganizationTokenForUser from './_fetch-organization-token-for-user.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Pathnames for Logto Routes\nDESCRIPTION: This snippet shows how to customize the pathnames for sign-in, sign-out, and callback routes in the Nuxt configuration file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // highlight-start\n  logto: {\n    pathnames: {\n      signIn: '/login',\n      signOut: '/logout',\n      callback: '/auth/callback',\n    },\n  },\n  // highlight-end\n  // ...otras configuraciones\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring User Scopes with Logto Express in TypeScript\nDESCRIPTION: This snippet imports the UserScope enumeration from the Logto Express SDK and defines a configuration object where the 'scopes' property includes the Organizations scope. The configuration object, typed as LogtoExpressConfig, is intended for initializing the SDK with required authentication scopes. Dependencies include the '@logto/express' package and valid TypeScript configuration; the 'scopes' parameter expects an array of UserScope enum values to determine access permissions for authenticated users. The output is a prepared configuration object to be used with Logto Express middleware. Limitations: This is a partial configuration and needs to be merged with other Logto settings to function fully.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Environment Variables\nDESCRIPTION: Environment variables configuration for the Logto Docker container, including proxy settings, endpoints, and database connection details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nTRUST_PROXY_HEADER: 1 # Set to 1 if you have an HTTPS proxy (e.g. Nginx) in front of Logto\nENDPOINT: https://<your-logto-domain> # (Optional) Replace with your Logto endpoint URL if you are using a custom domain\nADMIN_ENDPOINT: https://<your-logto-admin-domain> # (Optional) Replace with your Logto admin URL if you are using a custom domain\nDB_URL: postgres://username:password@your_postgres_url:port/db_name # Replace with your Postgres DSN\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Route in Ruby on Rails\nDESCRIPTION: This code demonstrates how to set up a route for the authentication callback in a Ruby on Rails application's routes file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-next-line\n  get \"/callback\", to: \"sample#callback\"\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization API Access Token in Kotlin\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to obtain an access token for a specific API resource within an organization. It uses the getAccessToken method, passing both the API resource URL and the organization ID as parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getAccessToken(\n  'https://shopping.your-app.com/api',\n  organizationId\n) { logtoException, accessToken ->\n    println(\"AccessToken:$accessToken\")\n}\n```\n\n----------------------------------------\n\nTITLE: Manual User Information Fetching in Nuxt.js\nDESCRIPTION: Demonstrates how to manually fetch user information using the Logto client in a server-side context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogtoClient, useState, callOnce } from '#imports';\n\nconst client = useLogtoClient();\nconst userInfo = useState(null);\n\n// Call once to prevent running from client-side\nawait callOnce(async () => {\n  if (!client) {\n    throw new Error('Logto client is not available');\n  }\n\n  if (!(await client.isAuthenticated())) {\n    return;\n  }\n\n  try {\n    userInfo.value = await client.fetchUserInfo();\n  } catch (error) {\n    console.error('Failed to get user information:', error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in Python\nDESCRIPTION: This snippet shows how to create a LogtoClient instance with organization scopes enabled. It imports necessary classes from the logto package and configures the client with the UserInfoScope.organizations scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import LogtoClient, LogtoConfig, UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        scopes=[UserInfoScope.organizations],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Claims with User Info Loading\nDESCRIPTION: Extended Identity Server configuration that enables loading additional user information and custom data claims. Includes scope configuration and enabling the LoadUserInfo flag.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_fetch-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ...\n  \"IdentityServer\": {\n    // ...\n    // highlight-start\n    \"Scope\": \"openid profile email custom_data\",\n    \"LoadUserInfo\": true\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scope Claim List Component in JSX\nDESCRIPTION: Renders the imported ScopeClaimList component which likely shows the relationship between OAuth scopes and the user claims they provide access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_fetch-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ScopeClaimList />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Fetching Components in JSX\nDESCRIPTION: This snippet imports necessary components and renders a FetchAccessTokenForApiResources component with specific props. It demonstrates how to set up the access token fetching process in a React-based documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with New Permission Scopes in TypeScript\nDESCRIPTION: Example of initializing a Logto client with existing and new permission scopes. This is necessary when introducing new permissions into the system that need to be assigned to users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/role-based-access-control/protect-api-resources-with-rbac.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nnew LogtoClient({\n  appId: 'your-app-id',\n  endpoint: 'your-logto-endpoint',\n  resources: ['your-api-resource'],\n  scopes: [\n    // ... your existing permission scopes,\n    'new-scope',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Logto Sign-In Flow with Mermaid Diagram\nDESCRIPTION: This mermaid diagram illustrates the sign-in flow between the app and Logto. It shows the two main steps: invoking sign-in and finishing sign-in.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_web-sign-in-flow-summary.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A(Your app) -->|1. Invoke sign-in| B(Logto)\n    B -->|2. Finish sign-in| A\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider\nDESCRIPTION: Sets up NextAuth authentication handler with Logto as the authentication provider. Configures OpenID Connect scopes including openid, offline_access, profile and email access permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      // ... other options\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      // ... other options\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in React\nDESCRIPTION: This code imports necessary components and renders the ConfigApiResources component, passing in code snippet components as props. It demonstrates how to set up the configuration interface for API resources in a React-based documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Middleware to Fetch Organization Tokens in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring the `withLogto` middleware for an Express-like route (`/fetch-organization-token`). It enables fetching organization tokens by setting `getOrganizationToken: true` in the configuration object passed to `withLogto`. The route handler then accesses these fetched tokens from the `request.user.organizationTokens` property and returns them as a JSON response. This assumes `app` is an Express application instance and `config` contains other necessary Logto configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\napp.get(\n  '/fetch-organization-token',\n  withLogto({\n    ...config,\n    // highlight-next-line\n    getOrganizationToken: true,\n  }),\n  (request, response) => {\n    // highlight-next-line\n    response.json(request.user.organizationTokens);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out UI with Logto in Next.js\nDESCRIPTION: Creates a home page with sign-in and sign-out functionality using Logto. It uses the useSWR hook to fetch authentication status and conditionally renders different UI elements based on whether the user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoContext } from '@logto/next';\nimport useSWR from 'swr';\n\nconst Home = () => {\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\n\n  return (\n    <nav>\n      {data?.isAuthenticated ? (\n        <p>\n          Bonjour, {data.claims?.sub},\n          <button\n            onClick={() => {\n              window.location.assign('/api/logto/sign-out');\n            }}\n          >\n            Déconnexion\n          </button>\n        </p>\n      ) : (\n        <p>\n          <button\n            onClick={() => {\n              window.location.assign('/api/logto/sign-in');\n            }}\n          >\n            Connexion\n          </button>\n        </p>\n      )}\n    </nav>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for X (Twitter)\nDESCRIPTION: This code snippet defines a constant 'connector' with the value 'X (Twitter)'. This variable is used throughout the document to refer to the X (Twitter) social sign-in connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vue-x-twitter.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'X (Twitter)';\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Fetch Component in React (JSX)\nDESCRIPTION: This JSX snippet renders the FetchOrganizationTokenForUser component, passing in the organization scope, a configuration code block, and an access token code block as props. The component makes use of imported code fragments to construct its UI, suitable for use in documentation or demos. Parameters include 'organizationScope', 'configOrganizationCode', and 'getOrganizationAccessTokenCode', each controlling what the component renders.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected User Info Route in Flask\nDESCRIPTION: This code demonstrates how to create a protected route in Flask that displays user information. It uses the authentication decorator to ensure only authenticated users can access it, and displays user information retrieved from Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/protected/userinfo\")\n@authenticated(shouldRedirect=True, fetchUserInfo=True)\nasync def protectedUserinfo():\n    try:\n        return (\n            \"<h2>User info</h2>\"\n            + g.user.model_dump_json(indent=2, exclude_unset=True).replace(\"\\n\", \"<br>\")\n            + navigationHtml\n        )\n    except LogtoException as e:\n        return \"<h2>Error</h2>\" + str(e) + \"<br>\" + navigationHtml\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication and Retrieving Access Token with Logto in JavaScript\nDESCRIPTION: This code checks if the user is authenticated using the Logto client. If authenticated, it retrieves and logs the access token. The snippet uses async/await for handling asynchronous operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst isAuthenticated = await logtoClient.isAuthenticated();\n\nif (isAuthenticated) {\n  (async () => {\n    const token = await logtoClient.getAccessToken();\n    console.log(token);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Organizations Scope in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the UserScope enum from @logto/express and use it to configure Logto Express with the Organizations scope. The configuration object includes the Organizations scope in the scopes array.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Search Fields with URLSearchParams in JavaScript\nDESCRIPTION: This snippet shows how to construct URLSearchParams to search in specific fields like 'name' and 'primaryEmail' using dot notation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', '%foo%'],\n  ['search.primaryEmail', '%@gmail.com'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Flutter using Logto\nDESCRIPTION: This code snippet demonstrates how to display user information in a Flutter application using the Logto client. It creates a Text widget that shows the user's name from the ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nText('Hello ${logtoClient.idTokenClaims?['name'] ?? 'User'}!'),\n```\n\n----------------------------------------\n\nTITLE: Configuring User Info Fetching in Nuxt.js\nDESCRIPTION: Configuration example for enabling automatic user information fetching in Nuxt.js with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    scopes: [UserScope.CustomData],\n    fetchUserInfo: true,\n  },\n  // ...other configurations\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Custom Data\nDESCRIPTION: Example of using fetchUserInfo() method to access custom user data claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { fetchUserInfo } = useLogto();\n\nconst userInfo = await fetchUserInfo();\n\n// Ahora puedes acceder al reclamo `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: React SDK での組織トークン取得\nDESCRIPTION: Logto React SDK で特定の組織に対する組織トークンを取得する方法です。useLogto フックから getOrganizationToken 関数を取得して使用します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const { getOrganizationToken } = useLogto();\n\n  const getToken = async () => {\n    const token = await getOrganizationToken('<organization-id>');\n  };\n\n  return <button onClick={getToken}>Get organization token</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Data with Logto PHP SDK\nDESCRIPTION: This code snippet shows how to access custom user data by calling the fetchUserInfo method and accessing the custom_data property on the returned object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$client->fetchUserInfo()->custom_data;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token with Logto Client in TypeScript\nDESCRIPTION: This code retrieves an organization token using the Logto client that is available in the locals object. It requires a valid organizationId parameter and returns a Promise that resolves to the organization token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Route in Rails\nDESCRIPTION: Adds a route to the Rails application's routes configuration to handle the callback from Logto authentication. This maps the /callback path to the appropriate controller action.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-next-line\n  get \"/callback\", to: \"sample#callback\"\nend\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Fetching in JSX\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring organizations and fetching organization access tokens in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Consistent Billing Example Calculation in Math Notation\nDESCRIPTION: Simple mathematical example demonstrating how billing works when there are no changes to add-ons during a billing cycle.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-cloud/billing-and-pricing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: math\nCODE:\n```\n\\text{Your next bill} = \\$ 16 + \\$ 48 \\times 2 = \\$ 112\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering GetAccessTokenCode Component in React\nDESCRIPTION: This code snippet imports a component named GetAccessTokenCode from a relative path and then renders it. It's likely part of a React-based documentation system, where the imported component contains the actual code for getting an access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<GetAccessTokenCode />\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Fragments in Next.js (JavaScript)\nDESCRIPTION: This snippet imports a React component fragment for fetching access tokens and a Markdown code example, then renders the access token component with props. Dependencies include React, the local file structure, and support for MDX/Markdown integration within a Next.js application. Key parameters, such as 'getAccessTokenApi' and 'getAccessTokenCode', determine the API method and display code respectively; inputs include these props and outputs are React elements displayed to the user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Logto Hook in SvelteKit (TypeScript)\nDESCRIPTION: This snippet shows how to add the Logto hook to the SvelteKit server. It includes options for hardcoding credentials and using environment variables for sensitive information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-logto-app-id>',\n    appSecret: '<your-logto-app-secret>',\n  },\n  {\n    encryptionKey: '<a-random-string>',\n  }\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\nimport { env } from '$env/dynamic/private';\n\nexport const handle = handleLogto(\n  {\n    endpoint: env.LOGTO_ENDPOINT,\n    appId: env.LOGTO_APP_ID,\n    appSecret: env.LOGTO_APP_SECRET,\n  },\n  {\n    encryptionKey: env.LOGTO_COOKIE_ENCRYPTION_KEY,\n  }\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sequence } from '@sveltejs/kit/hooks';\n\nexport const handle = sequence(handleLogto, handleOtherHook);\n```\n\n----------------------------------------\n\nTITLE: 組織リソース保護フローの図示（mermaid）\nDESCRIPTION: 組織リソース保護のシーケンス図。クライアント、Logto、API間の標準OIDCフロー、組織トークンリクエスト、APIリクエストの流れを表示します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    %% 標準 OIDC フロー\n    Note over Client,Logto: 標準 OIDC フロー\n    Client->>Logto: 認可リクエスト\n    Note right of Client: 組織スコープを含む:<br/>\"urn:logto:scope:organizations\"\n    Logto->>Client: 認可コード\n    Client->>Logto: トークンリクエスト\n    Logto->>Client: ID トークン + アクセス トークン\n    Note right of Client: ID トークンには `organizations` が含まれる\n\n    %% 組織トークンリクエスト\n    Note over Client,API: 組織トークンリクエスト\n    Client->>Logto: POST /oidc/token\n    Note right of Client: リソース \"urn:logto:scope:organizations\" と<br/>要求されたスコープを含む<br/>\"urn:logto:scope:organizations\"\n    Note right of Client: organization_id パラメーターを含む\n\n    Note over Logto: ユーザーの組織アクセスを確認\n\n    alt organization_id へのアクセスなし\n        Logto-->>Client: 403 Forbidden\n    else 組織アクセスあり\n        Note over Logto: 要求されたスコープをフィルタリング\n        Logto-->>Client: JWT アクセス トークンを返す\n        Note left of Logto: トークンには以下が含まれる:<br/>- 標準 JWT クレーム<br/>- 付与されたスコープ<br/>- audience `urn:logto:organization:{organization_id}`\n    end\n\n    Note over Client,API: API リクエスト\n    Client->>API: Bearer トークン (組織トークン JWT) を使用したリクエスト\n\n    Note over API: JWT トークンを検証:<br/>- 標準 JWT 検証<br/>- organization_id を確認\n\n    alt トークンが無効\n        API-->>Client: 401 Unauthorized\n    else トークンが有効\n        alt 無効な organization_id\n            API-->>Client: 403 Forbidden\n        else 有効な organization_id\n            API-->>Client: 保護されたリソース\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Types for Logto in SvelteKit\nDESCRIPTION: This snippet demonstrates how to add TypeScript type definitions for the Logto client and user information in a SvelteKit application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LogtoClient, UserInfoResponse } from '@logto/sveltekit';\n\ndeclare global {\n  namespace App {\n    interface Locals {\n      logtoClient: LogtoClient;\n      user?: UserInfoResponse;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js with npm in Next.js\nDESCRIPTION: This command installs the beta version of next-auth package using npm. It's used to add authentication functionality to a Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i next-auth@beta\n```\n\n----------------------------------------\n\nTITLE: Information Block with JSX and HTML\nDESCRIPTION: A JSX/HTML information block that introduces Logto as an Auth0 alternative for modern apps and SaaS products. It describes Logto's Cloud and Open-source offerings and recommends starting with a free development tenant.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/fragments/_intro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n:::info For our new friends\n\n<br />\n<br />\n[Logto](https://logto.io/) is an Auth0 alternative designed for modern apps and SaaS products. It\noffers both [Cloud](https://cloud.logto.io/) and [Open-source](https://github.com/logto-io/logto)\nservices to help you quickly launch your identity and management (IAM) system. Enjoy authentication,\nauthorization, and multi-tenant management [all in one](https://docs.logto.io/introduction).{' '}\n\nWe recommend starting with a free development tenant on [Logto Cloud](https://cloud.logto.io/). This allows you to explore all the features easily.\n:::\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Android Logto Client\nDESCRIPTION: This code snippet shows how to access additional claims after requesting extra scopes in the Logto Android client. It demonstrates retrieving ID token claims and logging them.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getIdTokenClaims { logtoException, idTokenClaims ->\n    println(\"IdTokenClaims:$idTokenClaims\")\n}\n// Ahora puedes acceder a los reclamos adicionales `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Sample User Search Response\nDESCRIPTION: This JSON response shows the format of data returned from a user search. It contains an array of User entities with fields like id, username, primaryEmail, and other user attributes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"MgUzzDsyX0iB\",\n    \"username\": \"alice_123\",\n    \"primaryEmail\": \"alice@some.email.domain\",\n    \"primaryPhone\": null,\n    \"name\": null,\n    \"avatar\": null\n    // ...\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific Version Alterations with CLI\nDESCRIPTION: Command to deploy database alterations to a specific target version using Logto CLI. Useful for non-TTY pipelines or automated deployments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/database-alteration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlogto db alteration deploy 1.2.0\n```\n\n----------------------------------------\n\nTITLE: Implementing idTokenDecoderFactory Bean\nDESCRIPTION: This Java method creates an idTokenDecoderFactory bean to use the ES384 algorithm for token decoding, which is required for Logto integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.oauth2.client.oidc.authentication.OidcIdTokenDecoderFactory;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\nimport org.springframework.security.oauth2.jwt.JwtDecoderFactory;\n\npublic class WebSecurityConfig {\n  // ...\n\n  @Bean\n  public JwtDecoderFactory<ClientRegistration> idTokenDecoderFactory() {\n    OidcIdTokenDecoderFactory idTokenDecoderFactory = new OidcIdTokenDecoderFactory();\n    idTokenDecoderFactory.setJwsAlgorithmResolver(clientRegistration -> SignatureAlgorithm.ES384);\n    return idTokenDecoderFactory;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Scopes and Resources in Logto Go Client Configuration\nDESCRIPTION: This Go code snippet shows how to set the `Scopes` and `Resources` fields within a `client.LogtoConfig` struct. `Scopes` defines the permissions requested (e.g., \"read\", \"write\"), while `Resources` specifies the API identifiers the application intends to access (e.g., \"https://shopping.your-app.com/api\"). This configuration is essential for requesting access tokens with appropriate permissions for specific APIs during the OAuth 2.0/OpenID Connect flow managed by Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"read\", \"write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This snippet sets up NextAuth with a Logto provider for authentication in a Next.js application. It configures the authorization parameters including scope and resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile read write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Fetching in Nuxt.js Logto Configuration\nDESCRIPTION: This configuration snippet shows how to enable automatic user info fetching in the Logto module for Nuxt.js, including custom data scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    scopes: [UserScope.CustomData],\n    fetchUserInfo: true,\n  },\n  // ...otras configuraciones\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with npm\nDESCRIPTION: Command to install the Logto Vue library using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Rotating OIDC Private Signing Keys for Cloudflare Zero Trust Compatibility\nDESCRIPTION: CLI command to generate a new OIDC private signing key using RSA algorithm for compatibility with Cloudflare Zero Trust.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/rotate-signing-keys.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlogto db config rotate oidc.privateKeys --type rsa\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli db config rotate oidc.privateKeys -- --type rsa\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db config rotate oidc.privateKeys -- --type rsa\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Logto - React Native - TypeScript\nDESCRIPTION: This snippet defines a React Native component that uses the useLogto hook from the @logto/rn library to manage authentication. It conditionally fetches user information after confirming authentication, updating local state and rendering either user details with a sign-out button or a sign-in prompt. Dependencies include @logto/rn for authentication, and react-native for UI. Key parameters are the authentication state and the fetchUserInfo function. Expected input is user interaction via sign-in or sign-out buttons; output is the conditional display of user info. Ensure the app is set up with Logto and the necessary React Native dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_fetch-user-info-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { fetchUserInfo, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // highlight-start\n      fetchUserInfo().then((userInfo) => {\n        setUser(userInfo);\n      });\n      // highlight-end\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication UI with Razor Pages\nDESCRIPTION: Implements the authentication UI using Razor syntax, displaying conditional sign-in/sign-out buttons based on the user's authentication status. Includes authentication status display and form-based button handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-razor/_implement-buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: cshtml\nCODE:\n```\n<p>Is authenticated: @User.Identity?.IsAuthenticated</p>\n<form method=\"post\">\n  @if (User.Identity?.IsAuthenticated == true) {\n    <button type=\"submit\" asp-page-handler=\"SignOut\">Sign out</button>\n  } else {\n    <button type=\"submit\" asp-page-handler=\"SignIn\">Sign in</button>\n  }\n</form>\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Fetch Fragment Component - JSX\nDESCRIPTION: This JSX snippet renders the FetchOrganizationTokenForUser component, supplying static props for organization scope and references to configuration and access token code samples. Inputs include code components and a predefined user scope. The output is a composed React component, designed for documentation or demo UI purposes. This composition approach requires all code modules to be valid React or MDX/MD content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK with Organization Scope in React Native\nDESCRIPTION: This snippet demonstrates how to import necessary types from the Logto React Native SDK and configure it with the Organizations user scope. It sets up a LogtoConfig object with the required scopes property.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Access Token for a Resource API in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates using the `logtoClient.getAccessToken` method to asynchronously request an access token scoped for a specific resource URL ('https://shopping.your-app.com/api'). The result is handled in a callback function which receives either a `LogtoException` or the access token (named `\\u8BBF\\u95EE\\u4EE4\\u724C (Access token)`). The code prints the exception if it occurs or the access token if retrieval is successful. Note the use of a non-English variable name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin title=\"LogtoViewModel.kt\"\nlogtoClient.getAccessToken(\"https://shopping.your-app.com/api\") { logtoException, \\u8BBF\\u95EE\\u4EE4\\u724C (Access token) ->\n    logtoException?.let { println(it) }\n    \\u8BBF\\u95EE\\u4EE4\\u724C (Access token)?.let { println(it) }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Button Component with Auth.js\nDESCRIPTION: Creates a sign-out button component that uses Auth.js's signOut function. This component uses a server action to handle the logout process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signOut } from '@/auth';\n\nexport function SignOut() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signOut();\n      }}\n    >\n      <button type=\"submit\">Sign Out</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Nuxt.js\nDESCRIPTION: Shows how to configure additional user scopes in the Nuxt.js configuration file to request more user information from Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    scopes: [UserScope.Email, UserScope.Phone], // Add more scopes if needed\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Token Exchange with Actor Token for ACT Claim\nDESCRIPTION: HTTP request example showing how to include an actor_token in the token exchange request. This enables the resulting access token to contain an 'act' claim that identifies the impersonator.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPOST /oidc/token HTTP/1.1\nHost: techcorp.logto.app\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=urn:ietf:params:oauth:grant-type:token-exchange\n&client_id=techcorp_support_app\n&scope=resource:read\n&subject_token=alx_7h32jf8sK3j2\n&subject_token_type=urn:ietf:params:oauth:token-type:access_token\n&actor_token=sarah_access_token\n&actor_token_type=urn:ietf:params:oauth:token-type:access_token\n&resource=https://api.techcorp.com/customer-data\n```\n\n----------------------------------------\n\nTITLE: Installing Logto PHP SDK with Composer\nDESCRIPTION: This command uses Composer to add the Logto PHP SDK as a project dependency. It will download and install the latest version of the SDK and its dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require logto/sdk\n```\n\n----------------------------------------\n\nTITLE: Setting up Logto Authentication Configuration in TypeScript\nDESCRIPTION: Exports a configuration object for Logto authentication that defines custom API scopes for shopping and store operations, along with their corresponding resource endpoints. The scopes control read/write permissions while resources specify the API URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 with Logto Provider\nDESCRIPTION: Sets up Auth.js v5 with Logto as an OIDC provider. Includes configuration for the issuer, client credentials, and profile mapping for user authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oidc',\n      // Logto アプリケーションの詳細ページから発行者 (Issuer) の値を取得できます。\n      // フィールド「Issuer endpoint」にあります。\n      issuer: 'https://xxxx.logto.app/oidc',\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      authorization: {\n        params: { scope: 'openid offline_access profile email' },\n      },\n      profile(profile) {\n        // ユーザープロファイルのマッピングをここでカスタマイズできます\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: MDX Import Structure for Okta SSO Documentation\nDESCRIPTION: Framework for importing MDX documentation fragments that compose the complete guide for Okta Enterprise SSO integration with Flutter. Includes sections for introduction, application creation, connector setup, configuration, testing, and further reading.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes for Logto Client in Python\nDESCRIPTION: This code shows how to configure the Logto client with additional scopes to request user information such as email and phone. The scopes determine what user information will be accessible in the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# highlight-next-line\nfrom logto import UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configurations\n        # highlight-start\n        scopes = [\n            UserInfoScope.email,\n            UserInfoScope.phone,\n        ],\n        # highlight-end\n    ),\n    storage=SessionStorage(),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Next Auth v4 with Logto Provider\nDESCRIPTION: Sets up Next Auth v4 with Logto as an OAuth provider. This configuration includes the well-known endpoint URL, client credentials, scope settings, and profile mapping.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oauth',\n      // Você pode obter a URL bem conhecida na página de Detalhes do Aplicativo Logto,\n      // no campo \"Endpoint de configuração do provedor OpenID\"\n      wellKnown: 'https://xxxx.logto.app/oidc/.well-known/openid-configuration',\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      client: {\n        id_token_signed_response_alg: 'ES384',\n      },\n      profile(profile) {\n        // Você pode personalizar o mapeamento do perfil do usuário aqui\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Updating manifest.json for Logto SDK Permissions\nDESCRIPTION: This snippet shows the required permissions in the manifest.json file for the Logto SDK to function properly in a Chrome extension.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"identity\", \"storage\"],\n  \"host_permissions\": [\"https://*.logto.app/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoClient with WeChat Plugin in Swift\nDESCRIPTION: Adding the LogtoSocialPluginWechat to LogtoClient initialization options in an iOS app. This enables WeChat native login functionality in your application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet logtoClient = LogtoClient(\n  useConfig: config,\n  socialPlugins: [LogtoSocialPluginWechat()]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in Rails Controller\nDESCRIPTION: This snippet demonstrates how to initialize the Logto client within a Rails controller. It sets up the client with configuration, navigation, and session storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\nclass SampleController < ApplicationController\n  before_action :initialize_logto_client\n\n  private\n\n  def initialize_logto_client\n    @client = LogtoClient.new(\n      config: LogtoClient::Config.new(\n        # ...sua configuração\n      ),\n      # Permitir que o cliente redirecione para outros hosts (ou seja, seu tenant Logto)\n      navigate: ->(uri) { redirect_to(uri, allow_other_host: true) },\n      # O controlador tem acesso ao objeto de sessão\n      storage: LogtoClient::SessionStorage.new(session)\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Logto Configuration\nDESCRIPTION: Example of using environment variables in a .env file to securely store Logto configuration values instead of hardcoding them in the Nuxt config file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNUXT_LOGTO_ENDPOINT=\"<your-logto-endpoint>\"\nNUXT_LOGTO_APP_ID=\"<your-logto-app-id>\"\nNUXT_LOGTO_APP_SECRET=\"<your-logto-app-secret>\"\nNUXT_LOGTO_COOKIE_ENCRYPTION_KEY=\"<a-random-string>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring FetchAccessTokenForApiResources Component in MDX\nDESCRIPTION: This MDX snippet shows how to use the `FetchAccessTokenForApiResources` component. It passes the string \"getAccessToken\" to the `getAccessTokenApi` prop and includes the `GetAccessTokenCode` component (presumably containing code examples) as the value for the `getAccessTokenCode` prop. This pattern is used to dynamically insert documentation content related to fetching access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes for Logto Client in Capacitor\nDESCRIPTION: This code shows how to request additional permissions by passing scopes to the LogtoConfig object when initializing the client. It includes email, phone, custom_data, and organizations scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst logtoConfig = {\n  scopes: ['email', 'phone', 'custom_data', 'organizations'],\n};\n```\n\n----------------------------------------\n\nTITLE: Requesting Email Verification Code (Bash)\nDESCRIPTION: This snippet demonstrates how to request a verification code for email verification. It sends a POST request with the email identifier to initiate the verification process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://[tenant-id].logto.app/api/verifications/verification-code \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'content-type: application/json' \\\n  --data-raw '{\"identifier\":{\"type\":\"email\",\"value\":\"...\"}}'\n```\n\n----------------------------------------\n\nTITLE: Attaching Access Token to Request Headers\nDESCRIPTION: This section provides instructions on how to attach the access token to request headers using the Bearer token format. It includes a note about the integration flow varying based on the framework or requester being used.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Anexar token de acesso aos cabeçalhos da solicitação {#attach-access-token-to-request-headers}\n\nColoque o token no campo `Authorization` dos cabeçalhos HTTP com o formato Bearer (`Bearer YOUR_TOKEN`), e você está pronto para prosseguir.\n\n:::note\nO fluxo de integração do Bearer Token pode variar com base no framework ou solicitante que você está usando. Escolha sua própria maneira de aplicar o cabeçalho de solicitação `Authorization`.\n:::\n```\n\n----------------------------------------\n\nTITLE: Initiating Direct Enterprise SSO Sign-In with cURL in Shell\nDESCRIPTION: This example illustrates how to construct an authentication request URL with the direct_sign_in parameter for enterprise SSO using cURL. It demonstrates the usage of the 'sso:1234567890' value for direct enterprise SSO authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/authentication-parameters/direct-sign-in.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location \\\n  --request GET 'https://[tenant-id].logto.app/oidc/auth?client_id=1234567890&...&direct_sign_in=sso:1234567890'\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Application with HttpClient and Auth Resource\nDESCRIPTION: This TypeScript snippet defines the configuration object (`appConfig`) for an Angular application using `ApplicationConfig`. It sets up necessary providers, including `provideHttpClient` configured with `withFetch()` for HTTP requests, and `provideAuth` using `buildAngularAuthConfig`. Notably, it specifies an API resource URL ('https://your-api-resource.com') within the authentication configuration, which is often used for audience validation or requesting tokens specific to that resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"/app/app.config.ts\"\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto\nDESCRIPTION: Shows how to request additional scopes such as email, phone, custom_data, and organizations by configuring the LogtoConfig object during client initialization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst logtoConfig = {\n  scopes: ['email', 'phone', 'custom_data', 'organizations'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Home Page Template with Login Link\nDESCRIPTION: HTML template for the home page that displays a welcome message and Logto login link.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <h1>Welcome!</h1>\n\n  <p><a th:href=\"@{/oauth2/authorization/logto}\">Login with Logto</a></p>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Data with fetchUserInfo in Logto PHP SDK\nDESCRIPTION: Example of how to access custom user data using the fetchUserInfo method, which makes a network request to retrieve additional claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$client->fetchUserInfo()->custom_data;\n```\n\n----------------------------------------\n\nTITLE: Architecture Diagram for Logto Management API Integration\nDESCRIPTION: This diagram illustrates the architecture for integrating Logto's Management API into a server-side application to provide account settings functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    A[User] --> B[Client application]\n    B -->|Self-hosted account settings API call|C[Server-side application]\n    C -->|Management API call| D[Logto]\n```\n\n----------------------------------------\n\nTITLE: Defining Anchor for Invitation-Only Sign-Up Flow Section in Markdown\nDESCRIPTION: This snippet shows how to define an anchor in Markdown for the section discussing the implementation of an invitation-only sign-up flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/sign-up-and-sign-in/disable-user-registration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Implement an invitation-only sign-up flow \\{#implement-an-invitation-only-sign-up-flow}\n```\n\n----------------------------------------\n\nTITLE: Configuring Network-Required Claims in Blazor appsettings.json\nDESCRIPTION: This JSON configuration snippet demonstrates how to request claims that require network requests in a Blazor application. It sets the IdentityServer.LoadUserInfo property to true and includes the custom_data scope along with other standard scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_fetch-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"IdentityServer\": {\n    // ...\n    // highlight-start\n    \"Scope\": \"openid profile email custom_data\",\n    \"LoadUserInfo\": true\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering MDX Components for API Resource Documentation\nDESCRIPTION: This MDX snippet imports reusable components from specified paths. It imports `ConfigApiResources` as the main layout component and several code example components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`). It then renders the `ConfigApiResources` component, passing the imported code components as props to dynamically populate the documentation section with relevant code examples for configuring API resources, potentially including scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX and Markdown Components in React - JavaScript\nDESCRIPTION: This snippet shows the import of MDX and Markdown components representing configuration resource documentation fragments and code samples. These imports enable modular inclusion of documentation and code in the composition of a React-based documentation site. Each imported component is sourced from a structured directory layout for organization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Generic Configuration for Other Platforms\nDESCRIPTION: Generic configuration example for platforms without specific Logto SDK support\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n  // ...\n  scope: 'openid offline_access urn:logto:scope:organizations',\n};\n```\n\n----------------------------------------\n\nTITLE: SSOIdentity Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the SSOIdentity object that stores user information from Enterprise SSO authentication. Includes the issuer, identity ID, and a generic detail object for provider-specific data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-data.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype SSOIdentity = {\n  issuer: string;\n  identityId: string;\n  detail: JsonObject; // See https://github.com/withtyped/withtyped/blob/master/packages/server/src/types.ts#L12\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Module in Nuxt Configuration\nDESCRIPTION: Configuration code to add and setup the Logto module in the Nuxt config file. It includes the module registration and essential configuration parameters such as endpoint, appId, appSecret, and cookieEncryptionKey.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // highlight-start\n  modules: ['@logto/nuxt'],\n  runtimeConfig: {\n    logto: {\n      endpoint: '<your-logto-endpoint>',\n      appId: '<your-logto-app-id>',\n      appSecret: '<your-logto-app-secret>',\n      cookieEncryptionKey: '<a-random-string>',\n    },\n  },\n  // highlight-end\n  // ...他の設定\n});\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for API Resource Configuration\nDESCRIPTION: This snippet imports the main `ConfigApiResources` MDX component from a shared fragments directory and several specific code example components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) from a local `code` subdirectory. These imports make the components available for use within the current MDX file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: Creates a new LogtoClient instance with defined scopes and resources. The scopes array specifies the permissions ('read', 'write') while the resources array defines the API endpoints that the client needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button with Logto Client in Webflow\nDESCRIPTION: Script that creates a sign-in button handler for Logto authentication in Webflow. It selects a button with ID 'sign-in' and attaches a click event listener that triggers the Logto signIn method with a redirect URI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_implement-sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  const signInButton = document.getElementById('sign-in');\n  const onClickSignIn = () => logtoClient.signIn('https://your-awesome-site.webflow.io/callback');\n  signInButton.addEventListener('click', onClickSignIn);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Route in Express\nDESCRIPTION: Express route for initiating the sign-in process by generating a sign-in URL and storing session data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getSignInUrl } = require('./logto');\n\napp.get('/sign-in', async (req, res) => {\n  const { redirectUri, codeVerifier, state, signInUri } = await getSignInUrl();\n  req.session.signIn = { codeVerifier, state, redirectUri };\n  res.redirect(signInUri);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for SendGrid Integration\nDESCRIPTION: This code snippet defines a constant 'connector' with the value 'SendGrid', which is used throughout the document to refer to the SendGrid email service.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vue-sendgrid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'SendGrid';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in MDX\nDESCRIPTION: This snippet imports two components: `FetchAccessTokenForApiResources` from a relative path within the project structure, likely a reusable UI component for documentation, and `GetAccessTokenCode` from a local `_get-access-token-code.md` file, presumably containing or rendering a specific code example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Tokens and Claims in Python Flask with Logto\nDESCRIPTION: This code demonstrates how to get an access token for a specific API endpoint and how to extract token claims using the Logto client in a Flask application. The client methods authenticate against the specified API URL and return either the raw token or its decoded claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naccessToken = await client.getAccessToken(\"https://shopping.your-app.com/api\")\n# o\nclaims = await client.getAccessTokenClaims(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resources Documentation Component - React (JSX)\nDESCRIPTION: This snippet constructs a React component (`ConfigApiResources`) and supplies code fragments as props for documentation rendering. It expects props to be markdown content, typically rendered as React nodes in MDX. Inputs are the previously imported markdown/code variables, mapped to matching prop names. Output is a rendered documentation section with embedded code examples. Assumes dependencies are correctly imported and component exists in scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Angular Auth Configuration with Resource URL\nDESCRIPTION: Demonstrates how to configure Angular application with authentication providers and HTTP client. The code sets up a resource URL for API authentication and includes fetch capability.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FetchOrganizationTokenForUser Component in JSX\nDESCRIPTION: This snippet imports necessary components and uses the FetchOrganizationTokenForUser component to handle organization token fetching for users. It sets the organization scope and passes code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Combining Authentication State with Sign-In/Sign-Out Logic\nDESCRIPTION: JavaScript code to integrate the authentication state loading function with sign-in and sign-out button event handlers for a complete authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('sign-in').addEventListener('click', async () => {\n  await chrome.runtime.sendMessage({ action: 'signIn' });\n  await loadAuthenticationState();\n});\n\ndocument.getElementById('sign-out').addEventListener('click', async () => {\n  await chrome.runtime.sendMessage({ action: 'signOut' });\n  await loadAuthenticationState();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Organizations Scope in Go\nDESCRIPTION: This snippet initializes a LogtoConfig struct, adding the 'organizations' scope to the user's permissions. It demonstrates how to extend the default configuration to include additional scopes for the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Scopes: []string{core.UserScopeOrganizations},\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Out Button Component\nDESCRIPTION: Creates a client-side sign-out button component that handles user logout.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignOut: () => Promise<void>;\n};\n\nconst SignOut = ({ onSignOut }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignOut();\n      }}\n    >\n      Abmelden\n    </button>\n  );\n};\n\nexport default SignOut;\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider - TypeScript\nDESCRIPTION: This snippet demonstrates how to set up NextAuth in a TypeScript file for a Next.js project, specifically integrating the Logto authentication provider. It imports NextAuth and initializes it with a 'logto' provider, defining authorization parameters such as scopes for OpenID, offline access, and organization-specific features. The exported properties (handlers, signIn, signOut, auth) are necessary for managing authentication flows throughout the application. Dependencies include the 'next-auth' package and compatible Next.js setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access urn:logto:scope:organizations',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token\nDESCRIPTION: After configuring the Logto client with additional scopes, this snippet shows how to access the additional claims like email and phone from the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Jetzt kannst du auf zusätzliche Ansprüche wie `claims.email`, `claims.phone` usw. zugreifen.\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Browser SDK with npm\nDESCRIPTION: Command to install the Logto Browser SDK using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_add-sdk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/browser\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token for User in Go\nDESCRIPTION: Obtains an organization token for the authenticated user in a Go web application using Logto. This token is used for organization-specific API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/README.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\norganizationToken, err := logtoClient.GetOrganizationToken(r.Context(), \"organization-id\")\nif err != nil {\n    // Handle error\n}\n// Use the organizationToken for organization-specific API requests\n```\n\n----------------------------------------\n\nTITLE: Structuring API Resource Documentation with Markdown Headers\nDESCRIPTION: This snippet outlines the structure of the API resource documentation using Markdown headers. It includes sections for client configuration, access token fetching, and organization token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/_index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ApiResourcesDescription />\n\n### Configure Logto client \\{#configure-logto-client}\n\n<ConfigApiResources />\n\n### Fetch access token for the API resource \\{#fetch-access-token-for-the-api-resource}\n\n<FetchAccessTokenForApiResources />\n\n### Fetch organization tokens \\{#fetch-organization-tokens}\n\n<FetchOrganizationTokenForUser />\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token for Logto Management API with Node.js\nDESCRIPTION: This code demonstrates how to obtain an access token for the Logto Management API using Node.js. It sets up necessary endpoint configurations, creates a POST request with proper credentials, and specifies the required resource and scope parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/generic/machine-to-machine/fragments/_fetch-access-token-for-logto-management-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst logtoEndpoint = 'https://your.logto.endpoint'; // あなたの Logto エンドポイントに置き換えてください\nconst tokenEndpoint = `${logtoEndpoint}/oidc/token`;\nconst applicationId = 'your-application-id';\nconst applicationSecret = 'your-application-secret';\nconst tenantId = 'your-tenant-id';\n\nconst fetchAccessToken = async () => {\n  return await fetch(tokenEndpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Basic ${Buffer.from(`${applicationId}:${applicationSecret}`).toString(\n        'base64'\n      )}`,\n    },\n    body: new URLSearchParams({\n      grant_type: 'client_credentials',\n      resource: `https://${tenantId}.logto.app/api`,\n      scope: 'all',\n    }).toString(),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Scopes and Claims Documentation with Code Examples in MDX\nDESCRIPTION: This MDX snippet imports the `ScopesAndClaims` presentation component and the `ScopesAndClaimsCode` component (likely containing code examples). It then renders the `ScopesAndClaims` component, embedding the code examples by passing `ScopesAndClaimsCode` as the `configScopesCode` prop. This facilitates modular documentation structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Next.js Component\nDESCRIPTION: Example showing how to access additional user claims (such as email) after configuring the required scopes in a Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function Home() {\n  const { claims: { email } = {}, } = await getLogtoContext(logtoConfig);\n\n  return (\n    <div>\n      {email && <p>Email: {email}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Browser SDK with yarn\nDESCRIPTION: Command to install the Logto Browser SDK using yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_add-sdk.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/browser\n```\n\n----------------------------------------\n\nTITLE: Configuring the Callback Route in Vue Router for Logto Authentication\nDESCRIPTION: This code snippet demonstrates how to configure the /callback route in Vue Router that will handle the authentication callback from Logto. The route uses the CallbackView component and doesn't require authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_handle-redirect.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Assuming vue-router\nconst router = createRouter({\n  routes: [\n    {\n      path: '/callback',\n      name: 'callback',\n      component: CallbackView,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Documentation Fragments with React - JavaScript\nDESCRIPTION: This snippet imports component and resource code fragments for a documentation site and renders them with a main React component. It uses ES6 module imports for both JavaScript (React components) and MDX/Markdown files, passing them as props for structured rendering. Dependencies include React, support for MDX/Markdown imports, and the respective component files; all props are JSX elements and should be valid React nodes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Setup for Logto\nDESCRIPTION: Definition of environment variables for Logto configuration in a .env file to handle sensitive information securely.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNUXT_LOGTO_ENDPOINT=\"<your-logto-endpoint>\"\nNUXT_LOGTO_APP_ID=\"<your-logto-app-id>\"\nNUXT_LOGTO_APP_SECRET=\"<your-logto-app-secret>\"\nNUXT_LOGTO_COOKIE_ENCRYPTION_KEY=\"<a-random-string>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet renders a component for fetching access tokens for API resources. It passes the 'getAccessToken' API name and a code snippet component as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims in Next.js App Router Component\nDESCRIPTION: Code example showing how to retrieve and display user claims in a Next.js application using the getLogtoContext function from the Logto authentication library.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\n\nexport default async function Home() {\n  const { claims } = await getLogtoContext(logtoConfig);\n\n  return (\n    <main>\n      {claims && (\n        <div>\n          <h2>Reivindicações (Claims):</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Nome</th>\n                <th>Valor</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(claims).map(([key, value]) => (\n                <tr key={key}>\n                  <td>{key}</td>\n                  <td>{String(value)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using UserScope Enum for Scopes in Logto PHP SDK\nDESCRIPTION: This snippet demonstrates an alternative way to specify scopes using the UserScope enum when initializing the Logto client, which provides type safety when requesting scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// highlight-next-line\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    scopes: [UserScope::email, UserScope::phone], // Update per your needs\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Vue SDK with npm - Bash\nDESCRIPTION: Installs the @logto/vue package using the npm package manager. Npm must be pre-installed, typically via Node.js. The input command fetches and saves the package as a project dependency in your package.json. This command should be run in the root directory of your Vue project. No special parameters beyond the package name are required.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Algorithme de facturation détaillé\nDESCRIPTION: Formule mathématique détaillée montrant le calcul complet de la prochaine facture, incluant le prix de base, les ajouts proratisés, les suppressions proratisées et les frais du prochain cycle.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/logto-cloud/billing-and-pricing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: math\nCODE:\n```\n\\begin{align*}\n\\text{Votre prochaine facture} &= \\$16 \\\\\n&+ \\text{prix unitaire supplémentaire} \\times \\\\\n\\quad & (\\text{quantité ajoutée} \\times \\text{temps restant au prorata lors de la création} \\\\\n\\quad &- \\text{quantité supprimée} \\times \\text{temps restant au prorata lors de la suppression}) \\\\\n\\quad &+ \\text{prix unitaire supplémentaire} \\times \\text{quantité restante}\n\\end{align*}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Role Mapping in WordPress\nDESCRIPTION: This PHP function maps Logto roles to WordPress user roles. It retrieves the user's roles from Logto claims stored in WordPress user metadata and assigns appropriate WordPress roles based on membership in specific Logto role groups. The function is attached to the WordPress login action hook.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/wordpress/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction logto_handler($user_login, $user = null) {\n\tif (!$user) {\n\t\t$user = get_user_by('login', $user_login);\n\t}\n\n\t$oidc_claims = get_user_meta($user->ID, 'openid-connect-generic-last-user-claim', true);\n\n\tif (in_array('group:editors', $oidc_claims['roles'])) {\n\t\t$user->set_role('editor');\n\t} else {\n\t\t$user->set_role('subscriber');\n\t}\n}\n\nadd_action('wp_login', 'logto_handler', 10, 2);\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto with Organizations Scope in Vue\nDESCRIPTION: Example showing how to set up Logto authentication in a Vue application with the Organizations scope enabled. This configuration allows the application to access organization-related features and data through Logto's authentication system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [UserScope.Organisations],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NpmLikeInstallation Component for Logto SvelteKit SDK\nDESCRIPTION: This code imports a reusable component for npm-like installations and uses it to display installation instructions for the @logto/sveltekit package. The component likely renders commands for different package managers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/sveltekit\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources Component in JSX\nDESCRIPTION: A React/JSX component setup that imports configuration code fragments and assembles them into a ConfigApiResources component. The component handles different aspects of API resource configuration including basic resources, scoped resources, and shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Diagramme de flux pour le cookie de session Logto isolé\nDESCRIPTION: Ce diagramme illustre comment un utilisateur doit se connecter séparément à différentes applications clientes à partir de différents agents utilisateurs, chacun ayant son propre cookie de session isolé sous le domaine Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/end-user-flows/sign-out.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    U[Utilisateur]\n\n    subgraph DeviceA [Agent utilisateur A]\n      subgraph Layer1 [Domaine client A]\n        A[Application cliente A]\n      end\n\n      subgraph Layer2 [Domaine Logto]\n          C{{Session de connexion Logto ?}}\n          D[Page de connexion]\n      end\n    end\n\n    subgraph DeviceB [Agent utilisateur B]\n      subgraph Layer3 [Domaine client B]\n        B[Application cliente B]\n      end\n\n      subgraph Layer4 [Domaine Logto]\n          E{{Session de connexion Logto ?}}\n          F[Page de connexion]\n      end\n    end\n\n    U --> |Connexion| A\n    A --> |Rediriger vers Logto| C\n    U --> |Connexion| B\n    B --> |Rediriger vers Logto| E\n    C --> |Non| D\n    E --> |Non| F\n    D --> |Créer session| C\n    F --> |Créer session| E\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Okta SSO Documentation\nDESCRIPTION: MDX import statements for various documentation fragments related to Okta SSO setup and configuration. These imports organize the documentation into modular sections for better maintainability.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-express-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Database with CLI\nDESCRIPTION: Commands to initialize the Logto database using the Logto CLI or npx. This is part of the Docker installation process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogto db seed\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db seed\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Access Token Documentation Components\nDESCRIPTION: MDX/JSX code that imports documentation fragments and composes them into a component for displaying access token fetching instructions. The code imports two fragments and uses them as props in a FetchAccessTokenForApiResources component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Fragmented MDX Guides for Express Integration (MDX/Javascript)\nDESCRIPTION: This snippet demonstrates how the documentation page composes its content by importing several MDX fragments and guides, each dedicated to a specific implementation step (such as application creation or connector setup). The imports allow for modular maintenance and dynamic assembly of workflow steps, directly leveraging React's import system within MDX. There are no external dependencies other than the referenced fragment files; the imported components are subsequently rendered as part of the main tutorial flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-sendgrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/express/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/sendgrid/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Displaying Popular Email Provider Connectors with DocCardList in MDX\nDESCRIPTION: This code creates a visual card list of popular email service providers that integrate with Logto. Each card contains an icon, title, description, and link to the specific integration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/email-connectors/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'AWS Direct Mail',\n      href: '/integrations/aws-ses',\n      description: 'The official Logto connector for AWS connector for direct mail service.',\n      customProps: {\n        icon: <AwsDm />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Mailgun',\n      href: '/integrations/mailgun',\n      description: 'The official Logto connector for Mailgun email service.',\n      customProps: {\n        icon: <Mailgun />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'SendGrid Email',\n      href: '/integrations/sendgrid-email',\n      description: 'The official Logto connector for SendGrid email service.',\n      customProps: {\n        icon: <SendGrid />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Aliyun Direct Mail',\n      href: '/integrations/aliyun-dm',\n      description: 'The official Logto connector for Aliyun connector for direct mail service.',\n      customProps: {\n        icon: <AliyunDm />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Postmark Mail',\n      href: '/integrations/postmark',\n      description: 'Logto connector for Postmark email service.',\n      customProps: {\n        icon: <Postmark />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Yarn Package Installation Command\nDESCRIPTION: Command to install Logto SDK using yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_npm-like-installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add {props.packageName}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Configuration Components in JSX\nDESCRIPTION: This code imports necessary components and renders the ConfigApiResources component with props for basic and scoped configuration code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In Method in CustomAuthManager for Flutter\nDESCRIPTION: Implements the sign-in method using Logto SDK to initiate the OIDC authentication flow and update the current user stream.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<CustomAuthUserProvider?> signIn(\n    String redirectUri,\n  ) async {\n    await logtoClient.signIn(redirectUri);\n\n    var idTokenClaims = await logtoClient.idTokenClaims;\n\n    return _updateCurrentUser(\n      loggedIn: idTokenClaims != null,\n      uid: idTokenClaims?.subject,\n      idToken: idTokenClaims,\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments using React (JSX)\nDESCRIPTION: This code snippet demonstrates the importation of various .mdx documentation fragments and guides, which are then injected as components within the React JSX page structure. These imports enable modular and maintainable documentation by allowing sections to be written separately and assembled within the main documentation file. There are no additional dependencies aside from support for .mdx file imports in a React/MDX-compatible environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token\nDESCRIPTION: Example showing how to access additional claims after requesting extended scopes using GetIdTokenClaims method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nidTokenClaims, error := client.GetIdTokenClaims()\n// Now you can access additional claims `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Job for Logto Database Alteration\nDESCRIPTION: Kubernetes job configuration for running Logto database alteration scripts in a non-interactive mode.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/deployment-and-configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: alteration\nspec:\n  template:\n    spec:\n      containers:\n        - name: alteration\n          image: ghcr.io/logto-io/logto\n          imagePullPolicy: Always\n          env:\n            - name: CI\n              value: 'true'\n            - name: DB_URL\n              value: postgresql://user:password@localhost:5432/logto\n          command:\n            - /bin/sh\n          args:\n            - '-c'\n            - 'npm run alteration deploy latest'\n      restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Functionality in Chrome Extension Popup\nDESCRIPTION: This JavaScript code adds event listeners to the sign-in and sign-out buttons in the popup, sending messages to the background script to initiate the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('sign-in').addEventListener('click', async () => {\n  await chrome.runtime.sendMessage({ action: 'signIn' });\n  // Inicio de sesión completado (o fallido), puedes actualizar la UI aquí.\n});\n\ndocument.getElementById('sign-out').addEventListener('click', async () => {\n  await chrome.runtime.sendMessage({ action: 'signOut' });\n  // Cierre de sesión completado (o fallido), puedes actualizar la UI aquí.\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Organization Scope in Dart\nDESCRIPTION: Configuration setup for Logto authentication including organization scopes. Sets the endpoint URL, application ID, and includes the organizations scope in the permissions list.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_organization-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [LogtoUserScopes.organizations.value]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: Sets up NextAuth.js authentication by configuring the Logto provider with specific OAuth scopes and resource endpoints. The configuration includes openid, offline_access, profile, read, and write scopes, targeting a shopping API resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile read write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in Nuxt Config\nDESCRIPTION: Defines Logto configuration in Nuxt.js with custom scopes for shopping and store operations, along with their corresponding API resource endpoints. The configuration includes read and write permissions for both shopping and store functionalities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings for Logto in Markdown\nDESCRIPTION: A markdown table showing the key-value storage configuration for Logto in the 'logto_configs' database table. It includes settings for OIDC cookie keys and private keys used for JWT signing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/core-service/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Key              | Type                  | Description                                                                                                                        |\n| ---------------- | --------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| oidc.cookieKeys  | <code>string[]</code> | The string array of the [signing cookie keys](https://github.com/panva/node-oidc-provider/blob/main/docs/README.md#cookieskeys).   |\n| oidc.privateKeys | <code>string[]</code> | The string array of the private key content for [OIDC JWT signing](https://openid.net/specs/openid-connect-core-1_0.html#Signing). |\n```\n\n----------------------------------------\n\nTITLE: Visualizing SP-initiated SAML Authentication Flow in Logto\nDESCRIPTION: This diagram illustrates the SP-initiated SAML authentication flow, where the process starts from the Service Provider (application). It shows the sequence of interactions between the User, Application, and Logto for SAML-based authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrate-logto/integrate-logto-into-your-application/understand-authentication-flow.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant User\n    participant Application\n    participant Logto\n\n    User->>Application: Click sign-in button\n    Application->>Logto: Send SAML authentication request\n    User->>Logto: Authenticate with Logto\n    Logto->>Application: Send SAML response with user info\n    Application->>User: Sign-in successful\n```\n\n----------------------------------------\n\nTITLE: Sample Social Identities JSON with Multiple Providers\nDESCRIPTION: Example of a user's identities object showing information stored when a user has connected accounts from multiple social providers (Facebook and Google). Includes user IDs and profile details from each provider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-data.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"facebook\": {\n    \"userId\": \"5110888888888888\",\n    \"details\": {\n      \"id\": \"5110888888888888\",\n      \"name\": \"John Doe\",\n      \"email\": \"johndoe@logto.io\",\n      \"avatar\": \"https://example.com/avatar.png\"\n    }\n  },\n  \"google\": {\n    \"userId\": \"111000000000000000000\",\n    \"details\": {\n      \"id\": \"111000000000000000000\",\n      \"name\": \"John Doe\",\n      \"email\": \"johndoe@gmail.com\",\n      \"avatar\": \"https://example.com/avatar.png\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign Out Route in PHP with Logto\nDESCRIPTION: Implements a sign-out route using Laravel's routing system that clears user authentication sessions and redirects to the home page. The code uses the Logto client's signOut method to handle the session cleanup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_implement-sign-out-route.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/sign-out', function () {\n  return redirect(\n    // Redirect the user to the home page after a successful sign-out\n    $client->signOut('${defaultBaseUrl}')\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Configuration Resource Components in React JSX\nDESCRIPTION: This JSX snippet composes the previously imported MDX and Markdown resource code modules into the ConfigApiResources component. It passes the configuration code examples as props, allowing for flexible presentation and switching of resource documentation. Inputs are React components rendered as properties, and the output is an assembled UI segment suitable for documentation display. This pattern requires React and the ability to import MDX/Markdown as components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in Python\nDESCRIPTION: This code initializes a LogtoClient object with a custom LogtoConfig. The configuration includes the UserInfoScope.organizations scope, which is highlighted as an important addition.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import LogtoClient, LogtoConfig, UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        scopes=[UserInfoScope.organizations],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Logto JS SDK and Angular OIDC with npm\nDESCRIPTION: Command to install @logto/js and angular-auth-oidc-client packages using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/js angular-auth-oidc-client\n```\n\n----------------------------------------\n\nTITLE: Displaying Extra Claim Data from Logto Context in Next.js Frontend (TypeScript)\nDESCRIPTION: This snippet fetches user information from the /api/logto/user endpoint using SWR and selectively displays the user\\'s email claim if present. It assumes the existence of a LogtoContext and a configured frontend. Dependencies: SWR, @logto/next. Outputs an email paragraph or nothing if email is missing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst Home = () => {\\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\\n\\n  const email = data?.claims?.email;\\n\\n  return (\\n    <div>\\n      {email && <p>Email: {email}</p>}\\n    </div>\\n  );\\n};\\n\\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Creating a Home Controller for Spring Security OAuth2 Application\nDESCRIPTION: A controller that handles requests to the home page and redirects to the user page if authenticated. It defines routes for the root path and '/home'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport java.security.Principal;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HomeController {\n  @GetMapping({ \"/\", \"/home\" })\n  public String home(Principal principal) {\n    return principal != null ? \"redirect:/user\" : \"home\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration for Capacitor in TypeScript\nDESCRIPTION: Creates a LogtoConfig object with the necessary properties for Logto authentication in a Capacitor application. The configuration includes the application ID, Logto endpoint, and an array of API resources that the application will access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API 리소스를 추가하세요\n};\n```\n\n----------------------------------------\n\nTITLE: Importing API Token Fetch Fragments in Next.js - JavaScript\nDESCRIPTION: This code snippet imports two components: one for demonstrating the process of fetching access tokens for API resources, and another containing sample code. The imported components are then composed in JSX, with the code example passed as a prop to customize the fragment's behavior or documentation rendering. Dependencies include React, support for JSX syntax, and the presence of the referenced MDX/MD files in the file system. Inputs are the components and props, while outputs are the rendered UI fragment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK and Dependencies with Yarn\nDESCRIPTION: This snippet demonstrates the installation of the Logto SDK and its peer dependencies using Yarn. It adds @logto/capacitor and the required Capacitor plugins to the project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/capacitor\nyarn add @capacitor/browser @capacitor/app @capacitor/preferences\n```\n\n----------------------------------------\n\nTITLE: Implementing User Controller with OAuth2 Authentication\nDESCRIPTION: Controller that handles user-specific routes and retrieves OAuth2 user details from the authentication token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport java.security.Principal;\nimport java.util.Map;\n\nimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n\n  @GetMapping\n  public String user(Model model, Principal principal) {\n    if (principal instanceof OAuth2AuthenticationToken) {\n      OAuth2AuthenticationToken token = (OAuth2AuthenticationToken) principal;\n      OAuth2User oauth2User = token.getPrincipal();\n      Map<String, Object> attributes = oauth2User.getAttributes();\n\n      model.addAttribute(\"username\", attributes.get(\"username\"));\n      model.addAttribute(\"email\", attributes.get(\"email\"));\n      model.addAttribute(\"sub\", attributes.get(\"sub\"));\n    }\n\n    return \"user\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing New Translation CLI Command\nDESCRIPTION: Demonstrates how to execute translation commands with the new standalone translation package. This is the current method after the translation command was moved out of @logto/cli.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/translate-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm translate <command> [options]\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Multiple API Resources in Python\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with a custom configuration that includes multiple API resources. The resources are specified as a list of URLs, which are likely to be used for authentication and authorization purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], # Ajouter des ressources API\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with React Native and Logto\nDESCRIPTION: Example of how to implement user information display using the Logto authentication in a React Native application. The code demonstrates using getIdTokenClaims() to fetch user claims and conditionally render user information based on authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/get-user-information/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { getIdTokenClaims, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      // highlight-start\n      getIdTokenClaims().then((claims) => {\n        setUser(claims);\n      });\n      // highlight-end\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Flutter Widget with Logto Authentication\nDESCRIPTION: A Flutter widget state class implementation that builds a UI with authentication controls. It includes buttons for sign-in/sign-out and retrieving user information via Logto client, with conditional rendering based on authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_fetch-userinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget getUserInfoButton = TextButton(\n      onPressed: () async {\n        // highlight-start\n        final userInfo = await logtoClient.getUserInfo();\n        print(userInfo);\n        // highlight-end\n      },\n      child: const Text('Get user info'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n            isAuthenticated == true ? getUserInfoButton : const SizedBox.shrink(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth.js v5 Middleware for Session Management\nDESCRIPTION: Implements optional middleware to maintain authentication sessions across routes in a Next.js application using Auth.js v5.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { auth as middleware } from '@/auth';\n```\n\n----------------------------------------\n\nTITLE: Adding Logto Authentication with API Resource in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to add Logto authentication to the service collection in an ASP.NET Core application. It specifically highlights the configuration of the API resource indicator, which is essential for securing API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.Resource = \"https://<your-api-resource-indicator>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Decorator in Python Flask\nDESCRIPTION: Defines a decorator function that checks if a user is authenticated before allowing access to a route. It can optionally redirect unauthenticated users or fetch user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom flask import g, jsonify, redirect\nfrom samples.client import client\ndef authenticated(shouldRedirect: bool = False, fetchUserInfo: bool = False):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            if client.isAuthenticated() is False:\n                if shouldRedirect:\n                    return redirect(\"/sign-in\")\n                return jsonify({\"error\": \"Not authenticated\"}), 401\n            # Store user info in Flask application context\n            g.user = (\n                await client.fetchUserInfo()\n                if fetchUserInfo\n                else client.getIdTokenClaims()\n            )\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Route in Flask with Logto\nDESCRIPTION: Sets up a '/sign-out' route that handles user sign-out by clearing both the Python session and Logto authentication data. After signing out, the user is redirected to the specified post-logout URL, typically the application's home page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-out\")\nasync def sign_out():\n    return redirect(\n        # Redirect the user to the home page after a successful sign-out\n        await client.signOut(postLogoutRedirectUri=\"${defaultBaseUrl}\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Generating Keys and Certificates for SAML Authentication using OpenSSL\nDESCRIPTION: Command-line examples for generating private keys and certificates using OpenSSL. These are required when signing authentication requests or encrypting SAML assertions. The private key is encoded in pkcs1 scheme as a PEM string.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/saml/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -passout pass:${privateKeyPassword} -out ${encryptPrivateKeyFilename}.pem 4096\nopenssl req -new -x509 -key ${encryptPrivateKeyFilename}.pem -out ${encryptionCertificateFilename}.cer -days 3650\n```\n\n----------------------------------------\n\nTITLE: Importing Logto API Resource Configuration Components\nDESCRIPTION: This code snippet imports various React components and code snippets related to API resource configuration and access token retrieval in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiResourcesDescription from '../../fragments/_api-resources-description.md';\nimport ConfigApiResources from '../../fragments/_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from '../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code-snippets/_get-resource-access-token.md';\nimport ConfigResourcesCode from './code-snippets/_resource-config-code.md';\nimport ConfigResourcesWithScopesCode from './code-snippets/_resource-with-scopes-config-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code-snippets/_resource-with-shared-scopes-config-code.md';\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Scopes and Resources in PHP\nDESCRIPTION: This PHP snippet demonstrates initializing a `LogtoClient` instance with a `LogtoConfig`. It specifically shows how to pass arrays of requested permission scopes (e.g., 'shopping:read') and target API resource identifiers (URLs like 'https://shopping.your-app.com/api') to the configuration. Requires the Logto PHP SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php title=\"index.php\"\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"], // Añadir alcances\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Añadir recursos de API\n    // highlight-end\n  ),\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Direct Enterprise SSO Sign-in with cURL\nDESCRIPTION: A curl command example showing how to construct an authentication request URL with the direct_sign_in parameter for enterprise SSO authentication, using a specific connector ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/authentication-parameters/direct-sign-in.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location \\\n  --request GET 'https://[tenant-id].logto.app/oidc/auth?client_id=1234567890&...&direct_sign_in=sso:1234567890'\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Fetching Components in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then configures the FetchOrganizationTokenForUser component with required props. It sets up the organization scope and provides code for configuring the organization and getting the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Event Handlers in Popup\nDESCRIPTION: JavaScript code to add event listeners to the sign-in and sign-out buttons in the extension popup, communicating with the service worker via message passing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('sign-in').addEventListener('click', async () => {\n  await chrome.runtime.sendMessage({ action: 'signIn' });\n  // Connexion terminée (ou échouée), vous pouvez mettre à jour l'interface utilisateur ici.\n});\n\ndocument.getElementById('sign-out').addEventListener('click', async () => {\n  await chrome.runtime.sendMessage({ action: 'signOut' });\n  // Déconnexion terminée (ou échouée), vous pouvez mettre à jour l'interface utilisateur ici.\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Route with Sign-Up Interaction Mode in Flask\nDESCRIPTION: Creates a '/sign-in' route that displays the sign-up page as the first screen when redirecting to Logto. This variation uses the interactionMode parameter set to 'signUp' to control the initial UI presentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-in\")\nasync def sign_in():\n    return redirect(await client.signIn(\n        redirectUri=\"${defaultRedirectUri}\",\n        interactionMode=\"signUp\", # Show the sign-up page on the first screen\n    ))\n```\n\n----------------------------------------\n\nTITLE: Downloading Logto with Custom URL\nDESCRIPTION: Command to initialize Logto with npm while specifying a custom download URL for the Logto archive, useful for installing specific versions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @logto@latest -- --download-url=https://github.com/logto-io/logto/releases/download/v1.2.2/logto.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims\nDESCRIPTION: Example of accessing additional claims after configuring extended scopes using getIdTokenClaims() method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Ahora puedes acceder a los reclamos adicionales `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: OAuth Flow Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the flow of social authentication between end user, Logto, and third-party platform\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/develop-your-connector/implement-connectors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tactor user as End user\n\tparticipant logto as Logto\n\tparticipant platform as Third-party social platform\n\n\tuser ->> logto: User initiates social sign-in\n\tlogto ->> platform: Logto redirects to the third-party social platform\n\tplatform -->> user: Social platform prompts user to sign in\n\tuser ->> platform: User signs in and authorizes Logto's access\n\tplatform -->> logto: Redirect back to Logto callback URI with an authorization code\n\tlogto ->> platform: Logto exchange the code for an access token\n\tplatform -->> logto: Social platform returns the access token\n\tlogto ->> platform: Logto fetches user information with the access token\n\tplatform -->> logto: Social platform returns the user information\n\tlogto -->> user: Logto returns the user information to the user app, <br> completes the sign-in flow\n```\n\n----------------------------------------\n\nTITLE: 사용자 정보 표시 - Flutter\nDESCRIPTION: Flutter 앱에서 logtoClient.idTokenClaims getter를 사용하여 사용자 정보를 표시하는 방법을 보여줍니다. 이 코드는 사용자의 이름과 이메일을 Text 위젯으로 표시합니다.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nText('Name: ${logtoClient.idTokenClaims?.name ?? 'N/A'}'),\nText('Email: ${logtoClient.idTokenClaims?.email ?? 'N/A'}'),\n```\n\n----------------------------------------\n\nTITLE: Adding Sign-in and Sign-out Buttons to Chrome Extension Popup HTML\nDESCRIPTION: This HTML snippet shows how to add sign-in and sign-out buttons to the popup page of a Chrome extension. These buttons will trigger the authentication actions when clicked.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"sign-in\">Sign in</button> <button id=\"sign-out\">Sign out</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Blazor appsettings.json\nDESCRIPTION: This JSON configuration snippet shows how to request additional scopes in a Blazor application by adding them to the IdentityServer.Scope property in the appsettings.json file. It includes openid, profile, email, and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_fetch-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"IdentityServer\": {\n    // ...\n    // highlight-next-line\n    \"Scope\": \"openid profile email phone\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Messages in Chrome Extension Background Script\nDESCRIPTION: This snippet sets up a message listener in the background script to handle sign-in and sign-out actions from other parts of the extension. It uses the Chrome Identity API to generate redirect URIs for the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.action === 'signIn') {\n    const redirectUri = chrome.identity.getRedirectURL('/callback');\n    logtoClient.signIn(redirectUri).finally(sendResponse);\n    return true;\n  }\n\n  if (message.action === 'signOut') {\n    const redirectUri = chrome.identity.getRedirectURL();\n    logtoClient.signOut(redirectUri).finally(sendResponse);\n    return true;\n  }\n\n  return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Initiating Direct Social Sign-In with cURL in Shell\nDESCRIPTION: This snippet demonstrates how to construct an authentication request URL with the direct_sign_in parameter for social sign-in using cURL. It shows the usage of the 'social:google' value for direct Google authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/authentication-parameters/direct-sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location \\\n  --request GET 'https://[tenant-id].logto.app/oidc/auth?client_id=1234567890&...&direct_sign_in=social:google'\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationEntity Type in TypeScript\nDESCRIPTION: This code snippet defines the structure of an ApplicationEntity object, which represents an application in the Logto system. It includes properties such as ID, name, and description.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/developers/webhooks/request.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype ApplicationEntity = {\n  id: string;\n  name: string;\n  description?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Server Authentication Hook - TypeScript\nDESCRIPTION: This snippet sets up an authentication handler with Logto in a TypeScript server environment. It specifies detailed OAuth scopes (such as 'shopping:read', 'shopping:write', etc.) and API resource URLs required for the application. The snippet depends on the Logto library and expects the handler to be integrated into a larger authentication middleware system. It focuses on declarative access control, defining the required permissions and API endpoints for user and store access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources Component with Code Examples\nDESCRIPTION: Renders the ConfigApiResources component with various code examples passed as props. The component displays documentation about configuring resources with different scoping approaches.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig with Organization Scopes in Dart\nDESCRIPTION: This snippet demonstrates how to initialize LogtoConfig with the required parameters including endpoint, appId, and organization scopes. The highlighted section shows the addition of organization scopes which is necessary for accessing organization-related features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_organization-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [LogtoUserScopes.organizations.value]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in Nuxt Component\nDESCRIPTION: This snippet demonstrates how to implement sign-in and sign-out functionality in a Nuxt component using the useLogtoUser composable.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { useLogtoUser } from '#imports'; // Añade esta línea si la importación automática está deshabilitada\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- Botón simplificado para iniciar y cerrar sesión -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Introduction Component in MDX\nDESCRIPTION: This MDX/JSX snippet renders the `Intro` component, likely defined in `./fragments/_intro.mdx`. It passes the `connector` variable (holding 'GitHub'), the SDK name 'PHP', and a link to 'https://www.php.net' as properties (props) to customize the introductory content for this specific tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-github.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"PHP\" link=\"https://www.php.net\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Swift\nDESCRIPTION: This Swift code snippet demonstrates how to configure and initialize a `LogtoClient`. It sets up the `LogtoConfig` with the necessary endpoint and app ID, and specifically includes custom scopes (`read`, `write`) and target API resources. This configuration is then used to instantiate the `LogtoClient`. Requires the Logto Swift SDK. Placeholders `<your-logto-endpoint>` and `<your-app-id>` need to be replaced with actual values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"read\", \"write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in MDX\nDESCRIPTION: Imports and assembles MDX components for organization token configuration and retrieval functionality\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Passport.js Middleware in Application Entry\nDESCRIPTION: This snippet shows how to initialize the Passport.js configuration and set up the session authentication middleware in the main application file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport initPassport from './passport';\n\n// ... other code\ninitPassport();\n// ... other code\napp.use(passport.authenticate('session'));\n// ... other code\n```\n\n----------------------------------------\n\nTITLE: Displaying Sign-In/Sign-Out Button Based on Authentication State in Next.js\nDESCRIPTION: This code snippet demonstrates how to conditionally render sign-in or sign-out buttons on a Next.js page based on the user's authentication state using Auth.js.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport SignIn from './components/sign-in';\nimport SignOut from './components/sign-out';\nimport { auth } from '@/auth';\n\nexport default function Home() {\n  const session = await auth();\n\n  return <div>{session?.user ? <SignOut /> : <SignIn />}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: 사용자 정보 가져오기 - Flutter\nDESCRIPTION: logtoClient.getUserInfo() 메소드를 사용하여 사용자 정보를 가져오는 방법을 보여줍니다. 이 메소드는 Future<Map<String, dynamic>> 타입을 반환합니다.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal userInfo = await logtoClient.getUserInfo();\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in a Svelte Component\nDESCRIPTION: Shows how to access and display user information in a Svelte component by iterating through the user object properties.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n</script>\n\n{#if data.user}\n<ul>\n  {#each Object.entries(data.user) as [key, value]}\n  <li>{key}: {value}</li>\n  {/each}\n</ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 with Logto OIDC Provider\nDESCRIPTION: Configures Auth.js v5 with Logto as an OIDC provider. This setup includes specifying the issuer URL, client credentials, authorization scope, and a profile mapping function.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oidc',\n      // Você pode obter o valor do emissor na página de Detalhes do Aplicativo Logto,\n      // no campo \"Endpoint do emissor\"\n      issuer: 'https://xxxx.logto.app/oidc',\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      authorization: {\n        params: { scope: 'openid offline_access profile email' },\n      },\n      profile(profile) {\n        // Você pode personalizar o mapeamento do perfil do usuário aqui\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Fetching in React\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring organizations and fetching organization tokens in a React application using Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out with useLogto Hook\nDESCRIPTION: This React Native component uses the useLogto hook to implement sign-in and sign-out functionality, displaying different buttons based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button } from 'react-native';\n\nconst Content = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <Button title=\"Sign out\" onPress={async () => signOut()} />\n      ) : (\n        // 리디렉트 URI를 자신의 것으로 교체하세요\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Integration with Organizations Scope in Vue\nDESCRIPTION: This snippet shows how to initialize Logto integration in a Vue application using the createLogto function. It specifically highlights the addition of the Organizations user scope to the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [UserScope.Organizations],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Logto Application Creation Component in MDX\nDESCRIPTION: This MDX/JSX snippet renders the `CreateApplication` component, likely defined in `./fragments/_create-application.mdx`. It passes the `type` 'Traditional web' and `framework` 'Laravel' as props to tailor the instructions for creating a suitable Logto application for a Laravel web app.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-github.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<CreateApplication type=\"Traditional web\" framework=\"Laravel\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Step Components for Google SSO Integration Guide in JSX\nDESCRIPTION: Imports modular step components that contain the content for each step of the Google SSO integration guide. These components are then referenced in the document structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sso/google-workspace/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step1 from './_step-1.mdx';\nimport Step2 from './_step-2.mdx';\nimport Step3 from './_step-3.mdx';\nimport Step4 from './_step-4.mdx';\nimport Step5 from './_step-5.mdx';\nimport Step6 from './_step-6.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Access Token Component in React (JSX)\nDESCRIPTION: This snippet renders the 'FetchAccessTokenForApiResources' React component, supplying it with properties for the API method name and a code sample component. The props include 'getAccessTokenApi', which names the access token API operation to use, and 'getAccessTokenCode', which embeds a code block. This pattern facilitates dynamic, example-driven documentation within a React app. Usage requires that the imported component and code modules resolve correctly and that the surrounding environment processes MDX or MD imports.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting Logto with Docker Compose\nDESCRIPTION: Command to pull and run Logto using Docker Compose. This method is not recommended for production use as it bundles a Postgres database which resets on each run.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/logto-io/logto/HEAD/docker-compose.yml | docker compose -p logto -f - up\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Fragments for API Access Token Documentation in JSX\nDESCRIPTION: This code imports MDX fragments and combines them into a component that provides documentation on fetching access tokens for API resources. It passes custom parameters including the API endpoint name and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"access_tpken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in MDX (JavaScript)\nDESCRIPTION: This JavaScript code snippet, embedded within an MDX file, exports a constant named `connector` assigned the string value 'OIDC enterprise SSO'. This constant is intended to be passed as a prop to imported React components (MDX partials like Intro, SaveYourConfiguration, etc.) within the MDX document, allowing for dynamic content rendering based on the specific SSO connector being discussed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-ios-swift-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Documentation Assembly - JavaScript\nDESCRIPTION: This snippet demonstrates how the documentation file structures its content by importing modular MDX fragments for each onboarding/tutorial step. Dependencies are MDX fragment files located in the local or project-specific directories. There are no runtime parameters beyond import paths, and the code's output is the compiled documentation. This approach centralizes step content outside the main file, promoting reusability and neat organization. No direct PHP or backend code is present.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-kakao.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/php/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/kakao/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: SDK Frontmatter Configuration Example in Markdown\nDESCRIPTION: Example frontmatter for a .NET Blazor WebAssembly SDK guide showing the required properties for tutorial generation, including language, official documentation link, app type, framework name, and optional tutorial name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/plugins/tutorial-generator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlanguage: c#\nofficial_link: https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#blazor-webassembly\napp_type: Single page app\nframework: .NET Core (Blazor WebAssembly)\ntutorial_name: .NET Core (Blazor WebAssembly)\n---\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto API Resources Configuration Components\nDESCRIPTION: This JSX code imports Markdown fragments for API resource configuration examples and renders them using the ConfigApiResources component. The imports include basic resource configuration, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initialize Logto Client with Organization Scope\nDESCRIPTION: Creates a new Logto client instance with organization scope configuration. Requires logto/core and logto/client modules and sets up the client with necessary configurations including organization-specific user scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/core\"\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...autres configurations\n    # highlight-next-line\n    scopes: [LogtoCore::USER_SCOPE[:organizations]]\n  ),\n  # ...autres configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components\nDESCRIPTION: Imports multiple MDX fragments and code files, then composes them into a ConfigApiResources component to display API resource configuration examples. The component accepts three code snippets as props for different resource configuration scenarios.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Aliyun DM Connector Configuration JSON Structure\nDESCRIPTION: JSON structure for configuring the Aliyun Direct Mail connector in Logto, including access credentials, sender information, and email templates for different authentication flows.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/integrations/email/aliyun-dm/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessKeyId\": \"your_access_key_id\",\n  \"accessKeySecret\": \"your_access_key_secret\",\n  \"accountName\": \"your_sender_address\",\n  \"fromAlias\": \"your_email_tag\",\n  \"templates\": [\n    {\n      \"subject\": \"Your email subject\",\n      \"content\": \"Your email content with {{code}} placeholder\",\n      \"usageType\": \"Register\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token in Swift\nDESCRIPTION: Obtains an organization token for a specific organization ID using the Swift SDK, which can be used for authenticating requests to organization-specific resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet token = try await client.getOrganizationToken(forId: \"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Go Logto SDK\nDESCRIPTION: This code snippet shows how to configure additional scopes in the LogtoConfig object. It demonstrates adding 'email' and 'phone' scopes to request additional claims from the authentication server.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Hooks in SvelteKit\nDESCRIPTION: This snippet shows how to use the sequence() helper function to chain multiple hooks in SvelteKit, including the Logto hook.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sequence } from '@sveltejs/kit/hooks';\n\nexport const handle = sequence(handleLogto, handleOtherHook);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in Python\nDESCRIPTION: This snippet shows how to create a LogtoClient instance with specific API resources defined in the LogtoConfig. The resources parameter takes a list of API endpoints that the client needs access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], # Add API resources\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders a ConfigApiResources component with the imported code examples as props. It demonstrates how to structure and compose documentation for API resource configuration in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resource Configuration Examples using MDX\nDESCRIPTION: This MDX snippet renders the `ConfigApiResources` component. It passes the previously imported code example components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) as props. This allows the `ConfigApiResources` component to dynamically display different code examples for configuring API resources, potentially within tabs or sections.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Apple Sign-In Tutorial\nDESCRIPTION: This code renders the imported MDX components, structuring the tutorial content. It includes sections for introduction, application creation, integration steps, connector setup, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-apple.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (MVC)\" link=\"https://dotnet.microsoft.com/apps/aspnet/mvc\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\".NET Core (MVC)\" />\n\n## Integrate .NET Core (MVC) with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add Apple connector \\{#add-connector-connector}\n\n<AddSocialConnector connector={connector} framework=\".NET Core (MVC)\" />\n\n## Set up Apple Sign-in \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Apple connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSocialConnector connector={connector} />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (MVC)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: HTTP Response for Successful Token Exchange in Logto\nDESCRIPTION: Example of an HTTP response from a successful token exchange request. The response includes the access_token, token_type, issued_token_type, expires_in, and scope in JSON format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/personal-access-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"access_token\": \"eyJhbGci...zg\",\n  \"issued_token_type\": \"urn:ietf:params:oauth:token-type:access_token\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"profile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Solicitud de token con código de autorización\nDESCRIPTION: Ejemplo de una solicitud POST para intercambiar un código de autorización por un token de acceso, especificando el recurso objetivo.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPOST https://tenant-id.logto.app/oidc/token HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&code=10esc29BWC2qZB0acc9v8zAv9ltc2pko105tQauZ&resource=https%3A%2F%2Fresource-server.com%2Fapi\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Functionality in Flutter with Logto\nDESCRIPTION: Implements the sign-in functionality using Logto SDK by adding a sign-in button that invokes the logtoClient.signIn method with a redirect URI. The redirect URI must be configured in the Logto admin console before use.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  final redirectUri = 'io.logto://callback';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signInButton = TextButton(\n      onPressed: () async {\n        // highlight-start\n        await logtoClient.signIn(redirectUri);\n        render();\n        // highlight-end\n      },\n      child: const Text('Sign In'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering MDX Components with Code Props\nDESCRIPTION: Imports MDX fragments and code components, then renders a ScopesAndClaims component with code configuration passed as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Snippets for Organization Token Handling in React\nDESCRIPTION: This snippet imports necessary components and code snippets for configuring organizations and fetching organization access tokens. It then uses a custom component to handle the organization token retrieval process for user authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK with Organization Scope for Capacitor in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Logto SDK configuration for Capacitor, specifically including the Organizations scope. It imports required types from the '@logto/capacitor' package and defines a configuration object with the appropriate scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organisations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in Logto (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to extend the Logto configuration object by adding a 'resources' property, which is an array of API endpoint URLs. The configuration is intended for applications using Logto for authentication and authorization control over multiple REST API resources. The key parameter 'resources' must be an array of strings (API base URLs). The dependencies include the Logto client library and a compatible TypeScript environment. This configuration is used during Logto client initialization and enables access control for the specified API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 新增 API 資源 (API resources)\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Services in Blazor WASM Program.cs\nDESCRIPTION: Sets up the Blorc OpenID Connect services in the Blazor WebAssembly Program.cs file. It configures authentication, authorization, and document injection for OpenID Connect functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blorc.OpenIdConnect;\nusing Blorc.Services;\n\nbuilder.Services.AddBlorcCore();\nbuilder.Services.AddAuthorizationCore();\nbuilder.Services.AddBlorcOpenIdConnect(\n    options =>\n    {\n        builder.Configuration.Bind(\"IdentityServer\", options);\n    });\n\nvar webAssemblyHost = builder.Build();\n\nawait webAssemblyHost\n    .ConfigureDocumentAsync(async documentService =>\n    {\n        await documentService.InjectBlorcCoreJsAsync();\n        await documentService.InjectOpenIdConnectAsync();\n    });\n\nawait webAssemblyHost.RunAsync();\n```\n\n----------------------------------------\n\nTITLE: Using Logto Authentication Hook in React Component\nDESCRIPTION: This React component demonstrates how to use the Logto authentication hook to check if a user is authenticated and retrieve an access token for a specific API resource. It uses the useLogto hook and React's useState and useEffect hooks to manage the authentication state and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Fetching Components in React (JavaScript)\nDESCRIPTION: This snippet imports a reusable React fragment component responsible for fetching access tokens and a code snippet containing example token fetching logic. No external dependencies are specified beyond React and relevant file paths. It sets the foundation for composing a documentation or demo page that demonstrates secure access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Pulling Logto Docker Image\nDESCRIPTION: Docker commands to pull the latest Logto image from GitHub Container Registry or DockerHub.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr\ndocker pull ghcr.io/logto-io/logto:latest\n# DockerHub\ndocker pull svhd/logto:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Settings in appsettings.json\nDESCRIPTION: JSON configuration for the Logto OpenID Connect authentication. It specifies the authority URL, client ID, redirect URIs, response type, and required scopes for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ...\n  IdentityServer: {\n    Authority: 'https://<your-logto-endpoint>/oidc',\n    ClientId: '<your-logto-app-id>',\n    PostLogoutRedirectUri: '${defaultBaseUrl}',\n    RedirectUri: '${defaultRedirectUri}',\n    ResponseType: 'code',\n    Scope: 'openid profile', // 必要に応じてスコープを追加\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token for API Resources in Logto\nDESCRIPTION: This code snippet shows how to fetch an access token for API resources in Logto. It uses the getAccessToken API and includes a code example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Organizations Scope in Nuxt Config\nDESCRIPTION: This snippet shows how to enable Organizations scope in Logto configuration for a Nuxt.js application. It imports the UserScope enum from @logto/nuxt package and adds the Organizations scope to the Logto configuration object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    scopes: [UserScope.Organizations],\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Endpoint Claims\nDESCRIPTION: Shows how to enable fetching additional claims from the user info endpoint by configuring the GetClaimsFromUserInfoEndpoint option.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.GetClaimsFromUserInfoEndpoint = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-Out Button Component for Next.js\nDESCRIPTION: Implements a client-side Sign-Out button component that triggers the logout flow when clicked. This component accepts an onSignOut callback function that will be executed on button click.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignOut: () => Promise<void>;\n};\n\nconst SignOut = ({ onSignOut }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignOut();\n      }}\n    >\n      Sign Out\n    </button>\n  );\n};\n\nexport default SignOut;\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Logto Dart SDK in Flutter\nDESCRIPTION: This YAML snippet shows how to update the pubspec.yaml file to use the latest version of the Logto Dart SDK. It specifies the dependency on logto_dart_sdk version 3.0.0 or higher.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  logto_dart_sdk: ^3.0.0\n```\n\n----------------------------------------\n\nTITLE: Removing Social Connection from User Account in Logto\nDESCRIPTION: This snippet shows how to remove an existing social connection from a user account using the DELETE endpoint. It requires the connector target ID and verification record ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://[tenant-id].logto.app/api/my-account/identities/[connector_target_id] \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'logto-verification-id: <verification_record_id>'\n```\n\n----------------------------------------\n\nTITLE: Importing Logto SDK in Webflow Head Code\nDESCRIPTION: This code snippet imports the Logto Browser SDK from jsdelivr CDN and initializes a global logtoClient instance for use across the website. It requires your Logto endpoint and application ID to be configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_init-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Importiere das `@logto/browser` SDK von der jsdelivr CDN\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  // Weise die `logtoClient` Instanz dem Fensterobjekt zu,\n  // um die globale Nutzung auf anderen Seiten zu ermöglichen\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>', // z.B. http://localhost:3001\n    appId: '<your-application-id>',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding WeChat SDK Dependency in Gradle (Kotlin)\nDESCRIPTION: This Kotlin code snippet adds the WeChat Open SDK for Android as an API dependency to the Android project using the Kotlin Gradle script (`build.gradle.kts`). This makes the WeChat SDK classes available to the application module.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  // ...\n  api(\"com.tencent.mm.opensdk:wechat-sdk-android:6.8.0\")  // kotlin-script\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto API Resource Configuration Components\nDESCRIPTION: This code imports documentation fragments and code examples for configuring API resources in Logto, then renders them using the ConfigApiResources component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client Initialization\nDESCRIPTION: This code snippet demonstrates how to request additional scopes when initializing the Logto client in a Next.js application. It uses the UserScope enum to specify email and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { UserScope, LogtoNextConfig } from '@logto/next';\n\nexport const logtoConfig: LogtoNextConfig = {\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone], // 必要に応じてスコープを追加\n  // ...他の設定\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Logto CLI globally with npm\nDESCRIPTION: Installs the Logto CLI package globally using npm package manager, making the 'logto' command available system-wide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/cli -g\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Documentation Fragments for Access Token Fetching in React/MDX\nDESCRIPTION: This code imports MDX fragments for documenting access token fetching processes in Logto, then composes them into a reusable documentation component. It combines a general explanation with specific code implementation examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto PHP Client with Organization Scope\nDESCRIPTION: Demonstrates how to create a new LogtoClient instance with organization scopes enabled. Uses the UserScope constant to specify organization access and configures it through the LogtoConfig constructor.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// highlight-next-line\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    scopes: [UserScope::organizations], // スコープを追加\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Interactive Logto Installation Commands\nDESCRIPTION: Basic commands to initiate an interactive Logto installation using either CLI or npm.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/install-logto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlogto init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @logto@latest\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources Component with Code Snippets in JSX\nDESCRIPTION: This snippet imports the ConfigApiResources component and three code snippet components, then renders ConfigApiResources with the code snippets as props. It demonstrates how to configure API resources with various scope configurations in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in Ruby\nDESCRIPTION: This code snippet illustrates how to create a new LogtoClient instance with configured API resources. It defines two API endpoints as resources for authentication purposes, which are essential for controlling access to different parts of your application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-next-line\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"] # API リソースを追加\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: MFA Verification Factors Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the mfaVerificationFactors array, which lists the multi-factor authentication methods associated with a user account.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmfaVerificationFactors: (\"Totp\" | \"WebAuthn\" | \"BackupCode\")[];\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Email Usage Types\nDESCRIPTION: Example JSON structure showing how to define usage types for different email scenarios in the Mailgun connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/email/mailgun/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"<usage-type>\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Custom Data\nDESCRIPTION: Example of using FetchUserInfo method to retrieve additional user information including custom data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nuserInfo, error := client.FetchUserInfo()\n// Now you can access the claim `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation and Code Fragments with React and MDX (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import MDX documentation fragments and code samples into a React/Next.js project. The imported components are then used within JSX to compose a documentation page. There are no complex dependencies beyond React and the project's MDX fragment files; expected inputs are the fragment export paths and the rendering container, while the output is a set of structured documentation sections. Limitations include reliance on the existing MDX file structure and correct import paths.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport GetUserInfoApis from '../../fragments/_get-user-info-apis.mdx';\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Adding Logto SDK URL to Swift Package Manager\nDESCRIPTION: This code snippet provides the GitHub URL for the Logto Swift SDK repository. It is used to add Logto SDK as a dependency in Swift Package Manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/_add-sdk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/logto-io/swift.git\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Fetching in Logto Express Configuration\nDESCRIPTION: This code snippet shows how to enable the fetchUserInfo option in the Logto Express configuration, which allows retrieving additional user information from the UserInfo endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // highlight-next-line\n  fetchUserInfo: true,\n  // ...other configs\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources in Logto TypeScript Configuration\nDESCRIPTION: This code snippet demonstrates how to define scopes and resources in the Logto configuration. It specifies 'read' and 'write' scopes and configures two API resources with their respective URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Discord Connector Configuration - JavaScript\nDESCRIPTION: This entry exports a constant named 'connector' with the value 'Discord', making it available to other components or content in the documentation. This shared variable simplifies passing connector-specific values into imported MDX fragments. No external dependencies are required.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-discord.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const connector = 'Discord';\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication State in Chrome Extension Popup\nDESCRIPTION: This code demonstrates how to check the authentication state and load user profile information in the extension popup. It uses the Logto client to verify authentication and retrieve ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst loadAuthenticationState = async () => {\n  const isAuthenticated = await logtoClient.isAuthenticated();\n  // Update the UI based on the authentication state\n\n  if (isAuthenticated) {\n    const user = await logtoClient.getIdTokenClaims(); // { sub: '...', email: '...', ... }\n    // Update the UI with the user's profile\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Basic Account Information (Bash)\nDESCRIPTION: This snippet demonstrates how to update basic account information like username, name, and avatar using the Account API. It sends a PATCH request with the updated information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH https://[tenant-id].logto.app/api/my-account \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'content-type: application/json' \\\n  --data-raw '{\"username\":\"...\",\"name\":\"...\",\"avatar\":\"...\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining UserEntity Type in TypeScript\nDESCRIPTION: This code snippet defines the structure of a UserEntity object, which represents a user in the Logto system. It includes various user properties such as ID, username, email, phone, and custom data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/developers/webhooks/request.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UserEntity = {\n  id: string;\n  username?: string;\n  primaryEmail?: string;\n  primaryPhone?: string;\n  name?: string;\n  avatar?: string;\n  customData?: object;\n  identities?: object;\n  lastSignInAt?: string;\n  createdAt?: string;\n  applicationId?: string;\n  isSuspended?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Options in C#\nDESCRIPTION: Shows how to set up Logto authentication by configuring the resource endpoint and required authentication scopes. The code defines the API resource URL and specifies multiple OAuth scopes including openid, profile, offline_access, read, and write permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Resource = \"https://shopping.your-app.com/api\";\n  options.Scopes = new string[] {\n    \"openid\",\n    \"profile\",\n    \"offline_access\",\n    \"read\",\n    \"write\"\n  };\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It demonstrates how to structure and compose documentation for API resource configuration in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes with String Array in Logto PHP SDK\nDESCRIPTION: Demonstrates how to request additional scopes by setting the scopes option during LogtoClient initialization using string values for the scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...他の設定\n    // highlight-next-line\n    scopes: [\"email\", \"phone\"], // 必要に応じて更新\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Logto Route Pathnames in Nuxt\nDESCRIPTION: Configuration example showing how to customize the default pathnames for sign-in, sign-out, and callback routes in the Logto Nuxt module.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // highlight-start\n  logto: {\n    pathnames: {\n      signIn: '/login',\n      signOut: '/logout',\n      callback: '/auth/callback',\n    },\n  },\n  // highlight-end\n  // ...他の設定\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Security Dependencies in Gradle\nDESCRIPTION: This snippet shows how to add the necessary Spring Security and OAuth2 client dependencies to a Gradle build file for a Spring Boot application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\n  implementation 'org.springframework.boot:spring-boot-starter-security'\n\timplementation 'org.springframework.boot:spring-boot-starter-oauth2-client'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for SAML SSO Implementation Guide\nDESCRIPTION: Imports various MDX fragments to structure the documentation for implementing SAML SSO with .NET Core Razor Pages and Logto. The imports include sections for introduction, application creation, SSO connector configuration, and validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-razor-pages-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-razor/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthorizeView Component in Blazor Razor Page\nDESCRIPTION: Adds the AuthorizeView component to a Razor page to display different content based on user authentication status. Includes login and logout buttons with corresponding event handlers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: cshtml\nCODE:\n```\n@using Microsoft.AspNetCore.Components.Authorization\n@page \"/\"\n\n<AuthorizeView>\n    <Authorized>\n        @* Vue connectée *@\n        <button @onclick=\"OnLogoutButtonClickAsync\">\n            Se déconnecter\n        </button>\n    </Authorized>\n    <NotAuthorized>\n        @* Vue non authentifiée *@\n        <button @onclick=\"OnLoginButtonClickAsync\">\n            Se connecter\n        </button>\n    </NotAuthorized>\n</AuthorizeView>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in MDX\nDESCRIPTION: MDX component setup that imports code snippets and passes them as props to the ConfigApiResources component for rendering different API resource configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This snippet shows how to create a NextAuth handler with Logto configured as an authentication provider. The configuration specifies OpenID Connect scopes including profile and email access, enabling user information retrieval and offline access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      // ... other options\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      // ... other options\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources for Logto Client in Go\nDESCRIPTION: This snippet demonstrates how to set up multiple API resources in the LogtoConfig struct for a Logto client. It specifies two different API endpoints that the client will have access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logto SDK Dependency (Groovy)\nDESCRIPTION: Adds the Logto Android SDK dependency to the project using Groovy build script.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation 'io.logto.sdk:android:1.1.3'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Logto Documentation Components in React\nDESCRIPTION: This snippet shows the import statements for various documentation fragments that comprise the Logto integration guide for React applications. It imports checkpoint components, guide tips, implementation instructions, client initialization details, and installation instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport GuideTip from './_guide-tip.mdx';\nimport ImplementSignInAndSignOut from './_implement-sign-in-and-sign-out.mdx';\nimport InitClient from './_init-client.mdx';\nimport Installation from './_installation.mdx';\n\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Init LogtoClient \\{#init-logtoclient}\n\n<InitClient />\n\n<ImplementSignInAndSignOut />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Vue Component\nDESCRIPTION: Implementation of user information display using Logto's getIdTokenClaims() method in a Vue.js component. Shows how to fetch and store user claims in a reactive reference.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type IdTokenClaims } from '@logto/vue';\nimport { ref } from 'vue';\n\nconst { isAuthenticated, getIdTokenClaims } = useLogto();\nconst user = ref<IdTokenClaims>();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const claims = await getIdTokenClaims();\n    user.value = claims;\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Button in Next.js with Auth.js\nDESCRIPTION: This code snippet demonstrates how to create a sign-out button component using Auth.js in a Next.js application. It uses the signOut function from Auth.js to handle the sign-out process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signOut } from '@/auth';\n\nexport function SignOut() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signOut();\n      }}\n    >\n      <button type=\"submit\">Cerrar sesión</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Svelte Component\nDESCRIPTION: This code snippet shows how to display user information in a Svelte component. It iterates over the user object properties and displays them in a list format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n</script>\n\n{#if data.user}\n<ul>\n  {#each Object.entries(data.user) as [key, value]}\n  <li>{key}: {value}</li>\n  {/each}\n</ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Provider\nDESCRIPTION: Configuration setup for requesting additional user scopes in the Logto provider, including email, phone, custom data, identities, and organizations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: [\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n  ],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with Logto Swift Client\nDESCRIPTION: Asynchronously retrieves an access token for a specified API endpoint using the Logto client. Uses Swift's async/await pattern and requires error handling with try/await keywords.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet accessToken = try await client.getAccessToken(for: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Passing Organization ID Parameter in Sign-In with Logto Browser SDK\nDESCRIPTION: Example of how to pass an organization_id parameter when implementing sign-in using the Logto browser SDK. This allows displaying the organization's logo dynamically in the authentication experience.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/customization/match-your-brand.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlogtoClient.signIn({\n  // ...otros parámetros\n  redirectUri: 'https://your-redirect-uri',\n  extraParams: {\n    organization_id: '123456',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token for API Resources in JSX\nDESCRIPTION: This snippet renders the FetchAccessTokenForApiResources component, specifying the access token retrieval method and passing in the corresponding code snippet.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exécution de la tâche signingReport pour Android\nDESCRIPTION: Commande pour exécuter la tâche signingReport afin d'obtenir la signature de l'application Android requise pour la plateforme WeChat.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew your-android-project:signingReport\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Multiple API Resources in JavaScript\nDESCRIPTION: This code creates a new LogtoClient instance with configuration options, including multiple API resources. The resources array specifies the URLs of the API endpoints that the client will be authorized to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 添加 API 资源 (API resources)\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resources Configuration Component in JSX\nDESCRIPTION: This code imports a ConfigApiResources component along with code snippets for configuring API resources in different ways, then renders the component with the imported code snippets as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Getting OIDC Private Keys using Logto CLI\nDESCRIPTION: This specific command fetches the OIDC private keys from the Logto configuration using the CLI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-database-configs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlogto db config get oidc.privateKeys\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchOrganizationTokenForUser Component in React\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component with props for organization scope and imported code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the `LogtoClient` and `UserScope` from the `@logto/browser` package (or a specified package via `props.package`). It then creates a new instance of `LogtoClient`, passing a configuration object that includes `UserScope.Organizations` in the `scopes` array. This ensures the application requests permission to access organization-related information during the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-organization-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Session Middleware\nDESCRIPTION: Setting up express-session middleware to store user tokens and interaction data during the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst session = require('express-session');\n\napp.use(\n  session({\n    secret: 'keyboard cat', // Change to your own secret key\n    cookie: { maxAge: 86400 },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing User Import Script with Logto Management API\nDESCRIPTION: JavaScript script for importing users to Logto via the Management API. The script reads users from a JSON file, makes POST requests to create each user, and includes a timeout to avoid rate limiting.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst users = require('./users.json');\n\nconst importUsers = async () => {\n  for (const user of users) {\n    try {\n      await fetch('https://[tenant_id].logto.app/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer [your-access-token]',\n        },\n        body: JSON.stringify(user),\n      });\n      // Sleep for a while to avoid rate limit\n      await new Promise((resolve) => setTimeout(resolve, 200));\n    } catch (error) {\n      console.error(`Failed to import user ${user.username}: ${error.message}`);\n    }\n  }\n};\n\nimportUsers();\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Logto Amazon Connector Fragments in Docusaurus (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import modular MDX fragments for different steps of integrating Amazon sign-in with a Python Flask application using Logto, intended for use in a Docusaurus documentation site. Each import references either framework guides, connector instructions, or sections for step-by-step guidance. The imported modules enable rendering relevant instructional content in logical order and allow for easier content updates, with dependencies including Docusaurus, React, and support for MDX.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-python-amazon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/python/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/amazon/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: MDX Component Imports in Next.js Documentation\nDESCRIPTION: Fragment imports for modular documentation structure using MDX components to organize different sections of the Google Workspace SSO integration guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-next-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/google-workspace/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript/MDX\nDESCRIPTION: This snippet defines and exports a JavaScript constant named `connector`. The constant holds the string value 'Okta enterprise SSO', which is likely used by imported components or within the MDX file to dynamically display the connector name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-mvc-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Disabling Persistent Storage in LogtoConfig\nDESCRIPTION: Configures LogtoConfig to disable persistent storage of credentials. By default, Logto stores credentials in the Keychain, but this can be turned off when needed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/_init-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  // ...\n  usingPersistStorage: false\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Template for Organization Invitation in JSON\nDESCRIPTION: A sample JSON configuration for the email template used in organization invitations. It includes the subject, HTML content with placeholders, usage type, and content type.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/organization-experience/invite-organization-members.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subject\": \"Welcome to my organization\",\n  \"content\": \"<p>Join {{organization.name}} by this <a href=\\\"{{link}}\\\" target=\\\"_blank\\\">link</a>.</p>\",\n  \"usageType\": \"OrganizationInvitation\",\n  \"type\": \"text/html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Logto Facebook Authentication Guide\nDESCRIPTION: Imports various MDX fragment components to compose a comprehensive guide for Facebook authentication with .NET Core Razor Pages and Logto. This pattern allows for modular documentation that can be assembled from reusable components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-razor-pages-facebook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-razor/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/social/facebook/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Facebook';\n```\n\n----------------------------------------\n\nTITLE: Rendering Further Readings Section using FurtherReadings Component (MDX)\nDESCRIPTION: Uses the 'FurtherReadings' component to display a section with links to additional resources or related documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-sendgrid.mdx#2025-04-22_snippet_9\n\nLANGUAGE: mdx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: 추가 클레임 접근 - Go\nDESCRIPTION: GetIdTokenClaims 메서드를 사용하여 추가 클레임에 접근하는 방법을 보여줍니다. 이 예제에서는 email과 phone 클레임에 접근할 수 있습니다.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nidTokenClaims, error := client.GetIdTokenClaims()\n// 이제 추가 클레임 `claims.email`, `claims.phone` 등에 접근할 수 있습니다.\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Access Token Components in React/MDX\nDESCRIPTION: Module that imports MDX fragments and configures a FetchAccessTokenForApiResources component with specific props for access token documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"access_tpken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Organization Scope in JavaScript\nDESCRIPTION: This snippet imports the LogtoClient and UserScope from the Logto browser package using ESM. It then creates a new LogtoClient instance with the Organizations scope, making it available globally via the window object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from 'https://esm.run/@logto/browser';\n\nwindow.logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Gestion de l'URL callback pour WeChat sur iOS (SwiftUI)\nDESCRIPTION: Code Swift pour gérer les URLs de redirection de WeChat dans une application SwiftUI, nécessaire pour compléter le flux d'authentification WeChat.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftUI\nYourRootView()\n  .onOpenURL { url in\n      LogtoClient.handle(url: url)\n  }\n\n// ou AppDelegate\nfunc application(_ app: UIApplication, open url: URL, options: /*...*/) -> Bool {\n  LogtoClient.handle(url: url)\n}\n```\n\n----------------------------------------\n\nTITLE: Jade Template for Index Page\nDESCRIPTION: Jade template for the index page, showing different content based on the user's authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jade\nCODE:\n```\nextends layout\n\nblock content\n  h1 Hello logto\n  if auth\n    p: a(href=\"/user\") Go to profile\n  else\n    p: a(href=\"/sign-in\") Click here to sign in\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token\nDESCRIPTION: This snippet demonstrates how to access additional claims from the ID token after configuring the Logto client with extra scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet claims = try? client.getIdTokenClaims()\n// 现在你可以访问额外的声明 `claims.email`，`claims.phone`，等。\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Status in LogtoViewModel\nDESCRIPTION: This snippet shows how to add a LiveData to observe authentication status in the LogtoViewModel. It includes methods for signing in and out, updating the status accordingly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_handle-authentication-status.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n//...with other imports\nclass LogtoViewModel(application: Application) : AndroidViewModel(application) {\n    // ...other codes\n\n    // Add a live data to observe the authentication status\n    private val _authenticated = MutableLiveData(logtoClient.isAuthenticated)\n    val authenticated: LiveData<Boolean>\n        get() = _authenticated\n\n    fun signIn(context: Activity) {\n        logtoClient.signIn(context, \"io.logto.android://io.logto.sample/callback\") { logtoException ->\n            logtoException?.let { println(it) }\n            // Update the live data\n            _authenticated.postValue(logtoClient.isAuthenticated)\n        }\n    }\n\n    fun signOut() {\n        logtoClient.signOut { logtoException ->\n            logtoException?.let { println(it) }\n            // Update the live data\n            _authenticated.postValue(logtoClient.isAuthenticated)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in React Native with Logto\nDESCRIPTION: This code snippet demonstrates how to use the useLogto hook to implement sign-in and sign-out functionality in a React Native application. It includes conditional rendering based on the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button } from 'react-native';\n\nconst Content = () => {\n  const { signIn, signOut, isAuthenticated } = useLogto();\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <Button title=\"Cerrar sesión\" onPress={async () => signOut()} />\n      ) : (\n        // Reemplaza el URI de redirección con el tuyo propio\n        <Button title=\"Iniciar sesión\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Configuration Components in JSX\nDESCRIPTION: Imports documentation fragments and code examples, then renders them using the ConfigApiResources component. The code demonstrates how to assemble a documentation page with multiple code examples for API resource configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Logto Social Connector in TypeScript\nDESCRIPTION: Example code showing how to create and export a social connector object with required methods and configuration. This snippet demonstrates the basic structure using GitHub connector as a template.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/develop-your-connector/step-by-step-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst createGithubConnector: CreateConnector<SocialConnector> = async ({ getConfig }) => {\n  return {\n    metadata: defaultMetadata,\n    type: ConnectorType.Social,\n    configGuard: githubConfigGuard,\n    getAuthorizationUri: getAuthorizationUri(getConfig),\n    getUserInfo: getUserInfo(getConfig),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for User Search in Logto\nDESCRIPTION: This snippet demonstrates the structure of the JSON response returned by the Logto API for a user search. It includes user details such as ID, username, email, and other fields.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"MgUzzDsyX0iB\",\n    \"username\": \"alice_123\",\n    \"primaryEmail\": \"alice@some.email.domain\",\n    \"primaryPhone\": null,\n    \"name\": null,\n    \"avatar\": null\n    // ...\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: NPM Package Installation Command\nDESCRIPTION: Command to install Logto SDK using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_npm-like-installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i {props.packageName}\n```\n\n----------------------------------------\n\nTITLE: Configuration Parameters for Naver Connector in Logto\nDESCRIPTION: The required configuration parameters for setting up the Naver connector in Logto. This includes the clientId and clientSecret which need to be obtained from the Naver Developers application information page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/integrations/social/naver/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Nombre       | Tipo   |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Auth User Provider with Logto for Flutter\nDESCRIPTION: This snippet defines a FlutterFlowAuthAuthUser class to represent the authenticated user state and sets up a BehaviorSubject stream for real-time user authentication updates. It uses Logto's Dart SDK for OpenID claims and RxDart for reactive programming.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-user-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\nimport 'package:rxdart/rxdart.dart';\n\nimport 'custom_auth_manager.dart';\n\nclass FlutterFlowAuthAuthUser {\n  FlutterFlowAuthAuthUser({required this.loggedIn, this.uid, this.idToken});\n\n  bool loggedIn;\n  String? uid;\n  OpenIdClaims? idToken;\n}\n\n/// Generiert einen Stream des authentifizierten Benutzers.\nBehaviorSubject<FlutterFlowAuthAuthUser> flutterFlowAuthAuthUserSubject =\n    BehaviorSubject.seeded(FlutterFlowAuthAuthUser(loggedIn: false));\nStream<FlutterFlowAuthAuthUser> flutterFlowAuthAuthUserStream() =>\n    flutterFlowAuthAuthUserSubject\n        .asBroadcastStream()\n        .map((user) => currentUser = user);\n```\n\n----------------------------------------\n\nTITLE: MDX Import Declarations for Documentation Components\nDESCRIPTION: Import statements for various MDX documentation fragments and components used to structure the tutorial content. Includes imports for intro, application creation, SSO connector setup, configuration, testing, and integration guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-mvc-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to asynchronously fetch an organization token using the Logto client. It utilizes the 'getOrganizationToken' method of the Logto client, passing an 'organizationId' as a parameter to retrieve the specific token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Angular Auth OIDC Client Configuration\nDESCRIPTION: This snippet shows the import statements for various components used in configuring angular-auth-oidc-client for Logto API resources. It includes imports for description fragments and code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiResourcesDescription from '../../fragments/_api-resources-description.md';\nimport ConfigApiResources from '../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Swift SDK\nDESCRIPTION: This snippet demonstrates how to use the Logto client to asynchronously obtain an access token for a specific resource. It utilizes Swift's async/await syntax for handling asynchronous operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet accessToken = try await client.getAccessToken(for: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Enterprise SSO Sign-in with JavaScript SDK\nDESCRIPTION: A JavaScript example showing how to use the Logto SDK to initiate a direct sign-in with an enterprise SSO connector. The directSignIn parameter is set with the specific connector ID to bypass the standard sign-in page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/authentication-parameters/direct-sign-in.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlogtoClient.signIn({\n  redirectUri: 'https://your-app.com/callback',\n  directSignIn: 'sso:1234567890',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Fetching Components in JSX\nDESCRIPTION: This snippet imports required components and configures the FetchOrganizationTokenForUser component with necessary props for fetching organization tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resources Configuration Component in JSX\nDESCRIPTION: This code imports multiple code snippet files and a component fragment, then renders the ConfigApiResources component with the imported code snippets as props. The component displays different configurations for API resources with various scope settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Removing Connectors from Logto\nDESCRIPTION: Commands to remove specific connectors from your Logto instance. After removal, the Logto instance needs to be restarted to reflect the changes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlogto connector remove connector-service-a @org/connector-service-b\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli connector remove connector-service-a @org/connector-service-b\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli connector remove connector-service-a @org/connector-service-b\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in ASP.NET Core JSON Configuration\nDESCRIPTION: This snippet shows how to configure API resources in the appsettings.json file to obtain JWT tokens for API access. It includes setting the scope, resource, and extra token parameters required by Logto following RFC 8707.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ...\n  \"IdentityServer\": {\n    // ...\n    // highlight-start\n    \"Scope\": \"openid profile email <your-api-scopes>\", // 여기에 API 스코프를 추가하세요\n    \"Resource\": \"https://my-api-resource\",\n    \"ExtraTokenParams\": {\n        \"resource\": \"https://my-api-resource\" // 키 \"resource\"가 소문자인지 확인하세요\n    }\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments and Defining Connector - JavaScript\nDESCRIPTION: This snippet imports MDX fragments for each major step of the SAML SSO integration from either local or internationalized paths, and defines a connector constant for use throughout the file. Dependencies include Docusaurus and a compatible build system that supports MDX imports. The snippet expects the fragments to be present in specified directories, and is intended to modularize documentation content for maintainability. No functional application code is included; focus is exclusively on importing documentation sections.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/saml/_integration.mdx';\\n\\nimport FurtherReadings from './fragments/_further-readings.mdx';\\n\\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Defining OrganizationRole Type Structure in TypeScript\nDESCRIPTION: TypeScript type definition for OrganizationRole objects used in organization role-related webhook events. This type includes properties like id, name, and optional description.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/request.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ntype OrganizationRole = {\n  id: string;\n  name: string;\n  description?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Logto Authentication in Next.js\nDESCRIPTION: A Next.js page component that uses server actions to fetch an access token from Logto. It imports the getAccessToken function from Logto's Next.js SDK and passes it to a client component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAccessToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetAccessToken from './get-access-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetAccessToken\n        onGetAccessToken={async () => {\n          'use server';\n\n          return getAccessToken(logtoConfig, 'https://shopping.your-app.com/api');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Settings in JSON\nDESCRIPTION: This JSON configuration snippet shows how to set up the IdentityServer settings for Logto authentication in the appsettings.json file of a Blazor WebAssembly project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ...\n  IdentityServer: {\n    Authority: 'https://<your-logto-endpoint>/oidc',\n    ClientId: '<your-logto-app-id>',\n    PostLogoutRedirectUri: '${defaultBaseUrl}',\n    RedirectUri: '${defaultRedirectUri}',\n    ResponseType: 'code',\n    Scope: 'openid profile', // Add more scopes if needed\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Authentication\nDESCRIPTION: Shows how to configure additional authentication scopes such as email and phone in the Logto authentication options during service configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Scopes = new string[] {\n    LogtoParameters.Scopes.Email,\n    LogtoParameters.Scopes.Phone\n  }\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Organization ID Parameter in Logto Browser SDK\nDESCRIPTION: This code snippet demonstrates how to pass an organization_id parameter in the signIn method using the Logto Browser SDK. This enables displaying the organization's logo dynamically during the authentication experience.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/customization/match-your-brand.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlogtoClient.signIn({\n  // ...andere Parameter\n  redirectUri: 'https://your-redirect-uri',\n  extraParams: {\n    organization_id: '123456',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI in Vue Template\nDESCRIPTION: Vue component implementation showing how to use the useLogtoUser composable for handling sign-in and sign-out functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { useLogtoUser } from '#imports'; // Add this line if auto-import is disabled\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- Simplified button for sign-in and sign-out -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Postmark Email Templates in JSONC\nDESCRIPTION: Example configuration for Postmark email connector templates specifying different usage types including Register, SignIn, ForgotPassword, and Generic templates. Each template requires a usageType and templateAlias.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/email/postmark/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  {\n    \"usageType\": \"Register\",\n    \"templateAlias\": \"logto-register\",\n  },\n  {\n    \"usageType\": \"SignIn\",\n    \"templateAlias\": \"logto-sign-in\",\n  },\n  {\n    \"usageType\": \"ForgotPassword\",\n    \"templateAlias\": \"logto-forgot-password\",\n  },\n  {\n    \"usageType\": \"Generic\",\n    \"templateAlias\": \"logto-generic\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Logto API Resources Documentation Components\nDESCRIPTION: This code imports MDX fragments and code examples, then assembles them into a ConfigApiResources component with the necessary props to display configuration examples for API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Route in Flask with Logto\nDESCRIPTION: This code snippet shows how to create a sign-in route in a Flask application using Logto. It redirects the user to the Logto sign-in page and handles the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-in\")\nasync def sign_in():\n    # Hole die Anmelde-URL und leite den Benutzer dorthin um\n    return redirect(await client.signIn(\n        redirectUri=\"${defaultRedirectUri}\",\n    ))\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with Yarn\nDESCRIPTION: Command to install @logto/chrome-extension package using Yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in MDX\nDESCRIPTION: Imports required MDX fragments and code components, then configures the ConfigApiResources component with the necessary code snippets as props. The setup enables documentation of API resources with various scope configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token in Go\nDESCRIPTION: This snippet shows how to access the additional claims from the ID token after requesting extended scopes. Once the claims are retrieved, the application can access specific user data like email and phone.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nidTokenClaims, error := client.GetIdTokenClaims()\n// これで追加のクレーム `claims.email`、`claims.phone` などにアクセスできます。\n```\n\n----------------------------------------\n\nTITLE: Adding Official Connectors to Logto\nDESCRIPTION: Commands to add official Logto connectors to your instance. Official connectors are maintained by the Logto team and stored in the @logto/connectors repository.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlogto connector add --official\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli connector add --official\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli connector add --official\n```\n\n----------------------------------------\n\nTITLE: Customizing Logto Route Pathnames in Nuxt\nDESCRIPTION: Configuration code to customize the default paths for sign-in, sign-out, and callback routes in the Logto module. This allows developers to use custom route names that match their application structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // highlight-start\n  logto: {\n    pathnames: {\n      signIn: '/login',\n      signOut: '/logout',\n      callback: '/auth/callback',\n    },\n  },\n  // highlight-end\n  // ...other configurations\n});\n```\n\n----------------------------------------\n\nTITLE: Account Settings Sequence Diagram\nDESCRIPTION: A sequence diagram illustrating the authentication and data flow between user, client app, server-side application, and Logto when accessing account settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n  sequenceDiagram\n    autonumber\n    actor User as User\n    participant Client as Client app\n    participant Server as Server-side application\n    participant Logto as Logto\n\n    User ->> Client: Access client app\n    Client ->> Logto: POST /oidc/auth\n    User -->> Logto: sign in\n    Logto -->> Client: Redirect to client app\n    Client ->> Logto: POST /oidc/token\n    Logto ->> Client: Access token A\n    Client ->> Server: GET /account-settings (with access token A)\n    Server ->> Logto: POST /oidc/token (with client credentials)\n    Logto ->> Server: Access token B\n    Server ->> Logto: GET /api/users/{userId} (with access token B)\n    Logto ->> Server: User details\n    Server ->> Client: User details\n```\n\n----------------------------------------\n\nTITLE: 추가 스코프 설정 - Go\nDESCRIPTION: Logto 클라이언트 구성에 추가 스코프를 설정하는 방법을 보여줍니다. 이 예제에서는 'email'과 'phone' 스코프를 요청합니다.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Authentication URLs in JavaScript\nDESCRIPTION: Defines default base URL and redirect URI constants for Logto authentication configuration. Sets up the base URL as localhost:3000 and creates a callback URL by appending 'callback' to the base URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_web-configure-redirect-uris.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const defaultBaseUrl = 'http://localhost:3000/';\nexport const defaultRedirectUri = `${defaultBaseUrl}callback`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out Logic in Chrome Extension Popup\nDESCRIPTION: This JavaScript code demonstrates how to implement the sign-in and sign-out functionality in the popup page of a Chrome extension. It sends messages to the background script to initiate the authentication processes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('sign-in').addEventListener('click', async () => {\n  await chrome.runtime.sendMessage({ action: 'signIn' });\n  // サインインが完了（または失敗）したら、ここで UI を更新できます。\n});\n\ndocument.getElementById('sign-out').addEventListener('click', async () => {\n  await chrome.runtime.sendMessage({ action: 'signOut' });\n  // サインアウトが完了（または失敗）したら、ここで UI を更新できます。\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP API Endpoints for Role Management\nDESCRIPTION: List of HTTP endpoints for managing roles through Logto Management API, including operations for creating, reading, updating, and deleting roles, as well as managing role assignments and permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/role-based-access-control/configure-roles.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/roles\nPOST /api/roles\nGET /api/roles/{Id}\nDELETE /api/roles/{Id}\nPATCH /api/roles/{Id}\nGET /api/roles/{Id}/users\nPOST /api/roles/{Id}/users\nDELETE /api/roles/{Id}/users/{userId}\nGET /api/roles/{Id}/applications\nPOST /api/roles/{Id}/applications\nDELETE /api/roles/{Id}/applications/{applicationId}\nGET /api/roles/{Id}/scopes\nPOST /api/roles/{Id}/scopes\nDELETE /api/roles/{Id}/scopes/{scopeId}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes Documentation in JSX/MDX\nDESCRIPTION: Imports documentation fragments for scopes and claims, then renders them together by passing code examples as props to the main component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in Python\nDESCRIPTION: This code snippet demonstrates how to create a LogtoClient instance with the organizations scope enabled. The configuration includes the UserInfoScope.organizations scope, which is necessary for accessing organization-related data for the authenticated user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import LogtoClient, LogtoConfig, UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        scopes=[UserInfoScope.organizations],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK for Go using go get\nDESCRIPTION: This command installs the Logto SDK for Go in the project's root directory. It fetches the latest version of the SDK from the GitHub repository.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/logto-io/go\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Custom Data\nDESCRIPTION: This code snippet shows how to fetch additional user information, including custom data, using the Logto client's fetchUserInfo method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet userInfo = try? client.fetchUserInfo()\n// Now you can access the claim `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Adding Logto TypeScript Type Definitions in SvelteKit\nDESCRIPTION: This code adds TypeScript type definitions for Logto in a SvelteKit application by extending the App.Locals interface to include the LogtoClient and user information, enabling proper type checking.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LogtoClient, UserInfoResponse } from '@logto/sveltekit';\n\ndeclare global {\n  namespace App {\n    interface Locals {\n      logtoClient: LogtoClient;\n      user?: UserInfoResponse;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with Logto Client in Go\nDESCRIPTION: Demonstrates retrieving an access token from Logto for a specific API endpoint using the Go client library. The method takes an API resource URL as input and returns an access token string along with any potential errors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := logtoClient.GetAccessToken(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Enterprise Connectors in DocCardList Component\nDESCRIPTION: JSX component displaying customizable enterprise connector options (OIDC and SAML) with their respective icons and integration guide links.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/enterprise-connectors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'OIDC (enterprise)',\n      href: '/integrations/oidc-sso',\n      customProps: {\n        icon: <Oidc />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'SAML (enterprise)',\n      href: '/integrations/saml-sso',\n      customProps: {\n        icon: <Saml />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NpmLikeInstallation Component in React\nDESCRIPTION: This snippet imports a custom React component called NpmLikeInstallation from a relative path and uses it to display installation instructions for Passport and OpenID Connect packages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"passport passport-openidconnect\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Status in Flutter with Logto\nDESCRIPTION: This snippet shows how to handle the authentication status in a Flutter app using Logto. It demonstrates checking the authentication status and conditionally rendering sign-in or sign-out buttons based on the status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  bool? isAuthenticated = false;\n\n  void render() {\n    setState(() async {\n      isAuthenticated = await logtoClient.isAuthenticated;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WXEntryActivity for WeChat Authentication in Kotlin\nDESCRIPTION: Implementation of WXEntryActivity in Kotlin, required for WeChat login integration in Android apps. This activity handles the authentication results from WeChat.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// WXEntryActivity.kt\npackage com.sample.app.wxapi\n\nimport io.logto.sdk.android.auth.social.wechat.WechatSocialResultActivity\n\nclass WXEntryActivity: WechatSocialResultActivity()\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-Out Client Component for Next.js\nDESCRIPTION: Implements a client-side button component for triggering the sign-out process. Uses the 'use client' directive to indicate it runs on the client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignOut: () => Promise<void>;\n};\n\nconst SignOut = ({ onSignOut }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignOut();\n      }}\n    >\n      Sign Out\n    </button>\n  );\n};\n\nexport default SignOut;\n```\n\n----------------------------------------\n\nTITLE: Adding Sign-In and Sign-Out Buttons to Chrome Extension Popup\nDESCRIPTION: HTML markup for adding login and logout buttons to the Chrome extension popup interface.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"sign-in\">Se connecter</button> <button id=\"sign-out\">Se déconnecter</button>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This code imports MDX fragments and code examples for API resource configuration, then renders them using the ConfigApiResources component. The imports include basic resource configuration, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exact Match and Multiple Values in URLSearchParams for User Search\nDESCRIPTION: This snippet shows how to use the 'exact' mode for name matching and how to pass multiple values for a single field in URLSearchParams.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', 'Alice'],\n  ['search.name', 'Bob'],\n  ['mode.name', 'exact'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamic Method Property in React Component\nDESCRIPTION: A React component code snippet showing a dynamic method property reference using JSX syntax. This is used to demonstrate an API method call that returns user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_find-user-info-missing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{props.method}\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Name Variable in JavaScript\nDESCRIPTION: This JavaScript snippet uses ES module syntax to export a constant variable named `connector`. The variable holds the string 'X (Twitter)' and is intended to be used dynamically within the imported MDX components or elsewhere in the tutorial to refer to the specific social connector being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-x-twitter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'X (Twitter)';\n```\n\n----------------------------------------\n\nTITLE: MDX File Structure for Hugging Face Flutter Integration\nDESCRIPTION: MDX file structure showing the imports and component organization for a Hugging Face sign-in integration guide using Flutter and Logto. The file uses fragments to organize different sections of the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-hugging-face.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\nslug: how-to-build-hugging-face-sign-in-with-flutter-and-logto\ntags: [authentication, hugging-face, flutter, dart, social-sign-in, sign-in, login]\ntitle: How to build Hugging Face sign-in with Flutter\nsdk: Flutter\nconnector: Hugging Face\n---\n\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/hugging-face/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Hugging Face';\n```\n\n----------------------------------------\n\nTITLE: Export Connector Configuration\nDESCRIPTION: Exports the connector name as a constant for use throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-vue-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto SDK Components in JSX\nDESCRIPTION: This code snippet imports and renders components for a Logto SDK installation guide. It includes a guide tip, installation instructions, and integration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.md';\nimport Installation from './_installation.md';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Installation \\{#installation\\}\n\n<Installation />\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: MDX Fragment Imports\nDESCRIPTION: Imports various MDX fragments and components needed for the documentation structure, including introductory content, application setup, social connector configuration, and testing guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-oauth2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/oauth2/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources with Code Fragments - JSX\nDESCRIPTION: This JSX snippet demonstrates how the ConfigApiResources React component is rendered and provided with props referencing imported Markdown components. Each prop represents a different configuration resource code fragment, allowing for flexible documentation display. The component composition is typical for React-based MDX/Markdown documentation systems.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Browser SDK with pnpm\nDESCRIPTION: Command to install the Logto Browser SDK using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_add-sdk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/browser\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Code Fragments (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import a React component and a code sample from local paths using JavaScript ES module syntax. 'FetchAccessTokenForApiResources' is imported from a shared fragments directory, and 'GetAccessTokenCode' is imported from a local code directory. This setup allows reuse of UI elements and code samples within documentation pages. Imports require a React project structure and appropriate file existence at the given relative paths.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Vue SDK with pnpm - Bash\nDESCRIPTION: Installs the @logto/vue package using the pnpm package manager. Pnpm must be installed globally or locally before running the command. This command will add @logto/vue as a dependency in the current project's package.json. It should be executed from the project's root, and no additional arguments are necessary.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This code snippet renders a component for fetching access tokens for API resources. It imports necessary components and passes props including the API endpoint and a code snippet component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"access_tpken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Authentication Parameters for IdP-initiated SSO\nDESCRIPTION: JSON configuration examples for customizing authentication request parameters in the IdP-initiated SSO flow. These examples show how to request additional scopes and implement custom state parameters for security validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"email offline_access\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"state\": \"custom-state-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Vue SDK with yarn - Bash\nDESCRIPTION: Installs the @logto/vue package using the yarn package manager. Yarn should be installed prior to usage, and this command will update the project's dependencies accordingly. Run this command in the root directory of your Vue project to successfully add the Logto SDK. No additional options or flags are required for standard installation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: MDX Component Imports and Configuration\nDESCRIPTION: Imports various MDX components and sets up the connector configuration for the documentation page. Includes fragment imports for different sections of the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-vue-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-oidc/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Nuxt.js Template\nDESCRIPTION: This snippet shows how to access additional claims (email and phone) in a Nuxt.js template after configuring the scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"user\">\n    <p>Name: {{ user.name }}</p>\n    <p>Email: {{ user.email }}</p>\n    <p>Phone: {{ user.phone }}</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting up Organization Token Components in React/MDX\nDESCRIPTION: Component integration showing the organization token setup process using custom MDX components and code imports. The component accepts organization scope and related code snippets as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"urn:logto:scope:organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication Decorator to Flask API in Python\nDESCRIPTION: This code snippet demonstrates how to apply the authentication decorator to a Flask API route. It includes CORS configuration for the API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_cors import cross_origin\n\nAPP = Flask(__name__)\n\n@APP.route(\"/user/info\")\n@cross_origin(headers=[\"Content-Type\", \"Authorization\"])\n@requires_auth\ndef api:\n# Your API logic\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Fetching Access Token in Logto\nDESCRIPTION: This snippet imports necessary components and code snippets for fetching an access token in Logto. It includes a reusable component for fetching the access token and a specific code snippet for getting the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Solicitando reconsentimiento para nuevos permisos en Logto\nDESCRIPTION: Ejemplo que demuestra cómo solicitar al usuario que vuelva a consentir o reiniciar sesión para recibir cambios de permisos nuevos. Esto es necesario cuando se han introducido nuevos alcances de permisos en el sistema.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/role-based-access-control/protect-api-resources-with-rbac.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nsignIn({ redirectUri: 'your-redirect-url', prompt: 'consent' });\n```\n\n----------------------------------------\n\nTITLE: Rendering Step Components in JSX\nDESCRIPTION: This code renders the imported step components within the document structure. Each step is enclosed in a section with a descriptive header and an anchor link.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sso/entra-id-saml/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Step1 />\n\n<Step2 />\n\n<Step3 />\n\n<Step4 />\n\n<Step5 />\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Android Activity (Kotlin)\nDESCRIPTION: This code snippet shows how to observe and display user information in an Android Activity. It uses a TextView to show the user info response as a formatted JSON string.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        //...other codes\n\n        // Assume you have a text View with id `user_info_text_view` in your layout\n        val userInfoResponseTextView: TextView = findViewById(R.id.user_info_text_view)\n        logtoViewModel.userInfoResponse.observe(this) { userInfoResponse ->\n            userInfoResponseTextView.text = if (userInfoResponse !== null) {\n                val json = Gson().toJson(userInfoResponse, UserInfoResponse::class.java)\n                JSONObject(json).toString(2)\n            } else {\n                \"\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Logto PHP SDK with Composer\nDESCRIPTION: Command to install the Logto PHP SDK package using Composer, which is the dependency manager for PHP. This adds the Logto SDK to your PHP project, enabling authentication and identity management features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require logto/sdk\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair using OpenSSL\nDESCRIPTION: Commands to generate private and public key pairs required for Alipay app configuration using OpenSSL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/alipay-native/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out private.pem 2048\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional User Claims in Express Routes\nDESCRIPTION: This snippet demonstrates how to access additional user claims (like email) that were requested through scopes in a Logto-protected Express route.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  response.end(`User email: ${req.user.claims.email}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Admonition Component in JSX\nDESCRIPTION: This code snippet shows the usage of an Admonition component, likely from a documentation framework. It creates a tip box with a title and content, suggesting users to start with Logto Cloud for quick exploration of features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Admonition type=\"tip\" title=\"Need a Quick Start?\">\n\nIf you're new to Logto OSS, we recommend starting with a free development tenant on [Logto Cloud](https://cloud.logto.io). This allows you to quickly explore all features and experience the latest updates without any setup hassle.\n\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Components for React Native\nDESCRIPTION: This snippet imports necessary components and code snippets for organization token configuration in React Native applications. It renders the FetchOrganizationTokenForUser component with required props including scope and code snippets for configuration and token access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Scopes in Logto Go Client Configuration\nDESCRIPTION: This Go code snippet shows how to define the desired OAuth scopes ('email' and 'phone' in this example) within the `Scopes` field of a `client.LogtoConfig` struct. This configuration is used when initializing a Logto client to specify the permissions the application requests from the user during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token using Logto Client\nDESCRIPTION: Asynchronous function call to retrieve an organization token using the logtoClient instance. Requires an organizationId parameter to identify the specific organization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Route with Logto Middleware for Access Token Retrieval\nDESCRIPTION: Sets up an Express GET route that uses Logto middleware to fetch access tokens for a specific API resource. The handler logs the access token and returns the user object as JSON response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-access-token',\n  withLogto({\n    ...config,\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n  }),\n  (request, response) => {\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Configuration\nDESCRIPTION: Imports necessary code components for configuring organization tokens and retrieving organization access tokens. The file uses MDX components to assemble a structured documentation for fetching organization tokens for users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring FetchAccessTokenForApiResources Component in JSX\nDESCRIPTION: This snippet configures the FetchAccessTokenForApiResources component with specific props. It sets the getAccessTokenApi prop to \"getAccessToken\" and passes a GetAccessTokenCode component as the getAccessTokenCode prop.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example of Conventional Commit Message Format\nDESCRIPTION: Example showing the proper format for commit messages following the Conventional Commits standard when contributing to the Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\ndocs: update the integration guide\n```\n\n----------------------------------------\n\nTITLE: Structuring API Resources Documentation in JSX and Markdown\nDESCRIPTION: This snippet demonstrates the structure of the API resources documentation, including sections for client configuration, access token fetching, and organization token retrieval. It uses a mix of JSX components and Markdown syntax.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/_index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiResourcesDescription />\n\n### Configure Logto client \\{#configure-logto-client}\n\n<ConfigApiResources />\n\n### Fetch access token for the API resource \\{#fetch-access-token-for-the-api-resource}\n\n<FetchAccessTokenForApiResources />\n\n### Fetch organization tokens \\{#fetch-organization-tokens}\n\n<FetchOrganizationTokenForUser />\n```\n\n----------------------------------------\n\nTITLE: Using Logto DB System Help Command\nDESCRIPTION: Command to display help information for Logto database system commands\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/file-storage-provider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm logto db system --help\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Organization Token Components in MDX\nDESCRIPTION: Imports required components for organization token functionality and renders them with specific props. Uses FetchOrganizationTokenForUser component with organization scope and code components for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Configuration Object with Capacitor in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the LogtoConfig type from the @logto/capacitor package and define a configuration object specifying appId, endpoint, authentication scopes, and API resource URIs. Prerequisites include installing the @logto/capacitor package and obtaining valid application credentials from your Logto instance. The config object requires appId and endpoint for identification, while scopes and resources dictate authorization scopes and available protected APIs. The object is ready for use in Logto initialization and conforms to the expected TypeScript interface. Placeholders must be replaced with actual values for production use.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Logto in Nuxt\nDESCRIPTION: This snippet shows how to use environment variables to store sensitive Logto configuration data in a .env file, which is a recommended security practice.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNUXT_LOGTO_ENDPOINT=\"<your-logto-endpoint>\"\nNUXT_LOGTO_APP_ID=\"<your-logto-app-id>\"\nNUXT_LOGTO_APP_SECRET=\"<your-logto-app-secret>\"\nNUXT_LOGTO_COOKIE_ENCRYPTION_KEY=\"<a-random-string>\"\n```\n\n----------------------------------------\n\nTITLE: Authentication Status View Template in ASP.NET Core\nDESCRIPTION: Razor view template that displays authentication status and conditional sign-in/sign-out links. The template checks User.Identity.IsAuthenticated to determine which link to show.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_implement-buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: cshtml\nCODE:\n```\n<p>Is authenticated: @User.Identity?.IsAuthenticated</p>\n@if (User.Identity?.IsAuthenticated == true) {\n  <a asp-controller=\"Home\" asp-action=\"SignOut\">Sign out</a>\n} else {\n  <a asp-controller=\"Home\" asp-action=\"SignIn\">Sign in</a>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auth.js Middleware for Session Management\nDESCRIPTION: Implements an optional middleware for Auth.js to maintain active sessions in Next.js applications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { auth as middleware } from '@/auth';\n```\n\n----------------------------------------\n\nTITLE: Implementing a Client Component for Organization Token Retrieval in Next.js\nDESCRIPTION: This client component (get-organization-token.ts) provides a button that, when clicked, calls the server action to get an organization token and logs it to the console. It demonstrates the client-server interaction pattern using Next.js server actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetOrganizationToken: () => Promise<string>;\n};\n\nconst GetOrganizationToken = ({ onGetOrganizationToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetOrganizationToken();\n        console.log(token);\n      }}\n    >\n      Obter token de organização (veja o log do console)\n    </button>\n  );\n};\n\nexport default GetOrganizationToken;\n```\n\n----------------------------------------\n\nTITLE: API Permissions Management Endpoints Table in Markdown\nDESCRIPTION: This markdown table lists the API endpoints for managing permissions in Logto. It includes the HTTP method, path, and a brief description for each endpoint, covering operations like listing, creating, deleting, and updating API resource scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/role-based-access-control/configure-permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| method | path                                                                                                                 | description                                                                                 |\n| ------ | -------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- |\n| GET    | [/api/resources/\\{resourceId\\}/scopes](https://openapi.logto.io/operation/operation-listresourcescopes)              | Get scopes defined for an API resource.                                                     |\n| POST   | [/api/resources/\\{resourceId\\}/scopes](https://openapi.logto.io/operation/operation-createresourcescope)             | Create a new scope for an API resource.                                                     |\n| DELETE | [/api/resources/\\{resourceId\\}/scopes/\\{scopeId\\}](https://openapi.logto.io/operation/operation-deleteresourcescope) | Delete an API resource scope from the given resource.                                       |\n| PATCH  | [/api/resources/\\{resourceId\\}/scopes/\\{scopeId\\}](https://openapi.logto.io/operation/operation-updateresourcescope) | Update an API resource scope for the given resource. This method performs a partial update. |\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Management in React/JSX\nDESCRIPTION: This code imports necessary fragment components for demonstrating organization token fetching functionality. It includes components for organization configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Logto Route Pathnames\nDESCRIPTION: Configuration for customizing the default authentication route pathnames in nuxt.config.ts.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    pathnames: {\n      signIn: '/login',\n      signOut: '/logout',\n      callback: '/auth/callback',\n    },\n  },\n  // ...other configurations\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering NPM-like Installation Component for Logto Next.js Package\nDESCRIPTION: This code imports a reusable component for displaying npm-like installation instructions and renders it with the package name '@logto/next'. It's likely part of a documentation page for setting up Logto with Next.js.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/next\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in MDX\nDESCRIPTION: MDX code that imports documentation fragments and configures the ConfigApiResources component with code examples for different resource configurations including basic resources, scoped resources, and shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Additional Scopes in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Logto client with additional scopes to request extra permissions for email and phone information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [UserScope.Email, UserScope.Phone],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Logto SDK Repository URL for Swift Package Manager\nDESCRIPTION: The repository URL needed to add Logto SDK as a dependency in Swift Package Manager. This can be directly imported in Xcode 11 or newer without additional tools.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/swift/_add-sdk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/logto-io/swift.git\n```\n\n----------------------------------------\n\nTITLE: Running OIDC Migration Using NPX\nDESCRIPTION: Alternative command to seed OIDC configuration using NPX to run the Logto CLI. This is useful if you don't have the CLI installed globally.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/migrate-from-env.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db seed oidc\n# Or\nnpx @logto/cli db seed oidc --env /your/path/to/.env\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Google Workspace SSO Guide\nDESCRIPTION: This code imports various MDX components used throughout the guide to structure the content. It includes sections for introduction, application creation, SSO connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/google-workspace/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining WXEntryActivity in Kotlin for Logto/WeChat\nDESCRIPTION: This Kotlin code defines the required `WXEntryActivity` class within the `wxapi` package (relative to the application's root package). It inherits from `Logto`'s `WechatSocialResultActivity`, which handles the callback from the WeChat app after the user completes the login process. This specific structure and naming are mandated by the WeChat SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n// WXEntryActivity.kt\npackage com.sample.app.wxapi\n\nimport io.logto.sdk.android.auth.social.wechat.WechatSocialResultActivity\n\nclass WXEntryActivity: WechatSocialResultActivity()\n```\n\n----------------------------------------\n\nTITLE: Getting OIDC Private Keys using npx\nDESCRIPTION: This specific command fetches the OIDC private keys from the Logto configuration using npx to run the CLI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-database-configs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db config get oidc.privateKeys\n```\n\n----------------------------------------\n\nTITLE: Swift SDK での組織トークン取得\nDESCRIPTION: Logto Swift SDK で特定の組織に対する組織トークンを取得する方法です。getOrganizationToken メソッドを使用して組織IDを指定します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet token = try await client.getOrganizationToken(forId: \"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension SDK with Yarn - Bash\nDESCRIPTION: This snippet provides the command to install the @logto/chrome-extension package via Yarn. Prerequisites include a node.js project with Yarn configured. Executing this command will add the Logto Chrome extension SDK to the dependencies, making it accessible within the project. No arguments are needed aside from the package name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchAccessTokenForApiResources Component in JSX\nDESCRIPTION: This snippet renders the FetchAccessTokenForApiResources component, passing the getAccessToken API name and a code snippet component as props. It demonstrates how to integrate access token retrieval functionality into a React-based documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with yarn\nDESCRIPTION: Command to install the Logto Vue integration library using yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Authentication UI in Next.js Home Page\nDESCRIPTION: Creates a home page component that conditionally displays either a sign-in or sign-out button based on the user's authentication status. It uses Auth.js's auth function to retrieve the session.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport SignIn from './components/sign-in';\nimport SignOut from './components/sign-out';\nimport { auth } from '@/auth';\n\nexport default function Home() {\n  const session = await auth();\n\n  return <div>{session?.user ? <SignOut /> : <SignIn />}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Fragments and Code Snippets in JSX\nDESCRIPTION: This snippet demonstrates the import statements used to bring in various markdown fragments and code snippets for use in the document. It includes descriptions, configurations, and code examples related to API resources and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiResourcesDescription from '../../fragments/_api-resources-description.md';\nimport ConfigApiResources from '../../fragments/_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from '../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code-snippets/_get-resource-access-token.md';\nimport ConfigResourcesCode from './code-snippets/_resource-config-code.md';\nimport ConfigResourcesWithScopesCode from './code-snippets/_resource-with-scopes-config-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code-snippets/_resource-with-shared-scopes-config-code.md';\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out with Custom Redirect in Capacitor\nDESCRIPTION: This code demonstrates how to implement sign-out with a custom post sign-out redirect URI in a Capacitor app using Logto. It allows for automatic redirection back to the app after sign-out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst onClick = async () => {\n  await logtoClient.signOut('com.example.app://callback/sign-out');\n};\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Search Parameters\nDESCRIPTION: Example of constructing search parameters for specific fields\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/advanced-user-search.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', '%foo%'],\n  ['search.primaryEmail', '%@gmail.com'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Organization Components in MDX\nDESCRIPTION: Imports organization-related MDX fragments and code components, then renders them using the FetchOrganizationTokenForUser component with specific props for organization scope and code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations (组织)\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Social Sign-in with JavaScript SDK\nDESCRIPTION: A JavaScript example showing how to use the Logto SDK to initiate a direct sign-in with a social identity provider. The directSignIn parameter is set to 'social:google' to bypass the standard sign-in page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/authentication-parameters/direct-sign-in.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst authResult = await logto.signIn({\n  redirectUri: 'https://your-app.com/callback',\n  directSignIn: 'social:google',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM Installation Component in MDX\nDESCRIPTION: Imports and renders a reusable NPM-like installation component, specifically for installing Logto Express related packages including @logto/express, cookie-parser, and express-session.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/express cookie-parser express-session\" />\n```\n\n----------------------------------------\n\nTITLE: Linking Social Connection to User Account in Logto\nDESCRIPTION: This snippet demonstrates how to complete the process of linking a verified social connection to a user account. It requires the verification record ID from the previous steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://[tenant-id].logto.app/api/my-account/identities \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'logto-verification-id: <verification_record_id>' \\\n  -H 'content-type: application/json' \\\n  --data-raw '{\"newIdentifierVerificationRecordId\":\"...\"}'\n```\n\n----------------------------------------\n\nTITLE: Verifying Social Connection in Logto\nDESCRIPTION: This snippet shows how to verify a social connection after the user authorizes the application and is redirected back. It requires the connector data from the redirect URL and the verification record ID from the previous request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://[tenant-id].logto.app/api/verifications/social/verify \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'content-type: application/json' \\\n  --data-raw '{\"connectorData\":\"...\",\"verificationRecordId\":\"...\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Resources in Vue.js (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `@logto/vue` plugin using `app.use()` within a Vue.js application's entry point (`main.ts`). It configures the `resources` option with an array of API identifiers (URLs), instructing Logto to request access tokens scoped for these specific backend APIs during user authentication. This setup requires a Vue app instance (`app`) and the `@logto/vue` package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"main.ts\"\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates defining a `LogtoConfig` object for the `@logto/rn` SDK. It imports `LogtoConfig` and `UserScope` from the library and specifically includes `UserScope.Organizations` in the `scopes` array. This configuration is necessary to request access to the user's organization information during the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"App.tsx\"\nimport { LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoProvider with Configuration in React Native\nDESCRIPTION: This snippet demonstrates how to import and configure the LogtoProvider component for a React Native app. It sets up the LogtoConfig object with the application ID, Logto endpoint, and user scopes, then wraps the app content with the LogtoProvider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [\n    // highlight-start\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n    // highlight-end\n  ],\n};\n\nconst App = () => <LogtoProvider config={config}>{/* Your app content */}</LogtoProvider>;\n```\n\n----------------------------------------\n\nTITLE: Mermaid Sequence Diagram for Logto-Supabase Integration Flow\nDESCRIPTION: A sequence diagram illustrating the authentication flow between the end user, Logto, the application backend, and Supabase. Shows the process of obtaining tokens, generating JWT, and accessing protected data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tParticipant U as End user\n\tParticipant Logto\n\tParticipant B as App backend service\n\tParticipant Supabase\n\n\tU->>Logto: Sign in with Logto\n\tLogto-->>U: `access_token`\n\tU->>B: Request data with `access_token`\n\tB->>B: Retrieve `user_id` from `access_token`\n\tB->>B: Generate jwt by `user_id` & `Supabase JWT secret`\n\tB->>Supabase: Request data with jwt\n\tSupabase-->>B: Responded data\n\tB-->>U: Responded data\n```\n\n----------------------------------------\n\nTITLE: Importing Logto Express Dependencies\nDESCRIPTION: Imports a reusable component for npm-like package installation instructions and renders it with specific package dependencies for Express integration including @logto/express, cookie-parser, and express-session.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/express cookie-parser express-session\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Sign-In/Sign-Out Button Component in Svelte\nDESCRIPTION: This snippet creates a form with a dynamic button that changes between sign-in and sign-out functionality based on the user's authentication status. It uses SvelteKit's form actions to trigger the appropriate server-side action.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"?/{data.user ? 'signOut' : 'signIn'}\">\n  <button type=\"submit\">Sign {data.user ? 'out' : 'in'}</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This snippet imports two components related to scopes and claims, then renders the main component with the code component passed as a prop. It demonstrates how to compose and configure React components for documentation purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token in Next.js Server Component\nDESCRIPTION: Shows how to use the getOrganizationTokenRSC function to fetch an organization token in a Next.js server component. This is useful for server-side rendering scenarios requiring organization-specific authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getOrganizationTokenRSC } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\n\nexport default async function Home() {\n  const token = await getOrganizationTokenRSC(logtoConfig, 'organization-id');\n\n  return (\n    <main>\n      <p>Organization token: {token}</p>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Flutter Client\nDESCRIPTION: Shows how to configure additional scopes when initializing the Logto client to request more user information during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal config = LogtoConfig(\\n  endpoint: 'https://your.logto.endpoint',\\n  appId: 'your_app_id',\\n  scopes: ['email', 'phone', 'custom_scope'],\\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in JSX/MDX\nDESCRIPTION: Imports several code fragment components and passes them as props to a ConfigApiResources component for rendering API resource configuration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto for Additional Scopes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure Logto to request additional scopes such as email and phone. It imports the necessary modules and initializes the LogtoClient with the specified scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [UserScope.Email, UserScope.Phone],\n});\n```\n\n----------------------------------------\n\nTITLE: Inicializando LogtoClient com Escopos Personalizados em Python\nDESCRIPTION: Este snippet mostra duas maneiras de configurar o LogtoClient com escopos adicionais. A primeira usa strings diretas, enquanto a segunda utiliza enums do UserInfoScope para o mesmo resultado.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        scopes=[\"email\", \"phone\"], # Adicionar mais escopos\n    ),\n)\n\n# ou\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        scopes=[UserInfoScope.email, UserInfoScope.profile], # Mesmo resultado\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Custom UI Sign-in Flow with Local Tunnel\nDESCRIPTION: A mermaid sequence diagram showing the sign-in flow using a custom UI and local tunnel service for Logto Cloud authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    box Máquina local\n    participant A as Tu aplicación\n    participant B as Tu UI personalizada de inicio de sesión\n    participant C as Túnel\n    end\n    box Logto Cloud\n    participant D as Endpoint de autenticación de Logto Cloud\n    participant E as Página de inicio de sesión de Logto\n    end\n    A ->> C: El usuario inicia la acción de \"inicio de sesión\" y solicita autenticación\n    C ->> D: Reenvía la solicitud de autenticación al endpoint de Logto Cloud\n    D -->> C: Devuelve la respuesta de autenticación y le dice al cliente<br/>que redirija a la página de inicio de sesión de Logto\n    C ->> B: Intercepta la redirección y<br/>redirige a tu página de inicio de sesión personalizada\n    B ->> C: Envía el formulario de inicio de sesión y<br/>solicita la API de Experiencia para autenticar\n    C ->> D: Reenvía las solicitudes de Experience API a Logto Cloud\n    D -->> C: Autentica la solicitud de inicio de sesión y<br/>le dice al cliente que redirija a tu aplicación\n    C -->> A: Redirige a tu aplicación\n    A --> A: Maneja la devolución de llamada de inicio de sesión y<br/>el usuario ahora está autenticado\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Additional Option\nDESCRIPTION: Example demonstrating how to fetch user information directly by setting the fetchUserInfo option when calling getLogtoContext in a Next.js component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function Home() {\n  const { userInfo } = await getLogtoContext(logtoConfig, { fetchUserInfo: true });\n  return (\n    <div>\n      {userInfo && <p>Email: {userInfo.email}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Logto Client with Organization Scope\nDESCRIPTION: Example of initializing Logto client in Swift with organization scope\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Logto\nimport LogtoClient\n\nlet config = try? LogtoConfig(\n    // ...\n    scopes: [\n        UserScope.organizations.rawValue,\n    ],\n    // ...\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in TypeScript for Capacitor\nDESCRIPTION: Sets up the basic configuration object for Logto authentication in a Capacitor app. Includes the application ID, Logto endpoint URL, and an array of API resource endpoints that require authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code snippet initializes NextAuth with a Logto provider. It sets up the authorization parameters, including the required scopes for OpenID Connect authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      // ... other options\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      // ... other options\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Organization-Related Icons in React\nDESCRIPTION: JavaScript imports for SVG icons used throughout the organizations documentation page. These icons are imported from the site's assets directory and used in the documentation navigation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/organizations/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AuthorizationIcon from '@site/src/assets/authorization.svg';\nimport GearIcon from '@site/src/assets/gear.svg';\nimport JitIcon from '@site/src/assets/jit.svg';\nimport OrganizationIcon from '@site/src/assets/organization.svg';\nimport ArchitectureIcon from '@site/src/assets/pen.svg';\nimport UserFlowIcon from '@site/src/assets/user-flows.svg';\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button Click Handler in Webflow\nDESCRIPTION: This snippet demonstrates how to implement a click event handler for a sign-in button in Webflow. It uses the Logto client to initiate the sign-in process with a specified callback URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_implement-sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  const signInButton = document.getElementById('sign-in');\n  const onClickSignIn = () => logtoClient.signIn('https://your-awesome-site.webflow.io/callback');\n  signInButton.addEventListener('click', onClickSignIn);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Scope to Logto React SDK Configuration in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure the Logto React SDK (`@logto/react`) to request organization-related scopes. It defines a `LogtoConfig` object and specifically includes `UserScope.Organizations` in the `scopes` array, enabling organization features. Requires the `@logto/react` package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: User Import Script using Management API in JavaScript\nDESCRIPTION: JavaScript script demonstrating how to import user data to Logto using the Management API, including error handling and rate limiting considerations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/user-management/user-migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst users = require('./users.json');\n\nconst importUsers = async () => {\n  for (const user of users) {\n    try {\n      await fetch('https://[tenant_id].logto.app/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer [your-access-token]',\n        },\n        body: JSON.stringify(user),\n      });\n      // 暫停一會以避免速率限制\n      await new Promise((resolve) => setTimeout(resolve, 200));\n    } catch (error) {\n      console.error(`Failed to import user ${user.username}: ${error.message}`);\n    }\n  }\n};\n\nimportUsers();\n```\n\n----------------------------------------\n\nTITLE: Importing Modular Code and Components in React - JavaScript\nDESCRIPTION: This snippet imports three modules: one React component from a relative path and two code documentation fragments (likely MDX or Markdown files) containing code samples as React components. The imported modules are designed for use as JSX components or props in the rendering logic, promoting modular organization of documentation, demonstration, and core logic components. Dependencies include React, MDX/Markdown loaders or plugins for the Markdown imports, and a project structure that supports modular doc fragments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Defining the Connector Name in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant variable named `connector` with the string value 'AWS SES'. This constant is likely used within the MDX document or its imported components to dynamically refer to the specific connector (AWS SES) being discussed in the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-aws-ses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'AWS SES';\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Components with Props\nDESCRIPTION: Renders the imported documentation components with specific props to customize the displayed content, including API names for user information retrieval and code examples for scopes configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GetUserInfoApis getIdTokenClaimsApi=\"getIdTokenClaims\" fetchUserInfoApi=\"fetchUserInfo\" />\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Security Documentation Card in React/JSX\nDESCRIPTION: JSX code for rendering a documentation card component that links to security verification API documentation. The component includes a security icon and descriptive text about management API implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/security-verification/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Use Logto Management APIs',\n      href: '/end-user-flows/security-verification/by-management-api',\n      description:\n        'Learn how to add the security verification process to your application using Logto Management APIs.',\n      customProps: {\n        icon: <SecurityIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Dart SDK via pub command\nDESCRIPTION: Command to add the logto_dart_sdk package to a Flutter project using the pub package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add logto_dart_sdk\n```\n\n----------------------------------------\n\nTITLE: Page Structure Using MDX Components in Docusaurus (MDX)\nDESCRIPTION: This snippet illustrates the structured use of imported MDX React components to compose a documentation page for enabling Apple sign-in with Logto on Flutter. It demonstrates combining static markdown sections with dynamic MDX imports, as well as the inline use of comments and component properties, to create a highly organized user guide. Inputs are controlled via component props; this structure expects Docusaurus MDX runtime for rendering, and is limited to documentation use.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-apple.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n{/*\\n  We have to divide templates into sections because imported mdx will not show in the TOC.\\n  There's no way to customize TOC either. :-)\\n\\n  @see https://github.com/facebook/docusaurus/issues/3915\\n*/}\\n\\nexport const connector = 'Apple';\\n\\n{/* truncate */}\\n\\n<Intro connector={connector} sdk=\"Flutter\" link=\"https://flutter.dev\" />\\n\\n## Create an application in Logto \\{#create-an-application-in-logto}\\n\\n<CreateApplication type=\"Native app\" framework=\"Flutter\" />\\n\\n## Integrate Flutter with Logto \\{#integrate-with-logto}\\n\\n<FrameworkGuide />\\n\\n## Add Apple connector \\{#add-connector-connector}\\n\\n<AddSocialConnector connector={connector} framework=\"Flutter\" />\\n\\n## Set up Apple Sign-in \\{#set-up-connectorconfigname}\\n\\n<ConnectorGuide />\\n\\n### Save your configuration \\{#save-your-configuration}\\n\\n<SaveYourConfiguration connector={connector} />\\n\\n## Enable Apple connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\\n\\n<EnableSocialConnector connector={connector} />\\n\\n## Testing and Validation \\{#testing-and-validation}\\n\\n<TestingAndValidation connector={connector} sdk=\"Flutter\" />\\n\\n## Further readings \\{#further-readings}\\n\\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This code imports necessary components and renders the FetchAccessTokenForApiResources component with specific props for getting access tokens in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK via Composer\nDESCRIPTION: Command to install the Logto PHP SDK package using Composer package manager. This adds the Logto SDK as a project dependency in composer.json.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require logto/sdk\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Functionality in Flutter with Logto\nDESCRIPTION: Adds sign-out capability to the Flutter application by implementing a sign-out button that calls logtoClient.signOut with a post-sign-out redirect URI. The URI must be configured in the Logto admin console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  final postSignOutRedirectUri = 'io.logto//home';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signOutButton = TextButton(\n      onPressed: () async {\n        // highlight-start\n        await logtoClient.signOut(postSignOutRedirectUri);\n        render();\n        // highlight-end\n      },\n      child: const Text('Sign Out'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n            signOutButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for WordPress SendGrid Integration Tutorial\nDESCRIPTION: Imports various MDX fragment components to build a structured tutorial for implementing SendGrid email passwordless authentication with WordPress and Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-sendgrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/wordpress-plugin/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/sendgrid/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'SendGrid';\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoProvider with User Scopes in React Native (TSX)\nDESCRIPTION: This snippet demonstrates initializing the Logto configuration object (`LogtoConfig`) for the Logto React Native SDK. It specifies the required `appId`, `endpoint`, and an array of `scopes` including `UserScope.Email`, `UserScope.Phone`, `UserScope.CustomData`, `UserScope.Identities`, and `UserScope.Organizations`. This config object is then passed to the `LogtoProvider` component which wraps the application's root.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"App.tsx\"\nimport { LogtoProvider, LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [\n    // highlight-start\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n    // highlight-end\n  ],\n};\n\nconst App = () => <LogtoProvider config={config}>{/* Your app content */}</LogtoProvider>;\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Tutorial Fragments and Guides - JavaScript\nDESCRIPTION: This snippet imports multiple markdown components as modular sections for a documentation page, organizing a custom step-by-step AWS SES passwordless sign-in tutorial for Next.js applications. Each import pulls a themed MDX file representing a distinct procedural section, such as an introduction, application setup, connector configuration, testing, and further resources. No external dependencies are required beyond the referenced MDX files, and these imports enable building a flexible and reusable tutorial layout.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-aws-ses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/next/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/aws-ses/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Documentation Components\nDESCRIPTION: Renders the imported MDX components with a section header for installation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Fetching in Logto Express Config\nDESCRIPTION: This code snippet shows how to enable fetching of user information in the Logto Express configuration. It sets the 'fetchUserInfo' option to true, which is necessary for accessing certain claims that require a network request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // highlight-next-line\n  fetchUserInfo: true,\n  // ...andere Konfigurationen\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Utilizing MDX Components for Documentation\nDESCRIPTION: This MDX snippet demonstrates the import of reusable documentation components (`FetchOrganizationTokenForUser`, `ConfigOrganizationCode`, `GetOrganizationAccessTokenCode`) and their composition. The `FetchOrganizationTokenForUser` component is invoked, receiving specific configuration (`organizationScope`) and other components (`ConfigOrganizationCode`, `GetOrganizationAccessTokenCode`) as props to dynamically render content related to fetching organization tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example Logto OIDC Configuration Response\nDESCRIPTION: JSON response example from Logto's OIDC configuration endpoint showing the jwks_uri and issuer fields that are needed for token validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwks_uri\": \"https://tenant-id.logto.app/oidc/jwks\",\n  \"issuer\": \"https://tenant-id.logto.app/oidc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Components in React/MDX\nDESCRIPTION: This snippet shows the import statements and usage of MDX components for displaying instructions on how to fetch access tokens for API resources. It imports a reusable fragment component and a code example, then combines them.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Including Blorc.Core Injector Script in HTML\nDESCRIPTION: This snippet shows how to include the necessary Blorc.Core JavaScript file (`injector.js`) within the `<head>` section of the main `index.html` file in a Blazor WASM project. This script is essential for the Blorc framework's functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- ... -->\n  <script src=\"_content/Blorc.Core/injector.js\"></script>\n  <!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Instantiating FetchAccessTokenForApiResources Component in MDX\nDESCRIPTION: This snippet demonstrates the usage of the `FetchAccessTokenForApiResources` component within an MDX file. It configures the component by passing the string 'getAccessToken' to the `getAccessTokenApi` prop and embedding the content rendered by the `GetAccessTokenCode` component (imported separately) into the `getAccessTokenCode` prop. This pattern allows dynamically including relevant code examples within the documentation structure managed by the component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding WeChat SDK Repository in Android Gradle\nDESCRIPTION: Gradle configuration to add mavenCentral repository for accessing the WeChat Open SDK in an Android project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  // ...\n  mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WXEntryActivity in Kotlin for WeChat Integration\nDESCRIPTION: Kotlin implementation of the required WXEntryActivity class that extends Logto's WechatSocialResultActivity to handle WeChat authentication results.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// WXEntryActivity.kt\npackage com.sample.app.wxapi\n\nimport io.logto.sdk.android.auth.social.wechat.WechatSocialResultActivity\n\nclass WXEntryActivity: WechatSocialResultActivity()\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders them using the ConfigApiResources component. It demonstrates how to structure and display API resource configuration documentation in a React-based documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resource Documentation with Dynamic Code Examples (MDX)\nDESCRIPTION: This MDX snippet renders the `ConfigApiResources` component, demonstrating component composition. It passes the previously imported code example components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) as props. This allows the `ConfigApiResources` component to dynamically display the relevant code examples within its structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Detailed Billing Algorithm in Math Notation\nDESCRIPTION: Comprehensive mathematical formula that shows how Logto calculates bills with pro-rated charges, taking into account add-on unit prices, quantities added/removed, and remaining time in the billing cycle.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-cloud/billing-and-pricing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: math\nCODE:\n```\n\\begin{align*}\n\\text{Your next bill} &= \\$16 \\\\\n&+ \\text{add on unit price} \\times \\\\\n\\quad & (\\text{quantity added} \\times \\text{pro-rated time remaining upon creation} \\\\\n\\quad &- \\text{quantity removed} \\times \\text{pro-rated time remaining upon deletion}) \\\\\n\\quad &+ \\text{add on unit price} \\times \\text{quantity remaining}\n\\end{align*}\n```\n\n----------------------------------------\n\nTITLE: Fetching User-Specific Posts from Supabase\nDESCRIPTION: Function that fetches posts from Supabase using the client created in middleware. The Row-Level Security policies ensure that only posts belonging to the authenticated user are returned.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst fetchPosts = async (ctx) => {\n\tcosnt { data } = await ctx.supabase.from('posts').select('*');\n\n\treturn data;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Route in Rails\nDESCRIPTION: This snippet demonstrates how to configure the route for the callback in a Rails application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-next-line\n  get \"/callback\", to: \"sample#callback\"\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchAccessTokenForApiResources Component in MDX\nDESCRIPTION: This snippet demonstrates the usage of the `FetchAccessTokenForApiResources` React component within an MDX file. It passes the string \"GetAccessToken\" as the `getAccessTokenApi` prop and the `GetAccessTokenCode` component (presumably containing relevant code examples) as the `getAccessTokenCode` prop. This structure allows for dynamic rendering of documentation content related to fetching access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in MDX\nDESCRIPTION: Imports and assembles organization token related components including configuration and token fetching functionality. Uses MDX fragments and code snippets to build the organization token handling interface.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organisations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Access Token Payload Example in JSON\nDESCRIPTION: An example of the payload of an access token obtained through token exchange. It includes standard claims such as subject, issuer, expiration time, and scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/personal-access-token.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jti\": \"iFtbZBeh2M1cTTBuKbHk4\",\n  \"sub\": \"123\",\n  \"iss\": \"https://tenant.logto.app/oidc\",\n  \"exp\": 1672531200,\n  \"iat\": 1672527600,\n  \"scope\": \"profile\",\n  \"client_id\": \"client-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Components in MDX\nDESCRIPTION: Imports documentation fragments and renders the FetchAccessTokenForApiResources component with configuration for access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions in Logto User Search\nDESCRIPTION: This snippet shows how to use regular expressions (RegEx) in Logto user search by setting the mode to 'posix'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Logto Endpoint in React Application for Local Testing\nDESCRIPTION: Example of updating the Logto endpoint in a React application to use the local tunnel service for custom UI testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // endpoint: 'https://foobar.logto.app/', // endpoint original de Logto Cloud\n  endpoint: 'http://localhost:9000/', // dirección del servicio de túnel\n  appId: '<your-application-id>',\n};\n\nconst App = () => (\n  <LogtoProvider config={config}>\n    <YourAppContent />\n  </LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Claims in C# ASP.NET Core Controller\nDESCRIPTION: This snippet demonstrates how to access user claims from the User object in an ASP.NET Core controller, including how to extract the user ID from claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar claims = User.Claims;\n\n// ユーザー ID を取得\nvar userId = claims.FirstOrDefault(c => c.Type == LogtoParameters.Claims.Subject)?.Value;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next Auth v4 with Logto Provider\nDESCRIPTION: Sets up Next Auth v4 with Logto as an OAuth provider, including well-known endpoint configuration, scope settings, and user profile mapping.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oauth',\n      // 你可以从 Logto 应用详情页面的\"OpenID 提供商配置端点\"字段获取 well-known URL\n      wellKnown: 'https://xxxx.logto.app/oidc/.well-known/openid-configuration',\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      client: {\n        id_token_signed_response_alg: 'ES384',\n      },\n      profile(profile) {\n        // 你可以在这里自定义用户资料映射\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Initializing SessionStorage in Route Handler\nDESCRIPTION: Code snippet showing how to create a SessionStorage instance in a Gin route handler. This connects the Gin session to Logto's storage requirements.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_create-session-storage.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsession := sessions.Default(ctx)\nsessionStorage := &SessionStorage{session: session}\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication State in Chrome Extension Popup\nDESCRIPTION: This code snippet shows how to check the authentication state and load user profile information in the popup page of a Chrome extension using the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst loadAuthenticationState = async () => {\n  const isAuthenticated = await logtoClient.isAuthenticated();\n  // 認証 (Authentication) 状態に基づいて UI を更新\n\n  if (isAuthenticated) {\n    const user = await logtoClient.getIdTokenClaims(); // { sub: '...', email: '...', ... }\n    // ユーザーのプロファイルで UI を更新\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Updating Custom Data JSON\nDESCRIPTION: JSON example demonstrating how updating custom data overwrites the entire content, showing the input for updating and the resulting new custom data value.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customDataBaz\": {\n    \"baz\": \"baz\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Documentation in MDX/JS\nDESCRIPTION: These import statements bring necessary components into the MDX file's scope using JavaScript ES module syntax. `FetchOrganizationTokenForUser` is the main layout component, while `ConfigOrganizationCode` and `GetOrganizationAccessTokenCode` likely wrap the actual code snippets for configuration and token fetching, respectively, defined in separate Markdown files. This pattern facilitates modular documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in TypeScript\nDESCRIPTION: Retrieves an OAuth access token for the specified API resource ('https://shopping.your-app.com/api') using the Logto authentication client within a TypeScript context. Requires the Logto client to be instantiated and accessible as 'locals.logtoClient' in the application's context. The asynchronous call to 'getAccessToken' returns a token string used for authenticated requests. Input is the audience URL; output is the access token. Intended for use in secure authentication workflows; ensure error handling and that the Logto client is properly initialized prior to calling this method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Preparing User Data for Logto Migration (JSON)\nDESCRIPTION: Example of mapped user data in JSON format for migration to Logto. Includes username, encrypted password, and password algorithm.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/user-migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"username\": \"user1\",\n    \"passwordDigest\": \"password-encrypted\",\n    \"passwordAlgorithm\": \"SHA256\"\n  },\n  {\n    \"username\": \"user2\",\n    \"passwordDigest\": \"password-encrypted\",\n    \"passwordAlgorithm\": \"SHA256\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Sign-in Process with Mermaid Diagram in .NET Core and Logto\nDESCRIPTION: This mermaid diagram visualizes the sign-in process flow between a .NET Core application and Logto. It shows the redirect paths from the app's sign-in path to Logto, then to the CallbackPath, and finally to the RedirectUri within the app.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_sign-in-and-sign-out-flows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  subgraph Your app\n    A\n    C\n    D\n  end\n  subgraph Logto\n    B\n  end\n  A(Sign-in path) -->|Redirect to| B(Logto)\n  B -->|Redirect to| C(CallbackPath)\n  C -->|Redirect to| D(RedirectUri)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization API Resource Access Token in Go\nDESCRIPTION: Method to fetch an access token for a specific API resource within an organization context. The function takes the API resource URL and organization ID as parameters and returns the access token or an error.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := client.GetAccessToken(\n  'https://shopping.your-app.com/api',\n  organizationId\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Callback View Component in Vue.js for Logto Authentication\nDESCRIPTION: This code snippet shows how to create a callback view component in Vue.js that handles the sign-in callback from Logto. It uses the useHandleSignInCallback hook from @logto/vue to process the authentication response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_handle-redirect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useHandleSignInCallback } from '@logto/vue';\nimport router from '@/router';\n\nconst { isLoading } = useHandleSignInCallback(() => {\n  // Do something when finished, e.g. redirect to home page\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <!-- When it's working in progress -->\n  <p v-if=\"isLoading\">Redirecting...</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Authentication Request Example using Bash\nDESCRIPTION: Shows an example of an authentication request to Logto's OAuth endpoint, specifying the resource indicator and required scopes. This is the first step in the OAuth flow to obtain an authorization code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET https://tenant-id.logto.app/oidc/auth?response_type=code\n    &client_id=s6BhdRkqt3\n    &state=tNwzQ87pC6llebpmac_IDeeq-mCR2wLDYljHUZUAWuI\n    &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n    &resource=https%3A%2F%2Fresource-server.com%2Fapi\n    &scope=read%20write\n```\n\n----------------------------------------\n\nTITLE: Running local Logto CLI in an existing Logto instance\nDESCRIPTION: Executes the built-in CLI that comes with Logto releases (since v1.0.0-beta.11) by navigating to the Logto directory and using npm scripts.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/logto\nnpm run cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Terms & Privacy Links in Logto Console\nDESCRIPTION: Steps to configure Terms of Use and Privacy Policy links in the Logto Console's sign-in experience settings. Includes navigation path and configuration options for compliance requirements.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-up-and-sign-in/terms-and-privacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Navigate to Console > Sign-in experience > Content\n2. Add the external links for your \"Terms of use\" and \"Privacy policy\"\n3. Set the policy for \"Agree to terms\" based on your compliance needs for specific regions or industries\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Social Sign-In in JavaScript\nDESCRIPTION: This code snippet shows how to use the Logto SDK in JavaScript to initiate a direct social sign-in. It demonstrates setting the directSignIn parameter with 'social:google' when calling the signIn method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/authentication-parameters/direct-sign-in.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst authResult = await logto.signIn({\n  redirectUri: 'https://your-app.com/callback',\n  directSignIn: 'social:google',\n});\n```\n\n----------------------------------------\n\nTITLE: Members Limit Table Structure in Markdown\nDESCRIPTION: Markdown table showing member limits for different tenant types in Logto Cloud, including Dev, Free production, and Pro production tenants.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-cloud/tenant-member-management.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tenant type            | Member limit                                         |\n| ---------------------- | ---------------------------------------------------- |\n| Dev tenant             | Up to 3 members (contact us for more)                |\n| Free production tenant | 1 member (admin only)                                |\n| Pro production tenant  | Starts with 3 members, then $8 per additional member |\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Development Server with PNPM in Bash\nDESCRIPTION: Command to launch the local development server for the Logto documentation site using PNPM.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Claims in Capacitor App with Logto\nDESCRIPTION: This snippet demonstrates how to use the getIdTokenClaims() method to retrieve user information in a Capacitor application integrated with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userClaims = await logtoClient.getIdTokenClaims();\nconsole.log(userClaims);\n```\n\n----------------------------------------\n\nTITLE: Access Token Response from Logto\nDESCRIPTION: JSON response from Logto's token endpoint containing the access token for impersonation. This token allows the support engineer to access resources as the impersonated user with specified scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"eyJhbG...<truncated>\",\n  \"issued_token_type\": \"urn:ietf:params:oauth:token-type:access_token\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"resource:read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments for Organization Token Management in JSX\nDESCRIPTION: Imports the necessary documentation fragments and code snippets required to explain the process of fetching organization tokens for users in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"LogtoCore::USER_SCOPE[:organizations]\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Scopes in Application Properties\nDESCRIPTION: Demonstrates how to configure additional OAuth2 scopes in the application.properties file. This configuration requests access to user's email, phone number, and organization information beyond the basic profile data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nspring.security.oauth2.client.registration.logto.scope=openid,profile,offline_access,email,phone,urn:logto:scope:organizations\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Tabs\nDESCRIPTION: Imports the necessary React components to create a tabbed interface for the installation instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TabItem from '@theme/TabItem';\nimport Tabs from '@theme/Tabs';\n```\n\n----------------------------------------\n\nTITLE: Solicitud a una API protegida con token Bearer\nDESCRIPTION: Ejemplo de una solicitud HTTP a un recurso protegido utilizando el token de acceso en el encabezado de autorización.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nGET https://resource-server.com/api/users\nAuthorization: Bearer eyJhbGciOiJIUz...\n```\n\n----------------------------------------\n\nTITLE: Illustrating Successful Sign-in Flow with Logto Cloud\nDESCRIPTION: A mermaid sequence diagram showing the default sign-in flow using Logto Cloud's authentication endpoint and sign-in page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    box Máquina local\n    participant A as Tu aplicación\n    end\n    box Logto Cloud\n    participant B as Endpoint de autenticación de Logto Cloud\n    participant C as Página de inicio de sesión de Logto\n    end\n    A ->> B: El usuario inicia la acción de \"inicio de sesión\" y solicita autenticación\n    B -->> A: Devuelve la respuesta de autenticación y le dice al cliente<br/>que redirija a la página de inicio de sesión de Logto\n    A ->> C: Redirige a la página de inicio de sesión de Logto\n    C ->> B: Envía el formulario de inicio de sesión y<br/>solicita la API de Experiencia para autenticar\n    B -->> C: Responde a la solicitud de inicio de sesión y<br/>le dice al cliente que redirija a tu aplicación\n    C -->> A: Redirige a tu aplicación\n    A --> A: Maneja la devolución de llamada de inicio de sesión y<br/>el usuario ahora está autenticado\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto PHP Client with Organization Scopes\nDESCRIPTION: This snippet shows how to initialize a LogtoClient with the organizations scope. It imports the UserScope constant from the Logto SDK and adds the organizations scope to the LogtoConfig constructor.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// highlight-next-line\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    scopes: [UserScope::organizations], // Add scopes\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Code Example in React (JavaScript)\nDESCRIPTION: This code imports the GetAccessTokenCode component from a relative path and renders it within the React application. It is intended for use in MDX or JSX files to embed functional documentation or code snippets. There are no additional dependencies unless GetAccessTokenCode itself has internal dependencies, and no parameters are required for basic usage. The expected output is the UI or documentation represented by GetAccessTokenCode. This pattern is commonly used for modularizing code or documentation within React or MDX projects.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<GetAccessTokenCode />\n```\n\n----------------------------------------\n\nTITLE: Visualizing WordPress Sign-in Flow with Mermaid Diagram\nDESCRIPTION: A sequence diagram showing the sign-in flow between User, WordPress, and Logto. It demonstrates how a user visits the WordPress login page, gets redirected to Logto for authentication, and returns to WordPress once authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/wordpress-plugin/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant User\n    participant WordPress\n    participant Logto\n\n    User->>WordPress: WordPress ログインページを訪問\n    WordPress->>Logto: 認証のために Logto にリダイレクト\n    Logto->>User: 認証を促す\n    User->>Logto: 認証\n    Logto->>WordPress: 認証データを持って WordPress にリダイレクト\n    WordPress->>User: ログイン完了\n```\n\n----------------------------------------\n\nTITLE: Accessing User Claims in Nuxt.js Template\nDESCRIPTION: This snippet demonstrates how to access specific user claims (like name, email, and phone) in a Vue template after configuring the appropriate scopes in the Logto module.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"user\">\n    <p>Name: {{ user.name }}</p>\n    <p>Email: {{ user.email }}</p>\n    <p>Phone: {{ user.phone }}</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Paginated API Response Headers\nDESCRIPTION: Demonstrates the structure of headers in a paginated API response from Logto Management API. It includes the Link header for navigation and the Total-Number header for result count.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrate-logto/interact-with-management-api/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nLink: <https://logto.dev/users?page=1&page_size=20>; rel=\"first\"\nTotal-Number: 216\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token in Swift\nDESCRIPTION: This snippet demonstrates how to get an organization token using the Logto client in Swift.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nlet token = try await client.getOrganizationToken(forId: \"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Secure Storage for Android in Gradle\nDESCRIPTION: Updates the Android build.gradle file to set the minSdkVersion for flutter_secure_storage compatibility.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nandroid {\n    defaultConfig {\n        minSdkVersion 18\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in MDX\nDESCRIPTION: Imports necessary MDX components and renders a ScopesAndClaims component with a configScopesCode prop passed from another imported component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Accessing ID Token Claims in Logto Capacitor App\nDESCRIPTION: Demonstrates how to retrieve user claims from the ID token in a Logto Capacitor application using the getIdTokenClaims() method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userClaims = await logtoClient.getIdTokenClaims();\nconsole.log(userClaims);\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client with Service Role Authentication\nDESCRIPTION: Example of creating a Supabase client using service_role secret for M2M applications. This setup allows bypassing RLS restrictions for administrative or automated tasks that require unrestricted data access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js';\n\n// ...\nconst SUPABASE_SERVICE_ROLE_SCRET = process.env.SUPABASE_SERVICE_ROLE_SCRET;\n\nconst client = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_SCRET, {\n  // ...options\n});\n```\n\n----------------------------------------\n\nTITLE: Authentication Request Example using HTTP GET\nDESCRIPTION: HTTP GET request example for authentication with Logto. It includes parameters like response_type, client_id, state, redirect_uri, resource, and scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET https://tenant-id.logto.app/oidc/auth?response_type=code\n    &client_id=s6BhdRkqt3\n    &state=tNwzQ87pC6llebpmac_IDeeq-mCR2wLDYljHUZUAWuI\n    &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n    &resource=https%3A%2F%2Fresource-server.com%2Fapi\n    &scope=read%20write\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchOrganizationTokenForUser Component in MDX\nDESCRIPTION: This MDX snippet renders the `FetchOrganizationTokenForUser` component, configuring it via props. It sets the `organizationScope` and passes the imported `ConfigOrganizationCode` and `GetOrganizationAccessTokenCode` components as JSX elements to the `configOrganizationCode` and `getOrganizationAccessTokenCode` props respectively. This pattern allows embedding specific code or configuration instructions within a larger documentation structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM-like Installation Component for Logto Express\nDESCRIPTION: This snippet imports a reusable component for npm-like installation instructions and uses it to display installation steps for Logto Express integration packages. It specifies the required packages: @logto/express, cookie-parser, and express-session.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/express cookie-parser express-session\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with npm\nDESCRIPTION: Command to install the Logto Vue package using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Rendering Package Installation Component for @logto/next\nDESCRIPTION: MDX component usage that renders installation instructions for the @logto/next package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<NpmLikeInstallation packageName=\"@logto/next\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering TestingAndValidation Component for WordPress Apple Sign-in\nDESCRIPTION: JSX code that renders the TestingAndValidation component with connector and sdk props to guide users on testing and validating their Apple sign-in implementation in WordPress.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\"WordPress plugin\" />\n```\n\n----------------------------------------\n\nTITLE: Creating WebSecurityConfig Class for Spring Security\nDESCRIPTION: Basic structure of WebSecurityConfig class to configure security settings for the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity\n\npublic class WebSecurityConfig {\n // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Email Connector Documentation in MDX\nDESCRIPTION: This code imports various React components and SVG icons used to display the email connector options in the documentation page. It uses the DocCardList component to create a visually appealing list of the built-in Logto Email Service.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/email-connectors/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport LogtoEmailService from '@site/docs/connectors/assets/icons/logto-email-service.svg';\nimport AwsDm from '@site/docs/connectors/assets/icons/aws-direct-mail.svg';\nimport SendGrid from '@site/docs/connectors/assets/icons/sendgrid.svg';\nimport Mailgun from '@site/docs/connectors/assets/icons/mailgun.svg';\nimport Postmark from '@site/docs/connectors/assets/icons/postmark.svg';\nimport AliyunDm from '@site/docs/connectors/assets/icons/aliyun-direct-mail.svg';\nimport Smtp from '@site/docs/connectors/assets/icons/smtp.svg';\nimport Http from '@site/docs/connectors/assets/icons/http.svg';\n\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Logto Email Service',\n      href: '/connectors/email-connectors/built-in-email-service',\n      description: 'Official connector for Logto Email Service.',\n      customProps: {\n        icon: <LogtoEmailService />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation Content with MDX Components\nDESCRIPTION: Organizes the documentation flow using imported MDX components, creating a step-by-step guide for Logto integration with sections for installation, client initialization, and authentication implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideTip />\n\n### Instalación \\{#installation}\n\n<Installation />\n\n### Inicializar LogtoClient \\{#init-logtoclient}\n\n<InitClient />\n\n<ImplementSignInAndSignOut />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with yarn\nDESCRIPTION: Command to install the Logto Vue package using yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Auth User and Stream for Logto in Dart\nDESCRIPTION: This snippet defines a custom FlutterFlowAuthAuthUser class and sets up a BehaviorSubject stream for managing the authenticated user state. It integrates with Logto's OpenID Connect claims and provides a way to reactively handle user authentication status changes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-user-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\nimport 'package:rxdart/rxdart.dart';\n\nimport 'custom_auth_manager.dart';\n\nclass FlutterFlowAuthAuthUser {\n  FlutterFlowAuthAuthUser({required this.loggedIn, this.uid, this.idToken});\n\n  bool loggedIn;\n  String? uid;\n  OpenIdClaims? idToken;\n}\n\n/// Genera un flujo del usuario autenticado.\nBehaviorSubject<FlutterFlowAuthAuthUser> flutterFlowAuthAuthUserSubject =\n    BehaviorSubject.seeded(FlutterFlowAuthAuthUser(loggedIn: false));\nStream<FlutterFlowAuthAuthUser> flutterFlowAuthAuthUserStream() =>\n    flutterFlowAuthAuthUserSubject\n        .asBroadcastStream()\n        .map((user) => currentUser = user);\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Authentication Flow\nDESCRIPTION: Detailed sequence diagram showing the interaction flow between User, Client Application, Server Application and Logto for authentication and data retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n  sequenceDiagram\n    autonumber\n    actor User as Usuario\n    participant Client as Aplicación cliente\n    participant Server as Aplicación del lado del servidor\n    participant Logto as Logto\n\n    User ->> Client: Accede a la aplicación cliente\n    Client ->> Logto: POST /oidc/auth\n    User -->> Logto: iniciar sesión\n    Logto -->> Client: Redirigir a la aplicación cliente\n    Client ->> Logto: POST /oidc/token\n    Logto ->> Client: Token de acceso (Access token) A\n    Client ->> Server: GET /account-settings (con token de acceso A)\n    Server ->> Logto: POST /oidc/token (con credenciales del cliente)\n    Logto ->> Server: Token de acceso (Access token) B\n    Server ->> Logto: GET /api/users/{userId} (con token de acceso B)\n    Logto ->> Server: Detalles del usuario\n    Server ->> Client: Detalles del usuario\n```\n\n----------------------------------------\n\nTITLE: 사용자 ID 토큰 클레임 가져오기 - Go\nDESCRIPTION: Gin 웹 프레임워크를 사용하여 사용자의 ID 토큰 클레임을 가져오고 JSON으로 응답하는 라우트를 설정합니다. Logto 클라이언트의 GetIdTokenClaims 메서드를 사용하여 클레임을 조회합니다.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    //...\n\n    router.GET(\"/user-id-token-claims\", func(ctx *gin.Context) {\n      session := sessions.Default(ctx)\n      logtoClient := client.NewLogtoClient(logtoConfig, &SessionStorage{session: session})\n\n      // highlight-start\n      idTokenClaims, err := logtoClient.GetIdTokenClaims()\n      // highlight-end\n\n      if err != nil {\n        ctx.String(http.StatusOK, err.Error())\n      }\n\n      ctx.JSON(http.StatusOK, idTokenClaims)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetch Component in MDX\nDESCRIPTION: This snippet shows how to import and render a component that demonstrates access token fetching in a Logto documentation page. It imports a reusable fragment and a code example, then renders them together with specific props to show how to fetch access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Social Identity Binding Sequence Diagram in Mermaid\nDESCRIPTION: This diagram illustrates the flow of binding a social identity to a user account, showing the interactions between User, Client app, Server app, Logto, and the Social identity provider. It demonstrates the complete authorization flow from requesting to bind a social identity to the successful linking of the social identity to the user account.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autoNumber\n    participant User as User\n    participant Client as Client app\n    participant App as server app\n    participant Logto as Logto\n    participant IdP as Social identity provider\n\n    User ->> Client: Access client app request to bind social identity\n    Client ->> App: Send request to bind social identity\n    App ->> Logto: POST /api/connectors/{connectorId}/authorization-uri\n    Logto ->> App: Authorization URI\n    App ->> Client: Return authorization URI\n    Client ->> IdP: Redirect to IdP authorization page\n    User -->> IdP: Sign in to IdP\n    IdP ->> Client: Redirect to client app with authorization code\n    Client ->> Server: Link social identity request, forward IdP authorization response\n    Server ->> Logto: POST /api/users/{userId}/identities\n    Logto ->> IdP: Get user info from IdP using authorization code\n    IdP ->> Logto: Return user info\n```\n\n----------------------------------------\n\nTITLE: Importing and Integrating Config Resource Code Snippets Using React - JavaScript\nDESCRIPTION: This snippet imports three markdown files containing code samples and one MDX fragment, then constructs a React component hierarchy where the imported code snippets are passed as properties. All imports are handled using ES6 module syntax. The React component <ConfigApiResources> receives the code snippets through dedicated props which likely expect rendered code blocks or markdown. This demonstrates a modular pattern to supply code samples to documentation components, with no runtime dependencies beyond React and appropriate loader configurations for '.mdx' and '.md' files.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\\n\\nimport ConfigResourcesCode from './code/_config-resources-code.md';\\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\\n\\n<ConfigApiResources\\n  configResourcesCode={<ConfigResourcesCode />}\\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Fetching Components in JSX\nDESCRIPTION: This code imports and uses components to fetch an access token for API resources in Logto. It includes a reusable component for fetching access tokens and a code snippet for getting the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing React Components for Organization Token Fetching\nDESCRIPTION: This snippet imports necessary components and composes them to fetch an organization token for a user. It sets the organization scope and includes code for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rotating OIDC Private Signing Keys in Logto OSS using CLI\nDESCRIPTION: CLI command to generate a new OIDC private signing key. The --type option allows specifying 'rsa' or 'ec' (default) algorithm.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/rotate-signing-keys.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlogto db config rotate oidc.privateKeys --type rsa\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli db config rotate oidc.privateKeys -- --type rsa\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db config rotate oidc.privateKeys -- --type rsa\n```\n\n----------------------------------------\n\nTITLE: Executing Gradle Task for Android App Signing Signature\nDESCRIPTION: Command to run the signingReport Gradle task to obtain the application signing signature required for WeChat Android integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew your-android-project:signingReport\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then configures the ConfigApiResources component with the imported code examples. It demonstrates how to set up API resource documentation in a React-based documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Logto API Resource Configuration Components in JSX\nDESCRIPTION: This snippet imports and renders the ConfigApiResources component, passing in code snippets for different resource configurations as props. It demonstrates how to set up API resources with various scoping options in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Manual Configuration for Organization Token\nDESCRIPTION: Example of manual configuration for obtaining organization tokens without using Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Solo para otros casos. Para SDKs de Logto, ver arriba.\nconst config = {\n  // ...\n  scope: 'openid offline_access urn:logto:scope:organizations',\n  resource: 'urn:logto:resource:organizations',\n};\n```\n\n----------------------------------------\n\nTITLE: Python SDK での組織スコープ設定\nDESCRIPTION: Logto Python SDK で組織スコープを設定する方法です。LogtoClient インスタンスを作成する際に LogtoConfig の scopes パラメーターに UserInfoScope.organizations を追加します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...\n        scopes=[UserInfoScope.organizations],\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Go SDK\nDESCRIPTION: Gets an access token from Logto for a specific API endpoint. Requires initialized logtoClient instance and target API URL as input. Returns the access token and any potential error.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := logtoClient.GetAccessToken(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scope and Claims Documentation Components in JSX\nDESCRIPTION: This JSX code imports documentation fragments related to OAuth scopes and claims, then renders them together. It uses the MDX format to combine reusable documentation components, passing the code examples as a prop to the main component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Logto SDK Components for Organization Access\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring organization access and fetching organization tokens using the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Rendering an Imported Component in MDX/JSX\nDESCRIPTION: This JSX tag renders the `GetAccessTokenCode` component that was previously imported. This effectively includes the content of the `_get-access-token-code.mdx` file at this point in the document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GetAccessTokenCode />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Components in MDX\nDESCRIPTION: Imports MDX fragments for access token fetching and renders a component with token-related props and code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom State Parameter for Secure Authentication Response Validation\nDESCRIPTION: JSON configuration example demonstrating how to add a custom state parameter for enhanced security validation. The client application should validate this state parameter in the authorization code response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"state\": \"custom-state-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signatures using HMAC in Node.js\nDESCRIPTION: A TypeScript function that verifies webhook payload signatures using HMAC SHA-256. The function takes a signing key, raw request body, and expected signature as inputs, then compares the computed signature with the expected one from Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/developers/webhooks/secure-webhooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHmac } from 'node:crypto';\n\nexport const verify = (signingKey: string, rawBody: Buffer[], expectedSignature: string) => {\n  const hmac = createHmac('sha256', signingKey);\n  hmac.update(rawBody);\n  const signature = hmac.digest('hex');\n  return signature === expectedSignature;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Side Button for Logto Organization Token Retrieval\nDESCRIPTION: This client-side component defines a button that, when clicked, retrieves an organization token using a server action. It then logs the token to the console. The component is designed to be used within the main page component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetOrganizationToken: () => Promise<string>;\n};\n\nconst GetOrganizationToken = ({ onGetOrganizationToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetOrganizationToken();\n        console.log(token);\n      }}\n    >\n      Obtenir le jeton d'organisation (voir le journal de la console)\n    </button>\n  );\n};\n\nexport default GetOrganizationToken;\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code initializes NextAuth.js with Logto as an authentication provider. It configures the OAuth scope to include 'openid offline_access profile email' and highlights the resource parameter which points to the application's API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          scope: 'openid offline_access profile email',\n          // highlight-next-line\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Explanation for Method Type in JSX\nDESCRIPTION: This snippet renders additional explanation when the 'type' prop is 'method'. It describes how the method fetches user information from the userinfo endpoint and provides links for further information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_claims-need-network-request.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{props.type === 'method' && (\n\n<>\n  This method will fetch the user information by requesting to the{' '}\n  <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#UserInfo\">userinfo endpoint</a>. To\n  learn more about the available scopes and claims, see the{' '}\n  <a href=\"#scopes-and-claims\">Scopes and claims</a> section.\n</>\n)}\n```\n\n----------------------------------------\n\nTITLE: Injecting User Information into SvelteKit Layout\nDESCRIPTION: This snippet shows how to make user information available across the application by injecting the locals.user object into the layout server load function, making it accessible to all pages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = async ({ locals }) => {\n  return { user: locals.user };\n};\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application on Windows\nDESCRIPTION: This command runs the Spring Boot application using Gradle on Windows systems.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngradlew.bat bootRun\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments and Code Snippets for Logto API Resources Documentation\nDESCRIPTION: This code imports the ConfigApiResources component and various code snippet examples for configuring API resources in Logto. It then renders the ConfigApiResources component with the imported code snippets as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client Middleware in Express\nDESCRIPTION: An Express middleware that creates a Supabase client using the authenticated user ID. This middleware makes the Supabase client available for subsequent request handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const withSupabaseClient = async (ctx, next) => {\n  ctx.supabase = getSupabaseClient(ctx.auth.userId);\n\n  return next();\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Encrypted Password and Encryption Method in JSON\nDESCRIPTION: This snippet demonstrates the structure of encrypted password and encryption method for a user with the password '123456', using Argon2 encryption.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"password_encryption_method\": \"Argon2i\",\n  \"password_encrypted\": \"$argon2i$v=19$m=4096,t=10,p=1$aZzrqpSX45DOo+9uEW6XVw$O4MdirF0mtuWWWz68eyNAt2u1FzzV3m3g00oIxmEr0U\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token and Claims in PHP\nDESCRIPTION: This snippet shows how to get both the organization token and its claims using the Logto client in PHP.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$token = $client->getOrganizationToken('<organization-id>');\n// o\n$claims = $client->getOrganizationTokenClaims('<organization-id>');\n```\n\n----------------------------------------\n\nTITLE: HTML Email Template Example for Logto Sign-In Verification\nDESCRIPTION: A complete HTML email template example for the sign-in verification process in Logto. It includes styling, responsive design, and placeholders for dynamic content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/email-connectors/email-templates.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Verify your email to sign in</title>\n    <style>\n      .auth-service-by:hover .mini-logo {\n        display: none !important;\n      }\n      .auth-service-by:hover .mini-logo-color {\n        display: block !important;\n      }\n      body {\n        font-family:\n          'SF Pro Text',\n          -apple-system,\n          system-ui,\n          BlinkMacSystemFont,\n          'Segoe UI',\n          Roboto,\n          Arial,\n          sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-smooth: always;\n        background-color: #fff;\n        color: #191c1d;\n        max-width: 640px;\n        padding: 32px 0;\n        font-size: 14px;\n        font-weight: 400;\n        line-height: 20px;\n      }\n      h1 {\n        font-size: 24px;\n        font-weight: 700;\n        line-height: 32px;\n        margin-top: 32px;\n      }\n      .verification-code {\n        margin: 20px 0;\n        background: #eff1f1;\n        border-radius: 12px;\n        padding: 36px;\n        font-size: 32px;\n        font-weight: 600;\n        line-height: 40px;\n      }\n      .footer {\n        text-align: center;\n        color: #a9acac;\n        margin-top: 48px;\n      }\n    </style>\n  </head>\n  <body>\n    <div style=\"max-width: 698px; border-radius: 16px; border: 1px solid #E0E3E3;\">\n      <div style=\"padding: 0 24px;\">\n        <center>\n          <img src=\"{{logoUrl}}\" alt=\"Logo\" width=\"auto\" height=\"40\" />\n          <h1>Verify your email to sign in</h1>\n          <p>\n            We have received a sign in attempt with the following code. Please enter it in the page\n            you opened to complete the sign in process.\n          </p>\n          <div class=\"verification-code\">000000</div>\n          <p style=\"color: #747778;\">\n            If you did not attempt to sign in but received this email, please ignore it. The code\n            will remain active for 10 minutes.\n          </p>\n          <hr style=\"margin: 64px 0 24px; max-width: 420px;\" />\n          <p style=\"color: #747778; margin: 16px 0 0;\">{{companyInfo}}</p>\n        </center>\n      </div>\n    </div>\n    <div class=\"footer\">\n      <hr />\n      <p style=\"font-size: 14px; line-height: 20px; margin: 20px 0;\">\n        <a href=\"https://logto.io\" style=\"color: #A9ACAC; text-decoration: underline;\">Logto</a>:\n        The better identity infrastructure for developers.\n      </p>\n      <table style=\"margin: 0 auto; width: auto; border-spacing: 0;\">\n        <tbody>\n          <tr>\n            <td style=\"vertical-align: middle;\">\n              <a href=\"{{discordServerUrl}}\" style=\"display: block; margin: 0 12px;\">\n                <img src=\"{{discordLogoUrl}}\" style=\"width: 20px;\" />\n              </a>\n            </td>\n            <td style=\"vertical-align: middle;\">\n              <a href=\"{{githubUrl}}\" style=\"display: block; margin: 0 12px;\">\n                <img src=\"{{githubLogoUrl}}\" style=\"width: 20px;\" />\n              </a>\n            </td>\n            <td style=\"vertical-align: middle;\">\n              <a href=\"{{twitterUrl}}\" style=\"display: block; margin: 0 12px;\">\n                <img src=\"{{twitterLogoUrl}}\" style=\"width: 20px;\" />\n              </a>\n            </td>\n            <td style=\"vertical-align: middle;\">\n              <a href=\"{{mailToUrl}}\" style=\"display: block; margin: 0 12px;\">\n                <img src=\"{{emailIconUrl}}\" style=\"width: 20px;\" />\n              </a>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <p style=\"font-size: 12px; line-height: 16px;\">\n        © Silverhand, Inc., 2810 North Church Street, Wilmington, DE 19802\n      </p>\n      <p style=\"color: #A9ACAC; font-size: 12px; line-height: 16px;\">\n        Have questions or need help?\n        <a href=\"{{mailToUrl}}\" style=\"color: #A9ACAC; text-decoration: underline;\">Contact us</a>\n      </p>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Mapping for Google OAuth in Logto\nDESCRIPTION: Example JSON configuration showing how to map Google's user profile fields to Logto's standard profile fields. Maps the 'sub' field to Logto's 'id' and 'picture' field to Logto's 'avatar'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/oauth2/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"sub\",\n  \"avatar\": \"picture\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Data in Svelte Component\nDESCRIPTION: This code demonstrates how to display user information in a Svelte component by accessing the user object from the page data and iterating through its properties.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n</script>\n\n{#if data.user}\n<ul>\n  {#each Object.entries(data.user) as [key, value]}\n  <li>{key}: {value}</li>\n  {/each}\n</ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources in MDX\nDESCRIPTION: Imports required MDX fragments and code components, then assembles them into a ConfigApiResources component with configuration props for different resource types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: HTTP Token Request Parameters\nDESCRIPTION: Required parameters for making a POST request to the token endpoint using application/x-www-form-urlencoded format. Includes grant_type, resource, and scope parameters, along with Basic authentication header using App ID and App Secret.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/machine-to-machine/fragments/_basics-about-access-token-request.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /token HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\nAuthorization: Basic {base64(APP_ID:APP_SECRET)}\n\ngrant_type=client_credentials&resource={resource}&scope={scope}\n```\n\n----------------------------------------\n\nTITLE: Syncing Translation Keys to a Specific Language\nDESCRIPTION: Command to synchronize translation keys from the source language (en by default) to a target language (pt-BR in this example). This ensures all keys are consistent across languages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/translate-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm translate sync-keys --target pt-BR\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Response Example in HTTP\nDESCRIPTION: An example of a successful response to a token exchange request. It includes the access token and other relevant information in JSON format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/personal-access-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"access_token\": \"eyJhbGci...zg\",\n  \"issued_token_type\": \"urn:ietf:params:oauth:token-type:access_token\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"profile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client Initialization\nDESCRIPTION: This snippet demonstrates how to configure additional scopes when initializing the Logto client in a Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { UserScope, LogtoNextConfig } from '@logto/next';\n\nexport const logtoConfig: LogtoNextConfig = {\n  scopes: [UserScope.Email, UserScope.Phone], // Add more scopes if needed\n  // ...other configs\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Installation Component in React\nDESCRIPTION: Import statement for a reusable MDX component that provides npm-like installation instructions, followed by component usage with the @logto/react package name parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/react\" />\n```\n\n----------------------------------------\n\nTITLE: WXEntryActivity File Path Example in Android Project\nDESCRIPTION: Example file path structure for the WXEntryActivity in an Android project, showing where the file should be located within the package hierarchy.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsrc/main/kotlin/com/sample/app/wxapi/WXEntryActivity.kt\n```\n\n----------------------------------------\n\nTITLE: Creating a Home Page with Authentication Status in TypeScript\nDESCRIPTION: This snippet shows how to create a home page route that displays different content based on the user's authentication status. It uses the user object from the request to determine if the user is signed in and renders appropriate HTML content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (request: Request, response) => {\n  const { user } = request;\n  response.setHeader('content-type', 'text/html');\n\n  if (user) {\n    response.end(\n      `<h1>Hello Logto</h1><p>Signed in as ${JSON.stringify(\n        user\n      )}, <a href=\"/sign-out\">Sign Out</a></p>`\n    );\n  } else {\n    response.end(`<h1>Hello Logto</h1><p><a href=\"/sign-in\">Sign In</a></p>`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims via getServerSideProps in Next.js\nDESCRIPTION: This snippet shows how to fetch and display user claims using getServerSideProps in a Next.js page. It uses the Logto client to handle server-side authentication and passes the user data as props to the component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoContext } from '@logto/next';\nimport { logtoClient } from '../../libraries/logto';\n\ntype Props = {\n  user: LogtoContext;\n};\n\nconst Home = ({ user }: Props) => {\n  const claims = useMemo(() => {\n    if (!user.isAuthenticated || !user.claims) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h2>Revendications :</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Nom</th>\n              <th>Valeur</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(user.claims).map(([key, value]) => (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>{String(value)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }, [user]);\n\n  return (\n    <div>\n      {claims}\n    </div>\n  );\n};\n\nexport default Home;\n\nexport const getServerSideProps = logtoClient.withLogtoSsr(async function ({ request }) {\n  const { user } = request;\n\n  return {\n    props: { user },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Access Token Payload in Logto\nDESCRIPTION: Example JSON payload of an access token obtained through PAT exchange. It includes standard claims such as jti, sub, iss, exp, iat, scope, and client_id.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/user-management/personal-access-token.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jti\": \"iFtbZBeh2M1cTTBuKbHk4\",\n  \"sub\": \"123\",\n  \"iss\": \"https://tenant.logto.app/oidc\",\n  \"exp\": 1672531200,\n  \"iat\": 1672527600,\n  \"scope\": \"profile\",\n  \"client_id\": \"client-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchOrganizationTokenForUser Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the FetchOrganizationTokenForUser component with specific props to configure organization settings and fetch access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a User Profile HTML Template with Logout Functionality\nDESCRIPTION: HTML template that displays authenticated user details (username, email, and ID) and provides a logout button to end the user session.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <h1>Detalhes do Usuário</h1>\n  <div>\n    <p>\n    <div><strong>nome:</strong> <span th:text=\"${username}\"></span></div>\n    <div><strong>email:</strong> <span th:text=\"${email}\"></span></div>\n    <div><strong>id:</strong> <span th:text=\"${sub}\"></span></div>\n    </p>\n  </div>\n\n  <form th:action=\"@{/logout}\" method=\"post\">\n    <input type=\"submit\" value=\"Logout\" />\n  </form>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Using FetchOrganizationTokenForUser MDX Component\nDESCRIPTION: This MDX snippet demonstrates the usage of the `FetchOrganizationTokenForUser` component. It imports necessary components (`FetchOrganizationTokenForUser`, `ConfigOrganizationCode`, `GetOrganizationAccessTokenCode`) and renders `FetchOrganizationTokenForUser`, passing `ConfigOrganizationCode` and `GetOrganizationAccessTokenCode` components as props. The `organizationScope` prop is set to `UserScope.Organizations`, indicating the scope required for organization token operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Sample OpenID Configuration Response\nDESCRIPTION: Example JSON response showing the issuer and JWKS URI configuration from Logto's well-known endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuer\": \"https://<your-logto-domain>/oidc\",\n  \"jwks_uri\": \"https://<your-logto-domain>/oidc/jwks\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Logto Integration in Express\nDESCRIPTION: Commands to install necessary dependencies for integrating Logto with an Express application. This includes Logto's core SDK, node-fetch, express-session, and js-base64.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/js node-fetch@v2 express-session js-base64\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/js node-fetch@v2 express-session js-base64\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/js node-fetch@v2 express-session js-base64\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations UserScope in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a new LogtoClient instance with custom configurations. It specifically highlights the inclusion of the Organizations user scope in the scopes array. This configuration is crucial for applications that require access to organization-related data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto in Vue with Organization Scope\nDESCRIPTION: This snippet shows how to initialize Logto authentication in a Vue application with organization access scope enabled. It imports the required modules from @logto/vue and uses the createLogto method with appropriate configuration to set up the authentication provider for the Vue application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto, UserScope } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: [UserScope.Organizations],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Access Token Payload Example (TSX)\nDESCRIPTION: Example of an access token payload showing issuer, audience, and scope claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  iss: '<your-logto-endpoint>/oidc',\n  aud: 'https://resource-server.com/api',\n  scope: 'read write'\n}\n```\n\n----------------------------------------\n\nTITLE: Logto OIDC Configuration JSON Example\nDESCRIPTION: This JSON snippet shows an example of the Logto OIDC configuration, including the JWKS URI and issuer URL, which are necessary for token validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/node-express.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwks_uri\": \"https://tenant-id.logto.app/oidc/jwks\",\n  \"issuer\": \"https://tenant-id.logto.app/oidc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in React\nDESCRIPTION: This code imports necessary components and code snippets, then renders a ConfigApiResources component with props for different API resource configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Logto Connector Configuration Fields for Line Login\nDESCRIPTION: This markdown table describes the configuration fields required for setting up the Line login connector in Logto, including their names and data types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/line/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name         | Type   |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n| scope        | string |\n```\n\n----------------------------------------\n\nTITLE: Attaching Access Token to API Requests in Swift\nDESCRIPTION: This snippet demonstrates how to attach a Logto access token to an HTTP request header using the Bearer token format for authenticating API requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nawait LogtoRequest.get(\n  useSession: session,\n  endpoint: userInfoEndpoint,\n  // highlight-next-line\n  headers: [\"Authorization\": \"Bearer \\(accessToken)\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Application Creation Component for WordPress Integration\nDESCRIPTION: Renders the CreateApplication component with configuration parameters specifying a traditional web application type and WordPress as the framework.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-hugging-face.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CreateApplication type=\"Traditional web\" framework=\"WordPress\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes for Capacitor in TypeScript\nDESCRIPTION: This TypeScript snippet imports necessary types and constants from the '@logto/capacitor' package to configure Logto's authentication settings. It defines a config object of type LogtoConfig and includes a scopes property, assigning UserScope.Organizations to enable organization-related user permissions. Dependencies include having the '@logto/capacitor' package installed. The config object should be passed to the Logto authentication client as part of the initialization process. Scopes determine what information and permissions are requested during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\\n\\nconst config: LogtoConfig = {\\n  // ...other configs\\n  scopes: [UserScope.Organizations],\\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Next.js Component\nDESCRIPTION: This code snippet demonstrates how to access additional claims, such as email, in a Next.js component after configuring additional scopes in the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst Home = () => {\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\n\n  const email = data?.claims?.email;\n\n  return (\n    <div>\n      {email && <p>Email : {email}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: 추가 스코프 설정 - Flutter\nDESCRIPTION: LogtoConfig 객체에 추가 스코프를 설정하는 방법을 보여줍니다. 이 예제에서는 'email' 및 'custom_scope' 스코프를 요청합니다.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_get-user-info.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal config = LogtoConfig(\n  ...\n  scopes: ['email', 'custom_scope'],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig with Enumeration Scopes in Dart\nDESCRIPTION: This snippet shows how to initialize a LogtoConfig object using the built-in LogtoUserScope enumeration for predefined scopes. It uses the enumeration values for 'email' and 'phone' scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_scopes-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [LogtoUserScope.email.value, LogtoUserScope.phone.value],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Components in React\nDESCRIPTION: React/JSX code that imports organization token-related components and configures them with specific props. The code sets up organization scope and references code snippets for configuration and token fetching.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow Diagram with Mermaid\nDESCRIPTION: A sequence diagram visualizing the authentication flow between Chrome extension popup, service worker, and Logto sign-in experience.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant A as Popup de l'extension\n  participant B as Service worker de l'extension\n  participant C as Expérience de connexion Logto\n\n  A->>B: Invoque la connexion\n  B->>C: Redirige vers Logto\n  C->>C: L'utilisateur se connecte\n  C->>B: Redirige vers l'extension\n  B->>A: Notifie le popup\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP Email Connector Option with DocCardList in MDX\nDESCRIPTION: This code snippet displays the HTTP Email Connector option using the DocCardList component. This connector allows users to integrate with their own email service that doesn't support SMTP connections by making API calls to a specified endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/connectors/email-connectors/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'HTTP 이메일 커넥터',\n      href: '/integrations/http-email',\n      description: 'HTTP 이메일에 대한 공식 Logto 커넥터입니다.',\n      customProps: {\n        icon: <Http />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Logto Components for Organization Token Fetching in React\nDESCRIPTION: This code snippet imports necessary components and code snippets, then uses them to render a component for fetching an organization token for a user. It sets the organization scope and passes in configuration and token retrieval code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes Documentation Components in React/JSX\nDESCRIPTION: This code imports two components - a main Scopes and Claims component and a code example component. It then renders the main component while passing the code example as a prop.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Browser Client\nDESCRIPTION: This snippet shows how to configure the Logto Browser Client to request additional scopes, such as email and phone. It imports the necessary modules and initializes the client with the specified scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [UserScope.Email, UserScope.Phone],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with API Resources in Dart\nDESCRIPTION: Creates a LogtoConfig instance with endpoint, appId, and an array of API resource URLs. This configuration is used to set up Logto authentication and specify which API endpoints the application can access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // Add your API resources\n  // highlight-start\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Connector Options with DocCardList in MDX\nDESCRIPTION: This code snippet uses the DocCardList component to display the free Logto Email Service connector option. It includes imports for various connector icons and renders a card with the connector details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/connectors/email-connectors/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport LogtoEmailService from '@site/docs/connectors/assets/icons/logto-email-service.svg';\nimport AwsDm from '@site/docs/connectors/assets/icons/aws-direct-mail.svg';\nimport SendGrid from '@site/docs/connectors/assets/icons/sendgrid.svg';\nimport Mailgun from '@site/docs/connectors/assets/icons/mailgun.svg';\nimport Postmark from '@site/docs/connectors/assets/icons/postmark.svg';\nimport AliyunDm from '@site/docs/connectors/assets/icons/aliyun-direct-mail.svg';\nimport Smtp from '@site/docs/connectors/assets/icons/smtp.svg';\nimport Http from '@site/docs/connectors/assets/icons/http.svg';\n\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Logto Email Service',\n      href: '/connectors/email-connectors/built-in-email-service',\n      description: 'Logto 이메일 서비스에 대한 공식 커넥터입니다.',\n      customProps: {\n        icon: <LogtoEmailService />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in SvelteKit Hook (TypeScript)\nDESCRIPTION: This snippet shows the configuration of the `handleLogto` function within a SvelteKit server hook file (`hooks.server.ts`). It defines the specific OAuth `scopes` (permissions like 'shopping:read', 'store:write') the application requests and the `resources` (API identifiers like 'https://shopping.your-app.com/api') it intends to access. This configuration is essential for setting up role-based access control and API security using Logto in a SvelteKit application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"hooks.server.ts\"\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Email Deliveries\nDESCRIPTION: Comprehensive example of configuring email delivery settings for different authentication scenarios using both direct HTML content and Mailgun templates.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/email/mailgun/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Register\": {\n    \"subject\": \"{{code}} is your verification code\",\n    \"replyTo\": \"Foo <foo@bar.com>\",\n    \"html\": \"<h1>Welcome to Logto</h1><p>Your verification code is {{code}}.</p>\",\n    \"text\": \"Welcome to Logto. Your verification code is {{code}}.\"\n  },\n  \"SignIn\": {\n    \"subject\": \"Welcome back to Logto\",\n    \"replyTo\": \"Foo <foo@bar.com>\",\n    \"template\": \"logto-sign-in\",\n    \"variables\": {\n      \"bar\": \"baz\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Issuance Control Implementation\nDESCRIPTION: Demonstrates how to use api.denyAccess() to block token issuance based on user balance conditions, implementing forced logout functionality for game services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/custom-token-claims/common-use-cases.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napi.denyAccess()\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with pnpm\nDESCRIPTION: Command to install the Logto Vue library using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: MDX Frontmatter Configuration\nDESCRIPTION: Metadata configuration for the documentation page including slug, tags, title, SDK and connector information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-mvc-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: how-to-build-google-workspace-enterprise-sso-sign-in-with-dotnet-core-mvc-and-logto\ntags: [SSO providers, google-workspace-enterprise-sso, dotnet-core-mvc, c#, SAML authentication, enterprise login, SSO login]\ntitle: How to build Google Workspace enterprise SSO with .NET Core (MVC)\nsdk: .NET Core (MVC)\nconnector: Google Workspace enterprise SSO\n---\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Organization Token Components in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders a custom FetchOrganizationTokenForUser component with specific props for organization configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"urn:logto:scope:organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Naver Sign-In Tutorial\nDESCRIPTION: This code snippet imports various MDX fragments and components used throughout the tutorial. It includes sections for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-naver.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-server/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/naver/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Naver';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Components\nDESCRIPTION: Imports MDX fragments and code components, then renders them using a custom component for displaying access token fetch documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring React Documentation Components\nDESCRIPTION: Imports markdown/MDX documentation components and arranges them in a specific order with proper section headings. Uses relative imports and JSX syntax to compose the documentation layout.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.md';\nimport Installation from './_installation.md';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Volume Configuration for Google Storage\nDESCRIPTION: YAML configuration for mounting Google Cloud Storage key file in Docker container\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/file-storage-provider.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - ./path/to/google-storage-key.json:/etc/logto/core/google-storage-key.json\n```\n\n----------------------------------------\n\nTITLE: Using ConnectorGuide Component in MDX\nDESCRIPTION: Renders the 'ConnectorGuide' MDX component. This component likely imports and displays detailed instructions specific to configuring the Slack connector, such as setting up the necessary credentials and callback URLs within the Slack developer platform.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-slack.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<ConnectorGuide />\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK and Dependencies with npm\nDESCRIPTION: This snippet shows how to install the Logto SDK and its peer dependencies using npm. It installs @logto/capacitor along with @capacitor/browser, @capacitor/app, and @capacitor/preferences.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/capacitor\nnpm i @capacitor/browser @capacitor/app @capacitor/preferences\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Organization Scope in JavaScript\nDESCRIPTION: This snippet shows how to import the LogtoClient module from the CDN and initialize it with the Organizations user scope. The client instance is attached to the window object for global access throughout the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from 'https://esm.run/@logto/browser';\n\nwindow.logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Documentation Component in React/JSX\nDESCRIPTION: Renders the FetchAccessTokenForApiResources component with specific props that configure the API name and include the code example for getting access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Logto Next.js Installation Fragment\nDESCRIPTION: Imports and renders a reusable documentation fragment component for installing the @logto/next package, using MDX syntax for React components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/next\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Util Methods for Dart\nDESCRIPTION: Modifies the auth util file to include getters for accessing CustomAuthManager, current user data, and Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_client.dart';\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nimport 'custom_auth_manager.dart';\n\nexport 'custom_auth_manager.dart';\n\nfinal _authManager = CustomAuthManager();\nCustomAuthManager get authManager => _authManager;\nString get currentUserUid => currentUser?.uid ?? '';\nOpenIdClaims? get currentUserData => currentUser?.idToken;\nLogtoClient get logtoClient => _authManager.logtoClient;\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Fragment and Code Components in React (JavaScript)\nDESCRIPTION: This snippet imports two modules: a React component representing a fragment to fetch API access tokens and a module with code samples for obtaining an access token. The imported items are intended for use within other React components to display both instructions and runnable code. Dependencies include the file paths used as import sources and support for ES6 module syntax.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet imports necessary components and renders a custom component for fetching access tokens. It uses imported fragments and code snippets to provide a complete guide for obtaining access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cyberpunk Theme CSS for Logto Sign-in UI\nDESCRIPTION: A comprehensive CSS example that transforms Logto's sign-in interface into a Cyberpunk/Night City theme. Includes custom fonts, background images, form styling, and color scheme modifications. Uses CSS selectors to target Logto's modular CSS classes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/custom-css.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'Rock Salt';\n  font-style: normal;\n  font-weight: normal;\n  font-display: swap;\n  src: url('https://fonts.gstatic.com/s/rocksalt/v18/MwQ0bhv11fWD6QsAVOZrt0M6p7NGrQ.woff2')\n    format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F,\n    U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n@font-face {\n  font-family: 'Share Tech';\n  font-style: normal;\n  font-weight: normal;\n  font-display: swap;\n  src: url('https://fonts.gstatic.com/s/sharetech/v17/7cHtv4Uyi5K0OeZ7bohU8H0JmBUhfrE.woff2')\n    format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F,\n    U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n#app * {\n  font-family: 'Share Tech';\n  letter-spacing: 0.5px;\n  --color-type-primary: #ffffff;\n  --color-type-secondary: #c9c5d0;\n}\n\n#app > div[class$='viewBox'] {\n  background-image: url('https://silverhand.io/assets/v-in-nc.jpg');\n  background-size: cover;\n}\n\n#app main[class*='main'] {\n  background-image: url('https://logtoeu.blob.core.windows.net/public-blobs/g3cp4y/m-g3cp4y/2024/01/02/w9j0x57g/gentle-universe.png');\n  background-size: cover;\n  opacity: 97%;\n  min-height: initial;\n  padding: 24px;\n  padding-bottom: 72px;\n  border-radius: 12px;\n}\n\n#app main[class*='main'] img[class*='logo'] {\n  content: url('https://silverhand.io/assets/cyberpunk-2077.png');\n  margin: -20px 0 -12px;\n  height: 160px;\n}\n\n#app form div[class*='inputField'] > div {\n  outline: none;\n  border: none;\n  border-radius: 4px;\n}\n\n#app form div[class*='inputField'] input,\n#app form div[class*='inputField'] div[class$='countryCodeSelector'] {\n  background: initial;\n  background-color: #564f7c;\n  font-family: 'Share Tech';\n  letter-spacing: 0.5px;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n#app form div[class*='inputField'] > div > input::placeholder,\n#app main[class*='main'] > div[class*='wrapper'] > div[class*='divider'],\n#app main[class*='main'] > div[class*='wrapper'] > form div[class*='content'],\n#app main[class*='main'] > div[class*='wrapper'] > form div[class*='content'] > span {\n  color: #a7a5b3;\n}\n\n#app main[class*='main'] > div[class*='wrapper'] > div[class*='divider'] > i[class*='line'],\n#app\n  main[class*='main']\n  > div[class*='wrapper']\n  > div[class*='terms']\n  > i[class*='divider']::after {\n  background: rgba(247, 248, 248, 14%);\n}\n\n#app button {\n  font-weight: 600;\n  font-size: 16px;\n  border-radius: 4px;\n}\n\n#app button[type='submit'] {\n  background: linear-gradient(270.84deg, #2fd6fb -24.55%, #6369fc 44.33%, #a741eb 119.2%), #5d34f2;\n}\n\n#app div[class*='socialLinkList'] *,\n#app div[class*='main'] * {\n  font-family: 'Share Tech';\n}\n\n#app main[class*='main'] > div[class*='wrapper'] > div[class*='createAccount'] {\n  font-family: 'Share Tech';\n  color: #ffffff;\n}\n\n#app div[class*='socialLinkList'] > button {\n  border: none;\n  background-color: #645995;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Components in JSX/MDX\nDESCRIPTION: Demonstrates importing MDX fragments and code components, then using them to create a composite component for fetching access tokens. The implementation shows React/MDX component composition with props passing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components\nDESCRIPTION: Imports for organization token related components and code fragments including FetchOrganizationTokenForUser component and configuration code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Direct Sign-in Authentication Flow with Mermaid\nDESCRIPTION: A sequence diagram that illustrates the flow of direct sign-in authentication between a user, client application, Logto, and an identity provider. It shows how the direct sign-in parameter allows bypassing Logto's sign-in page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/authentication-parameters/direct-sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor user as Usuario\n    participant app as Aplicación cliente\n    participant logto as Logto\n    participant idp as Proveedor de identidad\n\n    user->>app: Clic en el enlace de inicio de sesión directo\n    app->>logto: Envía solicitud de autenticación con el parámetro de inicio de sesión directo\n    logto->>idp: Omite la página de inicio de sesión e inicia directamente el inicio de sesión Social o SSO Empresarial\n    idp->>logto: Envía el token de autenticación o la aserción\n    logto->>app: Redirige al usuario de vuelta a la aplicación cliente con los datos de autenticación\n```\n\n----------------------------------------\n\nTITLE: PNPM Package Installation Command\nDESCRIPTION: Command to install Logto SDK using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_npm-like-installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add {props.packageName}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code examples as props. It demonstrates how to structure and display API resource configuration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Removing User's Email (Bash)\nDESCRIPTION: This snippet shows how to remove a user's email. It sends a DELETE request with the verification record id in the header for authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://[tenant-id].logto.app/api/my-account/primary-email \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'logto-verification-id: <verification_record_id>'\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resource Configuration Docs with MDX Components\nDESCRIPTION: This MDX snippet imports a main layout component (`ConfigApiResources`) and several code example components from separate markdown files. It then renders the layout component, passing the imported code example components as props (`configResourcesCode`, `configResourcesWithScopesCode`, `configResourcesWithSharedScopesCode`) to dynamically include different code snippets related to API resource configuration within the documentation page. This pattern utilizes MDX component composition for modular documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Documentation Components in React - JavaScript\nDESCRIPTION: This snippet demonstrates how to import a reusable fragment for fetching access tokens and a formatted code example component, then composes them within a React JSX element. Dependencies include React, the imported fragment ('FetchAccessTokenForApiResources'), and the code module ('GetAccessTokenCode'). The 'getAccessTokenApi' prop specifies the API name, while 'getAccessTokenCode' embeds the code example. Inputs: N/A; Outputs: Renders a documentation/example component for access token use. Intended for documentation systems or applications using component-based UIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Logto SvelteKit Component\nDESCRIPTION: Demonstrates how to import and use the Logto installation component for SvelteKit integration. The code imports a reusable installation guide component and renders it with the SvelteKit package name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/sveltekit\" />\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Gradle (Windows)\nDESCRIPTION: Command to run a Spring Boot application using Gradle on Windows systems.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngradlew.bat bootRun\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Resource Modules in React (JavaScript)\nDESCRIPTION: This snippet imports a configuration API resource fragment and three code example modules in Markdown format for use within a React component. The dependencies are local MDX and MD files, which are commonly leveraged in documentation-driven sites (such as those using MDX or Next.js). Each import provides either a component or content relevant to API configuration resources that can be reused elsewhere in the JSX tree. The files must be present at the specified relative paths, and the project setup should support importing MDX/MD as React components or strings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Composing Access Token Fetch and Code Example Components in React (JSX)\nDESCRIPTION: This snippet renders the imported FetchAccessTokenForApiResources React component, injecting the 'getAccessTokenApi' prop set to 'getAccessToken' and embedding the imported code example as the 'getAccessTokenCode' prop. It assumes proper configuration of MDX and Markdown import handling in the build setup. This snippet demonstrates a common React pattern for composing documentation or demo pages using property injection and code sample embedding.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Installation Instructions for Passport Packages in MDX\nDESCRIPTION: This MDX snippet imports the `NpmLikeInstallation` component from a relative path and uses it to display installation commands for the `passport` and `passport-openidconnect` packages. The `packageName` prop supplies the names of the packages to the component, which likely renders instructions for npm, yarn, and pnpm.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"passport passport-openidconnect\" />\n```\n\n----------------------------------------\n\nTITLE: Exemple de réponse de jeton d'accès pour Logto Management API\nDESCRIPTION: Structure JSON de la réponse d'un jeton d'accès réussi pour Logto Management API, incluant le jeton d'accès, la durée de validité, le type de jeton et la portée.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrate-logto/interact-with-management-api/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"eyJhbG...2g\", // Utilisez ce jeton pour accéder à Logto Management API\n  \"expires_in\": 3600, // Expiration du jeton en secondes\n  \"token_type\": \"Bearer\", // Type d'authentification pour votre requête lors de l'utilisation du jeton d'accès\n  \"scope\": \"all\" // portée `all` pour Logto Management API\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client Configuration with Scopes and Resources\nDESCRIPTION: Demonstrates how to create a LogtoConfig struct instance with custom scopes and resource endpoints. The configuration includes read/write permissions for shopping and store APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Custom Data JSON Structure\nDESCRIPTION: JSON example showing the structure of custom data for an admin user in Logto, including preferences and custom fields.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"adminConsolePreferences\": {\n    \"language\": \"en\",\n    \"appearanceMode\": \"system\",\n    \"experienceNoticeConfirmed\": true\n  },\n  \"customDataFoo\": {\n    \"foo\": \"foo\"\n  },\n  \"customDataBar\": {\n    \"bar\": \"bar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code snippet initializes NextAuth with Logto as an authentication provider. It sets up the scope parameters for OpenID Connect authentication, including openid, offline_access, profile, and email scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      // ... outras opções\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      // ... outras opções\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Microsoft Entra ID OIDC SSO Guide\nDESCRIPTION: This code snippet imports various MDX components and fragments used throughout the guide. It sets up the necessary components for each section of the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Svelte Component\nDESCRIPTION: A Svelte component that displays user information by iterating through the user object properties. It conditionally renders user data when available.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n</script>\n\n{#if data.user}\n<ul>\n  {#each Object.entries(data.user) as [key, value]}\n  <li>{key}: {value}</li>\n  {/each}\n</ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Redirect URI in JSX\nDESCRIPTION: JSX code snippet showing the dynamic placeholder for redirect URI value being passed through props\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_configure-redirect-uri.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{props.redirectUri}\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchOrganizationTokenForUser Component in React\nDESCRIPTION: This snippet demonstrates how to use the FetchOrganizationTokenForUser component with specific props. It sets the organization scope and passes configuration and token retrieval code as child components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in Logto Client\nDESCRIPTION: This snippet demonstrates how to configure API resources in a Logto client. It includes options for configuring resources with scopes and shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode package={props.package} />}\n  configResourcesWithSharedScopesCode={\n    <ConfigResourcesWithSharedScopesCode package={props.package} />\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Navigation Group Component Structure\nDESCRIPTION: JSX component structure defining the navigation groups for different feature categories including end-user flows, authorization and management\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/introduction/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NavGroup\n  label=\"End-user flows\"\n  items={[\n    {\n      icon: <SignInIcon />,\n      docId: 'end-user-flows/sign-up-and-sign-in/README',\n    },\n    // Additional items...\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Flowchart: Social Sign-up with Verified Email Address\nDESCRIPTION: This flowchart illustrates the process of signing up with a social identity that provides a verified email address. The user only needs to enter a username to complete the sign-up.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-up-and-sign-in/social-sign-in.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n   A[Authenticate with social identity] --> B{{Contains verified email address?}}\n   B -- Yes --> C[Enter username]\n   C --> D[Successful sign-up]\n```\n\n----------------------------------------\n\nTITLE: Creating an Organization via Logto Management API using cURL\nDESCRIPTION: A cURL command for creating an organization through Logto Management API. It requires an M2M access token and submits organization details like name, description, and branding information in a JSON payload.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/organization-experience/create-organization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X POST https://[tenant_id].logto.app/api/organizations \\\n -H \"Authorization: Bearer $M2M_ACCESS_TOKEN\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\"tenantId\":\"string\",\"name\":\"string\",\"description\":\"string\",\"customData\":{},\"isMfaRequired\":false,\"branding\":{\"logoUrl\":\"string\",\"darkLogoUrl\":\"string\",\"favicon\":\"string\",\"darkFavicon\":\"string\"},\"createdAt\":1234567890}'\n```\n\n----------------------------------------\n\nTITLE: HTTP Basic Authentication Header Format for Protected App\nDESCRIPTION: Example of the HTTP Basic Authentication header format used by the Protected App when communicating with the origin server. This header includes base64-encoded credentials that can be validated to ensure requests come from the Protected App.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrate-logto/protected-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Basic base64(appId:appSecret)\n```\n\n----------------------------------------\n\nTITLE: Configuring Next Auth v4 Provider for Logto in Next.js\nDESCRIPTION: This snippet demonstrates how to configure the Next Auth v4 provider for Logto in a Next.js application. It includes the setup for the OAuth provider and user profile mapping.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oauth',\n      // Puedes obtener la URL conocida desde la página de Detalles de la Aplicación de Logto,\n      // en el campo \"Punto final de configuración del proveedor OpenID\"\n      wellKnown: 'https://xxxx.logto.app/oidc/.well-known/openid-configuration',\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      client: {\n        id_token_signed_response_alg: 'ES384',\n      },\n      profile(profile) {\n        // Puedes personalizar el mapeo del perfil de usuario aquí\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Custom Data in Logto Browser Client\nDESCRIPTION: This snippet shows how to fetch user information, including custom data, using the logtoClient.fetchUserInfo() method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\n// Agora você pode acessar a reivindicação `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Visualizing Isolated Session Cookie Flow in Logto\nDESCRIPTION: A flowchart diagram illustrating how Logto manages isolated session cookies for a user accessing different client applications from different user agents. It shows that each user agent requires its own sign-in process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/sign-out.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nU[Usuario]\n\nsubgraph DeviceA [Agente de usuario A]\n  subgraph Layer1 [Dominio del cliente A]\n    A[Aplicación Cliente A]\n  end\n\n  subgraph Layer2 [Dominio de Logto]\n      C{{¿Sesión de inicio de sesión de Logto?}}\n      D[Página de inicio de sesión]\n  end\nend\n\nsubgraph DeviceB [Agente de usuario B]\n  subgraph Layer3 [Dominio del cliente B]\n    B[Aplicación Cliente B]\n  end\n\n  subgraph Layer4 [Dominio de Logto]\n      E{{¿Sesión de inicio de sesión de Logto?}}\n      F[Página de inicio de sesión]\n  end\nend\n\nU --> |Iniciar sesión| A\nA --> |Redirigir a Logto| C\nU --> |Iniciar sesión| B\nB --> |Redirigir a Logto| E\nC --> |No| D\nE --> |No| F\nD --> |Crear sesión| C\nF --> |Crear sesión| E\n```\n\n----------------------------------------\n\nTITLE: Importing Step Components for Microsoft Entra ID OIDC SSO Setup in JSX\nDESCRIPTION: This code imports three separate step components, likely containing detailed instructions for each phase of the Microsoft Entra ID OIDC SSO setup process in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sso/entra-id-oidc/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step1 from './_step-1.mdx';\nimport Step2 from './_step-2.mdx';\nimport Step3 from './_step-3.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing NPM-like Installation Component for Passport OpenID Connect\nDESCRIPTION: This snippet imports a reusable component that provides installation instructions for npm packages and uses it to display installation commands for Passport and its OpenID Connect strategy.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"passport passport-openidconnect\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Encrypted Password JSON\nDESCRIPTION: Example of how a user's encrypted password is stored in Logto, showing the password_encryption_method (Argon2i) and the hashed password value. This demonstrates Logto's secure password storage implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"password_encryption_method\": \"Argon2i\",\n  \"password_encrypted\": \"$argon2i$v=19$m=4096,t=10,p=1$aZzrqpSX45DOo+9uEW6XVw$O4MdirF0mtuWWWz68eyNAt2u1FzzV3m3g00oIxmEr0U\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Access Token Documentation Components\nDESCRIPTION: Imports documentation fragments and configures a component for displaying API access token fetching documentation. Uses MDX components to combine reusable documentation pieces.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Logic in C#\nDESCRIPTION: This C# code snippet shows how to implement authentication logic in a Blazor component, including sign-in and sign-out functionality using the Blorc.OpenIdConnect library.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.AspNetCore.Components.Web;\nusing Blorc.OpenIdConnect;\nusing Microsoft.AspNetCore.Components.Authorization;\n\n[Authorize]\npublic partial class Home : ComponentBase\n{\n    [Inject]\n    public required IUserManager UserManager { get; set; }\n\n    public User<Profile>? User { get; set; }\n\n    [CascadingParameter]\n    protected Task<AuthenticationState>? AuthenticationStateTask { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n        User = await UserManager.GetUserAsync<User<Profile>>(AuthenticationStateTask!);\n    }\n\n    private async Task OnLoginButtonClickAsync(MouseEventArgs obj)\n    {\n        await UserManager.SignInRedirectAsync();\n    }\n\n    private async Task OnLogoutButtonClickAsync(MouseEventArgs obj)\n    {\n        await UserManager.SignOutRedirectAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Component with Props in React/JSX\nDESCRIPTION: This code sets up a FetchOrganizationTokenForUser component with specific props including organizationScope set to 'UserScope.Organizations' and two imported code snippets for configuration and token fetching.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing python-jose Package for JWT Validation\nDESCRIPTION: Command to install the python-jose package with ECDSA support, which is needed for JWT validation with Logto's default cryptography method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install python-jose[ecdsa]\n\n```\n\n----------------------------------------\n\nTITLE: Building the Logto Experience Project with pnpm\nDESCRIPTION: Command to install dependencies and build the Logto Experience project, which can serve as a starting point for a custom sign-in UI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install && pnpm build\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Access Token for API Resource in React Native (TSX)\nDESCRIPTION: This React Native component uses the `useLogto` hook from `@logto/rn` to check if the user is authenticated (`isAuthenticated`). If authenticated, it calls the asynchronous `getAccessToken` function, passing the unique identifier ('https://shopping.your-app.com/api') for the target API resource. The retrieved access token is then stored in the component's state (`accessToken`) using `setAccessToken`. This pattern ensures the token is fetched only when needed and available.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"AccessToken.tsx\"\nimport { useLogto } from '@logto/rn';\n\nconst AccessToken = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        // highlight-start\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        // highlight-end\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Documentation Components\nDESCRIPTION: Imports MDX fragments and code components, then composes them into a ConfigApiResources component with props for different code examples related to API resource configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Step Components for SAML SSO Configuration in React/JSX\nDESCRIPTION: Imports modular step components for the SAML SSO configuration guide. The components are imported from local files and will be used to render different sections of the setup process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sso/saml/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step1 from './_step-1.mdx';\nimport Step2 from './_step-2.mdx';\nimport Step3 from './_step-3.mdx';\nimport Step4 from './_step-4.mdx';\n```\n\n----------------------------------------\n\nTITLE: Protected API Controller Implementation\nDESCRIPTION: REST controller providing both protected and public API endpoints with CORS configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage io.logto.springboot.sample.controller;\n\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@CrossOrigin(origins = \"*\")\n@RestController\npublic class ProtectedController {\n    @GetMapping(\"/api/profile\")\n    public String protectedProfile() {\n        return \"Perfil protegido.\";\n    }\n\n    @GetMapping(\"/api/.wellknown/config.json\")\n    public String publicConfig() {\n        return \"Configuración pública.\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In/Sign-Out Button in SvelteKit (HTML)\nDESCRIPTION: This snippet shows how to create a dynamic sign-in/sign-out button in a Svelte component, using the actions defined in the server-side TypeScript file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"?/{data.user ? 'signOut' : 'signIn'}\">\n  <button type=\"submit\">Sign {data.user ? 'out' : 'in'}</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating WXEntryActivity in Java for WeChat Integration\nDESCRIPTION: Java implementation of the required WXEntryActivity class that extends Logto's WechatSocialResultActivity to handle WeChat authentication results.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// WXEntryActivity.java\npackage com.sample.app.wxapi\n\nimport io.logto.sdk.android.auth.social.wechat.WechatSocialResultActivity\n\npublic class WXEntryActivity extends WechatSocialResultActivity {}\n```\n\n----------------------------------------\n\nTITLE: Next.js Server Action Page Implementation for Logto Token Generation\nDESCRIPTION: A Next.js page component that implements server action for generating organization tokens using Logto. It integrates with the client component and demonstrates the use of the getOrganizationToken function.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getOrganizationToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetOrganizationToken from './get-organization-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetOrganizationToken\n        onGetOrganizationToken={async () => {\n          'use server';\n\n          return getOrganizationToken(logtoConfig, 'organization-id');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Flutter Logto Integration\nDESCRIPTION: Imports necessary components for the Flutter Logto integration guide, including installation instructions, dependency information, integration steps, and a Flutter-specific tip.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Dependency from './_dependency.mdx';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\nimport FlutterIntegrationTip from './_tip.md';\n\n<FlutterIntegrationTip />\n\n## Installation \\{#installation\\}\n\n<Installation />\n\n## Dependency and configurations \\{#dependency-and-configurations\\}\n\n<Dependency />\n\n## Integration \\{#integration\\}\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Rendering Quick Start Gallery Component in MDX\nDESCRIPTION: MDX code block that imports and renders a Gallery component to display quick start guides. The component takes a 'path' prop pointing to quick-starts directory.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Gallery from '@components/Gallery';\n\n<Gallery path=\"quick-starts\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Access Token Components in React Native\nDESCRIPTION: Demonstrates importing and configuring MDX components for handling access token fetching functionality. Uses a fragment for API resource access token fetching and imports related code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client for Go\nDESCRIPTION: This code shows how to request additional scopes in the Logto configuration object. By specifying scopes like 'email' and 'phone', the application can access these additional user claims after authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n  // ...other configs\n  // highlight-next-line\n  Scopes: []string{\"email\", \"phone\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting the Connector Name for Dynamic Usage - JavaScript\nDESCRIPTION: This code snippet exports a constant holding the connector's name, allowing it to be referenced across different parts of the document. This pattern improves maintainability and consistency by centralizing configuration values needed throughout imported fragments and MDX components. The 'connector' constant is used as a prop for various MDX components, which helps render dynamic content based on this value.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Rendering Intro Component with Props for WordPress Apple Sign-in\nDESCRIPTION: JSX code that renders the Intro component with connector and sdk props to display the introduction section of the Apple sign-in guide for WordPress.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"WordPress plugin\" link=\"https://wordpress.org/\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring Logto Types in SvelteKit\nDESCRIPTION: This snippet demonstrates how to declare Logto-related types in the global namespace for TypeScript support in a SvelteKit application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LogtoClient, UserInfoResponse } from '@logto/sveltekit';\n\ndeclare global {\n  namespace App {\n    interface Locals {\n      logtoClient: LogtoClient;\n      user?: UserInfoResponse;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Introspection Response in JSON\nDESCRIPTION: A sample JSON response from the introspection endpoint showing token validation result. It indicates whether the token is active (valid) and includes the subject (user ID) information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/concepts/opaque-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active\": true, // トークンが有効かどうか\n  \"sub\": \"1234567890\" // トークンのサブジェクト (ユーザー ID)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for OIDC Enterprise SSO\nDESCRIPTION: This code snippet exports a constant variable 'connector' with the value 'OIDC enterprise SSO'. This variable is used throughout the document to refer to the specific SSO connector being implemented.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Components in React Integration Guide\nDESCRIPTION: This code renders the custom MDX components to create the structure of the Logto React integration guide. It includes sections for a guide tip, installation instructions, and integration steps, each with their own component and header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Integration \\{#integration}\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto User Scopes in Nuxt.js (TypeScript)\nDESCRIPTION: This code snippet shows how to import the UserScope from @logto/nuxt and configure it in the Nuxt.js project settings. It specifically sets up the Organizations scope for user authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    scopes: [UserScope.Organizations],\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client with Service Role for M2M Applications\nDESCRIPTION: Code to create a Supabase client with service_role privileges for machine-to-machine applications. This client bypasses Row-Level Security restrictions to access all data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js';\n\n// ...\nconst SUPABASE_SERVICE_ROLE_SECRET = process.env.SUPABASE_SERVICE_ROLE_SECRET;\n\nconst client = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_SECRET, {\n  // ...options\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URIs in Angular Auth Config\nDESCRIPTION: Demonstrates the configuration of redirect URIs for authentication flow handling, including both post-login and post-logout redirects.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        redirectUri: 'http://localhost:3000/callback',\n        postLogoutRedirectUri: 'http://localhost:3000/',\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating CustomAuthUserProvider in FlutterFlow\nDESCRIPTION: Extends the CustomAuthUserProvider class to include OpenIdClaims for storing user information from Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nclass CustomAuthUserProvider extends FlutterFlowAuthAuthUser {\n  CustomAuthUserProvider({\n    required bool loggedIn,\n    String? uid,\n    OpenIdClaims? idToken,\n  }) : super(loggedIn: loggedIn, uid: uid) {\n    _idToken = idToken;\n  }\n\n  OpenIdClaims? _idToken;\n  OpenIdClaims? get idToken => _idToken;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Organization Token via Logto Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Logto Client SDK to asynchronously obtain an authentication token scoped to a specific organization. The 'getOrganizationToken' method requires an 'organizationId' as input, and returns a promise that resolves to the organization's token. Ensure that the 'logtoClient' instance is properly initialized before calling this method; the Logto Client SDK should be installed and imported.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Authentication Parameters in JSON\nDESCRIPTION: These JSON examples show how to customize the authentication request parameters for IdP-initiated SSO, including adding scopes like email and offline_access, and setting a custom state parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"email offline_access\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"state\": \"custom-state-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding a Component with Props in React JSX (JavaScript)\nDESCRIPTION: This snippet renders the imported FetchAccessTokenForApiResources React component within JSX, passing properties including a string that declares the API endpoint and a code example component as children. It requires the previously imported components to be available in scope. The input props, such as getAccessTokenApi and getAccessTokenCode, must match the expected prop types of the component for correct rendering; missing props or incompatible types may cause runtime warnings or errors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Composing MDX Documentation Components for Access Token Fetching\nDESCRIPTION: Demonstrates the composition of MDX components to display documentation about fetching access tokens. Uses fragment imports and passes props to configure the documentation display.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Logto Token Documentation Components in JavaScript/React\nDESCRIPTION: This snippet imports prebuilt code and documentation fragments, then uses them as properties in a top-level React component to assemble an interactive or comprehensive authentication guide. Dependencies include React, the Logto SDK documentation/fragment system, and potential Markdown/MDX loaders. Key parameters demonstrated are organizationScope and injected code/documentation fragments for configuring and fetching organization tokens. The core input is the set of imported documentation fragments, and the output is a rendered documentation view suitable for developer learning or integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"urn:logto:scope:organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM in Bash\nDESCRIPTION: Command to install the required dependencies for the Logto documentation project using PNPM package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding Sign-In and Sign-Out Buttons to Chrome Extension Popup HTML\nDESCRIPTION: This HTML snippet adds sign-in and sign-out buttons to the Chrome extension's popup interface.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"sign-in\">Iniciar sesión</button> <button id=\"sign-out\">Cerrar sesión</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Token Fetching in React\nDESCRIPTION: This snippet sets up the FetchOrganizationTokenForUser component with specific props for organization scope and imported code components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token for API Authentication in PHP\nDESCRIPTION: This code snippet demonstrates how to obtain an access token using the Logto PHP client. The getAccessToken method is called with the API endpoint URL as an argument, which will return the access token for that specific resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$accessToken = $client->getAccessToken(\"https://shopping.your-app.com/api\");\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Components for Access Token Documentation in JSX\nDESCRIPTION: This snippet imports fragment components and assembles them to create documentation for fetching access tokens for API resources. It passes props to customize the documentation content, including the API method name and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing getUserInfo for GitHub Social Connector in TypeScript\nDESCRIPTION: This function retrieves user information using the access token obtained in the previous step. It makes a GET request to the user info endpoint and processes the response to extract relevant user data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/develop-your-connector/implement-connectors.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUserInfo = async (\n  data: { code: string; config: GithubConfig },\n  getSession: GetSession,\n  { set: SetStorageValue, get: GetStorageValue }\n) => {\n  const { code, config } = data;\n  const { accessToken } = await getAccessToken(config, code);\n\n  try {\n    const httpResponse = await got.get(userInfoEndpoint, {\n      headers: {\n        authorization: `token ${accessToken}`,\n      },\n      timeout: defaultTimeout,\n    });\n\n    const result = userInfoResponseGuard.safeParse(parseJson(httpResponse.body));\n\n    if (!result.success) {\n      throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n    }\n\n    const { id, avatar_url: avatar, email, name } = result.data;\n\n    return {\n      id: String(id),\n      avatar: conditional(avatar),\n      email: conditional(email),\n      name: conditional(name),\n    };\n  } catch (error: unknown) {\n    if (error instanceof HTTPError) {\n      const { statusCode, body: rawBody } = error.response;\n\n      if (statusCode === 401) {\n        throw new ConnectorError(ConnectorErrorCodes.SocialAccessTokenInvalid);\n      }\n\n      throw new ConnectorError(ConnectorErrorCodes.General, JSON.stringify(rawBody));\n    }\n\n    throw error;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: API Request with Bearer Token (Bash)\nDESCRIPTION: Example of an API request using the Bearer token in the Authorization header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nGET https://resource-server.com/api/users\nAuthorization: Bearer eyJhbGciOiJIUz...\n```\n\n----------------------------------------\n\nTITLE: Rendering User Info and Scopes Documentation Components with Props (JSX)\nDESCRIPTION: This JSX code renders the imported MDX documentation components, passing custom props to configure displayed API names and include code examples. It expects the referenced components to accept and properly display props such as 'getIdTokenClaimsApi', 'fetchUserInfoApi', and 'configScopesCode'. Output is a rendered documentation section within a React tree, contingent on successful MDX imports and valid prop structures.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<GetUserInfoApis getIdTokenClaimsApi=\"getIdTokenClaims\" fetchUserInfoApi=\"fetchUserInfo\" />\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Svelte Component\nDESCRIPTION: This snippet demonstrates how to display user information in a Svelte component by accessing the data passed from the layout load function. It iterates through all properties of the user object and renders them as a list.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n</script>\n\n{#if data.user}\n<ul>\n  {#each Object.entries(data.user) as [key, value]}\n  <li>{key}: {value}</li>\n  {/each}\n</ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication UI Elements in Rails View\nDESCRIPTION: ERB template for conditionally displaying sign-in or sign-out links based on the user's authentication status as determined by the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <a href=\"<%= sign_out_path %>\">Cerrar sesión</a>\n<% else %>\n  <a href=\"<%= sign_in_path %>\">Iniciar sesión</a>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Token Introspection Request Example in Bash\nDESCRIPTION: A curl command demonstrating how to make a POST request to the introspection endpoint using client credentials authentication with client ID and client secret to validate an opaque token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/concepts/opaque-token.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n  --request POST 'https://[tenant-id].logto.app/oidc/token/introspection' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'token=some-random-string' \\\n  --data-urlencode 'client_id=1234567890' \\\n  --data-urlencode 'client_secret=1234567890'\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Email Templates in JSONC\nDESCRIPTION: Example configuration for SendGrid email connector templates covering all required usage types (Register, SignIn, ForgotPassword, Generic). Each template includes subject, content with {{code}} placeholder, usage type, and content type specification.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/email/sendgrid/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  {\n    \"subject\": \"<register-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (register template)>\",\n    \"usageType\": \"Register\",\n    \"type\": \"text/plain\",\n  },\n  {\n    \"subject\": \"<sign-in-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (sign-in template)>\",\n    \"usageType\": \"SignIn\",\n    \"type\": \"text/plain\",\n  },\n  {\n    \"subject\": \"<forgot-password-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (forgot-password template)>\",\n    \"usageType\": \"ForgotPassword\",\n    \"type\": \"text/plain\",\n  },\n  {\n    \"subject\": \"<generic-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (generic template)>\",\n    \"usageType\": \"Generic\",\n    \"type\": \"text/plain\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication with User Scopes in SvelteKit\nDESCRIPTION: This code configures Logto authentication in a SvelteKit application by setting up the server-side handle function. It imports the necessary components from the @logto/sveltekit package and specifies that the application requires access to the user's email and phone data through scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope, handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto({\n  // ...other options\n  scopes: [UserScope.email, UserScope.phone], // Add more scopes if needed\n});\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for GitHub Sign-In Tutorial\nDESCRIPTION: This code snippet imports various MDX fragments and components used throughout the tutorial. It includes sections for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/github/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'GitHub';\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-Up Mode for Logto Authentication in PHP\nDESCRIPTION: Code that creates a sign-in route with 'signUp' interaction mode, which displays the registration page first instead of the login page. This route uses the InteractionMode enum to specify the desired behavior.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_implement-sign-in-route.mdx#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/sign-in', function () {\n  return redirect($client->signIn('${defaultRedirectUri}', InteractionMode::signUp));\n});\n```\n\n----------------------------------------\n\nTITLE: Diagrama de flujo del proceso de invitación en Mermaid\nDESCRIPTION: Diagrama de secuencia que ilustra el flujo del proceso de invitación de miembros a una organización, mostrando las interacciones entre el usuario final, el administrador de la organización, la aplicación multi-tenant y Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/organization-experience/invite-organization-members.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tParticipant U as Usuario final\n  Participant A as Administrador de la organización\n  Participant C as Tu aplicación de múltiples organizaciones\n\tParticipant L as Logto\n\n  A ->> C: Introducir correo electrónico del invitado y rol\n  C ->> L: Crear invitación de organización con Management API\n  L -->> C: Devolver ID de invitación\n  C ->> C: Componer enlace de invitación con ID de invitación\n  C ->> L: Solicitar envío de correo electrónico de invitación con enlace de invitación\n  L -->> U: Enviar correo electrónico de invitación con enlace de invitación\n  U ->> C: Hacer clic en el enlace de invitación y navegar a tu página de destino,<br /> aceptar o rechazar la invitación\n  C ->> L: Actualizar estado de la invitación con Management API\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Logto Components for Access Token Fetching\nDESCRIPTION: This snippet imports a reusable fragment for fetching access tokens and a specific code snippet. It then uses these components to demonstrate how to get an access token for API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto for Refresh Token Access\nDESCRIPTION: This snippet shows how to configure the NextAuth provider to request a refresh token by adding the 'consent' prompt parameter and including the 'offline_access' scope in the authorization request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // ...\n  authorization: {\n    params: {\n      // highlight-next-line\n      prompt: 'consent',\n      scope: 'openid offline_access shopping:read shopping:write',\n      resource: 'https://shopping.your-app.com/api',\n      // ...\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing IdP-initiated SSO Flow with Mermaid Diagram\nDESCRIPTION: This Mermaid sequence diagram illustrates the flow of IdP-initiated SSO authentication, showing interactions between the User, IdP, Logto, sign-in experience, and the client SP application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\n  actor User\n  participant IdP as IdP\n  participant Logto as Logto\n  participant Experience as sign-in experience\n  participant SP as Client\n\n  User->>IdP: Log in and select SP application\n  IdP->>Logto: Redirect to Logto with SAML assertion\n  Logto-->>Logto: Preserve IdP-initiated SSO assertion session\n  Logto-->>Logto: Initiate OIDC authentication request\n  Logto->>Experience: Redirect user to sign-in experience\n  Experience-->>Logto: Validate IdP-initiated SSO assertion session (silent authentication)\n  Logto->>SP: Authenticate and redirect to SP application with authorization code (No state or PKCE validation)\n  SP->>Logto: OIDC token request\n  Logto->>SP: token response\n  SP->>User: Authenticate user\n```\n\n----------------------------------------\n\nTITLE: Logto Subject Token Response JSON\nDESCRIPTION: JSON response from Logto's Management API containing the subject token and its expiration time. This token will be used to generate an access token for the impersonated user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subjectToken\": \"sub_7h32jf8sK3j2\",\n  \"expiresIn\": 600\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Exact Matching\nDESCRIPTION: This code demonstrates how to perform a case-sensitive exact match by setting isCaseSensitive to true. It searches for users with the exact names 'Alice' or 'Bob', respecting case.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', 'Alice'],\n  ['search.name', 'Bob'],\n  ['mode.name', 'exact'],\n  ['isCaseSensitive', 'true'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable in JSX\nDESCRIPTION: This code snippet defines a constant 'connector' with the value 'Twilio'. This variable is used throughout the document to reference the Twilio connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-twilio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Twilio';\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope in React Native TypeScript\nDESCRIPTION: Shows how to import and configure Logto for React Native with organizations scope enabled. The code sets up the LogtoConfig object with organizations scope included in the scopes array.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: その他のSDKでの組織スコープ設定\nDESCRIPTION: 組織サポートが組み込まれていないSDKやフレームワークで組織スコープを設定する方法です。scope パラメーターに 'urn:logto:scope:organizations' を追加します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n  // ...\n  scope: 'openid offline_access urn:logto:scope:organizations',\n};\n```\n\n----------------------------------------\n\nTITLE: Setting OIDC Cookie Keys using npx\nDESCRIPTION: This specific command sets the OIDC Cookie keys in the Logto configuration using npx to run the CLI. The value should be a valid JSON string.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-database-configs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db config set oidc.cookieKeys \"[\\\"key1\\\",\\\"key2\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Updating CustomAuthUserProvider in Flutter\nDESCRIPTION: Adds the OpenIdClaims class to the CustomAuthUserProvider to store user information from the Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/foundation.dart';\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nclass CustomAuthUserProvider {\n  CustomAuthUserProvider({required this.loggedIn, this.uid, this.idToken});\n\n  final bool loggedIn;\n  final String? uid;\n  final OpenIdClaims? idToken;\n\n  factory CustomAuthUserProvider.fromJson(Map<String, dynamic> json) =>\n      CustomAuthUserProvider(\n        loggedIn: json['loggedIn'] as bool,\n        uid: json['uid'] as String?,\n        idToken: json['idToken'] != null\n            ? OpenIdClaims.fromJson(json['idToken'] as Map<String, dynamic>)\n            : null,\n      );\n\n  Map<String, dynamic> toJson() => {\n        'loggedIn': loggedIn,\n        'uid': uid,\n        'idToken': idToken?.toJson(),\n      };\n\n  @override\n  String toString() =>\n      'CustomAuthUserProvider(loggedIn: $loggedIn, uid: $uid, idToken: $idToken)';\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Sections with JSX and MDX in JavaScript\nDESCRIPTION: This snippet imports various documentation sections, such as introductions, setup steps, and integration guides, using JavaScript import statements in a Docusaurus/MDX context. It relies on both local and internationalized MDX files to assemble documentation content for an OIDC enterprise SSO guide in Flutter. Dependencies include a Docusaurus MDX environment, organized documentation fragments, and project structure awareness. Inputs are the specific fragment/module paths; outputs are available MDX components for use within the main page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import Structure\nDESCRIPTION: Imports various MDX components and fragments required for the documentation structure, including introduction, application creation, social connector setup, and testing guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-line.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/line/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Authentication in Home Page UI for Flutter\nDESCRIPTION: Demonstrates how to integrate the custom authentication in the home page UI, including the sign-in button functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal redirectUri = 'io.logto://callback';\n\n// ...\n\nFFButtonWidget(\n  onPressed: () async {\n    GoRouter.of(context).prepareAuthEvent();\n\n    await authManager.signIn(redirectUri);\n\n    context.replaceNamed('user');\n  },\n  text: 'Sign In',\n  // ...\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Sign-In/Sign-Out Button Based on Session in Next.js\nDESCRIPTION: This snippet shows how to conditionally render a sign-in or sign-out button based on the user's session status in a Next.js application using Auth.js. It uses the auth function to check the session state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport SignIn from './components/sign-in';\nimport SignOut from './components/sign-out';\nimport { auth } from '@/auth';\n\nexport default function Home() {\n  const session = await auth();\n\n  return <div>{session?.user ? <SignOut /> : <SignIn />}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token Claims in JavaScript/TypeScript\nDESCRIPTION: Fetches organization token claims for a specific organization ID. This is used to access the organization-specific scopes and audience information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclaims = await client.getOrganizationTokenClaims(\"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Homepage with Authentication Status in Node.js\nDESCRIPTION: This snippet demonstrates how to create a dynamic homepage that displays different content based on the user's authentication status. It uses the Express framework to handle requests and render HTML responses.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (request: Request, response) => {\n  const { user } = request;\n  response.setHeader('content-type', 'text/html');\n\n  if (user) {\n    response.end(\n      `<h1>Hello Logto</h1><p>Signed in as ${JSON.stringify(\n        user\n      )}, <a href=\"/sign-out\">Sign Out</a></p>`\n    );\n  } else {\n    response.end(`<h1>Hello Logto</h1><p><a href=\"/sign-in\">Sign In</a></p>`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Organization Token Components in React (JavaScript)\nDESCRIPTION: This code imports React components and Markdown-based code fragments, then composes them into a parent component for display. The dependencies are React and a bundler capable of handling .md and .mdx imports as React components. The main parameters are organizationScope, configOrganizationCode, and getOrganizationAccessTokenCode, which respectively define the org scope and pass in code blocks. Inputs are statically imported modules and output is rendered UI for documentation or demonstration. No external runtime data required. Requires support for MDX/Markdown as components, typically via Next.js or similar frameworks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Sample Custom Data Structure in JSON for Logto Admin User\nDESCRIPTION: Demonstrates the structure of custom_data for a Logto admin user, including preferences and arbitrary data fields.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-data.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"adminConsolePreferences\": {\n    \"language\": \"en\",\n    \"appearanceMode\": \"system\",\n    \"experienceNoticeConfirmed\": true\n  },\n  \"customDataFoo\": {\n    \"foo\": \"foo\"\n  },\n  \"customDataBar\": {\n    \"bar\": \"bar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Route in Rails\nDESCRIPTION: Route configuration in Rails to handle the authentication callback from Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-next-line\n  get \"/callback\", to: \"sample#callback\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in appsettings.json\nDESCRIPTION: This JSON configuration snippet shows how to request additional scopes in the appsettings.json file for a Blazor WebAssembly application. It sets the IdentityServer.Scope property to include openid, profile, email, and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_fetch-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"IdentityServer\": {\n    // ...\n    // highlight-next-line\n    \"Scope\": \"openid profile email phone\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Fetching Components in React\nDESCRIPTION: This snippet imports necessary components and configures the FetchOrganizationTokenForUser component with required props. It sets the organization scope and passes code snippets for organization configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto in React Component\nDESCRIPTION: A React component that demonstrates how to use the Logto authentication library to check if a user is authenticated and retrieve an access token for a specific API resource. The component uses useState to store the token and useEffect to fetch it when authentication status changes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\n\nconst Home = () => {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [accessToken, setAccessToken] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      if (isAuthenticated) {\n        const token = await getAccessToken('https://shopping.your-app.com/api');\n        setAccessToken(token);\n      }\n    })();\n  }, [isAuthenticated, getAccessToken]);\n\n  return <p>{{ accessToken }}</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Applications with cURL\nDESCRIPTION: A cURL command that retrieves all applications from the Logto Management API. It makes a GET request to the applications endpoint with the access token provided in the Authorization header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/machine-to-machine/fragments/_access-logto-management-api-using-access-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n  --request GET 'https://your.logto.endpoint/api/applications' \\\n  --header 'Authorization: Bearer eyJhbG...2g'\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components in MDX\nDESCRIPTION: This snippet shows how to import and compose MDX fragments for documenting access token retrieval. It imports a reusable documentation component and a code example, then renders them together.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Popular Email Providers with DocCardList in MDX\nDESCRIPTION: This code snippet renders a list of popular email service providers that Logto supports using the DocCardList component. Each card contains the provider name, link to integration documentation, description, and an icon.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/connectors/email-connectors/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'AWS Direct Mail',\n      href: '/integrations/aws-ses',\n      description: '직접 메일 서비스에 대한 AWS 커넥터에 대한 공식 Logto 커넥터입니다.',\n      customProps: {\n        icon: <AwsDm />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Mailgun',\n      href: '/integrations/mailgun',\n      description: 'Mailgun 이메일 서비스에 대한 공식 Logto 커넥터입니다.',\n      customProps: {\n        icon: <Mailgun />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'SendGrid Email',\n      href: '/integrations/sendgrid-email',\n      description: 'SendGrid 이메일 서비스에 대한 공식 Logto 커넥터입니다.',\n      customProps: {\n        icon: <SendGrid />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Aliyun Direct Mail',\n      href: '/integrations/aliyun-dm',\n      description: '직접 메일 서비스에 대한 Aliyun 커넥터에 대한 공식 Logto 커넥터입니다.',\n      customProps: {\n        icon: <AliyunDm />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Postmark Mail',\n      href: '/integrations/postmark',\n      description: 'Postmark 이메일 서비스에 대한 Logto 커넥터입니다.',\n      customProps: {\n        icon: <Postmark />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Additional Claims in Next.js\nDESCRIPTION: This snippet illustrates how to fetch user info with additional claims by setting the fetchUserInfo option to true when calling getLogtoContext.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function Home() {\n  const { userInfo } = await getLogtoContext(logtoConfig, { fetchUserInfo: true });\n  return (\n    <div>\n      {userInfo && <p>Email: {userInfo.email}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Importing Modular Documentation Sections in Next.js (Pages Router) - JavaScript\nDESCRIPTION: These import statements bring in modular MDX documentation fragments for different setup steps, including introductions, guides, and configuration instructions. This approach enables composable, reusable documentation sections within a Next.js documentation page, with dependencies being the respective .mdx files and NodeJS environment. There are no runtime parameters for these imports; they are resolved at documentation build time, and expected output is componentized content availability for further rendering.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/next/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/entra-id-saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional User Claims in Angular Component\nDESCRIPTION: This TypeScript snippet shows how to access additional user claims, including custom data, after configuring the auth provider with extended scopes. It demonstrates subscribing to the checkAuth method and accessing the userData property.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OidcSecurityService } from 'angular-auth-oidc-client';\nimport { type UserInfoResponse } from '@logto/js';\n\nexport class AppComponent implements OnInit {\n  isAuthenticated = false;\n  userData?: UserInfoResponse;\n  accessToken?: string;\n\n  constructor(public oidcSecurityService: OidcSecurityService) {}\n\n  ngOnInit() {\n    this.oidcSecurityService\n      .checkAuth()\n      .subscribe(({ isAuthenticated, userData, accessToken }) => {\n        console.log('app authenticated', isAuthenticated, idToken);\n        this.isAuthenticated = isAuthenticated;\n        this.userData = userData;\n        this.accessToken = accessToken;\n      });\n  }\n\n  // ...andere Methoden\n}\n\n// Jetzt kannst du auf den Anspruch `userData.custom_data` zugreifen\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Android\nDESCRIPTION: Shows how to access additional claims from the ID token after requesting extra scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getIdTokenClaims { logtoException, idTokenClaims ->\n    println(\"IdTokenClaims:$idTokenClaims\")\n}\n// You can now access additional claims like `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Sign-in with SSO in React\nDESCRIPTION: This React component demonstrates how to handle IdP-initiated SSO authentication by extracting the SSO connector ID from URL parameters and initiating a direct sign-in flow with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// React の例\nimport { Prompt, useLogto } from '@logto/react';\nimport { useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nconst SsoDirectSignIn = () => {\n  const { signIn } = useLogto();\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const ssoConnectorId = searchParams.get('ssoConnectorId');\n    if (ssoConnectorId) {\n      void signIn({\n        redirectUri,\n        prompt: Prompt.Login,\n        directSignIn: {\n          method: 'sso',\n          target: ssoConnectorId,\n        },\n      });\n    }\n  }, [searchParams, signIn]);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto Guide Components in JSX\nDESCRIPTION: This code imports markdown and MDX components for a Logto integration guide and renders them in a specific order. It includes a guide tip, installation instructions, and integration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.md';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Visualizing Basic Sign-in Flow with Mermaid\nDESCRIPTION: This diagram illustrates the basic sign-in flow between an app and Logto using Mermaid graph syntax. It shows the two-step process of invoking sign-in and finishing sign-in.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/sign-in-experience.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A(<b>Your app</b>) -->|1. Invoke sign-in| B(<b>Logto</b>)\n    B -->|2. Finish sign-in| A\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliyun Direct Mail Connector JSON for Logto\nDESCRIPTION: JSON structure for configuring the Aliyun Direct Mail connector in Logto. It includes fields for access keys, account details, and email templates for different usage types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/email/aliyun-dm/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessKeyId\": \"your_access_key_id\",\n  \"accessKeySecret\": \"your_access_key_secret\",\n  \"accountName\": \"your_sender_address\",\n  \"fromAlias\": \"your_email_tag\",\n  \"templates\": [\n    {\n      \"subject\": \"Email Verification\",\n      \"content\": \"Your verification code is {{code}}\",\n      \"usageType\": \"Register\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Scope Configuration in JSX\nDESCRIPTION: This JSX code conditionally renders additional information about scopes and claims, including a description of default scopes and how to configure additional ones. It depends on a prop named 'configScopesCode' to determine whether to render this section.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/fragments/_scopes-and-claims.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{props.configScopesCode &&\n\n<>\n<p>\nEn resumen, cuando solicitas un alcance, obtendrás los reclamos correspondientes en la información del usuario. Por ejemplo, si solicitas el alcance `email`, obtendrás los datos `email` y `email_verified` del usuario.\n</p>\n\n<p>\n  Por defecto, Logto SDK siempre solicitará tres alcances: `openid`, `profile` y `offline_access`, y\n  no hay forma de eliminar estos alcances predeterminados. Pero puedes añadir más alcances al\n  configurar Logto:\n</p>\n\n{props.configScopesCode}\n\n</>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Handle Function with API Resources in TypeScript\nDESCRIPTION: This code exports a handle function using Logto's handleLogto method. It demonstrates how to add multiple API resources to the configuration, which is crucial for setting up authentication and authorization for different API endpoints in a SvelteKit application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 添加 API 资源 (API resources)\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for AWS SES Email Sign-in Tutorial\nDESCRIPTION: This code imports various MDX components used throughout the tutorial to structure the content. It includes sections for introduction, application creation, connector setup, configuration, testing, and further reading.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-aws-ses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/aws-ses/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Diagramme de séquence du processus de connexion dans Logto\nDESCRIPTION: Ce diagramme illustre le flux de connexion entre l'utilisateur, l'application cliente, et le fournisseur OIDC de Logto. Il montre les étapes de la vérification de session, de l'authentification, et de l'échange de jetons.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/end-user-flows/sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    actor User\n\n    box Relying Party (RP)\n      participant Client as Application cliente\n    end\n\n    box Logto (IdP)\n      participant OIDC as Fournisseur OIDC\n      participant SignIn as Page de connexion\n    end\n\n    User ->> Client: Accéder à l'application web\n    Client ->> OIDC: Rediriger l'utilisateur vers OIDC pour l'authentification\n    OIDC -->> OIDC: Vérifier la session de connexion de l'utilisateur\n    OIDC ->> SignIn: Demander à l'utilisateur de se connecter\n    SignIn ->> OIDC: Identifier l'utilisateur et soumettre le résultat de l'interaction\n    OIDC -->> OIDC: Établir la session de connexion de l'utilisateur et l'autorisation d'authentification\n    OIDC ->> Client: Rediriger l'utilisateur vers l'application web avec le code d'authentification (flux de code d'autorisation)\n    Client ->> OIDC: Échanger le code contre des jetons\n    OIDC -->> Client: Retourner les jetons\n```\n\n----------------------------------------\n\nTITLE: Syncing Translation Keys for All Languages in Logto\nDESCRIPTION: Command to synchronize translation keys from the source language folder to all target languages in the phrases package. This updates all language folders with the current set of translation keys.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/using-cli/translation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli translate sync-keys --target all\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Middleware in Express\nDESCRIPTION: Implementing a middleware to handle authentication, token refreshing, and attaching user information to requests in an Express application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { decodeIdToken } = require('@logto/js');\nconst { refreshTokens } = require('./logto');\n\nconst withAuth =\n  ({ requireAuth } = { requireAuth: true }) =>\n  async (req, res, next) => {\n    if (requireAuth && !req.session.tokens) {\n      res.redirect('/sign-in');\n      return;\n    }\n\n    if (req.session.tokens) {\n      if (req.session.tokens.expiresAt >= Date.now()) {\n        // Access token expired, refresh to get new tokens\n        try {\n          const response = await refreshTokens(req.session.tokens.refreshToken);\n          req.session.tokens = {\n            ...response,\n            expiresAt: response.expiresIn + Date.now(),\n            idToken: decodeIdToken(response.idToken),\n          };\n        } catch {\n          // Exchange failed, redirect to sign in\n          res.redirect('/sign-in');\n          return;\n        }\n      }\n\n      req.auth = req.session.tokens.idToken.sub;\n    }\n\n    next();\n  };\n\nmodule.exports = withAuth;\n```\n\n----------------------------------------\n\nTITLE: Obtenir des jetons d'organisation en PHP\nDESCRIPTION: Code PHP pour récupérer soit le jeton d'organisation complet, soit seulement les revendications du jeton pour une organisation spécifiée.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$token = $client->getOrganizationToken('<organization-id>');\n// ou\n$claims = $client->getOrganizationTokenClaims('<organization-id>');\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component\nDESCRIPTION: MDX component setup that imports code snippets and renders the ConfigApiResources component with different configuration examples. Uses fragment imports for modular documentation structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Documentation Structure\nDESCRIPTION: Import statements for various MDX components that structure the documentation into logical sections, including intro, application creation, SSO connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/entra-id-saml/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: MDX Export Constant Declaration\nDESCRIPTION: Exports a constant 'connector' with the value 'Google' for use throughout the MDX document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-google.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nexport const connector = 'Google';\n```\n\n----------------------------------------\n\nTITLE: Composing FetchOrganizationTokenForUser with Code Props - JSX\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component, providing it with an organization scope string and two code documentation fragments as JSX props. The configuration and access token code samples are supplied as rendered code blocks, allowing dynamic documentation or tutorial presentations. The main prop, organizationScope, is set to a user organizations scope constant, showing usage context. Inputs are MDX/Markdown components and a string prop; the output is a composed React element suitable for documentation pages or interactive demos. Requires all imported components and code samples to be available in the project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running one-off Logto CLI commands with npx\nDESCRIPTION: Demonstrates how to run a specific Logto CLI command with options using npx, ideal for tasks that don't require a permanent CLI installation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db seed --db-url postgresql://your-database-url\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Truncated Content - JavaScript\nDESCRIPTION: This comment marks a truncated or intentionally omitted section within the documentation. It's used as a placeholder and has no dependencies or interactive effects. Its inclusion signals maintainers or readers about skipped or non-included content in the final output.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-oidc-enterprise-sso.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{/* truncate */}\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Variable for WordPress OIDC SSO Guide\nDESCRIPTION: This code exports a constant that defines the connector type being used in the guide, which is the OIDC enterprise SSO connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: Imports various markdown and MDX components that compose the authentication implementation guide for a .NET MVC application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-razor/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\nimport AddAuthentication from '../dotnet-mvc/_add-authentication.md';\nimport ConfigureRedirectUris from '../dotnet-mvc/_configure-redirect-uris.mdx';\nimport GuideTip from '../dotnet-mvc/_guide-tip.md';\nimport Installation from '../dotnet-mvc/_installation.md';\nimport SignInAndSignOutFlows from '../dotnet-mvc/_sign-in-and-sign-out-flows.mdx';\n\nimport ImplementButtons from './_implement-buttons.md';\n```\n\n----------------------------------------\n\nTITLE: Rendering Intro Component with Props\nDESCRIPTION: This JSX code renders the Intro component, passing the 'connector', 'sdk', and 'link' props. It sets up the introduction section of the tutorial with specific information about X (Twitter) and Vue.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vue-x-twitter.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"Vue\" link=\"https://vuejs.org\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn Connector Settings in Logto\nDESCRIPTION: This snippet outlines the configuration types required for the LinkedIn connector in Logto. It specifies the clientId, clientSecret, and scope fields, along with their data types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/integrations/social/linkedin/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 名前         | タイプ |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n| scope        | string |\n```\n\n----------------------------------------\n\nTITLE: HTTP Email Connector Payload Example in JSON\nDESCRIPTION: This example shows the JSON payload structure sent by the HTTP email connector when triggering an email. It includes the recipient address, usage type (SignIn), and payload containing authentication code and locale information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/integrations/email/http-mail/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"to\": \"foo@logto.io\",\n  \"type\": \"SignIn\",\n  \"payload\": {\n    \"code\": \"123456\"\n    \"locale\": \"de\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Logto Authentication in Dart\nDESCRIPTION: Import statements for necessary packages used in the authentication implementation, including Flutter core packages, HTTP client, and Logto SDK components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:logto_dart_sdk/logto_client.dart';\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nimport 'custom_auth_user_provider.dart';\n\nexport 'custom_auth_manager.dart';\n```\n\n----------------------------------------\n\nTITLE: Rendering GetUserInfoApis Component with API Props in MDX\nDESCRIPTION: This snippet renders the imported `GetUserInfoApis` component. It passes two props: `getIdTokenClaimsApi` with the value \"getIdTokenClaims\" and `fetchUserInfoApi` with the value \"fetchUserInfo\". These props likely customize the component to display documentation specific to these API function names.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<GetUserInfoApis getIdTokenClaimsApi=\"getIdTokenClaims\" fetchUserInfoApi=\"fetchUserInfo\" />\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Logto Configuration\nDESCRIPTION: This snippet demonstrates how to use environment variables to securely store sensitive Logto configuration data in a SvelteKit application instead of hardcoding values directly in the code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\nimport { env } from '$env/dynamic/private';\n\nexport const handle = handleLogto(\n  {\n    endpoint: env.LOGTO_ENDPOINT,\n    appId: env.LOGTO_APP_ID,\n    appSecret: env.LOGTO_APP_SECRET,\n  },\n  {\n    encryptionKey: env.LOGTO_COOKIE_ENCRYPTION_KEY,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Access Token Documentation\nDESCRIPTION: Imports the `FetchAccessTokenForApiResources` and `GetAccessTokenCode` MDX components from relative paths within the project structure. These components are prerequisites for rendering the subsequent documentation content in this file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto Access Token Documentation Components in JSX\nDESCRIPTION: This snippet imports MDX fragments and code examples, then renders the FetchAccessTokenForApiResources component with appropriate props to display documentation about retrieving access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding WeChat Open SDK Dependency in Android\nDESCRIPTION: Gradle dependency configuration for adding the WeChat Open SDK to an Android project, shown in both Kotlin script and Groovy script formats.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  // ...\n  api(\"com.tencent.mm.opensdk:wechat-sdk-android:6.8.0\")  // kotlin-script\n  // or\n  api 'com.tencent.mm.opensdk:wechat-sdk-android:6.8.0'   // groovy-script\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchOrganizationTokenForUser Component in MDX\nDESCRIPTION: This MDX snippet renders the `FetchOrganizationTokenForUser` component. It configures the component by passing the `UserScope.Organizations` value (likely imported or globally available) to the `organizationScope` prop and injecting the content of `ConfigOrganizationCode` and `GetOrganizationAccessTokenCode` components into the `configOrganizationCode` and `getOrganizationAccessTokenCode` props respectively. This demonstrates component composition within MDX for documentation purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token in TypeScript using Logto Client\nDESCRIPTION: This code retrieves an authentication token for a specific organization using the Logto client instance. It uses the 'getOrganizationToken' method that requires an organization ID parameter and returns a Promise that resolves to a token string.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Configuring React Application to Use Logto Tunnel\nDESCRIPTION: React/TypeScript example showing how to modify a React application's LogtoProvider configuration to point to the local tunnel service instead of the Logto Cloud endpoint for testing custom UI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // endpoint: 'https://foobar.logto.app/', // original Logto Cloud endpoint\n  endpoint: 'http://localhost:9000/', // tunnel service address\n  appId: '<your-application-id>',\n};\n\nconst App = () => (\n  <LogtoProvider config={config}>\n    <YourAppContent />\n  </LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Constant in JavaScript\nDESCRIPTION: Exports a JavaScript constant named `connector` assigned the string value 'Azure AD'. This constant is likely used to pass the connector name dynamically into imported MDX components within the documentation page, ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-python-azure-ad.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Azure AD';\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in Logto Client\nDESCRIPTION: This snippet demonstrates how to configure API resources in the Logto client. It includes examples for basic resource configuration, configuration with scopes, and configuration with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode package={props.package} />}\n  configResourcesWithSharedScopesCode={\n    <ConfigResourcesWithSharedScopesCode package={props.package} />\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Token and Code Components in React (JavaScript)\nDESCRIPTION: This snippet imports prebuilt MDX and Markdown code fragments related to organization token handling into a JavaScript/React file. It assumes the existence of the specified module files and uses ES module syntax for importing React components or content. No external packages are required beyond a standard React ecosystem. Inputs are the import paths, and outputs are ES module variables referencing the components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders a ConfigApiResources component with the imported code examples as props. It demonstrates how to structure and display API resource configuration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK and dependencies using pnpm\nDESCRIPTION: This snippet shows how to install the Logto SDK (@logto/rn) and its peer dependencies using pnpm. It includes expo-crypto, expo-secure-store, expo-web-browser, and @react-native-async-storage/async-storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/rn\npnpm add expo-crypto expo-secure-store expo-web-browser @react-native-async-storage/async-storage\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto Scopes and Claims Documentation Components\nDESCRIPTION: This code imports two MDX components and renders them together. The ScopesAndClaims component is used as the main content wrapper, while ScopesAndClaimsCode is passed as a prop to provide code examples for configuring scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Defining UserInfo Type in TypeScript for Logto Email Templates\nDESCRIPTION: TypeScript definition of the UserInfo type used in various Logto email templates. It includes user properties like id, name, username, email, phone, avatar, and profile.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/email-connectors/email-templates.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype UserInfo = {\n  id: string;\n  name?: string;\n  username?: string;\n  primaryEmail?: string;\n  primaryPhone?: string;\n  avatar?: string;\n  profile?: Profile;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Access Token Fetching Components in JSX\nDESCRIPTION: This snippet imports necessary components and composes them to create a guide for fetching access tokens for API resources. It uses a reusable MDX fragment and a separate code snippet component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Authentication Parameters for IdP-initiated SSO in JSON\nDESCRIPTION: This JSON snippet demonstrates how to customize the authorization request parameters for IdP-initiated SSO in Logto. It shows how to add additional scopes like 'email' and 'offline_access', and how to include a custom 'state' parameter for security validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"email offline_access\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"state\": \"custom-state-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Third-Party Connectors to Logto\nDESCRIPTION: Commands for adding third-party connectors to Logto. The command automatically prepends 'connector-' to service names if not already included. Package names must start with 'connector-' or '@some-org/connector-'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlogto connector add service-a connector-service-b @org/service-c\n# is equal to\nlogto connector add connector-service-a connector-service-b @org/connector-service-c\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli connector add service-a connector-service-b @org/service-c\n# is equal to\nnpm run cli connector add connector-service-a connector-service-b @org/connector-service-c\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli connector add service-a connector-service-b @org/service-c\n# is equal to\nnpx @logto/cli connector add connector-service-a connector-service-b @org/connector-service-c\n```\n\n----------------------------------------\n\nTITLE: Searching with AND Logic Using Joint Mode\nDESCRIPTION: This code shows how to perform a search with AND logic by setting the joint mode to 'and'. It searches for users with 'foo' in their name AND email ending with '@gmail.com'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', '%foo%'],\n  ['search.primaryEmail', '%@gmail.com'],\n  ['joint', 'and'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Route in PHP with Logto\nDESCRIPTION: Creates a route handler for sign-out functionality that redirects users to Logto's sign-out endpoint and then back to the application's home page. This clears both the PHP session and Logto authentication information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_implement-sign-out-route.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/sign-out', function () {\n  return redirect(\n    // Rediriger l'utilisateur vers la page d'accueil après une déconnexion réussie\n    $client->signOut('${defaultBaseUrl}')\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting SAML Connector Name in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant named 'connector' with the value 'SAML'. This constant is likely used within the MDX document or imported components (like Intro, AddSocialConnector, etc.) to dynamically display the specific connector type (SAML) throughout the tutorial content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-saml.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML';\n```\n\n----------------------------------------\n\nTITLE: Implementing IdP-initiated SSO Flow Diagram with Mermaid\nDESCRIPTION: A sequence diagram illustrating the authentication flow when using IdP-initiated SSO with Logto. Shows the interaction between users, IdP, Logto, sign-in experience, and the client application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor User\n    participant IdP as IdP\n    participant Logto as Logto\n    participant Experience as sign-in experience\n    participant SP as Client\n\n    User->>IdP: Log in and select SP application\n    IdP->>Logto: Redirect to Logto with SAML assertion\n    Logto-->>Logto: Preserve IdP-initiated SSO assertion session\n    Logto->>SP: Redirect to default SP application\n    SP->>Logto: OIDC authentication request\n    Logto->>Experience: Redirect user to sign-in experience\n    Experience-->>Logto: Validate IdP-initiated SSO assertion session (silent authentication)\n    Logto->>SP: Authenticate and redirect to SP application with authorization code\n    SP->>Logto: OIDC token request\n    Logto->>SP: token response\n    SP->>User: Authenticate user\n```\n\n----------------------------------------\n\nTITLE: Importing Connector Icons in React JSX\nDESCRIPTION: Imports SVG icon components for different connector types (email, enterprise, mobile, and social) to be used in the documentation interface.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Email from '@site/docs/connectors/assets/icons/email.svg';\nimport Enterprise from '@site/docs/connectors/assets/icons/enterprise.svg';\nimport Mobile from '@site/docs/connectors/assets/icons/mobile.svg';\nimport Social from '@site/docs/connectors/assets/icons/social.svg';\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Exact Match in URLSearchParams for User Search\nDESCRIPTION: This snippet demonstrates how to set up a case-sensitive exact match search for names using URLSearchParams, including the 'isCaseSensitive' parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', 'Alice'],\n  ['search.name', 'Bob'],\n  ['mode.name', 'exact'],\n  ['isCaseSensitive', 'true'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Example Resource Indicator for Logto Management API\nDESCRIPTION: Demonstrates the base URI for Logto Management API, which is pre-registered as an API resource in Logto services. All Management API endpoints under this URI are protected by Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/api-resources/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://tenantId.logto.app/api\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering OAuth 2.0 Scopes and Claims Documentation in JSX\nDESCRIPTION: This snippet imports documentation fragments about OAuth 2.0 scopes and claims, including a main explanatory component and a code example component, then renders them together to create a complete documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Modifying Organization Member Roles with Logto Management API in Bash\nDESCRIPTION: This curl command demonstrates how to assign roles to a specific user in an organization. It requires an access token with appropriate permissions and accepts organization role IDs in the request body.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/organization-experience/organization-management.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X POST https://[tenant_id].logto.app/api/organizations/{id}/users/{userId}/roles \\\n -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\"organizationRoleIds\":[\"admin\"]}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Central Repository in Gradle\nDESCRIPTION: Adds mavenCentral repository to the project's Gradle configuration to enable downloading Logto SDK dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencyResolutionManagement {\n  repositories {\n    mavenCentral()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ajout des dépendances Gradle pour Spring Boot et OAuth2\nDESCRIPTION: Configuration des dépendances Gradle nécessaires pour Spring Boot et le serveur de ressources OAuth2.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component\nDESCRIPTION: Imports necessary code fragments and renders a ConfigApiResources component with configuration code snippets as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto PHP SDK with Composer\nDESCRIPTION: This command uses Composer to install the official Logto SDK for PHP applications. Composer will download the package and its dependencies, making the Logto authentication functionality available in your PHP project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require logto/sdk\n```\n\n----------------------------------------\n\nTITLE: Rendering Scope Claim List Component in JSX\nDESCRIPTION: This code renders the ScopeClaimList component, which is likely used to display a comprehensive list of scopes and claims supported by Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/fragments/_scopes-and-claims.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ScopeClaimList />\n```\n\n----------------------------------------\n\nTITLE: Displaying User Profile Data\nDESCRIPTION: Displays user profile data in the user profile page using the authentication utility getters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport '/auth/custom_auth/auth_util.dart';\n\n// ...\n\nchildren: [\n  Text(\n    'User ID: $currentUserUid',\n  ),\n  Text(\n    'Display Name: ${currentUserData?.name}',\n  ),\n  Text(\n    'Username: ${currentUserData?.username}',\n  ),\n  Text(\n    'Email: ${currentUserData?.emailVerified ?? currentUserData?.email}',\n  ),\n]\n```\n\n----------------------------------------\n\nTITLE: Resulting Custom Data After Update in JSON for Logto User\nDESCRIPTION: Illustrates the result of updating custom_data, showing that the entire object is replaced with the new content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-data.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customDataBaz\": {\n    \"baz\": \"baz\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Config Value by Key using npx\nDESCRIPTION: This command sets the value of a specified configuration key using npx to run the Logto CLI. It can be used to set values such as OIDC Cookie keys.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-database-configs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db config set <key> [keys...]\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Buttons to Angular Template\nDESCRIPTION: Adds HTML buttons to the Angular template for triggering sign-in and sign-out actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button (click)=\"signIn()\">Sign in</button>\n<br />\n<button (click)=\"signOut()\">Sign out</button>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources Component in MDX\nDESCRIPTION: MDX implementation that imports multiple code snippet components and configures them as props for the ConfigApiResources component. The code demonstrates proper setup of documentation fragments with their respective code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering MDX Components in React\nDESCRIPTION: Imports three MDX components and renders them with section headers that include anchor links. Uses JSX syntax to structure the component layout.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.mdx';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Intégration \\{#integration}\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Fetching in React\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring and fetching organization tokens in a Logto application. It includes a main component for fetching organization tokens and separate code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Components in MDX\nDESCRIPTION: MDX file that imports fragment components and renders a FetchAccessTokenForApiResources component with props for getting access tokens\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Context in Subject Token Request\nDESCRIPTION: Example JSON payload showing how to include a context object when requesting a subject token from Logto's Management API. The context contains metadata about the impersonation such as ticketId, reason, and supportEngineerId.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"userId\": \"alex123\",\n  \"context\": {\n    \"ticketId\": \"TECH-1234\",\n    \"reason\": \"Resource access issue\",\n    \"supportEngineerId\": \"sarah789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for WeChat Integration\nDESCRIPTION: Required modifications to AndroidManifest.xml to support WeChat login in Android apps. This registers the WXEntryActivity to handle WeChat authentication callbacks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  package=\"com.sample.app\">\n\n  <application>\n    <!-- 추가할 줄 -->\n    <activity android:name=\".wxapi.WXEntryActivity\" android:exported=\"true\"/>\n  </application>\n\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express Authentication Scopes and Resources\nDESCRIPTION: Example configuration for Logto Express middleware that sets up authentication scopes for shopping and store operations, along with their corresponding API resource endpoints. The configuration defines read and write permissions for both shopping and store features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Configuration Code Blocks - JavaScript\nDESCRIPTION: These lines import Markdown code examples for basic resource configuration, configuration with scopes, and configuration with shared scopes. They are used as props in a React component to showcase differentiating scenarios in the documentation site. The imports assume a bundler or environment supporting direct import of Markdown files as React components or raw strings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Rendering FrameworkGuide Component for WordPress Integration\nDESCRIPTION: JSX code that renders the FrameworkGuide component which provides instructions on integrating WordPress with Logto authentication system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<FrameworkGuide />\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Documentation Component\nDESCRIPTION: Renders the FetchOrganizationTokenForUser component with required props including organization scope and code snippet components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Email Connector Payload Structure\nDESCRIPTION: Sample JSON payload structure sent by the HTTP email connector, including recipient email, usage type, and customizable payload variables like verification code and locale.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/email/http-mail/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"to\": \"foo@logto.io\",\n  \"type\": \"SignIn\",\n  \"payload\": {\n    \"code\": \"123456\"\n    \"locale\": \"de\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Step Components in JSX\nDESCRIPTION: This code imports step components from separate files to be used in the main document. Each step component likely contains detailed instructions for a specific part of the Azure AD SSO integration process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sso/entra-id-saml/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step1 from './_step-1.mdx';\nimport Step2 from './_step-2.mdx';\nimport Step3 from './_step-3.mdx';\nimport Step4 from './_step-4.mdx';\nimport Step5 from './_step-5.mdx';\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with pnpm\nDESCRIPTION: Command to install the Logto Vue package using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope in React Native\nDESCRIPTION: This snippet demonstrates how to import required types from the Logto React Native SDK and set up a Logto configuration object. It specifically includes the Organizations scope in the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Diagramme de flux pour le cookie de session Logto partagé\nDESCRIPTION: Ce diagramme montre comment un utilisateur peut se connecter à plusieurs applications clientes à partir du même agent utilisateur en utilisant un cookie de session partagé sous le domaine Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/end-user-flows/sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph User [Agent utilisateur A]\n      U[Utilisateur]\n\n      subgraph Layer1 [Domaine client A]\n        A[Application cliente A]\n      end\n\n      subgraph Layer1 [Domaine client B]\n        B[Application cliente B]\n      end\n\n      subgraph Layer2 [Domaine Logto]\n          C{{Session de connexion Logto ?}}\n          D[Page de connexion]\n      end\n    end\n\n    U --> |Connexion| A\n    A --> |Rediriger vers Logto| C\n    U --> |Connexion| B\n    B --> |Rediriger vers Logto| C\n    C --> |Non| D\n    D --> |Créer session| C\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resource Configuration Docs with MDX Component\nDESCRIPTION: This MDX snippet renders the `ConfigApiResources` component. It passes other imported components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) as props. These props likely contain code examples for different API resource configuration scenarios (basic, with scopes, with shared scopes), allowing the `ConfigApiResources` component to display them within the documentation page. Dependencies include the imported `ConfigApiResources` component and the components passed as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing ScopesAndClaims Component in MDX\nDESCRIPTION: Imports the `ScopesAndClaims` React component from a specified MDX fragment file located in a parent directory's `fragments` subfolder. This component likely renders documentation concerning authentication/authorization scopes and claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Constant in MDX (JavaScript)\nDESCRIPTION: Exports a JavaScript constant named 'connector' assigned the string value 'Twilio'. This constant is likely used by imported MDX components within this tutorial page to dynamically display the connector name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-twilio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Twilio';\n```\n\n----------------------------------------\n\nTITLE: Invoking Logto getAccessToken via Next.js Server Action (TypeScript)\nDESCRIPTION: This Next.js Server Component (`app/page.tsx`) demonstrates how to use Logto's `getAccessToken` function within a Server Action. It defines an asynchronous function marked with `'use server'`, which calls `getAccessToken` with the Logto configuration and the target resource URL. This function is then passed as a prop (`onGetAccessToken`) to the `GetAccessToken` Client Component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"app/page.ts\"\nimport { getAccessToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetAccessToken from './get-access-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetAccessToken\n        onGetAccessToken={async () => {\n          'use server';\n\n          return getAccessToken(logtoConfig, 'https://shopping.your-app.com/api');\n        }}\n      />\n    </main>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: MDX Export Declaration\nDESCRIPTION: Export constant declaration for the connector name used throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-php-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Sample User Data from Facebook Login in JSON\nDESCRIPTION: An example of user data retrieved from Facebook login, showing the structure of basic data, custom data, and social identities.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"iHXPuSb9eMzt\",\n  \"username\": null,\n  \"primaryEmail\": null,\n  \"primaryPhone\": null,\n  \"name\": \"John Doe\",\n  \"avatar\": \"https://example.com/avatar.png\",\n  \"customData\": {\n    \"preferences\": {\n      \"language\": \"en\",\n      \"color\": \"#f236c9\"\n    }\n  },\n  \"identities\": {\n    \"facebook\": {\n      \"userId\": \"106077000000000\",\n      \"details\": {\n        \"id\": \"106077000000000\",\n        \"name\": \"John Doe\",\n        \"email\": \"johndoe@logto.io\",\n        \"avatar\": \"https://example.com/avatar.png\"\n      }\n    }\n  },\n  \"lastSignInAt\": 1655799453171,\n  \"applicationId\": \"admin_console\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation Sections\nDESCRIPTION: Defines the structure of the documentation with clear section headers and imported content components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-razor/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Add Logto authentication \\{#add-logto-authentication}\n\n<AddAuthentication />\n\n### Sign-in and sign-out flows \\{#sign-in-and-sign-out-flows}\n\n<SignInAndSignOutFlows />\n\n### Configure redirect URIs \\{#configure-redirect-uris}\n\n<ConfigureRedirectUris />\n\n### Implement sign-in/sign-out buttons \\{#implement-sign-insign-out-buttons}\n\n<ImplementButtons />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Rendering Intro Component for WordPress OAuth2 Integration\nDESCRIPTION: This code renders the Intro component, passing the 'connector' variable and specifying the SDK as 'WordPress plugin' along with a link to the WordPress website.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-oauth2.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"WordPress plugin\" link=\"https://wordpress.org/\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resources Configuration Components in JSX\nDESCRIPTION: This code imports various MDX fragments and code examples related to API resources configuration, then renders them using the ConfigApiResources component. The imports include the main component and three code examples showing different aspects of API resource configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Password Verification Response (JSON)\nDESCRIPTION: This snippet shows the expected response format when verifying a user's password. It includes a verification record id and its expiration time.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"verificationRecordId\": \"...\",\n  \"expiresAt\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Page with Logto Organization Token Retrieval\nDESCRIPTION: This server-side component defines the main page structure and includes a server action to retrieve an organization token using Logto. It imports the necessary Logto functions and renders a client-side component for token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getOrganizationToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetOrganizationToken from './get-organization-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetOrganizationToken\n        onGetOrganizationToken={async () => {\n          'use server';\n\n          return getOrganizationToken(logtoConfig, 'organization-id');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Logto Browser SDK via CDN\nDESCRIPTION: HTML script tag for importing the Logto Browser SDK directly from CDN using ES modules. This method doesn't require a package manager and loads the library from jsdelivr.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_add-sdk.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Special thanks to jsdelivr -->\n<script type=\"module\">\n  import LogtoClient from 'https://cdn.jsdelivr.net/npm/@logto/browser@2.2.13/+esm';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering FetchAccessTokenForApiResources in React (JavaScript)\nDESCRIPTION: This snippet imports two modules: a documentation fragment and a code example component, then renders the FetchAccessTokenForApiResources React component with specified props. It requires React as a dependency and expects the imported fragments to export React components. The getAccessTokenApi and getAccessTokenCode props provide configuration and code display, respectively. The output is a rendered documentation or guide section to assist developers in obtaining API access tokens securely.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"access_tpken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components with React - JavaScript\nDESCRIPTION: This snippet imports a fragment component and supplemental code modules for organization token handling in a React (JavaScript) context. Dependencies include React and the referenced MDX/MD code files. The example forms the base for rendering further UI elements that depend on these imported components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto with npm\nDESCRIPTION: Command to initialize and start Logto using npm. This method requires Node.js and PostgreSQL to be installed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @logto@latest\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Logto Organization Token Components\nDESCRIPTION: Imports necessary MDX fragments and code samples, then assembles them into a documentation component for organization token functionality. Uses the FetchOrganizationTokenForUser component with specific props for organization scope and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Android Client\nDESCRIPTION: Example showing how to request an access token for a specific API endpoint using Logto's Android client. Uses a callback to handle the response which may contain either an access token or an exception. The code demonstrates proper error handling by checking both possible outcomes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getAccessToken(\"https://shopping.your-app.com/api\") { logtoException, accessToken ->\n    logtoException?.let { println(it) }\n    accessToken?.let { println(it) }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying UI Assets with Basic Authentication\nDESCRIPTION: Basic command for deploying custom UI assets using app credentials and tenant endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/upload-custom-ui-assets-using-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/tunnel deploy --auth foo:bar --endpoint https://baz.logto.app --experience-path /path/to/your/custom/ui/dist\n```\n\n----------------------------------------\n\nTITLE: Embedding MDX Components for Authentication Guide Sections in MDX/JSX\nDESCRIPTION: This snippet demonstrates the inclusion of imported MDX fragments (such as <Intro /> and <CreateApplication />) within the documentation body to form distinct tutorial sections. Each component renders a pre-defined step of the sign-in integration process, with some receiving parameters like 'connector' and 'sdk'. Dependencies include the respective MDX files, a compatible MDX parser, and any required props. Outputs consist of rendered instructional content; inputs are the props passed to each component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-google.mdx#2025-04-22_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<Intro connector={connector} sdk=\"Go\" link=\"https://go.dev\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\"Go\" />\n\n## Integrate Go with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add Google connector \\{#add-connector-connector}\n\n<AddSocialConnector connector={connector} framework=\"Go\" />\n\n## Set up Google OAuth app \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Google connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSocialConnector connector={connector} />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"Go\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Import Declaration for MDX Components\nDESCRIPTION: MDX import statements for various documentation fragments and components used to construct the tutorial page. The imports include sections for application creation, SSO connector setup, and integration guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchAccessTokenForApiResources Component in MDX/JSX\nDESCRIPTION: This snippet shows the usage of the `FetchAccessTokenForApiResources` React/MDX component. It configures the component with specific props: `getAccessTokenApi` is set to the string 'getAccessToken', and `getAccessTokenCode` is assigned the imported `GetAccessTokenCode` component, which presumably renders the code example for fetching an access token. This pattern allows for reusable documentation components customized with specific details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Button in Next.js with Auth.js\nDESCRIPTION: This code snippet demonstrates how to create a sign-out button component using Auth.js in a Next.js application. It uses the signOut function from Auth.js to handle the sign-out process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signOut } from '@/auth';\n\nexport function SignOut() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signOut();\n      }}\n    >\n      <button type=\"submit\">Se déconnecter</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to fetch user information asynchronously. It utilizes the fetchUserInfo() method of the logtoClient object and logs the retrieved user information to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_fetch-userinfo-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\nconsole.log(userInfo);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Documentation Components in JSX\nDESCRIPTION: This code imports a main documentation component for scopes and claims along with a code example component, then renders them together. The ScopesAndClaims component is rendered with the ScopesAndClaimsCode component passed as a prop named configScopesCode.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Sample Social Identities Data in JSON\nDESCRIPTION: An example of the identities object for a user who has logged in using both Google and Facebook, showing the structure of social identity data.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"facebook\": {\n    \"userId\": \"5110888888888888\",\n    \"details\": {\n      \"id\": \"5110888888888888\",\n      \"name\": \"John Doe\",\n      \"email\": \"johndoe@logto.io\",\n      \"avatar\": \"https://example.com/avatar.png\"\n    }\n  },\n  \"google\": {\n    \"userId\": \"111000000000000000000\",\n    \"details\": {\n      \"id\": \"111000000000000000000\",\n      \"name\": \"John Doe\",\n      \"email\": \"johndoe@gmail.com\",\n      \"avatar\": \"https://example.com/avatar.png\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Email Code (Bash)\nDESCRIPTION: This snippet shows how to verify the email verification code. It sends a PATCH request with the verification details and the received code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH https://[tenant-id].logto.app/api/verifications/verification-code/verify \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'content-type: application/json' \\\n  --data-raw '{\"identifier\":{\"type\":\"email\",\"value\":\"...\"},\"verificationId\":\"...\",\"code\":\"123456\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client in Express.js\nDESCRIPTION: Sets up the configuration object for the Logto client in an Express.js application. It includes the application ID, secret, Logto endpoint, and the base URL of the Express app.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-application-secret>',\n  endpoint: '<your-logto-endpoint>', // Ej. http://localhost:3001\n  baseUrl: '<your-express-app-base-url>', // Ej. http://localhost:3000\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Logto PHP SDK with Composer\nDESCRIPTION: This command uses Composer to install the Logto PHP SDK package as a dependency in a PHP project. Composer will download the package and its dependencies from Packagist and add them to the project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require logto/sdk\n```\n\n----------------------------------------\n\nTITLE: Mode Override Search Parameters\nDESCRIPTION: Example of overriding search modes for specific fields\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/advanced-user-search.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n  ['search.primaryEmail', 'tom%'],\n  ['mode.primaryEmail', 'like'],\n  ['search.phone', '0{3,}'],\n  ['joint', 'and'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant named `connector` with the string value 'Amazon'. This constant is likely intended for use within the MDX page or related components, possibly to dynamically reference the specific social connector being configured (Amazon) throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-amazon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Amazon';\n```\n\n----------------------------------------\n\nTITLE: Preparing User Data in JSON Format for Logto Migration\nDESCRIPTION: Example JSON structure for preparing user data for migration to Logto. Each user object contains username, passwordDigest (encrypted password), and passwordAlgorithm (SHA256 in this example).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"username\": \"user1\",\n    \"passwordDigest\": \"password-encrypted\",\n    \"passwordAlgorithm\": \"SHA256\"\n  },\n  {\n    \"username\": \"user2\",\n    \"passwordDigest\": \"password-encrypted\",\n    \"passwordAlgorithm\": \"SHA256\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Custom UI Authentication Flow with Tunnel Service using Mermaid Diagram\nDESCRIPTION: A sequence diagram showing the authentication flow when using a custom UI with the tunnel service. It illustrates how the tunnel intercepts redirects to show local custom UI while forwarding Experience API requests to Logto Cloud.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    box Local machine\n    participant A as Your application\n    participant B as Your custom sign-in UI\n    participant C as Tunnel\n    end\n    box Logto Cloud\n    participant D as Logto Cloud auth endpoint\n    participant E as Logto sign-in page\n    end\n    A ->> C: User initiates \"sign-in\" action and request auth\n    C ->> D: Forward auth request to Logto Cloud endpoint\n    D -->> C: Return auth response and tell the client<br/>to redirect to the Logto sign-in page\n    C ->> B: Intercept the redirect and<br/>redirect to your custom sign-in page\n    B ->> C: Submit the sign-in form and<br/>request Experience API to authenticate\n    C ->> D: Forward the Experience API requests to Logto Cloud\n    D -->> C: Authenticate sign-in request and<br/>tell the client to redirect to your application\n    C -->> A: Redirect to your application\n    A --> A: Handle the sign-in callback and<br/>the user is now authenticated\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in React\nDESCRIPTION: Import statements for organization token-related fragments and code snippets that will be used in the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing Scope-Claim List Component in JSX/Markdown\nDESCRIPTION: Imports a component named '_scope-claim-list.md' that likely contains a list of all available scopes and their corresponding claims in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/fragments/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopeClaimList from './_scope-claim-list.md';\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair for Alipay Authentication in Bash\nDESCRIPTION: Commands to generate a public-private RSA key pair required for Alipay application authentication. The private key is used for signing requests, while the public key is uploaded to the Alipay developer console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/social/alipay-web/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out private.pem 2048\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign In/Out UI Logic\nDESCRIPTION: Creates a home route with conditional rendering based on authentication status using withLogto middleware.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  res.setHeader('content-type', 'text/html');\n\n  if (req.user.isAuthenticated) {\n    res.end(`<div>Hello ${req.user.claims?.sub}, <a href=\"/logto/sign-out\">Sign Out</a></div>`);\n  } else {\n    res.end('<div><a href=\"/logto/sign-in\">Sign In</a></div>');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Logto Configuration\nDESCRIPTION: This snippet demonstrates how to set sensitive Logto configuration information using environment variables in a .env file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNUXT_LOGTO_ENDPOINT=\"<your-logto-endpoint>\"\nNUXT_LOGTO_APP_ID=\"<your-logto-app-id>\"\nNUXT_LOGTO_APP_SECRET=\"<your-logto-app-secret>\"\nNUXT_LOGTO_COOKIE_ENCRYPTION_KEY=\"<a-random-string>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Configuration in Swift\nDESCRIPTION: This code initializes a LogtoClient with a custom configuration including endpoint, app ID, scopes, and resources. It demonstrates how to set up the LogtoConfig object with specific permissions and API endpoints, then use it to create a LogtoClient instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"read\", \"write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript snippet defines and exports a constant named `connector` with the string value 'Google'. This constant is likely used within the MDX document and its imported components (like `<Intro>`, `<AddSocialConnector>`) to dynamically refer to the specific social connector being configured (Google), ensuring consistency. It utilizes ES module export syntax.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-google.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Google';\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with npm\nDESCRIPTION: Command to install the Logto Vue package using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Updating Authentication Utility Methods\nDESCRIPTION: Updates the auth utility methods to provide access to CustomAuthManager, current user data, and Logto client instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_client.dart';\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nimport 'custom_auth_manager.dart';\n\nexport 'custom_auth_manager.dart';\n\nfinal _authManager = CustomAuthManager();\nCustomAuthManager get authManager => _authManager;\nString get currentUserUid => currentUser?.uid ?? '';\nOpenIdClaims? get currentUserData => currentUser?.idToken;\nLogtoClient get logtoClient => _authManager.logtoClient;\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in React (MDX) - JavaScript\nDESCRIPTION: This snippet demonstrates how multiple documentation sections are modularized and imported as MDX components into a React-based documentation file. Required dependencies include the relevant MDX fragment files for each documentation section and the environment must support JavaScript/MDX syntax (e.g., Docusaurus). Each import corresponds to a guide step, such as introducing the topic, creating an application, or explaining connector setup. The imported components are used to maintain a well-structured and maintainable documentation flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: SMTP Connector Configuration Schema\nDESCRIPTION: Defines the configuration schema for the SMTP connector, including host, port, fromEmail, and email templates. Also includes authentication options for username/password and OAuth2.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/integrations/email/smtp/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 名前      | タイプ     |\n| --------- | ---------- |\n| host      | string     |\n| port      | string     |\n| fromEmail | string     |\n| templates | Template[] |\n\n| テンプレートプロパティ | タイプ      | 列挙値                                                  |\n| ---------------------- | ----------- | ------------------------------------------------------- |\n| subject                | string      | N/A                                                     |\n| content                | string      | N/A                                                     |\n| usageType              | enum string | 'Register' \\| 'SignIn' \\| 'ForgotPassword' \\| 'Generic' |\n| contentType            | enum string | 'text/plain' \\| 'text/html'                             |\n\n**ユーザー名とパスワードの認証オプション**\n\n| 名前 | タイプ                 | 列挙値  |\n| ---- | ---------------------- | ------- |\n| user | string                 | N/A     |\n| pass | string                 | N/A     |\n| type | enum string (OPTIONAL) | 'login' |\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring MDX Content Blocks in Docusaurus (JavaScript/MDX)\nDESCRIPTION: This snippet demonstrates how to import modular documentation fragments and assemble a structured tutorial page for integrating Apple sign-in using Flutter with Logto. The approach leverages MDX imports for each logical section, which enhances maintainability and clarity across the documentation set. There are no external dependencies beyond Node.js-compatible MDX processors and Docusaurus conventions; no runtime inputs/outputs are expected, as this file acts as configuration for documentation rendering only.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-apple.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport FrameworkGuide from '@site/docs/quick-starts/framework/flutter/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/docs/integrations/social/apple/_integration.mdx';\\n\\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering ScopesAndClaims Component with Code Prop in MDX (JSX)\nDESCRIPTION: This JSX code renders the `ScopesAndClaims` component within an MDX page. It utilizes component composition by passing the `ScopesAndClaimsCode` component as the `configScopesCode` prop. This allows the parent component to dynamically include specific code examples within its structure, demonstrating modular documentation building.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Fragments in React\nDESCRIPTION: This snippet shows the import statements for various components and fragments used in the Logto integration guide for React.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport GuideTip from './_guide-tip.mdx';\nimport ImplementSignInAndSignOut from './_implement-sign-in-and-sign-out.mdx';\nimport InitClient from './_init-client.mdx';\nimport Installation from './_installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Handling Logto Callback in Rails\nDESCRIPTION: Implementation of the callback handler for Logto authentication in a Rails controller and route configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  def callback\n    @client.handle_sign_in_callback(url: request.original_url)\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  get \"/callback\", to: \"sample#callback\"\nend\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Logto API Resources Documentation in JSX\nDESCRIPTION: This code imports documentation fragments and code examples for Logto API resources configuration, then renders them using the ConfigApiResources component. It imports configuration examples for basic resources, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering NpmLikeInstallation Component with Package Names in MDX\nDESCRIPTION: This code snippet renders the previously imported `NpmLikeInstallation` component within an MDX file. It passes a string containing multiple package names ('@logto/express cookie-parser express-session') to the `packageName` prop. The component will use this prop to display the appropriate installation command (e.g., for npm or yarn).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<NpmLikeInstallation packageName=\"@logto/express cookie-parser express-session\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Documentation Component in JSX\nDESCRIPTION: This snippet renders a custom component called FetchOrganizationTokenForUser with specific props for organization token configuration and retrieval. It imports code snippets from external files to provide implementation examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Logto Documentation Fragments for PHP Web Integration\nDESCRIPTION: This snippet imports various Markdown fragments containing specific sections of the Logto integration guide for PHP web applications. These fragments are used to compose the full documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\nimport AssumingUrl from '../../fragments/_web-assuming-url.mdx';\nimport WebConfigureRedirectUris from '../../fragments/_web-configure-redirect-uris.mdx';\nimport SignInFlowSummary from '../../fragments/_web-sign-in-flow-summary.mdx';\n\nimport PhpGuideTip from './_guide-tip.md';\nimport HandleAuthenticationStatus from './_handle-authentication-status.md';\nimport ImplementCallbackRoute from './_implement-callback-route.md';\nimport ImplementSignInRoute from './_implement-sign-in-route.mdx';\nimport ImplementSignOutRoute from './_implement-sign-out-route.mdx';\nimport InitLogtoClient from './_init-logto-client.mdx';\nimport Installation from './_installation.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization in Logto (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure an organization in Logto using TypeScript. It sets up the organization ID and name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_organization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  organization: {\n    id: '<your-organization-id>',\n    name: 'Logto',\n  },\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Aliyun SMS Connector Configuration Schema\nDESCRIPTION: JSON schema showing the configuration structure for Aliyun SMS connector, including access credentials and template definitions. The config includes accessKeyId, accessKeySecret, signName, and an array of templates with their respective usage types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sms/aliyun-sms/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessKeyId\": \"string\",\n  \"accessKeySecret\": \"string\",\n  \"signName\": \"string\",\n  \"templates\": [\n    {\n      \"templateCode\": \"string\",\n      \"usageType\": \"Register | SignIn | ForgotPassword | Generic\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Component with Auth.js\nDESCRIPTION: Creates a sign-out component that uses Auth.js's signOut function in a server action to log users out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signOut } from '@/auth';\n\nexport function SignOut() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signOut();\n      }}\n    >\n      <button type=\"submit\">Sign Out</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Scopes and Resources in TypeScript React\nDESCRIPTION: This code snippet defines a LogtoConfig object that customizes authentication scopes and specifies resource APIs for an application using the @logto/react package. Dependencies include the @logto/react library, and the config should be supplied where authentication initialization is needed. Key parameters: 'scopes' sets the list of permission strings for JWT claims, and 'resources' lists the API endpoints to target with secured access. Input is a configuration object; output depends on how it's consumed in authentication flows. The snippet assumes further integration within a Logto-enabled React setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Logto Documentation\nDESCRIPTION: This robots.txt configuration allows all user agents to crawl the site and specifies sitemap locations for various language versions of the Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/static/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://docs.logto.io/sitemap.xml\nSitemap: https://docs.logto.io/de/sitemap.xml\nSitemap: https://docs.logto.io/es/sitemap.xml\nSitemap: https://docs.logto.io/fr/sitemap.xml\nSitemap: https://docs.logto.io/ja/sitemap.xml\nSitemap: https://docs.logto.io/ko/sitemap.xml\nSitemap: https://docs.logto.io/pt-BR/sitemap.xml\nSitemap: https://docs.logto.io/zh-CN/sitemap.xml\nSitemap: https://docs.logto.io/zh-TW/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Tokens in Kotlin using Logto Client\nDESCRIPTION: Shows two methods for working with organization tokens: getting the raw token and getting token claims. Both methods require a valid organization ID that can be found in the ID token claim 'organizations' and handle responses through callbacks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Replace the parameter with a valid organization ID.\n// Valid organization IDs for the user can be found in the ID token claim `organizations`.\nlogtoClient.getOrganizationToken(\"organization-id\") { logtoException, organizationToken ->\n    logtoException?.let { println(it) }\n    organizationToken?.let { println(it) }\n}\n\n// or\nlogtoClient.getOrganizationTokenClaims(\"organization-id\") { logtoException, claims ->\n    logtoException?.let { println(it) }\n    claims?.let { println(it) }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Fragments for Access Token Documentation\nDESCRIPTION: This MDX snippet imports two reusable documentation fragments: `FetchAccessTokenForApiResources` and `GetAccessTokenCode`. It then utilizes the `FetchAccessTokenForApiResources` component, configuring it by setting the `getAccessTokenApi` prop to the string \"GetAccessToken\" and passing the imported `GetAccessTokenCode` component (which presumably contains relevant code examples) to the `getAccessTokenCode` prop. This renders a specific documentation section about fetching access tokens tailored by the provided props. Dependencies include the imported MDX fragments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Organization Token Documentation Components in JSX\nDESCRIPTION: This code imports documentation components and code samples for fetching organization tokens, then assembles them into a documentation page. It passes in the organization scope and code snippets as props to the main documentation fragment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organisations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Blazor AuthorizeView\nDESCRIPTION: Example showing how to display user information within an AuthorizeView component in a Blazor application. Uses conditional rendering to show the user's name or a fallback value if unavailable.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_fetch-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n<AuthorizeView>\n    <Authorized>\n        @* Signed in view *@\n        @* ... *@\n        <p>You are signed in as @(@User?.Profile?.Name ?? \"(unknown name)\").</p>\n    </Authorized>\n    @* ... *@\n</AuthorizeView>\n```\n\n----------------------------------------\n\nTITLE: Defining Azure AD Connector Constant in JavaScript\nDESCRIPTION: Exports a constant named `connector` assigned the string value 'Azure AD'. This constant is likely used by various MDX components within the same file (e.g., `<Intro>`, `<AddSocialConnector>`) to dynamically reference the specific connector being configured (Azure AD), promoting consistency and ease of modification. It assumes a module context (ESM).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-azure-ad.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Azure AD';\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Organization Token Retrieval in Next.js\nDESCRIPTION: This server component implements a page that includes a client component for organization token retrieval. It uses Logto's getOrganizationToken function within a server action to securely obtain tokens for a specific organization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getOrganizationToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetOrganizationToken from './get-organization-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetOrganizationToken\n        onGetOrganizationToken={async () => {\n          'use server';\n\n          return getOrganizationToken(logtoConfig, 'organization-id');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Re-login for New Scopes in React\nDESCRIPTION: A React code snippet showing how to trigger a re-login or re-consent process when new scopes are introduced to the auth system, ensuring the user's organization token is updated with the new permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/organization-experience/invite-organization-members.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { clearAllTokens, signIn } = useLogto();\n\n...\n// If fetched real-time scopes have newly assigned scopes than the organization token scopes\nawait clearAllTokens();\nsignIn({\n  redirectUri: '<your-sign-in-redirect-uri>',\n  prompt: 'consent',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FetchAccessTokenForApiResources Component in JSX\nDESCRIPTION: This snippet imports a reusable component for fetching access tokens and a code example, then renders the component with specific props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler in SvelteKit\nDESCRIPTION: Sets up the Logto authentication handler for a SvelteKit application with email and phone scopes. This code imports the necessary components from '@logto/sveltekit' and configures the handle function with specific user permission scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope, handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto({\n  // ...other options\n  scopes: [UserScope.email, UserScope.phone], // 如有需要可新增更多權限範圍 (scopes)\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying UI Assets with ZIP File\nDESCRIPTION: Alternative command for deploying pre-zipped UI assets directly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/upload-custom-ui-assets-using-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/tunnel deploy --auth foo:bar --endpoint https://baz.logto.app --zip-path /path/to/your/custom/ui/dist.zip\n```\n\n----------------------------------------\n\nTITLE: Visualizing Multi-app Support with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates how Logto supports multiple apps, allowing users to sign in once and access all connected apps without re-authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/sign-in-experience.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A(<b>Your app 1</b>) <--> B(<b>Logto</b>)\n    C(<b>Your app 2</b>) <--> B\n    B <--> D(<b>Your app 3</b>)\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Kakao Guide\nDESCRIPTION: These lines import reusable MDX components into the Kakao integration guide. `GuideTip` likely displays helpful tips or notes, and `Integration` probably contains shared steps or information common to various integration guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/integrations/social/kakao/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nimport GuideTip from '../../fragments/_guide-tip.mdx';\n\nimport Integration from './_integration.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Access Token Fetching in React\nDESCRIPTION: This snippet imports necessary components and code fragments to create a documentation page for fetching access tokens. It uses a reusable component and a separate code snippet file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Android Activity\nDESCRIPTION: Shows how to observe and display user information in an Android Activity. It uses a TextView to show the JSON representation of the user info response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        //...other code\n\n        // Assuming you have a TextView with id `user_info_text_view` in your layout\n        val userInfoResponseTextView: TextView = findViewById(R.id.user_info_text_view)\n        logtoViewModel.userInfoResponse.observe(this) { userInfoResponse ->\n            userInfoResponseTextView.text = if (userInfoResponse !== null) {\n                val json = Gson().toJson(userInfoResponse, UserInfoResponse::class.java)\n                JSONObject(json).toString(2)\n            } else {\n                \"\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Content in MDX (JavaScript)\nDESCRIPTION: Imports the `ScopesAndClaims` React component from an MDX file and `ScopesAndClaimsCode` content (presumably code examples or related text) from a Markdown file using standard JavaScript import syntax. These imports make the component and content available for use within the current MDX document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for WordPress Line Sign-in Tutorial\nDESCRIPTION: Imports various MDX fragment components to structure the tutorial on implementing Line sign-in with WordPress and Logto. These fragments contain reusable content sections for the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-line.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/wordpress-plugin/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/line/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Line';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Fetching in React\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring organizations and fetching organization tokens for users in a React application using Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources in Logto Express (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure multiple API resources in a Logto Express application. It imports the UserScope from @logto/express package and creates a configuration object that includes an array of API resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Ajouter des ressources API\n};\n```\n\n----------------------------------------\n\nTITLE: Documentation Navigation Links in HTML\nDESCRIPTION: HTML code snippets showing internal documentation links using a custom <Url> component, pointing to various sections of Logto documentation including end-user flows, connector configuration, and API protection.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_further-readings.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Url href=\"/end-user-flows\"> End-user flows: authentication flows, account flows, and organization flows </Url>\n```\n\nLANGUAGE: html\nCODE:\n```\n<Url href=\"/connectors\"> Configure connectors </Url>\n```\n\nLANGUAGE: html\nCODE:\n```\n<Url href=\"/authorization/api-resources/protect-your-api\"> Protect your API </Url>\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info in Android\nDESCRIPTION: Demonstrates how to fetch additional user information that requires a network request using the fetchUserInfo method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.fetchUserInfo {_, userInfoResponse ->\n    println(\"UserInfoResponse:$userInfoResponse\")\n}\n// You can now access claims like `userInfo.custom_data`\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Organization Token Components\nDESCRIPTION: JSX/MDX code that imports necessary components and renders the FetchOrganizationTokenForUser component with configuration parameters and code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"LogtoCore::USER_SCOPE[:organizations]\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in JavaScript (MDX) for Expo and Apple Sign-In Guide\nDESCRIPTION: Imports several MDX files and fragments that encapsulate documentation sections for different stages of the Apple sign-in integration process with Expo (React Native) and Logto. These modular imports ensure each part of the guide is maintainable and reusable, while the connector type is computed for use in fragments. This organizational pattern is key for readable, updatable developer documentation and relies on correct MDX file paths and valid exports.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-apple.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport FrameworkGuide from '@site/docs/quick-starts/framework/expo/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/docs/integrations/social/apple/_integration.mdx';\\n\\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const connector = 'Apple';\n```\n\n----------------------------------------\n\nTITLE: Server-Side Access Token Page Implementation in Next.js\nDESCRIPTION: A Next.js server component that sets up the page structure and implements a server action for retrieving access tokens using Logto. The component imports necessary dependencies and configures the token retrieval with a specific resource endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAccessToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetAccessToken from './get-access-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetAccessToken\n        onGetAccessToken={async () => {\n          'use server';\n\n          return getAccessToken(logtoConfig, 'https://shopping.your-app.com/api');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Logto PHP SDK with Composer\nDESCRIPTION: This command installs the Logto PHP SDK using Composer, allowing PHP applications to integrate with Logto for authentication and authorization services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require logto/sdk\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token Claims in JavaScript\nDESCRIPTION: This snippet demonstrates how to get organization token claims using the Logto client in JavaScript.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclaims = await client.getOrganizationTokenClaims(\"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Callback Paths for Logto Authentication in ASP.NET Core\nDESCRIPTION: This code snippet shows how to customize the Logto callback paths in an ASP.NET Core application. It sets the CallbackPath and SignedOutCallbackPath properties of LogtoOptions to custom values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_configure-redirect-uris.mdx#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // Other configurations...\n  // highlight-start\n  options.CallbackPath = \"/Foo\";\n  options.SignedOutCallbackPath = \"/Bar\";\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Documentation Components\nDESCRIPTION: Imports documentation fragments and code examples, then composes them using the ConfigApiResources component with relevant props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exemple 2 (Cas 2) - Facturation avec modifications des ressources API\nDESCRIPTION: Formule mathématique illustrant le calcul proratisé lorsque des ressources API sont ajoutées et supprimées à différentes dates pendant un cycle de facturation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/logto-cloud/billing-and-pricing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: math\nCODE:\n```\n\\$16 + \\$8 \\times (4 \\times 25 - 2 \\times 15) / 30 + 2 \\times \\$8 = \\$50.67\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders them using the ConfigApiResources component. It demonstrates how to structure and display API resource configuration examples in Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Connector Type Documentation Cards with React DocCardList\nDESCRIPTION: Creates a documentation card list that displays the four connector types with their respective icons, descriptions, and links to detailed documentation pages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Email connector',\n      href: '/connectors/email-connectors',\n      description: 'Integrate with email delivery service for user email verification.',\n      customProps: {\n        icon: <Email />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'SMS connector',\n      href: '/connectors/sms-connectors',\n      description: 'Integrate with SMS service for user phone number verification.',\n      customProps: {\n        icon: <Mobile />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Social login connector',\n      href: '/connectors/social-connectors',\n      description: 'Integrate with social identity provider for social sign-in.',\n      customProps: {\n        icon: <Social />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Enterprise SSO connector',\n      href: '/connectors/enterprise-connectors',\n      description: 'Integrate with enterprise identity provider for enterprise SSO.',\n      customProps: {\n        icon: <Enterprise />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Client-Side Component for Retrieving Organization Token in Next.js\nDESCRIPTION: This client-side component defines a button that, when clicked, triggers the retrieval of an organization token. It takes a prop function onGetOrganizationToken, which is called on button click to fetch the token and log it to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetOrganizationToken: () => Promise<string>;\n};\n\nconst GetOrganizationToken = ({ onGetOrganizationToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetOrganizationToken();\n        console.log(token);\n      }}\n    >\n      조직 토큰 가져오기 (콘솔 로그 참조)\n    </button>\n  );\n};\n\nexport default GetOrganizationToken;\n```\n\n----------------------------------------\n\nTITLE: Searching Multiple Fields with OR Logic\nDESCRIPTION: This code demonstrates how to search for multiple conditions across different fields with OR logic. It searches for users with 'foo' in their name OR email ending with '@gmail.com'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', '%foo%'],\n  ['search.primaryEmail', '%@gmail.com'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Snippets for Logto Organization Setup\nDESCRIPTION: This snippet imports necessary components and code snippets for configuring organizations and fetching organization access tokens in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources Component with Code Snippets in JSX\nDESCRIPTION: This snippet imports the ConfigApiResources component and three code snippet components, then renders ConfigApiResources with the code snippets passed as props. It demonstrates how to configure API resources with various scopes and settings in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Seeding Logto Database with npx\nDESCRIPTION: Alternative command to seed a PostgreSQL database for Logto using npx to run the Logto CLI without installing it globally.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db seed\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources Component with Code Examples in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code examples as props. It demonstrates how to structure and pass code examples for API resource configuration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Access Token in Kotlin for Android\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to fetch an access token for a specific API resource within an organization context. It utilizes the getAccessToken method, passing both the API resource URL and the organization ID as parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getAccessToken(\n  'https://shopping.your-app.com/api',\n  organizationId\n) { logtoException, accessToken ->\n    println(\"AccessToken:$accessToken\")\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing User Impersonation Flow with Mermaid Diagram\nDESCRIPTION: A sequence diagram illustrating the flow of user impersonation between a support engineer's app, a server, and Logto API endpoints. Shows the three main steps of requesting impersonation, obtaining a subject token, and exchanging it for an access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Sarah as Sarah's app\n    participant TechCorp as TechCorp's server\n    participant Logto as Logto Management API\n    participant LogtoToken as Logto token endpoint\n\n    Sarah->>TechCorp: POST /api/request-impersonation\n    Note over Sarah,TechCorp: Request to impersonate Alex\n\n    TechCorp->>Logto: POST /api/subject-tokens\n    Note over TechCorp,Logto: Request subject token for Alex\n\n    Logto-->>TechCorp: Return subject token\n    TechCorp-->>Sarah: Return subject token\n\n    Sarah->>LogtoToken: POST /oidc/token\n    Note over Sarah,LogtoToken: Exchange subject token for access token\n\n    LogtoToken-->>Sarah: Return access token\n    Note over Sarah: Sarah can now access resources as Alex\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Fetching Components in JSX\nDESCRIPTION: This snippet imports required components and fragments, then configures the FetchOrganizationTokenForUser component with necessary props for organization scope, configuration, and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Components in React (JavaScript)\nDESCRIPTION: This code snippet imports a reusable component for fetching API access tokens from a documentation fragment, as well as a code example for obtaining an access token. Dependencies include React and the respective '.mdx' and '.md' files (which may export React components). The imported modules provide the core logic and demonstration code leveraged later in the file; there are no direct inputs or outputs in this snippet, and it is used to modularize application logic and doc fragments for easier composition.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components in React\nDESCRIPTION: This code imports MDX fragments and renders a reusable documentation component for fetching access tokens. It passes API method names and code examples as props to the component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Connector Addition Section using AddPasswordlessConnector Component (MDX)\nDESCRIPTION: Uses the 'AddPasswordlessConnector' component to show how to add the SendGrid passwordless email connector in Logto. Props specify the connector name (via the `connector` variable), type ('Email'), and the identifier used for sign-up ('Email address').\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-sendgrid.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<AddPasswordlessConnector\n  connector={connector}\n  connectorType=\"Email\"\n  passwordlessSignUpIdentifier=\"Email address\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims in Express with Logto\nDESCRIPTION: This snippet demonstrates how to display user information in an Express route using Logto. It uses the 'withLogto' middleware and accesses user claims from the request object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  response.json(request.user.claims);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Fragments for Scopes and Claims Documentation in JSX\nDESCRIPTION: This code imports MDX fragments for documentation and renders the ScopesAndClaims component with ScopesAndClaimsCode passed as a prop. This pattern allows for reusing documentation components across different sections of the Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Visualizing User Authentication Flow in Logto\nDESCRIPTION: This diagram illustrates the sequence of events in the user authentication process, from the initial sign-in button click to the successful authentication. It shows the interactions between the User, Application, and Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrate-logto/integrate-logto-into-your-application/understand-authentication-flow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant User\n    participant Application\n    participant Logto\n\n    User->>Application: Click sign-in button\n    Application->>Logto: Initiate sign-in and redirect to Logto sign-in page\n    User->>Logto: Enter credentials for authentication\n    Logto->>Application: Complete sign-in and redirect back\n    Application->>Logto: Process callback and request access token and user info\n    Logto->>Application: Return access token and user info\n    Application->>User: Sign-in successful\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Scopes in LogtoConfig\nDESCRIPTION: Demonstrates how to configure OAuth scopes in LogtoConfig by passing a list of scope strings or enum values. Shows two equivalent ways to specify the email and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // or `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Modules and React Composition (JavaScript)\nDESCRIPTION: This JavaScript (JSX) snippet imports MDX and Markdown components related to config resource documentation, and composes them using a React component called ConfigApiResources. The imported modules supply configuration examples and resource definitions, which are supplied as props for embedded code display or dynamic documentation. Assumes a build system (like Next.js or Gatsby) that handles MDX and Markdown imports as React components. Key props are code samples, each corresponding to a different resource configuration example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Logto API Resource Configuration Components\nDESCRIPTION: This code snippet renders the imported React components for API resource configuration and access token retrieval in Logto. It includes sections for configuring Logto clients and fetching access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiResourcesDescription />\n\n### Logto 클라이언트 구성하기 \\{#configure-logto-client}\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n\n### API 리소스에 대한 액세스 토큰 가져오기 \\{#fetch-access-token-for-the-api-resource}\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: 手動での組織トークン取得リクエスト\nDESCRIPTION: SDK を使わない場合の組織トークン取得方法です。refresh_token グラントタイプを使用したトークンエンドポイントへのリクエスト例を示します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// JavaScript を例として使用\n\nconst params = new URLSearchParams();\n\nparams.append('grant_type', 'refresh_token');\nparams.append('client_id', 'YOUR_CLIENT_ID');\nparams.append('refresh_token', 'REFRESH_TOKEN');\nparams.append('organization_id', 'org_123');\n\nconst response = await fetch('https://YOUR_LOGTO_ENDPOINT/oidc/token', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  body: params,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Scopes and Resources in TypeScript Configuration\nDESCRIPTION: This TypeScript snippet shows how to define requested permission scopes (e.g., 'read', 'write') and target API resource indicators (URLs) within the `logtoConfig` object. These values are used during the authentication flow to specify the level of access required for particular API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable\nDESCRIPTION: Exports a constant that defines the SSO connector type being used throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Rendering Popular Social Connectors List with DocCardList\nDESCRIPTION: JSX component implementation that displays a list of popular social connectors including Google, Facebook, Apple, Microsoft Azure AD, GitHub, and Discord. Each connector is represented as a card with an icon, label, and description.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/social.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\nimport Google from '@site/docs/connectors/assets/icons/google.svg';\nimport Apple from '@site/docs/connectors/assets/icons/apple.svg';\nimport GitHub from '@site/docs/connectors/assets/icons/github.svg';\nimport Facebook from '@site/docs/connectors/assets/icons/facebook.svg';\nimport Microsoft from '@site/docs/connectors/assets/icons/microsoft.svg';\nimport Discord from '@site/docs/connectors/assets/icons/discord.svg';\nimport OAuth2 from '@site/docs/connectors/assets/icons/oauth2.svg';\nimport OIDC from '@site/docs/connectors/assets/icons/oidc.svg';\n\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Google',\n      href: '/integrations/google',\n      description: 'The Google connector provides a succinct way for your application to use Google\\'s OAuth 2.0 authentication system.',\n      customProps: {\n        icon: <Google />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Facebook',\n      href: '/integrations/facebook',\n      description: 'The Facebook connector allows your application to use Facebook\\'s OAuth 2.0 authentication system.',\n      customProps: {\n        icon: <Facebook />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Apple',\n      href: '/integrations/apple',\n      description: 'The official Logto connector for Apple social sign-in.',\n      customProps: {\n        icon: <Apple />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Microsoft Azure AD',\n      href: '/integrations/azuread',\n      description: 'The Microsoft Azure AD connector provides a succinct way for your application to use Azure\\'s OAuth 2.0 authentication system.',\n      customProps: {\n        icon: <Microsoft />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'GitHub',\n      href: '/integrations/github',\n      description: 'The official Logto connector for GitHub social sign-in.',\n      customProps: {\n        icon: <GitHub />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Discord',\n      href: '/integrations/discord',\n      description: 'The Discord connector provides a way for your application to use Discord as an authorization system.',\n      customProps: {\n        icon: <Discord />,\n      }\n    },\n  ]}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Step Components for Okta SSO Integration in React\nDESCRIPTION: Imports modular step components from local files to build a structured Okta SSO integration guide. These components contain the detailed instructions for each step of the integration process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sso/okta/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Step1 from './_step-1.mdx';\nimport Step2 from './_step-2.mdx';\nimport Step3 from './_step-3.mdx';\nimport Step4 from './_step-4.mdx';\nimport Step5 from './_step-5.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Constant for SendGrid (JavaScript)\nDESCRIPTION: The snippet defines a simple constant that establishes which email provider connector is being used (SendGrid). This allows fragments and components within the MDX document to reference the connector type dynamically. There are no dependencies for this declaration, and it serves as a context-providing utility for downstream code components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-sendgrid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SendGrid';\n```\n\n----------------------------------------\n\nTITLE: Importing Components in React JavaScript Project\nDESCRIPTION: This snippet demonstrates the importing of two components, one from a relative fragment directory and another from a local code directory. These imports provide modular documentation and example code for fetching access tokens within a React-based documentation site. Dependencies include the appropriate .mdx files and a build setup that can process MDX imports.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Syncing Translation Keys for a Specific Language in Logto\nDESCRIPTION: Command to synchronize translation keys from the source language folder (default 'en') to a target language folder (pt-BR in this example). This ensures the target language has the same keys and file structure as the source language.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/using-cli/translation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli translate sync-keys --target pt-BR\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Fragments - Docusaurus/MDX - JavaScript\nDESCRIPTION: This snippet demonstrates how the documentation template imports and leverages modular MDX fragments and guides for each section of the Facebook sign-in tutorial. It imports content for the introduction, application creation, connector setup, configuration saving, enabling social authentication, validation, and further readings, assembling them for inclusion within the page's subsections. All imports use relative or aliased module paths and are meant for composition within Docusaurus's MDX environment. Inputs include fragment file paths and connector variables; outputs are rendered documentation sections in the combined MDX page. Prerequisite: integration with the Docusaurus and MDX ecosystem.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-facebook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/express/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/facebook/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Dynamic Content Rendering in JSX\nDESCRIPTION: This code snippet conditionally renders content based on the 'type' prop. It provides different explanations and code references depending on whether the type is 'method' or 'option'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_claims-need-network-request.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<span>{props.type === 'method' && (<>you can use the <code>{props.method}</code> method</>)}{props.type === 'option' && <>you can configure the <code>{props.configOption}</code> option</>}</span>\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Scopes and Resources in TypeScript Configuration\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure the `scopes` and `resources` properties within a Logto configuration object (`logtoConfig`). The `scopes` array lists the OAuth 2.0 permissions ('read', 'write') the application requests, while the `resources` array specifies the unique identifiers (URIs) of the target APIs the application intends to access. This configuration is typically used when initializing a Logto client or during the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI in Expo app.json for Android\nDESCRIPTION: Configures the URI scheme in Expo's app.json file for Android to handle authentication redirects. The scheme should match the redirect URI configured in the Logto Console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"io.logto\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting React Component Properties\nDESCRIPTION: Exports a constant defining the SSO connector type and renders various documentation components with specific props for the React implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-react-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Okta enterprise SSO';\n\n<Intro connector={connector} sdk=\"React\" link=\"https://reactjs.org\" />\n```\n\n----------------------------------------\n\nTITLE: Importing React/MDX Fragments for Guide Assembly - JavaScript\nDESCRIPTION: This code snippet imports various instructional components and MDX fragments, each representing a section of the Single Sign-On (SSO) integration guide. Dependencies include relative fragment paths and internationalized resources located within the project directory. The imported components are later used to compose the documentation page in a modular fashion. This structure promotes maintainability and reuse of instructional content; all imports must resolve correctly for assembly to function.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-server-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-server/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/google-workspace/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Adding Blorc.Core Script Reference to Blazor WASM Application\nDESCRIPTION: Adds the Blorc.Core injector script to the index.html file which is required for the OpenID Connect authentication flow in a Blazor WebAssembly application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- ... -->\n  <script src=\"_content/Blorc.Core/injector.js\"></script>\n  <!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Icons as React Components for Logto Cloud Documentation\nDESCRIPTION: Imports SVG icons as React components from the assets directory to be used in the documentation cards for different Logto Cloud features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-cloud/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport TenantSettings from '@site/docs/logto-cloud/assets/icons/data-storage.svg';\nimport PricingAndBilling from '@site/docs/logto-cloud/assets/icons/key.svg';\nimport CustomDomains from '@site/docs/logto-cloud/assets/icons/research.svg';\nimport TenantMemberManagement from '@site/docs/logto-cloud/assets/icons/settings.svg';\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client\nDESCRIPTION: This code shows how to configure the Logto client with additional user scopes like Email and Phone. The scopes parameter is added to the LogtoClient configuration to request specific user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [UserScope.Email, UserScope.Phone],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Components in MDX\nDESCRIPTION: MDX code that imports required components and renders a FetchAccessTokenForApiResources component with props for access token documentation\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with Yarn\nDESCRIPTION: Installs the @logto/chrome-extension package using Yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Organization Token Fetch Components with JSX (JavaScript)\nDESCRIPTION: This snippet imports modular code and UI fragments (`FetchOrganizationTokenForUser`, `ConfigOrganizationCode`, `GetOrganizationAccessTokenCode`) into a React or MDX file, and renders the main `FetchOrganizationTokenForUser` component in JSX. The component is provided with scoped organization props and embedded code examples as JSX expressions, demonstrating a method for creating interactive documentation or UI guides for organization token handling. Dependencies: React (with JSX support), fragment modules located in specified paths. Inputs include the organization scope, and two code-fragment components, and the snippet outputs a rendered component suitable for documentation or interactive UIs. All imported fragment paths must be valid and accessible in the project structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in MDX\nDESCRIPTION: Imports three React components from local MDX/MD files for use in documentation: a guide tip, installation instructions, and integration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.md';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In/Sign-Out Links in ERB Template\nDESCRIPTION: This snippet shows how to create conditional sign-in and sign-out links in an ERB template based on the user's authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <a href=\"<%= sign_out_path %>\">Sign out</a>\n<% else %>\n  <a href=\"<%= sign_in_path %>\">Sign in</a>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Performing a Basic User Search Request with cURL\nDESCRIPTION: This example shows how to perform a basic user search request using cURL to call the Logto Management API. The search term '%alice%' is used to find users with 'alice' in any searchable field.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  --location \\\n  --request GET \\\n  'http://<your-logto-endpoint>/api/users?search=%25alice%25'\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional User Claims in ERB Templates\nDESCRIPTION: Shows how to access and display multiple user attributes (name, email, phone) in an ERB view after requesting the additional scopes. The template displays these details if the user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>Name: <%= @client.id_token_claims[\"name\"] %></p>\n  <p>Email: <%= @client.id_token_claims[\"email\"] %></p>\n  <p>Telefon: <%= @client.id_token_claims[\"phone\"] %></p>\n<% else %>\n  <p>Bitte melde dich an</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Rendering the Scope-Claim List Component in JSX/Markdown\nDESCRIPTION: Renders the imported ScopeClaimList component that displays the list of available scopes and their corresponding claims in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/fragments/_scopes-and-claims.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ScopeClaimList />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Modular Token Components in React (JavaScript)\nDESCRIPTION: This snippet demonstrates the importation and composition of modular React components and code fragments for illustrating organization token configuration and retrieval. It imports reusable code/documentation modules, then renders a main component (FetchOrganizationTokenForUser) with relevant props, including embedded code fragments as subcomponents. Dependencies include a working React environment and the referenced MDX/MD files; expected input is that the fragments provide instructional or code-example content. The output is a rendered UI component hierarchy. Ensure that all relative import paths are valid and files exist.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for Organization Access Tokens in React\nDESCRIPTION: Imports various documentation fragments that explain how to fetch and manage organization tokens for users in a React application. The components include configuration code and access token retrieval examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"urn:logto:scope:organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering EnableSsoConnector Component in MDX\nDESCRIPTION: This MDX code renders the `EnableSsoConnector` component without any props. This component likely displays instructions on how to enable the configured SAML SSO connector within the Logto Sign-in Experience settings, imported from './fragments/_enable-sso-connector.mdx'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-saml-enterprise-sso.mdx#2025-04-22_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<EnableSsoConnector />\n```\n\n----------------------------------------\n\nTITLE: Rendering Social Connector Addition Component for Hugging Face\nDESCRIPTION: Renders the AddSocialConnector component with parameters for Hugging Face connector and WordPress framework, providing instructions for setting up the social connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-hugging-face.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AddSocialConnector connector={connector} framework=\"WordPress\" />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for WordPress and Facebook Integration Guide\nDESCRIPTION: This code snippet imports various MDX components and fragments to structure the tutorial for integrating Facebook sign-in with WordPress using Logto. It also sets up some variables and export statements for use throughout the document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-facebook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/wordpress-plugin/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/facebook/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Facebook';\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Scopes and Claims Documentation\nDESCRIPTION: This code imports and combines multiple documentation fragments to create a comprehensive guide on scopes and claims in the Logto authentication system. It imports a main content MDX fragment and a code examples markdown file, then passes the code examples as a prop to the main content component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express Middleware in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up the configuration object for Logto Express middleware. It specifically shows how to define scopes and resources for user authentication and authorization. The configuration includes read and write scopes, and specifies two API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Obtaining Android App Signature using Gradle\nDESCRIPTION: This Bash command executes the `signingReport` Gradle task for a specific Android project module (`your-android-project`). This task generates a report containing signing information, including the MD5 fingerprint needed for the 'App Signature' field in the WeChat Open Platform configuration. The output MD5 value needs to be lowercased and have colons removed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew your-android-project:signingReport\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Content Components in JavaScript/MDX\nDESCRIPTION: This snippet imports various MDX components from relative and aliased paths within a Docusaurus project. These components represent reusable sections of the documentation (like introduction, application creation steps, connector configuration, etc.), enabling modular content structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/swift/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/okta/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exporting the Connector Variable in JavaScript\nDESCRIPTION: This snippet exports a constant named 'connector' with the value 'Naver', to be reused throughout the file and passed as a prop to MDX fragments. This approach promotes parameterization and reuse of the provider identity in multiple sections of the tutorial. No special dependencies are needed beyond standard JavaScript module syntax. The export is intended for use within the module or by child components/fragments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-naver.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Naver';\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Client Middleware for Express\nDESCRIPTION: This middleware creates a Supabase client with the authenticated user's ID. It attaches the client to the request context, allowing subsequent handlers to interact with Supabase using the user's identity.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const withSupabaseClient = async (ctx, next) => {\n  ctx.supabase = getSupabaseClient(ctx.auth.userId);\n\n  return next();\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization IDs with Token Fetch Action in Vue.js Template\nDESCRIPTION: This HTML template renders a list of organization IDs with buttons that allow users to fetch organization-specific tokens. When a button is clicked, it triggers the token fetch function and outputs the results to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <ul>\n    <li v-for=\"organizationId of organizationIds\" v-bind:key=\"organizationId\">\n      <span>{{ organizationId }}</span>\n      <button type=\"button\" @click=\"onClickFetchOrganizationToken(organizationId)\">\n        Token abrufen (siehe Konsole)\n      </button>\n    </li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue package with pnpm\nDESCRIPTION: This command installs the Logto Vue SDK using pnpm (Performant npm). It adds the @logto/vue package to your project's dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Options in ASP.NET Core\nDESCRIPTION: This code snippet demonstrates how to configure Logto authentication options in an ASP.NET Core application. It sets the resource URL and defines the required scopes for authentication and authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Resource = \"https://shopping.your-app.com/api\";\n  options.Scopes = new string[] {\n    \"openid\",\n    \"profile\",\n    \"offline_access\",\n    \"read\",\n    \"write\"\n  };\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Static Value for Connector in JavaScript/MDX\nDESCRIPTION: This snippet exports a constant named 'connector' set to the value 'Naver' for consistent reuse across embedded MDX fragments and components. This constant acts as a shared prop for various imported MDX fragments. It takes no inputs and outputs a string value representing the social connector name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-naver.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Naver';\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client and Fetching ID Token in Dart\nDESCRIPTION: This method initializes the Logto client and fetches the ID token. It handles potential errors during initialization and updates the current user's authentication state based on the retrieved ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture initialize() async {\n  logtoClient = LogtoClient(config: logtoConfig, httpClient: http.Client());\n\n  late OpenIdClaims? idToken;\n\n  try {\n    idToken = await logtoClient.idTokenClaims;\n  } catch (e) {\n    if (kDebugMode) {\n      print('Error initializing auth: $e');\n    }\n  }\n\n  _updateCurrentUser(\n      loggedIn: idToken != null, uid: idToken?.subject, idToken: idToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Application with Auth and Resource URL\nDESCRIPTION: This code snippet sets up the Angular application configuration, including HTTP client and authentication providers. It specifically highlights the addition of a resource URL in the authentication configuration, which is important for specifying the API endpoint for authentication purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...other config\n        // highlight-start\n        resource: 'https://your-api-resource.com',\n        // highlight-end\n      }),\n    }),\n    // ...other providers\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for Access Token\nDESCRIPTION: Imports documentation fragments and code components for fetching access tokens, then composes them into a documentation page using the FetchAccessTokenForApiResources component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Email Connector Templates in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure email templates for different usage types in the SendGrid connector. It includes templates for registration, sign-in, forgot password, and generic use cases.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/integrations/email/sendgrid-email/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"subject\": \"<register-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (register template)>\",\n    \"usageType\": \"Register\",\n    \"type\": \"text/plain\"\n  },\n  {\n    \"subject\": \"<sign-in-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (sign-in template)>\",\n    \"usageType\": \"SignIn\",\n    \"type\": \"text/plain\"\n  },\n  {\n    \"subject\": \"<forgot-password-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (forgot-password template)>\",\n    \"usageType\": \"ForgotPassword\",\n    \"type\": \"text/plain\"\n  },\n  {\n    \"subject\": \"<generic-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (generic template)>\",\n    \"usageType\": \"Generic\",\n    \"type\": \"text/plain\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining SSO Identity Type in TypeScript\nDESCRIPTION: TypeScript type definition for SSO identity structure, including issuer, identityId, and detail fields.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SSOIdentity = {\n  issuer: string;\n  identityId: string;\n  detail: JsonObject; // Siehe https://github.com/withtyped/withtyped/blob/master/packages/server/src/types.ts#L12\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Component with Auth.js\nDESCRIPTION: This snippet demonstrates how to create a Sign-In component using Auth.js in a Next.js application. It uses the server action to trigger the sign-in process with Logto provider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from '@/auth';\n\nexport default function SignIn() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signIn('logto');\n      }}\n    >\n      <button type=\"submit\">Sign In</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Snippets for Organization Token Fetching in React\nDESCRIPTION: This snippet imports necessary components and code snippets for fetching organization tokens. It includes a reusable component for token fetching and separate code snippets for organization configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources Documentation Components in JSX\nDESCRIPTION: This code imports MDX fragments and configuration code examples, then renders them using the ConfigApiResources component. The configuration displays various API resource setup patterns including basic resources, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Logto Docs Repository in Bash\nDESCRIPTION: Commands to clone the Logto documentation repository from GitHub and navigate to the project directory using the command line.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/logto-io/docs.git\ncd docs\n```\n\n----------------------------------------\n\nTITLE: Using ConfigApiResources Component with Props in MDX\nDESCRIPTION: This MDX snippet demonstrates the usage of the `ConfigApiResources` component. It receives other imported components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`), which likely contain specific code examples, and passes them as props. This structures the documentation page, dynamically including different code examples based on the component composition.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Verifying User Password (Bash)\nDESCRIPTION: This snippet demonstrates how to verify a user's password to obtain a verification record id. It sends a POST request with the password for verification.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://[tenant-id].logto.app/api/verifications/password \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'content-type: application/json' \\\n  --data-raw '{\"password\":\"...\"}'\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Components - React - JavaScript\nDESCRIPTION: This snippet imports two components: one for fetching access tokens for API resources and another containing code for obtaining an access token. It assumes a project structure where these components are stored as MDX/MD modules. No external dependencies beyond React and a compatible build system (such as Next.js or Gatsby with MDX support) are required. Both imported components are intended for composition within a React component tree.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: MDX Component Imports and Configuration\nDESCRIPTION: Import statements for MDX components and configuration settings for the tutorial documentation\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-server-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-server/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Components in JSX\nDESCRIPTION: This snippet imports two components and renders them together to create documentation for fetching access tokens. It uses a custom component 'FetchAccessTokenForApiResources' with props for the API name and code snippet.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering OIDC Scopes and Claims Documentation in JSX\nDESCRIPTION: This code imports documentation fragments related to OIDC scopes and claims, then renders them with the code examples fragment passed as a property to the main component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow Sequence Diagram (Mermaid)\nDESCRIPTION: A sequence diagram illustrating the three-step process of API protection: authentication request, token request, and API request with token validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    Note over Client,API: 1. 인증 요청 (Authentication Request)\n    Client->>Logto: GET /oidc/auth\n    Note right of Client: resource=https://resource-server.com/api<br/>및 선택적 scope=read write\n    Logto-->>Client: authorization_code 반환\n\n    Note over Client,API: 2. 토큰 요청 (Token Request)\n    Client->>Logto: POST /oidc/token\n    Note right of Client: authorization_code<br/>resource=https://resource-server.com/api<br/>및 선택적 scope=read write\n    Logto-->>Client: JWT 액세스 토큰 반환\n    Note left of Logto: 토큰에는 다음이 포함됨:<br/>- 리소스에 제한된 대상<br/>- 부여된 스코프 (있는 경우)\n\n    Note over Client,API: 3. API 요청\n    Client->>API: Bearer 토큰으로 요청\n    Note over API: JWT 토큰 검증:\n    Note over API: - 서명 확인<br/>- 발급자 검증<br/>- 대상 확인<br/>- 만료 검증<br/>- 스코프 확인 (RBAC 활성화 시)\n    alt 토큰 유효\n        API-->>Client: 보호된 리소스\n    else 토큰 무효\n        API-->>Client: 401 Unauthorized\n    end\n```\n\n----------------------------------------\n\nTITLE: Getting Config Value by Key using Logto CLI\nDESCRIPTION: This command retrieves the value of a specified configuration key using the Logto CLI. It can be used to fetch values such as OIDC private keys.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-database-configs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlogto db config get <key> [keys...]\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Access Token Documentation Components in JSX\nDESCRIPTION: This code imports MDX fragments and code examples, then composes them into a documentation component that explains how to fetch access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"access_tpken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FetchAccessTokenForApiResources Component in JSX\nDESCRIPTION: This snippet imports a reusable component for fetching access tokens and a code example, then renders the component with specific props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Executing Direct Social Sign-in with cURL\nDESCRIPTION: A curl command example showing how to construct an authentication request URL with the direct_sign_in parameter for social authentication. This example uses Google as the identity provider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/authentication-parameters/direct-sign-in.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location \\\n  --request GET 'https://[tenant-id].logto.app/oidc/auth?client_id=1234567890&...&direct_sign_in=social:google'\n```\n\n----------------------------------------\n\nTITLE: Constructing URLSearchParams for Basic Fuzzy Search in JavaScript\nDESCRIPTION: This snippet demonstrates how to create URLSearchParams for a basic fuzzy search across all available fields using the 'search' key.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([['search', '%foo%']]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Introduction Section with Logto and Vue\nDESCRIPTION: This JSX code renders the introduction section of the tutorial, passing the 'Slack' connector and 'Vue' SDK as props to the Intro component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vue-slack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"Vue\" link=\"https://vuejs.org\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList for Popular Email Providers\nDESCRIPTION: MDX code that renders a DocCardList component displaying various popular email service providers such as AWS Direct Mail, Mailgun, SendGrid, Aliyun, and Postmark with their respective icons and links.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/connectors/email-connectors/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'AWS Direct Mail',\n      href: '/integrations/aws-ses',\n      description: 'The official Logto connector for AWS connector for direct mail service.',\n      customProps: {\n        icon: <AwsDm />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Mailgun',\n      href: '/integrations/mailgun',\n      description: 'The official Logto connector for Mailgun email service.',\n      customProps: {\n        icon: <Mailgun />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'SendGrid Email',\n      href: '/integrations/sendgrid-email',\n      description: 'The official Logto connector for SendGrid email service.',\n      customProps: {\n        icon: <SendGrid />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Aliyun Direct Mail',\n      href: '/integrations/aliyun-dm',\n      description: 'The official Logto connector for Aliyun connector for direct mail service.',\n      customProps: {\n        icon: <AliyunDm />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Postmark Mail',\n      href: '/integrations/postmark',\n      description: 'Logto connector for Postmark email service.',\n      customProps: {\n        icon: <Postmark />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Fragment with Code Props in React (JavaScript/MDX)\nDESCRIPTION: This snippet renders the `FetchOrganizationTokenForUser` MDX component within a React JSX context, providing it with a specific organizational scope and passing in code blocks as props for configuration and access token retrieval. The component expects props such as `organizationScope`, `configOrganizationCode`, and `getOrganizationAccessTokenCode`, and assembles them for display or execution. It requires prior imports of the referenced Markdown and MDX code fragments, as well as a React-compatible rendering environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"LogtoCore::USER_SCOPE[:organizations]\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Microsoft Entra ID OIDC SSO Guide\nDESCRIPTION: This code renders the imported MDX components to create the structure of the guide. It includes sections for creating a Logto application, integrating the SDK, adding and configuring the SSO connector, and testing the implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-express-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"Express\" link=\"https://expressjs.com\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Aplicación web tradicional\" framework=\"Express\" />\n\n## Integrate Express SDK \\{#integrate-framework-sdk}\n\n<IntegrateSdk />\n\n## Add Microsoft Entra ID OIDC enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\"Express\" />\n\n## Set up Azure AD SSO application \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Microsoft Entra ID OIDC enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"Express\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring MDX Fragment Sections - JavaScript\nDESCRIPTION: This snippet imports various MDX and documentation fragments as React components to build the page structure for the Kakao and Express integration guide. It establishes a modular approach for content reuse and documentation maintenance by mapping each section of the guide to a distinct file, ensuring clarity and manageability. Dependencies include Docusaurus, React, and the referenced MDX files, and the structure is tailored to use with Docusaurus documentation sites.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-kakao.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/express/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/kakao/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Fragments for Access Token Documentation in JSX\nDESCRIPTION: This code imports MDX fragment components and assembles them to create documentation for fetching access tokens for API resources. It uses a reusable component with props to customize the content displayed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running OIDC Migration Using Logto CLI\nDESCRIPTION: Command to seed OIDC configuration into the database using the Logto CLI. This can be run directly with environment variables loaded or by specifying a path to the .env file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/migrate-from-env.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogto db seed oidc\n# Or\nlogto db seed oidc --env /your/path/to/.env\n```\n\n----------------------------------------\n\nTITLE: Documenting Sectioned TOC Workaround and Issues (JavaScript Comment)\nDESCRIPTION: This code snippet provides context within a JavaScript-style comment block explaining the need to divide documentation templates due to Docusaurus limitations regarding the Table of Contents (TOC). It references a GitHub issue for further details. The comment is for maintainers and readers of the documentation source and does not affect runtime behavior.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-android-saml-enterprise-sso.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There\\'s no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relationship between Resources and Identities in Logto\nDESCRIPTION: This Mermaid diagram illustrates the relationship between different types of resources (API resources, Organizations, Organization API resources) and identities (Users, M2M applications) in Logto's authorization model.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/authn-vs-authz.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  subgraph Resources\n    R(API resources)\n    O(Organizations)\n    OR(Organization API resources)\n  end\n\n  subgraph Identities\n    U(Users)\n    A(M2M applications)\n  end\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Component with Props\nDESCRIPTION: Renders the FetchOrganizationTokenForUser component with organization scope and imported code configurations as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"LogtoCore::USER_SCOPE[:organizations]\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Documentation Component\nDESCRIPTION: Renders the FetchOrganizationTokenForUser component with the necessary props including the organization scope and imported code snippet components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Deploying Database Alterations using npx\nDESCRIPTION: Alternative command to deploy database alterations using npx. This approach doesn't require global installation of Logto CLI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/database-alteration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db alteration deploy\n```\n\n----------------------------------------\n\nTITLE: Rendering SDK Integration Component in MDX\nDESCRIPTION: Renders the 'IntegrateSdk' MDX component. This component likely contains instructions or code examples for integrating the Logto SDK into a .NET Core Blazor WebAssembly project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<IntegrateSdk />\n```\n\n----------------------------------------\n\nTITLE: Visualizing OAuth Authorization Flow with Mermaid\nDESCRIPTION: A sequence diagram illustrating the OAuth authorization flow for social connectors, showing interactions between the end user, Logto, and the third-party social platform.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/develop-your-connector/implement-connectors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tactor user as Usuario final\n\tparticipant logto as Logto\n\tparticipant platform as Plataforma social de terceros\n\n\tuser ->> logto: El usuario inicia sesión social\n\tlogto ->> platform: Logto redirige a la plataforma social de terceros\n\tplatform -->> user: La plataforma social solicita al usuario que inicie sesión\n\tuser ->> platform: El usuario inicia sesión y autoriza el acceso de Logto\n\tplatform -->> logto: Redirige de nuevo al URI de callback de Logto con un código de autorización\n\tlogto ->> platform: Logto intercambia el código por un token de acceso\n\tplatform -->> logto: La plataforma social devuelve el token de acceso\n\tlogto ->> platform: Logto obtiene información del usuario con el token de acceso\n\tplatform -->> logto: La plataforma social devuelve la información del usuario\n\tlogto -->> user: Logto devuelve la información del usuario a la aplicación del usuario, <br> completa el flujo de inicio de sesión\n```\n\n----------------------------------------\n\nTITLE: Getting App Signing Report with Gradle for Android\nDESCRIPTION: Command to obtain the signing report from your Android app, which is required for WeChat configuration. This provides the MD5 hash needed for the Application Signing Signature.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew your-android-project:signingReport\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in JavaScript\nDESCRIPTION: Exports a JavaScript constant named 'connector' with the string value 'Amazon'. This constant is likely used within the imported MDX components or the current file to dynamically specify the social connector type being configured in the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-amazon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Amazon';\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token in JavaScript\nDESCRIPTION: This snippet demonstrates how to access additional claims (email and phone) after configuring the Logto client with extra scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// 现在你可以访问额外的声明 (Claims) `claims.email`，`claims.phone`，等等。\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Token Components in React/MDX\nDESCRIPTION: Imports and renders organization token configuration components with specific props for user scope and code snippets\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running local Logto CLI with command options\nDESCRIPTION: Demonstrates how to execute the local CLI with additional options, requiring a double dash separator before the options when using npm run.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli db seed -- --db-url postgresql://your-database-url\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components\nDESCRIPTION: Imports MDX fragments and code examples, then renders them using a custom component to display API access token fetching documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Structuring React Native Logto Integration Guide with Imported Components\nDESCRIPTION: This code snippet demonstrates the structure of the Logto integration guide using the imported Markdown components. It outlines the main sections of the guide including installation, authentication setup, sign-in/sign-out flows, redirect URI configuration, and button implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Add Logto authentication \\{#add-logto-authentication}\n\n<AddAuthentication />\n\n### Sign-in and sign-out flows \\{#sign-in-and-sign-out-flows}\n\n<SignInAndSignOutFlows />\n\n### Configure redirect URIs \\{#configure-redirect-uris}\n\n<ConfigureRedirectUris />\n\n### Implement sign-in/sign-out buttons \\{#implement-sign-insign-out-buttons}\n\n<ImplementButtons />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources with LogtoClient in PHP\nDESCRIPTION: This snippet shows how to initialize a LogtoClient instance with multiple API resources. The resources parameter in LogtoConfig class takes an array of API endpoint URLs that will be authorized to access through the client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-next-line\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // 添加 API 资源 (API resources)\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Example Response from Organization Creation API\nDESCRIPTION: This is the example JSON response (status code 201) returned when successfully creating an organization using the Logto Management API. It includes the organization details such as ID, name, description, and branding information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/organization-experience/create-organization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tenantId\": \"string\",\n  \"id\": \"string\",\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"customData\": {},\n  \"isMfaRequired\": false,\n  \"branding\": {\n    \"logoUrl\": \"string\",\n    \"darkLogoUrl\": \"string\",\n    \"favicon\": \"string\",\n    \"darkFavicon\": \"string\"\n  },\n  \"createdAt\": 1234567890\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token in TypeScript\nDESCRIPTION: This snippet demonstrates how to obtain an organization token using the Logto client. The method 'getOrganizationToken' is called with the organization ID as a parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await client.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Tokens Using Logto in Vue (TypeScript)\nDESCRIPTION: This TypeScript snippet leverages the Logto SDK within a Vue component to retrieve and manage organization IDs from ID token claims on component mount. It also provides an asynchronous handler to fetch and log organization-specific access tokens and their claims when triggered. Requires '@logto/vue' for authentication and 'vue' for component structure; expects a running Logto server and configured client. The main parameters are Vue's reactive stores (organizationIds) and Logto API functions, with logs sent to the browser console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useLogto } from '@logto/vue';\nimport { onMounted, ref } from 'vue';\n\nconst { getOrganizationToken, getOrganizationTokenClaims, getIdTokenClaims } = useLogto();\nconst organizationIds = ref<string[]>();\n\nonMounted(async () => {\n  const claims = await getIdTokenClaims();\n\n  console.log('ID token claims', claims);\n  organizationIds.value = claims?.organizations;\n});\n\nconst onClickFetchOrganizationToken = async (organizationId: string) => {\n  console.log('raw token', await getOrganizationToken(organizationId));\n  console.log('claims', await getOrganizationTokenClaims(organizationId));\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Claims with Logto Client in Capacitor\nDESCRIPTION: This snippet demonstrates how to use the getIdTokenClaims() method to retrieve user information in a Capacitor app using the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userClaims = await logtoClient.getIdTokenClaims();\nconsole.log(userClaims);\n```\n\n----------------------------------------\n\nTITLE: Updating User Profile (Bash)\nDESCRIPTION: This snippet shows how to update the user profile using the Account API. It sends a PATCH request to update specific profile fields like familyName and givenName.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH https://[tenant-id].logto.app/api/my-account/profile \\\n  -H 'authorization: Bearer <access_token>' \\\n  -H 'content-type: application/json' \\\n  --data-raw '{\"familyName\":\"...\",\"givenName\":\"...\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for WordPress Apple Sign-in\nDESCRIPTION: A JSX export statement that defines the connector variable as 'Apple', which is used throughout the document to reference the Apple sign-in connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Apple';\n```\n\n----------------------------------------\n\nTITLE: Rendering API Token Fetching Component in React (JSX)\nDESCRIPTION: This snippet demonstrates how to render the previously imported FetchAccessTokenForApiResources component within a React component tree. The component receives two props: 'getAccessTokenApi', which specifies the method name for fetching an access token, and 'getAccessTokenCode', which injects the imported code example. The expected output is a rendered UI section displaying documentation and code relevant to API token access; inputs are the provided props. This is commonly used in documentation or demo environments to show implementation details interactively.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Go\nDESCRIPTION: Retrieves authenticated user information in a Go web application using Logto. This snippet demonstrates how to access the user's claims after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandleFunc(\"/user\", func(w http.ResponseWriter, r *http.Request) {\n    claims, err := logtoClient.GetIdTokenClaims(r.Context())\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusUnauthorized)\n        return\n    }\n    // Use the claims to access user information\n    // For example: claims.Name, claims.Email, etc.\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to asynchronously fetch an organization token using the Logto client. It requires an initialized Logto client instance and an organization ID as input.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Scopes in Logto for Nuxt.js\nDESCRIPTION: This snippet demonstrates how to configure the Logto SDK in a Nuxt.js application to include organization scopes. It imports the UserScope enum from the Logto Nuxt SDK and adds the Organizations scope to the Logto configuration, enabling organization-related features in the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    scopes: [UserScope.Organizations],\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Admonition Component in JSX\nDESCRIPTION: This code snippet shows the usage of the Admonition component to display a tip for users new to Logto OSS. It suggests starting with a free development tenant on Logto Cloud for quick exploration of features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/logto-oss/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Admonition type=\"tip\" title=\"빠른 시작이 필요하신가요?\">\n\nLogto OSS가 처음이라면, [Logto Cloud](https://cloud.logto.io)에서 무료 개발 테넌트로 시작하는 것을 추천합니다. 이를 통해 모든 기능을 빠르게 탐색하고 설정의 번거로움 없이 최신 업데이트를 경험할 수 있습니다.\n\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Mixed Mode Search with Global and Field-Specific Settings\nDESCRIPTION: This example shows how to mix different search modes. It uses POSIX regex globally but overrides the primaryEmail field to use the 'like' mode instead.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n  ['search.primaryEmail', 'tom%'], // Like-Modus\n  ['mode.primaryEmail', 'like'],\n  ['search.phone', '0{3,}'], // Posix-Modus\n  ['joint', 'and'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig with Custom User Scopes in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object with custom user scopes. It specifically adds the Organisations scope to the list of scopes, which allows the application to request access to organization-related information for the user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(UserScope.Organisations),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Tutorial Fragments and Guides in Next.js (Pages Router) - TypeScript/MDX\nDESCRIPTION: This snippet demonstrates how to modularize page content for a Next.js (Pages Router) technical guide by importing MDX fragments and guides into the main MDX file. Each section of the tutorial is imported as a separate component for maintainable and readable documentation. The dependencies are various MDX files representing tutorial steps, and the imports must be compatible with the project's MDX loader and build setup. No user input or output is expected at this stage; these are static imports to construct the guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-saml.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/next/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Organization-Based Authentication Flow with Mermaid\nDESCRIPTION: A sequence diagram illustrating the authentication flow between Client, Logto, and API when using organization-based access control. The diagram shows token request with organization_id, verification steps, and conditional responses based on token validity.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-api-reources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    Note over Client,API: Token Request\n    Client->>Logto: POST /oidc/token\n    Note right of Client: with resource, organization_id,<br/>and requested scopes\n\n    Note over Logto: Verify user belongs to<br/>the specified organization\n    Logto-->>Client: Returns JWT access token\n    Note left of Logto: Token contains:<br/>- Standard JWT claims<br/>- organization_id<br/>- Scopes filtered by organization role\n\n    Note over Client,API: API Request\n    Client->>API: Request with Bearer token\n\n    Note over API: Validate JWT token:<br/>1. Standard JWT validation<br/>2. Verify organization_id<br/>3. Verify scopes\n\n    alt Token Invalid\n        API-->>Client: 401 Unauthorized\n    else Token Valid\n        alt Valid organization_id and scope\n            API-->>Client: Protected Resource\n        else Otherwise\n            API-->>Client: 403 Forbidden\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Enterprise SSO Documentation\nDESCRIPTION: Import statements for various MDX components used to structure the documentation for Google Workspace enterprise SSO integration with Flutter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/google-workspace/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Connector Variable Declaration\nDESCRIPTION: Exports a constant defining the name of the SSO connector being used in the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-vue-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Rendering AddSocialConnector Component for Apple Sign-in\nDESCRIPTION: JSX code that renders the AddSocialConnector component with connector and framework props to guide users on adding the Apple connector in a WordPress implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<AddSocialConnector connector={connector} framework=\"WordPress\" />\n```\n\n----------------------------------------\n\nTITLE: Attaching Access Token to API Request Headers\nDESCRIPTION: This snippet demonstrates how to attach an access token to the Authorization header for making authenticated API requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nawait LogtoRequest.get(\n  useSession: session,\n  endpoint: userInfoEndpoint,\n  // highlight-next-line\n  headers: [\"Authorization\": \"Bearer \\(accessToken)\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for OAuth2 Integration\nDESCRIPTION: This code snippet defines a constant 'connector' with the value 'OAuth2', which is used throughout the document to specify the type of social connector being integrated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-oauth2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport const connector = 'OAuth2';\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser SDK via CDN in Webflow\nDESCRIPTION: Code snippet that imports the Logto Browser SDK from jsdelivr CDN and initializes a global LogtoClient instance. The client is configured with the Logto endpoint and application ID, making it accessible throughout the Webflow site via the window object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/_init-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Import `@logto/browser` SDK from the jsdelivr CDN\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  // Assign the `logtoClient` instance to window object,\n  // enabling global usage in other pages\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>', // E.g. http://localhost:3001\n    appId: '<your-application-id>',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting AND Joint Mode in Logto User Search\nDESCRIPTION: This snippet shows how to set the joint mode to 'and' to require all conditions to be met in the search results.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', '%foo%'],\n  ['search.primaryEmail', '%@gmail.com'],\n  ['joint', 'and'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI in SwiftUI with Logto\nDESCRIPTION: This code snippet demonstrates how to implement a basic authentication UI in a SwiftUI application using Logto client. It shows how to handle sign-in and sign-out functionality, manage authentication state, and handle potential errors during the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Button(\"Sign Out\") {\n          Task { [self] in\n            await client.signOut()\n            isAuthenticated = false\n          }\n        }\n      } else {\n        Button(\"Sign In\") {\n          Task { [self] in\n            do {\n              try await client.signInWithBrowser(redirectUri: \"${props.redirectUris[0] ?? 'io.logto://callback'}\")\n              isAuthenticated = true\n            } catch let error as LogtoClientErrors.SignIn {\n              // 登入過程中發生錯誤\n            } catch {\n              // 其他錯誤\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring React SDK Documentation Components\nDESCRIPTION: Arranges the documentation components in a logical order, presenting installation steps, client initialization, and authentication implementation details with appropriate section headers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Init LogtoClient \\{#init-logtoclient}\n\n<InitClient />\n\n<ImplementSignInAndSignOut />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in JavaScript\nDESCRIPTION: This code demonstrates how to create a new LogtoClient instance with the Organizations user scope enabled. The UserScope.Organizations scope is required for accessing organization-related features in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-organization-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Fragment and Rendering Installation Component in React (JavaScript/JSX)\nDESCRIPTION: This snippet imports the NpmLikeInstallation React component from a relative fragments directory and then renders it as a JSX component with a list of npm package names as the packageName prop. This setup assumes a React/MDX documentation environment (such as Next.js or Docusaurus) where code fragments are used to show code samples or installation commands. The component is intended to generate a formatted block instructing users how to install '@logto/express', 'cookie-parser', and 'express-session' using npm or compatible package managers. Dependencies include a working React/MDX project and the referenced fragment component. The input is the packageName property as a string, and the expected output is a rendered installation command for the specified packages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/express cookie-parser express-session\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Constant in JavaScript\nDESCRIPTION: This JavaScript code snippet defines and exports a constant named `connector` with the string value 'SendGrid'. This constant is likely intended for use within the MDX page or imported components to consistently refer to the specific connector being configured (SendGrid) throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-sendgrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SendGrid';\n```\n\n----------------------------------------\n\nTITLE: Exporting Static Value for Connector in TypeScript (TSX)\nDESCRIPTION: This snippet defines and exports a constant named 'connector' with a value of 'Naver'. It is intended to be imported and used by other modules or fragments within the documentation system. No dependencies other than standard ES module support are required. This pattern facilitates reuse and configurability of documentation fragments and ensures consistent reference to the target connector throughout the file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-naver.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const connector = 'Naver';\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in LogtoConfig\nDESCRIPTION: This snippet shows how to request additional scopes by passing them to the LogtoConfig object. It demonstrates adding email and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val logtoConfig = LogtoConfig(\n    // ...autres configurations\n    scopes = listOf(\"email\", \"phone\"), // ou `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Documentation in JSX\nDESCRIPTION: This snippet imports two modules containing documentation about scopes and claims, then renders the ScopesAndClaims component while passing the code examples as a prop. This pattern allows for modular documentation that can be reused across the site.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: MDX File Structure for Okta SSO Integration\nDESCRIPTION: MDX file structure defining the documentation layout, imports, and page metadata for Okta SSO integration setup. Includes sidebar configuration and tutorial naming conventions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sso/okta/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\nslug: /integrations/okta\nsidebar_label: Okta\nsidebar_custom_props:\n  description: Centralizes identity management for customers, employees, and partners.\n  darkLogoFilename: okta-dark.svg\ntutorial_name: Okta enterprise SSO\ntutorial_config_name: OIDC application on Okta admin portal\n---\n\nimport GuideTip from '../../fragments/_sso_guide_tip.mdx';\n\nimport Step1 from './_step-1.mdx';\nimport Step2 from './_step-2.mdx';\nimport Step3 from './_step-3.mdx';\nimport Step4 from './_step-4.mdx';\nimport Step5 from './_step-5.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in Go Logto Client\nDESCRIPTION: Configures API resources for the Logto client in a Go web application. This setup allows the application to request access tokens for specific API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nlogtoClient, err := client.NewLogtoClient(\n    \"https://your-logto-endpoint.app\",\n    \"your-app-id\",\n    \"your-app-secret\",\n    \"http://localhost:8080/callback\",\n    []string{\"https://your-api-resource.com\"}, // Add your API resource indicators here\n    client.WithSessionStorage(sessionStorage),\n)\n```\n\n----------------------------------------\n\nTITLE: Truncation Placeholder for Page Structure - MDX\nDESCRIPTION: This MDX snippet utilizes a placeholder comment ('truncate') which could be leveraged by downstream tooling or documentation scripts to delimit sections or signal content boundaries. It has no effect on the rendered output but may be consumed during build or editing processes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-server-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_4\n\nLANGUAGE: MDX\nCODE:\n```\n{/* truncate */}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with CDN Import in HTML\nDESCRIPTION: This snippet demonstrates how to import the @logto/browser SDK from a CDN and initialize a LogtoClient instance with configuration. The client is then assigned to the window object for global access across pages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Import `@logto/browser` SDK from the jsdelivr CDN\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  // Assign the `logtoClient` instance to window object,\n  // enabling global usage in other pages\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>', // E.g. http://localhost:3001\n    appId: '<your-application-id>',\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Note Alert Component in JSX\nDESCRIPTION: A JSX component that renders a note alert with dynamic content referencing an application type property. The note is wrapped in a special note syntax commonly used in documentation systems.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_app-note.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n:::note\nThis guide assumes you have created an Application of type \"{props.type}\" in Admin\nConsole.\n:::\n```\n\n----------------------------------------\n\nTITLE: Clearing Access Token in TypeScript for Scope Updates\nDESCRIPTION: A TypeScript code snippet demonstrating how to clear the cached organization token when a user's permissions have been demoted, allowing for automatic issuance of a new token with updated scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/organization-experience/invite-organization-members.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { clearAccessToken } = useLogto();\n\n...\n// If fetched real-time scopes have fewer scopes than the organization token scopes\nawait clearAccessToken();\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources for Logto in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure API resources in the Logto configuration object. It specifies multiple API endpoints that the application will use, enhancing security and access control.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API 리소스를 추가하세요\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Documentation Fragments in React Native\nDESCRIPTION: Imports documentation fragments that explain how to configure organizations and fetch organization-scoped access tokens in a React Native application. This code organizes the component structure for the documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"LogtoCore::USER_SCOPE[:organizations]\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using ConfigApiResources Component with Imported Code Snippets\nDESCRIPTION: This MDX snippet demonstrates the usage of the `ConfigApiResources` component. It receives several props (`configResourcesCode`, `configResourcesWithScopesCode`, `configResourcesWithSharedScopesCode`), each assigned a component imported earlier (presumably containing relevant code examples). This pattern composes the final documentation section by injecting specific code demonstrations into a structured component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering a React Component with Props in MDX (JSX)\nDESCRIPTION: Renders the imported `ScopesAndClaims` React component using JSX syntax. It passes the imported `ScopesAndClaimsCode` content as the `configScopesCode` prop, allowing the component to display this content, likely code examples or configuration details related to scopes and claims. This demonstrates component composition and prop passing within an MDX file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources Component in MDX\nDESCRIPTION: Imports MDX fragments and code components, then configures the ConfigApiResources component with the imported code snippets as props. Used to render API resource configuration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Components\nDESCRIPTION: Import statements for configuration fragments and code snippets used in the Angular auth setup\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiResourcesDescription from '../../fragments/_api-resources-description.md';\nimport ConfigApiResources from '../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Components in MDX\nDESCRIPTION: MDX code showing the import and usage of components for demonstrating access token fetching functionality. The code imports a reusable component and passes props for API details and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Sectioning Documentation with Comments - JavaScript\nDESCRIPTION: This snippet is a JavaScript block comment explaining the rationale behind dividing documentation templates into sections, specifically due to Table of Contents (TOC) limitations in Docusaurus. It also includes a reference link to a related Docusaurus GitHub issue for further context. The comment provides context for maintainers and readers regarding the architectural decisions made in the documentation structure. There are no dependencies, parameters, or outputs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/*\\n  We have to divide templates into sections because imported mdx will not show in the TOC.\\n  There\\'s no way to customize TOC either. :-)\\n\\n  @see https://github.com/facebook/docusaurus/issues/3915\\n*/}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Documentation Components in React/MDX\nDESCRIPTION: This snippet shows how to import reusable documentation fragments and code examples, then compose them into a documentation component for the access token retrieval process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Logto Components and Code Snippets\nDESCRIPTION: This snippet imports various Logto components and code snippets for use in the document. It includes descriptions, configurations, and code examples for API resources and token handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiResourcesDescription from '../../fragments/_api-resources-description.md';\nimport ConfigApiResources from '../../fragments/_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from '../../fragments/_fetch-access-token-for-api-resources.mdx';\nimport FetchOrganizationTokenForUser from '../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.mdx';\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.mdx';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.mdx';\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: MDX Documentation Structure with React-like Component Renderings - MDX\nDESCRIPTION: MDX code illustrating the structure and flow of the documentation using custom React-like components for each major section. Properties are passed to components to dynamically insert relevant context (such as connector and SDK names). Dependencies include the imported MDX fragments and React/MDX runtime support. The main constraint is that the fragments and their expected properties must be correctly defined. The input is implied via the documentation context, and the output is structured documentation with sections for introductory information, application setup, connector configuration, and more.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-ios-swift-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"iOS (Swift)\" link=\"https://developer.apple.com/ios\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Native app\" framework=\"iOS (Swift)\" />\n\n## Integrate iOS (Swift) SDK \\{#integrate-framework-sdk}\n\n<IntegrateSdk />\n\n## Add Google Workspace enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\"iOS (Swift)\" />\n\n## Set up Google Cloud Platform \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Google Workspace enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"iOS (Swift)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Setting OIDC Cookie Keys using Logto CLI\nDESCRIPTION: This specific command sets the OIDC Cookie keys in the Logto configuration using the CLI. The value should be a valid JSON string.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-database-configs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nlogto db config set oidc.cookieKeys \"[\\\"key1\\\",\\\"key2\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Logto Startup Message\nDESCRIPTION: Example output message when Logto successfully starts, showing core and admin app URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nCore app is running at http://localhost:3001\nCore app is running at https://your-domain-url\nAdmin app is running at http://localhost:3002\nAdmin app is running at https://your-admin-domain-url\n```\n\n----------------------------------------\n\nTITLE: Adding Official Connectors with Logto CLI\nDESCRIPTION: This command adds official Logto connectors. It's not necessary to manually add these if using the official Logto version.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogto connector add --official\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli connector add --official\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli connector add --official\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Main Activity for Single Top Launch Mode\nDESCRIPTION: This XML snippet demonstrates how to configure the main activity in the AndroidManifest.xml file for single top launch mode. It sets the android:launchMode attribute to \"singleTop\" for the MainActivity.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n  android:name=\".MainActivity\"\n  android:launchMode=\"singleTop\"\n  android:theme=\"@style/LaunchTheme\"\n  // ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This snippet imports necessary components and renders the ConfigApiResources component with code snippets for different configuration scenarios.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request with Login Hint Parameter\nDESCRIPTION: This snippet shows how to pre-populate the sign-in form with a user's email address using the 'login_hint' parameter along with 'first_screen' and 'identifier' parameters in a cURL request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/authentication-parameters/first-screen.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location \\\n--request GET 'https://<your-tenant>.logto.app/oidc/auth?client_id=<client_id>&...&first_screen=identifier:sign_in&identifier=email&login_hint=example@logto.io'\n```\n\n----------------------------------------\n\nTITLE: Changing Joint Mode in URLSearchParams for User Search\nDESCRIPTION: This snippet demonstrates how to set the joint mode to 'and' in URLSearchParams to require all conditions to be met in the search results.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', '%foo%'],\n  ['search.primaryEmail', '%@gmail.com'],\n  ['joint', 'and'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant in JavaScript\nDESCRIPTION: This JavaScript snippet, located within an MDX file, exports a constant named `connector` with the string value 'OAuth2'. This constant is likely used throughout the MDX document and its imported components to dynamically reference the specific connector type being configured, ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-oauth2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OAuth2';\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Sample .env file configuration for storing deployment credentials and settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/upload-custom-ui-assets-using-cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nLOGTO_AUTH=foo:bar\nLOGTO_ENDPOINT=https://your.custom.domain\nLOGTO_EXPERIENCE_PATH=/path/to/your/custom/ui/dist\nLOGTO_RESOURCE=https://baz.logto.app/api\n```\n\n----------------------------------------\n\nTITLE: Using FetchOrganizationTokenForUser Component in MDX\nDESCRIPTION: This MDX snippet demonstrates the usage of the `FetchOrganizationTokenForUser` component. It sets the `organizationScope` prop to `UserScope.Organizations` and passes instances of `ConfigOrganizationCode` and `GetOrganizationAccessTokenCode` components as props. This structure is used within Logto documentation to present the steps for configuring and obtaining organization-specific access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Connector Configuration Guide Component in MDX\nDESCRIPTION: This MDX/JSX snippet renders the `ConnectorGuide` component, imported from `@site/docs/integrations/social/github/_integration.mdx`. This component provides detailed instructions on setting up the necessary OAuth application on the GitHub platform, including obtaining credentials required by the Logto connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-github.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<ConnectorGuide />\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Type Constant in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant variable named 'connector' with the string value 'SAML'. This constant is likely used within the MDX document or imported components to dynamically refer to the specific connector type (SAML) being configured in the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-saml.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet imports necessary components and renders a FetchAccessTokenForApiResources component with specific props. It demonstrates how to integrate the access token fetching functionality into a React-based documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Global Authentication Variables in Dart\nDESCRIPTION: This snippet defines global variables for the current user and a getter for the logged-in state. These variables can be used throughout the application to check the authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFlutterFlowAuthAuthUser? currentUser;\nbool get loggedIn => currentUser?.loggedIn ?? false;\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resource Configuration Docs with MDX Components\nDESCRIPTION: This MDX snippet utilizes the imported `ConfigApiResources` component to structure a documentation section. It passes other imported components, which presumably render specific code examples (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`), as props. This allows for modular composition of the documentation content related to configuring API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant in MDX/JavaScript\nDESCRIPTION: This JavaScript code snippet within an MDX file exports a constant named 'connector' with the string value 'OIDC'. This constant is likely used by imported MDX components within the same file to dynamically display the connector name (OIDC) in the tutorial content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-oidc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Npm-Like Installation Fragment using React - JavaScript\nDESCRIPTION: This snippet imports the 'NpmLikeInstallation' React component from a relative path and renders it with the specified package names ('passport' and 'passport-openidconnect') as a prop. The component is intended to display NPM installation instructions for the given packages. Dependencies include React and the custom 'NpmLikeInstallation' fragment. The 'packageName' prop accepts one or more package names as a string. The expected output is a reusable NPM-like installation instruction UI for the specified packages. Must be used within a valid React environment, and the path to the fragment must exist.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<NpmLikeInstallation packageName=\"passport passport-openidconnect\" />\n```\n\n----------------------------------------\n\nTITLE: Using Logto CLI with npx without installation\nDESCRIPTION: Executes Logto CLI directly using npx without installing it globally, useful for one-time operations when you don't need a permanent installation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli\n```\n\n----------------------------------------\n\nTITLE: Rendering Connector Configuration Guide Component in MDX\nDESCRIPTION: Renders the 'ConnectorGuide' MDX component. This component provides detailed instructions on configuring the Microsoft Entra ID SAML SSO connector, likely involving steps within the Azure portal.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<ConnectorGuide />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation and Code Fragments for Scopes and Claims - JavaScript\nDESCRIPTION: This snippet imports a documentation MDX fragment and a Markdown code sample related to scopes and claims for authentication, making them available as React components. Dependencies include support for MDX and Markdown imports with React (such as with Next.js or mdx-bundler). The imported modules serve as building blocks for composite documentation components. No parameters or outputs are directly exposed here; the goal is to modularize documentation code for reusability within higher-level components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components in JavaScript/MDX\nDESCRIPTION: This snippet shows the import statements used in an MDX file. It imports the `ScopesAndClaims` component from a relative path '../../fragments/_scopes-and-claims.mdx' and the `ScopesAndClaimsCode` component from a local file './_scopes-and-claims-code.md'. These imports make the components available for use within the current MDX document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n```\n\n----------------------------------------\n\nTITLE: Preparing User Data for Logto Migration in JSON\nDESCRIPTION: An example of how to structure user data in JSON format for migration to Logto. It includes username, encrypted password, and the hashing algorithm used.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/user-migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"username\": \"user1\",\n    \"passwordDigest\": \"password-encrypted\",\n    \"passwordAlgorithm\": \"SHA256\"\n  },\n  {\n    \"username\": \"user2\",\n    \"passwordDigest\": \"password-encrypted\",\n    \"passwordAlgorithm\": \"SHA256\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in MDX\nDESCRIPTION: This code shows the import statements and component composition for organization token documentation, utilizing MDX fragments and code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Database Alterations with CLI\nDESCRIPTION: Command to rollback database alterations to a specific version using Logto CLI. Executes the 'down' scripts to revert schema changes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/database-alteration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlogto db alteration rollback 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Components for Access Token Fetching in JSX\nDESCRIPTION: This snippet imports two components and uses them to create a documentation section for fetching access tokens. It demonstrates how to use reusable components in JSX to build documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Guide Components in React\nDESCRIPTION: This snippet imports various components and fragments used in the Logto integration guide for React Native. It includes checkpoint tests, implementation guides, and installation instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport GuideTip from './_guide-tip.mdx';\nimport ImplementSignInAndSignOut from './_implement-sign-in-and-sign-out.mdx';\nimport InitClient from './_init-client.mdx';\nimport Installation from './_installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Enterprise SSO Icons in JSX\nDESCRIPTION: Import statements for SVG icons representing different enterprise SSO providers used throughout the Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/enterprise-connectors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MicrosoftEntraId from '@site/docs/connectors/assets/icons/sso-entra-id.svg';\nimport GoogleWorkspace from '@site/docs/connectors/assets/icons/sso-google-workspace.svg';\nimport Oidc from '@site/docs/connectors/assets/icons/sso-oidc.svg';\nimport Okta from '@site/docs/connectors/assets/icons/sso-okta.svg';\nimport Saml from '@site/docs/connectors/assets/icons/sso-saml.svg';\n```\n\n----------------------------------------\n\nTITLE: Importing User Data to Logto using Management API in JavaScript\nDESCRIPTION: A JavaScript script that demonstrates how to import user data to Logto using the Management API. It includes error handling and rate limiting considerations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/user-migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst users = require('./users.json');\n\nconst importUsers = async () => {\n  for (const user of users) {\n    try {\n      await fetch('https://[tenant_id].logto.app/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer [your-access-token]',\n        },\n        body: JSON.stringify(user),\n      });\n      // 暂停一会以避免速率限制\n      await new Promise((resolve) => setTimeout(resolve, 200));\n    } catch (error) {\n      console.error(`Failed to import user ${user.username}: ${error.message}`);\n    }\n  }\n};\n\nimportUsers();\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code exports NextAuth configuration with a custom Logto provider. It sets up authorization parameters including specific scopes and a resource URL for a shopping API.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email shopping:read shopping:write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling Logto API Resources Documentation Components\nDESCRIPTION: This code imports documentation fragments and code snippets related to Logto API resource configuration, then assembles them into a comprehensive documentation component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchAccessTokenForApiResources Component with Props in MDX/JSX\nDESCRIPTION: This snippet uses JSX syntax to render the `FetchAccessTokenForApiResources` component. It passes the string \"getAccessToken\" to the `getAccessTokenApi` prop and renders the imported `GetAccessTokenCode` component as the value for the `getAccessTokenCode` prop. This dynamically configures the displayed documentation section for a specific access token fetching scenario using the provided API name and code example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - User Interaction Hook Events\nDESCRIPTION: Table documenting webhook events triggered by user interactions like registration, sign-in, and password reset.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/events.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Event type        | Description                                                                 |\n| ----------------- | --------------------------------------------------------------------------- |\n| PostRegister      | A user successfully creates a new account via the UI interface.             |\n| PostSignIn        | A user successfully signs in via the UI interface.                          |\n| PostResetPassword | A user's password is successfully reset through the \"Forgot password\" flow. |\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Microsoft Entra ID SAML SSO Guide\nDESCRIPTION: This code renders the imported MDX components, passing necessary props to create the structure of the guide. It includes sections for introduction, application creation, integration, connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (MVC)\" link=\"https://dotnet.microsoft.com/apps/aspnet/mvc\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\".NET Core (MVC)\" />\n\n## Integrate .NET Core (MVC) with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add Microsoft Entra ID SAML enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\".NET Core (MVC)\" />\n\n## Set up Azure AD SSO application \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Microsoft Entra ID SAML enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (MVC)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Commenting on Documentation Layout Constraints in Next.js (Pages Router) - JavaScript\nDESCRIPTION: A block comment explains the rationale for dividing template content into sections, citing limitations of imported MDX content not appearing in the table of contents (TOC) due to a Docusaurus issue. It also references a relevant GitHub issue for further details. The comment provides valuable context for maintainers about TOC customization limitations. No dependencies or inputs are involved; it's purely informational.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n\n```\n\n----------------------------------------\n\nTITLE: 访问额外的用户声明 (Ruby ERB)\nDESCRIPTION: 在视图中访问额外请求的用户声明(Claims)，如电子邮件和电话号码。这些声明是通过之前配置的scopes获取的。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>名稱: <%= @client.id_token_claims[\"name\"] %></p>\n  <p>電子郵件: <%= @client.id_token_claims[\"email\"] %></p>\n  <p>電話: <%= @client.id_token_claims[\"phone\"] %></p>\n<% else %>\n  <p>請登入</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Rendering Gallery Component for Quick Start Guides in JSX\nDESCRIPTION: This code snippet imports and renders a Gallery component to display quick start guides. The Gallery component is passed a 'path' prop with the value 'quick-starts' to specify which guides to show.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Gallery from '@components/Gallery';\n\n<Gallery path=\"quick-starts\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Components in JSX\nDESCRIPTION: This snippet imports a reusable documentation fragment and a code snippet, then renders them using a custom React component to explain how to fetch an access token for API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configure Logto Browser Client with Organizations Scope\nDESCRIPTION: Initializes a new LogtoClient instance with Organizations scope enabled. The client is attached to the window object for global access. Uses ES modules to import the required dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from 'https://esm.run/@logto/browser';\n\nwindow.logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Gallery Component for Integrations in MDX\nDESCRIPTION: A simple MDX code block that imports and renders a Gallery component to display available integrations. The component is configured to show content from the 'integrations' path.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Gallery from '@components/Gallery';\n\n<Gallery path=\"integrations\" />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Naver Sign-in Tutorial\nDESCRIPTION: Imports various MDX fragments that contain instructions for different parts of the Naver sign-in integration process with Android applications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-android-naver.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/android/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/naver/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Organization Token Components in React Native\nDESCRIPTION: This code snippet imports necessary components and configures the organization token fetching documentation fragment. It passes the organization scope and code snippets for configuring organizations and getting access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Custom User Data in Ruby on Rails View\nDESCRIPTION: This snippet demonstrates how to fetch and display custom user data using the fetch_user_info method in a Ruby on Rails view. It shows an example of accessing a custom_data field from the user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>自定义数据: <%= @client.fetch_user_info[\"custom_data\"] %></p>\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information in Next.js API Route Handler\nDESCRIPTION: This snippet shows how to get user information in a Next.js API route handler using the getLogtoContext function. It sets the route as dynamic and returns the claims as JSON.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext } from '@logto/next/server-actions';\nimport { logtoConfig } from '../../logto';\n\nexport const dynamic = 'force-dynamic';\n\nexport async function GET() {\n  const { claims } = await getLogtoContext(logtoConfig);\n\n  return Response.json({ claims });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components and Configurations\nDESCRIPTION: Imports required MDX components and fragment files for documentation structure and sets up connector configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-next-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-oidc/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Logto Express Installation Component\nDESCRIPTION: Import statement and component usage for installing Logto Express integration packages including cookie-parser and express-session dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/express cookie-parser express-session\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components\nDESCRIPTION: Imports multiple MDX fragments and code samples, then renders them using the ConfigApiResources component with the imported code as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected API Route with Logto Authentication in TypeScript\nDESCRIPTION: Creates a Next.js API route handler that verifies user authentication and returns the user's information including their access token. The handler is wrapped with the Logto authentication middleware, configured to request an access token for a specific resource.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute(\n  (request, response) => {\n    if (!request.user.isAuthenticated) {\n      response.status(401).json({ message: 'Unauthorized' });\n\n      return;\n    }\n\n    // ここでアクセス トークンを取得\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  },\n  {\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Syncing Translation Keys to All Languages\nDESCRIPTION: Command to synchronize translation keys from the source language to all supported languages in the phrases package. This maintains consistency across all language files.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/translate-cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm translate sync-keys --target all\n```\n\n----------------------------------------\n\nTITLE: Composing FetchOrganizationTokenForUser with Config and Token Code Components (JSX)\nDESCRIPTION: This React JSX snippet constructs the <FetchOrganizationTokenForUser /> component, injecting both configuration and token access code as props. It passes a defined organizationScope alongside pre-imported components targeting organization-level user scopes for LogtoCore. The primary dependencies are React and the imported MDX/Markdown fragments. The component accepts properties and renders an organization token utility, with expected outputs being the composed UI block.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"LogtoCore::USER_SCOPE[:organizations]\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Assets for Authorization Documentation in JSX\nDESCRIPTION: Imports SVG assets used throughout the authorization documentation page, including RBAC diagram, API icon, organization template icon, JWT icon, and role icon from various source directories.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Rbac from '@site/docs/authorization/assets/rbac.svg';\nimport Api from '@site/src/assets/api.svg';\nimport OrgTemplate from '@site/src/assets/authorization.svg';\nimport Jwt from '@site/src/assets/gear-plus.svg';\nimport Role from '@site/src/assets/role.svg';\n```\n\n----------------------------------------\n\nTITLE: Rendering Installation Fragment for Logto Next.js Package - JavaScript\nDESCRIPTION: This JSX snippet renders the imported NpmLikeInstallation component and passes the packageName '@logto/next' as a prop. It is intended to display installation instructions tailored for the @logto/next package. This component usage pattern requires a React or Next.js environment and assumes the component handles props appropriately to render installation steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<NpmLikeInstallation packageName=\"@logto/next\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources Component with MDX\nDESCRIPTION: Imports and configures documentation components for API resources, including code examples for basic resources, scoped resources, and shared scopes configuration\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering ScopesAndClaims Component with Code Injection in MDX\nDESCRIPTION: Renders the imported `ScopesAndClaims` component. It passes the `ScopesAndClaimsCode` component (which likely contains code examples) as the value for the `configScopesCode` prop. This demonstrates injecting component-based code examples into documentation sections.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Fragments and Components in React (JavaScript)\nDESCRIPTION: This snippet demonstrates importing a React component from another module as well as a Markdown code fragment, commonly used for documentation or code example purposes in a React environment. There are no direct dependencies other than a working JavaScript/React toolchain and access to the imported modules or files. Both import statements are ES6 style and assume the availability of the respective paths; invalid or missing modules will cause runtime or build errors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scope and Claims Documentation Components in JSX\nDESCRIPTION: This code imports two MDX fragments related to scopes and claims documentation and composes them by passing one component as a prop to another. The pattern demonstrates component composition in a documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling API Resource Configuration Documentation in React\nDESCRIPTION: This code imports MDX fragments containing API resource configuration examples and passes them to a ConfigApiResources component. The component displays documentation about configuring API resources with various scope configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Logto API Resource Documentation Components\nDESCRIPTION: MDX code that imports documentation fragments and composes them into a ConfigApiResources component with code examples as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Svelte Component\nDESCRIPTION: This Svelte component snippet shows how to display user information. It iterates over the user object properties and displays them in a list if the user data is available.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n</script>\n\n{#if data.user}\n<ul>\n  {#each Object.entries(data.user) as [key, value]}\n  <li>{key}: {value}</li>\n  {/each}\n</ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: SSOIdentity Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the SSOIdentity object, which contains user information obtained from enterprise single sign-on (SSO).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype SSOIdentity = {\n  issuer: string;\n  identityId: string;\n  detail: JsonObject; // See https://github.com/withtyped/withtyped/blob/master/packages/server/src/types.ts#L12\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Component Rendering in JSX\nDESCRIPTION: Logic to throw an error if props.type is not provided when importing the component. This ensures proper usage of the component that handles claims requiring network requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/fragments/_claims-need-network-request.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{props.type ? null : (() => {throw new Error(`props.type is required when importing _claims-need-network-request.mdx`)})()}\n```\n\n----------------------------------------\n\nTITLE: Importing React Theme Components\nDESCRIPTION: Imports required theme components TabItem and Tabs from the theme package for creating tabbed interface.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TabItem from '@theme/TabItem';\nimport Tabs from '@theme/Tabs';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto PHP SDK via Composer (Bash)\nDESCRIPTION: This command uses Composer, the PHP dependency manager, to download and install the `logto/sdk` package into the current project. It adds the SDK as a dependency in the project's `composer.json` file and installs the necessary files into the `vendor` directory. Requires Composer to be installed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require logto/sdk\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Capacitor Authentication Scopes in TypeScript\nDESCRIPTION: This snippet imports the LogtoConfig type and UserScope enum from the '@logto/capacitor' package and creates a configuration object specifying scopes for authentication. The 'scopes' property is set to an array that includes UserScope.Organizations, indicating that organizational permissions are required. Dependencies: '@logto/capacitor' package must be installed. Input is the configuration object; there is no direct output as this code is primarily for configuring Logto authentication within a Capacitor application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It demonstrates how to structure and compose documentation for API resource configuration in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In and Callback Routes in Express\nDESCRIPTION: Implementing routes for initiating the sign-in process and handling the authentication callback in an Express application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getSignInUrl } = require('./logto');\n\napp.get('/sign-in', async (req, res) => {\n  const { redirectUri, codeVerifier, state, signInUri } = await getSignInUrl();\n  req.session.signIn = { codeVerifier, state, redirectUri };\n  res.redirect(signInUri);\n});\n\napp.get('/callback', async (req, res) => {\n  if (!req.session.signIn) {\n    res.send('Bad request.');\n    return;\n  }\n\n  const response = await handleSignIn(\n    req.session.signIn,\n    `${req.protocol}://${req.get('host')}${req.originalUrl}`\n  );\n  req.session.tokens = {\n    ...response,\n    expiresAt: response.expiresIn + Date.now(),\n    idToken: decodeIdToken(response.idToken),\n  };\n  req.session.signIn = null;\n\n  res.redirect('/');\n});\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow Sequence Diagram with Mermaid\nDESCRIPTION: A sequence diagram illustrating the authentication flow between Client, Logto, and API. Shows the process of request authentication, token request, and API request validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    Note over Client,API: 1. Authentifizierungsanfrage\n    Client->>Logto: GET /oidc/auth\n    Note right of Client: mit resource=https://resource-server.com/api<br/>und optional scope=read write\n    Logto-->>Client: Gibt authorization_code zurück\n\n    Note over Client,API: 2. Token-Anfrage\n    Client->>Logto: POST /oidc/token\n    Note right of Client: mit authorization_code<br/>resource=https://resource-server.com/api<br/>und optional scope=read write\n    Logto-->>Client: Gibt JWT Zugangstoken zurück\n    Note left of Logto: Token enthält:<br/>- Zielgruppe auf Ressource beschränkt<br/>- Gewährte Berechtigungen (falls vorhanden)\n\n    Note over Client,API: 3. API-Anfrage\n    Client->>API: Anfrage mit Bearer-Token\n    Note over API: JWT-Token validieren:\n    Note over API: - Signatur überprüfen<br/>- Aussteller verifizieren<br/>- Zielgruppe überprüfen<br/>- Ablaufdatum verifizieren<br/>- Berechtigungen überprüfen (wenn RBAC aktiviert)\n    alt Token gültig\n        API-->>Client: Geschützte Ressource\n    else Token ungültig\n        API-->>Client: 401 Nicht autorisiert\n    end\n```\n\n----------------------------------------\n\nTITLE: JSX-based Documentation Page Structure for Logto Integration (TSX)\nDESCRIPTION: This snippet showcases the use of JSX/MDX syntax to structure a documentation page for integrating the Naver social connector with Go and Logto. It includes references to imported fragments and customizes them using props for reuse across different sections, such as application creation, connector setup, and validation. This pattern requires an MDX-compatible documentation generator and demonstrates modular, composable documentation construction. Main input is the connector and framework props, output is a rendered documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-naver.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Intro connector={connector} sdk=\"Go\" link=\"https://go.dev\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\"Go\" />\n\n## Integrate Go with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add Naver connector \\{#add-connector-connector}\n\n<AddSocialConnector connector={connector} framework=\"Go\" />\n\n## Set up Naver login \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Naver connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSocialConnector connector={connector} />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"Go\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Full Backup Content\nDESCRIPTION: Adds a reference to a backup rules XML file in the AndroidManifest.xml, allowing for more granular control over what gets backed up.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_dependency.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<application ...\n  android:fullBackupContent=\"@xml/backup_rules\">\n</application>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Fetching in React\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring and fetching organization tokens in a Logto application. It includes imports for configuration code and access token retrieval code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Defining Backup Rules for Android\nDESCRIPTION: Creates a backup_rules.xml file to exclude the FlutterSecureStorage from being backed up, ensuring sensitive data is not inadvertently stored.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_dependency.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<full-backup-content>\n  <exclude domain=\"sharedpref\" path=\"FlutterSecureStorage\"/>\n</full-backup-content>\n```\n\n----------------------------------------\n\nTITLE: Updating Current User in Custom Authentication Flow\nDESCRIPTION: Implements a method to update the current authenticated user. It creates a FlutterFlowAuthAuthUser instance with login status, user ID, and ID token, then broadcasts this updated user to subscribers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n  FlutterFlowAuthAuthUser? _updateCurrentUser(\n      {bool loggedIn = false, String? uid, OpenIdClaims? idToken}) {\n    // 現在のユーザーストリームを更新します。\n    final updatedUser = FlutterFlowAuthAuthUser(\n      loggedIn: loggedIn,\n      uid: uid,\n      idToken: idToken,\n    );\n\n    flutterFlowAuthAuthUserSubject.add(updatedUser);\n\n    return updatedUser;\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It demonstrates how to set up API resource configuration documentation in a React-based documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Component using JavaScript Module Syntax\nDESCRIPTION: This JavaScript import statement is used within an MDX file to import a component named `GetAccessTokenCode` from a relative file path `./code/_get-access-token-code.mdx`. This makes the component available for use within the current file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ConfigApiResources Component in JSX\nDESCRIPTION: This code imports snippets for API resource configuration and passes them to the ConfigApiResources component. The component is used to display documentation about configuring API resources with different scope settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Connector Variable for Naver Integration\nDESCRIPTION: Exports a constant that defines the connector name as 'Naver' to be used throughout the document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-android-naver.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Naver';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to asynchronously fetch an organization token using the Logto client. It requires an initialized logtoClient instance and an organizationId parameter. The function returns a promise that resolves to the organization token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Removing Connectors with Logto CLI\nDESCRIPTION: Use this command to remove specified connectors from your Logto instance. Remember to restart your Logto instance after making changes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlogto connector remove connector-service-a @org/connector-service-b\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli connector remove connector-service-a @org/connector-service-b\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli connector remove connector-service-a @org/connector-service-b\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NpmLikeInstallation Component for Logto Express\nDESCRIPTION: This snippet imports a custom component called NpmLikeInstallation and uses it to display installation instructions for the Logto Express package and its dependencies. The component is likely used across multiple pages to maintain consistency in installation instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/express cookie-parser express-session\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Information in JSX Comment\nDESCRIPTION: JSX comment explaining that prettier formatting affects React components by breaking lines into pieces, making content harder to read. The comment is used to disable prettier formatting for a section of the code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/fragments/_intro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* `prettier` formats the react components and breaks lines into pieces which makes the content ugly and hard to read. */}\n{/* eslint-disable prettier/prettier */}\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Fragment with Embedded Code Example (JSX)\nDESCRIPTION: This JSX snippet demonstrates rendering the FetchAccessTokenForApiResources component, passing two props: getAccessTokenApi, a string representing the API method, and getAccessTokenCode, which embeds a React component displaying access token retrieval code. The embedded component pattern allows for code samples to be dynamically injected into documentation fragments. Dependencies include React and compatible MDX/MD file loaders. Input props customize the rendered output; output is a composed documentation UI element.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token in Nuxt API Route with Logto\nDESCRIPTION: This code snippet demonstrates how to use the logtoEventHandler function in a Nuxt API route to retrieve an access token from Logto. It defines an event handler that uses the Logto client from the event context to get the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoEventHandler } from '@logto/nuxt';\n\nexport default defineEventHandler(async (event) => {\n  const config = useRuntimeConfig(event);\n  await logtoEventHandler(event, config);\n  const accessToken = await event.context.logtoClient.getAccessToken();\n  return { accessToken };\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FetchAccessTokenForApiResources Component in JSX\nDESCRIPTION: This snippet imports a reusable component for fetching an access token and a code snippet for getting the access token. It then renders the FetchAccessTokenForApiResources component with specific props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - B2C Identity System User Goals and Tools\nDESCRIPTION: A markdown table mapping different user types (developers and end users) to their goals and the corresponding Logto products and APIs they can use to achieve those goals.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/introduction/plan-your-architecture/b2c.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Users              | Goal                                                                                        | Logto products and APIs                                                                                                                                          |\n| ------------------ | ------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Developers         | Manage and safeguard the user identity system and work directly with the identity database. | <ul><li>[Logto Console](https://cloud.logto.io)</li><li>[Logto Management API](https://openapi.logto.io/)</li></ul>                                              |\n| End user/Consumers | [Manage their own authentication and personal information.](/end-user-flows)                | <ul><li>[Logto Management API](https://openapi.logto.io/)</li><li>[Account API](https://openapi.logto.io/operation/operation-getaccountcentersettings)</li></ul> |\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Next.js Component\nDESCRIPTION: Example of accessing additional user claims (like email) in a Next.js component after configuring extended scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst Home = () => {\n  const { data } = useSWR<LogtoContext>('/api/logto/user');\n\n  const email = data?.claims?.email;\n\n  return (\n    <div>\n      {email && <p>Email: {email}</p>}\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes Documentation Components in MDX\nDESCRIPTION: Imports documentation components for scopes and claims from other files and renders them with configScopesCode prop. Uses MDX syntax to combine markdown with JSX components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Sections with JavaScript and MDX for Next.js Integration\nDESCRIPTION: This snippet imports multiple MDX fragments and guide components that represent documentation sections for setting up Discord sign-in with Logto and Next.js. Dependencies include MDX support in your Docusaurus setup and access to specified local and package paths. Each import corresponds to a modular content block, allowing reusability and clear organization of the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-discord.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/next/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/discord/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Config API Resources in React - JavaScript\nDESCRIPTION: This snippet demonstrates the importation of configuration resource fragments and associated code samples as React components and modules. It integrates these imports into the main React component, passing them as props to the ConfigApiResources component for dynamic rendering. Dependencies include React, MDX parsing support, and the defined component fragments, with the main input being the imported code modules which are rendered as children; the output is a composite UI for documentation purposes, requiring a compatible build environment that can handle .mdx and .md imports.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant in JavaScript\nDESCRIPTION: Exports a constant named 'connector' with the string value 'Line'. This constant is likely used within the MDX file or imported components (like Intro, AddSocialConnector, etc.) to dynamically refer to the specific social connector being documented, which is Line in this tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-line.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Line';\n```\n\n----------------------------------------\n\nTITLE: Using ConfigApiResources Component in MDX\nDESCRIPTION: Demonstrates the usage of the `ConfigApiResources` MDX component. It renders documentation sections related to API resource configuration by accepting other components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) as props. These props are expected to render the actual code examples for different configuration scenarios. Requires the successful import of all mentioned components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto JS SDK and Angular OIDC with pnpm\nDESCRIPTION: Command to install @logto/js and angular-auth-oidc-client packages using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/js angular-auth-oidc-client\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoExpressConfig with Organization Scopes in TypeScript\nDESCRIPTION: A code example showing how to configure a Logto Express application to include organization scopes. The configuration enables the application to access organization-related data and functionality for authenticated users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Example Payload for HTTP Email Connector in JSON\nDESCRIPTION: This snippet demonstrates the structure of the payload sent by the HTTP Email connector when triggering an email. It includes the recipient's email, the email type, and a payload containing variables and localization information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/integrations/email/http-mail/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"to\": \"foo@logto.io\",\n  \"type\": \"SignIn\",\n  \"payload\": {\n    \"code\": \"123456\"\n    \"locale\": \"de\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Fetching in Next.js API Route\nDESCRIPTION: This snippet shows how to enable user info fetching in a Next.js API route handler using the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.handleAuthRoutes({ fetchUserInfo: true });\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Callback in Rails Controller\nDESCRIPTION: Code for handling the authentication callback from Logto in a Rails controller. This processes the redirect after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def callback\n    @client.handle_sign_in_callback(url: request.original_url)\n  end\n  # highlight-end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Callback URL for flutter_web_auth_2 on Android\nDESCRIPTION: Adds an activity to the AndroidManifest.xml file to handle the callback URL from Logto's sign-in web page for flutter_web_auth_2.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_dependency.mdx#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <manifest>\n    <application>\n        <activity\n          android:name=\"com.linusu.flutter_web_auth_2.CallbackActivity\"\n          android:exported=\"true\">\n          <intent-filter android:label=\"flutter_web_auth_2\">\n          <action android:name=\"android.intent.action.VIEW\" />\n          <category android:name=\"android.intent.category.DEFAULT\" />\n          <category android:name=\"android.intent.category.BROWSABLE\" />\n          <data android:scheme=\"YOUR_CALLBACK_URL_SCHEME_HERE\" />\n          </intent-filter>\n        </activity>\n    </application>\n  </manifest>\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Resources and Code Fragments (JavaScript)\nDESCRIPTION: This snippet imports a set of Markdown and MDX files containing configuration API resources and code examples into a React (JavaScript) file. These modules are intended for use as components or props in a documentation UI, ensuring modular and reusable code structure. Dependencies include support for MDX/Markdown imports and a React build pipeline configured to interpret them.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Visualizing 'Sign in with Google' Flow with Mermaid\nDESCRIPTION: This sequence diagram illustrates the process when a user clicks 'Sign in with Google', showing how the user is automatically redirected to Google's sign-in page without interacting with Logto's sign-in page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/sign-in-experience.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant A as Your app\n  participant B as Logto\n  participant C as Google\n\n  Note over A: User clicks<br/>\"Sign in with Google\"\n  A->>B: Redirect with direct sign-in parameters\n  B->>C: Automatically redirect\n  C->C: User finishes sign-in\n  C->>B: Redirect back\n  B->>A: Redirect back\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto in React Native\nDESCRIPTION: Demonstrates how to display user information using the getIdTokenClaims() method in a React Native component. Shows authentication state management and conditional rendering based on authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { Button, Text } from 'react-native';\n\nconst Content = () => {\n  const { getIdTokenClaims, isAuthenticated } = useLogto();\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      getIdTokenClaims().then((claims) => {\n        setUser(claims);\n      });\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div>\n      {isAuthenticated ? (\n        <>\n          <Text>{user?.name}</Text>\n          <Text>{user?.email}</Text>\n          <Button title=\"Sign out\" onPress={async () => signOut()} />\n        </>\n      ) : (\n        <Button title=\"Sign in\" onPress={async () => signIn('io.logto://callback')} />\n      )}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling User Authentication in Next.js API Route\nDESCRIPTION: This code snippet demonstrates how to handle user authentication in a Next.js API route using the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute((request, response) => {\n  if (!request.user.isAuthenticated) {\n    response.status(401).json({ message: 'Unauthorized' });\n\n    return;\n  }\n\n  response.json({\n    data: request.user.claims,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Code and Fragment Components in React (JavaScript)\nDESCRIPTION: These import statements bring in React components and Markdown code fragments from relative module paths. They enable the file to use specialized logic (fetching organization tokens) and configuration code samples. The dependencies are properly resolved by the module bundler/build process, and paths must be correct for successful import. No parameters are required, but the imported modules should exist and be exportable.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Fetching in Logto Express.js SDK Configuration\nDESCRIPTION: This code snippet shows how to enable fetching of user information by setting the 'fetchUserInfo' option to true in the Logto Express.js SDK configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // highlight-next-line\n  fetchUserInfo: true,\n  // ...他の設定\n};\n```\n\n----------------------------------------\n\nTITLE: Exemple de Charge Utile JSON pour le Connecteur HTTP Email\nDESCRIPTION: Exemple de structure JSON envoyée par le connecteur HTTP Email de Logto vers votre point de terminaison. Il contient l'adresse email du destinataire, le type d'usage (ici SignIn) et les données variables nécessaires pour personnaliser le message.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/email/http-mail/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"to\": \"foo@logto.io\",\n  \"type\": \"SignIn\",\n  \"payload\": {\n    \"code\": \"123456\"\n    \"locale\": \"de\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Authentication in User Profile Page UI for Flutter\nDESCRIPTION: Shows how to access current user data and implement the sign-out functionality in the user profile page UI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport '/auth/custom_auth/auth_util.dart';\n\n// ...\n\nchildren: [\n  Text(\n    'User ID: $currentUserUid',\n  ),\n  Text(\n    'Display Name: ${currentUserData?.name}',\n  ),\n  Text(\n    'Username: ${currentUserData?.username}',\n  ),\n  Text(\n    'Email: ${currentUserData?.emailVerified ?? currentUserData?.email}',\n  ),\n]\n\n// ...\n\nFFButtonWidget(\n  onPressed: () async {\n    await authManager.signOut();\n\n    context.replaceNamed('HomePage');\n  },\n  text: 'Sign Out',\n  // ...\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in React\nDESCRIPTION: This code snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It demonstrates how to set up API resource configuration examples in the Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for Okta Enterprise SSO\nDESCRIPTION: This code snippet defines a constant 'connector' with the value 'Okta enterprise SSO'. This variable is used throughout the document to refer to the specific SSO connector being integrated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Pulling Logto Docker Image\nDESCRIPTION: Commands to pull the Logto Docker image from either GitHub Container Registry or DockerHub.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr\ndocker pull ghcr.io/logto-io/logto:latest\n# DockerHub\ndocker pull svhd/logto:latest\n```\n\n----------------------------------------\n\nTITLE: Solicitud de autenticación con parámetros de recurso y alcance\nDESCRIPTION: Ejemplo de una solicitud GET para iniciar el flujo de autenticación OAuth 2.0, incluyendo parámetros para especificar recursos y alcances.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET https://tenant-id.logto.app/oidc/auth?response_type=code\n    &client_id=s6BhdRkqt3\n    &state=tNwzQ87pC6llebpmac_IDeeq-mCR2wLDYljHUZUAWuI\n    &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n    &resource=https%3A%2F%2Fresource-server.com%2Fapi\n    &scope=read%20write\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet imports necessary components and renders a custom component for fetching access tokens. It uses a reusable fragment and a separate code snippet file to provide comprehensive documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for SSO Integration Guide\nDESCRIPTION: This code imports various MDX fragments to compose a comprehensive guide for SSO integration with Logto. It includes sections for introduction, application creation, connector setup, SDK integration, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/_template-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/${sdkDocDir}/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/${connectorDocDir}/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: AccessToken Type Definition\nDESCRIPTION: Type definition for access token object containing the token string, scope, and expiration timestamp.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/sdk-conventions/platform-sdk-conventions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AccessToken {\n  token: string;\n  scope: string;\n  expiresAt: number; // Timestamp in seconds\n}\n```\n\n----------------------------------------\n\nTITLE: Importing User Data to Logto (JavaScript)\nDESCRIPTION: Script to import user data to Logto using the Management API. It reads user data from a JSON file and sends POST requests to create users, with rate limiting considerations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/user-migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst users = require('./users.json');\n\nconst importUsers = async () => {\n  for (const user of users) {\n    try {\n      await fetch('https://[tenant_id].logto.app/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer [your-access-token]',\n        },\n        body: JSON.stringify(user),\n      });\n      // Dormir un rato para evitar el límite de tasa\n      await new Promise((resolve) => setTimeout(resolve, 200));\n    } catch (error) {\n      console.error(`Error al importar el usuario ${user.username}: ${error.message}`);\n    }\n  }\n};\n\nimportUsers();\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organizations Scope in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new LogtoClient instance with the Organizations user scope. It imports the UserScope from '@logto/next' and configures the client with the necessary scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Component with Auth.js\nDESCRIPTION: This snippet shows how to create a Sign-Out component using Auth.js in a Next.js application. It uses the server action to trigger the sign-out process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signOut } from '@/auth';\n\nexport function SignOut() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signOut();\n      }}\n    >\n      <button type=\"submit\">Sign Out</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting connector variable for use in documentation\nDESCRIPTION: This line defines and exports the connector variable that will be used throughout the documentation to represent the specific authentication connector being integrated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/_template-passwordless.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport const connector = '${connector}';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This code imports necessary components and code snippets, then renders a ConfigApiResources component with the imported code examples as props. It demonstrates how to structure and display API resource configuration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Logto Docker Container\nDESCRIPTION: Command to run the Logto Docker container with the necessary port mappings and environment variables. This completes the Docker setup process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --name logto \\\n  -p 3001:3001 \\\n  -p 3002:3002 \\\n  -e TRUST_PROXY_HEADER=1 \\\n  -e ENDPOINT=https://<your-logto-domain> \\\n  -e ADMIN_ENDPOINT=https://<your-logto-admin-domain> \\\n  -e DB_URL=postgres://username:password@your_postgres_url:port/db_name \\\n  ghcr.io/logto-io/logto:latest\n```\n\n----------------------------------------\n\nTITLE: Example Callback URL for Line Login in Logto\nDESCRIPTION: This example shows a fully formed callback URL for Line login integration with Logto, including a sample domain and placeholder for the connector ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/line/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://foo.logto.app/callback/${connector_id}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Logto Authentication Manager in Dart\nDESCRIPTION: This Dart code defines the `CustomAuthManager` class for handling Logto authentication in a FlutterFlow app. It includes Logto configuration (`logtoConfig`), initializes the `LogtoClient` in the `initialize` method, attempts to fetch the ID token claims on startup, and updates the current user state via the `_updateCurrentUser` helper method and a stream (`flutterFlowAuthAuthUserSubject`). Global variables `currentUser` and `loggedIn` provide access to the authentication state. It depends on `flutter`, `http`, and `logto_dart_sdk` packages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// lib/auth/custom_auth/custom_auth_manager.dart\n\nimport 'dart:async';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:logto_dart_sdk/logto_client.dart';\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nimport 'custom_auth_user_provider.dart';\n\nexport 'custom_auth_manager.dart';\n\n\nclass CustomAuthManager {\n  late LogtoClient logtoClient;\n\n  final logtoConfig = const LogtoConfig(\n      appId: '<YOUR-APP-ID>',\n      endpoint: '<YOUR-LOGTO-ENDPOINT>');\n\n\n  // ...\n\n  FlutterFlowAuthAuthUser? _updateCurrentUser(\n      {bool loggedIn = false, String? uid, OpenIdClaims? idToken}) {\n    // 更新当前用户流。\n    final updatedUser = FlutterFlowAuthAuthUser(\n      loggedIn: loggedIn,\n      uid: uid,\n      idToken: idToken,\n    );\n\n    flutterFlowAuthAuthUserSubject.add(updatedUser);\n\n    return updatedUser;\n  }\n\n  Future initialize() async {\n    logtoClient = LogtoClient(config: logtoConfig, httpClient: http.Client());\n\n    late OpenIdClaims? idToken;\n\n    try {\n      idToken = await logtoClient.idTokenClaims;\n    } catch (e) {\n      if (kDebugMode) {\n        print('初始化认证时出错: $e');\n      }\n    }\n\n    _updateCurrentUser(\n        loggedIn: idToken != null, uid: idToken?.subject, idToken: idToken);\n  }\n}\n\nFlutterFlowAuthAuthUser? currentUser;\nbool get loggedIn => currentUser?.loggedIn ?? false;\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Unpublished Alterations with CLI for Contributors\nDESCRIPTION: Command for contributors to deploy unpublished 'next' alterations from the master branch using Logto CLI. Required for development with latest database changes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/database-alteration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nlogto db alteration deploy next\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders a ConfigApiResources component with the imported code examples as props. It demonstrates how to set up the documentation for API resource configuration in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments - React - JavaScript\nDESCRIPTION: This snippet imports a React MDX fragment component and a Markdown documentation file from specified project-relative paths. It expects that both '../../../fragments/_scopes-and-claims.mdx' and './_scopes-and-claims-code.md' resolve to valid components/files, and requires the build system to support MDX and Markdown imports as React components or modules. This import pattern enables modular reuse of documentation fragments across React projects.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Tabbed Interface\nDESCRIPTION: Imports TabItem and Tabs components from the @theme/TabItem and @theme/Tabs modules respectively. These components are used to create a tabbed interface for displaying installation commands.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TabItem from '@theme/TabItem';\nimport Tabs from '@theme/Tabs';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code snippets as props. It demonstrates how to set up the documentation for API resource configuration in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering User API Documentation Components\nDESCRIPTION: Renders the imported MDX components with specific props to display documentation about user information APIs and scopes/claims functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GetUserInfoApis getIdTokenClaimsApi=\"getIdTokenClaims\" fetchUserInfoApi=\"fetchUserInfo\" />\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This snippet imports two components related to scopes and claims, then renders the main component with the code component passed as a prop. It demonstrates how to compose and customize documentation components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Embedding MDX/JSX Components for Documentation Layout - MDX\nDESCRIPTION: This snippet demonstrates the layout composition for a documentation page using MDX/JSX-like syntax. It sequentially renders previously imported components, passing appropriate props for dynamic content such as connector name and SDK link. Parameters supply context-specific information to instructional fragments. The layout is structured in logical sections aligned with setup steps. Constraints include the necessity that each fragment resolves and renders without runtime errors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-server-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Blazor Server)\" link=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models?view=aspnetcore-9.0#blazor-server\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Application web traditionnelle\" framework=\".Net Core (Blazor Server)\" />\n\n## Integrate .Net Core (Blazor Server) SDK \\{#integrate-framework-sdk}\n\n<IntegrateSdk />\n\n## Add Google Workspace enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\".Net Core (Blazor Server)\" />\n\n## Set up Google Cloud Platform \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Google Workspace enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (Blazor Server)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for Kakao Integration Documentation\nDESCRIPTION: This YAML frontmatter block sets metadata for the Kakao integration documentation page. It defines the URL slug (`/integrations/kakao`), the label displayed in the sidebar (`Kakao`), a Korean description for custom properties, and a configuration name for tutorials (`Kakao login`).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/integrations/social/kakao/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nslug: /integrations/kakao\nsidebar_label: Kakao\nsidebar_custom_props:\n  description: Kakao 是韓國著名的社交網路服務提供商。\ntutorial_config_name: Kakao login\n---\n```\n\n----------------------------------------\n\nTITLE: Composing ConfigApiResources Component with Injected Code Snippets (JSX)\nDESCRIPTION: This code renders the ConfigApiResources React component, passing in two code example components as props. Each code prop is instantiated from an imported Markdown file, intended to display configuration examples with or without scopes in the documentation. Inputs include the previously imported code fragments, and the output is a rendered documentation block contextualized for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Data in JSON for Logto User\nDESCRIPTION: Shows an example of updating custom_data, which will overwrite the original content. This snippet demonstrates adding a new field 'customDataBaz'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-data.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customDataBaz\": {\n    \"baz\": \"baz\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invitation Status Table in Markdown\nDESCRIPTION: Markdown table defining different invitation statuses, their explanations, and available actions for managing tenant invitations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-cloud/tenant-member-management.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Status   | Explanation                            | Available action |\n| -------- | -------------------------------------- | ---------------- |\n| Pending  | Invitation sent, but not yet accepted. | Resend           |\n| Accepted | User is now a tenant member.           | Delete           |\n| Expired  | Invitation exceeded the 7-day limit.   | Delete           |\n| Revoked  | Admin cancelled the invitation.        | Delete           |\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM Installation Fragment for Logto React SDK\nDESCRIPTION: This code imports a reusable MDX fragment component for NPM-like installation instructions and renders it with the @logto/react package name as a parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/react\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Home Page HTML Template with Logto Login Link\nDESCRIPTION: A simple HTML template for the home page that includes a link to trigger the OAuth2 authentication flow with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <h1>Bem-vindo!</h1>\n\n  <p><a th:href=\"@{/oauth2/authorization/logto}\">Login com Logto</a></p>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Logto Docker Container\nDESCRIPTION: YAML configuration showing required environment variables for the Logto Docker container.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nTRUST_PROXY_HEADER: 1 # Logto の前に HTTPS プロキシ (例：Nginx) がある場合は 1 に設定\nENDPOINT: https://<your-logto-domain> # (オプション) カスタムドメインを使用している場合は Logto エンドポイント URL に置き換え\nADMIN_ENDPOINT: https://<your-logto-admin-domain> # (オプション) カスタムドメインを使用している場合は Logto 管理 URL に置き換え\nDB_URL: postgres://username:password@your_postgres_url:port/db_name # Postgres DSN に置き換え\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated API Request with curl\nDESCRIPTION: This curl command demonstrates how to make an authenticated request to a protected API using an access token in the Authorization header.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --include 'http://localhost:3000/api/profile' --header 'Authorization: Bearer <your-access-token>'\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Config API Resource Components in React - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to import various React components and Markdown documentation/code files related to API configuration resources, then renders a composite ConfigApiResources component. All resources and corresponding code sample components are passed as props, enabling flexible configuration and rendering of documentation pages. Requires React and MDX/Markdown loader support; expects resources to be in specified relative directories.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering NpmLikeInstallation Component in MDX/React\nDESCRIPTION: This snippet renders the previously imported `NpmLikeInstallation` component within an MDX file. It passes the package names \"passport passport-openidconnect\" as a string to the `packageName` prop, instructing the component to display the appropriate installation commands (e.g., `npm install passport passport-openidconnect`) for these Node.js packages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<NpmLikeInstallation packageName=\"passport passport-openidconnect\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with API Resources in Dart\nDESCRIPTION: This code initializes a LogtoConfig object with the required endpoint and appId parameters, along with an array of API resource URLs that the application needs to access. The resources are highlighted to emphasize their importance in the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // Ajoutez vos ressources API\n  // highlight-start\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling API Resources Configuration Documentation in JSX\nDESCRIPTION: This JSX code imports documentation fragments and code examples, then passes them to a ConfigApiResources component to assemble the complete documentation about configuring API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with pnpm\nDESCRIPTION: Provides the command to install the @logto/chrome-extension package using pnpm (Performant npm) package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Logto API Resources in JSX\nDESCRIPTION: This code snippet imports configuration fragments and code examples, then uses them as props in the ConfigApiResources component. It demonstrates how to organize and display API resource configuration examples with different scoping options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in MDX\nDESCRIPTION: This snippet shows JavaScript import statements used within an MDX file to include external Markdown or MDX content fragments. This pattern allows modular documentation by composing pages from reusable parts.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiResourcesDescription from '../../../fragments/_api-resources-description.md';\n\nimport ConfigApiResources from './_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from './_fetch-access-token-for-api-resources.mdx';\nimport FetchOrganizationTokenForUser from './_fetch-organization-token-for-user.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining WXEntryActivity in Java for Logto/WeChat\nDESCRIPTION: This Java code defines the required `WXEntryActivity` class within the `wxapi` package (relative to the application's root package). It extends `Logto`'s `WechatSocialResultActivity`, which handles the callback from the WeChat app after the user completes the login process. This specific structure and naming are mandated by the WeChat SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// WXEntryActivity.java\npackage com.sample.app.wxapi\n\nimport io.logto.sdk.android.auth.social.wechat.WechatSocialResultActivity\n\npublic class WXEntryActivity extends WechatSocialResultActivity {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ConfigApiResources Component (MDX)\nDESCRIPTION: This MDX snippet imports a reusable documentation fragment (`_config-api-resources.mdx`) and several code example components from separate Markdown files. It then instantiates the `ConfigApiResources` component, passing the imported code examples as props (`configResourcesCode`, `configResourcesWithScopesCode`, `configResourcesWithSharedScopesCode`). This pattern allows for modular documentation structure where content and code are managed separately and composed together.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using NpmLikeInstallation Component for @logto/react in MDX\nDESCRIPTION: This JSX code, embedded within an MDX file, renders the previously imported `NpmLikeInstallation` component. It configures the component by passing the `packageName` prop with the value `@logto/react`, directing it to display the appropriate installation commands (e.g., npm install, yarn add) for the Logto React SDK package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NpmLikeInstallation packageName=\"@logto/react\" />\n```\n\n----------------------------------------\n\nTITLE: Structuring Logto Integration Guide in React JSX\nDESCRIPTION: This snippet demonstrates the overall structure of the Logto integration guide using React components and imported fragments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### LogtoClient initialisieren \\{#init-logtoclient}\n\n<InitClient />\n\n<ImplementSignInAndSignOut />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: MDX Component Imports and Configuration\nDESCRIPTION: Imports various MDX components and fragments for the tutorial structure, including application setup, social connector configuration, and framework-specific guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-amazon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/swift/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/amazon/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Amazon';\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Organization Token Retrieval in Next.js\nDESCRIPTION: This client-side component provides a button that, when clicked, triggers the organization token retrieval and logs the result to the console. It uses a prop function to handle the actual token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetOrganizationToken: () => Promise<string>;\n};\n\nconst GetOrganizationToken = ({ onGetOrganizationToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetOrganizationToken();\n        console.log(token);\n      }}\n    >\n      Organisationstoken abrufen (siehe Konsolenprotokoll)\n    </button>\n  );\n};\n\nexport default GetOrganizationToken;\n```\n\n----------------------------------------\n\nTITLE: Implementing request Function for API Calls in Aliyun Direct Mail Connector\nDESCRIPTION: This function handles the API request to Aliyun Direct Mail service. It prepares the request parameters, generates the signature, and sends a POST request with the required headers and payload.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/develop-your-connector/implement-connectors.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = async (\n  url: string,\n  parameters: PublicParameters & Record<string, string>,\n  accessKeySecret: string\n) => {\n  const finalParameters: Record<string, string> = {\n    ...parameters,\n    SignatureNonce: String(Math.random()),\n    Timestamp: new Date().toISOString(),\n  };\n  const signature = getSignature(finalParameters, accessKeySecret, 'POST');\n\n  const payload = new URLSearchParams();\n\n  for (const [key, value] of Object.entries(finalParameters)) {\n    payload.append(key, value);\n  }\n  payload.append('Signature', signature);\n\n  return got.post({\n    url,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    form: payload,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with npm\nDESCRIPTION: Command to install the Logto Vue integration library using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Prerequisites Section with JSX\nDESCRIPTION: A JSX section listing the prerequisites needed for implementing Logto authentication with a specific connector and SDK. It includes requirements for a running Logto instance, knowledge of the SDK, and a usable connector account.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/fragments/_intro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n**Prerequisites**\n\n- A running Logto instance. Check out the [introduction page](/introduction) to get started.\n- Basic knowledge of <a href={props.link} target=\"_blank\" rel=\"noopener\">{props.sdk}</a>.\n- A usable {props.connector} account.\n{/* eslint-enable prettier/prettier */}\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet renders a component that explains how to fetch an access token for API resources. It imports a reusable component and a code snippet, then combines them to provide comprehensive documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant - JavaScript\nDESCRIPTION: Defines and exports a constant named 'connector' with the value 'Google Workspace enterprise SSO'. This value is used as a React prop for MDX components to provide page context. There are no parameters. The output is the availability of the connector string to the rest of the file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-ios-swift-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Enabling Account API using Management API (Bash)\nDESCRIPTION: This snippet demonstrates how to enable the Account API and customize fields using the Management API. It sends a PATCH request to update the account center settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-account-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH https://[tenant-id].logto.app/api/account-center \\\n  -H 'authorization: Bearer <access_token for Logto Management API>' \\\n  -H 'content-type: application/json' \\\n  --data-raw '{\"enabled\":true,\"fields\":{\"username\":\"Edit\"}}'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM-like Installation Component in JSX\nDESCRIPTION: This snippet imports a reusable component for npm-like package installation and uses it to display installation instructions for Passport and OpenID Connect packages. The component takes a 'packageName' prop to specify which packages to install.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"passport passport-openidconnect\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Testing and Validation Component for WordPress Plugin\nDESCRIPTION: Renders the TestingAndValidation component with Hugging Face connector and WordPress plugin parameters, providing instructions for testing the implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-hugging-face.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\"WordPress plugin\" />\n```\n\n----------------------------------------\n\nTITLE: Création de WXEntryActivity pour WeChat en Java\nDESCRIPTION: Implémentation de WXEntryActivity en Java nécessaire pour recevoir les résultats de l'authentification WeChat dans une application Android.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// WXEntryActivity.java\npackage com.sample.app.wxapi\n\nimport io.logto.sdk.android.auth.social.wechat.WechatSocialResultActivity\n\npublic class WXEntryActivity extends WechatSocialResultActivity {}\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in MDX (JavaScript)\nDESCRIPTION: Exports a JavaScript constant named 'connector' with the value 'SendGrid'. This constant is likely used by other components within the MDX document to refer to the SendGrid connector dynamically.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-sendgrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SendGrid';\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering FetchAccessTokenForApiResources in MDX\nDESCRIPTION: This MDX code renders the `FetchAccessTokenForApiResources` component, configuring it for documenting the `getAccessToken` API method. It dynamically injects code examples by passing the imported `GetAccessTokenCode` content to the `getAccessTokenCode` prop. Requires the `FetchAccessTokenForApiResources` and `GetAccessTokenCode` components/content to be imported correctly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing ScopesAndClaimsCode Component in MDX\nDESCRIPTION: This statement imports the `ScopesAndClaimsCode` MDX component from the local file `./_scopes-and-claims-code.mdx`. This component probably contains or renders code examples related to configuring scopes and claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Linking Local Connectors in Logto\nDESCRIPTION: Commands to link prebuilt connectors from the Logto packages/connectors directory to the core service. This is useful when adding new local connectors or updating existing ones.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlogto connector link\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli connector link\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli connector link\n```\n\n----------------------------------------\n\nTITLE: Registering Callback URL in Android Manifest for Logto Flutter SDK\nDESCRIPTION: This XML snippet shows how to register the callback URL in the AndroidManifest.xml file to capture the callback URL from Logto's login web page. It sets up an intent filter for the CallbackActivity provided by flutter_web_auth.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-web-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<activity android:name=\"com.linusu.flutter_web_auth.CallbackActivity\" android:exported=\"true\">\n    <intent-filter android:label=\"flutter_web_auth\">\n        <action android:name=\"android.intent.action.VIEW\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <category android:name=\"android.intent.category.BROWSABLE\"/>\n        <data android:scheme=\"io.logto\"/>\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources Component with Injected Code Examples in React (JSX)\nDESCRIPTION: This snippet renders the ConfigApiResources component and injects three code example components as props. Each prop passes a JSX element that wraps a Markdown-based code snippet representing different aspects of configuration resource usage. Inputs are expected to be pre-imported MD or MDX modules; outputs are the rendered composite UI. The parent component is responsible for appropriately rendering or formatting these children. Requires React and a project environment supporting MDX/MD imports as JSX components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Generic Developer Feature Cards with DocCardList in MDX\nDESCRIPTION: This MDX code block uses DocCardList to create a navigation section for generic developer features. It displays cards for signing keys, webhooks, audit logs, and SDK convention, each with descriptive text and an icon.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Signing keys',\n      href: '/developers/signing-keys',\n      description: 'Provide system-level signing key, through the password vault, makes the auth service more secure.',\n      customProps: {\n        icon: <Key />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Webhooks',\n      href: '/developers/webhooks',\n      description: 'Webhooks support real-time notifications regarding user information and permission updates through HTTP requests, enhance the convenience and flexibility of Logto integration.',\n      customProps: {\n        icon: <Webhook />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Audit logs',\n      href: '/developers/audit-logs',\n      description: 'Record user authentication-related activities to facilitate debugging and analysis of user activities.',\n      customProps: {\n        icon: <AuditLog />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'SDK convention',\n      href: '/developers/',\n      description: 'Introduce the data structures, purposes, and methods in the SDK, allowing users to customize the SDK to fit various business scenarios.',\n      customProps: {\n        icon: <Settings />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with Yarn\nDESCRIPTION: This command installs the @logto/chrome-extension package using Yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for React SSO Tutorial\nDESCRIPTION: Imports various MDX components and fragments needed to build the complete tutorial documentation. The imports include setup instructions, configuration steps, and integration guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-react-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exporting Google Connector Name in JavaScript/MDX\nDESCRIPTION: This snippet exports a constant JavaScript variable named `connector` with the string value 'Google'. This variable is likely used within the MDX file or imported components to dynamically specify the social connector being configured, ensuring consistency throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-google.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Google';\n```\n\n----------------------------------------\n\nTITLE: Registering Logto Module in Nuxt Configuration\nDESCRIPTION: This snippet shows how to register and configure the Logto module in the Nuxt configuration file. It includes setting up the endpoint, app ID, app secret, and cookie encryption key.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // highlight-start\n  modules: ['@logto/nuxt'],\n  runtimeConfig: {\n    logto: {\n      endpoint: '<your-logto-endpoint>',\n      appId: '<your-logto-app-id>',\n      appSecret: '<your-logto-app-secret>',\n      cookieEncryptionKey: '<a-random-string>',\n    },\n  },\n  // highlight-end\n  // ...otras configuraciones\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding MDX and JavaScript Variables in Documentation Flow - MDX\nDESCRIPTION: This snippet demonstrates embedding imported MDX components and exported variables within a Markdown-based documentation file. It intersperses regular markdown headings and comment blocks with dynamic component usage for modularity and dynamic rendering. This approach requires Docusaurus with MDX support, and these components receive props such as 'connector', 'sdk', and 'framework' for contextual customization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n\n{/* truncate */}\n\n<Intro connector={connector} sdk=\"Flutter\" link=\"https://flutter.dev\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Native app\" framework=\"Flutter\" />\n\n## Integrate Flutter SDK \\{#integrate-framework-sdk}\n\n<IntegrateSdk />\n\n## Add Microsoft Entra ID SAML enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\"Flutter\" />\n\n## Set up Application SSO Azure AD \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Microsoft Entra ID SAML enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"Flutter\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Organizations Scope in React Native (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a `LogtoConfig` object for the Logto React Native SDK. It imports `LogtoConfig` and `UserScope` from `@logto/rn` and includes `UserScope.Organizations` in the `scopes` array, which is necessary for enabling organization features within the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"App.tsx\"\nimport { LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  // ...outras configurações\n  scopes: [UserScope.Organizations],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoProvider in React Application\nDESCRIPTION: This snippet shows how to import LogtoProvider from @logto/react, define a configuration object with endpoint and appId, and wrap your application with the provider. This setup establishes the authentication context for all child components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_init-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  endpoint: '<your-logto-endpoint>', // E.g. http://localhost:3001\n  appId: '<your-application-id>',\n};\n\nconst App = () => (\n  <LogtoProvider config={config}>\n    <YourAppContent />\n  </LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication in ASP.NET Core - C#\nDESCRIPTION: This snippet demonstrates how to configure Logto authentication by registering it in the dependency injection container via the AddLogtoAuthentication extension method in an ASP.NET Core application's startup configuration. The highlighted section sets the protected API resource (options.Resource) and specifies the OAuth scopes (options.Scopes) required for API access. Dependencies include the Logto SDK for ASP.NET Core. The setup ensures proper audience targeting and permission granularity for endpoints. Inputs include the API resource URI and a list of required scopes; the output is an authentication middleware pipeline configured for these parameters. This configuration must be placed within the Program.cs or Startup.cs file in the service registration section.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-start\n  options.Resource = \"https://shopping.your-app.com/api\";\n  options.Scopes = new string[] {\n    \"openid\",\n    \"profile\",\n    \"offline_access\",\n    \"read\",\n    \"write\"\n  };\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant (JavaScript in MDX)\nDESCRIPTION: This JavaScript code snippet, embedded within an MDX file, exports a constant named 'connector' with the string value 'Okta enterprise SSO'. This constant is likely intended for use within the MDX file or imported components to dynamically reference the specific SSO connector being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Listing Connectors in Logto\nDESCRIPTION: Example output showing the result of running the connector list command. The output separates official Logto connectors from third-party ones.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOFFICIAL\n  @logto/connector-alipay-native\n  @logto/connector-aliyun-dm\n  @logto/connector-aliyun-sms\n  @logto/connector-apple\n  @logto/connector-azuread\n\n3RD-PARTY\n  connector-some-third-party\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments and Setting Up Constants - JavaScript\nDESCRIPTION: This snippet initializes and imports all MDX content fragments that structure the documentation into logical sections (introduction, application setup, SSO configuration, etc.), plus supporting guides. It also defines the main connector constant to be used throughout the page. Dependencies include Docusaurus MDX integration and local/remote MDX files. Key variables include the 'connector' constant and each imported fragment. Inputs are static or metadata props, and outputs are the rendered documentation sections. This entry is foundational for modularizing the guide and maintaining consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Base URL in JavaScript\nDESCRIPTION: This snippet exports a constant variable 'defaultBaseUrl' with the value 'http://localhost:3000/'. This URL is likely used as a reference point for local development or testing environments in the Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_web-assuming-url.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const defaultBaseUrl = 'http://localhost:3000/';\n```\n\n----------------------------------------\n\nTITLE: Importing GetUserInfoApis Component in MDX\nDESCRIPTION: This line imports the `GetUserInfoApis` MDX component from a relative path (`../../fragments/_get-user-info-apis.mdx`). This component is likely responsible for rendering documentation related to user information retrieval APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport GetUserInfoApis from '../../fragments/_get-user-info-apis.mdx';\n```\n\n----------------------------------------\n\nTITLE: Starting Logto with Docker Compose\nDESCRIPTION: Curl command to download docker-compose.yml and start Logto using Docker Compose. Not recommended for production use due to embedded Postgres database.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/logto-io/logto/HEAD/docker-compose.yml | docker compose -p logto -f - up\n```\n\n----------------------------------------\n\nTITLE: Rendering Add Social Connector Component in MDX\nDESCRIPTION: This MDX/JSX snippet renders the `AddSocialConnector` component, likely defined in `./fragments/_add-social-connector.mdx`. It passes the `connector` variable ('GitHub') and `framework` 'Laravel' as props to provide specific instructions for adding the GitHub social connector within the Logto console for a Laravel application setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-github.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<AddSocialConnector connector={connector} framework=\"Laravel\" />\n```\n\n----------------------------------------\n\nTITLE: Importing ScopesAndClaimsCode Component in MDX (JavaScript)\nDESCRIPTION: This JavaScript import statement retrieves the `ScopesAndClaimsCode` React component from a local Markdown file (`.md`). This component is designed to encapsulate and provide code examples specifically related to configuring scopes and claims. It will likely be passed as a prop to another component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NpmLikeInstallation Component in MDX\nDESCRIPTION: This snippet first imports the `NpmLikeInstallation` component from a relative path within the project structure. It then utilizes this component, passing the specific package names (`@logto/express`, `cookie-parser`, `express-session`) as the `packageName` prop. This component is designed to render a formatted command (e.g., `npm install ...`) for installing these dependencies, which are required for setting up Logto authentication in an Express.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/express cookie-parser express-session\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Logto API Resource Documentation Components\nDESCRIPTION: This snippet imports necessary documentation fragments and assembles them into a ConfigApiResources component. It includes code examples for different resource configuration scenarios.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable in MDX (JavaScript)\nDESCRIPTION: This JavaScript code snippet, used within an MDX file, defines and exports a constant named `connector` with the string value 'Kakao'. This variable is likely used to pass the connector name dynamically to imported reusable MDX components throughout the tutorial, ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-kakao.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Kakao';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Documentation Assembly\nDESCRIPTION: Imports the reusable `FetchAccessTokenForApiResources` MDX component and the `GetAccessTokenCode` content (likely containing code examples) from other files. This facilitates modular documentation construction within an MDX environment. Dependencies include the existence of the specified fragment and code files at the relative paths.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Fetching Documentation using MDX Component\nDESCRIPTION: Renders the imported `FetchAccessTokenForApiResources` MDX component. It configures the component by passing the string \"GetAccessToken\" to the `getAccessTokenApi` prop and the imported `GetAccessTokenCode` component instance to the `getAccessTokenCode` prop, dynamically generating a section about fetching access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Content for Scopes/Claims in MDX/JavaScript\nDESCRIPTION: This snippet imports the `ScopesAndClaims` React component from a shared fragments directory and the `ScopesAndClaimsCode` content (likely markdown containing code examples) from a local file. These imports are necessary prerequisites for rendering the documentation section dynamically.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n```\n\n----------------------------------------\n\nTITLE: Enabling User Info Fetching in Logto Configuration\nDESCRIPTION: This configuration enables fetching additional user information by setting the fetchUserInfo option to true. This is necessary when requesting custom data that requires a network request to the userinfo endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  logto: {\n    scopes: [UserScope.CustomData],\n    // highlight-next-line\n    fetchUserInfo: true,\n  },\n  // ...その他の設定\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Multi-method Authentication with Mermaid\nDESCRIPTION: This Mermaid diagram demonstrates the flexibility of Logto's authentication process, showing multiple sign-in methods like Email, Google, and Facebook without changing the app's implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/sign-in-experience.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A(<b>Your app</b>) -->|1. Invoke sign-in| B(\"<b>Logto</b>\\nEmail\\nGoogle\\nFacebook\")\n    B -->|2. Finish sign-in| A\n```\n\n----------------------------------------\n\nTITLE: Rendering Npm-Like Installation Component in SvelteKit Documentation with JSX\nDESCRIPTION: This snippet demonstrates rendering the imported NpmLikeInstallation component inside a JSX/MDX file and passing the packageName prop set to @logto/sveltekit. It depends on the exported component from the previous import and requires a supporting MDX environment. The prop allows the UI to display installation steps for the specified npm package. No external outputs aside from the rendered UI; requires @logto/sveltekit as the target package name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NpmLikeInstallation packageName=\"@logto/sveltekit\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Logto Environment Variables\nDESCRIPTION: YAML configuration showing the required environment variables for running Logto in a Docker container, including proxy settings, endpoints, and database connection.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nTRUST_PROXY_HEADER: 1 # Set to 1 if you have an HTTPS proxy (e.g. Nginx) in front of Logto\nENDPOINT: https://<your-logto-domain> # (Optional) Replace with your Logto endpoint URL if using a custom domain\nADMIN_ENDPOINT: https://<your-logto-admin-domain> # (Optional) Replace with your Logto admin URL if using a custom domain\nDB_URL: postgres://username:password@your_postgres_url:port/db_name # Replace with your Postgres DSN\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: Configures Logto authentication by setting the endpoint, app ID, API resources and their associated scopes. The configuration includes multiple API endpoints and their respective read/write permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Add your API resources' scopes\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It's used to display API resource configuration examples in the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Fetching Components in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then configures the FetchOrganizationTokenForUser component with required props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and Resources in Swift\nDESCRIPTION: This code snippet demonstrates how to create a Logto configuration with custom scopes and resources, then initialize a LogtoClient with that configuration. The highlighted section shows how to specify custom scopes and API resources that the client will have access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"read\", \"write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in JSX\nDESCRIPTION: This snippet imports necessary components and renders the ConfigApiResources component with code snippets as props. It's likely part of a React-based documentation system for Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Jade Template for User Profile Page\nDESCRIPTION: Jade template for the user profile page, displaying the user's ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jade\nCODE:\n```\nextends layout\n\nblock content\n  h1 Hello logto\n  p userId: #{userId}\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying API Resource Configuration Components in JSX\nDESCRIPTION: This code imports MDX fragments and component files for API resource configuration examples, then renders them in a ConfigApiResources component with the appropriate props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting AWS SES Connector Variable in Javascript\nDESCRIPTION: This snippet exports a constant variable named 'connector' with the value 'AWS SES'. This variable is later used for prop injection into the imported MDX components to dynamically render the connector name throughout the documentation. It has no external dependencies and is intended strictly for use within the MDX/JSX context of the documentation platform.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-python-aws-ses.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'AWS SES';\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Snippets and Rendering Component in MDX\nDESCRIPTION: This snippet demonstrates importing Markdown files, likely containing code examples, and passing them as props (React components) to a custom `ConfigApiResources` MDX component. This pattern allows for modular documentation where code examples are maintained separately.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resources Documentation Components in JSX\nDESCRIPTION: This JSX code renders the imported documentation components, passing necessary props for configuration examples and access token retrieval instructions. It structures the content into sections for client configuration and access token fetching.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiResourcesDescription />\n\n### Configure Logto client \\{#configure-logto-client}\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n\n### Fetch access token for the API resource \\{#fetch-access-token-for-the-api-resource}\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: MDX Import Declarations for Documentation Components\nDESCRIPTION: Import statements for various MDX documentation fragments and components used to build the comprehensive guide for Microsoft Entra ID SAML SSO integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-vue-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-saml/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in JavaScript\nDESCRIPTION: Exports a constant named 'connector' with the string value 'Slack'. This variable is likely used within the surrounding MDX file and imported components to dynamically refer to the specific social connector being configured, ensuring consistency throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-slack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Slack';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Type Constant in JavaScript (MDX)\nDESCRIPTION: Defines and exports a JavaScript constant named 'connector' with the string value 'OIDC'. This constant is likely intended to be used within the MDX file or passed as a prop to the imported components (like Intro, AddSocialConnector) to dynamically configure their content for the OIDC connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-oidc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC';\n```\n\n----------------------------------------\n\nTITLE: Constructing a Basic Fuzzy Search with URLSearchParams\nDESCRIPTION: This code demonstrates how to create a basic fuzzy search query using URLSearchParams. The '%foo%' pattern will search for 'foo' within any text across all searchable user fields.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([['search', '%foo%']]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Installation Fragment with Package Name in Next.js (JSX)\nDESCRIPTION: This snippet demonstrates how to render the imported installation fragment component, passing a 'packageName' prop to customize the displayed installation instructions for the '@logto/next' package. The usage assumes React/Next.js context and that 'NpmLikeInstallation' accepts a packageName string prop.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NpmLikeInstallation packageName=\"@logto/next\" />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for User API Documentation\nDESCRIPTION: Imports various MDX fragment components used to construct the documentation page about user information APIs and scopes/claims functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GetUserInfoApis from '../../fragments/_get-user-info-apis.mdx';\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in React/MDX\nDESCRIPTION: Imports MDX fragments and code examples, then configures them using the ConfigApiResources component with necessary props for displaying different API resource configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in JSX\nDESCRIPTION: Imports necessary fragments and code snippets for organization token management functionality. These components are then assembled to create a comprehensive guide for fetching organization tokens for users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organisations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Server Response with Subject Token\nDESCRIPTION: JSON response from the backend server to the support application containing the subject token and its expiration time. This token will be used in the next step of the impersonation process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subjectToken\": \"sub_7h32jf8sK3j2\",\n  \"expiresIn\": 600\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Connector Constant in JavaScript\nDESCRIPTION: This snippet exports a JavaScript constant named `connector` with the string value 'Apple'. This constant is likely used within the MDX page or its imported components to dynamically specify the social connector being configured, ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-apple.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Apple';\n```\n\n----------------------------------------\n\nTITLE: Defining the Connector Name Constant in MDX/JavaScript\nDESCRIPTION: Exports a constant variable named 'connector' with the value 'X (Twitter)'. This constant is likely used within the MDX document to pass the connector name dynamically to imported reusable components like `<Intro>`, `<AddSocialConnector>`, etc., ensuring consistency throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-x-twitter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'X (Twitter)';\n```\n\n----------------------------------------\n\nTITLE: SMTP Configuration Types Schema\nDESCRIPTION: Schema definition for configuring the SMTP connector in Logto, including host, port, email address, and templates.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/email/smtp/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name      | Type       |\n| --------- | ---------- |\n| host      | string     |\n| port      | string     |\n| fromEmail | string     |\n| templates | Template[] |\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Constant in MDX (JavaScript)\nDESCRIPTION: Exports a JavaScript constant named 'connector' with the value 'Discord'. This constant is likely used within the MDX page and its imported components (like Intro, AddSocialConnector, etc.) to dynamically display content relevant to the Discord connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-discord.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Discord';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Configuration Resource Components with React - JavaScript/JSX\nDESCRIPTION: This code snippet demonstrates how to import Markdown and MDX documentation fragments, as well as React components, and then render a unified <ConfigApiResources> component with these imported fragments as props. The dependencies required are React, the custom components such as ConfigApiResources, and the corresponding MD/MDX code files. The component expects code examples to be injected via props for different resource configurations, and is designed to be embedded within a documentation site; inputs are the imported code fragments, and output is the rendered composite resource documentation section.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\\n\\nimport ConfigResourcesCode from './code/_config-resources-code.md';\\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\\n\\n<ConfigApiResources\\n  configResourcesCode={<ConfigResourcesCode />}\\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth.js v5 Handler Routes in Next.js\nDESCRIPTION: Creates API route handlers for authentication in Next.js App Router by exporting GET and POST handlers from the auth configuration file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handlers } from '@/auth';\nexport const { GET, POST } = handlers;\n```\n\n----------------------------------------\n\nTITLE: Triggering Reconsent for New Permissions in TypeScript\nDESCRIPTION: This code shows how to trigger a reconsent flow when new permissions are added, forcing the user to approve the new scopes during sign-in.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/configure-organization-template.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nsignIn({ redirectUri: 'your-redirect-url', prompt: 'consent' });\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Token in PHP\nDESCRIPTION: Retrieves an organization token for a specified organization ID using the PHP SDK. Can be used to authenticate organization-specific API requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$token = $client->getOrganizationToken('<organization-id>');\n// oder\n$claims = $client->getOrganizationTokenClaims('<organization-id>');\n```\n\n----------------------------------------\n\nTITLE: Template Structure with MDX Components and Section Headings\nDESCRIPTION: Defines the structure of the SSO integration guide with section headings and imported MDX components. Each component represents a specific step in the integration process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/_template-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"${sdk}\" link=\"${sdkOfficialLink}\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"${appType}\" framework=\"${framework}\" />\n\n## Integrate ${framework} with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add ${connector} connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\"${framework}\" />\n\n## Set up ${connectorConfigName} \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable ${connector} connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"${sdk}\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out in User Page for Dart\nDESCRIPTION: Adds sign-out functionality to the user profile page using the CustomAuthManager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFFButtonWidget(\n  onPressed: () async {\n    await authManager.signOut();\n\n    context.replaceNamed('HomePage');\n  },\n  text: 'Sign Out',\n  // ...\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for Google Workspace SSO\nDESCRIPTION: This code exports a constant variable 'connector' with the value 'Google Workspace enterprise SSO'. This variable is used throughout the document to refer to the SSO connector consistently.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Structuring API Resource Configuration Documentation using MDX\nDESCRIPTION: This MDX snippet imports a main layout component (`ConfigApiResources`) and several specific code example components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) from other files. It then renders the `ConfigApiResources` component, passing the imported code example components as props. This structure allows for modular documentation where specific code examples can be easily swapped or updated, and the overall page layout is managed by the main component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK and dependencies using npm\nDESCRIPTION: This snippet shows how to install the Logto SDK (@logto/rn) and its peer dependencies using npm. It includes expo-crypto, expo-secure-store, expo-web-browser, and @react-native-async-storage/async-storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/rn\nnpm i expo-crypto expo-secure-store expo-web-browser @react-native-async-storage/async-storage\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in TypeScript\nDESCRIPTION: This code retrieves an access token from the Logto authentication service for a specific API endpoint. It uses the logtoClient from the locals object and specifies the target API URL as a scope parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Creating Web Callback Handler for flutter_web_auth_2\nDESCRIPTION: Implements a callback.html file to handle the authentication callback URL and send it back to the application using the postMessage API for web platform support.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_dependency.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<title>Authentication complete</title>\n<p>Authentication is complete. If this does not happen automatically, please close the window.</p>\n<script>\n  function postAuthenticationMessage() {\n    const message = {\n      'flutter-web-auth-2': window.location.href,\n    };\n\n    if (window.opener) {\n      window.opener.postMessage(message, window.location.origin);\n      window.close();\n    } else if (window.parent && window.parent !== window) {\n      window.parent.postMessage(message, window.location.origin);\n    } else {\n      localStorage.setItem('flutter-web-auth-2', window.location.href);\n      window.close();\n    }\n  }\n\n  postAuthenticationMessage();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying SMTP Email Connector Option with DocCardList in MDX\nDESCRIPTION: This code snippet shows how to display the SMTP email connector option using the DocCardList component. It allows users to connect to their preferred email service using Simple Mail Transfer Protocol.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/connectors/email-connectors/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'SMTP',\n      href: '/integrations/smtp',\n      description: 'SMTP에 대한 공식 Logto 커넥터입니다.',\n      customProps: {\n        icon: <Smtp />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Night City Theme with Custom CSS in Logto\nDESCRIPTION: This CSS snippet transforms the Logto sign-in interface into a 'Night City' cyberpunk theme. It includes custom fonts, background images, colors, and styling for form elements to create an immersive branded experience.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/customization/custom-css.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'Rock Salt';\n  font-style: normal;\n  font-weight: normal;\n  font-display: swap;\n  src: url('https://fonts.gstatic.com/s/rocksalt/v18/MwQ0bhv11fWD6QsAVOZrt0M6p7NGrQ.woff2')\n    format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F,\n    U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n@font-face {\n  font-family: 'Share Tech';\n  font-style: normal;\n  font-weight: normal;\n  font-display: swap;\n  src: url('https://fonts.gstatic.com/s/sharetech/v17/7cHtv4Uyi5K0OeZ7bohU8H0JmBUhfrE.woff2')\n    format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F,\n    U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n#app * {\n  font-family: 'Share Tech';\n  letter-spacing: 0.5px;\n  --color-type-primary: #ffffff;\n  --color-type-secondary: #c9c5d0;\n}\n\n#app > div[class$='viewBox'] {\n  background-image: url('https://silverhand.io/assets/v-in-nc.jpg');\n  background-size: cover;\n}\n\n#app main[class*='main'] {\n  background-image: url('https://logtoeu.blob.core.windows.net/public-blobs/g3cp4y/m-g3cp4y/2024/01/02/w9j0x57g/gentle-universe.png');\n  background-size: cover;\n  opacity: 97%;\n  min-height: initial;\n  padding: 24px;\n  padding-bottom: 72px;\n  border-radius: 12px;\n}\n\n#app main[class*='main'] img[class*='logo'] {\n  content: url('https://silverhand.io/assets/cyberpunk-2077.png');\n  margin: -20px 0 -12px;\n  height: 160px;\n}\n\n#app form div[class*='inputField'] > div {\n  outline: none;\n  border: none;\n  border-radius: 4px;\n}\n\n#app form div[class*='inputField'] input,\n#app form div[class*='inputField'] div[class$='countryCodeSelector'] {\n  background: initial;\n  background-color: #564f7c;\n  font-family: 'Share Tech';\n  letter-spacing: 0.5px;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n#app form div[class*='inputField'] > div > input::placeholder,\n#app main[class*='main'] > div[class*='wrapper'] > div[class*='divider'],\n#app main[class*='main'] > div[class*='wrapper'] > form div[class*='content'],\n#app main[class*='main'] > div[class*='wrapper'] > form div[class*='content'] > span {\n  color: #a7a5b3;\n}\n\n#app main[class*='main'] > div[class*='wrapper'] > div[class*='divider'] > i[class*='line'],\n#app\n  main[class*='main']\n  > div[class*='wrapper']\n  > div[class*='terms']\n  > i[class*='divider']::after {\n  background: rgba(247, 248, 248, 14%);\n}\n\n#app button {\n  font-weight: 600;\n  font-size: 16px;\n  border-radius: 4px;\n}\n\n#app button[type='submit'] {\n  background: linear-gradient(270.84deg, #2fd6fb -24.55%, #6369fc 44.33%, #a741eb 119.2%), #5d34f2;\n}\n\n#app div[class*='socialLinkList'] *,\n#app div[class*='main'] * {\n  font-family: 'Share Tech';\n}\n\n#app main[class*='main'] > div[class*='wrapper'] > div[class*='createAccount'] {\n  font-family: 'Share Tech';\n  color: #ffffff;\n}\n\n#app div[class*='socialLinkList'] > button {\n  border: none;\n  background-color: #645995;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes in TypeScript\nDESCRIPTION: This snippet shows how to create a configuration object for Logto Express with custom scopes. The configuration includes 'email' and 'phone' scopes which will request these permissions during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  scopes: ['email', 'phone'],\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating Sign-out Flow with Sequence Diagram in Mermaid\nDESCRIPTION: A sequence diagram showing the sign-out flow between a user, WordPress, and Logto. It demonstrates how a user's logout request is handled by WordPress, which redirects to Logto for sign-out, and then back to WordPress to complete the logout process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/wordpress-plugin/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant User\n    participant WordPress\n    participant Logto\n\n    User->>WordPress: Click \"Log out\"\n    WordPress->>Logto: Redirect to Logto for sign-out\n    Logto->>Logto: Sign-out successful\n    Logto->>WordPress: Redirect back to WordPress\n    WordPress->>User: Logged out\n```\n\n----------------------------------------\n\nTITLE: MDX Import Declarations for Documentation Components\nDESCRIPTION: Import statements for various MDX documentation fragments and components needed to build the complete integration guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-react-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-oidc/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in MDX\nDESCRIPTION: This snippet imports the `FetchAccessTokenForApiResources` component from a relative path within the project structure and the `GetAccessTokenCode` component, likely containing a specific code example, from a local `code` subdirectory. These imports are prerequisites for using the components later in the MDX file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI in Expo app.json for Android\nDESCRIPTION: This JSON snippet shows how to configure the redirect URI scheme in the Expo app.json file for Android applications. It's necessary to set the scheme that matches the redirect URI used in the Logto Console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"scheme\": \"io.logto\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Tokens in Logto\nDESCRIPTION: This snippet demonstrates how to fetch organization tokens for a user in Logto. It includes configuration for organization scope and code examples for getting organization access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode package={props.package} />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: OIDC Configuration Types Table\nDESCRIPTION: Configuration type definitions for OIDC connector setup, including required and optional parameters for authentication requests and token verification.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/oidc/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Type                      | Required |\n| ------------------------- | ------------------------- | -------- |\n| scope                     | string                    | True     |\n| clientId                  | string                    | True     |\n| clientSecret              | string                    | True     |\n| authorizationEndpoint     | string                    | True     |\n| tokenEndpoint             | string                    | True     |\n| idTokenVerificationConfig | IdTokenVerificationConfig | True     |\n| authRequestOptionalConfig | AuthRequestOptionalConfig | False    |\n| customConfig              | Record<string, string>   | False    |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| AuthRequestOptionalConfig properties | Type   | Required |\n| ------------------------------------ | ------ | -------- |\n| responseType                         | string | False    |\n| tokenEndpoint                        | string | False    |\n| responseMode                         | string | False    |\n| display                              | string | False    |\n| prompt                               | string | False    |\n| maxAge                               | string | False    |\n| uiLocales                            | string | False    |\n| idTokenHint                          | string | False    |\n| loginHint                            | string | False    |\n| acrValues                            | string | False    |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| IdTokenVerificationConfig properties | Type                               | Required |\n| ------------------------------------ | ---------------------------------- | -------- |\n| jwksUri                              | string                             | True     |\n| issuer                               | string \\| string[]                 | False    |\n| audience                             | string \\| string[]                 | False    |\n| algorithms                           | string[]                           | False    |\n| clockTolerance                       | string \\| number                   | False    |\n| crit                                 | Record<string, string \\| boolean> | False    |\n| currentDate                          | Date                               | False    |\n| maxTokenAge                          | string \\| number                   | False    |\n| subject                              | string                             | False    |\n| typ                                  | string                             | False    |\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components in JavaScript/MDX\nDESCRIPTION: This snippet imports various reusable MDX components from specified fragment files. These components are used to build the structure and content of the documentation page dynamically. It relies on the ES module import syntax within an MDX file context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-mvc-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: MDX Import Structure for Documentation\nDESCRIPTION: Defines the import structure for various documentation fragments and components used in the tutorial, including introductory sections, configuration steps, and integration guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-php-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/oidc/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in MDX (JavaScript)\nDESCRIPTION: This JavaScript snippet within an MDX file exports a constant named `connector` assigned the string value 'Hugging Face'. This constant is likely used to pass the connector name dynamically to imported components or within the MDX file itself.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-hugging-face.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Hugging Face';\n```\n\n----------------------------------------\n\nTITLE: Exporting Google Workspace SSO Connector Constant - JavaScript\nDESCRIPTION: Exports a named constant 'connector' representing the Google Workspace Enterprise SSO connector. This exported constant is used throughout the documentation and possibly in example code, providing centralized reference to the SSO connector string. No dependencies beyond standard JavaScript export syntax.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Access Token Documentation Components\nDESCRIPTION: Imports fragment components and composes a documentation section for fetching API access tokens by passing props to display the relevant code examples and usage instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM Installation Component for Logto React SDK\nDESCRIPTION: Imports a reusable component called NpmLikeInstallation and renders it with the package name '@logto/react'. This component likely displays installation instructions for the Logto React SDK using npm, yarn, or similar package managers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/react\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in JavaScript\nDESCRIPTION: Exports a constant string variable named 'connector' with the value 'X (Twitter)'. This variable is likely used within the MDX document or imported components (like `<Intro>`, `<AddSocialConnector>`, etc.) to dynamically display the specific social connector's name throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-x-twitter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'X (Twitter)';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments and Code Snippets in JSX\nDESCRIPTION: This snippet imports various documentation fragments and code snippets for use in the page content. It includes imports for API resources description, configuration, access token fetching, and specific code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiResourcesDescription from '../../fragments/_api-resources-description.md';\nimport ConfigApiResources from '../../fragments/_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from '../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code-snippets/_get-resource-access-token.md';\nimport ConfigResourcesCode from './code-snippets/_resource-config-code.md';\nimport ConfigResourcesWithScopesCode from './code-snippets/_resource-with-scopes-config-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code-snippets/_resource-with-shared-scopes-config-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Components in React JSX\nDESCRIPTION: Imports three markdown components that provide different sections of the React Native SDK integration guide: a tip component, installation instructions, and integration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.md';\nimport Installation from './_installation.md';\nimport Integration from './_integration.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering ScopesAndClaims Component with Code Component Prop in MDX\nDESCRIPTION: This line renders the `ScopesAndClaims` component. It passes the imported `ScopesAndClaimsCode` component as the value for the `configScopesCode` prop. This allows embedding specific code examples or related content within the `ScopesAndClaims` documentation section.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in React/MDX\nDESCRIPTION: React/MDX imports for organization token configuration components and code fragments, setting up documentation structure for organization token management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"urn:logto:scope:organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Export for Facebook Connector in JavaScript\nDESCRIPTION: This snippet statically exports a constant named 'connector' with the value 'Facebook'. It makes the connector type available in other parts of the module or imported MDX/JSX components that require connector identification. There are no dependencies, and its input and output are simply the connector name string, which helps in parameterizing components or templates throughout the instructional documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-facebook.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Facebook';\n```\n\n----------------------------------------\n\nTITLE: Importing API Resource Configuration Components in React\nDESCRIPTION: Imports multiple configuration code fragments for API resources and passes them to a ConfigApiResources component. The imports include basic resource configuration, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Introduction Section using Intro Component (MDX)\nDESCRIPTION: Uses the imported 'Intro' MDX component to render the tutorial's introduction. It passes the connector name ('SendGrid' via the `connector` variable), the SDK ('iOS (Swift)'), and a relevant link as props to customize the introductory content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-sendgrid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"iOS (Swift)\" link=\"https://developer.apple.com/ios\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering documentation components with props\nDESCRIPTION: This snippet shows how the imported MDX components are rendered with appropriate props. These components will receive dynamic values that are replaced when the template is processed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/_template-passwordless.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Intro connector={connector} sdk=\"${sdk}\" link=\"${sdkOfficialLink}\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"${appType}\" framework=\"${framework}\" />\n\n## Integrate ${framework} with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add ${connector} connector \\{#add-connector-connector}\n\n<AddPasswordlessConnector\n  connector={connector}\n  connectorType=\"${connectorType}\"\n  passwordlessSignUpIdentifier=\"${passwordlessSignUpIdentifier}\"\n/>\n\n## Set up ${connectorConfigName} \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable ${connector} connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnablePasswordlessConnector\n  connectorType=\"${connectorType}\"\n  passwordlessSignUpIdentifier=\"${passwordlessSignUpIdentifier}\"\n/>\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"${sdk}\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Types for Slack Connector in Markdown\nDESCRIPTION: This snippet defines the configuration types for the Slack connector in a markdown table format. It specifies the names and types of the required configuration parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/integrations/social/slack/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 名前         | タイプ |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n| scope        | string |\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Microsoft Entra ID OIDC SSO Tutorial\nDESCRIPTION: This code snippet imports various MDX fragments that compose the tutorial for implementing Microsoft Entra ID OIDC enterprise SSO with Express and Logto. It includes sections for introduction, application creation, SSO connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-express-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Handling Sign-In Callback with Logto SDK in Webflow\nDESCRIPTION: This script handles the sign-in callback by processing the authentication response and redirecting to the homepage. It uses the Logto SDK's handleSignInCallback method with the current URL and then redirects to the main site after successful processing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_handle-redirect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  (async () => {\n    // SDK メソッドを呼び出してサインインコールバックロジックを処理する\n    await logtoClient.handleSignInCallback(window.location.href);\n\n    // 処理が完了したらホームページにリダイレクトする\n    window.location.assign('https://your-awesome-site.webflow.io');\n  })();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Tutorial Structure\nDESCRIPTION: This code imports various MDX fragments to structure the tutorial content, including introduction, application creation, SSO connector setup, configuration, and testing sections. It also sets up a connector variable for use throughout the document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-razor-pages-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-razor/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/google-workspace/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Required Environment Variables for Logto OIDC Migration\nDESCRIPTION: The minimum set of environment variables needed in the .env file to migrate OIDC configuration to the database. These include OIDC private keys, cookie keys, and the database URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/migrate-from-env.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOIDC_PRIVATE_KEYS=some_secret_key # Or OIDC_PRIVATE_KEY_PATHS\nOIDC_COOKIE_KEYS=key1,key2\nDB_URL=postgresql://localhost:5432/logto\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in JavaScript\nDESCRIPTION: This code demonstrates how to import the LogtoClient class and create a new instance with custom scopes and resources. The client is configured with 'read' and 'write' scopes and two API resource endpoints for a shopping application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-shared-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Documentation Components\nDESCRIPTION: Imports documentation fragments and code components, then composes them together to create the scopes and claims documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Invoking FetchOrganizationTokenForUser Component in MDX\nDESCRIPTION: This MDX snippet utilizes the `FetchOrganizationTokenForUser` component to render documentation on fetching organization tokens. It passes the required `organizationScope` and references imported components (`ConfigOrganizationCode`, `GetOrganizationAccessTokenCode`) containing specific code examples as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Global Authentication State Variables\nDESCRIPTION: Declares global variables for tracking the current authenticated user and a getter function to check if a user is logged in, simplifying authentication state access throughout the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFlutterFlowAuthAuthUser? currentUser;\nbool get loggedIn => currentUser?.loggedIn ?? false;\n```\n\n----------------------------------------\n\nTITLE: Importing and Integrating Resource Configuration Components in React (JavaScript)\nDESCRIPTION: This snippet demonstrates the importation of documentation fragments and code sample modules in a JavaScript (React) project, and their integration into a higher-level component. Dependencies include React, MDX documentation files, and Markdown code sample modules. Key parameters include references to the imported code sample components, which are passed as props to the main component. The snippet outputs a single composite React element rendering all relevant resource configuration code samples, to be used as part of the application's documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This code snippet imports two components related to scopes and claims documentation, then renders the main component with a code snippet as a prop. It demonstrates how to compose React components for documentation purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components\nDESCRIPTION: Imports MDX fragments and code snippets, then renders them using the ConfigApiResources component with specific props for different resource configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Vue SDK with pnpm - Bash\nDESCRIPTION: This command installs the @logto/vue package via the pnpm package manager. pnpm must be set up in the development environment beforehand. Executing this command from the project root adds @logto/vue as a dependency and modifies the pnpm-managed lockfile and manifest.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Importing GetUserInfoApis Component in MDX\nDESCRIPTION: Imports the `GetUserInfoApis` React component from a specified MDX fragment file located in a parent directory's `fragments` subfolder. This component is intended to render documentation related to fetching user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GetUserInfoApis from '../../fragments/_get-user-info-apis.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for React Native Organization Setup\nDESCRIPTION: Imports the necessary documentation fragments and code snippets needed to demonstrate organization token fetching in React Native applications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for OAuth2 Sign-In Tutorial\nDESCRIPTION: This code snippet demonstrates the usage of imported MDX components to render the tutorial content. It includes sections for introduction, application creation, integration guide, connector setup, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-oauth2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Blazor Server)\" link=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models?view=aspnetcore-9.0#blazor-server\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\".Net Core (Blazor Server)\" />\n\n## Integrate .Net Core (Blazor Server) with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add OAuth2 connector \\{#add-connector-connector}\n\n<AddSocialConnector connector={connector} framework=\".Net Core (Blazor Server)\" />\n\n## Set up Standard OAuth 2.0 app \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable OAuth2 connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSocialConnector connector={connector} />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (Blazor Server)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Rendering Connector Configuration Guide using ConnectorGuide Component (MDX)\nDESCRIPTION: Embeds the specific configuration guide for the SendGrid connector using the 'ConnectorGuide' component. This component likely contains details on obtaining API keys and filling in the necessary fields in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-sendgrid.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<ConnectorGuide />\n```\n\n----------------------------------------\n\nTITLE: Exact Match Search Parameters\nDESCRIPTION: Example of constructing search parameters for exact name matching\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/advanced-user-search.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', 'Alice'],\n  ['mode.name', 'exact'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments and Code Examples in MDX\nDESCRIPTION: This snippet shows the import statements used in an MDX file to bring in reusable content fragments and components containing code examples. It imports a general `_config-api-resources.mdx` fragment and specific code example components (`_config-resources-code.md`, `_config-resources-with-scopes-code.md`, `_config-resources-with-shared-scopes-code.md`) from relative paths.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Components in React\nDESCRIPTION: This snippet imports and renders components to display instructions for fetching an access token. It uses a reusable component 'FetchAccessTokenForApiResources' and passes in specific props including a code snippet component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding Fragment Components into MDX Sections - MDX\nDESCRIPTION: This snippet illustrates how imported MDX fragments and guides are rendered into specific sections of the documentation template. Each section of the page mounts an imported component, passing parameters such as the connector name and framework when required. Components like <Intro/>, <CreateApplication/>, <AddSocialConnector/>, and others sequentially guide the user through Facebook integration steps. Inputs are props such as connector and sdk, and output is stepwise documentation within the Docusaurus site. Prerequisites: Docusaurus setup, correct file paths, and all required fragments present.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-facebook.mdx#2025-04-22_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<Intro connector={connector} sdk=\"Express\" link=\"https://expressjs.com\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\"Express\" />\n\n## Integrate Express with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add Facebook connector \\{#add-connector-connector}\n\n<AddSocialConnector connector={connector} framework=\"Express\" />\n\n## Set up Facebook login \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Facebook connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSocialConnector connector={connector} />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"Express\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components\nDESCRIPTION: Imports several MDX fragments and code components, then renders them using the ConfigApiResources component with appropriate props for different resource configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Naver Authentication Config Types in Logto\nDESCRIPTION: A markdown table displaying the required configuration parameters for Naver authentication in Logto. It shows clientId and clientSecret as string type parameters needed for the integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/naver/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name         | Type   |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n```\n\n----------------------------------------\n\nTITLE: Using EnableSocialConnector Component in MDX\nDESCRIPTION: Renders the 'EnableSocialConnector' MDX component, passing the 'Slack' connector name (via the 'connector' variable). This component guides the user on enabling the newly configured Slack connector within the Logto Sign-in Experience settings, making it visible to end-users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-slack.mdx#2025-04-22_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<EnableSocialConnector connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Exporting the AWS SES Connector Constant - JavaScript\nDESCRIPTION: This code snippet exports a single constant named 'connector' set to the string 'AWS SES'. This value is used as the connector reference throughout the imported MDX components, allowing section components to access and utilize the connector's identity dynamically. No dependencies or external inputs are required. The output is the constant, which facilitates reusability of the tutorial fragments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-aws-ses.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'AWS SES';\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP Email Connector Option with DocCardList in MDX\nDESCRIPTION: This code creates a visual card for the HTTP email connector option, which sends API calls to a configured endpoint to complete email-dependent auth flows. This option is for users who have their own email service but can't use SMTP.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/email-connectors/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'HTTP email connector',\n      href: '/integrations/http-email',\n      description: 'The official Logto connector for HTTP email.',\n      customProps: {\n        icon: <Http />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: MDX Import Declarations for Documentation Sections\nDESCRIPTION: MDX import statements used to organize documentation into modular sections, including application setup, connector configuration, and framework integration guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-aws-ses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/swift/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/aws-ses/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Adding Logto SDK Dependency (Kotlin)\nDESCRIPTION: Adds the Logto Android SDK dependency to the project using Kotlin DSL build script.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"io.logto.sdk:android:1.1.3\")\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Fetching Component in JSX\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component, passing in the necessary props for organization scope and code snippets for configuration and access token retrieval. It demonstrates how to use the imported components to create a complete guide for organization token handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/chrome-extension using npm (Bash)\nDESCRIPTION: This command uses the npm package manager to install the `@logto/chrome-extension` library. It adds the package as a dependency to the current project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Section Division with JSX Comments in JavaScript\nDESCRIPTION: This JSX comment explains the rationale for dividing documentation templates into sections to ensure imported MDX files appear correctly in the table of contents (TOC). It is not executable code but serves as developer guidance for maintainability in Docusaurus projects. There are no dependencies or direct outputs, and it does not affect runtime execution.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resources Description in JSX\nDESCRIPTION: This code snippet renders the ApiResourcesDescription component, which likely contains an overview or explanation of API resources in the Logto system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiResourcesDescription />\n```\n\n----------------------------------------\n\nTITLE: Exact Matching and Case Sensitivity in Logto User Search\nDESCRIPTION: This example demonstrates how to perform exact matching on the 'name' field and set case sensitivity for the search.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', 'Alice'],\n  ['search.name', 'Bob'],\n  ['mode.name', 'exact'],\n  ['isCaseSensitive', 'true'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React SDK Installation Component\nDESCRIPTION: This code imports a reusable NPM-like installation component and uses it to display installation instructions for the Logto React SDK package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/react\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering OAuth Scopes and Claims Documentation Components\nDESCRIPTION: This code imports MDX fragments and code examples, then renders them together using the ScopesAndClaims component with the code snippets passed as a prop.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components in JSX\nDESCRIPTION: This code imports reusable documentation fragments and renders a custom component to display instructions for fetching access tokens. The component accepts props for the API method name and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: DocCardList Component Implementation\nDESCRIPTION: React component implementation for displaying B2B features as cards with icons and descriptions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/introduction/plan-your-architecture/b2b.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Organizations',\n      href: '/organizations',\n      description:\n        'The Organizations feature is ideal for multi-tenant SaaS and B2B apps, supporting teams, organizations, and companies as clients. ',\n      customProps: {\n        icon: <OrganizationIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Enterprise SSO',\n      href: '/end-user-flows/enterprise-sso',\n      description:\n        'Logto supports SP-initiated SSO with SAML and OIDC, connecting to providers like Okta, Azure AD, and Google Workspace.',\n      customProps: {\n        icon: <SsoIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with Yarn\nDESCRIPTION: Provides the command to install the @logto/chrome-extension package using Yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Okta SSO Tutorial\nDESCRIPTION: This code snippet imports various MDX components used throughout the tutorial. These components contain reusable content for different sections of the guide, such as introduction, application creation, and SSO connector setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/okta/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Search using URLSearchParams in JavaScript\nDESCRIPTION: This snippet shows how to use regular expressions (POSIX mode) for user search by setting the appropriate mode in URLSearchParams.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for OIDC Enterprise SSO Guide\nDESCRIPTION: This code snippet imports various MDX fragments that compose the tutorial for implementing OIDC enterprise SSO with Expo (React Native) and Logto. It includes sections for introduction, application creation, SSO connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Sample User Data Format for Migration in JSON\nDESCRIPTION: Example JSON structure showing how to prepare user data for migration to Logto, including username, password digest, and hashing algorithm.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/user-management/user-migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"username\": \"user1\",\n    \"passwordDigest\": \"password-encrypted\",\n    \"passwordAlgorithm\": \"SHA256\"\n  },\n  {\n    \"username\": \"user2\",\n    \"passwordDigest\": \"password-encrypted\",\n    \"passwordAlgorithm\": \"SHA256\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Components for Access Token Fetching in JSX/MDX\nDESCRIPTION: This snippet imports necessary components and renders a FetchAccessTokenForApiResources component with specific props. It demonstrates how to set up the access token fetching process in a Logto application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Next.js SDK Installation Component\nDESCRIPTION: This code imports a reusable MDX fragment component for npm-like installations and uses it to show installation instructions for the Logto Next.js SDK package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/next\" />\n```\n\n----------------------------------------\n\nTITLE: Handling URL Opening in AppDelegate for Logto\nDESCRIPTION: This Swift code snippet demonstrates handling incoming URLs within the `AppDelegate`'s `application(_:open:options:)` method. It calls `LogtoClient.handle(url:)`, which processes the URL to complete authentication flows initiated by Logto, including social logins like WeChat Native, when the app is opened via a custom URL scheme or universal link.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// 或 AppDelegate\nfunc application(_ app: UIApplication, open url: URL, options: /*...*/) -> Bool {\n  LogtoClient.handle(url: url)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This code snippet imports two components related to scopes and claims, and then renders the main component with the code component passed as a prop. This structure allows for flexible composition of documentation components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto Documentation Components in JSX\nDESCRIPTION: This code imports various Markdown and MDX components for Logto documentation and renders them in a specific order. It includes a guide tip, installation instructions, and integration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport GuideTip from './_guide-tip.md';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Instalación {#installation}\n\n<Installation />\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using OpenIDConnect Installation Instructions Component in JSX\nDESCRIPTION: This code imports a reusable MDX component for NPM-like installation instructions and renders it with 'passport passport-openidconnect' as the package names to install.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"passport passport-openidconnect\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering GetAccessTokenCode Component in React\nDESCRIPTION: This snippet imports a React component from a local file and renders it. The component is likely responsible for displaying code related to obtaining an access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<GetAccessTokenCode />\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant string variable named `connector` with the value 'SAML enterprise SSO'. This constant is likely used within the MDX file or imported components to dynamically reference the specific SSO connector being configured, ensuring consistency throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in MDX/JavaScript\nDESCRIPTION: This snippet imports two components using JavaScript's `import` syntax within an MDX file. `FetchAccessTokenForApiResources` is imported from a shared fragments directory, and `GetAccessTokenCode` is imported from a local code directory. These components are prerequisites for rendering the documentation content later in the file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Documenting Table of Contents Limitation - JavaScript Comment\nDESCRIPTION: This commented snippet explains the need to split templates into sections for Docusaurus, referencing a related GitHub issue. It serves as context for documentation maintainers and clarifies why the approach of using multiple imported MDX fragments is necessary. The comment is non-executable and has no runtime effect.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-discord.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for Logto Tutorial\nDESCRIPTION: This snippet defines a 'connector' variable using a template literal, which is likely replaced with the specific social connector name (e.g., 'Google', 'Facebook') when the tutorial is generated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/_template-social.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport const connector = '${connector}';\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection URL for Logto\nDESCRIPTION: Examples of setting the REDIS_URL environment variable with different connection string formats for Redis. Includes options for authentication, TLS, and default values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/central-cache.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=redis://your-redis-username:your-password@your.redis.url.com:6380\n```\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=redis://:your-password@your.redis.url.com\n```\n\nLANGUAGE: bash\nCODE:\n```\n# If the password is \"foo=\"\nREDIS_URL=redis://:foo%3D@your.redis.url.com\n```\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=1 # or \"true\", \"yes\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in MDX/JavaScript\nDESCRIPTION: Defines and exports a JavaScript constant `connector` within the MDX file. This constant holds the name of the SSO connector ('Google Workspace enterprise SSO') and is intended to be used by other components or scripts imported into the documentation page, ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import Structure\nDESCRIPTION: Imports various MDX components and fragments required for the tutorial documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-twilio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/go/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sms/twilio/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Connector Enablement Section using EnablePasswordlessConnector Component (MDX)\nDESCRIPTION: Uses the 'EnablePasswordlessConnector' component to guide the user on enabling the configured SendGrid email connector within the Logto Sign-in Experience. Props specify the connector type ('Email') and identifier ('Email address').\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-sendgrid.mdx#2025-04-22_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<EnablePasswordlessConnector\n  connectorType=\"Email\"\n  passwordlessSignUpIdentifier=\"Email address\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension using Package Managers\nDESCRIPTION: Shows installation commands for @logto/chrome-extension using three popular Node.js package managers: npm, Yarn, and pnpm. Each command achieves the same result of adding the package to your project dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/chrome-extension\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/chrome-extension\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This snippet imports two components related to scopes and claims, then renders the ScopesAndClaims component with the ScopesAndClaimsCode passed as a prop. This structure allows for modular and reusable documentation of scopes and claims configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in MDX\nDESCRIPTION: Imports reusable documentation fragments for user authentication flows, including components for describing user info APIs and OAuth scopes and claims configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GetUserInfoApis from '../../fragments/_get-user-info-apis.mdx';\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ConfigApiResources Component in MDX\nDESCRIPTION: This MDX snippet imports necessary components, including `ConfigApiResources` and several code example components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`). It then uses the `ConfigApiResources` component, passing the imported code example components as props to render documentation content related to configuring API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Performing GET Request for User Search in Bash\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Logto API endpoint for searching users. It uses curl to send the request with a search parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  --location \\\n  --request GET \\\n  'http://<your-logto-endpoint>/api/users?search=%25alice%25'\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components\nDESCRIPTION: Imports MDX fragments and components for access token documentation and renders the FetchAccessTokenForApiResources component with specific props for accessing tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Scopes and Claims Components with React - JavaScript\nDESCRIPTION: This code imports a 'ScopesAndClaims' React component and a Markdown-based code sample component called 'ScopesAndClaimsCode'. It then composes them by rendering 'ScopesAndClaims' with the code sample passed as a prop. Requires a React setup (e.g., Create React App or a compatible framework) and appropriate loaders for MDX and Markdown files. The key prop 'configScopesCode' is used to inject the rendered Markdown code into the component for display.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: JSX Fragment Declaration for SSO Connector Step\nDESCRIPTION: This inline JSX expression declares a constant for the connector's name and references it within components. It demonstrates how to inject variables and props within a page to allow for dynamic, reusable blocks of content, critical for maintaining consistent terminology throughout the documentation. No additional dependencies or limitations exist beyond standard JSX and JavaScript adherence.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{/* truncate */}\n```\n\n----------------------------------------\n\nTITLE: Importing Tutorial Sections in MDX\nDESCRIPTION: Imports various reusable MDX components representing different sections of the tutorial, such as introduction, application creation, connector setup, and testing. This modular approach structures the documentation page, likely within a Docusaurus environment, by composing it from smaller, focused content files.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-oidc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/swift/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto API Resource Configuration Components\nDESCRIPTION: This JSX code imports multiple components and markdown files for documentation on configuring API resources in Logto, then renders them through the ConfigApiResources component with appropriate props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Fragments for Organization Token Fetching in React\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring and fetching organization tokens. It includes a FetchOrganizationTokenForUser component and two code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations (组织)\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: File-Level JSX Comment on Documentation Sectioning\nDESCRIPTION: This JSX comment explains the need for dividing documentation into sections using imports due to Docusaurus's limitations with the Table of Contents (TOC). It doesn't affect execution but provides critical context for maintainers about the chosen implementation pattern. No dependencies or parameters; it is purely for documentation and maintainability within the code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Defining Exported Constants in Expo Logto Guide - JavaScript\nDESCRIPTION: This snippet establishes the SAML connector type by exporting a named constant. It makes the 'connector' identifier available for use in other modules or within the documentation, ensuring that child components reference the correct authentication connector throughout the guide. The constant must be imported where required; this approach centralizes the connector value and maintains consistency across the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-saml.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML';\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring Authentication Tutorial Fragments with MDX in JavaScript\nDESCRIPTION: This JavaScript snippet imports various MDX fragments containing instructional steps for building Google sign-in with Go and Logto. It sets up modular sections for each part of the tutorial, making them reusable and maintainable. Required dependencies include Docusaurus and custom MDX components; no external parameters are explicitly passed, but file paths must remain correct. The code does not perform rendering directly; it is intended for a documentation build system supporting MDX imports.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-google.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/go/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/google/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Diagrama de secuencia del flujo de autenticación en Logto\nDESCRIPTION: Representación visual del flujo completo de autenticación y autorización entre Cliente, Logto y API utilizando Mermaid.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    Note over Client,API: 1. Solicitud de autenticación\n    Client->>Logto: GET /oidc/auth\n    Note right of Client: con resource=https://resource-server.com/api<br/>y alcance opcional=read write\n    Logto-->>Client: Devuelve authorization_code\n\n    Note over Client,API: 2. Solicitud de token\n    Client->>Logto: POST /oidc/token\n    Note right of Client: con authorization_code<br/>resource=https://resource-server.com/api<br/>y alcance opcional=read write\n    Logto-->>Client: Devuelve token de acceso JWT\n    Note left of Logto: El token contiene:<br/>- Audiencia restringida al recurso<br/>- Alcances otorgados (si los hay)\n\n    Note over Client,API: 3. Solicitud de API\n    Client->>API: Solicitud con token Bearer\n    Note over API: Validar token JWT:\n    Note over API: - Verificar firma<br/>- Verificar emisor<br/>- Verificar audiencia<br/>- Verificar expiración<br/>- Verificar alcances (si RBAC está habilitado)\n    alt Token válido\n        API-->>Client: Recurso protegido\n    else Token inválido\n        API-->>Client: 401 No autorizado\n    end\n```\n\n----------------------------------------\n\nTITLE: Composing API Resources Documentation with MDX Components\nDESCRIPTION: Component configuration that imports and composes documentation fragments with their corresponding code examples. Uses MDX syntax to structure API resources documentation with reusable components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Fetching Access Token in Logto\nDESCRIPTION: This snippet imports necessary components for fetching access tokens in Logto. It includes a reusable component for fetching access tokens and a code snippet for getting the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Creating Main Page with Conditional Authentication UI\nDESCRIPTION: Implements a Next.js page component that conditionally displays sign-in or sign-out buttons based on the user's authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport SignIn from './components/sign-in';\nimport SignOut from './components/sign-out';\nimport { auth } from '@/auth';\n\nexport default function Home() {\n  const session = await auth();\n\n  return <div>{session?.user ? <SignOut /> : <SignIn />}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Successful OIDC Migration Output\nDESCRIPTION: Example output showing a successful migration of OIDC configuration from environment variables to the database. It indicates which configs were read from environment variables and which were generated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/migrate-from-env.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[info] Read config oidc.privateKeys from env\n[info] Read config oidc.cookieKeys from env\n[info] Generated config oidc.refreshTokenReuseInterval\n[info] ✔ Seed OIDC config\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with npm\nDESCRIPTION: Command to install @logto/chrome-extension package using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection with Authentication\nDESCRIPTION: Example of setting up Redis connection URL with username and password authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/central-cache.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=redis://your-redis-username:your-password@your.redis.url.com:6380\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant in MDX/JavaScript\nDESCRIPTION: This JavaScript snippet, embedded within an MDX file, exports a constant named 'connector' with the value 'LinkedIn'. This constant is likely used by other components imported into this page (e.g., Intro, AddSocialConnector) to dynamically refer to the specific social connector being configured in the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-linkedin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'LinkedIn';\n```\n\n----------------------------------------\n\nTITLE: Using FrameworkGuide Component in MDX\nDESCRIPTION: Renders the 'FrameworkGuide' MDX component without any specific props. This component likely imports and displays the core Logto integration steps specifically tailored for the Next.js (Pages Router) framework, as defined in the imported MDX file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-slack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<FrameworkGuide />\n```\n\n----------------------------------------\n\nTITLE: Rendering IntegrateSdk Component in MDX\nDESCRIPTION: This MDX code renders the `IntegrateSdk` component without any props. This component likely contains the instructions or steps for integrating the relevant Logto SDK into an Expo application, potentially imported from another file (@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-saml-enterprise-sso.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<IntegrateSdk />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX and React Components for Documentation Structure - JavaScript/MDX\nDESCRIPTION: This snippet demonstrates how multiple MDX and documentation fragments are imported as modules to structure the overall documentation file. Each import statement references steps in the SSO integration process, which are later rendered as React components. The dependencies are the MDX file modules present locally or in the project structure, as well as the ability to use React/MDX syntax. No parameters are passed here but subsequent usage leverages these modules for rendering tutorial content. The expected output is modular documentation rendering specific guide content at different locations in the page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-ios-swift-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/google-workspace/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments and Markdown Code - React (JavaScript)\nDESCRIPTION: This snippet demonstrates importing MDX and markdown documentation/code files as React components or data. The purpose is to modularly assemble API documentation resources. Dependencies are relative file paths pointing to content fragments and code examples. No explicit parameters; imports are assigned to variables for use within the rendering component. Expected input is a correctly structured set of local documentation files.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto Guide Components in React\nDESCRIPTION: Imports three Markdown/MDX components for the Logto SDK guide and renders them in sequence. The components include a guide tip, installation instructions, and integration details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.md';\nimport Installation from './_installation.md';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK Scopes in Kotlin\nDESCRIPTION: This snippet shows how to configure the scopes parameter when initializing LogtoConfig for the Logto SDK in a Kotlin application. It sets the scopes to include UserScope.Organizations, which controls the authorization scope the SDK requests. The example assumes that LogtoConfig and UserScope are properly imported and available. The key parameter demonstrated is scopes, intended for detailing required authentication and authorization boundaries. The output is a configured logtoConfig object ready for use with additional Logto SDK components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(UserScope.Organizations),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info from OIDC Endpoint in Next.js\nDESCRIPTION: This snippet demonstrates how to fetch user information from the OIDC user info endpoint using the access token obtained from the session. It makes a network request to the Logto endpoint and logs the user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function Home() {\n  const session = await auth();\n  // Replace the URL with your Logto endpoint, should ends with `/oidc/me`\n  const response = await fetch('https://xxx.logto.app/oidc/me', {\n    headers: {\n      Authorization: `Bearer ${session?.accessToken}`,\n    },\n  });\n  const user = await response.json();\n  console.log(user);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Resources Documentation Components in Markdown\nDESCRIPTION: This snippet imports various Markdown components related to API resources documentation, including descriptions, configuration instructions, and token fetching processes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ApiResourcesDescription from '../../../fragments/_api-resources-description.md';\n\nimport ConfigApiResources from './_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from './_fetch-access-token-for-api-resources.mdx';\nimport FetchOrganizationTokenForUser from './_fetch-organization-token-for-user.mdx';\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Info with Logto Client in Flutter (Dart)\nDESCRIPTION: This Dart snippet, located within the `build` method of a Flutter `StatefulWidget`, defines a `TextButton` (`getUserInfoButton`). When this button is pressed, it asynchronously retrieves the ID token claims (user information) using `logtoClient.idTokenClaims` and prints them to the console. This button is typically shown only when the user is authenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_display-userinfo.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget getUserInfoButton = TextButton(\n      onPressed: () async {\n        // highlight-start\n        final userClaims = await logtoClient.idTokenClaims;\n        print(userInfo);\n        // highlight-end\n      },\n      child: const Text('Get user info'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n            isAuthenticated == true ? getUserInfoButton : const SizedBox.shrink(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments and Modular Sections - JavaScript\nDESCRIPTION: This JavaScript snippet imports multiple documentation fragments and MDX files into a parent documentation file. Dependencies include various MDX documentation fragments and localization-specific integration guides for both general and Okta SSO-specific setups. These imports enable structured content modularity and easier reuse of sections within the overall documentation flow. No direct input or output occurs at this code level; imported components are later rendered through JSX/MDX.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\\n\\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Logto API Documentation Components\nDESCRIPTION: Imports various MDX documentation fragments and components for API resources configuration and token management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiResourcesDescription from '../../../fragments/_api-resources-description.md';\n\nimport ConfigApiResources from './_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from './_fetch-access-token-for-api-resources.mdx';\nimport FetchOrganizationTokenForUser from './_fetch-organization-token-for-user.mdx';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Vue SDK with pnpm\nDESCRIPTION: Installs the Logto Vue SDK (@logto/vue) using pnpm package manager. This command adds the SDK as a dependency to your Vue project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Multiple API Resources in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new LogtoClient instance with multiple API resources. The resources array specifies the API endpoints that the client will need access to, which is important for proper authentication and authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Ajouter des ressources API\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Scopes and Resources in LogtoConfig (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates initializing a `LogtoConfig` object. It specifically highlights the configuration of the `scopes` list (defining requested permissions like 'shopping:read') and the `resources` list (specifying the target API endpoints like 'https://shopping.your-app.com/api'). This setup is crucial for requesting appropriate access tokens during the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ..other configs\n    // highlight-start\n    scopes = listOf(\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler for Package Exports in Expo\nDESCRIPTION: This code snippet shows how to configure the Metro bundler to enable package exports in an Expo project. It's used to resolve issues with @logto/client/shim module resolution.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  // ...\n  resolver: {\n    unstable_enablePackageExports: true,\n  },\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Logto Management API Integration\nDESCRIPTION: This sequence diagram shows the flow of interactions between the user, client application, server-side application, and Logto when accessing account settings using the Management API.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    actor User as User\n    participant Client as Client app\n    participant Server as Server-side application\n    participant Logto as Logto\n\n    User ->> Client: Access client app\n    Client ->> Logto: POST /oidc/auth\n    User -->> Logto: sign in\n    Logto -->> Client: Redirect to client app\n    Client ->> Logto: POST /oidc/token\n    Logto ->> Client: 액세스 토큰 A\n    Client ->> Server: GET /account-settings (with 액세스 토큰 A)\n    Server ->> Logto: POST /oidc/token (with client credentials)\n    Logto ->> Server: 액세스 토큰 B\n    Server ->> Logto: GET /api/users/{userId} (with 액세스 토큰 B)\n    Logto ->> Server: User details\n    Server ->> Client: User details\n```\n\n----------------------------------------\n\nTITLE: Exporting Static Connector Constant - JavaScript\nDESCRIPTION: This snippet statically exports a connector constant set to 'Kakao' for use throughout the documentation. No dependencies are required and it provides a clear, maintainable reference for the external Kakao connector. It is intended for internal documentation state, not runtime logic, and has no configurable parameters or outputs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-kakao.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Kakao';\n```\n\n----------------------------------------\n\nTITLE: Sample Custom Data for Admin User in JSON\nDESCRIPTION: An example of the custom_data object for an admin user in Logto, showing how additional user-specific information can be stored.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"adminConsolePreferences\": {\n    \"language\": \"en\",\n    \"appearanceMode\": \"system\",\n    \"experienceNoticeConfirmed\": true\n  },\n  \"customDataFoo\": {\n    \"foo\": \"foo\"\n  },\n  \"customDataBar\": {\n    \"bar\": \"bar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Scopes and Claims Documentation Component - React - JSX\nDESCRIPTION: This snippet renders the ScopesAndClaims React component and injects the imported ScopesAndClaimsCode fragment as a prop. It assumes a React environment in which MDX and Markdown files can be rendered as components. The configScopesCode prop delivers the relevant code block to be displayed within the main documentation view. The compositional approach allows for clear separation of descriptive and executable/documentary content; there are no external outputs other than proper rendering.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet renders the FetchAccessTokenForApiResources component, passing it the getAccessTokenApi prop and a nested GetAccessTokenCode component as the getAccessTokenCode prop.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Tokens and Claims with Logto Client in Python\nDESCRIPTION: Demonstrates two methods for working with access tokens - directly retrieving the token and extracting token claims. Uses the Logto client to authenticate API requests for a shopping application endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naccessToken = await client.getAccessToken(\"https://shopping.your-app.com/api\")\n# 或\nclaims = await client.getAccessTokenClaims(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Illustrating Sign-in Flow with Sequence Diagram in Mermaid\nDESCRIPTION: A sequence diagram showing the authentication flow between a user, WordPress, and Logto during the sign-in process. It illustrates how a user is redirected from WordPress to Logto for authentication and then back to WordPress after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/wordpress-plugin/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant User\n    participant WordPress\n    participant Logto\n\n    User->>WordPress: Visit WordPress login page\n    WordPress->>Logto: Redirect to Logto for authentication\n    Logto->>User: Prompt for authentication\n    User->>Logto: Authenticate\n    Logto->>WordPress: Redirect back to WordPress with authentication data\n    WordPress->>User: Logged in\n```\n\n----------------------------------------\n\nTITLE: SAML Configuration Types Table\nDESCRIPTION: Table defining the configuration parameters for SAML authentication including endpoints, certificates, signing options, and timeouts. Each parameter is defined with its type, required status, and default value where applicable.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/saml/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                        | Type                                                                                                                                                                                                                                                                                                  | Required | Default Value                                           |\n| --------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ------------------------------------------------------- |\n| signInEndpoint              | string                                                                                                                                                                                                                                                                                                | true     |                                                         |\n| x509certificate             | string                                                                                                                                                                                                                                                                                                | true     |                                                         |\n| idpMetadataXml              | string                                                                                                                                                                                                                                                                                                | true     |                                                         |\n| entityID                    | string                                                                                                                                                                                                                                                                                                | true     |                                                         |\n| assertionConsumerServiceUrl | string                                                                                                                                                                                                                                                                                                | true     |                                                         |\n| messageSigningOrder         | `encrypt-then-sign` \\| `sign-then-encrypt`                                                                                                                                                                                                                                                            | false    | `sign-then-encrypt`                                     |\n| requestSignatureAlgorithm   | `http://www.w3.org/2000/09/xmldsig#rsa-sha1` \\| `http://www.w3.org/2001/04/xmldsig-more#rsa-sha256` \\| `http://www.w3.org/2001/04/xmldsig-more#rsa-sha512`                                                                                                                                            | false    | `http://www.w3.org/2001/04/xmldsig-more#rsa-sha256`     |\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Variable in JavaScript\nDESCRIPTION: This JavaScript code exports a constant variable named `connector` with the string value 'SAML enterprise SSO'. This variable is likely used within the MDX file or imported components to dynamically display the connector name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant named `connector` with the value 'Discord'. This constant is likely used within the MDX file or imported components to dynamically display the connector name (Discord) in the tutorial content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-discord.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Discord';\n```\n\n----------------------------------------\n\nTITLE: Defining EmailTemplate Type for Logto Localization\nDESCRIPTION: TypeScript definition of the EmailTemplate type used for creating custom email templates for different languages in Logto. It includes fields for language, template type, and email details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/email-connectors/email-templates.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmailTemplate = {\n  languageTag: string;\n  templateType: TemplateType;\n  details: {\n    subject: string;\n    content: string;\n    contentType?: 'text/html' | 'text/plain';\n    replyTo?: string;\n    sendFrom?: string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Organization Scope in Python\nDESCRIPTION: This snippet initializes a LogtoClient instance using a customized LogtoConfig, setting the authentication scopes to include only organizational user info. It requires the 'logto' Python SDK, and assumes that importable objects LogtoClient, LogtoConfig, and UserInfoScope are available in the environment. The code demonstrates how to pass configuration options, including adding 'scopes=[UserInfoScope.organizations]' to limit requested information, while placeholder comments indicate extensibility for other configurations. Expected output is an authenticated client ready for further identity operations; no explicit I/O occurs in this snippet.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import LogtoClient, LogtoConfig, UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-next-line\n        scopes=[UserInfoScope.organizations],\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Intro Component in MDX\nDESCRIPTION: This MDX code renders the `Intro` component, passing `connector` and `sdk` props. The `connector` prop receives the value of the previously exported variable ('SAML enterprise SSO'), and the `sdk` prop is set to 'Expo (React Native)'. The `link` prop provides a URL to the Expo documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"Expo (React Native)\" link=\"https://expo.dev\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using npm-like Installation Component for Logto SvelteKit SDK\nDESCRIPTION: This code imports a reusable component for npm-like installation instructions and renders it with the package name '@logto/sveltekit'. It's likely part of a documentation page for setting up Logto with SvelteKit.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/sveltekit\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet imports necessary components and renders a custom component for fetching access tokens for API resources. It uses a reusable fragment and a code snippet to construct the component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URIs for PHP Web Authentication\nDESCRIPTION: Setup example showing the assumed default URLs for local development in a PHP web application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:5000/sign-in-callback\n```\n\n----------------------------------------\n\nTITLE: Deploying UI Assets with Custom Domain\nDESCRIPTION: Command for deploying custom UI assets when using a custom domain, requiring management API resource specification.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/upload-custom-ui-assets-using-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/tunnel deploy --resource https://baz.logto.app/api --auth foo:bar --endpoint https://your.custom.domain --experience-path /path/to/your/custom/ui/dist\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes Documentation Components\nDESCRIPTION: MDX file that imports documentation fragments and renders a ScopesAndClaims component with configurable code examples passed as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Application Creation Component in MDX\nDESCRIPTION: Renders the 'CreateApplication' MDX component, specifying the application type ('Application monopage') and framework ('.NET Core (Blazor WebAssembly)') as props. This component guides the user through creating a new application in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<CreateApplication type=\"Application monopage\" framework=\".NET Core (Blazor WebAssembly)\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/chrome-extension using pnpm (Bash)\nDESCRIPTION: This command employs the pnpm package manager to install the Logto SDK for Chrome extensions. It adds the package as a dependency to your project, managing packages efficiently, often resulting in faster installations and saving disk space.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FetchOrganizationTokenForUser Component in React\nDESCRIPTION: This snippet imports the necessary components and renders the FetchOrganizationTokenForUser component with required props. It demonstrates how to set up the component for fetching an organization token for a user in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"urn:logto:scope:organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: Exports a JavaScript constant named `connector` holding the string value 'Google Workspace enterprise SSO'. This constant is likely used within the MDX file or related components to dynamically display or configure elements related to the specific SSO connector being discussed in the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Rendering Logto Information Component in JSX\nDESCRIPTION: This JSX code snippet renders an informational component about Logto, including descriptions of its services and recommendations for getting started. It uses conditional rendering and external props for customization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/fragments/_intro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{/* `prettier` は React コンポーネントをフォーマットし、行を分割するため、内容が見にくく読みづらくなります。 */}\n{/* eslint-disable prettier/prettier */}\n:::info 新しい友達のために\n\n<br />\n<br />\n[Logto](https://logto.io/) は、モダンなアプリや SaaS 製品向けに設計された Auth0 の代替です。\n[Cloud](https://cloud.logto.io/) と [オープンソース](https://github.com/logto-io/logto) の両方のサービスを提供し、アイデンティティと管理 (IAM) システムを迅速に立ち上げるのに役立ちます。認証 (Authentication)、認可 (Authorization)、マルチテナント管理を [すべて一つに](https://docs.logto.io/introduction) まとめて楽しんでください。\n\n[Logto Cloud](https://cloud.logto.io/) で無料の開発テナントから始めることをお勧めします。これにより、すべての機能を簡単に探索できます。\n:::\n\nこの記事では、<a href={props.link} target=\"_blank\" rel=\"noopener\">{props.sdk}</a> と [Logto](https://logto.io/) を使用して、{props.connector} サインイン体験（ユーザー認証 (Authentication)）を迅速に構築する手順を説明します。\n\n**前提条件**\n\n- 稼働中の Logto インスタンス。[紹介ページ](/introduction) をチェックして始めてください。\n- <a href={props.link} target=\"_blank\" rel=\"noopener\">{props.sdk}</a> の基本的な知識。\n- 使用可能な {props.connector} アカウント。\n{/* eslint-enable prettier/prettier */}\n```\n\n----------------------------------------\n\nTITLE: Rendering Save Configuration Component in MDX\nDESCRIPTION: This MDX/JSX snippet renders the `SaveYourConfiguration` component, likely defined in `./fragments/_save-your-configuration.mdx`. It passes the `connector` variable ('GitHub') as a prop to guide the user on saving the entered GitHub OAuth credentials within the Logto connector settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-github.mdx#2025-04-22_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Logto Tutorial\nDESCRIPTION: This code snippet imports various MDX fragments that compose the tutorial. It includes sections for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/_template-social.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/${sdkDocDir}/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/${connectorDocDir}/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resources Description in JSX\nDESCRIPTION: This snippet renders the imported ApiResourcesDescription component, which likely contains a description of API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiResourcesDescription />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Line Sign-In Tutorial\nDESCRIPTION: This code snippet imports various MDX components used throughout the tutorial. These components contain reusable content for different sections of the guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-line.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-server/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/line/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Using Intro Component in MDX\nDESCRIPTION: Renders the 'Intro' MDX component, passing 'Slack' (via the 'connector' variable) as the connector and 'Next.js (Pages Router)' as the SDK, along with a link to the Next.js website. This component displays introductory information tailored to integrating Slack sign-in with a Next.js (Pages Router) application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-slack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"Next.js (Pages Router)\" link=\"https://nextjs.org\" />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for API Resource Configuration\nDESCRIPTION: This snippet shows the import statements used in an MDX file to bring in reusable content fragments. Specifically, it imports a core component `ConfigApiResources` and several other MDX files (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) likely containing code examples for different API resource configuration scenarios.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue package with yarn\nDESCRIPTION: This command installs the Logto Vue SDK using yarn package manager. It adds the @logto/vue package to your project's dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Displaying User Claims with getServerSideProps and Logto SSR in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates server-side retrieval of user claims using Logto SSR integration with getServerSideProps in Next.js. It ensures the user is authenticated before rendering claims in a table on the frontend. Requires @logto/next and a configured logtoClient with SSR support. Expects user context injected into props; outputs claim information or null if unauthenticated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LogtoContext } from '@logto/next';\\nimport { logtoClient } from '../../libraries/logto';\\n\\ntype Props = {\\n  user: LogtoContext;\\n};\\n\\nconst Home = ({ user }: Props) => {\\n  const claims = useMemo(() => {\\n    if (!user.isAuthenticated || !user.claims) {\\n      return null;\\n    }\\n\\n    return (\\n      <div>\\n        <h2>声明 (Claims):</h2>\\n        <table>\\n          <thead>\\n            <tr>\\n              <th>名称</th>\\n              <th>值</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            {Object.entries(user.claims).map(([key, value]) => (\\n              <tr key={key}>\\n                <td>{key}</td>\\n                <td>{String(value)}</td>\\n              </tr>\\n            ))}\\n          </tbody>\\n        </table>\\n      </div>\\n    );\\n  }, [user]);\\n\\n  return (\\n    <div>\\n      {claims}\\n    </div>\\n  );\\n};\\n\\nexport default Home;\\n\\nexport const getServerSideProps = logtoClient.withLogtoSsr(async function ({ request }) {\\n  const { user } = request;\\n\\n  return {\\n    props: { user },\\n  };\\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Guide Components in MDX\nDESCRIPTION: MDX imports for guide components including a custom tip component and integration instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/email/aws-ses/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport GuideTip from '../../fragments/_guide-tip.mdx';\n\nimport Integration from './_integration.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources Component with Code Examples\nDESCRIPTION: Renders the ConfigApiResources component, passing the imported code snippets as props. This allows the component to display different examples of API resource configuration patterns.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Token Request Example (Bash)\nDESCRIPTION: Example of a token request that specifies the intended API resource target with authorization code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPOST https://tenant-id.logto.app/oidc/token HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&code=10esc29BWC2qZB0acc9v8zAv9ltc2pko105tQauZ&resource=https%3A%2F%2Fresource-server.com%2Fapi\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Utility Component in React JSX\nDESCRIPTION: This snippet uses the imported FetchAccessTokenForApiResources React fragment within a JSX context, setting two props: 'getAccessTokenApi' and 'getAccessTokenCode'. The first prop assigns the API identifier, while the second injects a code example component for obtaining access tokens. The expected input is a parent React environment, and the output is a rendered component with necessary code examples embedded. Proper importing of child components and code fragments is required for correct functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components with React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import a documentation fragment and a code snippet module, then render them in a composed React component. The imports leverage relative pathing to bring in an MDX fragment and a Markdown code sample, which are then passed as props to the \\u003CFetchAccessTokenForApiResources\\u003E React component. This approach requires a React/MDX documentation environment (such as Docusaurus or Next.js with MDX support), and expects the imported files to export valid React components. The input should be the correct fragment and code paths; the output is the rendered documentation block in the site.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation with Docusaurus and MDX Imports in JavaScript\nDESCRIPTION: This code snippet organizes a step-by-step tutorial for integrating X (Twitter) sign-in with PHP by importing MDX fragments for each section of the documentation. Dependencies include the Docusaurus framework and MDX files representing each tutorial step. The code sets up a guided documentation page structure but does not run backend logic or interact with the authentication workflow directly; it simply composes documentation content for display.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-x-twitter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/php/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/x/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Hugging Face OAuth Configuration Guide\nDESCRIPTION: Renders the ConnectorGuide component containing the specific instructions for setting up a Hugging Face OAuth application to work with the Logto authentication system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-hugging-face.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ConnectorGuide />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resource Configuration Examples using MDX\nDESCRIPTION: This MDX snippet demonstrates importing several MDX/Markdown components (`ConfigApiResources`, `ConfigResourcesCode`, etc.) and utilizing the `ConfigApiResources` component. It passes the other imported components as props (`configResourcesCode`, `configResourcesWithScopesCode`, `configResourcesWithSharedScopesCode`) to dynamically include different code examples related to API resource configuration within the rendered documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Assembling Logto Guide Components\nDESCRIPTION: Composes the guide structure using imported MDX components, creating sections for installation, client initialization, and authentication implementation with proper heading anchors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Init LogtoClient \\{#init-logtoclient}\n\n<InitClient />\n\n<ImplementSignInAndSignOut />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Using Documentation Fragments in JSX (React)\nDESCRIPTION: These snippets show the use of imported documentation fragments as React components within a larger JSX document. Props such as 'connector', 'sdk', 'type', and 'framework' are passed to provide dynamic customization. Components are arranged to compose an ordered documentation workflow for SSO integration. Inputs are provided via props, and outputs are displayed rendered documentation sections; constraints depend on .mdx compatibility with Docusaurus and React.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"Expo (React Native)\" link=\"https://expo.dev\" />\n\n<CreateApplication type=\"Native app\" framework=\"Expo\" />\n\n<IntegrateSdk />\n\n<AddSsoConnector framework=\"Expo\" />\n\n<ConnectorGuide />\n\n<SaveYourConfiguration connector={connector} />\n\n<EnableSsoConnector />\n\n<TestingAndValidation connector={connector} sdk=\"Expo (React Native)\" />\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing ScopesAndClaims Component in MDX (JavaScript)\nDESCRIPTION: This JavaScript import statement retrieves the `ScopesAndClaims` React component from a relative path within an MDX file. The imported component is responsible for rendering the main structural and textual content for the scopes and claims documentation section. It expects to be used within an MDX or React environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for SSO Documentation\nDESCRIPTION: MDX import statements for various documentation fragments related to Google Workspace SSO integration with Flutter, including setup instructions, configuration steps, and testing procedures.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/google-workspace/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Code Snippets in Next.js\nDESCRIPTION: Imports two code snippet files for configuring organizations and getting organization access tokens, which will be passed to the documentation component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources Component in MDX\nDESCRIPTION: Component integration code that imports configuration fragments and assembles them into a ConfigApiResources component with specific code props for resources, scopes, and shared scopes configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring MDX Components for Scopes Documentation\nDESCRIPTION: Imports two MDX fragments and composes them by passing one as a prop to the other component to create the complete documentation view.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in Next.js Docs - JavaScript\nDESCRIPTION: Imports modular MDX fragments and guides to compose the SSO authentication documentation page. Dependencies include path-resolved MDX content components and guides, and the named Logto connector. Each import represents a step or section of the documentation to be rendered in the final page. This modular structure allows for content reuse and easy maintenance, with all import paths being relative to the project structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport FrameworkGuide from '@site/docs/quick-starts/framework/next/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/docs/integrations/sso/entra-id-oidc/_integration.mdx';\\n\\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto CLI globally with pnpm\nDESCRIPTION: Installs the Logto CLI package globally using pnpm package manager, making the 'logto' command available system-wide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g @logto/cli\n```\n\n----------------------------------------\n\nTITLE: Installing python-jose Package for JWT Validation\nDESCRIPTION: Command to install the python-jose package with ECDSA support, which is used for JWT validation in the authentication process. The ECDSA algorithm is the default cryptography option in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install python-jose[ecdsa]\n```\n\n----------------------------------------\n\nTITLE: Structuring Tutorial Content with MDX Components\nDESCRIPTION: Utilizes various imported MDX components (`Intro`, `CreateApplication`, `FrameworkGuide`, etc.) to structure the tutorial content for setting up SAML SSO with Next.js. Each component renders a specific section or step of the integration guide, accepting props like `connector`, `sdk`, `framework`, and `type` to tailor the displayed information. This modular approach uses reusable documentation fragments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"Next.js (Pages Router)\" link=\"https://nextjs.org\" />\n\n## Create an application in Logto {#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\"Next.js\" />\n\n## Integrate Next.js with Logto {#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add SAML enterprise SSO connector {#add-connector-connector}\n\n<AddSsoConnector framework=\"Next.js\" />\n\n## Set up SAML SSO application on your IdP {#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration {#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable SAML enterprise SSO connector in Sign-in Experience {#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation {#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"Next.js (Pages Router)\" />\n\n## Further readings {#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Commenting Documentation File Structure and TOC Workaround - JavaScript\nDESCRIPTION: This commented snippet explains the rationale behind splitting the documentation into sections to influence the Table of Contents (TOC) display in Docusaurus-powered sites. There are no functional dependencies but it pertains to documentation architecture decisions. The snippet highlights known Docusaurus limitations and references a related GitHub issue for further context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/*\\n  We have to divide templates into sections because imported mdx will not show in the TOC.\\n  There's no way to customize TOC either. :-)\\n\\n  @see https://github.com/facebook/docusaurus/issues/3915\\n*/}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments with React and MDX in JavaScript\nDESCRIPTION: This code snippet uses ES6 import statements to incorporate various documentation fragments—written in MDX and JavaScript—into the main file. Each import references a thematic content fragment (e.g., introduction, configuration steps, further readings) for stepwise assembly of the authentication guide. Dependencies include Node.js, React, and MDX support within the project's build process. This structure supports a modular documentation system, where each fragment can be updated independently, and is utilized for building the full instructional workflow with proper context and navigation in Docusaurus-based documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-facebook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-razor/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/facebook/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Component Fragments\nDESCRIPTION: Imports various MDX components from relative paths (./fragments/) and site-specific paths (@site/). These components likely contain reusable sections of the documentation guide, such as introduction, application creation steps, connector configuration details, etc. This pattern promotes modularity in the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/php/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet demonstrates the usage of the DocCardList component to create a list of documentation links with icons and descriptions. It's used to organize and present various sections of the Logto OSS documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/logto-oss/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'OSS 시작하기',\n      href: '/logto-oss/get-started-with-oss',\n      description: 'Logto OSS 버전을 초기화하는 단계별 가이드입니다.',\n      customProps: {\n        icon: <RocketIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: '배포 및 구성',\n      href: '/logto-oss/deployment-and-configuration',\n      description: '프로덕션 환경에서 Logto를 배포하기 위한 모범 사례 및 자세한 단계입니다.',\n      customProps: {\n        icon: <GearIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resource Configuration Documentation with MDX\nDESCRIPTION: This snippet utilizes the imported `ConfigApiResources` component in JSX syntax. It passes instances of the imported code example components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) as props to the main component. This allows the `ConfigApiResources` component to dynamically include and render these specific code examples within the appropriate sections of the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Vue and SendGrid Integration Guide\nDESCRIPTION: This code snippet renders the imported MDX components, passing necessary props to create a structured guide for integrating SendGrid Email passwordless sign-in with Vue and Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vue-sendgrid.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"Vue\" link=\"https://vuejs.org\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Single page app\" framework=\"Vue\" />\n\n## Integrate Vue with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add SendGrid connector \\{#add-connector-connector}\n\n<AddPasswordlessConnector\n  connector={connector}\n  connectorType=\"Email\"\n  passwordlessSignUpIdentifier=\"Email address\"\n/>\n\n## Set up SendGrid email connector \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable SendGrid connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnablePasswordlessConnector\n  connectorType=\"Email\"\n  passwordlessSignUpIdentifier=\"Email address\"\n/>\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"Vue\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Saving Component for Hugging Face\nDESCRIPTION: Renders the SaveYourConfiguration component with the Hugging Face connector parameter, providing instructions on saving the connector settings in the Logto dashboard.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-hugging-face.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamic Content in JSX\nDESCRIPTION: This code snippet demonstrates how to display dynamic content within a JSX code block. It uses a props variable to render a specific calling method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_sign-in-note.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<code>{props.calling}</code>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components\nDESCRIPTION: React/MDX code that imports documentation fragments and renders a component for displaying access token fetching functionality with specific props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Google Workspace SSO Connector Name - JavaScript\nDESCRIPTION: This snippet defines and exports a constant named 'connector', which holds the string identifier for the Google Workspace Enterprise SSO connector. This export is designed to be reused across documentation fragments, ensuring that the connector name remains consistent throughout the assembled documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-server-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ConfigApiResources Component in JSX\nDESCRIPTION: This code imports necessary MDX fragments and code snippets, then renders the ConfigApiResources component with the imported code snippets as props. The component demonstrates different configurations for API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Components\nDESCRIPTION: React code that imports necessary components and renders FetchOrganizationTokenForUser with required props for organization token management and configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out in Express\nDESCRIPTION: Creating a route to sign out users by clearing their session tokens in an Express application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/sign-out', (req, res) => {\n  req.session.tokens = null;\n  res.send('Sign out successful');\n});\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Access Token Documentation\nDESCRIPTION: This snippet imports two MDX components: `FetchAccessTokenForApiResources` from a relative path and `GetAccessTokenCode` from a local subdirectory. These components are likely used to structure and display documentation content related to fetching access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-In and Sign-Out Routes in Rails\nDESCRIPTION: Route configuration for sign-in and sign-out endpoints in a Rails application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-start\n  get \"/sign_in\", to: \"sample#sign_in\"\n  get \"/sign_out\", to: \"sample#sign_out\"\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in MDX (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import various MDX documentation fragments and guides into the main documentation file. It includes both local and shared components for modular rendering of instructional content. Dependencies include a working MDX environment, Docusaurus/React dynamic importing, and a valid file system referencing the specified paths. The expected output is to provide reusable sections such as introduction, setup guides, and configuration steps for the documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-slack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/php/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/slack/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: MDX Template Structure for SSO Integration Guide\nDESCRIPTION: Fragment imports and structure for creating a Single Sign-On integration guide. The template uses placeholder variables like ${connector}, ${sdk}, and ${framework} that are replaced with specific values when the document is rendered.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/_template-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/${sdkDocDir}/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/${connectorDocDir}/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = '${connector}';\n\n{/* truncate */}\n\n<Intro connector={connector} sdk=\"${sdk}\" link=\"${sdkOfficialLink}\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"${appType}\" framework=\"${framework}\" />\n\n## Integrate ${framework} SDK \\{#integrate-framework-sdk}\n\n<IntegrateSdk />\n\n## Add ${connector} connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\"${framework}\" />\n\n## Set up ${connectorConfigName} \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable ${connector} connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"${sdk}\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM Installation Fragment Component\nDESCRIPTION: React/MDX code that imports and renders a reusable component for displaying npm-like installation instructions for Passport.js packages\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"passport passport-openidconnect\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Code Samples for Organization Configuration and Access Token (JavaScript)\nDESCRIPTION: This snippet imports markdown files containing code samples for configuring an organization and fetching its access token. These markdown imports are used to display example implementations or documentation within the composed React/MDX page. Proper handling of markdown imports in the build setup is required to render them in a React/MDX context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing Logto Authentication Components\nDESCRIPTION: Import statements for various Logto authentication-related components and code fragments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiResourcesDescription from '../../fragments/_api-resources-description.md';\nimport ConfigApiResources from '../../fragments/_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from '../../fragments/_fetch-access-token-for-api-resources.mdx';\nimport FetchOrganizationTokenForUser from '../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.mdx';\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.mdx';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.mdx';\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage Provider\nDESCRIPTION: CLI command to configure Google Cloud Storage with project ID, key filename, and bucket settings\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/file-storage-provider.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm logto db system set storageProvider '{\"provider\":\"GoogleStorage\",\"projectId\":\"psychic-trainer-403801\",\"keyFilename\":\"google-storage-key.json\",\"bucketName\":\"logto-test2\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting Connector String Constant - JavaScript\nDESCRIPTION: Defines and exports a string constant containing the connector's name for consistent reuse throughout the documentation and configuration sections. The exported 'connector' constant is used as a prop in MDX components for content customization and reuse. There are no external dependencies for this constant except its usage context in other code or documentation fragments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Embedding Documentation Fragments as MDX Sections (MDX)\nDESCRIPTION: This snippet demonstrates the embedding of imported MDX components as sections in the documentation, allowing the assembly of modular, interactive, and localized guide content for SAML SSO integration with Android. Each section corresponds to a particular step and may receive props to customize its displayed content. Dependencies are the imported MDX fragments and adequate MDX support in the documentation toolchain.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-android-saml-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<Intro connector={connector} sdk=\"Android (Kotlin / Java)\" link=\"https://developer.android.com\" />\n\n<CreateApplication type=\"Native app\" framework=\"Android\" />\n\n<IntegrateSdk />\n\n<AddSsoConnector framework=\"Android\" />\n\n<ConnectorGuide />\n\n<SaveYourConfiguration connector={connector} />\n\n<EnableSsoConnector />\n\n<TestingAndValidation connector={connector} sdk=\"Android (Kotlin / Java)\" />\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing React Documentation Components\nDESCRIPTION: Imports MDX components for building the documentation structure including guide tips, installation instructions, and integration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.mdx';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Installation {#installation}\n\n<Installation />\n\n### Integration {#integration}\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchOrganizationTokenForUser Component in React\nDESCRIPTION: This snippet demonstrates how to use the FetchOrganizationTokenForUser component, passing necessary props including the organization scope and imported code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: MDX Import Declarations for Documentation Components\nDESCRIPTION: Import statements for various MDX documentation fragments used to compose the tutorial guide. These imports include components for different sections like introduction, application creation, SSO connector setup, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-react-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/google-workspace/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Documentation Card List Component\nDESCRIPTION: JSX component structure for displaying documentation cards with links to various Logto tools and resources\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/introduction/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Logto Console',\n      href: 'https://cloud.logto.io',\n      description:\n        'A web-based interface for configuring and managing resources, offering a quick setup for sign-in experience and easy identity management.',\n      customProps: {\n        icon: <LogtoConsoleIcon />,\n      },\n    },\n    // Additional items...\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Documentation Component in JSX\nDESCRIPTION: Renders the FetchOrganizationTokenForUser component with props specifying the organization scope and passing the imported code snippets as JSX elements.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering TestingAndValidation Component in MDX\nDESCRIPTION: This MDX code renders the `TestingAndValidation` component, passing the `connector` prop ('SAML enterprise SSO') and the `sdk` prop ('Expo (React Native)'). This component provides steps and guidance for testing the configured SAML SSO integration with the Expo application, imported from './fragments/_testing-and-validation.mdx'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-saml-enterprise-sso.mdx#2025-04-22_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\"Expo (React Native)\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Logto Integration in Express\nDESCRIPTION: Commands to install the required dependencies for integrating Logto authentication in an Express.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/js node-fetch@v2 express-session js-base64\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/js node-fetch@v2 express-session js-base64\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/js node-fetch@v2 express-session js-base64\n```\n\n----------------------------------------\n\nTITLE: Exporting React Constant for Connector Variable (JavaScript)\nDESCRIPTION: This snippet exports a constant for the connector type 'Line', making it accessible to downstream components in the MDX file. This dependency is used by various imported fragments to maintain context and reusability throughout the document. It enables consistent reference to the 'Line' connector when rendering child components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-line.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Line';\n```\n\n----------------------------------------\n\nTITLE: MDX Component Imports and Configuration\nDESCRIPTION: Imports various MDX components and sets up configuration for the tutorial documentation structure. Includes fragment imports for different sections of the guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-saml.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/go/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/saml/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'SAML';\n```\n\n----------------------------------------\n\nTITLE: Using FetchOrganizationTokenForUser Component in MDX\nDESCRIPTION: This snippet shows the usage of the `FetchOrganizationTokenForUser` React/MDX component. It's configured with the `organizationScope` prop set to 'core.UserScopeOrganizations' and receives references to code example components (`ConfigOrganizationCode`, `GetOrganizationAccessTokenCode`) via props. This component renders a documentation section based on these inputs, likely incorporating the code provided by the passed components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Inserting Note with Code Reference in Markdown\nDESCRIPTION: This Markdown snippet inserts a note block that references the previously defined 'defaultBaseUrl'. It informs readers that subsequent code examples will assume the application is running on the specified base URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_web-assuming-url.mdx#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n:::note\nIn the following code snippets, we assume your app is running on <code>{defaultBaseUrl}</code>.\n:::\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in LogtoConfig for Android\nDESCRIPTION: This snippet demonstrates how to configure additional scopes when initializing the LogtoConfig object in an Android application. It shows how to request email and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val logtoConfig = LogtoConfig(\n    // ...다른 설정\n    scopes = listOf(\"email\", \"phone\"), // 또는 `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components for React Integration Guide\nDESCRIPTION: This code imports custom MDX components used to structure the Logto React integration guide. It includes components for displaying tips, installation instructions, and integration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.mdx';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components\nDESCRIPTION: Import statements for organization token-related MDX components and code snippets that are used in the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_organization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport GetOrganizationAccessTokenCode from './code-snippets/_get-organization-access-token.md';\nimport ConfigOrganizationCode from './code-snippets/_organization-config-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig with Custom Scopes and Resources in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object with custom scopes and resources. It sets up read and write scopes, and specifies API endpoints for shopping and store resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(\"read\", \"write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Importing React Documentation Components\nDESCRIPTION: Imports modular documentation components for Logto React SDK guide, including tips, installation instructions, and integration steps\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.mdx';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Integration \\{#integration}\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for API Resource Configuration\nDESCRIPTION: This JavaScript/MDX code imports several MDX fragments. `ConfigApiResources` is likely a layout or container component, while the others (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) probably contain specific code examples related to configuring API resources in different ways (basic, with scopes, with shared scopes). These imports prepare the components for use later in the file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Rendering CreateApplication Component in MDX\nDESCRIPTION: This MDX code renders the `CreateApplication` component. It passes the `type` prop set to 'Native app' and the `framework` prop set to 'Expo', likely to display instructions specific to creating a native application for the Expo framework within Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-saml-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<CreateApplication type=\"Native app\" framework=\"Expo\" />\n```\n\n----------------------------------------\n\nTITLE: Sample API Response Format\nDESCRIPTION: Example JSON response showing the structure of returned user data\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/advanced-user-search.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"MgUzzDsyX0iB\",\n    \"username\": \"alice_123\",\n    \"primaryEmail\": \"alice@some.email.domain\",\n    \"primaryPhone\": null,\n    \"name\": null,\n    \"avatar\": null\n    // ...\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling API Resource Configuration Documentation Components\nDESCRIPTION: This code imports MDX fragments and code snippet files, then assembles them in a ConfigApiResources component to create documentation about configuring API resources in Logto. It demonstrates the modular documentation approach used in the Logto docs repository.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering SaveYourConfiguration Component for Apple Sign-in\nDESCRIPTION: JSX code that renders the SaveYourConfiguration component with the connector prop to guide users on saving their Apple connector configuration in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for OAuth2 Sign-In Tutorial\nDESCRIPTION: This code snippet imports various MDX fragments to compose the tutorial content. It includes sections for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-oauth2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-server/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/oauth2/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'OAuth2';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Microsoft Entra ID OIDC SSO Guide\nDESCRIPTION: This code snippet imports various MDX fragments used to construct the tutorial for implementing Microsoft Entra ID OIDC enterprise SSO with Expo (React Native) and Logto. It includes sections for introduction, application creation, SSO connector setup, configuration, testing, and further reading.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List in JSX\nDESCRIPTION: This JSX snippet renders a list of documentation cards using the DocCardList component. Each card represents a different aspect of Logto customization, including brand matching, custom CSS, custom UI, language support, and live preview.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Match your brand',\n      href: '/customization/match-your-brand',\n      description:\n        'Learn how to customize the basic brand elements for a ready-to-use sign-in experience.',\n      customProps: {\n        icon: <CustomizationIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Logto SDK Organization Access Component\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component with necessary props to demonstrate organization token fetching for a user. It includes configuration for organization scope and references to code snippets for organization configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organisations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in JSX/MDX\nDESCRIPTION: Imports various MDX fragments and code snippets for API resource configuration documentation. The file uses these imports to assemble a complete documentation page about configuring API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant in JavaScript\nDESCRIPTION: This JavaScript code snippet, located within an MDX file, exports a constant named 'connector' assigned the string value 'GitHub'. This constant is likely used throughout the document or passed as a prop to imported components (e.g., Intro, AddSocialConnector) to dynamically specify the social connector being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'GitHub';\n```\n\n----------------------------------------\n\nTITLE: Composing Organization Token Documentation Components\nDESCRIPTION: Imports and renders documentation components related to organization token management, including configuration and token fetching functionality. Uses MDX fragments to organize the documentation structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Fetching Component in React\nDESCRIPTION: This snippet demonstrates the usage of the FetchOrganizationTokenForUser component, passing in the required props including the organization scope and imported code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing NPM Installation Fragment in React/MDX\nDESCRIPTION: Imports a reusable MDX fragment component for NPM-like package installation instructions and renders it with the Logto React SDK package name\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/react\" />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments in JSX\nDESCRIPTION: This code snippet demonstrates the import of various MDX fragments and components used throughout the tutorial. It includes imports for different sections of the guide, such as introduction, application creation, social connector setup, and framework-specific guidance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-hugging-face.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/hugging-face/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in MDX/JavaScript\nDESCRIPTION: This JavaScript code snippet, typically used within an MDX file, exports a constant named 'connector'. This constant holds the string value 'OIDC enterprise SSO' and is likely used throughout the document or its components to dynamically refer to the specific SSO connector type being discussed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-mvc-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Google Sign-In Tutorial\nDESCRIPTION: This code imports various MDX fragments to structure the tutorial content. It includes sections for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-google.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/google/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Google';\n```\n\n----------------------------------------\n\nTITLE: Rendering SaveYourConfiguration Component in MDX\nDESCRIPTION: This MDX code renders the `SaveYourConfiguration` component, passing the `connector` prop with the value of the previously exported variable ('SAML enterprise SSO'). This component likely provides instructions on saving the connector configuration within Logto, imported from './fragments/_save-your-configuration.mdx'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-saml-enterprise-sso.mdx#2025-04-22_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Vanilla JS\nDESCRIPTION: Create and initialize a LogtoClient instance with the necessary configuration for a Vanilla JavaScript application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  endpoint: 'https://example.logto.app',\n  appId: 'replace-with-your-application-id',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code snippets as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Scope Claim List Component in JSX\nDESCRIPTION: Imports a reusable markdown component that likely displays the relationship between OAuth scopes and user claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_fetch-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopeClaimList from './_scope-claim-list.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Components\nDESCRIPTION: Sets up organization token fetching by importing required components and configuring the FetchOrganizationTokenForUser component with scope and code blocks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using UserScope Enum for Scope Configuration in PHP\nDESCRIPTION: Demonstrates an alternative approach to requesting additional scopes by using the UserScope enum, which provides type safety when specifying the scopes to request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// highlight-next-line\nuse Logto\\Sdk\\Constants\\UserScope;\n\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...outras configurações\n    // highlight-next-line\n    scopes: [UserScope::email, UserScope::phone], // Atualize conforme suas necessidades\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Icons and Components in JSX\nDESCRIPTION: This code snippet imports various SVG icons and a custom Admonition component for use in the documentation page. These imports are typically used in React-based documentation frameworks like Docusaurus.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CentralCacheIcon from '@site/src/assets/central-cache.svg';\nimport CliIcon from '@site/src/assets/cli.svg';\nimport ConnectorsIcon from '@site/src/assets/connectors.svg';\nimport DocumentIcon from '@site/src/assets/document.svg';\nimport FileStorageIcon from '@site/src/assets/file-storage.svg';\nimport GearIcon from '@site/src/assets/gear.svg';\nimport RocketIcon from '@site/src/assets/rocket.svg';\nimport UpdateIcon from '@site/src/assets/update.svg';\nimport Admonition from '@theme/Admonition';\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-In and Sign-Out Routes in Rails\nDESCRIPTION: This snippet shows how to configure routes for sign-in and sign-out actions in a Rails application. It sets up GET routes for both '/sign_in' and '/sign_out' paths.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-start\n  get \"/sign_in\", to: \"sample#sign_in\"\n  get \"/sign_out\", to: \"sample#sign_out\"\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript snippet defines and exports a constant string variable named `connector`. The variable holds the value 'Microsoft Entra ID OIDC enterprise SSO' and is likely used elsewhere in the MDX document or its imported components to reference the specific SSO connector being configured in this tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript/MDX\nDESCRIPTION: This snippet exports a JavaScript constant named `connector` with the value 'Microsoft Entra ID SAML enterprise SSO'. This constant is likely used within the MDX document or its imported components to dynamically display or refer to the specific SSO connector being discussed in the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-server-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Setting Post Sign-out Redirect URI Parameter\nDESCRIPTION: Code showing the dynamic parameter for post sign-out redirect URI that needs to be configured in Logto Console application settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_configure-post-sign-out-redirect-uri.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{props.postSignOutRedirectUri}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components\nDESCRIPTION: Imports code fragments and renders them using the ConfigApiResources component to display different API resource configuration examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Decorator for Flask Routes in Python\nDESCRIPTION: This code implements an authentication decorator for Flask routes that verifies if a user is authenticated before allowing access to protected routes. It can optionally redirect unauthenticated users to the sign-in page and fetch user information from either ID token claims or the userinfo endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom flask import g, jsonify, redirect\nfrom samples.client import client\ndef authenticated(shouldRedirect: bool = False, fetchUserInfo: bool = False):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            if client.isAuthenticated() is False:\n                if shouldRedirect:\n                    return redirect(\"/sign-in\")\n                return jsonify({\"error\": \"Not authenticated\"}), 401\n            # Armazenar informações do usuário no contexto do aplicativo Flask\n            g.user = (\n                await client.fetchUserInfo()\n                if fetchUserInfo\n                else client.getIdTokenClaims()\n            )\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Using Organization Token Component\nDESCRIPTION: JSX component usage showing how to implement the organization token fetching functionality with specific props and configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_organization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"LogtoUserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Status in Flutter with Logto\nDESCRIPTION: This code snippet shows how to check and handle the authentication status using the Logto SDK in a Flutter application. It demonstrates updating the UI based on the authentication state and conditionally rendering sign-in or sign-out buttons.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n  bool? isAuthenticated = false;\n\n  void render() {\n    setState(() async {\n      isAuthenticated = await logtoClient.isAuthenticated;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            isAuthenticated == true ? signOutButton : signInButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering WordPress Framework Integration Guide\nDESCRIPTION: Renders the FrameworkGuide component that contains specific instructions for integrating the WordPress plugin with Logto authentication system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-hugging-face.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FrameworkGuide />\n```\n\n----------------------------------------\n\nTITLE: Constructing Basic Fuzzy Search Parameters in JavaScript\nDESCRIPTION: This snippet shows how to create URLSearchParams for a basic fuzzy search across all available fields in Logto user search.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([['search', '%foo%']]);\n```\n\n----------------------------------------\n\nTITLE: Embedding Access Token Example Documentation as a React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to embed the fetched documentation and code fragments as children and props in a higher-order React component. It supplies the API function name and code sample as properties. It requires that the imported MDX and Markdown files provide valid React components and that the consuming environment supports JSX.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generic Configuration for Organization Token\nDESCRIPTION: Configuration example for obtaining organization tokens without using Logto SDK\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Only for other cases. For Logto SDKs, see above.\nconst config = {\n  // ...\n  scope: 'openid offline_access urn:logto:scope:organizations',\n  resource: 'urn:logto:resource:organizations',\n};\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for WordPress OAuth2 Integration Guide\nDESCRIPTION: This code imports various MDX fragments that make up different sections of the guide. It includes introductory content, application creation steps, social connector setup, configuration saving, enabling the connector, testing procedures, and framework-specific guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-oauth2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/wordpress-plugin/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/oauth2/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Visualizing OIDC Authentication Flow with Logto\nDESCRIPTION: This sequence diagram illustrates the complete authentication flow between a user, client application, and Logto components. It shows the process from initial app opening through authorization request, sign-in, and token acquisition.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-up-and-sign-in/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  actor user as User\n  participant client as Client app\n\n  box Logto\n    participant experience as experience app\n    participant oidc as OIDC provider\n  end\n\n  user ->> client: Open app\n  client ->> oidc: Send authorization request: post /authorize\n  oidc -->> client: Prompt user to sign in\n  client ->> experience: Redirect to sign-in page\n  user ->> experience: Sign in\n  experience ->> oidc: Assign interaction result: post /experience/submit\n  oidc -->> experience: Authenticated and redirect to client app\n  experience ->> client: Post sign-in redirect:  post /callback?code=...\n  client ->> oidc: Send token request: post /token\n  oidc -->> client: Return token\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Instructions in JSX\nDESCRIPTION: This snippet imports necessary components and renders a custom component for fetching an access token. It uses a reusable fragment for common instructions and includes a specific code snippet for getting the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Fragment Components for React Native Logto Guide\nDESCRIPTION: This code imports various fragment components that contain implementation details for Logto integration with React Native applications. The fragments include checkpoints, installation instructions, client initialization, and sign-in/sign-out implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport GuideTip from './_guide-tip.mdx';\nimport ImplementSignInAndSignOut from './_implement-sign-in-and-sign-out.mdx';\nimport InitClient from './_init-client.mdx';\nimport Installation from './_installation.mdx';\n\n<GuideTip />\n\n### 安裝 \\{#installation}\n\n<Installation />\n\n### 初始化 LogtoClient \\{#init-logtoclient}\n\n<InitClient />\n\n<ImplementSignInAndSignOut />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in MDX with TypeScript (TSX)\nDESCRIPTION: This code snippet demonstrates how to import various MDX and TypeScript fragments to modularize documentation content for Docusaurus. It includes importing intro, application creation, connector integration, social connector setup, and other reusable content sections. Dependencies include Docusaurus and an MDX-compatible build system, and the imported fragments are utilized to structure the overall documentation flow. No business logic is executed here; imports are used only for structuring the page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-naver.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/go/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/naver/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Documentation Fragments with React JavaScript\nDESCRIPTION: This snippet imports multiple MDX fragment files and documentation aids into the main documentation file using JavaScript import syntax. Each imported module represents a section of the guide, such as introductory steps, creating Logto applications, configuring the Naver connector, and final testing. These fragments are then composed as custom elements in the rendered documentation. No external dependencies beyond MDX and React are required. The imports rely on the project-specific folder structure and Docusaurus support for MDX.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-naver.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/naver/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension SDK with pnpm - Bash\nDESCRIPTION: This snippet details how to add the @logto/chrome-extension package to a project using pnpm. It is necessary to have pnpm installed in the environment prior to running the command. Executing this command will register the Logto Chrome extension SDK as a dependency within the current node.js-based project. No further configuration is required for this installation step.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Organization Token Components in React/MDX\nDESCRIPTION: Imports organization token related components and renders FetchOrganizationTokenForUser component with configuration and token fetching code props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling API Resource Configuration Components in React/JSX\nDESCRIPTION: Imports various MDX fragments and code examples related to API resource configuration, then assembles them into a ConfigApiResources component. The imports include configuration patterns for basic resources, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Social Connectors List with DocCardList\nDESCRIPTION: JSX component implementation that displays OAuth 2.0 and OIDC custom connector options as cards with icons, labels, and descriptions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/social.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n```mdx-code-block\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'OAuth 2.0',\n      href: '/integrations/oauth2',\n      description: 'The official Logto connector for OAuth 2.0 protocol.',\n      customProps: {\n        icon: <OAuth2 />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'OIDC',\n      href: '/integrations/oidc',\n      description: 'The official Logto connector for OAuth 2.0 protocol.',\n      customProps: {\n        icon: <OIDC />,\n      }\n    },\n  ]}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in MDX/JavaScript\nDESCRIPTION: Exports a constant JavaScript variable named 'connector' with the string value 'OIDC enterprise SSO'. This constant is likely used within the MDX document or imported components to dynamically pass the connector name, ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Using MDX Components for Structured Content Inclusion\nDESCRIPTION: Utilizes custom MDX components (e.g., `Intro`, `CreateApplication`, `FrameworkGuide`) to import and render modular content sections from external '.mdx' files. Props such as `connector`, `sdk`, `type`, `framework`, and `link` are passed to these components to tailor the included content specifically for the Facebook connector and Expo (React Native) SDK context within this tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-facebook.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"Expo (React Native)\" link=\"https://expo.dev\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<CreateApplication type=\"Native app\" framework=\"Expo\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<FrameworkGuide />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<AddSocialConnector connector={connector} framework=\"Expo\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<ConnectorGuide />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<EnableSocialConnector connector={connector} />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\"Expo (React Native)\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Components in React JSX\nDESCRIPTION: Renders the imported markdown components in sequence to create a complete guide. Includes a heading for the installation section in Japanese with an ID for anchor linking.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideTip />\n\n### インストール \\{#installation}\n\n<Installation />\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Inline File-Level Comment: Section Division for TOC - JavaScript\nDESCRIPTION: Provides an in-file contextual comment explaining the rationale for dividing documentation templates into separate sections to optimize the table of contents (TOC) behavior. Offers additional reference to a relevant GitHub issue for maintainers. The comment does not affect runtime behavior but aids in maintainability for contributors to the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-kakao.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList for Logto Email Service\nDESCRIPTION: MDX code that renders a DocCardList component displaying the Logto Email Service connector option with its icon, description, and link.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/connectors/email-connectors/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Logto Email Service',\n      href: '/connectors/email-connectors/built-in-email-service',\n      description: 'Official connector for Logto Email Service.',\n      customProps: {\n        icon: <LogtoEmailService />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation Page with Docusaurus and MDX - JavaScript\nDESCRIPTION: This snippet configures the structure of a Docusaurus documentation page using MDX components and import statements. It organizes content by importing various documentation fragments (MDX files) and rendering them into custom sections, enabling granular navigation and easier maintenance. The approach relies on template strings and fragment-based documentation, requiring Docusaurus, React, and MDX loader dependencies with related file paths being resolvable in the project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport FrameworkGuide from '@site/docs/quick-starts/framework/flutter/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/docs/integrations/sso/okta/_integration.mdx';\\n\\nimport FurtherReadings from './fragments/_further-readings.mdx';\\n\\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for Microsoft Entra ID OIDC SSO\nDESCRIPTION: This code snippet defines a constant 'connector' with the value 'Microsoft Entra ID OIDC enterprise SSO'. This variable is used throughout the document to refer to the specific SSO connector being implemented.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-next-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Binding Social Identity in Logto\nDESCRIPTION: This sequence diagram illustrates the process of binding a social identity to a user account in Logto, including interactions with the social identity provider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autoNumber\n    participant User as User\n    participant Client as Client app\n    participant App as server app\n    participant Logto as Logto\n    participant IdP as Social identity provider\n\n    User ->> Client: Access client app request to bind social identity\n    Client ->> App: Send request to bind social identity\n    App ->> Logto: POST /api/connectors/{connectorId}/authorization-uri\n    Logto ->> App: Authorization URI\n    App ->> Client: Return authorization URI\n    Client ->> IdP: Redirect to IdP authorization page\n    User -->> IdP: Sign in to IdP\n    IdP ->> Client: Redirect to client app with authorization code\n    Client ->> Server: Link social identity request, forward IdP authorization response\n    Server ->> Logto: POST /api/users/{userId}/identities\n    Logto ->> IdP: Get user info from IdP using authorization code\n    IdP ->> Logto: Return user info\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code snippets as props. It demonstrates how to set up the configuration for API resources in a Logto project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing a Fragment Component in Next.js - JavaScript\nDESCRIPTION: This snippet imports the NpmLikeInstallation component from a relative path '../../fragments/_npm-like-installation.mdx'. It assumes a project layout where documentation fragments are separated for reuse. This import is necessary to use the premade component within this file. Requires a React/Next.js-compatible environment and that the referenced file exists.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments in JSX\nDESCRIPTION: This code snippet demonstrates the import statements used to include various MDX fragments and components in the tutorial. It shows how different sections of the guide are modularized for better organization and reusability.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Components in MDX\nDESCRIPTION: Demonstrates the import and usage of MDX components for handling API access token functionality. The code shows importing fragment components and rendering them with specific props for token management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing NpmLikeInstallation Component in MDX\nDESCRIPTION: This JavaScript code, used within an MDX file, imports the `NpmLikeInstallation` component from a relative path (`../../fragments/_npm-like-installation.mdx`). This component is designed to display standardized installation instructions for npm-compatible packages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Installing python-jose Library for JWT Validation\nDESCRIPTION: Command to install the python-jose library with ECDSA support, which is needed for validating JSON Web Tokens issued by Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install python-jose[ecdsa]\n\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList and Icons for Email Connectors in MDX\nDESCRIPTION: MDX code block that imports the DocCardList component and various email service icons to be used in the documentation for displaying connector options.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/connectors/email-connectors/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport LogtoEmailService from '@site/docs/connectors/assets/icons/logto-email-service.svg';\nimport AwsDm from '@site/docs/connectors/assets/icons/aws-direct-mail.svg';\nimport SendGrid from '@site/docs/connectors/assets/icons/sendgrid.svg';\nimport Mailgun from '@site/docs/connectors/assets/icons/mailgun.svg';\nimport Postmark from '@site/docs/connectors/assets/icons/postmark.svg';\nimport AliyunDm from '@site/docs/connectors/assets/icons/aliyun-direct-mail.svg';\nimport Smtp from '@site/docs/connectors/assets/icons/smtp.svg';\nimport Http from '@site/docs/connectors/assets/icons/http.svg';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Variable in MDX\nDESCRIPTION: This JavaScript code within an MDX file exports a constant variable named 'connector' with the string value 'Apple'. This variable is likely used by imported components within the same MDX file to dynamically display content related to the Apple connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-apple.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Apple';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK and dependencies using Yarn\nDESCRIPTION: This snippet demonstrates how to install the Logto SDK (@logto/rn) and its peer dependencies using Yarn. It includes expo-crypto, expo-secure-store, expo-web-browser, and @react-native-async-storage/async-storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/rn\nyarn add expo-crypto expo-secure-store expo-web-browser @react-native-async-storage/async-storage\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Python Integration Guide\nDESCRIPTION: Imports required components and documentation fragments for the Python integration guide using React/MDX syntax.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport PythonGuideTip from './_guide-tip.md';\nimport HandleAuthenticationStatus from './_handle-authentication-status.md';\nimport ImplementSignInAndSignOutRoutes from './_implement-sign-in-and-sign-out.mdx';\nimport InitLogtoClient from './_init-logto-client.mdx';\nimport Installation from './_installation.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Components\nDESCRIPTION: Imports necessary MDX fragments and code components, then configures the FetchOrganizationTokenForUser component with required props including organization scope and code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Name Constant in MDX/JavaScript\nDESCRIPTION: This snippet defines a JavaScript constant named 'connector' within an MDX file. The constant holds the string 'SAML enterprise SSO', likely used to pass the connector type consistently to imported components like Intro and SaveYourConfiguration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-ios-swift-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Enterprise SSO Sign-in Screen\nDESCRIPTION: This snippet shows how to send users directly to the enterprise SSO sign-in form by configuring the 'first_screen' parameter in a cURL request to the Logto authorization endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/authentication-parameters/first-screen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location \\\n--request GET 'https://<your-tenant>.logto.app/oidc/auth?client_id=<client_id>&...&first_screen=single_sign_on'\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto with npm\nDESCRIPTION: Command to initialize Logto using npm. This is a simpler approach when you have Node.js and PostgreSQL already set up.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @logto@latest\n```\n\n----------------------------------------\n\nTITLE: MDX Export Configuration\nDESCRIPTION: Exports the connector configuration variable used throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-twilio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport const connector = 'Twilio';\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for AWS SES Email Sign-in Tutorial\nDESCRIPTION: This JSX code renders the imported MDX components, passing necessary props to create a structured tutorial for implementing AWS SES Email passwordless sign-in with .NET Core Blazor WebAssembly and Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-aws-ses.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" link=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#blazor-webassembly\" />\n\n<CreateApplication type=\"Single page app\" framework=\".NET Core (Blazor WebAssembly)\" />\n\n<FrameworkGuide />\n\n<AddPasswordlessConnector\n  connector={connector}\n  connectorType=\"Email\"\n  passwordlessSignUpIdentifier=\"Email address\"\n/>\n\n<ConnectorGuide />\n\n<SaveYourConfiguration connector={connector} />\n\n<EnablePasswordlessConnector\n  connectorType=\"Email\"\n  passwordlessSignUpIdentifier=\"Email address\"\n/>\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" />\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in MDX (JavaScript)\nDESCRIPTION: This JavaScript snippet, embedded within an MDX file, exports a constant named 'connector' assigned the string value 'Line'. This constant is likely utilized by other imported components within the same document (e.g., Intro, AddSocialConnector) to dynamically display the connector's name or configure behavior specific to the Line connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-line.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Line';\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Components for API Resource Documentation\nDESCRIPTION: This MDX snippet imports the main `ConfigApiResources` component and several code example components (`ConfigResourcesCode`, etc.) from specified relative paths. It then renders the `ConfigApiResources` component, passing instances of the code example components as props (`configResourcesCode`, `configResourcesWithScopesCode`, `configResourcesWithSharedScopesCode`). This structure allows for modular documentation where code examples are managed separately and injected into a template component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Integrating Sign-In in Home Page\nDESCRIPTION: Integrates the sign-in functionality in the home page UI, calling the CustomAuthManager's signIn method when the sign-in button is pressed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal redirectUri = 'io.logto://callback';\n\n// ...\n\nFFButtonWidget(\n  onPressed: () async {\n    GoRouter.of(context).prepareAuthEvent();\n\n    await authManager.signIn(redirectUri);\n\n    context.replaceNamed('user');\n  },\n  text: 'Sign In',\n  // ...\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Fragment Components in React/JSX\nDESCRIPTION: Imports the necessary fragment components to build the documentation page for fetching organization tokens for users, including a main component and code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList for SMTP Email Connector\nDESCRIPTION: MDX code that renders a DocCardList component displaying the SMTP connector option for connecting with any email service using the Simple Mail Transfer Protocol.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/connectors/email-connectors/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'SMTP',\n      href: '/integrations/smtp',\n      description: 'The official Logto connector for SMTP.',\n      customProps: {\n        icon: <Smtp />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: JSX-style Variable Declaration for Social Connector Name\nDESCRIPTION: The snippet declares a constant holding the connector's name for Hugging Face, to be passed into subsequent components. This variable is used to parameterize the imported MDX fragments, ensuring the right connector branding and configuration data is rendered dynamically. There are no dependencies beyond standard JavaScript, and the variable is expected to be a string.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-hugging-face.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Hugging Face';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Organization Token Components in React JSX\nDESCRIPTION: This code imports fragment components and code snippets to construct documentation for organization token management. It uses the FetchOrganizationTokenForUser component with specific props to render organization configuration and token acquisition instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Hooks with SvelteKit's sequence Helper\nDESCRIPTION: Uses SvelteKit's sequence function to chain multiple hooks together when Logto needs to work alongside other hooks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sequence } from '@sveltejs/kit/hooks';\n\nexport const handle = sequence(handleLogto, handleOtherHook);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes Documentation Components\nDESCRIPTION: Imports MDX documentation fragments and renders them with a code configuration prop passed to the ScopesAndClaims component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments and Constants in Docusaurus - JavaScript\nDESCRIPTION: This snippet shows the importation of various MDX components and the declaration of a connector constant for use within a Docusaurus markdown file. These fragments encapsulate sections of instructional content for building an authentication workflow. Dependencies include Docusaurus, MDX component system, and fragment files located relative to the current documentation source. There are no variable parameters aside from 'connector', and the main output is rendered documentation with reusable sections.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-aws-ses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-razor/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/docs/integrations/email/aws-ses/_integration.mdx';\\nimport FurtherReadings from './fragments/_further-readings.mdx';\\n\\nexport const connector = 'AWS SES';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Isolated Logto Session Cookie Flow\nDESCRIPTION: This diagram illustrates how isolated Logto session cookies work across different user agents or devices. It shows that separate sign-ins are required for each client application when accessed from different devices or browsers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-out.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    U[User]\n\n    subgraph DeviceA [User agent A]\n      subgraph Layer1 [Client domain A]\n        A[Client Application A]\n      end\n\n      subgraph Layer2 [Logto domain]\n          C{{Logto sign-in session?}}\n          D[sign-in page]\n      end\n    end\n\n    subgraph DeviceB [User agent B]\n      subgraph Layer3 [Client domain B]\n        B[Client Application B]\n      end\n\n      subgraph Layer4 [Logto domain]\n          E{{Logto sign-in session?}}\n          F[sign-in page]\n      end\n    end\n\n    U --> |Sign-in| A\n    A --> |Redirect to Logto| C\n    U --> |Sign-in| B\n    B --> |Redirect to Logto| E\n    C --> |No| D\n    E --> |No| F\n    D --> |Create session| C\n    F --> |Create session| E\n```\n\n----------------------------------------\n\nTITLE: Using AddSocialConnector Component in MDX\nDESCRIPTION: Renders the 'AddSocialConnector' MDX component, passing the 'Slack' connector name (via the 'connector' variable) and 'Next.js' framework name. This component inserts instructions on how to add the Slack social connector within the Logto console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-slack.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<AddSocialConnector connector={connector} framework=\"Next.js\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering FurtherReadings Component for Apple Sign-in Documentation\nDESCRIPTION: JSX code that renders the FurtherReadings component which provides additional resources and documentation for Apple sign-in implementation with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In Client Component for Next.js\nDESCRIPTION: Implements a client-side button component for triggering the sign-in process. Uses the 'use client' directive to indicate it runs on the client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignIn: () => Promise<void>;\n};\n\nconst SignIn = ({ onSignIn }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignIn();\n      }}\n    >\n      Sign In\n    </button>\n  );\n};\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Using Imported MDX Components with Props\nDESCRIPTION: Demonstrates the usage of imported MDX components within the main document. Props like 'connector', 'sdk', 'link', 'type', and 'framework' are passed to these components to customize their rendered content dynamically based on the context of this specific guide (PHP, SAML SSO).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-saml-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"PHP\" link=\"https://www.php.net\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<CreateApplication type=\"Traditional web\" framework=\"Laravel\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<FrameworkGuide />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<AddSsoConnector framework=\"Laravel\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<ConnectorGuide />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<EnableSsoConnector />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\"PHP\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: User Management Section Structure\nDESCRIPTION: Markdown structure defining the user management documentation sections and subsections\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/manage-users.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Manage users\n\n## Manage via Logto Console\n\n### Browse and search users\n### Add users\n### View and update the user profile\n### View user activities\n### Suspend user\n### Delete user\n### Reset user password\n### Manage roles of users\n### View the organizations the user belongs to\n\n## Manage via Logto Management API\n```\n\n----------------------------------------\n\nTITLE: Disabling Android Auto Backup in Manifest\nDESCRIPTION: Configures the Android manifest to disable automatic backup functionality to prevent java.security.InvalidKeyException errors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/code-snippets/_flutter-secure-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n    ...\n    <application\n      android:allowBackup=\"false\"\n      android:fullBackupContent=\"false\"\n      ...\n    >\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Connector Constant - JavaScript\nDESCRIPTION: This snippet sets a constant, 'connector', to 'Facebook', which is used as a prop throughout this MDX documentation template. It enables consistent reference to the social authentication provider within imported and embedded components. The value is exported for potential consumption by integrated components or external scripts. There are no dependencies besides a standard JS environment, and the key output is a persistent identifier for connector-related MDX components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-facebook.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const connector = 'Facebook';\n```\n\n----------------------------------------\n\nTITLE: Importing Logto Integration Components in JSX\nDESCRIPTION: This code snippet imports various Markdown and JSX components needed for the Logto integration guide. It includes components for installation, session storage, client initialization, and route implementations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport CreateSessionStorage from './_create-session-storage.md';\nimport GoGuideTip from './_guide-tip.md';\nimport ImplementCallbackRoute from './_implement-callback-route.md';\nimport ImplementSignInRoute from './_implement-sign-in-route.mdx';\nimport ImplementSignOutRoute from './_implement-sign-out-route.mdx';\nimport InitLogtoClient from './_init-logto-client.mdx';\nimport Installation from './_installation.md';\n```\n\n----------------------------------------\n\nTITLE: 配置 Flask 应用的 Logto 注册优先登录路由\nDESCRIPTION: 创建一个登录路由，但设置 interactionMode 为 signUp，使 Logto 在第一个屏幕显示注册页面而非登录页面。这为希望注册的新用户提供了更直接的体验。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-in\")\nasync def sign_in():\n    return redirect(await client.signIn(\n        redirectUri=\"${defaultRedirectUri}\",\n        interactionMode=\"signUp\", # 在第一个屏幕显示注册页面\n    ))\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Components for Logto API Resources\nDESCRIPTION: This snippet imports various components and code fragments needed to configure API resources in Logto. It includes imports for the main configuration component and different code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Fetching Component with Props in React\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component, passing necessary props including the organization scope and imported code snippets for configuration and token retrieval. It demonstrates how to use the component in a React application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering EnableSocialConnector Component for Apple Sign-in\nDESCRIPTION: JSX code that renders the EnableSocialConnector component with the connector prop to guide users on enabling the Apple connector in Logto's Sign-in Experience.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<EnableSocialConnector connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code examples as props. It's used to display API resource configuration options in the Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Calculer la prochaine facture - Structure de base\nDESCRIPTION: Formule mathématique montrant la structure de base d'une facture Logto, composée du prix de base de $16 plus les coûts supplémentaires pour l'utilisation non facturée et les frais du prochain cycle.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/logto-cloud/billing-and-pricing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\begin{align*}\n\\text{Votre prochaine facture} &= \\$16 \\text{(prix de base)} \\\\\n&+ \\text{coût supplémentaire (utilisation non facturée)} \\\\\n&+ \\text{coût supplémentaire (frais du prochain cycle)}\n\\end{align*}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources with Logto Express in TypeScript\nDESCRIPTION: This snippet shows how to define custom scopes (such as 'read' and 'write') and assign protected API resource URLs in the LogtoExpressConfig object for a Node.js application using the Logto Express SDK. It requires the @logto/express package and is intended to be used within a TypeScript Express project. Key configuration properties include 'scopes', which controls granular access rights, and 'resources', which enumerates back-end APIs requiring protection. All properties should be set according to your application's specific authorization requirements.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { UserScope } from '@logto/express';\\n\\nconst config: LogtoExpressConfig = {\\n  // ...other configs\\n  // highlight-start\\n  scopes: ['read', 'write'],\\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\\n  // highlight-end\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes Documentation Components in MDX\nDESCRIPTION: Imports two components related to scopes and claims documentation, and renders them with the claims code being passed as a prop to the main component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Export Connector Configuration\nDESCRIPTION: Exports the connector name as a constant for use throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-vue-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with pnpm\nDESCRIPTION: Command to install @logto/chrome-extension package using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources Component\nDESCRIPTION: Imports various code fragments and configures a ConfigApiResources component with props for different resource configurations and scope settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Retrieval\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring organization tokens and retrieving access tokens for users within an organization context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"LogtoCore::USER_SCOPE[:organizations]\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Related Resources Section with External Link in Markdown\nDESCRIPTION: This code snippet shows how to create a related resources section in Markdown, including an external link to a blog post using a custom Url component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/sign-up-and-sign-in/disable-user-registration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Related resources \\{#related-resources}\n\n<Url href=\"https://blog.logto.io/invitation-only-sign-up\">\n  Blog: How to set up invitation-only sign-up in Logto\n</Url>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Variable in MDX/JavaScript\nDESCRIPTION: Exports a JavaScript constant named 'connector' with the string value 'SAML enterprise SSO'. This constant is intended for use within the MDX document or its imported components, likely to dynamically pass the connector name as a prop.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript/MDX\nDESCRIPTION: This snippet exports a JavaScript constant named `connector` with the value 'Okta enterprise SSO'. This constant is likely used within the imported MDX components (e.g., `<Intro connector={connector} />`) to pass the specific SSO connector's name dynamically, ensuring consistency throughout the documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: File-Level Sectioning Comment - JavaScript/JSX\nDESCRIPTION: This snippet provides file-level comments explaining the rationale for dividing the documentation into MDX fragments due to Docusaurus limitations with the table of contents. It does not impact code execution but informs maintainers of the documentation's architectural choices. It has no runtime dependencies or effects.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-kakao.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Using FurtherReadings Component in MDX\nDESCRIPTION: Renders the 'FurtherReadings' MDX component. This component displays links to related documentation, guides, or other resources that might be helpful for users after completing the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-slack.mdx#2025-04-22_snippet_9\n\nLANGUAGE: mdx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import Structure\nDESCRIPTION: Demonstrates the import structure for various MDX components used in the documentation, including fragments for different sections of the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-go-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-saml/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Tabbed Interface in JSX\nDESCRIPTION: This snippet imports the necessary React components to create a tabbed interface for displaying different installation methods.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TabItem from '@theme/TabItem';\nimport Tabs from '@theme/Tabs';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Account Settings Architecture with Mermaid\nDESCRIPTION: A flow diagram showing the relationship between user, client application, server-side application, and Logto for account settings management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n  graph TB\n    A[User] --> B[Client application]\n    B -->|Self-hosted account settings API call|C[Server-side application]\n    C -->|Management API call| D[Logto]\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Util Methods for Flutter\nDESCRIPTION: Updates the auth util methods to provide access to the CustomAuthManager instance, current user UID, user data, and Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_client.dart';\nimport 'package:logto_dart_sdk/src/modules/id_token.dart';\n\nimport 'custom_auth_manager.dart';\n\nexport 'custom_auth_manager.dart';\n\nfinal _authManager = CustomAuthManager();\nCustomAuthManager get authManager => _authManager;\nString get currentUserUid => currentUser?.uid ?? '';\nOpenIdClaims? get currentUserData => currentUser?.idToken;\nLogtoClient get logtoClient => _authManager.logtoClient;\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Variable for MDX Template\nDESCRIPTION: A simple export statement that defines the connector variable as 'OAuth2'. This variable is used throughout the document to dynamically reference the OAuth2 connector in various components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vanilla-js-oauth2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'OAuth2';\n```\n\n----------------------------------------\n\nTITLE: MDX Import Structure for Google Workspace SSO Documentation\nDESCRIPTION: MDX imports for structuring the documentation into modular components, including intro, application creation, SSO connector setup, configuration, testing, and further reading sections.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-vue-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/google-workspace/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining the Kakao Connector Constant in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant named `connector` with the value 'Kakao'. This constant is likely used throughout the documentation or related imported components (like `<Intro>`) to refer specifically to the Kakao social connector, ensuring consistency and facilitating reuse.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-kakao.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Kakao';\n```\n\n----------------------------------------\n\nTITLE: Defining the Connector Constant in JavaScript\nDESCRIPTION: Exports a JavaScript constant named 'connector' assigned the string value 'Facebook'. This constant is likely used within the MDX components throughout the document to dynamically specify the social connector being configured or discussed, ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-facebook.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Facebook';\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In/Sign-Out Button in Svelte Component\nDESCRIPTION: This snippet demonstrates how to create a dynamic sign-in/sign-out button in a Svelte component, utilizing the actions defined in the server-side file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"?/{data.user ? 'signOut' : 'signIn'}\">\n  <button type=\"submit\">Sign {data.user ? 'out' : 'in'}</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for SendGrid\nDESCRIPTION: This code exports a constant variable 'connector' with the value 'SendGrid'. This variable is likely used throughout the document to refer to the SendGrid service consistently.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-sendgrid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'SendGrid';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for OAuth2 Sign-in Guide\nDESCRIPTION: A set of import statements for MDX fragments that compose the OAuth2 sign-in tutorial. These imports organize different sections of the tutorial such as introduction, application creation, social connector setup, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vanilla-js-oauth2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/vanilla-js/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/oauth2/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Config Types for Slack OAuth Connector in Markdown\nDESCRIPTION: This code snippet defines the configuration types required for the Slack OAuth connector in Logto. It specifies the names and types of the required fields: clientId, clientSecret, and scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/slack/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name         | Type   |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n| scope        | string |\n```\n\n----------------------------------------\n\nTITLE: Translating Unmarked Keys Using ChatGPT in Logto\nDESCRIPTION: Command to translate all untranslated keys (marked with '/** UNTRANSLATED */') in all languages in the phrases and phrases-experience packages using ChatGPT. Requires an OPENAI_API_KEY environment variable.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/using-cli/translation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli translate sync\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Fetching in JSX\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring and fetching organization tokens in a Logto project. It includes a main component for fetching organization tokens and two code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript code snippet defines and exports a constant variable named `connector` assigned the string value 'Discord'. This variable is likely used within the MDX components (e.g., `<Intro>`, `<AddSocialConnector>`) on the page to dynamically reference the specific social connector being documented (Discord), ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-python-discord.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Discord';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM Installation Component in MDX\nDESCRIPTION: Demonstrates how to import and use a reusable MDX component for displaying npm-like installation instructions, specifically configured for the @logto/next package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/next\" />\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Download URL for Logto\nDESCRIPTION: Example of using a specific download URL for the Logto zip file when initializing with npm.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @logto@latest -- --download-url=https://github.com/logto-io/logto/releases/download/v1.2.2/logto.tar.gz\n```\n\n----------------------------------------\n\nTITLE: MDX Variable Export Declaration\nDESCRIPTION: Export statement defining the connector type constant used throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-aws-ses.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport const connector = 'AWS SES';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: Exports a JavaScript constant named 'connector' holding the string 'OIDC enterprise SSO'. This constant is likely used within the MDX document or imported components to dynamically refer to the specific SSO connector type being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: JSX-style Embedding of Documentation Fragments in MDX\nDESCRIPTION: This set of snippets demonstrates embedding modular documentation fragments within the MDX page using JSX syntax. Each fragment receives specific props such as 'connector', 'sdk', or 'framework' to parameterize the output. Required dependencies are the previously imported MDX components and the 'connector' constant. Inputs include props like connector or sdk, and the output is a dynamically composed documentation section. This pattern enables reusability and dynamic content generation within technical documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-naver.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Razor Pages)\" link=\"https://learn.microsoft.com/aspnet/core/razor-pages\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<CreateApplication type=\"Traditional web\" framework=\".NET Core (Razor Pages)\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<FrameworkGuide />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<AddSocialConnector connector={connector} framework=\".NET Core (Razor Pages)\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<ConnectorGuide />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<EnableSocialConnector connector={connector} />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\".NET Core (Razor Pages)\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Composing Organization Token Components in React\nDESCRIPTION: React component structure that imports and composes organization token related components. Uses MDX for documentation fragments and includes configuration and token access code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: React DocCardList Component Implementation\nDESCRIPTION: JSX implementation of a documentation card list component that displays linked cards for various organization-related features and documentation sections. Each card includes an icon, label, and description.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/organizations/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Plan your architecture',\n      href: '/introduction/plan-your-architecture',\n      description:\n        'Key questions to guide and inspire you in building the ideal architecture for your product.',\n      customProps: {\n        icon: <ArchitectureIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'B2B architecture',\n      href: '/introduction/plan-your-architecture/b2b',\n      description: 'Understand B2B identity models and its supported features in Logto.',\n      customProps: {\n        icon: <OrganizationIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Visualizing User Interaction Architecture in Logto using Mermaid\nDESCRIPTION: This flowchart diagrams the layered architecture of Logto's user interaction system, showing the relationships between the client application, OIDC provider, interaction session, and experience application layers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/sign-up-and-sign-in/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n  %% Capas\n  subgraph Layer1 [Capa de Aplicación Cliente]\n      A[Aplicación Cliente]\n  end\n\n  subgraph Layer2 [Capa de Gestión de Interacción]\n      B[Proveedor OIDC]\n      C[Sesión de Interacción]\n  end\n\n  subgraph Layer3 [Capa de Experiencia]\n      D[Aplicación de Experiencia]\n  end\n\n  %% Conexiones\n  A --> |Solicitud de Autorización| B\n  B --> |Estado de la Sesión| C\n  C -.-> |Inicio de Sesión del Usuario| D\n  D --> |Identificación y Verificación| C\n  C --> |Resultado Finalizado de la Sesión| B\n  B --> |Respuesta de Autorización| A\n```\n\n----------------------------------------\n\nTITLE: Visualizing Resource and Identity Relationships with Mermaid Diagram - mermaid\nDESCRIPTION: This Mermaid diagram visually outlines the relationship between Resources (API resources, Organizations, Organization API resources) and Identities (Users, M2M applications) as defined in Logto's authorization model. It shows which entities are grouped under 'Resources' and 'Identities', helping clarify the architecture for role-based access control (RBAC) in Logto. No external dependencies are required other than Mermaid support in the documentation platform. Inputs are static entity groupings, and the output is a rendered graph; the snippet does not perform computation or interactive logic.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/concepts/authn-vs-authz.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\\n  subgraph Resources\\n    R(API resources)\\n    O(Organizations)\\n    OR(Organization API resources)\\n  end\\n\\n  subgraph Identities\\n    U(Users)\\n    A(M2M applications)\\n  end\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Token Component\nDESCRIPTION: MDX component setup for fetching organization tokens, including imports for configuration and access token code fragments, and component configuration with organization scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organisations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Search Parameters\nDESCRIPTION: Example of using POSIX regular expression search\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/advanced-user-search.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for SSO Integration Guide\nDESCRIPTION: This code imports various MDX fragments to compose a structured guide for SSO integration. It includes sections for introduction, application creation, connector setup, SDK integration, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/_template-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/${sdkDocDir}/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/${connectorDocDir}/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Android Integration\nDESCRIPTION: Imports required MDX components and fragments for the Android integration guide, including checkpoint testing, redirect URI configuration, and authentication implementation components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\nimport ConfigureRedirectUri from '../../fragments/_configure-redirect-uri.mdx';\n\nimport GuideTip from './_guide-tip.md';\nimport ImplementSignInAndSignOut from './_implement-sign-in-and-sign-out.mdx';\nimport InitLogtoClient from './_init-logto-client.md';\nimport Installation from './_installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Name Variable in MDX (JavaScript)\nDESCRIPTION: This snippet defines a JavaScript constant named `connector` within the MDX file. This variable holds the string 'OIDC enterprise SSO' and is likely used to pass the connector name to imported components like `<Intro>`, `<SaveYourConfiguration>`, and `<TestingAndValidation>`, ensuring consistency throughout the documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Types for Logto Integration\nDESCRIPTION: Adds TypeScript type definitions to app.d.ts to provide type safety when accessing the Logto client and user information in the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LogtoClient, UserInfoResponse } from '@logto/sveltekit';\n\ndeclare global {\n  namespace App {\n    interface Locals {\n      logtoClient: LogtoClient;\n      user?: UserInfoResponse;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CreateApplication Component in MDX\nDESCRIPTION: Renders the 'CreateApplication' MDX component, specifying the application type as 'Traditional web' and the framework as 'Next.js'. This component dynamically inserts content guiding the user through creating a suitable application within the Logto console for a Next.js project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-slack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<CreateApplication type=\"Traditional web\" framework=\"Next.js\" />\n```\n\n----------------------------------------\n\nTITLE: Using TestingAndValidation Component in MDX\nDESCRIPTION: Renders the 'TestingAndValidation' MDX component, passing 'Slack' as the connector (via the 'connector' variable) and 'Next.js (Pages Router)' as the SDK. This component provides steps and expected outcomes for testing the integrated Slack sign-in flow within the Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-slack.mdx#2025-04-22_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\"Next.js (Pages Router)\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This snippet imports two components related to scopes and claims, then renders the main component with the code component passed as a prop. This structure allows for flexible composition of documentation or UI elements related to authentication scopes and claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for API Resource Configuration in JavaScript/MDX\nDESCRIPTION: This snippet imports several MDX components using JavaScript ES module syntax within an MDX file. It imports a main layout component (`ConfigApiResources`) from a relative path and three specific code example components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) from a subdirectory, presumably containing Markdown/code related to API resource configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It's used to display API resource configuration examples in the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in Docusaurus (JavaScript)\nDESCRIPTION: This snippet imports modular documentation sections and guides as MDX or JavaScript components to compose the overall SAML SSO integration documentation. It enables a structured step-by-step guide by logically separating each part of the authentication and configuration process. No external dependencies beyond Docusaurus and the respective MDX fragments are required, and all imported fragments must be available at the specified relative paths.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-android-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Search Parameters\nDESCRIPTION: Example of case-sensitive exact match search parameters\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/advanced-user-search.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', 'Alice'],\n  ['search.name', 'Bob'],\n  ['mode.name', 'exact'],\n  ['isCaseSensitive', 'true'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Android minSdkVersion for flutter_secure_storage\nDESCRIPTION: Configure the minimum SDK version in the Android project's build.gradle file to be at least 18 for compatibility with flutter_secure_storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-secure-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n  android {\n      ...\n\n      defaultConfig {\n          ...\n          minSdkVersion 18\n          ...\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant - JavaScript\nDESCRIPTION: This snippet exports a string constant named 'connector' for use within the MDX page to reference the specific SSO connector (Microsoft Entra ID SAML enterprise SSO). This practice promotes consistent and easily updatable references to the connector name across fragments and MDX sections. No dependencies are required beyond standard JavaScript/MDX environments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-android-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: X OAuth Connector Configuration Example\nDESCRIPTION: Example of a callback URL format for X OAuth configuration with Logto. The connector_id is available in the Logto Admin Console connector details page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/x/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${your_logto_endpoint}/callback/${connector_id}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources for LogtoClient in Ruby\nDESCRIPTION: This Ruby snippet demonstrates initializing the `LogtoClient` with specific OAuth scopes and resource indicators. It utilizes the `LogtoClient::Config` class to define the permissions (`scopes`) requested (e.g., 'shopping:read', 'store:write') and the target API endpoints (`resources`) the application needs to access. Requires the `logto/client` gem.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Fields for User Search\nDESCRIPTION: This example shows how to limit the search to specific user fields by using the dot notation. It demonstrates searching for 'foo' in the name field only.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([['search.name', '%foo%']]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 Handler Routes in Next.js\nDESCRIPTION: Sets up the API route handler for Auth.js v5 by importing and exporting the GET and POST handlers from the auth configuration file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handlers } from '@/auth';\nexport const { GET, POST } = handlers;\n```\n\n----------------------------------------\n\nTITLE: Importing ScopesAndClaims Component in MDX\nDESCRIPTION: Imports the `ScopesAndClaims` MDX component from the relative path `../../fragments/_scopes-and-claims.mdx`. This component likely renders documentation concerning OAuth scopes and claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Documentation Fragments for API Access Token Fetching in React/JSX\nDESCRIPTION: This snippet shows how to import and use reusable documentation fragments to create comprehensive documentation about fetching access tokens for API resources. It imports the FetchAccessTokenForApiResources component and a code example, then renders them with specific props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Declaring WXEntryActivity in AndroidManifest.xml\nDESCRIPTION: This XML snippet shows how to declare the `WXEntryActivity` within the `<application>` tag of the `AndroidManifest.xml` file. The `android:name` attribute must point to the fully qualified class name, and `android:exported=\"true\"` is required to allow the WeChat app to call this activity upon returning to the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  package=\"com.sample.app\">\n\n  <application>\n    <!-- 要添加的行 -->\n    <activity android:name=\".wxapi.WXEntryActivity\" android:exported=\"true\"/>\n  </application>\n\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK via Composer\nDESCRIPTION: Command to install the Logto PHP SDK package using Composer package manager. This will add the logto/sdk dependency to your project's composer.json file and install it.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require logto/sdk\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Scopes in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates initializing the `LogtoConfig` object for the Logto Android SDK. It specifically shows how to set the `scopes` parameter with a list of strings ('email', 'phone') to request these user details during authentication. The comment indicates an alternative method using `UserScope` enums like `UserScope.EMAIL` and `UserScope.PHONE`.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // ou `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Additional Scopes in Swift\nDESCRIPTION: Demonstrates how to configure the Logto client with additional scopes like email and phone. This allows the application to request and access more user information during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\", // Ej. http://localhost:3001\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\n    UserScope.Email.rawValue,\n    UserScope.Phone.rawValue,\n  ]\n  // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: アカウント設定のシーケンス図（Mermaid）\nDESCRIPTION: ユーザーがアカウント設定にアクセスする際の完全なフロー図です。認証、トークン取得、APIコール、およびデータ取得のプロセスを12ステップで示しています。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n  sequenceDiagram\n    autonumber\n    actor User as User\n    participant Client as Client app\n    participant Server as Server-side application\n    participant Logto as Logto\n\n    User ->> Client: Access client app\n    Client ->> Logto: POST /oidc/auth\n    User -->> Logto: sign in\n    Logto -->> Client: Redirect to client app\n    Client ->> Logto: POST /oidc/token\n    Logto ->> Client: Access token A\n    Client ->> Server: GET /account-settings (with access token A)\n    Server ->> Logto: POST /oidc/token (with client credentials)\n    Logto ->> Server: Access token B\n    Server ->> Logto: GET /api/users/{userId} (with access token B)\n    Logto ->> Server: User details\n    Server ->> Client: User details\n```\n\n----------------------------------------\n\nTITLE: Flowchart for Email Address Collection during Sign-In Process using Mermaid\nDESCRIPTION: A Mermaid flowchart diagram illustrating the process flow when a user signs in with their username and is prompted to provide and verify an email address if it's missing from their profile. The diagram shows the conditional steps from visiting the sign-in page to successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-up-and-sign-in/sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Visit sign-in page] --> B[Enter username and password]\n    B -.-> C{{Email address required and missing?}}\n    C -->|Yes| D[Enter email address]\n    D --> E[Enter verification code]\n    E --> F[Successful sign-in]\n    C --> |No| F\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Documentation Fragments with Code Snippets in React (JavaScript)\nDESCRIPTION: This snippet imports an MDX fragment and several Markdown code examples, then renders a React component, passing these code examples as props. Dependencies include React, MDX, Markdown files handled by a suitable bundler (such as Webpack with mdx-loader and raw-loader). Props such as 'configResourcesCode', 'configResourcesWithScopesCode', and 'configResourcesWithSharedScopesCode' allow modular content insertion. Inputs are imported components/files; output is a composed React element rendering the documentation. All code examples must be present for the component to display intended content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable in JSX\nDESCRIPTION: This snippet defines a constant 'connector' with the value 'Hugging Face'. This variable is likely used throughout the document to refer to the Hugging Face social connector consistently.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-hugging-face.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Hugging Face';\n```\n\n----------------------------------------\n\nTITLE: Importing NPM Installation Fragment for SvelteKit SDK\nDESCRIPTION: This code imports a reusable documentation fragment for NPM-like package installation instructions and renders it with the '@logto/sveltekit' package name parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/sveltekit\" />\n```\n\n----------------------------------------\n\nTITLE: JSX Component Import\nDESCRIPTION: Imports required theme components for tab functionality and performs package name validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_npm-like-installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TabItem from '@theme/TabItem';\nimport Tabs from '@theme/Tabs';\n\n{props.packageName ? null : (() => {throw new Error(`props.packageName is required when importing _npm_like_installation.mdx`)})()}\n```\n\n----------------------------------------\n\nTITLE: Building the Logto Experience Project with pnpm\nDESCRIPTION: Command to install dependencies and build the Logto experience project, which is required before creating a ZIP file for custom UI upload.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/customization/bring-your-ui/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install && pnpm build\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Snippets in JSX\nDESCRIPTION: This snippet shows the import statements for various components and code snippets used throughout the file. It includes imports for API resource descriptions, configuration components, and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiResourcesDescription from '../../fragments/_api-resources-description.md';\nimport ConfigApiResources from '../../fragments/_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from '../../fragments/_fetch-access-token-for-api-resources.mdx';\nimport FetchOrganizationTokenForUser from '../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.mdx';\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.mdx';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.mdx';\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchOrganizationTokenForUser Component in JSX\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component with specific props. It sets the organization scope and includes imported code snippets for organization configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with pnpm\nDESCRIPTION: Command to install the Logto Vue package using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant in MDX/JavaScript\nDESCRIPTION: This JavaScript snippet, embedded within an MDX file, exports a constant named `connector` initialized with the string 'Line'. This constant is likely passed as a prop to imported MDX components (like Intro, AddSocialConnector, etc.) to dynamically configure the tutorial content specifically for the Line social connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-line.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Line';\n```\n\n----------------------------------------\n\nTITLE: Documenting Sectioning and TOC Strategy with Comment - JavaScript\nDESCRIPTION: This code snippet explains, through an embedded comment, the rationale for dividing template sections to work around Docusaurus MDX Table of Contents limitations. While not executable code, the comment provides valuable context for why the template structure is organized this way, helping maintainers understand maintainability and navigational considerations. No dependencies are required for this comment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/*\\n  We have to divide templates into sections because imported mdx will not show in the TOC.\\n  There's no way to customize TOC either. :-)\\n\\n  @see https://github.com/facebook/docusaurus/issues/3915\\n*/}\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Name Constant in JavaScript\nDESCRIPTION: Exports a constant JavaScript variable named `connector` holding the string 'SAML enterprise SSO'. This constant is likely used within the MDX file or imported components to reference the specific SSO connector type being configured, promoting consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Organizing Modular Documentation Layout with Custom MDX Components - MDX\nDESCRIPTION: This MDX snippet orchestrates the layout of the documentation by composing imported components into a sequential guide. It provides each component with appropriate properties (e.g., connector or sdk names) to tailor the guide for the current integration scenario. The approach supports maintainability and internationalization by importing from different paths. Inputs are primarily configuration props; outputs are rendered documentation sections. MDX and React context support are required.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-oidc-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"Expo (React Native)\" link=\"https://expo.dev\" />\n\n## Create an application in Logto {#create-an-application-in-logto}\n\n<CreateApplication type=\"Native app\" framework=\"Expo\" />\n\n## Integrate Expo SDK {#integrate-framework-sdk}\n\n<IntegrateSdk />\n\n## Add OIDC enterprise SSO connector {#add-connector-connector}\n\n<AddSsoConnector framework=\"Expo\" />\n\n## Set up Application OIDC sur votre IdP {#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration {#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable OIDC enterprise SSO connector in Sign-in Experience {#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation {#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"Expo (React Native)\" />\n\n## Further readings {#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing Guide Fragments and Configuration in MDX - JavaScript\nDESCRIPTION: This snippet demonstrates how to modularize a documentation page by importing MDX fragments for different guide sections and page configuration. Dependencies include pre-existing MDX files for each documentation section located in the project and i18n directories. Each import maps to a specific section in the rendered documentation, enhancing maintainability and reuse across guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-android-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exporting SSO Connector Constant in Next.js (Pages Router) - JavaScript\nDESCRIPTION: This code exports a constant named 'connector' for use throughout the documentation, identifying the current SSO connector as 'Microsoft Entra ID SAML enterprise SSO'. This enables consistent referencing across both imported fragments and inline components, and is useful for parameterizing documentation snippets. No external dependencies are required beyond a standard JavaScript environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in SwiftUI with Logto iOS SDK\nDESCRIPTION: This snippet demonstrates how to create a SwiftUI view that handles user authentication using Logto iOS SDK. It includes buttons for sign-in and sign-out, and manages the authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var isAuthenticated: Bool\n\n  init() {\n    isAuthenticated = client.isAuthenticated\n  }\n\n  var body: some View {\n    VStack {\n      if isAuthenticated {\n        Button(\"Cerrar sesión\") {\n          Task { [self] in\n            await client.signOut()\n            isAuthenticated = false\n          }\n        }\n      } else {\n        Button(\"Iniciar sesión\") {\n          Task { [self] in\n            do {\n              try await client.signInWithBrowser(redirectUri: \"${props.redirectUris[0] ?? 'io.logto://callback'}\")\n              isAuthenticated = true\n            } catch let error as LogtoClientErrors.SignIn {\n              // error ocurrido durante el inicio de sesión\n            } catch {\n              // otros errores\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Role Type Structure in TypeScript\nDESCRIPTION: TypeScript type definition for Role objects used in role-related webhook events. This type includes properties like id, name, description, type, and isDefault.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/request.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Role = {\n  id: string;\n  name: string;\n  description: string;\n  type: 'User' | 'MachineToMachine';\n  isDefault: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: Exports a JavaScript constant named 'connector' holding the string 'Google Workspace enterprise SSO'. This constant is likely used by the imported MDX components to display the correct connector name dynamically.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing NpmLikeInstallation Component in MDX/JavaScript\nDESCRIPTION: This snippet imports the `NpmLikeInstallation` reusable component from a relative path (`../../fragments/_npm-like-installation.mdx`) within the project structure. This component is intended to render standardized installation instructions for npm-like package managers (npm, yarn, pnpm).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: MDX Export Configuration\nDESCRIPTION: Exports the connector configuration as a constant for use throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-mvc-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Modification du AndroidManifest.xml pour WeChat\nDESCRIPTION: Ajout de WXEntryActivity dans le fichier AndroidManifest.xml pour permettre à WeChat de communiquer avec l'application Android.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  package=\"com.sample.app\">\n\n  <application>\n    <!-- ligne à ajouter -->\n    <activity android:name=\".wxapi.WXEntryActivity\" android:exported=\"true\"/>\n  </application>\n\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Code Example Components with React - JavaScript/JSX\nDESCRIPTION: This snippet imports an MDX fragment and three Markdown files containing code examples, then renders a React component that consumes these code blocks as props. Dependencies include React, custom documentation components, and the relevant MDX/Markdown files. The primary input is the set of imported code snippets, which are displayed in a structured manner within the documentation; there are no direct user-facing parameters. This setup enables modular, maintainable presentation of API resource configuration code in documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token with Logto Middleware in TypeScript\nDESCRIPTION: This snippet sets up an Express GET endpoint (\"/fetch-organization-token\") secured by Logto authentication middleware, configured to retrieve organization tokens. It leverages the 'withLogto' middleware with the 'getOrganizationToken' option enabled. The handler accesses 'request.user.organizationTokens' and returns them as a JSON response. Requires Express, Logto middleware, and a valid configuration. Input is a GET request; output is a JSON object containing the user's organization tokens. Proper authentication and organization membership are prerequisites.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.get(\n  '/fetch-organization-token',\n  withLogto({\n    ...config,\n    // highlight-next-line\n    getOrganizationToken: true,\n  }),\n  (request, response) => {\n    // highlight-next-line\n    response.json(request.user.organizationTokens);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for OIDC Enterprise SSO Tutorial\nDESCRIPTION: This code snippet demonstrates the usage of imported MDX components to structure the tutorial. It includes sections for introduction, application creation in Logto, integration with .NET Core, adding the SSO connector, setting up the IdP, and testing the implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-oidc-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" link=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#blazor-webassembly\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Single page app\" framework=\".NET Core (Blazor WebAssembly)\" />\n\n## Integrate .NET Core (Blazor WebAssembly) with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add OIDC enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\".NET Core (Blazor WebAssembly)\" />\n\n## Set up OIDC application on your IdP \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable OIDC enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for X (Twitter) Sign-In Tutorial\nDESCRIPTION: This code snippet imports various MDX components used throughout the tutorial. These components represent different sections of the guide, including introduction, application creation, social connector setup, and framework-specific instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vue-x-twitter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/vue/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/x/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Default Redis Connection Configuration\nDESCRIPTION: Simplified configuration using boolean values for default Redis settings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/central-cache.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=1 # oder \"true\", \"yes\"\n```\n\n----------------------------------------\n\nTITLE: Configuring and Fetching Organization Tokens via MDX Component\nDESCRIPTION: This snippet shows the usage of the `FetchOrganizationTokenForUser` MDX component. It configures the required organization scope (`UserScope.Organizations`) and passes imported components (`ConfigOrganizationCode`, `GetOrganizationAccessTokenCode`) which likely contain the actual code for configuration and token retrieval, respectively.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in MDX/Javascript\nDESCRIPTION: This snippet exports a Javascript string constant named 'connector'. The value holds the name of the SSO provider, 'Microsoft Entra ID SAML enterprise SSO', likely for use within the MDX document or imported components to ensure consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-mvc-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Keys for Logto\nDESCRIPTION: A table showing the configuration keys stored in the logto_configs database table. These include OIDC cookie keys for cookie signing and OIDC private keys for JWT signing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/concepts/core-service/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: none\nCODE:\n```\noidc.cookieKeys  | <code>string[]</code> | El arreglo de cadenas de las [claves de firma de cookies](https://github.com/panva/node-oidc-provider/blob/main/docs/README.md#cookieskeys).\noidc.privateKeys | <code>string[]</code> | El arreglo de cadenas del contenido de la clave privada para la [firma de JWT de OIDC](https://openid.net/specs/openid-connect-core-1_0.html#Signing).\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK with Yarn\nDESCRIPTION: Command to install the Logto SDK for Nuxt using Yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/nuxt\n```\n\n----------------------------------------\n\nTITLE: Exporting the SAML Connector Identifier - JavaScript\nDESCRIPTION: This snippet declares and exports a constant named 'connector' with the value 'SAML' for use across the MDX-based documentation page. This export is used by tutorial fragments and guides to dynamically update connector references in the UI, promoting reuse and consistency. This dependency-free export is used exclusively for tutorial content configuration and does not have runtime side effects.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-saml.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in MDX (JavaScript)\nDESCRIPTION: This snippet exports a constant variable named 'connector' holding the string 'Microsoft Entra ID SAML enterprise SSO'. Within the MDX file context, this variable is likely used to pass the connector name dynamically to imported components, ensuring consistency across the document sections.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Rendering ConnectorGuide Component in MDX\nDESCRIPTION: This MDX code renders the `ConnectorGuide` component without any props. This component likely contains detailed guidance on configuring the specific SSO connector (SAML in this case) on the Identity Provider's (IdP) side, potentially imported from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/saml/_integration.mdx'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-saml-enterprise-sso.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<ConnectorGuide />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Components in MDX\nDESCRIPTION: Component setup for fetching access tokens, importing necessary fragments and code components, and rendering them with specific props for API resource access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FetchOrganizationTokenForUser Component in React\nDESCRIPTION: This snippet imports the necessary components and renders the FetchOrganizationTokenForUser component with required props. It sets the organization scope and passes code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Saving Refresh Token to User Session with NextAuth Callbacks\nDESCRIPTION: This code demonstrates how to implement NextAuth callbacks to store the refresh token in both the JWT token and the user session for later use.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  // ...\n  callbacks: {\n    async jwt({ token, account }) {\n      if (account) {\n        // ...\n        // highlight-next-line\n        token.refreshToken = account.refresh_token;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      // ...\n      // highlight-next-line\n      session.refreshToken = token.refreshToken;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Client-Side Component for Triggering Logto Authentication in Next.js\nDESCRIPTION: A client-side React component that triggers a server action to get an access token from Logto. It receives the server action as a prop and calls it when a button is clicked, then logs the resulting token to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetAccessToken: () => Promise<string>;\n};\n\nconst GetAccessToken = ({ onGetAccessToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetAccessToken();\n        console.log(token);\n      }}\n    >\n      Obter token de acesso (veja o log do console)\n    </button>\n  );\n};\n\nexport default GetAccessToken;\n```\n\n----------------------------------------\n\nTITLE: Basic API Request for User Search\nDESCRIPTION: Example of making a GET request to search for users with the keyword 'alice'\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/advanced-user-search.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  --location \\\n  --request GET \\\n  'http://<your-logto-endpoint>/api/users?search=%25alice%25'\n\n```\n\n----------------------------------------\n\nTITLE: Importing NpmLikeInstallation Component in MDX\nDESCRIPTION: This line imports a React component named `NpmLikeInstallation` from an MDX file located at the relative path '../../fragments/_npm-like-installation.mdx'. This component is designed to render installation instructions for npm-like package managers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering and Error Handling in JSX\nDESCRIPTION: This snippet demonstrates conditional rendering based on props and throws an error if a required prop is missing. It's used to ensure the correct usage of the imported component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_claims-need-network-request.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{props.type ? null : (() => {throw new Error(`props.type is required when importing _claims-need-network-request.mdx`)})()}\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript (MDX)\nDESCRIPTION: This JavaScript code snippet, embedded within an MDX file, exports a constant variable named `connector`. This variable holds the string 'Microsoft Entra ID OIDC enterprise SSO' and is likely used to pass the connector name consistently to imported MDX components (like `<Intro>` and `<SaveYourConfiguration>`) or other parts of the documentation build process, ensuring consistency throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Types for Line Connector in Markdown\nDESCRIPTION: This snippet defines the configuration types for the Line connector, including clientId, clientSecret, and scope. It uses a markdown table to present the information clearly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/integrations/social/line/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| 名前         | タイプ |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n| scope        | string |\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable in MDX (JavaScript)\nDESCRIPTION: Defines a JavaScript constant `connector` within the MDX file, assigning it the value 'LinkedIn'. This constant is likely used as a prop passed to imported reusable components to customize the tutorial content specifically for the LinkedIn social connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-linkedin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'LinkedIn';\n```\n\n----------------------------------------\n\nTITLE: Rendering SMS Connector Cards with DocCardList in MDX\nDESCRIPTION: JSX code block using DocCardList component to display available SMS connector options with icons and descriptions. The component renders cards for various SMS services including Twilio, SMSAero, GatewayAPI, Aliyun, and Tencent SMS.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/sms-connectors/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Twilio from '@site/docs/connectors/assets/icons/twilio.svg';\nimport SmsAero from '@site/docs/connectors/assets/icons/smsaero.svg';\nimport Gateway from '@site/docs/connectors/assets/icons/gateway.svg';\nimport AliyunSms from '@site/docs/connectors/assets/icons/aliyun-sms.svg';\nimport TencentSms from '@site/docs/connectors/assets/icons/tencent-sms.svg';\nimport Vonage from '@site/docs/connectors/assets/icons/vonage.svg';\n\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Twilio SMS',\n      href: '/integrations/twilio-sms',\n      description: 'The official Logto connector for Twilio short message service.',\n      customProps: {\n        icon: <Twilio />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'SMS Aero',\n      href: '/integrations/smsaero',\n      description: 'The official Logto connector for SMSAero short message service.',\n      customProps: {\n        icon: <SmsAero />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'GatewayAPI SMS',\n      href: '/integrations/gatewayapi',\n      description: 'The official Logto connector for GatewayAPI SMS.',\n      customProps: {\n        icon: <Gateway />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Aliyun SMS',\n      href: '/integrations/aliyun-sms',\n      description: 'The official Logto connector for Aliyun short message service.',\n      customProps: {\n        icon: <AliyunSms />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'Tencent SMS',\n      href: '/integrations/tencent-sms',\n      description: 'The official Logto connector for Tencent short message service.',\n      customProps: {\n        icon: <TencentSms />,\n      }\n    },\n    /* {\n      type: 'link',\n      label: 'Vonage SMS',\n      href: '/integrations/vonage-sms',\n      description: 'The official Logto connector for Vonage SMS.',\n      customProps: {\n        icon: <Vonage />,\n      }\n    }, */\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in React\nDESCRIPTION: This snippet imports and renders React components for displaying scopes and claims information. It uses a reusable fragment and a separate code snippet component for configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Logto Documentation Components for Access Token Retrieval\nDESCRIPTION: Imports documentation fragments and code examples, then composes them using the FetchAccessTokenForApiResources component to document how to get access tokens for API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication in React Native\nDESCRIPTION: Sets up the LogtoConfig object with application ID, endpoint, custom scopes for shopping and store operations, and API resource endpoints. The configuration enables authentication and authorization for shopping and store-related features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Backup in Android Manifest\nDESCRIPTION: Modify the Android manifest file to disable automatic backups, preventing potential security exceptions with flutter_secure_storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-secure-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n    ...\n    <application\n      android:allowBackup=\"false\"\n      android:fullBackupContent=\"false\"\n      ...\n    >\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant in JavaScript\nDESCRIPTION: This code exports a constant named 'connector' with the value 'OIDC enterprise SSO'. It is intended for consistent reuse in the documentation components, such as props for MDX fragments that reference the connector. No external dependencies are needed, and the constant is available for import in other modules.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-oidc-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK and Dependencies with pnpm\nDESCRIPTION: This code snippet shows how to install the Logto SDK and its peer dependencies using pnpm. It adds @logto/capacitor along with the necessary Capacitor plugins to the project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/capacitor\npnpm add @capacitor/browser @capacitor/app @capacitor/preferences\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant - JavaScript\nDESCRIPTION: This code exports a constant identifying the social connector type (OIDC) for use throughout the documentation module. This enables consistent reference to the selected connector in both imported documentation fragments and dynamic content assembly. Dependencies: none specific beyond a JavaScript module system. Inputs: none. Outputs: a single exported constant with value 'OIDC'. Limitation: the constant name and value should match across all documentation files where used.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-oidc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const connector = 'OIDC';\n```\n\n----------------------------------------\n\nTITLE: Translating Tutorial Templates Command in Bash\nDESCRIPTION: CLI command for translating tutorial templates to a specific locale, in this example French, using the translate-tutorial-templates.mjs script.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/plugins/tutorial-generator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode translate-tutorial-templates.mjs --locale fr\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Name Constant in Javascript/MDX\nDESCRIPTION: Exports a Javascript constant named 'connector' containing the string 'Microsoft Entra ID SAML enterprise SSO'. This constant is likely used within the MDX file or its imported components (like `<SaveYourConfiguration />` and `<TestingAndValidation />`) to dynamically reference the specific SSO connector being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-razor-pages-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for WordPress OIDC SSO Guide\nDESCRIPTION: This code imports various MDX fragments that comprise the different sections of the guide for implementing OIDC enterprise SSO with WordPress and Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/wordpress-plugin/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering AddSsoConnector Component in MDX\nDESCRIPTION: This MDX code renders the `AddSsoConnector` component, passing the `framework` prop set to 'Expo'. This component likely displays instructions specific to adding an SSO connector for an Expo application within Logto, potentially imported from './fragments/_add-sso-connector.mdx'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-saml-enterprise-sso.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<AddSsoConnector framework=\"Expo\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth Custom Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure NextAuth for a Next.js project using TypeScript, specifically integrating a custom 'Logto' authentication provider. It sets up authentication handlers and customizes provider parameters such as authorization scopes (openid, offline_access, profile, email, shopping:read, shopping:write) and the resource endpoint. Dependencies required are the 'next-auth' package and a compatible Next.js environment. The outputs are the exported authentication handlers (handlers, signIn, signOut, auth) which manage authentication flows across the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email shopping:read shopping:write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Scope Claim List Component in JSX\nDESCRIPTION: This code imports a component named ScopeClaimList from a local Markdown file. This component is likely used to display a list of scopes and claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/fragments/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopeClaimList from './_scope-claim-list.md';\n```\n\n----------------------------------------\n\nTITLE: Importing Modular Documentation Fragments in MDX - JavaScript\nDESCRIPTION: This snippet demonstrates how to import various MDX fragments representing sections of a documentation page into an MDX/JSX-compatible file. It enables a modular composition of a guide by referencing reusable fragments for introduction, configuration, and further readings. There are no external runtime dependencies beyond the MDX environment and Docusaurus plugin support for imports.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-hugging-face.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-razor/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/hugging-face/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client in a Rails Controller\nDESCRIPTION: Example of implementing the Logto client initialization in a Rails controller using a before_action hook, with proper session storage and redirect configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\nclass SampleController < ApplicationController\n  before_action :initialize_logto_client\n\n  private\n\n  def initialize_logto_client\n    @client = LogtoClient.new(\n      config: LogtoClient::Config.new(\n        # ...tu configuración\n      ),\n      # Permitir que el cliente redirija a otros hosts (es decir, tu inquilino de Logto)\n      navigate: ->(uri) { redirect_to(uri, allow_other_host: true) },\n      # El controlador tiene acceso al objeto de sesión\n      storage: LogtoClient::SessionStorage.new(session)\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Logto Organization Token Components\nDESCRIPTION: This code imports fragment components for organization token management and arranges them using the FetchOrganizationTokenForUser component. It includes configurations for organization scope and references to code snippets for organization configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organisations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Testing Section using TestingAndValidation Component (MDX)\nDESCRIPTION: Uses the 'TestingAndValidation' component to provide steps for testing the SendGrid passwordless sign-in flow with the iOS (Swift) application. Props specify the connector (via the `connector` variable) and SDK ('iOS (Swift)') being tested.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-sendgrid.mdx#2025-04-22_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\"iOS (Swift)\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with yarn\nDESCRIPTION: Command to install the Logto Vue package using yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: MDX Export Constant Declaration\nDESCRIPTION: Exports a constant variable defining the connector type for use throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-line.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport const connector = 'Line';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Line Sign-In Tutorial\nDESCRIPTION: This code snippet imports various MDX fragments and components used throughout the tutorial. It includes sections for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-line.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/line/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Line';\n```\n\n----------------------------------------\n\nTITLE: Rendering CreateApplication Component for WordPress Integration\nDESCRIPTION: JSX code that renders the CreateApplication component with type and framework props to guide users on creating a Traditional web application for WordPress in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<CreateApplication type=\"Traditional web\" framework=\"WordPress\" />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Slack Sign-In Tutorial\nDESCRIPTION: This code snippet imports various MDX fragments and components used throughout the tutorial. It includes sections for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-slack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-server/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/slack/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Slack';\n```\n\n----------------------------------------\n\nTITLE: Executing Old Translation CLI Command (Before v1.20.0)\nDESCRIPTION: Shows how to execute translation commands with the old CLI method before Logto v1.20.0. This utilizes the @logto/cli package with the translate command.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/translate-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli translate <command> [options]\n```\n\n----------------------------------------\n\nTITLE: Rendering Testing and Validation Component in MDX\nDESCRIPTION: Renders the 'TestingAndValidation' MDX component, passing the connector name and SDK type as props. This component provides steps or guidance on testing the SSO integration to ensure it works correctly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" />\n```\n\n----------------------------------------\n\nTITLE: Visualizing Webhook Flow with Mermaid Diagram\nDESCRIPTION: This Mermaid diagram illustrates the flow of two webhooks triggered by a PostSignIn event in Logto. It shows how the sign-in completion triggers the PostSignIn event, which then activates two webhooks that make POST API calls to different service endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/developers/webhooks/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  subgraph Logto\n    SF(サインイン完了)\n    PS(サインイン後)\n    WH2(Webhook 2)\n    WH1(Webhook 1)\n  end\n\n  subgraph Service 2\n    E2(エンドポイント)\n  end\n\n  subgraph Service 1\n    E1(エンドポイント)\n  end\n\n  SF -->|トリガー| PS\n  PS --> WH1\n  PS --> WH2\n  WH1 --->|POST API コール| E1\n  WH2 --->|POST API コール| E2\n\n```\n\n----------------------------------------\n\nTITLE: Block Comment Usage in TSX/MDX for Documentation File Organization\nDESCRIPTION: This snippet uses a JavaScript-style block comment to explain the necessity of dividing templates into sections to accommodate Docusaurus features. The comment provides context about technical constraints and references an external issue for further details. This pattern serves as documentation for maintainers and does not affect runtime behavior.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-naver.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component for User Management APIs in JSX\nDESCRIPTION: This code snippet renders a DocCardList component with a single item for the User Management APIs documentation. It includes a custom icon and provides a link to the detailed guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Use Logto Management APIs',\n      href: '/end-user-flows/account-settings/by-management-api',\n      description:\n        'Learn more about how to use the user Management APIs to build your own account settings page.',\n      customProps: {\n        icon: <GearIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Saving Component in MDX\nDESCRIPTION: Renders the 'SaveYourConfiguration' MDX component, passing the connector name via the 'connector' prop. This component likely reminds or instructs the user on saving the connector configuration within Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Email Connector Templates in JSON\nDESCRIPTION: Example JSON configuration for SendGrid email connector templates. It includes templates for different usage types such as registration, sign-in, forgot password, and generic use cases.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/integrations/email/sendgrid-email/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"subject\": \"<register-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (register template)>\",\n    \"usageType\": \"Register\",\n    \"type\": \"text/plain\"\n  },\n  {\n    \"subject\": \"<sign-in-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (sign-in template)>\",\n    \"usageType\": \"SignIn\",\n    \"type\": \"text/plain\"\n  },\n  {\n    \"subject\": \"<forgot-password-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (forgot-password template)>\",\n    \"usageType\": \"ForgotPassword\",\n    \"type\": \"text/plain\"\n  },\n  {\n    \"subject\": \"<generic-template-subject>\",\n    \"content\": \"<Logto: Your verification code is {{code}}. (generic template)>\",\n    \"usageType\": \"Generic\",\n    \"type\": \"text/plain\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation and Code Components - React - JavaScript\nDESCRIPTION: This snippet imports MDX and Markdown modules containing documentation resources and code samples for use in a React component. It ensures the necessary dependencies are available by referencing the respective files. No direct parameters are used, but the imported components are later passed as props to another component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Section Fragments - React/MDX - JavaScript\nDESCRIPTION: Imports modular MDX documentation fragments representing logical steps of the Google Workspace SSO setup via Express and Logto. Each import represents a major tutorial section—enabling sectioned documentation and future maintenance. Requires Node.js, React, and MDX support. No runtime parameters, just static imports providing structure for the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/express/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/google-workspace/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Type Constant in JavaScript (MDX)\nDESCRIPTION: This snippet exports a JavaScript constant named `connector` with the string value 'SAML enterprise SSO'. This constant is likely used within the MDX document or its imported components to dynamically display the name of the connector being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Constant for Connector Selection - JavaScript\nDESCRIPTION: This snippet defines a named export constant representing the selected SSO connector to promote configurability and reuse across the documentation's MDX components. The constant is then utilized when rendering different documentation step components, ensuring consistency throughout the file. Only a standard JavaScript environment is required.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Documentation in React\nDESCRIPTION: Imports documentation fragments and code snippets related to organization token configuration for React applications. This includes fragments for fetching organization tokens for users and code examples for configuring organizations and getting organization access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations (组织)\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Structuring Logto Integration Guide in React\nDESCRIPTION: This snippet demonstrates the structure of the Logto integration guide, including sections for installation, client initialization, and sign-in/sign-out implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideTip />\n\n### Instalação {#installation}\n\n<Installation />\n\n### Inicializar LogtoClient {#init-logtoclient}\n\n<InitClient />\n\n<ImplementSignInAndSignOut />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Exporting SendGrid Connector Constant in Next.js (JavaScript)\nDESCRIPTION: This code exports a constant named 'connector' with the value 'SendGrid' for use elsewhere in the documentation or application. It acts as a configuration value to be reused by imported fragments. This approach simplifies connector type management in larger documentation or codebases; it requires no external dependencies and accepts no input or output.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-sendgrid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SendGrid';\n```\n\n----------------------------------------\n\nTITLE: Deploying with Environment Variables\nDESCRIPTION: Command demonstrating deployment using inline environment variables.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/upload-custom-ui-assets-using-cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nLOGTO_AUTH=foo:bar LOGTO_ENDPOINT=https://your.custom.domain LOGTO_EXPERIENCE_PATH=/path/to/your/custom/ui/dist LOGTO_RESOURCE=https://baz.logto.app/api npx @logto/tunnel deploy\n```\n\n----------------------------------------\n\nTITLE: Subject Token Request to Logto API\nDESCRIPTION: HTTP request example for obtaining a subject token from Logto Management API.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/developers/user-impersonation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/subject-tokens HTTP/1.1\nHost: techcorp.logto.app\nAuthorization: Bearer <TechCorp_m2m_access_token>\nContent-Type: application/json\n\n{\n  \"userId\": \"alex123\",\n  \"context\": {\n    \"ticketId\": \"TECH-1234\",\n    \"reason\": \"Problema de acceso a recursos\",\n    \"supportEngineerId\": \"sarah789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components and Fragments\nDESCRIPTION: JSX/MDX imports for various documentation fragments and components used to compose the tutorial page. The imports include sections for introduction, application creation, SSO connector setup, configuration, testing, and further reading materials.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-razor-pages-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-razor/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/google-workspace/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant in JavaScript\nDESCRIPTION: This JavaScript snippet defines and exports a constant variable named `connector` and assigns it the string value 'Kakao'. This constant is intended to be used throughout the MDX document or by imported components to represent the specific social sign-in provider being configured, ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-kakao.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Kakao';\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchOrganizationTokenForUser Component with Props\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component, passing in the organization scope and imported code snippets as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Seeding Logto Database with CLI\nDESCRIPTION: Command to seed a PostgreSQL database for Logto using the Logto CLI. This is the first step when setting up Logto with Docker.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogto db seed\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript/MDX\nDESCRIPTION: Exports a constant string variable named 'connector' containing the name 'Microsoft Entra ID OIDC enterprise SSO'. This variable is likely used dynamically within the MDX document (e.g., passed as a prop to imported components) to refer to the specific SSO connector being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-server-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Embedding Documentation with Code Example as Prop - JavaScript\nDESCRIPTION: Embeds the imported documentation component in JSX, passing the imported code snippet as a prop. This technique allows dynamic inclusion of code examples within documentation sections. Assumes both components accept and render props as React elements. Requires React and appropriate MDX/component bindings to function correctly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Documentation Components\nDESCRIPTION: Imports MDX fragments and code examples, then composes them into a documentation component that demonstrates access token fetching functionality\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: アカウント設定のアーキテクチャ図（Mermaid）\nDESCRIPTION: ユーザー、クライアントアプリケーション、サーバーサイドアプリケーション、Logto間の関係を示すアーキテクチャ図です。ユーザーからの要求がどのように処理され、Logto APIにアクセスするかを図示しています。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n  graph TB\n    A[User] --> B[Client application]\n    B -->|Self-hosted account settings API call|C[Server-side application]\n    C -->|Management API call| D[Logto]\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Handling in JSX\nDESCRIPTION: This snippet imports various components and code fragments needed for organization token configuration and retrieval in Logto. It includes imports for fetching organization tokens, configuring organizations, and getting organization access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for GitHub Sign-In Tutorial\nDESCRIPTION: This code snippet imports various MDX components used to structure the tutorial for implementing GitHub sign-in with a WordPress plugin and Logto. It includes sections for introduction, application creation, social connector setup, configuration, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/wordpress-plugin/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/github/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'GitHub';\n```\n\n----------------------------------------\n\nTITLE: Connector Variable Declaration\nDESCRIPTION: Export statement defining the connector name as a constant for use throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-react-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Fetching Posts from Supabase in Express\nDESCRIPTION: A function that uses the Supabase client to fetch posts for the authenticated user. It demonstrates how to query data from Supabase with Row-Level Security enforced.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst fetchPosts = async (ctx) => {\n  const { data } = await ctx.supabase.from('posts').select('*');\n\n  return data;\n};\n```\n\n----------------------------------------\n\nTITLE: Using MDX Components for SendGrid WordPress Integration Tutorial Structure\nDESCRIPTION: Demonstrates how MDX components are used to structure the tutorial, including passing connector name props and section headers for different parts of the integration guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-sendgrid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"WordPress plugin\" link=\"https://wordpress.org/\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\"WordPress\" />\n\n## Integrate WordPress with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add SendGrid connector \\{#add-connector-connector}\n\n<AddPasswordlessConnector\n  connector={connector}\n  connectorType=\"Email\"\n  passwordlessSignUpIdentifier=\"Email address\"\n/>\n\n## Set up SendGrid email connector \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable SendGrid connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnablePasswordlessConnector\n  connectorType=\"Email\"\n  passwordlessSignUpIdentifier=\"Email address\"\n/>\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"WordPress plugin\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: MDX Page Frontmatter Configuration\nDESCRIPTION: Defines the page metadata including slug, sidebar label, and custom properties for the Naver integration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/naver/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nslug: /integrations/naver\nsidebar_label: Naver\nsidebar_custom_props:\n  description: Naver is the most leading internet service provider in South Korea.\ntutorial_config_name: Naver login\n---\n```\n\n----------------------------------------\n\nTITLE: Running the Logto Tunnel CLI Command with Static Files\nDESCRIPTION: Bash commands showing how to use the logto-tunnel tool with static HTML assets instead of a development server, specifying the path to the files containing index.html.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlogto-tunnel -p 9000 --experience-path /path/to/your/static/files --endpoint https://foobar.logto.app/\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/tunnel -p 9000 --experience-path /path/to/your/static/files --endpoint https://foobar.logto.app/\n```\n\n----------------------------------------\n\nTITLE: Importing Fragments for API Resources Documentation in MDX\nDESCRIPTION: This code imports various fragments and components to build a documentation page about API resources in Logto. It includes fragments for API resources description, configuration, token fetching, and organization token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiResourcesDescription from '../../../fragments/_api-resources-description.md';\n\nimport ConfigApiResources from './_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from './_fetch-access-token-for-api-resources.mdx';\nimport FetchOrganizationTokenForUser from './_fetch-organization-token-for-user.mdx';\n\n<ApiResourcesDescription />\n\n### 配置 Logto 用戶端 \\{#configure-logto-client\\}\n\n<ConfigApiResources />\n\n### 取得 API 資源的存取權杖 (Access token) \\{#fetch-access-token-for-the-api-resource\\}\n\n<FetchAccessTokenForApiResources />\n\n### 取得組織權杖 (Organization tokens) \\{#fetch-organization-tokens\\}\n\n<FetchOrganizationTokenForUser />\n```\n\n----------------------------------------\n\nTITLE: Requesting User Impersonation from Backend Server\nDESCRIPTION: HTTP request example showing how a support application requests impersonation permissions from a backend server. The request includes the target user ID, reason for impersonation, and related ticket information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/request-impersonation HTTP/1.1\nHost: api.techcorp.com\nAuthorization: Bearer <Sarah's_access_token>\nContent-Type: application/json\n\n{\n  \"userId\": \"alex123\",\n  \"reason\": \"Investigating resource access issue\",\n  \"ticketId\": \"TECH-1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Logto API Resource Configuration Component\nDESCRIPTION: This JSX code renders the ConfigApiResources component, passing in the imported code snippets as props. It demonstrates how to use the configuration component with different resource code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Cards for User Management Features in React\nDESCRIPTION: This JSX code creates a list of documentation cards using the DocCardList component. Each card represents a different aspect of user management in Logto, including user data, user management operations, advanced search, and personal access tokens. The cards include labels, descriptions, and custom icon props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Comprender los datos de usuario',\n      href: '/user-management/user-data',\n      description:\n        'En Logto, los datos de usuario incluyen datos básicos de autenticación basados en el protocolo OpenID Connect, junto con datos personalizados.',\n      customProps: {\n        icon: <DatabaseIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Gestionar usuarios',\n      href: '/user-management/manage-users',\n      description:\n        'Crear, actualizar, leer y eliminar usuarios a través de la Consola de Logto o el Management API de Logto.',\n      customProps: {\n        icon: <GearIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Búsqueda avanzada de usuarios',\n      href: '/user-management/advanced-user-search',\n      description:\n        'Usar directamente el Management API de Logto para realizar una búsqueda avanzada de usuarios.',\n      customProps: {\n        icon: <SearchIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Token de acceso personal',\n      href: '/user-management/personal-access-token',\n      description:\n        'El token de acceso personal (PAT) proporciona una forma segura para que los usuarios otorguen tokens de acceso sin usar sus credenciales e inicio de sesión interactivo.',\n      customProps: {\n        icon: <KeyIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in Docusaurus - JavaScript\nDESCRIPTION: This snippet imports MDX fragment files and external tutorials into the main documentation assembly file. The imported fragments represent sections of a multipart technical tutorial for setting up OIDC sign-in in .NET Core MVC with Logto. This approach enables modular composition, allowing each section to be maintained independently. Dependencies: MDX fragments from project paths specified, Docusaurus environment with MDX support. Inputs: none directly, but expects the presence of all imported files relative to this documentation file. Outputs: React components for each documentation section. Limitations: Relies on correct pathing and fragment file availability.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-oidc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/docs/integrations/social/oidc/_integration.mdx';\\n\\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Backup in Android Manifest\nDESCRIPTION: Modifies the AndroidManifest.xml file to disable auto backup for the app, preventing potential issues with key unwrapping in flutter_secure_storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_dependency.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ... >\n    ...\n    <application\n      android:allowBackup=\"false\"\n      android:fullBackupContent=\"false\"\n      ...\n    >\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resources Configuration Components in React\nDESCRIPTION: This code imports fragment components for API resources configuration and renders them using the ConfigApiResources component. The imported components include basic resource configuration, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: JavaScript SDK での組織スコープ設定\nDESCRIPTION: Logto JavaScript SDK で組織スコープを設定する方法です。LogtoClient インスタンスを作成し、UserScope.Organizations を scopes パラメーターに追加します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoClient, UserScope } from '@logto/browser'; // または @logto/node, @logto/client\n\nconst logto = new LogtoClient({\n  // ...\n  scopes: [UserScope.Organizations],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Fetching in React\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring organizations and fetching organization access tokens in a React application using Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Complete Node.js Implementation\nDESCRIPTION: Full TypeScript/Node.js implementation of the user impersonation flow including error handling and token exchange.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/developers/user-impersonation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ImpersonationResponse {\n  subjectToken: string;\n  expiresIn: number;\n}\n\ninterface TokenExchangeResponse {\n  access_token: string;\n  issued_token_type: string;\n  token_type: string;\n  expires_in: number;\n  scope: string;\n}\n\nasync function impersonateUser(\n  userId: string,\n  clientId: string,\n  ticketId: string,\n  resource: string\n): Promise<string> {\n  try {\n    // Paso 1 y 2: Solicitar suplantación y obtener token de sujeto\n    const impersonationResponse = await fetch(\n      'https://api.techcorp.com/api/request-impersonation',\n      {\n        method: 'POST',\n        headers: {\n          Authorization: \"Bearer <Sarah's_access_token>\",\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId,\n          reason: 'Investigando problema de acceso a recursos',\n          ticketId,\n        }),\n      }\n    );\n\n    if (!impersonationResponse.ok) {\n      throw new Error(`Ocurrió un error HTTP. Estado: ${impersonationResponse.status}`);\n    }\n\n    const { subjectToken } = (await impersonationResponse.json()) as ImpersonationResponse;\n\n    // Paso 3: Intercambiar token de sujeto por token de acceso\n    const tokenExchangeBody = new URLSearchParams({\n      grant_type: 'urn:ietf:params:oauth:grant-type:token-exchange',\n      client_id: clientId,\n      scope: 'openid profile resource.read',\n      subject_token: subjectToken,\n      subject_token_type: 'urn:ietf:params:oauth:token-type:access_token',\n      resource: resource,\n    });\n\n    const tokenExchangeResponse = await fetch('https://techcorp.logto.app/oidc/token', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: tokenExchangeBody,\n    });\n\n    if (!tokenExchangeResponse.ok) {\n      throw new Error(`¡Error HTTP! estado: ${tokenExchangeResponse.status}`);\n    }\n\n    const tokenData = (await tokenExchangeResponse.json()) as TokenExchangeResponse;\n    return tokenData.access_token;\n  } catch (error) {\n    console.error('La suplantación falló:', error);\n    throw error;\n  }\n}\n\n// Sarah usa esta función para suplantar a Alex\nasync function performImpersonation(): Promise<void> {\n  try {\n    const accessToken = await impersonateUser(\n      'alex123',\n      'techcorp_support_app',\n      'TECH-1234',\n      'https://api.techcorp.com/customer-data'\n    );\n    console.log('Token de acceso de suplantación para Alex:', accessToken);\n  } catch (error) {\n    console.error('Error al realizar la suplantación:', error);\n  }\n}\n\n// Ejecutar la suplantación\nvoid performImpersonation()\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Constant in JavaScript\nDESCRIPTION: This JavaScript snippet declares and exports a constant named `connector` and assigns it the string value 'Kakao'. This constant is likely used dynamically within the imported MDX components (like Intro, AddSocialConnector, etc.) to specify the social connector being configured or referenced throughout the tutorial page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-kakao.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Kakao';\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto User Scopes in Nuxt.js (TypeScript)\nDESCRIPTION: This snippet shows how to configure Logto in a Nuxt.js application, specifically setting the user scope to include organizations. It imports the UserScope from '@logto/nuxt' and uses it in the Nuxt configuration object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    scopes: [UserScope.Organizations],\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments in React\nDESCRIPTION: This code snippet demonstrates the importing of various MDX fragments and components used throughout the tutorial. It includes imports for different sections of the guide, such as the introduction, application creation, SSO connector setup, and SDK integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out Button Component in Next.js with Auth.js\nDESCRIPTION: This snippet shows how to create a sign-out button component using Auth.js in a Next.js application. It uses a server-side action to handle the sign-out process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signOut } from '@/auth';\n\nexport function SignOut() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signOut();\n      }}\n    >\n      <button type=\"submit\">Sign Out</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Example - WeCom Scope Options\nDESCRIPTION: Demonstrates the available scope options for WeCom OAuth 2.0 configuration. The scope can be left blank or set to either snsapi_base or snsapi_privateinfo.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/wecom/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsnsapi_base\nsnsapi_privateinfo\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Authentication Parameters for IdP-initiated SSO\nDESCRIPTION: Example JSON configuration for customizing authentication parameters in IdP-initiated SSO. Shows how to add email and offline_access scopes to request additional user information and refresh tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"email offline_access\"\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import Structure\nDESCRIPTION: Imports various MDX components and fragments needed for the documentation structure, including introduction, application creation, social connector setup, and testing guides.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-slack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/go/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/slack/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Vue and SendGrid Integration Guide\nDESCRIPTION: This code snippet imports various MDX components that are used throughout the guide to provide structured content for different sections of the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vue-sendgrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/vue/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/sendgrid/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Standard Logto Authentication Flow using Mermaid Diagram\nDESCRIPTION: A sequence diagram showing the default authentication flow between an application, Logto Cloud auth endpoint, and Logto sign-in page. It illustrates the redirect process and authentication steps in a standard implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    box Local machine\n    participant A as Your application\n    end\n    box Logto Cloud\n    participant B as Logto Cloud auth endpoint\n    participant C as Logto sign-in page\n    end\n    A ->> B: User initiates \"sign-in\" action and request auth\n    B -->> A: Return auth response and tell the client<br/>to redirect to the Logto sign-in page\n    A ->> C: Redirect to the Logto sign-in page\n    C ->> B: Submit the sign-in form and<br/>request Experience API to authenticate\n    B -->> C: Respond the sign-in request and<br/>tell the client to redirect to your application\n    C -->> A: Redirect to your application\n    A --> A: Handle the sign-in callback and<br/>the user is now authenticated\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with yarn\nDESCRIPTION: Command to install the Logto Vue library using yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Truncated Content Marker - JavaScript/JSX\nDESCRIPTION: This snippet adds a JSX comment marker '{/* truncate */}' to indicate a truncation or break point in the documentation. It serves as a non-functional placeholder for maintainers and does not affect runtime or output.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-kakao.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{/* truncate */}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering MDX Components for Scopes Documentation\nDESCRIPTION: Imports reusable MDX components and code snippets related to scopes and claims, then renders them with the appropriate props passed through.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in React\nDESCRIPTION: Imports required components for organization token management including fetch token functionality and code configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue package with pnpm\nDESCRIPTION: Command to install the Logto Vue SDK using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: JSX Fragment Usage for Section Truncation in Documentation (TSX/MDX)\nDESCRIPTION: This single-line snippet demonstrates the use of an inline JSX fragment comment, likely employed as a visual or logical placeholder within the documentation source. It does not impact rendered output but may serve as an editorial note or demarcation within the file. No dependencies are necessary. There are no parameters, inputs, or outputs associated with this comment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-naver.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n{/* truncate */}\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript snippet defines and exports a constant named `connector` storing the string 'Hugging Face'. This constant is intended to be used within the MDX document, likely passed as a prop to imported components (like `<Intro>`, `<AddSocialConnector>`, etc.) to ensure consistency in naming the social connector throughout the guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-hugging-face.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Hugging Face';\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework Integration Guide Component in MDX\nDESCRIPTION: This MDX/JSX snippet renders the `FrameworkGuide` component, imported from `@site/docs/quick-starts/framework/php/_for-tutorial.mdx`. This component displays the necessary steps and code examples for integrating the Logto PHP SDK into a Laravel application, specific to this tutorial's context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-github.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<FrameworkGuide />\n```\n\n----------------------------------------\n\nTITLE: Embedding Explanatory Comments in JavaScript and MDX Files\nDESCRIPTION: This snippet contains block comments that explain why the documentation is structured in separate template sections to customize the table of contents. The comment uses the MDX/JSX block comment syntax for clarity. These comments act as developer documentation and have no runtime effect. They reference a related Docusaurus GitHub issue for further context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-naver.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de carga útil de un token de acceso\nDESCRIPTION: Estructura JSON que muestra los campos típicos en la carga útil de un token de acceso JWT emitido por Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  iss: '<your-logto-endpoint>/oidc',\n  aud: 'https://resource-server.com/api',\n  scope: 'read write'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Tabbed Interface\nDESCRIPTION: This snippet imports the necessary React components from the theme to create a tabbed interface for displaying installation commands.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TabItem from '@theme/TabItem';\nimport Tabs from '@theme/Tabs';\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy for Logto Admin Console\nDESCRIPTION: Nginx server configuration for setting up reverse proxy to Logto admin console running on port 3002 with SSL support.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/deployment-and-configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 443 ssl;\n  server_name <your_admin_endpoint_url>; // e.g. admin.your-domain.com\n  ...\n\n  location / {\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto https;\n\n    proxy_pass http://127.0.0.1:3002;\n  }\n\n  ssl_certificate <path-to-your-certificate-for-admin-endpoint>;\n  ssl_certificate_key <path-to-your-certificate-key-for-admin-endpoint>\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Introduction Component in MDX\nDESCRIPTION: Renders the 'Intro' MDX component, passing the connector name, SDK type ('.NET Core (Blazor WebAssembly)'), and a relevant link as props. This component likely displays introductory information for the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" link=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#blazor-webassembly\" />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Tutorial Sections\nDESCRIPTION: This code imports various MDX components that represent different sections of the tutorial. These components are likely defined in separate files and contain the content for each step of the guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-sendgrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/sendgrid/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX and Markdown Config Resource Modules in JavaScript\nDESCRIPTION: This snippet imports configuration resource modules, specifically one MDX fragment and two Markdown files, for documentation use within a React component. The imported modules are then available to be embedded or rendered as React components elsewhere in the project. No additional dependencies are necessary beyond the project\\'s build support for MDX and Markdown imports.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Adding Logto Hook to SvelteKit Server\nDESCRIPTION: This snippet demonstrates how to add the Logto hook to the SvelteKit server using the handleLogto function. It includes options for hardcoding credentials and using environment variables.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-logto-app-id>',\n    appSecret: '<your-logto-app-secret>',\n  },\n  {\n    encryptionKey: '<a-random-string>',\n  }\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\nimport { env } from '$env/dynamic/private';\n\nexport const handle = handleLogto(\n  {\n    endpoint: env.LOGTO_ENDPOINT,\n    appId: env.LOGTO_APP_ID,\n    appSecret: env.LOGTO_APP_SECRET,\n  },\n  {\n    encryptionKey: env.LOGTO_COOKIE_ENCRYPTION_KEY,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript code snippet exports a constant variable named `connector` assigned the string value 'OIDC enterprise SSO'. This constant is likely used within the MDX file or its imported components to dynamically reference the specific SSO connector type being documented or configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Rendering SSO Connector Addition Component in MDX\nDESCRIPTION: Renders the 'AddSsoConnector' MDX component, passing the framework ('.NET Core (Blazor WebAssembly)') as a prop. This component instructs the user on how to add the Microsoft Entra ID SAML enterprise SSO connector in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<AddSsoConnector framework=\".NET Core (Blazor WebAssembly)\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Components\nDESCRIPTION: Renders the imported documentation components with specific props for API method names and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GetUserInfoApis getIdTokenClaimsApi=\"getIdTokenClaims\" fetchUserInfoApi=\"fetchUserInfo\" />\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Type Structure in TypeScript\nDESCRIPTION: TypeScript type definition for Organization objects used in organization-related webhook events. This type includes properties like id, name, optional description, customData, and createdAt.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/request.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype Organization = {\n  id: string;\n  name: string;\n  description?: string;\n  customData: object;\n  createdAt: number;\n};\n```\n\n----------------------------------------\n\nTITLE: MDX Import Statements for Documentation Fragments\nDESCRIPTION: A series of MDX import statements that load documentation fragments for different sections of the guide. These imports help organize the documentation into modular components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-azure-ad.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/swift/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/azure-ad/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Database Alterations with npx\nDESCRIPTION: Alternative command to rollback database alterations to a specific version using npx instead of globally installed CLI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/database-alteration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db alteration rollback 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Mixed Search Modes with URLSearchParams in JavaScript\nDESCRIPTION: This snippet demonstrates how to use different search modes for different fields in a single search query using URLSearchParams.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n  ['search.primaryEmail', 'tom%'], // Like mode\n  ['mode.primaryEmail', 'like'],\n  ['search.phone', '0{3,}'], // Posix mode\n  ['joint', 'and'],\n]);\n```\n\n----------------------------------------\n\nTITLE: File-Level Sectioning via React Comment - JavaScript\nDESCRIPTION: This snippet contains a comment describing the rationale for dividing documentation templates into sections to support table-of-contents (TOC) rendering. It also references a relevant Docusaurus GitHub issue for context. The comment is intended for documentation maintainers and does not impact runtime behavior or output. The only dependency is developer awareness.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-server-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: Defines and exports a JavaScript constant named 'connector' assigned the string value 'Line'. This constant is intended to be used within the MDX document, likely passed as a prop to imported components (e.g., Intro, AddSocialConnector) to dynamically and consistently display the connector name throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-line.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Line';\n```\n\n----------------------------------------\n\nTITLE: Client-Side Organization Token Handler Component\nDESCRIPTION: Client-side React component that provides a button interface for retrieving organization tokens. Implements a callback to trigger the server action and log the received token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onGetOrganizationToken: () => Promise<string>;\n};\n\nconst GetOrganizationToken = ({ onGetOrganizationToken }: Props) => {\n  return (\n    <button\n      onClick={async () => {\n        const token = await onGetOrganizationToken();\n        console.log(token);\n      }}\n    >\n      获取组织令牌 (Organization token) （查看控制台日志）\n    </button>\n  );\n};\n\nexport default GetOrganizationToken;\n```\n\n----------------------------------------\n\nTITLE: Importing Logto Documentation Components\nDESCRIPTION: Imports various MDX components and fragments used to build the Logto integration guide, including installation instructions, client initialization, and authentication implementation details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport GuideTip from './_guide-tip.mdx';\nimport ImplementSignInAndSignOut from './_implement-sign-in-and-sign-out.mdx';\nimport InitClient from './_init-client.mdx';\nimport Installation from './_installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for Microsoft Entra ID SAML SSO\nDESCRIPTION: This code defines a constant variable 'connector' with the value 'Microsoft Entra ID SAML enterprise SSO' for use throughout the document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders a ConfigApiResources component with the imported code examples as props. It demonstrates how to set up and display different API resource configurations in a React-based documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Components in JSX\nDESCRIPTION: This code snippet imports various SVG components from different locations in the project structure. These components are likely used for visual representation in the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Rbac from '@site/docs/authorization/assets/rbac.svg';\nimport Api from '@site/src/assets/api.svg';\nimport OrgTemplate from '@site/src/assets/authorization.svg';\nimport Jwt from '@site/src/assets/gear-plus.svg';\nimport Role from '@site/src/assets/role.svg';\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchAccessTokenForApiResources Component - JSX\nDESCRIPTION: This snippet renders the FetchAccessTokenForApiResources React component, passing the API method name and the imported code fragment as props. The getAccessTokenApi prop defines which API method to demonstrate, and getAccessTokenCode injects the imported code example. The component expects these props to correctly display an example of fetching an access token, and is intended for use in documentation or tutorial context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Alipay SDK Dependency in Android Gradle\nDESCRIPTION: Gradle configuration to add the Alipay SDK as a dependency in an Android project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/alipay-native/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  // ...\n  implementation(files(\"./libs/alipaySdk-15.7.9-20200727142846.aar\"))  // kotlin-script\n  // or\n  implementation files('./libs/alipaySdk-15.7.9-20200727142846.aar')  // groovy-script\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for SSO Integration Guide\nDESCRIPTION: This code exports a constant 'connector' that is used throughout the guide to refer to the specific SSO connector being integrated.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/_template-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = '${connector}';\n```\n\n----------------------------------------\n\nTITLE: Configurando Rota de Login com Modo de Cadastro em Python Flask\nDESCRIPTION: Este snippet demonstra como modificar a rota de login para exibir a página de cadastro como primeira tela. Usa o parâmetro interactionMode='signUp' no método client.signIn() do Logto SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/sign-in\")\nasync def sign_in():\n    return redirect(await client.signIn(\n        redirectUri=\"${defaultRedirectUri}\",\n        interactionMode=\"signUp\", # Mostrar a página de cadastro na primeira tela\n    ))\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Flutter SSO Guide\nDESCRIPTION: MDX import statements for various documentation fragments including introduction, application setup, SSO connector configuration, and testing components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/oidc/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components in JSX\nDESCRIPTION: This snippet imports MDX fragments related to API access token fetching and combines them by passing the code component as a prop to the main fragment component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"access_tpken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Microsoft Entra ID SAML SSO Guide\nDESCRIPTION: This code imports various MDX fragments that contain different sections of the guide, including introduction, application creation, SSO connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/entra-id-saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Icons for User Management Documentation in React\nDESCRIPTION: This code snippet imports SVG icons as React components for use in the user management documentation. The icons represent different aspects of user management such as database, settings, security, and search functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DatabaseIcon from '@site/src/assets/database.svg';\nimport GearIcon from '@site/src/assets/gear.svg';\nimport KeyIcon from '@site/src/assets/key.svg';\nimport SearchIcon from '@site/src/assets/search.svg';\n```\n\n----------------------------------------\n\nTITLE: Structuring Tutorial Content with MDX Components\nDESCRIPTION: This code structures the tutorial content using the imported MDX components. It outlines the main sections of the guide, including introduction, application creation, integration steps, connector setup, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-sendgrid.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (MVC)\" link=\"https://dotnet.microsoft.com/apps/aspnet/mvc\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\".NET Core (MVC)\" />\n\n## Integrate .NET Core (MVC) with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add SendGrid connector \\{#add-connector-connector}\n\n<AddPasswordlessConnector\n  connector={connector}\n  connectorType=\"Email\"\n  passwordlessSignUpIdentifier=\"Email address\"\n/>\n\n## Set up SendGrid email connector \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable SendGrid connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnablePasswordlessConnector\n  connectorType=\"Email\"\n  passwordlessSignUpIdentifier=\"Email address\"\n/>\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (MVC)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This code snippet imports two components related to scopes and claims, and then renders the main component with the code component passed as a prop. This structure allows for modular and reusable documentation of scopes and claims configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Setting Exported Connector Constant - JavaScript\nDESCRIPTION: Defines a constant that represents the current social login connector (Kakao) for contextual use throughout the documentation page. This exported constant enables other modules or components to reference the current connector type dynamically within React/MDX components. Requires JavaScript module support and integration within a React documentation environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-kakao.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Kakao';\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope in Next.js\nDESCRIPTION: This code snippet shows how to set up Logto configuration with Organizations scope enabled. The configuration imports UserScope from the Logto Next.js SDK and adds the Organisations scope to the scopes array in the configuration object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/next';\n\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organisations],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Google Workspace SSO Guide\nDESCRIPTION: This code renders the imported MDX components, passing necessary props such as the connector name and framework. It structures the guide into logical sections including introduction, application creation, integration, connector setup, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" link=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#blazor-webassembly\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Single page app\" framework=\".NET Core (Blazor WebAssembly)\" />\n\n## Integrate .NET Core (Blazor WebAssembly) with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add Google Workspace enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\".NET Core (Blazor WebAssembly)\" />\n\n## Set up Google Cloud Platform \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Google Workspace enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: Exports a constant variable named 'connector' with the string value 'SendGrid'. This constant is likely used within the MDX document or imported components to dynamically reference the specific connector being configured or discussed, ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-sendgrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SendGrid';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This code imports and renders a ConfigApiResources component with three code snippet props that demonstrate different API resource configuration examples. The imports reference fragment components that contain specific API resource configuration code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX fragments for documentation structure\nDESCRIPTION: This snippet imports various MDX fragment files that compose the complete documentation guide. It includes sections like introduction, application creation, connector configuration, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/_template-passwordless.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/${sdkDocDir}/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/${connectorDocDir}/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization IDs and Token Buttons in Vue Template (HTML)\nDESCRIPTION: This Vue template snippet iterates over a list of organization IDs, displaying each one as an item in an unordered list with a corresponding button to trigger token retrieval. It binds the key for each list element to ensure optimal rendering and connects the click handler to the TypeScript logic. The structure assumes reactive data and methods are available in the component script, and requires the environment to support single-file Vue components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <ul>\n    <li v-for=\"organizationId of organizationIds\" v-bind:key=\"organizationId\">\n      <span>{{ organizationId }}</span>\n      <button type=\"button\" @click=\"onClickFetchOrganizationToken(organizationId)\">\n        토큰 가져오기 (콘솔에서 확인)\n      </button>\n    </li>\n  </ul>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Components in React\nDESCRIPTION: Component assembly that imports organization token-related components and configures them with specific organization scope and code snippets for configuration and token access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"urn:logto:scope:organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with npm\nDESCRIPTION: Provides the command to install the @logto/chrome-extension package using npm (Node Package Manager).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Provider\nDESCRIPTION: CLI command to configure AWS S3 or S3-compatible storage with access credentials and endpoint settings\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/file-storage-provider.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm logto db system set storageProvider '{\"provider\":\"S3Storage\",\"accessKeyId\":\"my-access-key-id\",\"accessSecretKey\": \"my-secret-access-key\",\"bucket\":\"logto\",\"endpoint\":\"https://s3.us-east-2.amazonaws.com\"}'\n```\n\n----------------------------------------\n\nTITLE: Importing Components and MDX Files - JavaScript\nDESCRIPTION: This JavaScript code imports a React component from a file path and separately imports an MDX/Markdown file containing a code snippet. It sets up the required dependencies for rendering complex documentation blocks and enables the use of external code samples directly within the React component hierarchy. Both fragment imports must resolve correctly and rely on React/MDX support within the build pipeline.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Adding Blorc.Core Script Reference to Blazor WASM Application in HTML\nDESCRIPTION: Adds the required Blorc.Core injector.js script reference to the index.html file of a Blazor WebAssembly application, which is necessary for the Blorc authentication infrastructure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- ... -->\n  <script src=\"_content/Blorc.Core/injector.js\"></script>\n  <!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for B2B Documentation\nDESCRIPTION: Import statements for SVG components and MDX files used in the B2B architecture documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/introduction/plan-your-architecture/b2b.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ImageB2b from '@site/docs/introduction/plan-your-architecture/assets/b2b.svg';\nimport OrganizationIcon from '@site/src/assets/organization.svg';\nimport SsoIcon from '@site/src/assets/sso.svg';\n\nimport GenericFeatures from './_generic-features.mdx';\nimport RelatedResource from './_related-resource.mdx';\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies after updating pubspec.yaml\nDESCRIPTION: Command to fetch the Logto Dart SDK after adding it to the pubspec.yaml dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub get\n```\n\n----------------------------------------\n\nTITLE: File-level Documentation Sectioning - MDX/Markdown\nDESCRIPTION: This snippet shows both frontmatter metadata (YAML) and inline comments marking logical subdivisions of the documentation for Docusaurus and Markdown/MDX rendering. The frontmatter includes page slug, tags, title, and references to SDK and connector; inline comments denote technical constraints and links to issue tracking for Docusaurus functionality. Inputs are documentation metadata and comments, output is structured metadata for site routing and editorial context in the static site. No external dependencies; used primarily for documentation structure and React-based Markdown rendering.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-facebook.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nslug: how-to-build-facebook-sign-in-with-express-and-logto\ntags: [authentication, facebook, express, js, social-sign-in, sign-in, login]\ntitle: How to build Facebook sign-in with Express\nsdk: Express\nconnector: Facebook\n---\n\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n\n{/* truncate */}\n```\n\n----------------------------------------\n\nTITLE: Rendering Enable Social Connector Component in MDX\nDESCRIPTION: This MDX/JSX snippet renders the `EnableSocialConnector` component, likely defined in `./fragments/_enable-social-connector.mdx`. It passes the `connector` variable ('GitHub') as a prop to instruct the user on how to enable the newly configured GitHub connector in the Logto Sign-in Experience settings, making it visible to end-users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-github.mdx#2025-04-22_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<EnableSocialConnector connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Structuring React Native Logto Integration Guide\nDESCRIPTION: This snippet outlines the structure of the Logto integration guide for React Native. It includes sections for installation, client initialization, sign-in and sign-out implementation, and a checkpoint for testing the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Init LogtoClient \\{#init-logtoclient}\n\n<InitClient />\n\n<ImplementSignInAndSignOut />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Rendering Social Connector Enablement Component for Hugging Face\nDESCRIPTION: Renders the EnableSocialConnector component with the Hugging Face connector parameter, providing instructions for enabling the connector in the sign-in experience.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-hugging-face.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<EnableSocialConnector connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/chrome-extension using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the Logto SDK for Chrome extensions. Executing this command in your project's terminal will download the package and add it to your `package.json` dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in MDX (JavaScript)\nDESCRIPTION: This snippet exports a JavaScript constant named 'connector' with the string value 'X (Twitter)'. This constant is defined within the MDX file and is likely used by the MDX content itself or passed as a prop to imported components (like 'Intro', 'AddSocialConnector', etc.) to dynamically refer to the specific social connector being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-x-twitter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'X (Twitter)';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in MDX (JavaScript)\nDESCRIPTION: Defines and exports a JavaScript constant named 'connector' holding the string 'Microsoft Entra ID SAML enterprise SSO'. This constant is likely used within the MDX file or imported components to reference the connector type consistently.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication in Vue.js\nDESCRIPTION: This code snippet demonstrates how to import and use the Logto authentication library in a Vue.js application. It checks if a user is authenticated and retrieves an access token for a specific API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogto, type UserInfoResponse } from '@logto/vue';\n\nconst { isAuthenticated, getAccessToken } = useLogto();\n\nif (isAuthenticated.value) {\n  (async () => {\n    const accessToken = await getAccessToken('https://shopping.your-app.com/api');\n    console.log(accessToken);\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name for SAML SSO (JavaScript)\nDESCRIPTION: This snippet exports a constant identifying the specific SSO connector ('SAML enterprise SSO'), facilitating its reuse throughout the documentation or within embedded React components. It ensures consistent reference to the connector without repetition or typo risk. No dependencies are required for this export, but the constant must be imported where needed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-android-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Naver Sign-In Tutorial with Expo\nDESCRIPTION: This code imports various MDX fragments that make up the tutorial structure for implementing Naver sign-in with Expo (React Native) and Logto. The imports include sections for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-naver.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/social/naver/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Naver';\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token for Logto Management API with cURL\nDESCRIPTION: This cURL command shows how to make a direct HTTP request to obtain an access token for the Logto Management API. It includes the necessary headers and form parameters for authentication using the client credentials grant type.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/machine-to-machine/fragments/_fetch-access-token-for-logto-management-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n  --request POST 'https://your.logto.endpoint' \\\n  --header 'Authorization: Basic ${your_auth_string}' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'grant_type=client_credentials' \\\n  --data-urlencode 'resource=https://${tenantId}.logto.app/api' \\\n  --data-urlencode 'scope=all'\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments for Organization Token in Next.js\nDESCRIPTION: Imports the FetchOrganizationTokenForUser documentation component from a fragments directory, which will be used to display organization token documentation with specific code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant in JavaScript\nDESCRIPTION: Exports a JavaScript constant named 'connector' with the string value 'Kakao'. This constant is likely used within the MDX file or passed as a prop to imported components to dynamically specify the social connector being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-kakao.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Kakao';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for OrganizationInfo Object in Email Templates\nDESCRIPTION: Defines the structure of the OrganizationInfo object used in email templates. This type contains organization identification and branding information for organization-related communications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/email-connectors/email-templates.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype OrganizationInfo = {\n  id: string;\n  name: string;\n  branding?: {\n    logoUrl?: string;\n    darkLogoUrl?: string;\n    favicon?: string;\n    darkFavicon?: string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Integration Fragments for SSO Documentation - JavaScript (MDX)\nDESCRIPTION: This snippet imports modular sections representing different parts of the SSO integration process, such as the introduction, application creation, SSO connector setup, configuration saving, and validation. Dependencies include React (for JSX), MDX processing (for .mdx fragments), and the existence of documentation fragments at the specified paths. The imported modules are then used as components to render each section in the main documentation file. Inputs are not required for this import block. Outputs will be available through usage of the imported components elsewhere in the file. Note: Requires Docusaurus or similar MDX-aware static site generator.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/entra-id-saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Import Fragment Components in MDX\nDESCRIPTION: MDX imports for various documentation fragments and components used to structure the enterprise SSO integration guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-vue-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-saml/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: Demonstrates setting up LogtoConfig with endpoint URL, application ID, and an array of API resource endpoints. The configuration includes essential parameters for Logto authentication and API resource access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/code-snippets/_resource-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // Add your API resources\n  // highlight-start\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Components for React Native Logto Integration\nDESCRIPTION: This snippet imports various components and fragments needed for the Logto integration guide in React Native. It includes checkpoint tests, guide tips, implementation steps, and installation instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport GuideTip from './_guide-tip.mdx';\nimport ImplementSignInAndSignOut from './_implement-sign-in-and-sign-out.mdx';\nimport InitClient from './_init-client.mdx';\nimport Installation from './_installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exchanging Subject Token for Access Token\nDESCRIPTION: HTTP request to Logto's token endpoint implementing the OAuth 2.0 token exchange flow. The support application exchanges the subject token for an access token that will be used to impersonate the target user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/user-impersonation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPOST /oidc/token HTTP/1.1\nHost: techcorp.logto.app\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=urn:ietf:params:oauth:grant-type:token-exchange\n&client_id=techcorp_support_app\n&scope=resource:read\n&subject_token=alx_7h32jf8sK3j2\n&subject_token_type=urn:ietf:params:oauth:token-type:access_token\n&resource=https://api.techcorp.com/customer-data\n```\n\n----------------------------------------\n\nTITLE: Exporting Google Connector Constant for Go Authentication Documentation in JavaScript\nDESCRIPTION: This snippet defines and exports a constant named 'connector' set to 'Google'. It signals to other components and imported fragments which connector is being referenced in the tutorial context, enabling dynamic content injection. This is a simple assignment export and requires no additional dependencies except for an environment that supports ES module syntax.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-google.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const connector = 'Google';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Organization Token Fetching in React\nDESCRIPTION: This snippet imports necessary components and code snippets for configuring organizations and fetching organization tokens. It includes a custom component for fetching organization tokens and separate code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Metadata Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of connector metadata, including properties like isStandard, readme, and configTemplate. It explains the purpose and usage of each attribute.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/connectors/connector-data-structure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### isStandard \\{#isstandard\\}\n\n_isStandard_ ist ein OPTIONALER boolescher Attribut, um zu identifizieren, ob der soziale Connector ein \"Standard\"-Connector ist. Du kannst einen \"Standard\"-Connector an seinem wahrheitsgemäßen `isStandard` Attribut erkennen.\n\n:::note\nLogto unterstützt nur \"Standard\"-soziale Connectors. Das heißt, alle Logto E-Mail- oder SMS-Connectors sind KEINE \"Standard\"-Connectors.\n\nLogto nennt Connectors, die auf offenen und standardisierten Protokollen (z.B. OAuth, OIDC, SAML, etc.) basieren, \"Standard\"-Connectors. Es wird erwartet, dass Logto-Benutzer mehrere Instanzen auf jedem Standard-Connector basierend auf diesem Kontext erstellen. Zum Beispiel, wenn Logto bereits einen OAuth-Standard-Connector bereitgestellt hat, können Benutzer \"OAuth GitHub Connector\", \"OAuth Google Connector\" und \"OAuth Facebook Connector\" Instanzen erstellen. Sie basieren alle auf dem Logto OAuth-Standard-Connector.\n\nWenn du mit dem Connector-Design von Logto vertraut bist, kann zur gleichen Zeit höchstens EIN E-Mail- oder SMS-Connector existieren, was bedeutet, dass Logto derzeit keine \"Standard\"-E-Mail- oder SMS-Connectors benötigt.\n:::\n\n### readme \\{#readme\\}\n\n_readme_ ist ein relativer Pfad der README-Markdown-Datei des Connectors, deren Inhalte während der Einrichtung der Connectors im \"Admin Console\" angezeigt werden.\n\n### configTemplate \\{#configtemplate\\}\n\n_configTemplate_ ist ein relativer Pfad des Konfigurationsbeispiels des Connectors.\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources Component in React/MDX\nDESCRIPTION: Imports MDX fragments and code components, then renders a ConfigApiResources component with code snippets passed as props through component references.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments with MDX and JavaScript\nDESCRIPTION: This snippet imports MDX fragments and external guides into the main documentation file, leveraging Docusaurus' ability to modularize content. No external code dependencies are required beyond Docusaurus and the specified MDX files; this setup allows for content reusability and organized table of contents. The imported components are later rendered to compose the final documentation guide, with special care for TOC limitations in Docusaurus.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-go-hugging-face.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport FrameworkGuide from '@site/docs/quick-starts/framework/go/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/docs/integrations/social/hugging-face/_integration.mdx';\\n\\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Visualizing WordPress Sign-out Flow with Mermaid Diagram\nDESCRIPTION: A sequence diagram illustrating the sign-out flow between User, WordPress, and Logto. It shows how a user initiates logout from WordPress, gets redirected to Logto for sign-out processing, and returns to WordPress once logged out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/wordpress-plugin/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant User\n    participant WordPress\n    participant Logto\n\n    User->>WordPress: 「ログアウト」をクリック\n    WordPress->>Logto: サインアウトのために Logto にリダイレクト\n    Logto->>Logto: サインアウト成功\n    Logto->>WordPress: WordPress にリダイレクト\n    WordPress->>User: ログアウト完了\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Card List with React for Logto Cloud Features\nDESCRIPTION: Renders a DocCardList component that displays cards for various Logto Cloud features with icons, descriptions, and links to relevant documentation pages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-cloud/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Tenant settings',\n      href: '/logto-cloud/tenant-settings',\n      description:\n        'Update or change the tenant name, check the regions, and delete or leave the tenant.',\n      customProps: {\n        icon: <TenantSettings />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Tenant member management',\n      href: '/logto-cloud/tenant-member-management',\n      description: 'The tenant admin can invite and manage members and update their roles.',\n      customProps: {\n        icon: <TenantMemberManagement />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Custom domains',\n      href: '/logto-cloud/custom-domain',\n      description:\n        'Use your own domain for your Logto tenant to keep branding consistent on your sign-in experience.',\n      customProps: {\n        icon: <CustomDomains />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Billing and pricing',\n      href: '/logto-cloud/billing-and-pricing',\n      description: 'Easily understand your bill and manage your subscription with confidence.',\n      customProps: {\n        icon: <PricingAndBilling />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Type Constant in JavaScript\nDESCRIPTION: This JavaScript snippet defines and exports a constant variable named `connector` with the string value 'OIDC enterprise SSO'. This constant is likely used within the MDX document or its imported components to dynamically refer to the specific SSO connector being discussed in the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Components for Organization Token Documentation\nDESCRIPTION: Imports various MDX fragments and code snippets, then composes them using the FetchOrganizationTokenForUser component to document the process of fetching organization tokens for users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Scopes and Claims Documentation in JSX\nDESCRIPTION: This code snippet imports two components related to scopes and claims documentation and combines them into a single view. It passes a code component as a prop to the main documentation component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Service Role Client for M2M Applications\nDESCRIPTION: This code shows how to create a Supabase client with the service_role secret to bypass Row Level Security for machine-to-machine applications. This allows the client to access all data in the database without restrictions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js';\n\n// ...\nconst SUPABASE_SERVICE_ROLE_SECRET = process.env.SUPABASE_SERVICE_ROLE_SECRET;\n\nconst client = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_SECRET, {\n  // ...options\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with Logto Client\nDESCRIPTION: Makes an asynchronous request to obtain an access token for a specific API endpoint using the Logto client. Takes a resource URL as parameter and returns a token that can be used for authenticated API requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst token = await logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with pnpm\nDESCRIPTION: This command installs the @logto/chrome-extension package using pnpm (Performant npm) package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List for User Management Features\nDESCRIPTION: This JSX code creates a card list using the DocCardList component to display various user management features. Each card includes a label, href, description, and custom icon prop.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Understanding user data',\n      href: '/user-management/user-data',\n      description:\n        'In Logto, user data include basic authentication data based on the OpenID Connect protocol, along with custom data.',\n      customProps: {\n        icon: <DatabaseIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Manage users',\n      href: '/user-management/manage-users',\n      description:\n        'Create, update, read and delete users through Logto Console or Logto Management API.',\n      customProps: {\n        icon: <GearIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Advanced user search',\n      href: '/user-management/advanced-user-search',\n      description: 'Directly using Logto Management API to perform advanced user search.',\n      customProps: {\n        icon: <SearchIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Personal access token',\n      href: '/user-management/personal-access-token',\n      description:\n        'Personal access token (PAT) provides a secure way for users to grant access tokens without using their credentials and interactive sign-in.',\n      customProps: {\n        icon: <KeyIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI for Kakao Login\nDESCRIPTION: Format for the redirect URI that needs to be added to the Kakao Login configuration. Requires replacing YOUR_URL with your Logto URL and including the connector_id found in the Logto Admin Console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/integrations/social/kakao/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttp(s)://YOUR_URL/callback/${connector_id}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new LogtoClient instance with a custom configuration. It specifically highlights the addition of custom scopes for read and write permissions on shopping and store functionalities, as well as defining specific API resource endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new LogtoClient(\n  new LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"], // Adicionar escopos\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"], // Adicionar recursos de API\n    // highlight-end\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: React SDK での組織スコープ設定\nDESCRIPTION: Logto React SDK で組織スコープを設定する方法です。LogtoProvider コンポーネントの config プロパティに UserScope.Organizations を追加します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, UserScope } from '@logto/react';\n\nconst App = () => (\n  <LogtoProvider\n    config={{\n      // ...\n      scopes: [UserScope.Organizations],\n    }}\n  >\n    {/* ... */}\n  </LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for WordPress Hugging Face Integration\nDESCRIPTION: Imports various MDX fragment components that contain sections of the tutorial, including introductory content, application creation steps, social connector configuration, and testing procedures.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-hugging-face.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/wordpress-plugin/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/hugging-face/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Hugging Face';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Vue SDK with npm\nDESCRIPTION: Installs the Logto Vue SDK (@logto/vue) using npm package manager. This command adds the SDK as a dependency to your Vue project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components and Fragments\nDESCRIPTION: This snippet imports necessary MDX components and fragments. `FetchOrganizationTokenForUser` is likely a reusable documentation structure, while `ConfigOrganizationCode` and `GetOrganizationAccessTokenCode` probably contain code examples for specific steps in the organization token fetching process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration with Organization Scope in TypeScript\nDESCRIPTION: Sets up a Logto configuration object with organization scopes enabled. The code imports necessary types from @logto/capacitor package and configures the scopes array with UserScope.Organizations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code initializes NextAuth with a Logto authentication provider. It configures the authentication scope to include 'openid offline_access profile email' and sets a custom API resource for the authorization flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          scope: 'openid offline_access profile email',\n          // highlight-next-line\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto with Multiple API Resources in Vue Application\nDESCRIPTION: This code initializes Logto authentication in a Vue application using the createLogto function from @logto/vue package. It demonstrates how to configure multiple API resources that the application will need to access, with the resources line highlighted as the key focus point.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for Slack Integration\nDESCRIPTION: This code snippet defines a constant 'connector' with the value 'Slack', which is used throughout the document to refer to the Slack integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vue-slack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Slack';\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources with Code Example Props - React JSX\nDESCRIPTION: This snippet renders the ConfigApiResources React component, passing in three code example props: basic configuration, configuration with scopes, and configuration with shared scopes. Each prop receives a corresponding imported Markdown React component. The JSX syntax is intended for use in a React application and expects the imported components to be compatible with React rendering.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Expected Location of WXEntryActivity.kt\nDESCRIPTION: This Bash snippet illustrates the expected file path for the `WXEntryActivity.kt` file within a standard Android project structure. The WeChat SDK requires this activity to be placed in a `wxapi` subpackage directly under the application's main package source directory.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsrc/main/kotlin/com/sample/app/wxapi/WXEntryActivity.kt\n```\n\n----------------------------------------\n\nTITLE: Using File-Level Comments for TOC Organization - JavaScript\nDESCRIPTION: This multi-line JavaScript comment at the file's top provides documentation for future maintainers, explaining the rationale for dividing templates into sections for proper Table of Contents (TOC) behavior. It references an external issue for deeper context and does not affect runtime but helps in long-term documentation maintenance. No dependencies or logic are involved.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-oidc-enterprise-sso.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining metadata like slug, sidebar properties, and tutorial names.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/x/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nslug: /integrations/x\nsidebar_label: X (Twitter)\nsidebar_custom_props:\n  description: Microblogging social platform for real-time news, discussions, and payments/creator tools.\n  logoFilename: twitter.svg\n  darkLogoFilename: twitter-dark.svg\ntutorial_name: X (Twitter)\ntutorial_config_name: X OAuth app\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring DocCardList Navigation Component for Logto Documentation in JSX\nDESCRIPTION: This code snippet imports various SVG icons and configures a DocCardList component for navigating Logto documentation. It defines a list of navigational items with labels, descriptions, URLs, and associated icons covering authentication, account management, and authorization features.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/introduction/plan-your-architecture/_generic-features.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport AuthorizationIcon from '@site/src/assets/authorization.svg';\nimport GearIcon from '@site/src/assets/gear.svg';\nimport LockIcon from '@site/src/assets/lock.svg';\nimport SecurityIcon from '@site/src/assets/security.svg';\nimport SignInIcon from '@site/src/assets/sign-in.svg';\nimport UserManagementIcon from '@site/src/assets/user-management.svg';\n\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Sign-up and sign-in',\n      href: '/end-user-flows/sign-up-and-sign-in',\n      description: 'Various authentication methods: password, passwordless, and social sign-in.',\n      customProps: {\n        icon: <SignInIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Multi-factor authentication',\n      href: '/end-user-flows/mfa',\n      description:\n        'Authenticator app, Passkey, Backup codes. Allow users to enable MFA independently.',\n      customProps: {\n        icon: <LockIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Account settings',\n      href: '/end-user-flows/account-settings',\n      description:\n        'Use Logto Account API to develop account settings and user profile pages for your end-users.',\n      customProps: {\n        icon: <GearIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Role-based access control',\n      href: '/authorization/role-based-access-control/',\n      description: 'Define roles and assign corresponding permissions to control user actions.',\n      customProps: {\n        icon: <AuthorizationIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'User management',\n      href: '/user-management',\n      description: 'Manage user identities in Logto Console or Logto Management API.',\n      customProps: {\n        icon: <UserManagementIcon />,\n      },\n    },\n    {\n      type: 'link',\n      label: 'Make your service as identity provider',\n      href: '/integrate-logto/third-party-applications',\n      description: 'Allow users to authorize third-party apps themselves.',\n      customProps: {\n        icon: <SecurityIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon Callback URL Format in Logto\nDESCRIPTION: The required callback URL format when setting up Amazon as an identity provider in Logto. This URL must be added to the 'Allowed redirect URLs' field in Amazon Developer console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/integrations/social/amazon/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${your_logto_origin}/callback/${connector_id}\n```\n\n----------------------------------------\n\nTITLE: Importing Stylesheet in React MDX File - JavaScript\nDESCRIPTION: This snippet imports a custom SCSS stylesheet into the MDX/React document, enabling the use of bespoke styles defined within 'custom.scss' throughout the page. The dependency is the presence of the 'custom.scss' file and an appropriate web build setup (such as Webpack with SCSS support) capable of handling this import. No parameters are required, and there is no output aside from applied styles. This snippet should be placed at the top of an MDX or React file to ensure styles are loaded early.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/terms/privacy-policy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport './custom.scss';\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/chrome-extension using Yarn (Bash)\nDESCRIPTION: This command uses the Yarn package manager to install the `@logto/chrome-extension` library. It adds the package as a dependency to the current project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Markdown Links to Concept Documentation\nDESCRIPTION: A collection of Markdown-formatted links using custom URL components to navigate to conceptual documentation pages in the Logto documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Concepts\n\n<Url href=\"/concepts/sign-in-experience\">Sign-in experience</Url>\n\n<Url href=\"/concepts/authn-vs-authz/\">Authentication vs. authorization</Url>\n\n<Url href=\"/concepts/core-service/\">Logto core service</Url>\n\n<Url href=\"/concepts/opaque-token/\">Opaque token</Url>\n```\n\n----------------------------------------\n\nTITLE: Handling Organization Authentication with Logto in Next.js API Route\nDESCRIPTION: Implements a protected API endpoint that retrieves organization tokens and claims for an authenticated user. The endpoint checks for user authentication, fetches organization IDs from token claims, and retrieves corresponding organization tokens and claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logtoClient } from '../../../libraries/logto';\n\nexport default logtoClient.withLogtoApiRoute(async (request, response) => {\n  if (!request.user.isAuthenticated) {\n    response.status(401).json({ message: 'Unauthorized' });\n\n    return;\n  }\n\n  const client = await logtoClient.createNodeClientFromNextApi(request, response);\n\n  // Organization IDs are stored in the user's ID token claims\n  const { organizations = [] } = await client.getIdTokenClaims();\n\n  const organizationTokens = await Promise.all(\n    organizations.map(async (organizationId) => client.getOrganizationToken(organizationId))\n  );\n\n  const organizationClaims = await Promise.all(\n    organizations.map(async (organizationId) => client.getOrganizationTokenClaims(organizationId))\n  );\n\n  // Do things with the organization token and / or claims\n\n  response.json({\n    organizations,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Section Divider and TOC Handling - MDX and JSX Comments\nDESCRIPTION: This snippet uses a JSX comment to explain why documentation templates are divided into sections instead of a unified template. It highlights a limitation with imported MDX not appearing in Docusaurus's Table of Contents, referencing an ongoing issue. This inline comment provides context to future maintainers regarding TOC workarounds.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-azure-ad.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in MDX for GitHub Sign-in Tutorial\nDESCRIPTION: This code imports various MDX fragment components to build a comprehensive GitHub sign-in tutorial using Vanilla JS. The imports include sections for introduction, application creation, social connector setup, configuration, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vanilla-js-github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/vanilla-js/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/github/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'GitHub';\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token for Logto Management API using cURL\nDESCRIPTION: This cURL command demonstrates how to obtain an access token for the Logto Management API. It sends a POST request to the token endpoint with the necessary headers and form data, including the grant type, resource, and scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/generic/machine-to-machine/fragments/_fetch-access-token-for-logto-management-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n  --request POST 'https://your.logto.endpoint' \\\n  --header 'Authorization: Basic ${your_auth_string}' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'grant_type=client_credentials' \\\n  --data-urlencode 'resource=https://${tenantId}.logto.app/api' \\\n  --data-urlencode 'scope=all'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'use server' Annotation Restriction in React Client Components\nDESCRIPTION: This code snippet illustrates the restriction that inline 'use server' annotated Server Actions cannot be defined directly within Client Components. Instead, they must be passed down as props from a Server Component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/_server-actions-tip.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"use server\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components\nDESCRIPTION: Imports multiple code fragment components and renders them using the ConfigApiResources component. The code demonstrates the component composition pattern for displaying different API resource configuration examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector String in JavaScript\nDESCRIPTION: This snippet exports a constant named 'connector' with the value 'Okta enterprise SSO'. It is used to consistently reference the current SSO connector through the file and fragments. There are no parameters or outputs; it acts as a shared identifier for display and component logic.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Fetching Posts from Supabase with User Context\nDESCRIPTION: This function demonstrates how to fetch posts from Supabase using the client created in the middleware. Supabase will return only the posts belonging to the current user based on the Row Level Security policies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst fetchPosts = async (ctx) => {\n  const { data } = await ctx.supabase.from('posts').select('*');\n\n  return data;\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in MDX/JavaScript\nDESCRIPTION: This JavaScript code snippet, executed within the MDX context, exports a constant named `connector` assigned the string value 'GitHub'. This constant is intended to be used by imported reusable documentation components to dynamically display 'GitHub' where the connector name is needed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'GitHub';\n```\n\n----------------------------------------\n\nTITLE: Component Configuration Export\nDESCRIPTION: Exports the connector configuration variable used throughout the documentation components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-vue-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation Components in JSX\nDESCRIPTION: This snippet shows the import statements and component usage for rendering documentation on how to fetch access tokens for API resources. It imports a reusable documentation fragment and a code example, then combines them in a component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering ScopesAndClaims Component with Code Examples in JSX\nDESCRIPTION: This JSX snippet renders the `ScopesAndClaims` React component. It passes the previously imported `ScopesAndClaimsCode` (containing code examples or related content) to the component via the `configScopesCode` prop, allowing the component to display this specific configuration information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Defining OIDC Connector Constant in JavaScript\nDESCRIPTION: This JavaScript snippet defines and exports a constant named `connector` with the string value 'OIDC'. This constant is used throughout the document, likely passed as a prop to reusable MDX components (e.g., Intro, AddSocialConnector), to specify the type of connector being configured (OpenID Connect) dynamically within the tutorial content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-oidc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant for Documentation Components in JavaScript\nDESCRIPTION: This snippet declares and exports a string constant representing the social connector ('X (Twitter)') to be consumed by imported documentation fragments. It is a module-level export, with no dependencies beyond the JavaScript runtime. The exported variable acts as a configuration input for UI components and content sections, helping standardize references to the connector throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-x-twitter.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'X (Twitter)';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in JavaScript\nDESCRIPTION: Exports a constant named 'connector' with the string value 'LinkedIn'. This constant is likely used within the MDX file or imported components (like `<Intro>`, `<AddSocialConnector>`, etc.) to dynamically insert the connector name into the tutorial content, making the guide reusable or easier to update.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-linkedin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'LinkedIn';\n```\n\n----------------------------------------\n\nTITLE: Verifying Logto Access Token in Express Backend\nDESCRIPTION: This middleware authenticates requests by verifying the Logto access token and extracting the user ID. It uses the jose library to validate the JWT against Logto's JWKS endpoint and checks for the correct issuer and audience claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// auth-middleware.ts\nimport { createRemoteJWKSet, jwtVerify } from 'jose';\n\n//...\n\nexport const verifyAuthFromRequest = async (ctx, next) => {\n  // Extraire le jeton\n  const token = extractBearerTokenFromHeaders(ctx.request.headers);\n\n  const { payload } = await jwtVerify(\n    token, // Le jeton Bearer brut extrait de l'en-tête de la requête\n    createRemoteJWKSet(new URL('https://<your-logto-domain>/oidc/jwks')), // générer un jwks en utilisant jwks_uri demandé au serveur Logto\n    {\n      // émetteur attendu du jeton, doit être émis par le serveur Logto\n      issuer: 'https://<your-logto-domain>/oidc',\n      // audience attendue du jeton, doit être l'indicateur de ressource de l'API actuelle\n      audience: '<your request listener resource indicator>',\n    }\n  );\n\n  // si vous utilisez RBAC\n  assert(payload.scope.includes('some_scope'));\n\n  // logique de charge utile personnalisée\n  ctx.auth = {\n    userId: payload.sub,\n  };\n\n  return next();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organization Scope in React Native\nDESCRIPTION: This code snippet demonstrates how to import necessary types from Logto and set up a configuration object. It specifically includes the Organizations scope in the configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the LogtoConfig type from the '@logto/capacitor' package and create a configuration object for a Capacitor project. Required fields are appId (the application identifier), endpoint (the URL of the Logto authentication endpoint), scopes (permissions to request), and resources (array of protected API resource URLs). The snippet presumes the presence of the '@logto/capacitor' dependency and should be used as a basis for initializing authentication in a Capacitor TypeScript project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\\n\\nconst config: LogtoConfig = {\\n  appId: '<your-application-id>',\\n  endpoint: '<your-logto-endpoint>',\\n  scopes: ['read', 'write'],\\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing User Info and Claims Components in MDX\nDESCRIPTION: Imports required MDX fragments and components for user information retrieval and claims configuration, then renders them with specific props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GetUserInfoApis from '../../fragments/_get-user-info-apis.mdx';\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.mdx';\n\n<GetUserInfoApis getIdTokenClaimsApi=\"getIdTokenClaims\" fetchUserInfoApi=\"fetchUserInfo\" />\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Creating User Profile Template\nDESCRIPTION: HTML template that displays authenticated user details and provides a logout button.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <h1>User Details</h1>\n  <div>\n    <p>\n    <div><strong>name:</strong> <span th:text=\"${username}\"></span></div>\n    <div><strong>email:</strong> <span th:text=\"${email}\"></span></div>\n    <div><strong>id:</strong> <span th:text=\"${sub}\"></span></div>\n    </p>\n  </div>\n\n  <form th:action=\"@{/logout}\" method=\"post\">\n    <input type=\"submit\" value=\"Logout\" />\n  </form>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for Line Sign-In\nDESCRIPTION: This code snippet defines a constant 'connector' with the value 'Line', which is used throughout the document to reference the Line social connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-line.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Line';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for AWS SES Integration Guide\nDESCRIPTION: Importing various MDX fragment components needed to assemble the complete tutorial on AWS SES email passwordless sign-in with .NET Core Blazor Server and Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-aws-ses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-server/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/aws-ses/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'AWS SES';\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth Logto Provider with Resource Parameter in TypeScript\nDESCRIPTION: This TypeScript snippet initializes NextAuth using the `next-auth` library. It configures a custom provider named 'logto' and sets the OAuth authorization parameters, including standard scopes (`openid`, `offline_access`, `profile`, `email`) and a specific `resource` parameter ('https://shopping.your-app.com/api'). This resource parameter is crucial for requesting access tokens intended for a specific API audience (Resource Indicator). The configuration exports standard NextAuth handlers and functions (`handlers`, `signIn`, `signOut`, `auth`) for use within the Next.js application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"./auth.ts\"\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          scope: 'openid offline_access profile email',\n          // highlight-next-line\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Requesting Organization-Specific Access Token in Logto SDK\nDESCRIPTION: Example of using Logto SDK to request an access token with organization_id parameter. This snippet shows how to get an access token limited to scopes from a specific organization's roles, and how to access the token claims including organization_id.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-api-reources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst accessToken = await logto.getAccessToken('https://my-resource.com/api', 'org_1');\n\n// Or getting claims directly\nconst accessTokenClaims = await logto.getAccessTokenClaims('https://my-resource.com/api', 'org_1');\nconsole.log(accessTokenClaims.organization_id); // 'org_1'\nconsole.log(accessTokenClaims.aud); // 'https://my-resource.com/api'\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in React (MDX) - JavaScript\nDESCRIPTION: This snippet imports modular documentation sections and integration guides as MDX/JSX imports within a React-based documentation site. It sets up the foundational building blocks for displaying different documentation steps and references external guides for SAML and Expo React Native integration. Dependencies include the MDX loader, React/JSX, and component files stored relative to the current file path. This pattern organizes documentation content and supports dynamic assembly of the guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-saml.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in Nuxt Component\nDESCRIPTION: This snippet demonstrates how to implement sign-in and sign-out functionality in a Nuxt component using the useLogtoUser composable. It includes a dynamic link that changes based on the user's authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { useLogtoUser } from '#imports'; // Diese Zeile hinzufügen, wenn der Auto-Import deaktiviert ist\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- Vereinfachter Button für Anmeldung und Abmeldung -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Name Constant in JavaScript (MDX)\nDESCRIPTION: Defines and exports a JavaScript constant named 'connector' with the string value 'X (Twitter)'. This constant is intended for use within the MDX file or its imported components, likely passed as a prop to ensure consistent reference to the social connector being configured.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-x-twitter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'X (Twitter)';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet imports necessary components and renders a FetchAccessTokenForApiResources component with specific props for fetching an access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Bulk Assigning Organization Roles to Multiple Users in Bash\nDESCRIPTION: This curl command shows how to assign roles to multiple users in an organization simultaneously. It requires an access token with appropriate permissions and accepts an array of user IDs and role IDs in the request body.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/organization-experience/organization-management.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X POST https://[tenant_id].logto.app/api/organizations/{id}/users/roles \\\n -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\"userIds\":[\"userId1\", \"userId2\"],\"organizationRoleIds\":[\"admin\"]}'\n```\n\n----------------------------------------\n\nTITLE: Logto SDK Configuration Example (TSX)\nDESCRIPTION: Configuration example for Logto SDK showing how to set up resources and scopes for API protection.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config: LogtoConfig = {\n  // ...other configs\n  resources: ['https://resource-server.com/api'],\n  scopes: ['read', 'write'],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Authentication Components in React\nDESCRIPTION: This code imports necessary MDX fragments and code snippets to render documentation for organization token authentication. It passes the organization scope value and code examples as props to the FetchOrganizationTokenForUser component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"LogtoCore::USER_SCOPE[:organizations]\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Logto Docker Container\nDESCRIPTION: Docker run command to start the Logto container with necessary port mappings and environment variables.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --name logto \\\n  -p 3001:3001 \\\n  -p 3002:3002 \\\n  -e TRUST_PROXY_HEADER=1 \\\n  -e ENDPOINT=https://<your-logto-domain> \\\n  -e ADMIN_ENDPOINT=https://<your-logto-admin-domain> \\\n  -e DB_URL=postgres://username:password@your_postgres_url:port/db_name \\\n  ghcr.io/logto-io/logto:latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto with Custom Scopes and Resources in Vue\nDESCRIPTION: This snippet shows how to use the createLogto function to set up Logto authentication in a Vue application. It demonstrates how to specify custom scopes and resources for the authentication configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Logto JS SDK and Angular OIDC with yarn\nDESCRIPTION: Command to install @logto/js and angular-auth-oidc-client packages using yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/angular/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/js angular-auth-oidc-client\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization Management with Logto in React\nDESCRIPTION: A React component that retrieves organization IDs from ID token claims and provides functionality to fetch organization tokens. It uses the Logto authentication library to manage authentication state and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useLogto } from '@logto/react';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID 權杖 (ID token) 宣告 (claims)', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  console.log('原始權杖 (raw token)', await getOrganizationToken(organizationId));\n                }}\n              >\n                取得權杖 (fetch token)（查看主控台）\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: This snippet creates a LogtoConfig object with essential parameters for Logto integration. It includes the Logto endpoint, app ID, API resources, and their associated scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Add your API resources' scopes\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Logto Documentation\nDESCRIPTION: This code snippet imports various MDX fragments and components used to construct the tutorial page. It includes sections for introduction, application creation, connector setup, configuration, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-sendgrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-server/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/sendgrid/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'SendGrid';\n```\n\n----------------------------------------\n\nTITLE: Defining the Connector Constant in MDX (JavaScript)\nDESCRIPTION: This JavaScript snippet, embedded within an MDX file, declares and exports a constant named `connector` and assigns it the string value 'SAML'. This variable is likely used throughout the document or passed as props to imported MDX components (like `<Intro>`, `<AddSocialConnector>`, etc.) to dynamically refer to the specific connector type being configured, ensuring consistency in the tutorial content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-saml.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML';\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for SendGrid Email Connector in Logto\nDESCRIPTION: JSON configuration example for the SendGrid email connector in Logto, specifying the subject, content, usage type, and content type for a sign-in template.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/email-connectors/email-templates.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subject\": \"<sign-in-template-subject>\",\n  \"content\": \"<table cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" ...\",\n  \"usageType\": \"SignIn\",\n  \"type\": \"text/html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with API Resource in ASP.NET Core\nDESCRIPTION: This code snippet demonstrates how to add Logto authentication to an ASP.NET Core application's service collection with a configured API resource indicator. The resource property specifies the API endpoint that will be accessible after authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddLogtoAuthentication(options =>\n{\n  // ...\n  // highlight-next-line\n  options.Resource = \"https://<your-api-resource-indicator>\";\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Constant - JavaScript\nDESCRIPTION: This snippet defines and exports a string constant, 'connector', which is used as a prop throughout the documentation to dynamically insert the name of the integrated social connector (Hugging Face). It serves as a single source of truth for the connector name, aiding in consistency across the guide. There are no external dependencies, and the export ensures the constant is accessible to MDX templates.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-hugging-face.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Hugging Face';\n```\n\n----------------------------------------\n\nTITLE: Adding Sign-In Route and Link in Go with Logto and Gin\nDESCRIPTION: This snippet demonstrates how to add a sign-in route and a sign-in link to the home page using Logto for authentication in a Go application. It uses the Gin web framework to handle HTTP routes and the Logto client to manage the sign-in process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_implement-sign-in-route.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// ...\n\n\t// Add a link to perform a sign-in request on the home page\n\trouter.GET(\"/\", func(ctx *gin.Context) {\n\t\t// ...\n\t\thomePage := `<h1>Hello Logto</h1>` +\n\t\t\t\"<div>\" + authState + \"</div>\" +\n\t\t\t// Add link\n\t\t\t`<div><a href=\"/sign-in\">Sign In</a></div>`\n\n\t\tctx.Data(http.StatusOK, \"text/html; charset=utf-8\", []byte(homePage))\n\t})\n\n\t// Add a route for handling sign-in requests\n\trouter.GET(\"/sign-in\", func(ctx *gin.Context) {\n\t\tsession := sessions.Default(ctx)\n\t\tlogtoClient := client.NewLogtoClient(\n\t\t\tlogtoConfig,\n\t\t\t&SessionStorage{session: session},\n\t\t)\n\n\t\t// The sign-in request is handled by Logto.\n\t\t// The user will be redirected to the Redirect URI on signed in.\n\t\tsignInUri, err := logtoClient.SignIn(\"http://localhost:3000/callback\")\n\t\tif err != nil {\n\t\t\tctx.String(http.StatusInternalServerError, err.Error())\n\t\t\treturn\n\t\t}\n\n\t\t// Redirect the user to the Logto sign-in page.\n\t\tctx.Redirect(http.StatusTemporaryRedirect, signInUri)\n\t})\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering FetchAccessTokenForApiResources Component in React JSX\nDESCRIPTION: This snippet shows JSX usage to render the FetchAccessTokenForApiResources component, passing props for an API name and example code. The getAccessTokenApi and getAccessTokenCode props are used to customize the displayed documentation, linking together the previously imported components. This requires React and a compatible JSX/MDX setup to render correctly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for Microsoft Entra ID OIDC SSO\nDESCRIPTION: This snippet defines a constant variable 'connector' with the value 'Microsoft Entra ID OIDC enterprise SSO'. This variable is used throughout the document to refer to the specific SSO connector being implemented.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-express-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Syncing Translation Keys for All Languages\nDESCRIPTION: Command to synchronize translation keys from the source language to all available target languages in the phrases package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/translation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli translate sync-keys --target all\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Web Auth for Android in Gradle\nDESCRIPTION: Modifies the Android build.gradle file to set compileSdkVersion and targetSdkVersion for flutter_web_auth compatibility.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nandroid {\n    compileSdkVersion 31\n    defaultConfig {\n        targetSdkVersion 31\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running OIDC configuration migration using npx\nDESCRIPTION: This code snippet shows how to use npx to run the Logto CLI for migrating OIDC configurations. It includes options for using default or custom .env file paths.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/using-cli/migrate-from-env.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db seed oidc\n# O\nnpx @logto/cli db seed oidc --env /your/path/to/.env\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: This code initializes a LogtoClient instance with custom configuration. It specifically sets custom scopes for read and write permissions, and defines multiple API resources for the client to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"read\", \"write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: MDX Component Imports and Configuration\nDESCRIPTION: Imports various MDX components and fragments used throughout the documentation page to structure the Okta SSO integration guide. Sets up necessary configurations like connector name and page metadata.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-vue-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NpmLikeInstallation Component for Logto SvelteKit SDK\nDESCRIPTION: This snippet imports a reusable component for npm-like installation instructions and renders it with the package name for Logto SvelteKit SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/sveltekit\" />\n```\n\n----------------------------------------\n\nTITLE: Visualizing Authentication Flow in Logto using Mermaid\nDESCRIPTION: This sequence diagram illustrates the authentication flow between the user, client application, and Logto components. It shows the step-by-step process from initial authorization request to token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/sign-up-and-sign-in/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  actor user as Usuario\n  participant client as Aplicación cliente\n\n  box Logto\n    participant experience as Aplicación de experiencia\n    participant oidc as Proveedor OIDC\n  end\n\n  user ->> client: Abrir aplicación\n  client ->> oidc: Enviar solicitud de autorización: post /authorize\n  oidc -->> client: Solicitar al usuario que inicie sesión\n  client ->> experience: Redirigir a la página de inicio de sesión\n  user ->> experience: Iniciar sesión\n  experience ->> oidc: Asignar resultado de interacción: post /experience/submit\n  oidc -->> experience: Autenticado y redirigir a la aplicación cliente\n  experience ->> client: Redirección post inicio de sesión: post /callback?code=...\n  client ->> oidc: Enviar solicitud de token: post /token\n  oidc -->> client: Devolver token\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Nuxt.js for Logto\nDESCRIPTION: This code snippet shows how to configure additional scopes in the Nuxt.js configuration file to request more user information from Logto. It imports UserScope from @logto/nuxt and adds email and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    scopes: [UserScope.Email, UserScope.Phone], // Weitere Berechtigungen hinzufügen, falls erforderlich\n    // ...andere Konfigurationen\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Components for React Native Logto Integration Guide\nDESCRIPTION: This code snippet imports various Markdown components that are used to compose the guide for integrating Logto authentication in a React Native application. Each imported component represents a section of the guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport AddAuthentication from './_add-authentication.md';\nimport ConfigureRedirectUris from './_configure-redirect-uris.mdx';\nimport GuideTip from './_guide-tip.md';\nimport ImplementButtons from './_implement-buttons.md';\nimport Installation from './_installation.md';\nimport SignInAndSignOutFlows from './_sign-in-and-sign-out-flows.mdx';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Organization-Based Authentication Flow with Mermaid\nDESCRIPTION: A sequence diagram illustrating the authentication flow between Client, Logto, and API when using organization-based permissions, showing token requests, validation steps, and possible response scenarios.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-api-reources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    Note over Client,API: Token-Anfrage\n    Client->>Logto: POST /oidc/token\n    Note right of Client: mit Ressource, organization_id,<br/>und angeforderten Berechtigungen\n\n    Note over Logto: Überprüfen, ob der Benutzer<br/>zur angegebenen Organisation gehört\n    Logto-->>Client: Gibt JWT-Zugangstoken zurück\n    Note left of Logto: Token enthält:<br/>- Standard-JWT-Ansprüche<br/>- organization_id<br/>- Berechtigungen gefiltert nach Organisationsrolle\n\n    Note over Client,API: API-Anfrage\n    Client->>API: Anfrage mit Bearer-Token\n\n    Note over API: JWT-Token validieren:<br/>1. Standard-JWT-Validierung<br/>2. Überprüfen der organization_id<br/>3. Überprüfen der Berechtigungen\n\n    alt Token ungültig\n        API-->>Client: 401 Unautorisiert\n    else Token gültig\n        alt Gültige organization_id und Berechtigung\n            API-->>Client: Geschützte Ressource\n        else Andernfalls\n            API-->>Client: 403 Verboten\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Importing Logto Components and Fragments in React\nDESCRIPTION: This snippet shows the import statements for various Logto components and fragments used in the React application integration guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport GuideTip from './_guide-tip.mdx';\nimport ImplementSignInAndSignOut from './_implement-sign-in-and-sign-out.mdx';\nimport InitClient from './_init-client.mdx';\nimport Installation from './_installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Creating an Authorization Validation Decorator in Flask\nDESCRIPTION: Flask decorator implementation that validates JWT tokens using python-jose. It verifies the token signature, issuer, audience, and expiration status before allowing access to protected routes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"requires-auth.py\n\"\"\"\n\nimport json\nfrom flask import request,  _request_ctx_stack\nfrom six.moves.urllib.request import urlopen\nfrom functools import wraps\nfrom jose import jwt\n\ndef requires_auth(f):\n  @wraps(f)\n  def decorated(*args, **kwargs):\n    token = get_token_auth_header()\n\n# jwks_uri endpoint retrieved from Logto\n    jwks_uri = urlopen('https://<your-logto-domain>/oidc/jwks')\n\n# issuer retrieved from Logto\n    issuer = 'https://<your-logto-domain>/oidc'\n\n    jwks = json.loads(jwks_uri.read())\n\n    try:\n      payload = jwt.decode(\n        token,\n        jwks,\n# The jwt encode algorithm retrieved along with jwks. ES384 by default\n        algorithms=jwt.get_unverified_header(token).get('alg'),\n# The API's registered resource indicator in Logto\n        audience='<your request listener resource indicator>',\n        issuer=issuer,\n        options={\n          'verify_at_hash': False\n        }\n      )\n    except Exception:\n# exception handler\n      raise Error({code: 'invalid_token', status: 401})\n\n# Custom code to process payload\n    _request_ctx_stack.top.user_id = payload.get('sub')\n\n    return f(*args, **kwargs)\n  return decorated\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant - JavaScript\nDESCRIPTION: This snippet exports a constant named 'connector' containing the name of the Microsoft Entra ID SAML enterprise SSO. This value is used as a prop for imported documentation fragments to customize their content. The only dependency is a modern JavaScript environment supporting ES6 module syntax. The only parameter is the string literal value assigned to 'connector'. Output is the exported identifier available for import in other files. No additional configuration is required.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Rendering Step Components for Microsoft Entra ID OIDC SSO Setup in JSX\nDESCRIPTION: This code renders the imported step components within the context of a multi-step guide for setting up Microsoft Entra ID OIDC SSO in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sso/entra-id-oidc/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Step1 />\n\n<Step2 />\n\n<Step3 />\n```\n\n----------------------------------------\n\nTITLE: Re-consenting User for New Permissions in Logto\nDESCRIPTION: This TypeScript code demonstrates how to trigger a re-consent process for a user to obtain new permissions. This is required when new permissions are introduced and assigned to a member.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/configure-organization-template.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nsignIn({ redirectUri: 'your-redirect-url', prompt: 'consent' });\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoProvider in React Native App\nDESCRIPTION: Sets up the LogtoProvider component to wrap the application and provide Logto authentication context. Requires endpoint and appId configuration parameters to connect to your Logto instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  endpoint: '<your-logto-endpoint>',\n  appId: '<your-application-id>',\n};\n\nconst App = () => (\n  <LogtoProvider config={config}>\n    <YourAppContent />\n  </LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Download URL for Logto\nDESCRIPTION: Command demonstrating how to specify an alternative URL for downloading the Logto zip file during npm initialization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @logto@latest -- --download-url=https://github.com/logto-io/logto/releases/download/v1.2.2/logto.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Components and Code Snippets in React/MDX\nDESCRIPTION: This code imports a configuration component and several code snippet markdown files to be used in the documentation page. The imports are then used in a ConfigApiResources component to display various API resource configuration examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Cloning Logto Dart SDK from GitHub\nDESCRIPTION: This snippet demonstrates how to clone the Logto Dart SDK repository directly from GitHub for those who prefer to fork their own version of the SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/logto-io/dart\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application on Linux or macOS\nDESCRIPTION: This command runs the Spring Boot application using Gradle on Linux or macOS systems.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew bootRun\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client\nDESCRIPTION: Configuration of Logto client to request additional user scopes like email and phone. Shows how to initialize the client with specific scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/next';\n\nexport const logtoClient = new LogtoClient({\n  scopes: [UserScope.Email, UserScope.Phone], // Add more scopes if needed\n  // ...other configs\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Imported Components in MDX\nDESCRIPTION: This snippet demonstrates rendering imported components (which represent the content of the imported fragments) within an MDX file using JSX-like syntax. Each component tag displays the corresponding documentation section.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ApiResourcesDescription />\n\n### Configurar cliente Logto \\{#configure-logto-client\\}\n\n<ConfigApiResources />\n\n### Buscar token de acesso para o recurso de API \\{#fetch-access-token-for-the-api-resource\\}\n\n<FetchAccessTokenForApiResources />\n\n### Buscar tokens de organização \\{#fetch-organization-tokens\\}\n\n<FetchOrganizationTokenForUser />\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Route in Rails\nDESCRIPTION: This snippet shows how to configure the route for the Logto callback in a Rails application. It sets up a GET route for the '/callback' path.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-next-line\n  get \"/callback\", to: \"sample#callback\"\nend\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Hooks in SvelteKit\nDESCRIPTION: This snippet shows how to use the sequence() helper function to combine multiple hooks in SvelteKit, including the Logto hook.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sequence } from '@sveltejs/kit/hooks';\n\nexport const handle = sequence(handleLogto, handleOtherHook);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FetchOrganizationTokenForUser Component in JSX\nDESCRIPTION: This snippet imports necessary components and renders the FetchOrganizationTokenForUser component with specific props. It sets the organization scope and includes code snippets for configuring an organization and getting an organization access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"LogtoCore::USER_SCOPE[:organizations]\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding WeChat SDK Dependency in Gradle (Groovy)\nDESCRIPTION: This Groovy code snippet adds the WeChat Open SDK for Android as an API dependency to the Android project using the Groovy Gradle script (`build.gradle`). This makes the WeChat SDK classes available to the application module.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // ...\n  api 'com.tencent.mm.opensdk:wechat-sdk-android:6.8.0'   // groovy-script\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for AWS SES in JSX\nDESCRIPTION: This snippet defines a constant 'connector' with the value 'AWS SES' to be used throughout the tutorial for consistent reference to the AWS SES connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-aws-ses.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'AWS SES';\n```\n\n----------------------------------------\n\nTITLE: Running the Logto Tunnel CLI Command with Custom Domain\nDESCRIPTION: Bash commands showing how to use the logto-tunnel tool when a custom domain is configured in Logto, connecting a local development server to the custom domain endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlogto-tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://your.custom.domain/\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://your.custom.domain/\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest Permissions\nDESCRIPTION: Adds the required internet permission to the Android manifest file to enable network access for the SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:tools=\"http://schemas.android.com/tools\">\n\n  <!-- add internet permission -->\n  <uses-permission android:name=\"android.permission.INTERNET\" />\n\n  <!-- other configurations... -->\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Visualizing RBAC Authorization Flow with Mermaid Diagram\nDESCRIPTION: A sequence diagram illustrating the RBAC-enhanced authentication and authorization flow between Client, Logto, and API. It shows the process of requesting tokens, filtering scopes based on RBAC policy, and validating tokens with granted scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/role-based-access-control/protect-api-resources-with-rbac.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Logto\n    participant API\n\n    Note over Client,API: Authentication & Token Request\n    Client->>Logto: GET /oidc/auth & POST /oidc/token\n    Note right of Client: with resource and requested scopes\n\n    Note over Logto: Filter requested scopes based on<br/>user's RBAC policy\n    Logto-->>Client: Returns JWT access token\n    Note left of Logto: Token contains:<br/>- Standard JWT claims<br/>- Granted scopes (filtered by RBAC)\n\n    Note over Client,API: API Request\n    Client->>API: Request with Bearer token\n\n    Note over API: Validate JWT token:<br/>- Standard JWT validation<br/>- Check granted scopes\n\n    alt Token Invalid\n        API-->>Client: 401 Unauthorized\n    else Token Valid\n        alt Required scopes not in granted scopes\n            API-->>Client: 403 Forbidden\n        else Has required scopes\n            API-->>Client: Protected Resource\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Microsoft Entra ID OIDC SSO Guide\nDESCRIPTION: This code snippet demonstrates how the imported MDX components are used within the document. It structures the guide into sections, each utilizing a specific MDX component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"Expo (React Native)\" link=\"https://expo.dev\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Native app\" framework=\"Expo\" />\n\n## Integrate Expo SDK \\{#integrate-framework-sdk}\n\n<IntegrateSdk />\n\n## Add Microsoft Entra ID OIDC enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\"Expo\" />\n\n## Set up Azure AD SSO application \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Microsoft Entra ID OIDC enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"Expo (React Native)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Registering Blorc Services in Blazor WASM Startup\nDESCRIPTION: This C# snippet demonstrates how to register required Blorc services in the `Program.cs` file of a Blazor WASM application. It adds Blorc Core, Authorization Core, and configures Blorc OpenID Connect by binding options from the application's configuration (specifically the 'IdentityServer' section). It also shows how to inject the necessary JavaScript files after the host is built.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blorc.OpenIdConnect;\nusing Blorc.Services;\n\nbuilder.Services.AddBlorcCore();\nbuilder.Services.AddAuthorizationCore();\nbuilder.Services.AddBlorcOpenIdConnect(\n    options =>\n    {\n        builder.Configuration.Bind(\"IdentityServer\", options);\n    });\n\nvar webAssemblyHost = builder.Build();\n\nawait webAssemblyHost\n    .ConfigureDocumentAsync(async documentService =>\n    {\n        await documentService.InjectBlorcCoreJsAsync();\n        await documentService.InjectOpenIdConnectAsync();\n    });\n\nawait webAssemblyHost.RunAsync();\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Flutter\nDESCRIPTION: This snippet demonstrates how to initialize LogtoClient in a Flutter application. It imports necessary packages, sets up the main app structure, and configures LogtoClient with the required endpoint and app ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:logto_dart_sdk/logto_dart_sdk.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Flutter Demo',\n      home: MyHomePage(title: 'Logto Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  late LogtoClient logtoClient;\n\n  void render() {\n    // 상태 변경\n  }\n\n  // LogtoConfig\n  final logtoConfig = const LogtoConfig(\n    endpoint: \"<your-logto-endpoint>\",\n    appId: \"<your-app-id>\"\n  );\n\n  void _init() {\n    logtoClient = LogtoClient(\n      config: logtoConfig,\n      httpClient: http.Client(), // 선택적 http 클라이언트\n    );\n    render();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _init();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragment Component for Package Installation\nDESCRIPTION: Import statement for a reusable MDX component that displays npm-like installation instructions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Declaring the Slack Connector Constant (JavaScript)\nDESCRIPTION: This snippet shows the declaration of a JavaScript constant representing the 'Slack' social connector. It is used for context-passing into various imported documentation fragment components to maintain a consistent connector label. No special dependencies are required apart from standard JavaScript environment. The variable is used as a named export in the documentation's module context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-slack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const connector = 'Slack';\n```\n\n----------------------------------------\n\nTITLE: Importing and using organization token components in React JSX\nDESCRIPTION: This code imports MDX fragments and Markdown code snippets, then uses them in a specialized component to display organization token functionality for Flutter SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing SCSS Styles in React Component\nDESCRIPTION: This code snippet imports a common SCSS file into a React component. It's likely used for applying global styles or shared styling across multiple components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/about/cloud-preview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport './common.scss';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with npm\nDESCRIPTION: This command installs the @logto/chrome-extension package using npm (Node Package Manager).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in Rails Controller\nDESCRIPTION: This snippet demonstrates how to implement sign-in and sign-out actions in a Rails controller using the Logto client. It includes methods for initiating sign-in and sign-out processes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def sign_in\n    @client.sign_in(redirect_uri: request.base_url + \"/callback\")\n  end\n\n  def sign_out\n    @client.sign_out(post_logout_redirect_uri: request.base_url)\n  end\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Exemple 1 - Facturation cohérente sans changements\nDESCRIPTION: Formule mathématique illustrant le calcul d'une facture stable lorsqu'aucun changement n'est apporté aux services, montrant un plan Pro avec 2 services SSO.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/logto-cloud/billing-and-pricing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: math\nCODE:\n```\n\\text{Votre prochaine facture} = \\$ 16 + \\$ 48 \\times 2 = \\$ 112\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments in Markdown\nDESCRIPTION: This code snippet demonstrates the import of various MDX fragments and components used throughout the tutorial. It includes imports for different sections of the guide, such as the introduction, application creation, connector setup, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-twilio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sms/twilio/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Testing and Validation Component in MDX\nDESCRIPTION: This MDX/JSX snippet renders the `TestingAndValidation` component, likely defined in `./fragments/_testing-and-validation.mdx`. It passes the `connector` variable ('GitHub') and `sdk` 'PHP' as props to provide guidance and steps for testing the complete GitHub sign-in flow within the PHP application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-github.mdx#2025-04-22_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\"PHP\" />\n```\n\n----------------------------------------\n\nTITLE: MDX Import Statements\nDESCRIPTION: Import statements for various MDX fragments and components used throughout the documentation to modularize the content and maintain documentation structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-php-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth v4 Provider for Logto\nDESCRIPTION: This snippet shows the configuration for NextAuth v4 provider to integrate Logto as an OIDC provider. It includes setting up the OAuth provider, custom profile mapping, and specific configuration for Logto's token signing algorithm.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nconst handler = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oauth',\n      // Logto 애플리케이션 세부 정보 페이지에서 잘 알려진 URL을 얻을 수 있습니다,\n      // \"OpenID Provider configuration endpoint\" 필드에서\n      wellKnown: 'https://xxxx.logto.app/oidc/.well-known/openid-configuration',\n      authorization: { params: { scope: 'openid offline_access profile email' } },\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      client: {\n        id_token_signed_response_alg: 'ES384',\n      },\n      profile(profile) {\n        // 여기서 사용자 프로필 매핑을 사용자 정의할 수 있습니다\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: MFA Verification Factors Type in TypeScript\nDESCRIPTION: TypeScript type declaration for the MFA verification factors array, showing the possible multi-factor authentication methods that can be associated with a user account in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-data.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmfaVerificationFactors: (\"Totp\" | \"WebAuthn\" | \"BackupCode\")[];\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing MDX Components for Logto API Resource Configuration\nDESCRIPTION: This code imports multiple MDX fragments for API resource configuration documentation and composes them into a ConfigApiResources component. The imports include various code examples for configuring resources with different scope configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Token-Related Components and Resources in React (JavaScript)\nDESCRIPTION: This snippet imports three modules: a React component for fetching organization tokens and two Markdown documentation/code examples for organization configuration and access tokens. These imports modularize resources so they can be injected into other components. Dependencies are the local file system structure and the referenced modules themselves. No special input is required, but all referenced files must exist.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling API Resources Configuration Documentation in React\nDESCRIPTION: This code imports MDX fragments and code examples, then assembles them into a documentation page about configuring API resources in Logto. It uses a custom component called ConfigApiResources that accepts three code snippet props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Getting Config Value by Key using npx\nDESCRIPTION: This command retrieves the value of a specified configuration key using npx to run the Logto CLI. It can be used to fetch values such as OIDC private keys.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-database-configs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db config get <key> [keys...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out in Flutter with Logto\nDESCRIPTION: This snippet demonstrates how to implement the sign-out functionality using Logto in a Flutter app. It adds a sign-out button to the UI and uses the logtoClient.signOut method to log the user out of the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  final postSignOutRedirectUri = 'io.logto//home';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signOutButton = TextButton(\n      onPressed: () async {\n        await logtoClient.signOut(postSignOutRedirectUri);\n        render();\n      },\n      child: const Text('Sign Out'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n            signOutButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling API Resource Documentation - JavaScript\nDESCRIPTION: This React file imports a modular documentation fragment and several Markdown/MDX code snippets, then integrates them by passing them as props to create a self-contained documentation display. Dependencies include React, the custom ConfigApiResources component (likely MDX/JSX), and three code snippets in Markdown/MDX. There are no direct inputs/outputs in conventional function terms, but the displayed content is determined by the props with imported code rendered within the fragment. Constraints include the expectation of the file structure and component contract. This pattern is common in documentation systems using modular content composition.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with pnpm\nDESCRIPTION: Installs the @logto/chrome-extension package using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Running Logto Tunnel CLI Command for Custom UI Testing\nDESCRIPTION: Bash commands to run the Logto tunnel CLI for testing custom UI pages locally with Logto Cloud authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlogto-tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://foobar.logto.app/\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://foobar.logto.app/\n```\n\nLANGUAGE: bash\nCODE:\n```\nlogto-tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://your.custom.domain/\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://your.custom.domain/\n```\n\nLANGUAGE: bash\nCODE:\n```\nlogto-tunnel -p 9000 --experience-path /path/to/your/static/files --endpoint https://foobar.logto.app/\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/tunnel -p 9000 --experience-path /path/to/your/static/files --endpoint https://foobar.logto.app/\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in MDX/JS\nDESCRIPTION: This snippet imports three components using JavaScript ES module syntax within an MDX file. `FetchOrganizationTokenForUser`, `ConfigOrganizationCode`, and `GetOrganizationAccessTokenCode` are imported from relative paths, presumably containing reusable documentation content or code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android minSdkVersion for flutter_secure_storage\nDESCRIPTION: Sets the minimum SDK version for Android to 18 in the project's build.gradle file to ensure compatibility with flutter_secure_storage.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_dependency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n  android {\n      ...\n\n      defaultConfig {\n          ...\n          minSdkVersion 18\n          ...\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord OAuth Settings in Logto\nDESCRIPTION: This table defines the configuration parameters required for setting up Discord OAuth in Logto. It includes clientId, clientSecret, and scope, along with their respective types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/social/discord/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Nom          | Type   |\n| ------------ | ------ |\n| clientId     | string |\n| clientSecret | string |\n| scope        | string |\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Android MainActivity using Kotlin\nDESCRIPTION: This code snippet shows how to observe and display user information in the main activity of an Android application. It uses a ViewModel to fetch the data and updates a TextView with the JSON representation of the user info.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        //...다른 코드\n\n        // 레이아웃에 `user_info_text_view` ID를 가진 텍스트 뷰가 있다고 가정합니다\n        val userInfoResponseTextView: TextView = findViewById(R.id.user_info_text_view)\n        logtoViewModel.userInfoResponse.observe(this) { userInfoResponse ->\n            userInfoResponseTextView.text = if (userInfoResponse !== null) {\n                val json = Gson().toJson(userInfoResponse, UserInfoResponse::class.java)\n                JSONObject(json).toString(2)\n            } else {\n                \"\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including MDX Components in Documentation Structure\nDESCRIPTION: Implements the imported MDX components to structure the documentation for SAML SSO implementation with .NET Core Razor Pages, organizing the guide into logical sections with appropriate headings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-razor-pages-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Razor Pages)\" link=\"https://learn.microsoft.com/aspnet/core/razor-pages\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Aplicación web tradicional\" framework=\".NET Core (Razor Pages)\" />\n\n## Integrate .NET Core (Razor Pages) SDK \\{#integrate-framework-sdk}\n\n<IntegrateSdk />\n\n## Add SAML enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\".NET Core (Razor Pages)\" />\n\n## Set up SAML SSO application on your IdP \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable SAML enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (Razor Pages)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Logto Components for Access Token Fetching\nDESCRIPTION: This code snippet imports necessary components and renders them to demonstrate how to fetch an access token for API resources in Logto. It uses a reusable component 'FetchAccessTokenForApiResources' and passes in the necessary props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: ソーシャルアイデンティティ連携のシーケンス図（Mermaid）\nDESCRIPTION: ユーザーがソーシャルアイデンティティをアカウントにリンクする際の連携フローを示すシーケンス図です。認可URI取得、ソーシャルIDPログイン、コールバック処理とリンク処理の12ステップを含みます。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autoNumber\n    participant User as User\n    participant Client as Client app\n    participant App as server app\n    participant Logto as Logto\n    participant IdP as Social identity provider\n\n    User ->> Client: Access client app request to bind social identity\n    Client ->> App: Send request to bind social identity\n    App ->> Logto: POST /api/connectors/{connectorId}/authorization-uri\n    Logto ->> App: Authorization URI\n    App ->> Client: Return authorization URI\n    Client ->> IdP: Redirect to IdP authorization page\n    User -->> IdP: Sign in to IdP\n    IdP ->> Client: Redirect to client app with authorization code\n    Client ->> Server: Link social identity request, forward IdP authorization response\n    Server ->> Logto: POST /api/users/{userId}/identities\n    Logto ->> IdP: Get user info from IdP using authorization code\n    IdP ->> Logto: Return user info\n```\n\n----------------------------------------\n\nTITLE: Visualizing Authentication Flow in Logto with Sequence Diagram\nDESCRIPTION: A mermaid sequence diagram illustrating the authentication flow between a user, client application, and Logto's OIDC provider. The diagram shows the step-by-step process from accessing the web application to receiving authentication tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n  sequenceDiagram\n    autonumber\n    actor User\n\n    box Relying Party (RP)\n      participant Client as Aplicación cliente\n    end\n\n    box Logto (IdP)\n      participant OIDC as Proveedor OIDC\n      participant SignIn as Página de inicio de sesión\n    end\n\n    User ->> Client: Acceder a la aplicación web\n    Client ->> OIDC: Redirigir al usuario a OIDC para autenticación\n    OIDC -->> OIDC: Verificar la sesión de inicio de sesión del usuario\n    OIDC ->> SignIn: Solicitar al usuario que inicie sesión\n    SignIn ->> OIDC: Identificar al usuario y enviar el resultado de la interacción\n    OIDC -->> OIDC: Establecer la sesión de inicio de sesión del usuario y el permiso de autenticación\n    OIDC ->> Client: Redirigir al usuario de vuelta a la aplicación web con el código de autenticación (Flujo de Código de Autorización)\n    Client ->> OIDC: Intercambiar el código por tokens\n    OIDC -->> Client: Devolver tokens\n```\n\n----------------------------------------\n\nTITLE: MDX Metadata Header for Documentation (MDX)\nDESCRIPTION: This block sets frontmatter metadata for Docusaurus-based documentation, defining properties such as slug, tags, title, sdk, and connector for the page. This metadata aids site generation, categorization, and search, and ensures proper handling in the documentation platform. Values must match actual contents and conform to the expected field types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-android-saml-enterprise-sso.mdx#2025-04-22_snippet_4\n\nLANGUAGE: MDX\nCODE:\n```\n---\nslug: how-to-build-saml-enterprise-sso-sign-in-with-android-and-logto\ntags: [SSO providers, saml-enterprise-sso, android, kotlin/java, SAML authentication, enterprise login, SSO login]\ntitle: How to build SAML enterprise SSO with Android (Kotlin / Java)\nsdk: Android (Kotlin / Java)\nconnector: SAML enterprise SSO\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Scopes and Resources in TypeScript Configuration\nDESCRIPTION: This TypeScript code snippet showcases the configuration of `scopes` and `resources` within the `logtoConfig` object. The `scopes` array lists the permission scopes the application requires, while the `resources` array specifies the unique identifiers (usually URLs) of the APIs the application needs to access. This configuration is used by the Logto SDK during the authentication process to request user consent and obtain access tokens for the specified resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Organizations Scope in Nuxt.js\nDESCRIPTION: This code snippet shows how to configure Logto in a Nuxt.js application's configuration file. It imports the UserScope from Logto's Nuxt package and sets up the Organizations scope in the Logto configuration object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    scopes: [UserScope.Organizations],\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in Nuxt.js (TypeScript)\nDESCRIPTION: This snippet shows how to configure the `scopes` and `resources` properties for the Logto authentication module within a Nuxt.js application's `nuxt.config.ts` file. It specifies the permissions (`read`, `write`) and the protected API endpoints the application needs to interact with. This configuration is crucial for defining the application's access requirements during the OAuth flow managed by Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"nuxt.config.ts\"\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-start\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n    // highlight-end\n    // ...other configs\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Logto TypeScript Types to SvelteKit App\nDESCRIPTION: This snippet demonstrates how to add TypeScript types for Logto client and user information to the global App namespace in SvelteKit.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LogtoClient, UserInfoResponse } from '@logto/sveltekit';\n\ndeclare global {\n  namespace App {\n    interface Locals {\n      logtoClient: LogtoClient;\n      user?: UserInfoResponse;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments for Access Token Retrieval in React/JSX\nDESCRIPTION: Imports documentation fragments related to fetching access tokens for API resources, including a reusable component and a code example markdown file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig with Organization Scope in Kotlin\nDESCRIPTION: Demonstrates setting up LogtoConfig instance with organization scopes. The configuration includes adding the Organizations scope to the scopes list property.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(UserScope.Organizations),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Config Value by Key using Logto CLI\nDESCRIPTION: This command sets the value of a specified configuration key using the Logto CLI. It can be used to set values such as OIDC Cookie keys.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/manage-database-configs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlogto db config set <key> [keys...]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Components for Fetching Access Token in React\nDESCRIPTION: This code snippet imports necessary components and renders them to explain the process of fetching an access token for API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK Dependency in Dart\nDESCRIPTION: Command to add the Logto SDK dependency to a Flutter project using pub.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add logto_dart_sdk\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto User Scopes in Nuxt Config\nDESCRIPTION: TypeScript configuration file that defines Logto authentication settings in a Nuxt application. Shows how to import and set up organization-related user scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    scopes: [UserScope.Organisations],\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Line Login in Logto\nDESCRIPTION: This snippet demonstrates the format for setting up the callback URL in the Line Developers console. It includes a placeholder for the Logto endpoint and connector ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/line/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n${your_logto_endpoint}/callback/${connector_id}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Documentation Components in JSX\nDESCRIPTION: Imports documentation fragments and renders them with configurable code snippets as props. Uses MDX components to combine static documentation with dynamic code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Vue SDK with npm - Bash\nDESCRIPTION: This command installs the @logto/vue package into a JavaScript project using the npm package manager. It assumes that Node.js and npm are already installed. Running this command in your project directory adds the package as a dependency and updates the package.json file accordingly.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Forcing User Prompt for Sign-in in Native Applications\nDESCRIPTION: For native apps not supporting sessionless webview or not recognizing 'emphasized' settings, force a user prompt to sign in again by passing the 'prompt=login' parameter in the authorization request.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-out.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nprompt=login\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments and Guides\nDESCRIPTION: Imports necessary MDX component fragments and specific guides for SDK integration (Expo) and connector setup (Google Workspace) to structure the tutorial content. These imports pull in reusable parts of the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/google-workspace/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Creating User Controller for OAuth2 Authentication in Java\nDESCRIPTION: Implements a Spring controller that handles user page requests, extracting user information from the OAuth2 authentication token. The controller retrieves attributes like username, email, and subject ID from the authenticated principal and passes them to the view.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.securingweb;\n\nimport java.security.Principal;\nimport java.util.Map;\n\nimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n\n  @GetMapping\n  public String user(Model model, Principal principal) {\n    if (principal instanceof OAuth2AuthenticationToken) {\n      OAuth2AuthenticationToken token = (OAuth2AuthenticationToken) principal;\n      OAuth2User oauth2User = token.getPrincipal();\n      Map<String, Object> attributes = oauth2User.getAttributes();\n\n      model.addAttribute(\"username\", attributes.get(\"username\"));\n      model.addAttribute(\"email\", attributes.get(\"email\"));\n      model.addAttribute(\"sub\", attributes.get(\"sub\"));\n    }\n\n    return \"user\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Kakao Sign-In Tutorial\nDESCRIPTION: This code snippet imports various MDX fragments and components used throughout the tutorial. It includes sections for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-kakao.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-server/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/kakao/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Kakao';\n```\n\n----------------------------------------\n\nTITLE: Pro-rated API Resources Billing Example in Math Notation\nDESCRIPTION: Complex mathematical example demonstrating how billing is calculated when adding and removing API resources during a billing cycle, including both unbilled usage and next cycle charges.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-cloud/billing-and-pricing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: math\nCODE:\n```\n\\$16 + \\$8 \\times (4 \\times 25 - 2 \\times 15) / 30 + 2 \\times \\$8 = \\$50.67\n```\n\n----------------------------------------\n\nTITLE: Using MDX Components in Markdown\nDESCRIPTION: This code snippet shows how the imported MDX components are used within the Markdown content. It demonstrates the usage of various components like Intro, CreateApplication, and FrameworkGuide with specific props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-twilio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" link=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#blazor-webassembly\" />\n\n<CreateApplication type=\"Single page app\" framework=\".NET Core (Blazor WebAssembly)\" />\n\n<FrameworkGuide />\n\n<AddPasswordlessConnector\n  connector={connector}\n  connectorType=\"SMS\"\n  passwordlessSignUpIdentifier=\"Phone number\"\n/>\n\n<ConnectorGuide />\n\n<SaveYourConfiguration connector={connector} />\n\n<EnablePasswordlessConnector\n  connectorType=\"SMS\"\n  passwordlessSignUpIdentifier=\"Phone number\"\n/>\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" />\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: User Authentication Flow with Social Sign-In\nDESCRIPTION: Sequence diagram showing the interaction flow between user, client application, login page, Logto service, and social identity provider during social authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/sign-up-and-sign-in/social-sign-in.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor user as Usuario\n    participant app as Aplicación cliente\n    participant experience as Página de inicio de sesión\n    participant logto as Servicio central de Logto\n    participant social as Proveedor de identidad social\n\n    user->>app: Visitar la aplicación\n    app->>experience: Redirigir a la página de inicio de sesión\n    user->>experience: Hacer clic en el botón de inicio de sesión social\n    experience->>Logto: Solicitar inicio de sesión con conector social\n    Logto-->>experience: Devolver URL de autenticación del proveedor social\n    experience->>social: Redirigir a la página de autenticación del proveedor social\n    user->>social: Ingresar credenciales sociales\n    social-->>experience: Autenticar usuario y redirigir de vuelta a la página de inicio de sesión de Logto\n    experience->>Logto: Validar datos de autenticación social e identidad del usuario\n    Logto->>app: Autenticar usuario y redirigir de vuelta a la aplicación\n```\n\n----------------------------------------\n\nTITLE: Importing Npm-Like Installation Fragment in Next.js (JavaScript)\nDESCRIPTION: This snippet imports a reusable fragment component from a relative path. This component is expected to provide a template or UI block for displaying npm or yarn installation instructions. The import relies on the local file structure and assumes the existence of the '../../fragments/_npm-like-installation.mdx' file or module.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Sign-in Session Flow in Logto OIDC Provider\nDESCRIPTION: This diagram illustrates the sequence of interactions between the user, client application, and Logto OIDC provider during the sign-in process. It shows how the sign-in session is established and tokens are exchanged.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-out.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    actor User\n\n    box Relying Party (RP)\n      participant Client as Client application\n    end\n\n    box Logto (IdP)\n      participant OIDC as OIDC provider\n      participant SignIn as Sign-in page\n    end\n\n    User ->> Client: Access web application\n    Client ->> OIDC: Redirect user to OIDC for authentication\n    OIDC -->> OIDC: Check user's sign-in session\n    OIDC ->> SignIn: Prompt user to sign in\n    SignIn ->> OIDC: Identify user and submit the interaction result\n    OIDC -->> OIDC: Establish user's sign-in session and authentication grant\n    OIDC ->> Client: Redirect user back to the web application with authentication code (Authorization Code flow)\n    Client ->> OIDC: Exchange the code for tokens\n    OIDC -->> Client: Return tokens\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information with Logto Browser SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve ID token claims using the Logto client and display the retrieved data in an HTML table. It creates a table dynamically to show all claims from the ID token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst userInfo = await logtoClient.getIdTokenClaims();\n\n// Anzeige-Tabelle für ID-Token-Ansprüche generieren\nconst table = document.createElement('table');\nconst thead = document.createElement('thead');\nconst tr = document.createElement('tr');\nconst thName = document.createElement('th');\nconst thValue = document.createElement('th');\nthName.innerHTML = 'Name';\nthValue.innerHTML = 'Wert';\ntr.append(thName, thValue);\nthead.append(tr);\ntable.append(thead);\n\nconst tbody = document.createElement('tbody');\n\nfor (const [key, value] of Object.entries(userInfo)) {\n  const tr = document.createElement('tr');\n  const tdName = document.createElement('td');\n  const tdValue = document.createElement('td');\n  tdName.innerHTML = key;\n  tdValue.innerHTML = typeof value === 'string' ? value : JSON.stringify(value);\n  tr.append(tdName, tdValue);\n  tbody.append(tr);\n}\n\ntable.append(tbody);\n```\n\n----------------------------------------\n\nTITLE: Linking Local Connectors with Logto CLI\nDESCRIPTION: This command links pre-built connectors in the Logto instance directory. It creates symbolic links for each connector in 'packages/connectors' to 'packages/core/connectors'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlogto connector link\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli connector link\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli connector link\n```\n\n----------------------------------------\n\nTITLE: Implementing Organizations Component with Logto in React Native\nDESCRIPTION: This component uses the Logto React Native SDK to authenticate, retrieve organization IDs from ID token claims, and fetch organization-specific tokens. It renders a list of organization IDs with buttons to fetch their respective tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLogto } from '@logto/rn';\nimport { useEffect, useState } from 'react';\n\nconst Organizations = () => {\n  const { isAuthenticated, getOrganizationToken, getIdTokenClaims } = useLogto();\n  const [organizationIds, setOrganizationIds] = useState<string[]>();\n\n  useEffect(() => {\n    (async () => {\n      if (!isAuthenticated) {\n        return;\n      }\n      const claims = await getIdTokenClaims();\n\n      console.log('ID token claims', claims);\n      setOrganizationIds(claims?.organizations);\n    })();\n  }, [isAuthenticated, getIdTokenClaims]);\n\n  return (\n    <section>\n      <ul>\n        {organizationIds?.map((organizationId) => {\n          return (\n            <li key={organizationId}>\n              <span>{organizationId}</span>\n              <button\n                type=\"button\"\n                onClick={async () => {\n                  // highlight-start\n                  console.log('raw token', await getOrganizationToken(organizationId));\n                  // highlight-end\n                }}\n              >\n                fetch token (see console)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default Organizations;\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources Component with Code Snippets in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It demonstrates how to structure and pass configuration examples for API resources in Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-app-router/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Access Token Fetch Component in React JSX\nDESCRIPTION: This snippet imports a reusable documentation component and a code example, then renders the component with specific props to demonstrate how to fetch access tokens for API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resources Configuration Component\nDESCRIPTION: Imports multiple code snippet fragments and renders a ConfigApiResources component with the imported code snippets as props. The component handles different configurations for API resources including basic resources, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out in Flutter with Logto\nDESCRIPTION: This snippet demonstrates how to add a sign-out button to the main page of a Flutter app and implement the sign-out functionality using the Logto SDK. It includes setting up the post-sign-out redirect URI.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  // ...\n\n  final postSignOutRedirectUri = 'io.logto//home';\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    Widget signOutButton = TextButton(\n      onPressed: () async {\n        await logtoClient.signOut(postSignOutRedirectUri);\n        render();\n      },\n      child: const Text('Sign Out'),\n    );\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            SelectableText('My Demo App'),\n            signInButton,\n            signOutButton,\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This snippet imports necessary components and code examples, then renders the ConfigApiResources component with the imported code snippets as props. It demonstrates how to structure and display API resource configuration examples in a React-based documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: 显示基本用户信息 (Ruby ERB)\nDESCRIPTION: 使用`@client.id_token_claims`方法在ERB视图中显示用户名称，并根据认证状态显示不同内容。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>歡迎, <%= @client.id_token_claims[\"name\"] %></p>\n<% else %>\n  <p>請登入</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for Android Guide\nDESCRIPTION: Renders the imported MDX components in a structured documentation format with sections for installation, client initialization, redirect URI configuration, and authentication implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Init LogtoClient \\{#init-logtoclient}\n\n<InitLogtoClient />\n\n### Configure redirect URI \\{#configure-redirect-uri}\n\n<ConfigureRedirectUri\n  figureSrc=\"/img/assets/android-redirect-uri.png\"\n  redirectUri=\"io.logto.android://io.logto.sample/callback\"\n/>\n\n### Implement sign-in and sign-out \\{#implement-sign-in-and-sign-out}\n\n<ImplementSignInAndSignOut />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with getServerSideProps in Next.js\nDESCRIPTION: This snippet shows how to use getServerSideProps to fetch user data on the server-side and pass it as props to a Next.js component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoContext } from '@logto/next';\nimport { logtoClient } from '../../libraries/logto';\n\ntype Props = {\n  user: LogtoContext;\n};\n\nconst Home = ({ user }: Props) => {\n  const claims = useMemo(() => {\n    if (!user.isAuthenticated || !user.claims) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h2>Reclamos (Claims):</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Nombre</th>\n              <th>Valor</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(user.claims).map(([key, value]) => (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>{String(value)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }, [user]);\n\n  return (\n    <div>\n      {claims}\n    </div>\n  );\n};\n\nexport default Home;\n\nexport const getServerSideProps = logtoClient.withLogtoSsr(async function ({ request }) {\n  const { user } = request;\n\n  return {\n    props: { user },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Page with Authentication Controls in Next.js\nDESCRIPTION: Creates a home page component that displays different content based on authentication status. It uses server actions to handle sign-in and sign-out operations and renders the appropriate UI components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getLogtoContext, signIn, signOut } from '@logto/next/server-actions';\nimport SignIn from './sign-in';\nimport SignOut from './sign-out';\nimport { logtoConfig } from './logto';\n\nconst Home = () => {\n  const { isAuthenticated, claims } = await getLogtoContext(logtoConfig);\n\n  return (\n    <nav>\n      {isAuthenticated ? (\n        <p>\n          Olá, {claims?.sub},\n          <SignOut\n            onSignOut={async () => {\n              'use server';\n\n              await signOut(logtoConfig);\n            }}\n          />\n        </p>\n      ) : (\n        <p>\n          <SignIn\n            onSignIn={async () => {\n              'use server';\n\n              await signIn(logtoConfig);\n            }}\n          />\n        </p>\n      )}\n    </nav>\n  );\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Sign-In for IdP-initiated SSO in React\nDESCRIPTION: React component that handles the IdP-initiated SSO authentication flow. It extracts the ssoConnectorId from URL parameters and initiates a direct sign-in process using Logto's authentication parameters, enabling seamless authentication from an IdP-initiated flow to an OIDC application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Ejemplo en React\nimport { Prompt, useLogto } from '@logto/react';\nimport { useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nconst SsoDirectSignIn = () => {\n  const { signIn } = useLogto();\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const ssoConnectorId = searchParams.get('ssoConnectorId');\n    if (ssoConnectorId) {\n      void signIn({\n        redirectUri,\n        prompt: Prompt.Login,\n        directSignIn: {\n          method: 'sso',\n          target: ssoConnectorId,\n        },\n      });\n    }\n  }, [searchParams, signIn]);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Access Token Documentation Components in JSX\nDESCRIPTION: This code imports MDX fragments and components needed to display documentation about fetching access tokens for API resources. It then configures the FetchAccessTokenForApiResources component with specific properties.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Composing Organization Token Fetching Example Component (MDX/JSX)\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component, providing it with configuration and code samples via props. It demonstrates component composition in React/MDX, wiring together documentation and live code examples. Props such as organizationScope and the two code-related props provide all necessary context for the included fragment to display instructions and examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Structuring SSO Integration Guide with MDX Components\nDESCRIPTION: This code structures the SSO integration guide using imported MDX components and custom headers. It covers all steps from creating a Logto application to testing the SSO implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/_template-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"${sdk}\" link=\"${sdkOfficialLink}\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"${appType}\" framework=\"${framework}\" />\n\n## Integrate ${framework} SDK \\{#integrate-framework-sdk}\n\n<IntegrateSdk />\n\n## Add ${connector} connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\"${framework}\" />\n\n## Set up ${connectorConfigName} \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable ${connector} connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"${sdk}\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth Resource Parameter for Logto Provider in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring the `resource` parameter within the `authorization` options for a Logto provider in NextAuth.js. It utilizes the `NextAuth` function from the `next-auth` library. The `resource` parameter (`https://shopping.your-app.com/api`) specifies the intended audience (API) for the requested access token, aligning with OAuth 2.0 Resource Indicators.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          scope: 'openid offline_access profile email',\n          // highlight-next-line\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Logto Next.js Installation Fragment\nDESCRIPTION: Imports a reusable MDX documentation fragment for npm-like package installation instructions and renders it with the Logto Next.js package name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/next\" />\n```\n\n----------------------------------------\n\nTITLE: Sample User Profile JSON with Facebook Identity\nDESCRIPTION: An example of a user profile data structure in Logto that includes basic data and social identity information from a Facebook sign-in. Shows the format of user ID, profile information, custom data, and identity details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/user-management/user-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"iHXPuSb9eMzt\",\n  \"username\": null,\n  \"primaryEmail\": null,\n  \"primaryPhone\": null,\n  \"name\": \"John Doe\",\n  \"avatar\": \"https://example.com/avatar.png\",\n  \"customData\": {\n    \"preferences\": {\n      \"language\": \"en\",\n      \"color\": \"#f236c9\"\n    }\n  },\n  \"identities\": {\n    \"facebook\": {\n      \"userId\": \"106077000000000\",\n      \"details\": {\n        \"id\": \"106077000000000\",\n        \"name\": \"John Doe\",\n        \"email\": \"johndoe@logto.io\",\n        \"avatar\": \"https://example.com/avatar.png\"\n      }\n    }\n  },\n  \"lastSignInAt\": 1655799453171,\n  \"applicationId\": \"admin_console\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component\nDESCRIPTION: Imports MDX fragments and code files, then renders the ConfigApiResources component with the imported code snippets passed as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Token using Logto Client in TypeScript\nDESCRIPTION: This snippet asynchronously calls the getOrganizationToken method on the logtoClient instance, passing an organizationId to retrieve an access token for that organization. The code depends on properly initialized locals and a Logto client, with organizationId defined in the local scope. It returns a Promise resolving to the token string; ensure all dependencies are correctly set up, and error handling is performed as needed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-organization-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst token = await locals.logtoClient.getOrganizationToken(organizationId);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Components in React\nDESCRIPTION: This code imports necessary components and renders the FetchAccessTokenForApiResources component with specific props. It sets up the configuration for fetching access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in MDX (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import various documentation fragment components and guides for modular documentation assembly in an MDX file. Dependencies include React-like MDX support and access to specific markdown fragment files. The imported modules represent various sections of the authentication setup process, referenced later to compose the overall step-by-step guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-line.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/swift/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/line/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Access Token Documentation (JavaScript)\nDESCRIPTION: This snippet imports two React components: one from a shared fragments directory and another from a local code example path. The first component, likely a documentation fragment, provides details about fetching access tokens, while the second encapsulates sample code for obtaining access tokens. This organization enables reusable, maintainable, and modular documentation components. No runtime dependencies beyond React and project structure are required.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Organization Creation API Response Example\nDESCRIPTION: Example JSON response returned from the Logto Management API after successfully creating an organization. It includes the organization's details such as ID, name, description, and branding information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/organization-experience/create-organization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tenantId\": \"string\",\n  \"id\": \"string\",\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"customData\": {},\n  \"isMfaRequired\": false,\n  \"branding\": {\n    \"logoUrl\": \"string\",\n    \"darkLogoUrl\": \"string\",\n    \"favicon\": \"string\",\n    \"darkFavicon\": \"string\"\n  },\n  \"createdAt\": 1234567890\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Icons in JavaScript/JSX\nDESCRIPTION: This snippet imports various SVG icons as React components for use in the documentation. These icons are likely used to visually represent different sections of the customization guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/customization/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BrushIcon from '@site/src/assets/brush.svg';\nimport CustomizationIcon from '@site/src/assets/customization.svg';\nimport FlaskIcon from '@site/src/assets/flask.svg';\nimport LanguagesIcon from '@site/src/assets/languages.svg';\nimport StartIcon from '@site/src/assets/start.svg';\nimport UserFlowIcon from '@site/src/assets/user-flows.svg';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Components in MDX\nDESCRIPTION: Demonstrates importing MDX fragments and code components, then using them to render documentation about fetching access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring securityFilterChain in Spring Security for OAuth2 Authentication\nDESCRIPTION: Implementation of security filter chain that permits access to home page and requires authentication for all other requests. It configures OAuth2 login with custom success handler and logout with custom logout handler.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.DefaultSecurityFilterChain;\n\npublic class WebSecurityConfig {\n  // ...\n\n  @Bean\n  public DefaultSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n    http\n      .authorizeRequests(authorizeRequests ->\n        authorizeRequests\n          .antMatchers(\"/\", \"/home\").permitAll() // Permitir acesso à página inicial\n          .anyRequest().authenticated() // Todas as outras solicitações exigem autenticação\n      )\n      .oauth2Login(oauth2Login ->\n        oauth2Login\n          .successHandler(new CustomSuccessHandler())\n      )\n      .logout(logout ->\n        logout\n          .logoutSuccessHandler(new CustomLogoutHandler())\n      );\n    return http.build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Hugging Face Sign-In Tutorial\nDESCRIPTION: This code snippet imports various MDX components used throughout the tutorial to structure the content and provide reusable sections for the Hugging Face sign-in implementation guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-server-hugging-face.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-server/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/hugging-face/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Hugging Face';\n```\n\n----------------------------------------\n\nTITLE: MDX Import Structure for WordPress SAML SSO Guide\nDESCRIPTION: MDX import statements defining the documentation structure and component fragments for the WordPress SAML SSO integration guide. Includes imports for various sections like introduction, application setup, connector configuration, and testing.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-wordpress-plugin-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/wordpress-plugin/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/saml/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import Structure\nDESCRIPTION: Imports various MDX components and fragments for building the documentation page structure. Uses Docusaurus-style imports to organize the content into modular sections.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-mvc-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/saml/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension SDK with npm - Bash\nDESCRIPTION: This snippet demonstrates the command to install the @logto/chrome-extension package using npm. It requires an environment with node.js and npm already installed. Running this command adds the Logto Chrome extension SDK as a dependency in the current project, making it available for import and use. No additional parameters are required and the command must be run in the root directory of a node project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Rendering Logto Configuration Components\nDESCRIPTION: This snippet renders various Logto configuration components, including API resources description, client configuration, and access token retrieval instructions. It uses imported components and passes necessary props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiResourcesDescription />\n\n### Configurar cliente Logto {#configure-logto-client}\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode package={props.package} />}\n  configResourcesWithSharedScopesCode={\n    <ConfigResourcesWithSharedScopesCode package={props.package} />\n  }\n/>\n\n### Buscar token de acesso para o recurso de API {#fetch-access-token-for-the-api-resource}\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n\n### Buscar tokens de organização {#fetch-organization-tokens}\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode package={props.package} />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Flowchart of Account Linking Decision Process with Mermaid\nDESCRIPTION: This flowchart illustrates the decision-making process for account linking when a user signs in with a social identity. It shows the various paths based on whether the social identity exists, if email/phone matches existing accounts, and if automatic account linking is enabled.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-up-and-sign-in/social-sign-in.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Authenticate with social identity] --> B{{Social identity exists in Logto?}}\n    B -- Yes --> C[Signed in with existing account]\n    B -- No --> D{{Email/phone match any existing account?}}\n    D -- Yes --> E{{Automatic account linking enabled?}}\n    E -- Yes --> G[Link social identity to existing account]\n    G --> C\n    D -- No --> H[Create new account and sign in]\n    E -- No --> I{{Link social account?}}\n    I -- Yes --> G\n    I -- No --> H\n```\n\n----------------------------------------\n\nTITLE: Creating User Details Template with Thymeleaf in HTML\nDESCRIPTION: Defines an HTML template using Thymeleaf to display user information retrieved from the controller. The template shows the user's name, email, and ID, and includes a logout form that posts to the /logout endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <h1>User Details</h1>\n  <div>\n    <p>\n    <div><strong>name:</strong> <span th:text=\"${username}\"></span></div>\n    <div><strong>email:</strong> <span th:text=\"${email}\"></span></div>\n    <div><strong>id:</strong> <span th:text=\"${sub}\"></span></div>\n    </p>\n  </div>\n\n  <form th:action=\"@{/logout}\" method=\"post\">\n    <input type=\"submit\" value=\"Logout\" />\n  </form>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto API Resources Configuration in JSX\nDESCRIPTION: This snippet demonstrates how to import MDX fragments and code snippets, then compose them into a ConfigApiResources component for documentation. The code imports a main component and three code example files, then renders them as a unified documentation element.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing React Access Token Documentation Components\nDESCRIPTION: React JSX code that imports MDX fragments and components to create documentation for access token fetching. The code combines a reusable access token documentation fragment with specific code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components and Code Snippets\nDESCRIPTION: This snippet imports the main layout component `ConfigApiResources` from a shared fragments directory and specific code example components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) from a local `code` subdirectory. These imports are prerequisites for assembling the final documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoProvider in React Native\nDESCRIPTION: This snippet shows how to import and configure the LogtoProvider component for a React Native application. It demonstrates setting up the LogtoConfig object with application ID, endpoint, and various user scopes, then wrapping the application content with the LogtoProvider.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [\n    // highlight-start\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n    // highlight-end\n  ],\n};\n\nconst App = () => (\n  <LogtoProvider config={config}>{/* Votre contenu d'application */}</LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Logic in Blazor Component Class\nDESCRIPTION: Sets up the authentication logic in a Blazor component's code-behind class. Handles user authentication state, login and logout actions, and retrieves the user profile after successful authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.AspNetCore.Components.Web;\nusing Blorc.OpenIdConnect;\nusing Microsoft.AspNetCore.Components.Authorization;\n\n[Authorize]\npublic partial class Home : ComponentBase\n{\n    [Inject]\n    public required IUserManager UserManager { get; set; }\n\n    public User<Profile>? User { get; set; }\n\n    [CascadingParameter]\n    protected Task<AuthenticationState>? AuthenticationStateTask { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n        User = await UserManager.GetUserAsync<User<Profile>>(AuthenticationStateTask!);\n    }\n\n    private async Task OnLoginButtonClickAsync(MouseEventArgs obj)\n    {\n        await UserManager.SignInRedirectAsync();\n    }\n\n    private async Task OnLogoutButtonClickAsync(MouseEventArgs obj)\n    {\n        await UserManager.SignOutRedirectAsync();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js Server Component with Logto Organization Token Retrieval\nDESCRIPTION: This server component (page.ts) uses the getOrganizationToken function from @logto/next/server-actions to retrieve an organization token. It imports the logtoConfig and embeds a client component to handle user interaction.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-organization-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { getOrganizationToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetOrganizationToken from './get-organization-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetOrganizationToken\n        onGetOrganizationToken={async () => {\n          'use server';\n\n          return getOrganizationToken(logtoConfig, 'organization-id');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Components in MDX\nDESCRIPTION: React/MDX component composition that imports and renders documentation fragments for fetching access tokens. Uses custom components to display API authentication documentation with specific props for access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Access Token Components in React (JavaScript)\nDESCRIPTION: This snippet imports two modules: one is a React component fragment for fetching an access token for API resources, and the other is a markdown code example for obtaining an access token. The imported code and components are then used in a JSX expression, where the code example is passed as a prop to the main fragment. Dependencies include React and the referenced MDX/Markdown files. The input is typically component props and the output is a rendered React component tree, with the structure and usage dictated by the imported modules.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Organization Token Components\nDESCRIPTION: Imports required components and composes them into a FetchOrganizationTokenForUser component with specific props for organization scope and code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying help information for Logto CLI commands\nDESCRIPTION: Shows how to access help information for Logto CLI commands by appending '--help' to any command. This provides usage details and available options for the specified command.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlogto --help\nlogto db seed --help\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments and Components in MDX/Javascript\nDESCRIPTION: This snippet illustrates the import of various MDX fragments and one component from other documentation files or modules into the current MDX file. These imports modularize the content, enabling reuse and maintainability across the documentation site. Each imported fragment corresponds to a particular section in the passwordless sign-in guide, such as intro, application setup, adding connectors, saving configuration, and more.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-python-aws-ses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport FrameworkGuide from '@site/docs/quick-starts/framework/python/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/docs/integrations/email/aws-ses/_integration.mdx';\\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet renders a component that demonstrates how to fetch an access token for API resources. It passes the 'getAccessToken' API and a code snippet component as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Sign-In for IdP-initiated SSO in React\nDESCRIPTION: React component example that handles IdP-initiated SSO authentication flow. It extracts the SSO connector ID from URL parameters and initiates a direct sign-in process with appropriate authentication parameters.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/end-user-flows/enterprise-sso/idp-initiated-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// React 예제\nimport { Prompt, useLogto } from '@logto/react';\nimport { useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nconst SsoDirectSignIn = () => {\n  const { signIn } = useLogto();\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const ssoConnectorId = searchParams.get('ssoConnectorId');\n    if (ssoConnectorId) {\n      void signIn({\n        redirectUri,\n        prompt: Prompt.Login,\n        directSignIn: {\n          method: 'sso',\n          target: ssoConnectorId,\n        },\n      });\n    }\n  }, [searchParams, signIn]);\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding Modular MDX Fragments into Docusaurus Content - MDX\nDESCRIPTION: This snippet demonstrates how to compose the documentation page using custom MDX components and fragments. Each fragment represents a distinct section, such as the intro, application creation, or various SSO steps. The components are rendered with props to inject dynamic content where needed. No external dependencies besides the defined fragments and Docusaurus/MDX environment. This pattern provides readable section-based rendering and facilitates content updates. The main inputs are predefined metadata and fragment components; output is the structured guide rendered to the user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"Expo (React Native)\" link=\"https://expo.dev\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Native app\" framework=\"Expo\" />\n\n## Integrate Expo with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add OIDC enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\"Expo\" />\n\n## Set up OIDC application on your IdP \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable OIDC enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"Expo (React Native)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components and Fragments - JavaScript\nDESCRIPTION: Imports reusable documentation section and code snippet fragments using standard JavaScript/React syntax. These imports bring in both the main MDX documentation ('_scopes-and-claims.mdx') and a code example ('_scopes-and-claims-code.md') to be used in a composite React component. Requires the React framework, support for MDX/markdown imports, and proper relative paths to these files.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n```\n\n----------------------------------------\n\nTITLE: User Impersonation Flow Diagram\nDESCRIPTION: Sequence diagram showing the interaction between Sarah's application, TechCorp server, Logto Management API, and token endpoint for user impersonation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/developers/user-impersonation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Sarah as Aplicación de Sarah\n    participant TechCorp as Servidor de TechCorp\n    participant Logto as Logto Management API\n    participant LogtoToken as Logto token endpoint\n\n    Sarah->>TechCorp: POST /api/request-impersonation\n    Note over Sarah,TechCorp: Solicitud para suplantar a Alex\n\n    TechCorp->>Logto: POST /api/subject-tokens\n    Note over TechCorp,Logto: Solicitar token de sujeto para Alex\n\n    Logto-->>TechCorp: Devolver token de sujeto\n    TechCorp-->>Sarah: Devolver token de sujeto\n\n    Sarah->>LogtoToken: POST /oidc/token\n    Note over Sarah,LogtoToken: Intercambiar token de sujeto por token de acceso\n\n    LogtoToken-->>Sarah: Devolver token de acceso\n    Note over Sarah: Sarah ahora puede acceder a recursos como Alex\n```\n\n----------------------------------------\n\nTITLE: MDX Import Structure for Documentation\nDESCRIPTION: Core imports for documentation structure using MDX components to organize the tutorial sections including introduction, application creation, SSO connector setup, and testing procedures.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-go-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring FetchAccessTokenForApiResources Component (MDX)\nDESCRIPTION: This snippet shows the usage of the `FetchAccessTokenForApiResources` MDX component. It sets the `getAccessTokenApi` prop to the string \"getAccessToken\" and provides the imported `GetAccessTokenCode` component as a value to the `getAccessTokenCode` prop. This configuration likely customizes the rendered output of `FetchAccessTokenForApiResources` to display specific code or instructions for obtaining an access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Webhook Flow with Mermaid Diagram\nDESCRIPTION: A mermaid diagram showing the flow of two webhooks triggered by a Post Sign-In event in Logto. The diagram illustrates how sign-in completion triggers the Post sign-in event, which then activates two webhooks that make POST API calls to their respective service endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  subgraph Logto\n    SF(Sign-in finished)\n    PS(Post sign-in)\n    WH2(Web hook 2)\n    WH1(Web hook 1)\n  end\n\n  subgraph Service 2\n    E2(Endpoint)\n  end\n\n  subgraph Service 1\n    E1(Endpoint)\n  end\n\n  SF -->|Trigger| PS\n  PS --> WH1\n  PS --> WH2\n  WH1 --->|POST API call| E1\n  WH2 --->|POST API call| E2\n```\n\n----------------------------------------\n\nTITLE: Implementing getAccessToken for GitHub Social Connector in TypeScript\nDESCRIPTION: This function obtains an access token using the authorization code issued after successful user authentication. It sends a POST request to the access token endpoint with the necessary credentials.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/develop-your-connector/implement-connectors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getAccessToken = async (config: GithubConfig, code: string) => {\n  const { clientId: client_id, clientSecret: client_secret } = config;\n\n  const httpResponse = await got.post({\n    url: accessTokenEndpoint,\n    json: {\n      client_id,\n      client_secret,\n      code,\n    },\n    timeout: defaultTimeout,\n  });\n\n  const result = accessTokenResponseGuard.safeParse(qs.parse(httpResponse.body));\n\n  if (!result.success) {\n    throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n  }\n\n  const { access_token: accessToken } = result.data;\n\n  assert(accessToken, new ConnectorError(ConnectorErrorCodes.SocialAuthCodeInvalid));\n\n  return { accessToken };\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering GetUserInfoApis Component with Props in MDX\nDESCRIPTION: Renders the imported `GetUserInfoApis` component within the MDX document. It passes `getIdTokenClaimsApi` and `fetchUserInfoApi` props with string values 'getIdTokenClaims' and 'fetchUserInfo' respectively, likely to customize the displayed API method names in the generated documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<GetUserInfoApis getIdTokenClaimsApi=\"getIdTokenClaims\" fetchUserInfoApi=\"fetchUserInfo\" />\n```\n\n----------------------------------------\n\nTITLE: Example User Data Structure with Facebook Login in JSON\nDESCRIPTION: This snippet shows an example of user data obtained from a Facebook login, including basic profile information, custom data, and social identity details.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"iHXPuSb9eMzt\",\n  \"username\": null,\n  \"primaryEmail\": null,\n  \"primaryPhone\": null,\n  \"name\": \"John Doe\",\n  \"avatar\": \"https://example.com/avatar.png\",\n  \"customData\": {\n    \"preferences\": {\n      \"language\": \"en\",\n      \"color\": \"#f236c9\"\n    }\n  },\n  \"identities\": {\n    \"facebook\": {\n      \"userId\": \"106077000000000\",\n      \"details\": {\n        \"id\": \"106077000000000\",\n        \"name\": \"John Doe\",\n        \"email\": \"johndoe@logto.io\",\n        \"avatar\": \"https://example.com/avatar.png\"\n      }\n    }\n  },\n  \"lastSignInAt\": 1655799453171,\n  \"applicationId\": \"admin_console\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It demonstrates how to structure and compose documentation for API resource configuration in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Messages in Chrome Extension Service Worker\nDESCRIPTION: Implementation of message listener in service worker to handle sign-in and sign-out requests from extension pages, using Chrome Identity API for redirect URIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  // Dans le code ci-dessous, puisque nous retournons `true` pour chaque action, nous devons appeler `sendResponse`\n  // pour notifier l'expéditeur. Vous pouvez également gérer les erreurs ici, ou utiliser d'autres moyens pour notifier l'expéditeur.\n\n  if (message.action === 'signIn') {\n    const redirectUri = chrome.identity.getRedirectURL('/callback');\n    logtoClient.signIn(redirectUri).finally(sendResponse);\n    return true;\n  }\n\n  if (message.action === 'signOut') {\n    const redirectUri = chrome.identity.getRedirectURL();\n    logtoClient.signOut(redirectUri).finally(sendResponse);\n    return true;\n  }\n\n  return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting OIDC Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript snippet defines and exports a constant named `connector` with the string value 'OIDC enterprise SSO'. This constant is likely used within the MDX page or imported components to dynamically display the connector name or pass it as a prop, ensuring consistency throughout the guide.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-razor-pages-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Rendering ConfigApiResources Component with Code Snippets in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It demonstrates how to structure and pass code examples for API resource configuration in Logto documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript code snippet, likely within an MDX context, exports a constant named 'connector' holding the string 'Microsoft Entra ID OIDC enterprise SSO'. This constant is intended for use within the documentation components to consistently refer to the specific SSO connector being detailed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components\nDESCRIPTION: MDX imports for various documentation sections including introduction, application setup, SSO configuration, and testing components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-mvc-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/google-workspace/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Custom Scopes and Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure Logto Express with custom scopes and resources. It imports the UserScope from @logto/express and defines a LogtoExpressConfig object with specific scopes for shopping and store operations, as well as resource URLs for API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Browser Client via CDN\nDESCRIPTION: Demonstrates how to import and initialize the Logto browser client using ESM imports from jsdelivr CDN. The client is configured with an endpoint, application ID, scopes for read/write permissions, and resource API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/webflow/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  // Import `@logto/browser` SDK from the jsdelivr CDN\n  import LogtoClient from 'https://esm.run/@logto/browser';\n\n  window.logtoClient = new LogtoClient({\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-application-id>',\n    scopes: ['read', 'write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Webhook Architecture with Mermaid Diagram\nDESCRIPTION: A mermaid diagram showing how Logto triggers two webhooks for the PostSignIn event, making POST API calls to different service endpoints after a user completes the login process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/developers/webhooks/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  subgraph Logto\n    SF(로그인 완료)\n    PS(로그인 후)\n    WH2(웹 훅 2)\n    WH1(웹 훅 1)\n  end\n\n  subgraph Service 2\n    E2(엔드포인트)\n  end\n\n  subgraph Service 1\n    E1(엔드포인트)\n  end\n\n  SF -->|트리거| PS\n  PS --> WH1\n  PS --> WH2\n  WH1 --->|POST API 호출| E1\n  WH2 --->|POST API 호출| E2\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes in Kotlin\nDESCRIPTION: Sets up a LogtoConfig instance with specific authentication scopes. Shows how to configure email and phone scopes either using string literals or UserScope enum values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...autres configurations\n    scopes = listOf(\"email\", \"phone\"), // ou `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in Javascript\nDESCRIPTION: This Javascript snippet, likely within an MDX file, defines and exports a constant variable `connector` assigned the string value 'Apple'. This constant is used later in the document, passed as a prop to imported components like `Intro`, `AddSocialConnector`, etc., to specify the social connector being discussed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-apple.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Apple';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This snippet imports two components and renders one of them with the other as a prop. It demonstrates how to compose React components for documentation purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/go/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 Provider for Logto in Next.js\nDESCRIPTION: This snippet demonstrates how to set up the Auth.js v5 provider for Logto authentication in a Next.js application. It includes the configuration for the OIDC provider and profile mapping.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      name: 'Logto',\n      type: 'oidc',\n      // Du kannst den Ausstellerwert von der Logto-Anwendungsdetailseite erhalten,\n      // im Feld \"Issuer endpoint\"\n      issuer: 'https://xxxx.logto.app/oidc',\n      clientId: '<logto-app-id>',\n      clientSecret: '<logto-app-secret>',\n      authorization: {\n        params: { scope: 'openid offline_access profile email' },\n      },\n      profile(profile) {\n        // Du kannst hier die Zuordnung des Benutzerprofils anpassen\n        return {\n          id: profile.sub,\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.picture,\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet demonstrates how to import and use a reusable component for fetching access tokens, along with a code snippet component. It passes props to customize the component's behavior.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using FetchAccessTokenForApiResources Component in MDX\nDESCRIPTION: This snippet shows how to import and utilize the `FetchAccessTokenForApiResources` component in an MDX file. It passes specific props (`getAccessTokenApi`, `getAccessTokenCode`) to configure the component. The `getAccessTokenCode` prop likely embeds code related to access token retrieval, sourced from the imported `GetAccessTokenCode` component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Blorc.OpenIdConnect via dotnet CLI\nDESCRIPTION: Uses the dotnet CLI to add the Blorc.OpenIdConnect NuGet package to a .NET project. This package provides OpenID Connect functionality for .NET applications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Blorc.OpenIdConnect\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Npm-Like Installation Component in JavaScript\nDESCRIPTION: This code snippet imports a prebuilt MDX component named NpmLikeInstallation from a relative path, enabling the reuse of npm-like installation UI in documentation pages. The dependency is the local MDX file; this presumes the project is set up to handle .mdx imports with proper bundler and loader support. Input is the relative path to the component, and output is the imported React/MDX component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant named `connector` assigned the string value 'AWS SES'. This constant is likely used within the MDX file to pass the connector name as a prop to various imported components (like `<Intro>`, `<AddPasswordlessConnector>`, etc.), ensuring consistency when referring to the AWS SES connector throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-aws-ses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'AWS SES';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Config Components in MDX\nDESCRIPTION: Imports documentation fragments and code examples for API resource configuration, then renders them using the ConfigApiResources component with props for different code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: SMTP Authentication Options Schema\nDESCRIPTION: Schema for username and password authentication options for the SMTP connector, including user, pass, and type properties.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/email/smtp/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type                   | Enum values |\n| ---- | ---------------------- | ----------- |\n| user | string                 | N/A         |\n| pass | string                 | N/A         |\n| type | enum string (OPTIONAL) | 'login'     |\n```\n\n----------------------------------------\n\nTITLE: Composing Organization Token Documentation using MDX Components\nDESCRIPTION: This MDX snippet renders a documentation section about fetching organization tokens by invoking the `FetchOrganizationTokenForUser` component. It passes the required organization scope (`UserScope.Organizations`) and embeds other components (`ConfigOrganizationCode`, `GetOrganizationAccessTokenCode`) which presumably contain specific code examples for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Fetch Fragment with Props in React (JSX)\nDESCRIPTION: This JSX snippet renders the imported FetchAccessTokenForApiResources component, supplying it with properties that specify the name of the access token API and pass a code sample as a prop. The component is expected to display both instructions and embedded code for obtaining access tokens, utilizing the child component for showing code. Inputs are the getAccessTokenApi string and getAccessTokenCode element; output is the rendered React component UI. Requires React and a Babel/JSX-compatible environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resource Configuration Component in MDX\nDESCRIPTION: This MDX snippet renders the `ConfigApiResources` component. It passes other imported components (`ConfigResourcesCode`, `ConfigResourcesWithScopesCode`, `ConfigResourcesWithSharedScopesCode`) as props. These props likely contain code examples or UI elements related to configuring API resources with varying levels of scope complexity.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Requesting Data with Logto Access Token in React\nDESCRIPTION: A React component that uses Logto authentication to fetch protected data from a backend API. The component includes the Logto access token in the request headers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLogto } from '@logto/react';\nimport { useState, useEffect } from 'react';\nimport PostList from './PostList';\n\nconst endpoint = '<https://www.mysite.com/api/posts>';\nconst resource = '<https://www.mysite.com/api>';\n\nfunction PostPage() {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [posts, setPosts] = useState();\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const response = await fetch(endpoint, {\n        headers: {\n          Authorization: `Bearer ${await getAccessToken(resource)}`,\n        },\n      });\n      setPosts(response.json());\n    };\n\n    if (isAuthenticated) {\n      void fetchPosts();\n    }\n  }, [isAuthenticated, getAccessToken]);\n\n  return <PostList posts={posts} />;\n}\n\nexport default PostPage;\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in JSX\nDESCRIPTION: This snippet imports various components and code snippets, then renders them using the ConfigApiResources component. It demonstrates how to configure and display different API resource configurations in a React-based documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet imports necessary components and renders a FetchAccessTokenForApiResources component with specific props. It demonstrates how to integrate the access token fetching functionality into a React-based documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Logto Sign-In Callback in PHP with Laravel\nDESCRIPTION: This code sets up a route to handle the Logto sign-in callback. It uses the Logto client to process the callback, implements basic error handling, and redirects the user to the home page upon successful sign-in. The callback URL is set to '/callback' in this example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/php/_implement-callback-route.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/callback', function () {\n  try {\n    $client->handleSignInCallback(); // Handle a lot of stuff\n  } catch (\\Throwable $exception) {\n    return $exception; // Change this to your error handling logic\n  }\n  return redirect('/'); // Redirect the user to the home page after a successful sign-in\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Configuration in Swift\nDESCRIPTION: This code initializes a LogtoConfig object with a custom endpoint, app ID, scopes, and resources. It then creates a LogtoClient instance using this configuration. The scopes and resources are highlighted to emphasize their customization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in and Sign-out in Express.js with Logto\nDESCRIPTION: Implements the home route with conditional rendering based on the user's authentication status. It uses the withLogto middleware to inject the auth status into req.user and provides links for sign-in and sign-out.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  res.setHeader('content-type', 'text/html');\n\n  if (req.user.isAuthenticated) {\n    res.end(\n      `<div>Bonjour ${req.user.claims?.sub}, <a href=\"/logto/sign-out\">Déconnexion</a></div>`\n    );\n  } else {\n    res.end('<div><a href=\"/logto/sign-in\">Connexion</a></div>');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto to Fetch User Information\nDESCRIPTION: This snippet shows how to configure the Logto handler to automatically fetch complete user information. By setting the fetchUserInfo option to true, the handle function will populate the locals.user object with data from the fetchUserInfo method rather than just the ID token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    /* Logto config */\n  },\n  {\n    /* Cookie config */\n  },\n  {\n    fetchUserInfo: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto API Resource Configuration Components\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code examples as props. It demonstrates how to structure and display API resource configuration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing Logto Client in Swift\nDESCRIPTION: This code configures a LogtoConfig object with a custom endpoint, app ID, scopes, and resources. It then uses this configuration to create a LogtoClient instance. The scopes and resources are highlighted to emphasize their customization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet config = try? LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // highlight-end\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes and Resources in Ruby\nDESCRIPTION: This snippet demonstrates how to create a new Logto client instance with custom scopes and resources. The code configures specific permission scopes ('read' and 'write') and defines multiple API resource endpoints that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-start\n    scopes: [\"read\", \"write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resources Component in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders a ConfigApiResources component with the imported code as props. It demonstrates how to set up API resource configuration in a Logto documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Middleware for Access Token Retrieval in Express (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up a GET route in an Express app using Logto middleware. It configures the middleware to fetch an access token for a specific resource and logs it to the console. The route then responds with the user object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/fetch-access-token',\n  withLogto({\n    ...config,\n    // highlight-start\n    getAccessToken: true,\n    resource: 'https://shopping.your-app.com/api',\n    // highlight-end\n  }),\n  (request, response) => {\n    // highlight-next-line\n    console.log(request.user.accessToken);\n    response.json(request.user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling API Resources Configuration Documentation Components\nDESCRIPTION: This code imports MDX fragments and code snippets from different files and combines them into a ConfigApiResources component. The component is used to display documentation about configuring API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Constant in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant named `connector` assigned the string value 'SAML enterprise SSO'. This constant is likely used within the MDX document or imported components, possibly passed as props, to dynamically refer to the specific SSO connector being configured throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-express-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components\nDESCRIPTION: React/MDX code that imports documentation fragments and renders them using the ConfigApiResources component with various code examples as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Session Middleware\nDESCRIPTION: Setting up express-session middleware to store user tokens and interaction data during the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst session = require('express-session');\n\napp.use(\n  session({\n    secret: 'keyboard cat', // Change to your own secret key\n    cookie: { maxAge: 86400 },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: React Component Import Declarations\nDESCRIPTION: Import statements for various SVG icon components used in the documentation navigation\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/introduction/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport AuditLogIcon from '@site/src/assets/audit-log.svg';\nimport AuthorizationIcon from '@site/src/assets/authorization.svg';\nimport CloudIcon from '@site/src/assets/cloud.svg';\nimport LogtoConsoleIcon from '@site/src/assets/console.svg';\nimport ExperienceIcon from '@site/src/assets/experience.svg';\nimport GearPlusIcon from '@site/src/assets/gear-plus.svg';\nimport GearIcon from '@site/src/assets/gear.svg';\nimport ImpersonationIcon from '@site/src/assets/impersonation.svg';\nimport LockIcon from '@site/src/assets/lock.svg';\nimport LogtoApiIcon from '@site/src/assets/logto-api.svg';\nimport OpenSourceIcon from '@site/src/assets/open-source.svg';\nimport OrganizationIcon from '@site/src/assets/organization.svg';\nimport ScreenIcon from '@site/src/assets/screen.svg';\nimport SdkIcon from '@site/src/assets/sdk.svg';\nimport SecurityIcon from '@site/src/assets/security.svg';\nimport SignInIcon from '@site/src/assets/sign-in.svg';\nimport SignOutIcon from '@site/src/assets/sign-out.svg';\nimport SsoIcon from '@site/src/assets/sso.svg';\nimport UserManagementIcon from '@site/src/assets/user-management.svg';\nimport WebhookIcon from '@site/src/assets/webhook.svg';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Documentation Components\nDESCRIPTION: Imports MDX fragments and code components, then renders a FetchAccessTokenForApiResources component with specific props for access token documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Fragments and Code Snippets in React\nDESCRIPTION: This snippet demonstrates the import statements used to bring in various documentation fragments and code examples for API resource configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiResourcesDescription from '../../fragments/_api-resources-description.md';\nimport ConfigApiResources from '../../fragments/_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from '../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code-snippets/_get-resource-access-token.md';\nimport ConfigResourcesCode from './code-snippets/_resource-config-code.md';\nimport ConfigResourcesWithScopesCode from './code-snippets/_resource-with-scopes-config-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code-snippets/_resource-with-shared-scopes-config-code.md';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Documentation Components for Access Token Retrieval\nDESCRIPTION: This code imports MDX fragments and code examples, then renders the FetchAccessTokenForApiResources component with appropriate props to display documentation about getting access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/react/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for Template Substitution\nDESCRIPTION: Exports a connector variable that will be substituted with the actual connector name when the template is processed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/_template-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = '${connector}';\n```\n\n----------------------------------------\n\nTITLE: MDX Imports and Component Declarations\nDESCRIPTION: MDX component imports and variable declarations for structuring the documentation page. Includes imports for various documentation fragments and configuration of the connector name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-php-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-oidc/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Documentation Components\nDESCRIPTION: Imports required MDX fragments and components for building the documentation page about user information retrieval and scope/claims handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GetUserInfoApis from '../../fragments/_get-user-info-apis.mdx';\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relationship Between Resources and Identities in Logto\nDESCRIPTION: A Mermaid diagram illustrating the relationship between different resource types (API Resources, Organizations, Organization API resources) and identity types (Users, M2M Applications) in Logto's authorization model.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/concepts/authn-vs-authz.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  subgraph Resources\n    R(Recursos de API)\n    O(Organizaciones)\n    OR(Recursos de API de la organización)\n  end\n\n  subgraph Identities\n    U(Usuarios)\n    A(Aplicaciones M2M)\n  end\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Components for Access Token Documentation\nDESCRIPTION: This MDX snippet imports two components, `FetchAccessTokenForApiResources` from a relative path within the project structure and `GetAccessTokenCode` from a local code directory. It then instantiates the `FetchAccessTokenForApiResources` component, passing specific props: `getAccessTokenApi` is set to the string \"getAccessToken\", and `getAccessTokenCode` is assigned the imported `GetAccessTokenCode` component. This pattern is used to dynamically build documentation pages by composing reusable UI/content fragments.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out in Express.js with Logto\nDESCRIPTION: Demonstrates how to implement sign-in and sign-out functionality on the home page of an Express.js application using Logto. It uses the withLogto middleware to inject the authentication state into the request object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withLogto } from '@logto/express';\n\napp.get('/', withLogto(config), (req, res) => {\n  res.setHeader('content-type', 'text/html');\n\n  if (req.user.isAuthenticated) {\n    res.end(`<div>Hola ${req.user.claims?.sub}, <a href=\"/logto/sign-out\">Cerrar sesión</a></div>`);\n  } else {\n    res.end('<div><a href=\"/logto/sign-in\">Iniciar sesión</a></div>');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Multiple API Resources in SvelteKit\nDESCRIPTION: This code configures the SvelteKit server hooks to use Logto for authentication by calling handleLogto with configuration options. It demonstrates how to specify multiple API resources that the application will access, which is important for proper authorization scope setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Scopes and Resources in TypeScript\nDESCRIPTION: Creates a new LogtoClient instance with custom API access scopes for shopping and store operations, along with their corresponding resource endpoints. The configuration includes read and write permissions for both shopping and store APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with API Resources in React Native TypeScript\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object for a React Native application. It includes setting the application ID, Logto endpoint, and defining multiple API resources that the application will need to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // Ajouter des ressources API\n  // highlight-start\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This code snippet configures NextAuth with a Logto provider. It sets up custom scopes including 'openid', 'offline_access', and a specific Logto scope for organizations. The configuration exports handlers, signIn, signOut, and auth functions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access urn:logto:scope:organizations',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Icons and Components in JSX\nDESCRIPTION: This code snippet imports various icon components and the Admonition component from the site's assets and theme. These components are likely used throughout the documentation for visual elements and styling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/logto-oss/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CentralCacheIcon from '@site/src/assets/central-cache.svg';\nimport CliIcon from '@site/src/assets/cli.svg';\nimport ConnectorsIcon from '@site/src/assets/connectors.svg';\nimport DocumentIcon from '@site/src/assets/document.svg';\nimport FileStorageIcon from '@site/src/assets/file-storage.svg';\nimport GearIcon from '@site/src/assets/gear.svg';\nimport RocketIcon from '@site/src/assets/rocket.svg';\nimport UpdateIcon from '@site/src/assets/update.svg';\nimport Admonition from '@theme/Admonition';\n```\n\n----------------------------------------\n\nTITLE: Flowchart: Social Sign-up with Registered Email Address\nDESCRIPTION: This flowchart demonstrates the process when the social identity provides an email address already registered in Logto. The user can choose to link the social account or create a new account with a different email.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-up-and-sign-in/social-sign-in.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Authenticate with social identity] --> B{{Email address match any existing account?}}\n    B -- Yes --> C{{Link social account?}}\n    C -- Yes --> D[Link social identity to existing account]\n    D --> E[Successful sign-in]\n    C -- No --> F[Enter new email address]\n    F --> G[Enter verification code]\n    G --> H[Enter username]\n    H --> I[Successful sign-up]\n    B -- No --> H\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes and Resources in Vue\nDESCRIPTION: This snippet demonstrates how to use the createLogto function from @logto/vue to configure Logto authentication in a Vue application. It sets custom scopes for shopping and store operations, and specifies API resources for these services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring Logto Integration Guide with Markdown and JSX Components\nDESCRIPTION: This code snippet demonstrates the structure of the Logto integration guide using imported Markdown and JSX components. It outlines the steps for installation, session storage creation, client initialization, and route implementations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GoGuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Create a session storage \\{#create-a-session-storage}\n\n<CreateSessionStorage />\n\n### Init LogtoClient \\{#init-logtoclient}\n\n<InitLogtoClient />\n\n### Implement sign-in route \\{#implement-sign-in-route}\n\n<ImplementSignInRoute />\n\n### Implement the callback route \\{#implement-the-callback-route}\n\n<ImplementCallbackRoute />\n\n### Implement sign-out route \\{#implement-sign-out-route}\n\n<ImplementSignOutRoute />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Angular Auth Provider\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the Angular auth provider to request additional scopes. It uses the buildAngularAuthConfig function from @logto/js to set up the configuration with specific user scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/angular/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope, buildAngularAuthConfig } from '@logto/js';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(withFetch()),\n    provideAuth({\n      config: buildAngularAuthConfig({\n        // ...andere Konfigurationen\n        scopes: [\n          UserScope.Email,\n          UserScope.Phone,\n          UserScope.CustomData,\n          UserScope.Identities,\n          UserScope.Organizations,\n        ],\n      }),\n    }),\n    // ...andere Provider\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in JavaScript\nDESCRIPTION: Exports a constant variable named 'connector' with the string value 'Slack'. This variable is used programmatically within the MDX file or imported components to specify the social connector being configured, ensuring consistency across different parts of the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-slack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Slack';\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoProvider in React Native\nDESCRIPTION: Sets up the Logto authentication provider with configuration options including app ID, endpoint, and user scopes. Demonstrates how to wrap the application content with LogtoProvider for authentication context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/get-user-information/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig, UserScope } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: [\n    // highlight-start\n    UserScope.Email,\n    UserScope.Phone,\n    UserScope.CustomData,\n    UserScope.Identities,\n    UserScope.Organizations,\n    // highlight-end\n  ],\n};\n\nconst App = () => <LogtoProvider config={config}>{/* Your app content */}</LogtoProvider>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next-Auth with Logto Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up Next-Auth with Logto as an authentication provider. It includes configuration for the authorization scope and resource. The highlighted line shows the addition of a specific resource URL for the application's API.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          scope: 'openid offline_access profile email',\n          // highlight-next-line\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler in SvelteKit\nDESCRIPTION: This code configures the SvelteKit server handle function with Logto authentication, specifying custom scopes for shopping and store operations and defining API resources that the application needs to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in TypeScript\nDESCRIPTION: Creates a new LogtoClient instance with specified API access scopes and resource endpoints. The configuration includes read and write permissions for both shopping and store services, with corresponding API endpoints defined as resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Observing User Information in Android Activity\nDESCRIPTION: This code snippet demonstrates how to observe and display user information in an Android Activity. It uses a TextView to show the user info response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        //...autres codes\n\n        // Supposons que vous ayez une vue de texte avec l'identifiant `user_info_text_view` dans votre mise en page\n        val userInfoResponseTextView: TextView = findViewById(R.id.user_info_text_view)\n        logtoViewModel.userInfoResponse.observe(this) { userInfoResponse ->\n            userInfoResponseTextView.text = if (userInfoResponse !== null) {\n                val json = Gson().toJson(userInfoResponse, UserInfoResponse::class.java)\n                JSONObject(json).toString(2)\n            } else {\n                \"\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Fetch Components in React/JSX\nDESCRIPTION: This code imports necessary MDX fragments for fetching access tokens and renders the FetchAccessTokenForApiResources component with specific props. The component displays documentation about getting access tokens for API resources along with code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in React\nDESCRIPTION: This code snippet imports necessary components and code fragments, then renders the ConfigApiResources component with the imported code snippets as props. It's used to display documentation about configuring API resources in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-mvc/api-resources/_configure-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Actions in SvelteKit Server\nDESCRIPTION: This code defines server-side actions for handling sign-in and sign-out functionality in SvelteKit. It exports an Actions object with signIn and signOut methods that leverage the Logto client available in the locals object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actions } from './$types';\n\nexport const actions: Actions = {\n  signIn: async ({ locals }) => {\n    await locals.logtoClient.signIn('http://localhost:3000/callback');\n  },\n  signOut: async ({ locals }) => {\n    await locals.logtoClient.signOut('http://localhost:3000/');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in JavaScript\nDESCRIPTION: This code demonstrates how to create a new LogtoClient instance with custom scopes and resources. The example shows defining read and write scopes and specifying multiple API resources that the client will be authorized to access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/code/_config-resources-with-shared-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with Custom Scopes\nDESCRIPTION: Demonstrates how to create a new Logto client instance with custom authorization scopes and API resource endpoints. The configuration includes read/write permissions for shopping and store resources, along with their corresponding API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_config-resources-with-scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments and Code Components - React - JavaScript\nDESCRIPTION: This snippet imports a React fragment (ScopesAndClaims) and a markdown code module (ScopesAndClaimsCode), then combines them by rendering the ScopesAndClaims component and passing the imported code as a prop. Dependencies include React, a markdown loader, and local fragment files. The main parameter, configScopesCode, is used to inject code samples, allowing for flexible documentation assembly. Input consists of code or fragment files; output is a rendered documentation section showing both explanatory text and code. The code assumes a React and webpack/Next.js-like environment with support for MDX/MD import resolution.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Adding Logto Hook to SvelteKit Server\nDESCRIPTION: This snippet shows how to add the Logto hook to a SvelteKit server by importing the handleLogto function and configuring it with your Logto endpoint, app ID, and app secret. It includes both hardcoded and environment variable approaches.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-logto-app-id>',\n    appSecret: '<your-logto-app-secret>',\n  },\n  {\n    encryptionKey: '<a-random-string>',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in React Native with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a LogtoConfig object for use with the Logto authentication library in a React Native application. It includes setting the application ID, Logto endpoint, scopes, and resource endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['read', 'write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding AuthorizeView Component for Authentication UI\nDESCRIPTION: Implements the AuthorizeView component in a Razor page to display different UI based on the user's authentication state. It includes buttons for sign-in and sign-out actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: cshtml\nCODE:\n```\n@using Microsoft.AspNetCore.Components.Authorization\n@page \"/\"\n\n<AuthorizeView>\n    <Authorized>\n        @* サインイン済みビュー *@\n        <button @onclick=\"OnLogoutButtonClickAsync\">\n            サインアウト\n        </button>\n    </Authorized>\n    <NotAuthorized>\n        @* 未認証ビュー *@\n        <button @onclick=\"OnLoginButtonClickAsync\">\n            サインイン\n        </button>\n    </NotAuthorized>\n</AuthorizeView>\n```\n\n----------------------------------------\n\nTITLE: Adding the Logto Hook to SvelteKit Server\nDESCRIPTION: This snippet shows how to add the basic Logto hook configuration to a SvelteKit server. It initializes the Logto client with your endpoint, app ID, app secret, and an encryption key for cookie security.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    endpoint: '<your-logto-endpoint>',\n    appId: '<your-logto-app-id>',\n    appSecret: '<your-logto-app-secret>',\n  },\n  {\n    encryptionKey: '<a-random-string>',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring and Fetching Organization Token for User in Logto\nDESCRIPTION: This code snippet imports necessary components and code fragments to set up and execute the process of fetching an organization token for a user in Logto. It uses a custom component 'FetchOrganizationTokenForUser' to handle the configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: Sets up NextAuth authentication with Logto provider, defining specific OAuth scopes and resource endpoints. The configuration includes openid, offline_access, profile, email, and custom shopping scopes along with a resource API endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile email shopping:read shopping:write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Assembling Organization Token Component with Fragment Imports in JSX\nDESCRIPTION: This snippet demonstrates how to import and assemble documentation fragments for organization token functionality. It shows the component structure for fetching organization tokens for users with proper configuration and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organisations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Access Token to HttpClient in C# with Blazor\nDESCRIPTION: This code demonstrates how to use the access token with HttpClient in a Blazor application. It configures an HttpClient with a base address and adds the access token to the request headers using the AddAccessToken extension method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blorc.OpenIdConnect;\n\nbuilder.Services\n    .AddHttpClient(\"MyApiResource\", client =>\n    {\n        client.BaseAddress = new Uri(\"https://my-api-resource\");\n    })\n    .AddAccessToken(); // 요청 헤더에 액세스 토큰을 추가하세요\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Custom Scopes and Resources in Go\nDESCRIPTION: This code snippet illustrates how to set up a Logto client configuration with custom scopes and resources. It defines specific read and write permissions for shopping and store functionalities, as well as API endpoints for these services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-start\n    Scopes:    []string{\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"},\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Logto Organization Token Component in JSX\nDESCRIPTION: This code imports multiple fragments and components related to organization tokens, then renders the FetchOrganizationTokenForUser component with specific props including organization scope and code snippets.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organisations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing API Resource Configuration Components\nDESCRIPTION: MDX setup that imports code fragments from different files and composes them into a ConfigApiResources component with various code snippets as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration in React Native (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a Logto configuration object for a React Native application. It includes setting the application ID, Logto endpoint, custom scopes, and API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  // highlight-end\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue package with yarn\nDESCRIPTION: Command to install the Logto Vue SDK using yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Fragments for Access Token Documentation in React\nDESCRIPTION: The code imports MDX fragments and assembles them to create documentation for fetching access tokens for API resources in Logto. It uses a reusable component with custom parameters to display the API reference and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Logto Authentication Functions in Express\nDESCRIPTION: Creating functions for generating sign-in URLs, handling sign-in callbacks, and refreshing tokens using the @logto/js SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  withReservedScopes,\n  fetchOidcConfig,\n  discoveryPath,\n  generateSignInUri,\n  verifyAndParseCodeFromCallbackUri,\n  fetchTokenByAuthorizationCode,\n  fetchTokenByRefreshToken,\n} = require('@logto/js');\nconst fetch = require('node-fetch');\nconst { randomFillSync, createHash } = require('crypto');\nconst { fromUint8Array } = require('js-base64');\n\nconst config = {\n  endpoint: 'https://logto.dev',\n  appId: 'foo',\n  appSecret: '<your-app-secret-copied-from-console>',\n  redirectUri: 'http://localhost:3000/callback',\n  scopes: withReservedScopes().split(' '),\n};\n\nconst requester = (input, init) => {\n  const { appId, appSecret } = config;\n\n  return fetch(input, {\n    ...init,\n    headers: {\n      ...init?.headers,\n      authorization: `Basic ${Buffer.from(`${appId}:${appSecret}`, 'utf8').toString('base64')}`,\n    },\n  });\n};\n\nconst generateRandomString = (length = 64) => {\n  return fromUint8Array(randomFillSync(new Uint8Array(length)), true);\n};\n\nconst generateCodeChallenge = async (codeVerifier) => {\n  const encodedCodeVerifier = new TextEncoder().encode(codeVerifier);\n  const hash = createHash('sha256');\n  hash.update(encodedCodeVerifier);\n  const codeChallenge = hash.digest();\n  return fromUint8Array(codeChallenge, true);\n};\n\nconst getOidcConfig = async () => {\n  return fetchOidcConfig(new URL(discoveryPath, config.endpoint).toString(), requester);\n};\n\nexports.getSignInUrl = async () => {\n  const { authorizationEndpoint } = await getOidcConfig();\n  const codeVerifier = generateRandomString();\n  const codeChallenge = await generateCodeChallenge(codeVerifier);\n  const state = generateRandomString();\n\n  const { redirectUri, scopes, appId: clientId } = config;\n\n  const signInUri = generateSignInUri({\n    authorizationEndpoint,\n    clientId,\n    redirectUri: redirectUri,\n    codeChallenge,\n    state,\n    scopes,\n  });\n\n  return { redirectUri, codeVerifier, state, signInUri };\n};\n\nexports.handleSignIn = async (signInSession, callbackUri) => {\n  const { redirectUri, state, codeVerifier } = signInSession;\n  const code = verifyAndParseCodeFromCallbackUri(callbackUri, redirectUri, state);\n\n  const { appId: clientId } = config;\n  const { tokenEndpoint } = await getOidcConfig();\n  const codeTokenResponse = await fetchTokenByAuthorizationCode(\n    {\n      clientId,\n      tokenEndpoint,\n      redirectUri,\n      codeVerifier,\n      code,\n    },\n    requester\n  );\n\n  return codeTokenResponse;\n};\n\nexports.refreshTokens = async (refreshToken) => {\n  const { appId: clientId, scopes } = config;\n  const { tokenEndpoint } = await getOidcConfig();\n  const tokenResponse = await fetchTokenByRefreshToken(\n    {\n      clientId,\n      tokenEndpoint,\n      refreshToken,\n      scopes,\n    },\n    requester\n  );\n\n  return tokenResponse;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Access Token Documentation Component\nDESCRIPTION: JSX/MDX code that imports required components and renders a documentation fragment for fetching access tokens. Uses props to customize the API name and code examples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ConfigApiResources Component in JSX\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders the ConfigApiResources component with the imported code as props. It's used to display API resource configuration examples in the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import and Configuration\nDESCRIPTION: Imports required MDX components and fragments for building the documentation page. Includes configuration for connector type and page structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-saml/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing ScopesAndClaimsCode Component in MDX\nDESCRIPTION: Imports the `ScopesAndClaimsCode` React component from an MDX fragment file within the same directory. This component presumably contains code examples related to scopes and claims configuration, intended to be injected into other components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Requesting Re-consent for New Permissions in TypeScript\nDESCRIPTION: Code example for requesting user re-consent to receive new permission changes in TypeScript. This is required for each client application to reflect new permission scopes in the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/authorization/role-based-access-control/protect-api-resources-with-rbac.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nsignIn({ redirectUri: 'your-redirect-url', prompt: 'consent' });\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token\nDESCRIPTION: This code demonstrates how to access additional claims from the ID token after requesting extra scopes. It uses the getIdTokenClaims method of LogtoClient.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getIdTokenClaims { logtoException, idTokenClaims ->\n    println(\"IdTokenClaims:$idTokenClaims\")\n}\n// Vous pouvez maintenant accéder aux revendications supplémentaires `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with API Resources in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Logto Express configuration object, particularly focusing on adding API resources. It imports the UserScope from @logto/express and defines a config object with a resources array containing API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API 리소스를 추가하세요\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Current User in CustomAuthManager for Flutter\nDESCRIPTION: This method updates the current user's authentication state. It creates a FlutterFlowAuthAuthUser object with the provided login status, user ID, and ID token, then updates the authentication stream.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/code-snippets/_flutter-flow-auth-manager-init.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFlutterFlowAuthAuthUser? _updateCurrentUser(\n    {bool loggedIn = false, String? uid, OpenIdClaims? idToken}) {\n  // Update the current user stream.\n  final updatedUser = FlutterFlowAuthAuthUser(\n    loggedIn: loggedIn,\n    uid: uid,\n    idToken: idToken,\n  );\n\n  flutterFlowAuthAuthUserSubject.add(updatedUser);\n\n  return updatedUser;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication State Display in Next.js Page\nDESCRIPTION: This snippet shows how to display the authentication state in a Next.js page component. It uses the 'auth' function from Auth.js to check the session status and conditionally renders either the sign-in or sign-out button.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport SignIn from './components/sign-in';\nimport SignOut from './components/sign-out';\nimport { auth } from '@/auth';\n\nexport default function Home() {\n  const session = await auth();\n\n  return <div>{session?.user ? <SignOut /> : <SignIn />}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Handler with Organization Scopes in SvelteKit\nDESCRIPTION: This snippet shows how to set up the Logto authentication handler in a SvelteKit application with organization scope support. It imports the necessary handlers and scopes from '@logto/sveltekit' and configures the handle function with the Organizations user scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto, UserScope } from '@logto/sveltekit';\n\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    scopes: [UserScope.Organizations],\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes for Capacitor in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Logto configuration for Capacitor, specifically focusing on defining user scopes. It imports necessary types from '@logto/capacitor' and creates a config object with email and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  // ...other options\n  scopes: [UserScope.Email, UserScope.Phone], // 필요한 스코프를 추가하세요\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Actions in Rails Controller\nDESCRIPTION: Adds sign_in and sign_out methods to a Rails controller that utilize the Logto client to initiate authentication and logout processes. Both methods specify appropriate redirect URIs for after the actions complete.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def sign_in\n    @client.sign_in(redirect_uri: request.base_url + \"/callback\")\n  end\n\n  def sign_out\n    @client.sign_out(post_logout_redirect_uri: request.base_url)\n  end\n  # highlight-end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Ruby\nDESCRIPTION: This snippet shows how to create a new LogtoClient instance with custom scopes and resources configurations. The example demonstrates providing array values for both the scopes and resources parameters within the LogtoClient::Config object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...other configurations\n    # highlight-start\n    scopes: [\"read\", \"write\"],\n    resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"]\n    # highlight-end\n  ),\n  # ...other configurations\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in MDX/JavaScript\nDESCRIPTION: This snippet defines and exports a JavaScript constant named `connector` holding the string 'OIDC enterprise SSO'. This constant is likely used to pass the connector name consistently to imported MDX components within the tutorial guide, ensuring maintainability.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Fetching OAuth 2.0 Token Using Authorization Code\nDESCRIPTION: Function to retrieve tokens by making a POST request to the token endpoint using an authorization code. Requires parameters such as the code, code verifier (for PKCE), client ID, and redirect URI. Returns a CodeTokenResponse object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/sdk-conventions/core-sdk-conventions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfetchTokenByAuthorizationCode({tokenEndpoint, code, codeVerifier, clientId, redirectUri, resource})\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Browser JavaScript\nDESCRIPTION: Creates a new LogtoClient instance with application ID, endpoint configuration, and user scopes. The scopes specified include email, phone, custom data, and identities access permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_scopes-and-claims-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from '${props.package || '@logto/browser'}';\n\nconst logtoClient = new LogtoClient({\nappId: '<your-application-id>',\nendpoint: '<your-logto-endpoint>',\nscopes: [UserScope.Email, UserScope.Phone, UserScope.CustomData, UserScope.Identities],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthorizeView Component in Blazor WASM Razor Page\nDESCRIPTION: Adds an AuthorizeView component to a Razor page to conditionally display content based on authentication state. It includes login and logout buttons with corresponding event handlers.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: cshtml\nCODE:\n```\n@using Microsoft.AspNetCore.Components.Authorization\n@page \"/\"\n\n<AuthorizeView>\n    <Authorized>\n        @* 로그인된 뷰 *@\n        <button @onclick=\"OnLogoutButtonClickAsync\">\n            로그아웃\n        </button>\n    </Authorized>\n    <NotAuthorized>\n        @* 인증되지 않은 뷰 *@\n        <button @onclick=\"OnLoginButtonClickAsync\">\n            로그인\n        </button>\n    </NotAuthorized>\n</AuthorizeView>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient in Android ViewModel\nDESCRIPTION: Demonstrates how to initialize LogtoClient in an Android ViewModel class. It sets up LiveData for ID token claims and provides a method to fetch the claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LogtoViewModel(application: Application) : AndroidViewModel(application) {\n    // ...other code\n\n    // Add LiveData to observe ID token claims\n    private val _idTokenClaims = MutableLiveData<IdTokenClaims>()\n    val idTokenClaims: LiveData<IdTokenClaims>\n        get() = _idTokenClaims\n\n    fun getIdTokenClaims() {\n        logtoClient.getIdTokenClaims { logtoException, idTokenClaims ->\n            logtoException?.let { _logtoException.postValue(it) } ?: _idTokenClaims.postValue(idTokenClaims)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Application Creation Section using CreateApplication Component (MDX)\nDESCRIPTION: Uses the 'CreateApplication' MDX component to display instructions for creating a new application in Logto. Props specify the application type ('Native app') and the target framework ('iOS (Swift)').\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-sendgrid.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<CreateApplication type=\"Native app\" framework=\"iOS (Swift)\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Components in JSX\nDESCRIPTION: This snippet imports necessary components and renders them to create a guide for fetching access tokens. It uses a custom component 'FetchAccessTokenForApiResources' with specific props to customize the content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Access Token Retrieval in Next.js\nDESCRIPTION: A Next.js page component that implements a server action to retrieve an access token from Logto. The server action is defined inline and passed to a client component to be triggered.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAccessToken } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\nimport GetAccessToken from './get-access-token';\n\nexport default async function Home() {\n  return (\n    <main>\n      <GetAccessToken\n        onGetAccessToken={async () => {\n          'use server';\n\n          return getAccessToken(logtoConfig, 'https://shopping.your-app.com/api');\n        }}\n      />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Express with Multiple API Resources in TypeScript\nDESCRIPTION: This snippet shows how to set up Logto Express configuration with multiple API resources. The 'resources' property is highlighted and contains an array of API endpoint URLs that will be authorized through Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API リソースを追加\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Applications with Node.js\nDESCRIPTION: This snippet shows how to use Node.js to make an authenticated GET request to the Logto Management API for retrieving all applications. It requires the Logto endpoint and a valid access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/generic/machine-to-machine/fragments/_access-logto-management-api-using-access-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst logtoEndpoint = 'https://your.logto.endpoint'; // Reemplaza con tu endpoint de Logto\nconst accessToken = 'eyJhb...2g'; // Token de acceso\n\nconst fetchLogtoApplications = async () => {\n  return await fetch(`${logtoEndpoint}/api/applications`, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client\nDESCRIPTION: This snippet demonstrates how to configure the Logto client to request additional scopes such as email and phone when initializing the client. This enables access to more user information beyond the default claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// highlight-next-line\nimport LogtoClient, { UserScope } from '@logto/browser';\n\nconst logtoClient = new LogtoClient({\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  // highlight-next-line\n  scopes: [UserScope.Email, UserScope.Phone],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Components in React JSX\nDESCRIPTION: Imports the necessary MDX documentation fragments and code examples to be used in the ConfigApiResources component. These imports include the main component and three code snippet files for different API resource configuration scenarios.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in LogtoConfig for React Authentication\nDESCRIPTION: This code shows how to set up the LogtoConfig object with multiple API resources for authentication in a React application. It imports the LogtoConfig type from the @logto/react package and configures the resources array with two API endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API リソースを追加\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Central Repository in Gradle (Kotlin)\nDESCRIPTION: This Kotlin code snippet shows how to add the `mavenCentral()` repository to the list of repositories in a Gradle build file (`build.gradle.kts`). This is a prerequisite for fetching the WeChat Open SDK dependency, as it is hosted on Maven Central.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  // ...\n  mavenCentral()\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Logto Organization Components in JSX\nDESCRIPTION: This snippet imports necessary components and fragments for handling organization-related operations in a Logto application. It then uses these components to set up organization token fetching for users.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FetchOrganizationTokenForUser Component in React\nDESCRIPTION: This snippet demonstrates how to import the FetchOrganizationTokenForUser component and other code fragments, then use them to render the component with specific props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Logto Configuration Object for Capacitor in TypeScript\nDESCRIPTION: Creates a LogtoConfig object for Capacitor integration with Logto authentication. The configuration includes the application ID, Logto endpoint URL, authorization scopes, and protected API resource URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Logto client to retrieve an access token for a specific API endpoint. It includes error handling for potential exceptions and prints both the exception (if any) and the access token (if retrieved successfully).\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getAccessToken(\"https://shopping.your-app.com/api\") { logtoException, accessToken ->\n    logtoException?.let { println(it) }\n    accessToken?.let { println(it) }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Resource Documentation Components\nDESCRIPTION: Imports documentation fragments and code examples for API resources configuration, then renders them using the ConfigApiResources component with the appropriate props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/swift/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button in Next.js with Auth.js\nDESCRIPTION: This code snippet shows how to implement a sign-in button component using Auth.js in a Next.js application. It uses the signIn function from Auth.js to initiate the sign-in process with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from '@/auth';\n\nexport default function SignIn() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signIn('logto');\n      }}\n    >\n      <button type=\"submit\">Se connecter</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto SDK with Custom Scopes in Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize a LogtoConfig object with custom scopes. The configuration includes email and phone scopes, which can be specified either as strings or using UserScope enum values.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // 또는 `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources\nDESCRIPTION: Demonstrates how to initialize a LogtoClient instance with specific access scopes ('read', 'write') and multiple API resource endpoints. The configuration allows the client to request appropriate permissions and access multiple backend services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token in Next.js Server Component\nDESCRIPTION: This snippet demonstrates how to fetch an access token for an API resource in a Next.js server component using the getAccessTokenRSC function from @logto/next/server-actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAccessTokenRSC } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\n\nexport default async function Home() {\n  const accessToken = await getAccessTokenRSC(logtoConfig, 'https://shopping.your-app.com/api');\n\n  return (\n    <main>\n      <p>Token de acesso: {accessToken}</p>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Security Dependencies in Maven\nDESCRIPTION: This XML snippet demonstrates how to add Spring Security and OAuth2 client dependencies to a Maven POM file for a Spring Boot application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-oauth2-client</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Vue Template for Conditional Sign-In/Sign-Out Button\nDESCRIPTION: This HTML template shows how to conditionally render a sign-in or sign-out button based on the authentication state. It uses v-if directive and click event handlers to toggle between the two states.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_implement-sign-in-and-sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <button v-if=\"!isAuthenticated\" @click=\"onClickSignIn\">登录</button>\n  <button v-else @click=\"onClickSignOut\">登出</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Inicializando cliente Logto con nuevos alcances de permisos\nDESCRIPTION: Código de ejemplo que muestra cómo inicializar un cliente Logto incluyendo nuevos alcances de permisos introducidos al sistema. Esto es necesario cuando se añaden nuevos permisos que deben ser asignados a un usuario.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/role-based-access-control/protect-api-resources-with-rbac.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nnew LogtoClient({\n  appId: 'your-app-id',\n  endpoint: 'your-logto-endpoint',\n  resources: ['your-api-resource'],\n  scopes: [\n    // ... tus alcances de permisos existentes,\n    'new-scope',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In and Sign-Out Actions in SvelteKit\nDESCRIPTION: This snippet defines server actions for handling sign-in and sign-out functionality in a SvelteKit application. It creates actions that use the Logto client to initiate authentication flows with appropriate redirect URLs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Actions } from './$types';\n\nexport const actions: Actions = {\n  signIn: async ({ locals }) => {\n    await locals.logtoClient.signIn('http://localhost:3000/callback');\n  },\n  signOut: async ({ locals }) => {\n    await locals.logtoClient.signOut('http://localhost:3000/');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up custom scopes and resources in the Logto configuration object. It includes read and write permissions for shopping and store functionalities, as well as API endpoints for both services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['shopping:read', 'shopping:write', 'store:read', 'store:write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Organization Scopes in Dart\nDESCRIPTION: Demonstrates how to create a LogtoConfig instance with the required endpoint, appId and organization scopes. The configuration includes the necessary parameters for Logto authentication and specifically enables organization-related permissions through scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_organization-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [LogtoUserScopes.organizations.value]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Session Middleware\nDESCRIPTION: Configures the express-session middleware, which is required by the Logto SDK. It sets up cookie parsing and session management with a secret key and maximum age for the session cookie.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\n\napp.use(cookieParser());\napp.use(\n  session({\n    secret: 'random_session_key', // Remplacez par votre propre secret\n    cookie: { maxAge: 14 * 24 * 60 * 60 * 1000 }, // En millisecondes\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Sample OIDC Configuration Response from Logto\nDESCRIPTION: An example JSON response from Logto's OIDC configuration endpoint, showing the jwks_uri for obtaining public keys and the issuer field that identifies the token issuer. These values are essential for token validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwks_uri\": \"https://tenant-id.logto.app/oidc/jwks\",\n  \"issuer\": \"https://tenant-id.logto.app/oidc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig with Custom Scopes and Resources in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize a LogtoConfig object with custom scopes and resources. The configuration includes read and write scopes and specifies two API resources that the application will need access to.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(\"read\", \"write\"),\n    resources = listOf(\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with API Resources in SvelteKit\nDESCRIPTION: This snippet shows how to set up the Logto authentication handler in a SvelteKit server hooks file. It specifically demonstrates how to configure multiple API resources in the Logto handler, which would be used for API authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handle = handleLogto(\n  {\n    // ...other configs\n    resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Ajouter des ressources API\n  }\n  // ...other configs\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This code snippet imports two components: a general 'ScopesAndClaims' component and a specific 'ScopesAndClaimsCode' component. It then renders the 'ScopesAndClaims' component, passing the 'ScopesAndClaimsCode' component as a prop named 'configScopesCode'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component for Account APIs in JSX\nDESCRIPTION: This code snippet renders a DocCardList component with a single item for the Account APIs documentation. It includes a custom icon and provides a link to the detailed guide for using Account APIs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/account-settings/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Use Logto Account APIs',\n      href: '/end-user-flows/account-settings/by-account-api',\n      description:\n        'Learn more about how to use the user Account APIs to build your own account settings page.',\n      customProps: {\n        icon: <GearIcon />,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Name Constant in MDX/JavaScript\nDESCRIPTION: Exports a JavaScript constant named 'connector' which holds the string 'Microsoft Entra ID SAML enterprise SSO'. This constant is likely utilized within the MDX document or its imported components (like `<Intro>`, `<SaveYourConfiguration>`, `<TestingAndValidation>`) to dynamically reference the specific SSO connector being documented or configured, ensuring consistency.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client in Express.js (TypeScript)\nDESCRIPTION: This snippet shows how to set up the configuration object for the Logto client in an Express.js application. It includes essential parameters such as appId, appSecret, endpoint, and baseUrl.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-application-secret>',\n  endpoint: '<your-logto-endpoint>', // z.B. http://localhost:3001\n  baseUrl: '<your-express-app-base-url>', // z.B. http://localhost:3000\n};\n```\n\n----------------------------------------\n\nTITLE: Syncing Translation Keys for Specific Language\nDESCRIPTION: Command to synchronize translation keys from the source language (en) to a target language (pt-BR) in the phrases package. This ensures consistent key structure across language files.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/translation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm cli translate sync-keys --target pt-BR\n```\n\n----------------------------------------\n\nTITLE: Invoking FetchOrganizationTokenForUser Component in MDX\nDESCRIPTION: This MDX snippet demonstrates the usage of the `FetchOrganizationTokenForUser` component. It passes the imported `ConfigOrganizationCode` and `GetOrganizationAccessTokenCode` components as props (`configOrganizationCode`, `getOrganizationAccessTokenCode`), presumably to display specific code examples within the structure provided by `FetchOrganizationTokenForUser`. The `organizationScope` prop is set, likely indicating the required scope for this operation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components and Rendering Documentation Sections\nDESCRIPTION: Imports and renders three MDX components (GuideTip, Installation, Integration) to create a structured documentation page with navigation anchors.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GuideTip from './_guide-tip.mdx';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Intégration \\{#integration}\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto React with Organization Scope\nDESCRIPTION: Shows how to configure Logto authentication by importing necessary types and setting up the config object with organization scope. This configuration enables organization-related features in the Logto authentication system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoConfig, UserScope } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  scopes: [UserScope.Organizations],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Documentation Components\nDESCRIPTION: Imports MDX fragments and code components, then composes them into a documentation section about fetching access tokens for API resources.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in JavaScript (MDX Context)\nDESCRIPTION: This code block demonstrates the use of JavaScript import statements to modularize MDX-based documentation. Each import brings in a different documentation fragment, making the overall tutorial easier to manage and update. There are no prerequisites other than a React/MDX-compatible environment (such as Docusaurus). No parameters, inputs, or outputs are involved; rather, imports expose React components for use in the page structure.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/expo/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/okta/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: SMS Template Placeholder Variable Usage\nDESCRIPTION: Template variable {{code}} is used as a placeholder that gets replaced with an actual verification code. The code remains valid for 10 minutes and cannot be customized.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/sms-connectors/sms-templates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{code}}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Organization Token Components in JSX\nDESCRIPTION: Imports the necessary components for organization token handling and passes configuration code blocks as props to the FetchOrganizationTokenForUser component. Sets the organization scope to 'UserScope.Organisations'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organisations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto API Resources in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `logtoConfig` object, specifically highlighting the `resources` array. This array lists the unique identifiers (typically URLs) of the API resources the application intends to interact with. Logto uses this list to request appropriately scoped access tokens during the authentication process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"app/logto.ts\"\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Add API resources\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Blazor AuthorizeView\nDESCRIPTION: This snippet demonstrates how to display user information within an AuthorizeView component in a Blazor WebAssembly application. It shows how to access the user's name from the User.Profile object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_fetch-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n<AuthorizeView>\n    <Authorized>\n        @* 로그인된 뷰 *@\n        @* ... *@\n        <p>당신은 @(@User?.Profile?.Name ?? \"(알 수 없는 이름)\")으로 로그인되었습니다.</p>\n    </Authorized>\n    @* ... *@\n</AuthorizeView>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Settings in Blazor WASM appsettings.json\nDESCRIPTION: Configures the Logto authentication settings in the appsettings.json file, including the authority endpoint, client ID, redirect URIs, response type, and required scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n  // ...\n  IdentityServer: {\n    Authority: 'https://<your-logto-endpoint>/oidc',\n    ClientId: '<your-logto-app-id>',\n    PostLogoutRedirectUri: '${defaultBaseUrl}',\n    RedirectUri: '${defaultRedirectUri}',\n    ResponseType: 'code',\n    Scope: 'openid profile', // 필요에 따라 더 많은 스코프를 추가하세요\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Go Logto SDK\nDESCRIPTION: This snippet illustrates how to access additional claims after configuring extra scopes. It shows the usage of the GetIdTokenClaims method to retrieve the claims, including the newly requested ones like email and phone.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/go/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nidTokenClaims, error := client.GetIdTokenClaims()\n// Ahora puedes acceder a los reclamos adicionales `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig in Dart\nDESCRIPTION: Creates a LogtoConfig instance with essential authentication parameters including endpoint URL, application ID, resource URLs, and shared scopes. The configuration is used to initialize Logto authentication in a Dart application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_resource-with-shared-scopes-config-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  resources: [\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n  // Escopos compartilhados por todos os recursos\n  // highlight-start\n  scopes: [\"read\", \"write\"]\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring API Resources in Logto TypeScript Configuration\nDESCRIPTION: This snippet shows how to configure multiple API resources in a Logto configuration object. It demonstrates adding two API endpoints to the resources array, which allows the application to access these APIs with proper authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Adicionar recursos de API\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication with Required Scopes in TypeScript\nDESCRIPTION: This snippet shows how to import and create a LogtoConfig object for Capacitor projects. It demonstrates setting up user scopes to request email and phone permissions during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type LogtoConfig, UserScope } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  // ...autres options\n  scopes: [UserScope.Email, UserScope.Phone], // Ajoutez les Portées (scopes) dont vous avez besoin\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching External Data in Custom JWT Claims Script\nDESCRIPTION: Example of using the fetch function to retrieve data from an external API within the getCustomJwtClaims function. It demonstrates how to use environment variables for authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/developers/custom-token-claims/create-script.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst getCustomJwtClaims = async ({ environmentVariables }) => {\n  const response = await fetch('https://api.example.com/data', {\n    headers: {\n      Authorization: `Bearer ${environmentVariables.API_KEY}`,\n    },\n  });\n\n  const data = await response.json();\n\n  return {\n    data,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Nuxt.js for Logto\nDESCRIPTION: This snippet demonstrates how to configure additional scopes for Logto in the Nuxt.js configuration file. It uses the UserScope enum to specify email and phone scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope } from '@logto/nuxt';\n\nexport default defineNuxtConfig({\n  logto: {\n    // highlight-next-line\n    scopes: [UserScope.Email, UserScope.Phone], // 필요에 따라 더 많은 스코프 추가\n    // ...other configs\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable in JSX\nDESCRIPTION: This code snippet sets a constant variable 'connector' with the value 'SAML enterprise SSO'. This variable is likely used throughout the document to refer to the specific SSO connector being implemented.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Fetching External Data in Custom JWT Claims Script\nDESCRIPTION: Example of using the fetch function to retrieve data from an external API within the getCustomJwtClaims function. This demonstrates how to incorporate external data into custom token claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/developers/custom-token-claims/create-script.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst getCustomJwtClaims = async ({ environmentVariables }) => {\n  const response = await fetch('https://api.example.com/data', {\n    headers: {\n      Authorization: `Bearer ${environmentVariables.API_KEY}`,\n    },\n  });\n\n  const data = await response.json();\n\n  return {\n    data,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This snippet imports two components related to scopes and claims, then renders the main component with the code component passed as a prop. It demonstrates how to compose React components for documentation purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for Microsoft Entra ID OIDC SSO\nDESCRIPTION: This code snippet defines a constant variable 'connector' with the value 'Microsoft Entra ID OIDC enterprise SSO'. This variable is used throughout the document to refer to the specific SSO connector being implemented.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring MDX Components\nDESCRIPTION: Imports MDX components and code fragments, then composes them into a ConfigApiResources component with specified props for different resource configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources in Logto for Vue\nDESCRIPTION: This code demonstrates how to initialize Logto in a Vue application with multiple API resources. The resources property is configured with an array of API endpoints that the client will request access to during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogto } from '@logto/vue';\n\napp.use(createLogto, {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n});\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Request Example in HTTP\nDESCRIPTION: An example of a POST request to exchange a Personal Access Token for an access token. It includes the required parameters in the request body using application/x-www-form-urlencoded format.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/personal-access-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /oidc/token HTTP/1.1\nHost: tenant.logto.app\nContent-Type: application/x-www-form-urlencoded\nAuthorization: Basic <base64(client-id:client-secret)>\n\ngrant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange\n&scope=profile\n&subject_token=pat_W51arOqe7nynW75nWhvYogyc\n&subject_token_type=urn%3Alogto%3Atoken-type%3Apersonal_access_token\n```\n\n----------------------------------------\n\nTITLE: Running OIDC configuration migration using Logto CLI\nDESCRIPTION: This code snippet demonstrates how to use the Logto CLI to migrate OIDC configurations from environment variables to the database. It includes options for using default or custom .env file paths.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/using-cli/migrate-from-env.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogto db seed oidc\n# O\nlogto db seed oidc --env /your/path/to/.env\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Fetching Component in React/MDX\nDESCRIPTION: This code imports fragment components for fetching access tokens and renders the FetchAccessTokenForApiResources component with specific props to customize the API name and code example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Resources Configuration in JSX\nDESCRIPTION: This snippet demonstrates how to render the API resources configuration component with various code examples. It uses props to pass package information to the child components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode package={props.package} />}\n  configResourcesWithSharedScopesCode={\n    <ConfigResourcesWithSharedScopesCode package={props.package} />\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider\nDESCRIPTION: Initializes NextAuth.js with a Logto provider configuration. Sets up authentication handlers and includes specific OAuth scopes for openid, offline access, and organization-related permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access urn:logto:scope:organizations',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto with Custom Scopes in Kotlin\nDESCRIPTION: This snippet shows how to create a LogtoConfig object with custom scopes. It specifically adds the Organizations scope to the list of scopes, which is likely used for organizational-level permissions or access control.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(UserScope.Organizations),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Fetching Components in JSX\nDESCRIPTION: This snippet imports and uses components to display information about fetching access tokens for API resources in Logto. It includes a reusable component and a code snippet for getting an access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Handler in SvelteKit\nDESCRIPTION: This snippet demonstrates how to set up the Logto authentication handler in a SvelteKit application by importing necessary components and configuring user scopes for email and phone access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserScope, handleLogto } from '@logto/sveltekit';\n\nexport const handle = handleLogto({\n  // ...other options\n  scopes: [UserScope.email, UserScope.phone], // 必要に応じてスコープを追加\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token\nDESCRIPTION: This snippet demonstrates how to access additional claims like email and phone that were requested through scopes. It retrieves the claims from the ID token using the getIdTokenClaims method.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Ahora puedes acceder a los reclamos adicionales `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token Using Logto Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to request an access token from the Logto authentication service for a specific API resource. It uses the logtoClient instance to get an access token for 'https://store.your-app.com/api' and then logs the token to the console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst accessToken = await logtoClient.getAccessToken('https://store.your-app.com/api');\nconsole.log('Jeton d'accès', accessToken);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to retrieve an access token for a specific API endpoint. The getAccessToken method is called with the target API URL as an argument, returning a Promise that resolves to the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst token = await logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with Logto Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Logto client to obtain an access token for a specific API endpoint. It utilizes an asynchronous function to retrieve the token, which can then be used for authenticated API requests.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await locals.logtoClient.getAccessToken('https://shopping.your-app.com/api');\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering GetAccessTokenCode Component in JSX\nDESCRIPTION: This snippet imports a React component named 'GetAccessTokenCode' from a relative path and renders it in the document. The component likely contains code examples for obtaining access tokens in the Logto authentication system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<GetAccessTokenCode />\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication Middleware to Express Route in TypeScript\nDESCRIPTION: This code snippet demonstrates how to apply the authentication middleware to a specific Express route, ensuring that the route is protected and only accessible with a valid JWT token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/node-express.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyAuthFromRequest } from '/middleware/auth-middleware.ts';\n\napp.get('/user/:id', verifyAuthFromRequest, (req, res, next) => {\n  // Custom code\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Token in Next.js Server Component\nDESCRIPTION: This snippet shows how to fetch an organization token in a Next.js server component using the getOrganizationTokenRSC function from @logto/next/server-actions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getOrganizationTokenRSC } from '@logto/next/server-actions';\nimport { logtoConfig } from './logto';\n\nexport default async function Home() {\n  const token = await getOrganizationTokenRSC(logtoConfig, 'organization-id');\n\n  return (\n    <main>\n      <p>Token de organização: {token}</p>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in TypeScript\nDESCRIPTION: This snippet shows how to create a LogtoClient instance with configuration options. It specifically highlights the 'resources' property, where multiple API endpoints are specified for authentication purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API 리소스를 추가하세요\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Scopes in Logto Client for Ruby\nDESCRIPTION: This snippet shows how to configure additional scopes when initializing the Logto client in Ruby. It demonstrates setting up the LogtoClient with custom scopes to request additional user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...其他配置\n    # highlight-next-line\n    scopes: [\"email\", \"phone\"] # 根据需要添加更多权限 (Scopes)\n  ),\n  # ...其他配置\n)\n```\n\n----------------------------------------\n\nTITLE: Defining UserEntity Type for Webhook Payloads in TypeScript\nDESCRIPTION: TypeScript type definition for the UserEntity object that represents user data in webhook payloads. It includes user identification fields, profile information, and metadata.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/request.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UserEntity = {\n  id: string;\n  username?: string;\n  primaryEmail?: string;\n  primaryPhone?: string;\n  name?: string;\n  avatar?: string;\n  customData?: object;\n  identities?: object;\n  lastSignInAt?: string;\n  createdAt?: string;\n  applicationId?: string;\n  isSuspended?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable for OIDC Enterprise SSO\nDESCRIPTION: This code snippet defines a constant 'connector' with the value 'OIDC enterprise SSO'. This variable is used throughout the document to refer to the specific SSO connector being implemented.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Fetching Custom User Data with Network Request\nDESCRIPTION: Demonstrates how to access custom user data that requires a network request using the fetch_user_info method. This displays custom_data attributes from the user information endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <p>Benutzerdefinierte Daten: <%= @client.fetch_user_info[\"custom_data\"] %></p>\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Initializing NextAuth with Logto Provider Configuration in TypeScript\nDESCRIPTION: Sets up NextAuth authentication by configuring the Logto provider with specific OAuth scopes for organization access. Exports authentication handlers and utility functions for sign-in/sign-out operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access urn:logto:scope:organizations',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims in Vue.js with Logto\nDESCRIPTION: This snippet demonstrates how to access additional claims after configuring extra scopes in a Vue.js application using Logto. It uses the getIdTokenClaims() method to retrieve the claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_get-user-information.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst claims = await getIdTokenClaims();\n// Maintenant, vous pouvez accéder aux revendications supplémentaires `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Provider in React Native\nDESCRIPTION: This snippet demonstrates how to import and use LogtoProvider to provide Logto context in a React Native application. It requires configuring the Logto endpoint and application ID.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoProvider, LogtoConfig } from '@logto/rn';\n\nconst config: LogtoConfig = {\n  endpoint: '<your-logto-endpoint>',\n  appId: '<your-application-id>',\n};\n\nconst App = () => (\n  <LogtoProvider config={config}>\n    <YourAppContent />\n  </LogtoProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In/Sign-Out Links in Ruby on Rails View\nDESCRIPTION: This snippet demonstrates how to create sign-in and sign-out links in a Ruby on Rails view template using ERB. It checks the authentication status to display the appropriate link.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <a href=\"<%= sign_out_path %>\">Sign out</a>\n<% else %>\n  <a href=\"<%= sign_in_path %>\">Sign in</a>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token with Resource Parameter in Ruby\nDESCRIPTION: This code retrieves an access token from a Logto client instance by specifying a resource URL. The token is intended for authentication with a shopping API endpoint, and the access_token method requires the resource parameter to properly scope the token permissions.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ntoken = @client.access_token(resource: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering MDX Documentation Components\nDESCRIPTION: Imports documentation fragments and components for scopes and claims, then renders them with the required props. Uses relative imports and JSX composition pattern.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig with Organizations Scope in Kotlin\nDESCRIPTION: This snippet demonstrates how to initialize a LogtoConfig object with custom scopes, specifically adding the UserScope.Organizations scope. This configuration is necessary for enabling organization-related features in the Logto authentication system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/android/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    // ...other configs\n    // highlight-start\n    scopes = listOf(UserScope.Organizations),\n    // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Chrome Extension with Yarn\nDESCRIPTION: This command installs the @logto/chrome-extension package using Yarn package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Defining Twilio SMS Connector Configuration Types in JSON\nDESCRIPTION: JSON schema defining the configuration types for the Twilio SMS connector, including account credentials, messaging service SID, and templates for different usage scenarios.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/integrations/sms/twilio-sms/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accountSID\": \"string\",\n  \"authToken\": \"string\",\n  \"fromMessagingServiceSID\": \"string\",\n  \"templates\": [\n    {\n      \"content\": \"string\",\n      \"usageType\": \"'Register' | 'SignIn' | 'ForgotPassword' | 'Generic'\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Organization Token Components in React - JavaScript\nDESCRIPTION: This snippet demonstrates how to import modular React and Markdown code components for use within a documentation project. It imports a component for fetching organization tokens and two code fragments containing configuration and access logic. The components are composed in a JSX element with props that integrate code examples, likely for embedded documentation or live code blocks. Dependencies include React, MDX/Markdown support, and the referenced component files. No parameters are directly defined, but the props organizationScope, configOrganizationCode, and getOrganizationAccessTokenCode are passed to child components. Expected output is rendered documentation with interactive or syntax-highlighted code samples.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for WordPress Apple Sign-in Guide\nDESCRIPTION: Import statements for various MDX fragments that compose the WordPress Apple sign-in guide. The imports include components for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-apple.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/wordpress-plugin/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/apple/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: X OAuth Connector Configuration Example with Domain\nDESCRIPTION: Complete example of a callback URL including domain for X OAuth configuration with Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/x/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://foo.logto.app/callback/${connector_id}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Fragments in React - JavaScript\nDESCRIPTION: This snippet demonstrates importing a React component responsible for fetching access tokens for API resources from a relative path, as well as a code fragment containing example code. These imports are later used as props in a child component. No additional dependencies beyond the standard React project structure are required; the correct relative paths must be maintained for successful import.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Adding Third-Party Connectors with Logto CLI\nDESCRIPTION: Use this command to add third-party connectors. The connector must be a valid NPM package with a name starting with 'connector-' or '@some-org/connector-'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlogto connector add service-a connector-service-b @org/service-c\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli connector add service-a connector-service-b @org/service-c\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli connector add service-a connector-service-b @org/service-c\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Logto Express Installation Component\nDESCRIPTION: Code that imports a reusable component called NpmLikeInstallation and uses it to display installation instructions for Logto Express SDK and related dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/express cookie-parser express-session\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Code Snippets for Logto Organization Token Fetching\nDESCRIPTION: This snippet imports necessary components and code fragments for configuring and fetching organization tokens in Logto. It includes a main component for fetching organization tokens and separate code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Out in User Profile Page\nDESCRIPTION: Implements the sign-out functionality in the user profile page, calling the CustomAuthManager's signOut method when the sign-out button is pressed.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFFButtonWidget(\n  onPressed: () async {\n    await authManager.signOut();\n\n    context.replaceNamed('HomePage');\n  },\n  text: 'Sign Out',\n  // ...\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments in React/JSX\nDESCRIPTION: Imports MDX fragments that provide documentation on fetching organization tokens for users. This includes a main component and code examples for configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Protected App Authentication Flow with Mermaid\nDESCRIPTION: A Mermaid flowchart that illustrates how the Protected App handles authentication between the client and origin server, showing the request flow and authentication decision points.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrate-logto/protected-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  A(\"Client<br/>(Browser)\") -->|Request| B(Logto<br/>Protected App)\n  B --> Condition{{Route<br/>matches?}}\n  Condition -->|Yes| Matched{{Is authenticated?}}\n  Matched -->|Yes| C(Origin server)\n  Matched -->|No| D(Logto sign-in)\n  Condition -->|No| C\n```\n\n----------------------------------------\n\nTITLE: Initialize Logto Browser Client with Organization Scope\nDESCRIPTION: Creates a new LogtoClient instance with organization scopes enabled. The client is attached to the window object for global access. Uses ES module import from a CDN source.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LogtoClient, { UserScope } from 'https://esm.run/@logto/browser';\n\nwindow.logtoClient = new LogtoClient({\n  // ...other configs\n  scopes: [UserScope.Organisations],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoConfig with Custom Scopes in Kotlin\nDESCRIPTION: Sets up a Logto configuration object with email and phone scopes. Shows both string-based and enum-based approaches for defining scopes. The configuration object is used to initialize the Logto client with specific permission scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/android/scopes-and-claims/_scopes-and-claims-code.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval logtoConfig = LogtoConfig(\n    //...other configs\n    scopes = listOf(\"email\", \"phone\"), // oder `listOf(UserScope.EMAIL, UserScope.PHONE)`\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with API Resources in TypeScript\nDESCRIPTION: This code initializes a LogtoClient instance with configuration options, specifically highlighting the resources property. The resources array contains URLs to API endpoints that should be protected by Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoClient = new LogtoClient({\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // Adicionar recursos de API\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring LogtoConfig with String Scopes in Dart\nDESCRIPTION: This snippet demonstrates how to initialize a LogtoConfig object with string literals for scopes. It specifies 'email' and 'phone' scopes that will be requested during authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_scopes-code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// LogtoConfig\nfinal logtoConfig = const LogtoConfig(\n  endpoint: \"<your-logto-endpoint>\",\n  appId: \"<your-app-id>\",\n  // highlight-start\n  scopes: [\"email\", \"phone\"],\n  // highlight-end\n);\n```\n\n----------------------------------------\n\nTITLE: Example Opaque Token Response in JSON\nDESCRIPTION: An example JSON response showing an opaque token issued by Logto during authentication, which includes the random string access token, an expiration time, ID token (JWT), scope, and token type.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/concepts/opaque-token.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"some-random-string\", // 不透明トークン\n  \"expires_in\": 3600,\n  \"id_token\": \"eyJhbGc...aBc\", // JWT\n  \"scope\": \"openid profile email\",\n  \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering npm-like Installation Component for Logto SvelteKit SDK\nDESCRIPTION: This snippet imports a reusable component for npm-like installation instructions and renders it with the package name '@logto/sveltekit'. It's likely part of a documentation page for installing the Logto SvelteKit SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/sveltekit\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Gallery Component for Logto Quick Starts in JSX\nDESCRIPTION: This code snippet imports and renders a Gallery component, likely used to display various quick start options for Logto integration. The Gallery component is passed a 'path' prop with the value 'quick-starts'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Gallery from '@components/Gallery';\n\n<Gallery path=\"quick-starts\" />\n```\n\n----------------------------------------\n\nTITLE: Manual Token Request with Organization ID Parameter\nDESCRIPTION: Example showing how to manually construct an organization token request using the refresh token flow with an organization_id parameter in the request body.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Verwende JavaScript als Beispiel\n\nconst params = new URLSearchParams();\n\nparams.append('grant_type', 'refresh_token');\nparams.append('client_id', 'YOUR_CLIENT_ID');\nparams.append('refresh_token', 'REFRESH_TOKEN');\nparams.append('organization_id', 'org_123');\n\nconst response = await fetch('https://YOUR_LOGTO_ENDPOINT/oidc/token', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  body: params,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependencies for Spring Boot and OAuth2\nDESCRIPTION: Maven configuration to add required dependencies for Spring Boot, Spring Security, and OAuth2 client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/java-spring-boot/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-oauth2-client</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button Component with Auth.js\nDESCRIPTION: Creates a sign-in button component that uses Auth.js's signIn function with the 'logto' provider. This component uses a server action to handle the authentication flow.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from '@/auth';\n\nexport default function SignIn() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signIn('logto');\n      }}\n    >\n      <button type=\"submit\">Sign In</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Proxy Mount Paths\nDESCRIPTION: Mount path configuration for the three main frontend proxies in Logto: Admin Console, Demo App, and UI proxy. The UI proxy serves as a fallback using the root path when no other proxies match.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/concepts/core-service/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/console    # Admin Console proxy\n/demo-app   # Demo app proxy\n/           # UI (sign-in experience) proxy\n```\n\n----------------------------------------\n\nTITLE: Configuring First Screen Parameters in JavaScript SDK\nDESCRIPTION: This example demonstrates how to set first screen parameters when calling the signIn method in the Logto JavaScript SDK. It shows how to specify the first screen type, acceptable identifiers, and a login hint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/authentication-parameters/first-screen.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlogtoClient.signIn({\n  redirectUri: 'https://your-app.com/callback',\n  firstScreen: 'identifier:register',\n  identifier: ['email', 'phone'],\n  loginHint: 'example@logto.io',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Fetching Component in React\nDESCRIPTION: This snippet renders the FetchOrganizationTokenForUser component with specific props. It sets the organization scope and passes code snippets for configuring organizations and getting access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with Logto Client in Dart\nDESCRIPTION: An asynchronous function that retrieves an access token for a specific resource using the Logto client. It takes a resource string parameter and returns a Future containing an optional AccessToken object.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/code-snippets/_get-resource-access-token.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<AccessToken?> getAccessToken(String resource) async {\n  var token = await logtoClient.getAccessToken(resource: resource);\n\n  return token;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Twilio SMS Connector Config Types in JSON\nDESCRIPTION: This JSON schema defines the configuration types for the Twilio SMS connector. It includes the main config properties and the template properties used for different message types.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/sms/twilio/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accountSID\": \"string\",\n  \"authToken\": \"string\",\n  \"fromMessagingServiceSID\": \"string\",\n  \"templates\": [\n    {\n      \"content\": \"string\",\n      \"usageType\": \"'Register' | 'SignIn' | 'ForgotPassword' | 'Generic'\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User ID Function in PostgreSQL for Supabase\nDESCRIPTION: A PostgreSQL function that extracts the userId from the JWT claims in Supabase requests. This function is used for Row-Level Security policies to identify the current user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function auth.user_id() returns text as $$\n  select nullif(current_setting('request.jwt.claims', true)::json->>'userId', '')::text;\n$$ language sql stable;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NpmLikeInstallation Component for React SDK\nDESCRIPTION: This snippet imports a reusable component for npm-like installations and uses it to display installation instructions for the Logto React SDK. The component takes a packageName prop to specify which package to install.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/react/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/react\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing and Attaching Passport Middleware in Node.js Application\nDESCRIPTION: This snippet shows how to initialize and attach Passport middleware in a Node.js application. It imports the previously defined Passport initialization function and sets up session authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/passport/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport initPassport from './passport';\n\n// ... other code\ninitPassport();\n// ... other code\napp.use(passport.authenticate('session'));\n// ... other code\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button Component in Next.js\nDESCRIPTION: This snippet shows the implementation of a client-side Sign-In button component for Next.js. It receives an onSignIn prop function to handle the sign-in action.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\ntype Props = {\n  onSignIn: () => Promise<void>;\n};\n\nconst SignIn = ({ onSignIn }: Props) => {\n  return (\n    <button\n      onClick={() => {\n        onSignIn();\n      }}\n    >\n      Sign In\n    </button>\n  );\n};\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token for API Resources in JSX\nDESCRIPTION: This snippet renders the FetchAccessTokenForApiResources component, which provides information on how to retrieve an access token for API resources. It specifies the API method name and includes a code example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_api-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Resources in Logto Go Client\nDESCRIPTION: This snippet shows how to define multiple protected API resources in a Logto client configuration. The Resources field accepts an array of string URLs that represent the API endpoints that should be protected by Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogtoConfig := &client.LogtoConfig{\n    // ...other configs\n    // highlight-next-line\n    Resources: []string{\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Documentation in JSX/MDX\nDESCRIPTION: This code imports documentation fragments and combines them to create a comprehensive guide for fetching access tokens for API resources. It references code examples and API methods.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Feishu Social Sign-In Redirect URL Configuration\nDESCRIPTION: Configuration example showing the format for the redirect URL when setting up Feishu social sign-in. The URL should be structured with the Logto endpoint and connector ID placeholders that will be found in the Logto Console.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/integrations/social/feishu-web/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n${logto_endpoint}/callback/${connector_id}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Components in MDX/JSX\nDESCRIPTION: Imports access token-related MDX fragments and code components, then uses them in a FetchAccessTokenForApiResources component with specific props for token fetching functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token for Protected Resource in Ruby\nDESCRIPTION: This code snippet shows how to obtain an access token from a Logto client instance to access a protected API resource. The token is requested for a specific resource URL which defines the scope of access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntoken = @client.access_token(resource: \"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Rendering JSX Component with API Code Fragment\nDESCRIPTION: Renders a paragraph element with inline code that references a property passed to this component. The code element will display the API method needed to fetch user information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_fetch-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<p>\n  You can get the user information by calling <code>{props.apiCodeFragment}</code> after signing in.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Successful OIDC configuration migration output\nDESCRIPTION: This code snippet displays the expected output message when the OIDC configuration migration is successful. It shows the read and generated configurations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/using-cli/migrate-from-env.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[info] Read config oidc.privateKeys from env\n[info] Read config oidc.cookieKeys from env\n[info] Generated config oidc.refreshTokenReuseInterval\n[info] ✔ Seed OIDC config\n```\n\n----------------------------------------\n\nTITLE: Logto OpenID Configuration Sample Response\nDESCRIPTION: Sample JSON response from Logto's OpenID Connect discovery endpoint showing the issuer and JWKS URI configuration values needed for JWT validation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"issuer\": \"https://<your-logto-domain>/oidc\",\n  \"jwks_uri\": \"https://<your-logto-domain>/oidc/jwks\"\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM-like Installation Component for Passport and OpenID Connect\nDESCRIPTION: This code snippet imports a reusable component for npm-like package installation and uses it to install Passport and OpenID Connect dependencies. The component is likely to generate installation instructions for these packages.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/passport/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"passport passport-openidconnect\" />\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Application YAML Configuration for OAuth2 Resource Server\nDESCRIPTION: YAML configuration for a Spring Boot application, setting up server port, API audience, and OAuth2 resource server with JWT validation endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# path/to/project/src/main/resources/application.yaml\nserver:\n  port: 3000\n\nlogto:\n  audience: http://localhost:3000/\n\nspring:\n  security:\n    oauth2:\n      resourceserver:\n        jwt:\n          issuer-uri: <your-logto-issuer-uri>\n          jwk-set-uri: <your-logto-jwks-uri>\n```\n\n----------------------------------------\n\nTITLE: Querying User's Organization Scopes Using Management API in Bash\nDESCRIPTION: This code snippet demonstrates how to use curl to query a user's organization permission scopes via the Logto Management API. It requires an organization token for authorization.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/configure-organization-template.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n -X GET https://[tenant_id].logto.app/api/organizations/{id}/users/{userId}/scopes \\\n -H \"Authorization: Bearer $ORGANIZATION_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Route in Express\nDESCRIPTION: Code snippet for creating a sign-in route in Express. This route initiates the authentication process by redirecting the user to the Logto sign-in page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getSignInUrl } = require('./logto');\n\napp.get('/sign-in', async (req, res) => {\n  const { redirectUri, codeVerifier, state, signInUri } = await getSignInUrl();\n  req.session.signIn = { codeVerifier, state, redirectUri };\n  res.redirect(signInUri);\n});\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Documentation\nDESCRIPTION: YAML frontmatter configuration defining metadata for the documentation page including slug, tags, title, and related SDKs/connectors\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-express-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nslug: how-to-build-okta-enterprise-sso-sign-in-with-express-and-logto\ntags: [SSO providers, okta-enterprise-sso, express, js, SAML authentication, enterprise login, SSO login]\ntitle: How to build Okta enterprise SSO with Express\nsdk: Express\nconnector: Okta enterprise SSO\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Scopes and Resources in TypeScript\nDESCRIPTION: This snippet shows how to configure Logto with specific scopes and resources. It sets up read and write scopes and defines two API resources for a shopping application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: MDX Component Usage\nDESCRIPTION: Implementation of imported MDX components with necessary props to render the tutorial content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-facebook.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Facebook';\n\n<Intro connector={connector} sdk=\"iOS (Swift)\" link=\"https://developer.apple.com/ios\" />\n\n<CreateApplication type=\"Native app\" framework=\"iOS (Swift)\" />\n\n<FrameworkGuide />\n\n<AddSocialConnector connector={connector} framework=\"iOS (Swift)\" />\n\n<ConnectorGuide />\n\n<SaveYourConfiguration connector={connector} />\n\n<EnableSocialConnector connector={connector} />\n\n<TestingAndValidation connector={connector} sdk=\"iOS (Swift)\" />\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Signing Out User with Logto Client in Dart\nDESCRIPTION: This Dart code snippet demonstrates how to sign out a user using the Logto client. It calls the signOut method on the logtoClient object, passing the redirectUri as a required parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/README.mdx#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait logtoClient.signOut(redirectUri);\n```\n\n----------------------------------------\n\nTITLE: Importing Reusable MDX Components for Korean Logto Guide\nDESCRIPTION: Imports reusable Markdown and MDX components to construct a Korean language guide page for Logto. The imports include a guide tip, installation instructions, and integration steps that will be rendered in the document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.md';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### 설치 \\{#installation}\n\n<Installation />\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Translating Keys Using ChatGPT API\nDESCRIPTION: Command to automatically translate all untranslated keys (marked with /** UNTRANSLATED */) across all languages using the ChatGPT API. Requires an OPENAI_API_KEY environment variable.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/translate-cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm translate sync\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in React/MDX\nDESCRIPTION: Imports necessary components and code fragments for organization token management functionality, including configuration and token fetching components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.mdx';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"urn:logto:scope:organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Vue and Slack Integration Guide\nDESCRIPTION: This code snippet imports various MDX fragments that are used to compose the tutorial. It includes sections for introduction, application creation, social connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-vue-slack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/vue/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/social/slack/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Architecture Flow Diagram using Mermaid\nDESCRIPTION: Illustrates the architectural flow between User, Client Application, Server Application and Logto service for account management operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/account-settings/by-management-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n  graph TB\n    A[Usuario] --> B[Aplicación cliente]\n    B -->|Llamada API de configuración de cuenta autohospedada|C[Aplicación del lado del servidor]\n    C -->|Llamada Management API| D[Logto]\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Constant in MDX (JavaScript)\nDESCRIPTION: This snippet defines and exports a JavaScript constant named `connector` within an MDX file. The constant holds the string value 'Microsoft Entra ID OIDC enterprise SSO', likely used for dynamic content generation or referencing the specific SSO connector type within the documentation page, potentially within imported MDX components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-razor-pages-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing Topbar Component in React MDX File - JavaScript\nDESCRIPTION: This code imports the 'Topbar' React component from the '@components/Topbar' module. It is a prerequisite that such a component exists in the specified path and is correctly exported. The import allows for rendering a topbar navigation/header throughout the privacy policy document, enhancing navigation and branding. No parameters are required; the output is the ability to use <Topbar /> within the JSX.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/terms/privacy-policy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Topbar from '@components/Topbar';\n```\n\n----------------------------------------\n\nTITLE: Structuring Modular Authentication Onboarding with Docusaurus and Expo (React Native) - JSX\nDESCRIPTION: This snippet demonstrates how to compose a step-by-step documentation page in Docusaurus using MDX import statements and custom section tags. It modularizes authentication onboarding by referencing fragments for each procedure, such as introduction, application creation, connector setup, and testing. No dependencies are required at runtime beyond Docusaurus/MDX and the referenced MDX files; the snippet expects those MDX files to exist and be compatible with Docusaurus. All parameters and dynamic values (e.g., connector name, SDK link) are passed as props to imported components. This approach increases maintainability and reusability, but requires following the naming and path conventions for the documentation files.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-twilio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport FrameworkGuide from '@site/docs/quick-starts/framework/expo/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/docs/integrations/sms/twilio/_integration.mdx';\\nimport FurtherReadings from './fragments/_further_readings.mdx';\\n\\nexport const connector = 'Twilio';\\n\\n<Intro connector={connector} sdk=\"Expo (React Native)\" link=\"https://expo.dev\" />\\n\\n<CreateApplication type=\"Native app\" framework=\"Expo\" />\\n\\n<FrameworkGuide />\\n\\n<AddPasswordlessConnector\\n  connector={connector}\\n  connectorType=\"SMS\"\\n  passwordlessSignUpIdentifier=\"Phone number\"\\n/>\\n\\n<ConnectorGuide />\\n\\n<SaveYourConfiguration connector={connector} />\\n\\n<EnablePasswordlessConnector\\n  connectorType=\"SMS\"\\n  passwordlessSignUpIdentifier=\"Phone number\"\\n/>\\n\\n<TestingAndValidation connector={connector} sdk=\"Expo (React Native)\" />\\n\\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Structuring Logto Tutorial with MDX Components\nDESCRIPTION: This code structures the tutorial using imported MDX components. It includes sections for creating an application, integrating with Logto, adding and configuring the social connector, enabling it in the sign-in experience, and testing the implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/_template-social.mdx#2025-04-22_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<Intro connector={connector} sdk=\"${sdk}\" link=\"${sdkOfficialLink}\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"${appType}\" framework=\"${framework}\" />\n\n## Integrate ${framework} with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add ${connector} connector \\{#add-connector-connector}\n\n<AddSocialConnector connector={connector} framework=\"${framework}\" />\n\n## Set up ${connectorConfigName} \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable ${connector} connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSocialConnector connector={connector} />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"${sdk}\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Rules for Android\nDESCRIPTION: Set up backup rules in the Android manifest to enable fullBackupContent while excluding flutter_secure_storage preferences.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/flutterflow/code-snippets/_flutter-secure-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<application ...\n  android:fullBackupContent=\"@xml/backup_rules\">\n</application>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<full-backup-content>\n  <exclude domain=\"sharedpref\" path=\"FlutterSecureStorage\"/>\n</full-backup-content>\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Fetching Component in React JSX\nDESCRIPTION: This JSX code renders the FetchOrganizationTokenForUser component, passing necessary props for organization scope and code snippets for configuration and token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: MFA Verification Factors Type Definition in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for multi-factor authentication (MFA) verification factors associated with a user account, including TOTP, WebAuthn, and backup codes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/user-management/user-data.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmfaVerificationFactors: (\"Totp\" | \"WebAuthn\" | \"BackupCode\")[];\n```\n\n----------------------------------------\n\nTITLE: Importing Icons for User Management Documentation in JSX\nDESCRIPTION: This code snippet imports SVG icons from the project's assets directory. These icons are used to visually represent different sections of the user management documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/user-management/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DatabaseIcon from '@site/src/assets/database.svg';\nimport GearIcon from '@site/src/assets/gear.svg';\nimport KeyIcon from '@site/src/assets/key.svg';\nimport SearchIcon from '@site/src/assets/search.svg';\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Authentication Scopes and Resources\nDESCRIPTION: Defines the Logto configuration object with custom authorization scopes and API resource endpoints. The configuration includes read/write scopes and multiple API endpoints for a shopping application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const logtoConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Components in MDX\nDESCRIPTION: Demonstrates importing and using MDX fragments and code components for documenting access token retrieval, including the main FetchAccessTokenForApiResources component with required props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Multiple Value Exact Matching with OR Logic\nDESCRIPTION: This example shows how to search for multiple exact values in the same field. It searches for users with the name 'Alice' OR 'Bob' using the exact mode.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search.name', 'Alice'],\n  ['search.name', 'Bob'],\n  ['mode.name', 'exact'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating WXEntryActivity for WeChat Authentication in Java\nDESCRIPTION: Implementation of WXEntryActivity in Java, required for WeChat login integration in Android apps. This activity handles the authentication results from WeChat.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// WXEntryActivity.java\npackage com.sample.app.wxapi\n\nimport io.logto.sdk.android.auth.social.wechat.WechatSocialResultActivity\n\npublic class WXEntryActivity extends WechatSocialResultActivity {}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in MDX\nDESCRIPTION: Sets up the necessary imports for a Logto integration guide, bringing in documentation fragments for various steps of the implementation process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkpoint from '../../fragments/_checkpoint-test-your-application.md';\n\nimport GuideTip from './_guide-tip.mdx';\nimport ImplementSignInAndSignOut from './_implement-sign-in-and-sign-out.mdx';\nimport InitClient from './_init-client.mdx';\nimport Installation from './_installation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing Scopes Documentation Components\nDESCRIPTION: Imports MDX fragments and markdown files related to scopes and claims documentation, then composes them using a React component with props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Defining Scope Type Structure in TypeScript\nDESCRIPTION: TypeScript type definition for Scope objects used in permission-related webhook events. This type includes properties like id, name, description, resourceId, and createdAt.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/request.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype Scope = {\n  id: string;\n  name: string;\n  description: string;\n  resourceId: string;\n  createdAt: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Logto Docker Container\nDESCRIPTION: Docker run command to start the Logto container with the necessary port mappings and environment variables.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --name logto \\\n  -p 3001:3001 \\\n  -p 3002:3002 \\\n  -e TRUST_PROXY_HEADER=1 \\\n  -e ENDPOINT=https://<your-logto-domain> \\\n  -e ADMIN_ENDPOINT=https://<your-logto-admin-domain> \\\n  -e DB_URL=postgres://username:password@your_postgres_url:port/db_name \\\n  ghcr.io/logto-io/logto:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Dart SDK via pub.dev in Flutter\nDESCRIPTION: This snippet shows how to install the Logto Dart SDK using the pub package manager in a Flutter project. It includes the command to add the package and the alternative method of updating the pubspec.yaml file.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutter/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add logto_dart_sdk\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  logto_dart_sdk: ^3.0.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub get\n```\n\n----------------------------------------\n\nTITLE: Creating Index and User Routes in Express\nDESCRIPTION: Implementing routes for the index page and user profile page, using the authentication middleware in an Express application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/', withAuth({ requireAuth: false }), function (req, res, next) {\n  res.render('index', { auth: Boolean(req.auth) });\n});\n\napp.get('/user', withAuth(), (req, res, next) => {\n  res.render('user', { userId: req.auth });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Logto Configuration\nDESCRIPTION: Implements the Logto hook with environment variables instead of hardcoded values for better security practices.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleLogto } from '@logto/sveltekit';\nimport { env } from '$env/dynamic/private';\n\nexport const handle = handleLogto(\n  {\n    endpoint: env.LOGTO_ENDPOINT,\n    appId: env.LOGTO_APP_ID,\n    appSecret: env.LOGTO_APP_SECRET,\n  },\n  {\n    encryptionKey: env.LOGTO_COOKIE_ENCRYPTION_KEY,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Extended User Information\nDESCRIPTION: This snippet demonstrates how to use the fetchUserInfo method to retrieve extended user information, including custom data that might be available for the user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_get-user-information.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst userInfo = await logtoClient.fetchUserInfo();\n// Jetzt kannst du auf den Anspruch `userInfo.custom_data` zugreifen.\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token with Logto Client in Go\nDESCRIPTION: Makes a request to get an access token for a specific API endpoint using the Logto client. Takes the API URL as a parameter and returns an access token and potential error.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/go/api-resources/code/_get-access-token-code.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\naccessToken, error := logtoClient.GetAccessToken(\"https://shopping.your-app.com/api\")\n```\n\n----------------------------------------\n\nTITLE: Using Organization Token Component with Configuration Props in JSX\nDESCRIPTION: Implements the FetchOrganizationTokenForUser component with specific props to configure organization scope and code snippets for organization configuration and access token retrieval.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Logto Applications with cURL\nDESCRIPTION: This snippet demonstrates how to use cURL to make an authenticated GET request to the Logto Management API for retrieving all applications. It requires the Logto endpoint and a valid access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/generic/machine-to-machine/fragments/_access-logto-management-api-using-access-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location \\\n  --request GET 'https://your.logto.endpoint/api/applications' \\\n  --header 'Authorization: Bearer eyJhbG...2g'\n```\n\n----------------------------------------\n\nTITLE: Connector Frontmatter Configuration Example in Markdown\nDESCRIPTION: Example frontmatter for an AWS SES email connector guide showing the required properties for tutorial generation, including the connector name, configuration name, and sign-up identifier type.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/plugins/tutorial-generator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntutorial_name: AWS SES\ntutorial_config_name: AWS SES email connector\ntutorial_sign_up_identifier: Email address\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Access Token Fetching Component in JSX\nDESCRIPTION: This snippet shows how to render the component for fetching access tokens for API resources. It specifies the API method name and includes a code example.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Organization Token Fetching Component in JSX\nDESCRIPTION: This snippet demonstrates how to render the component for fetching organization tokens. It includes the organization scope, configuration code, and access token retrieval code.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode package={props.package} />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using SaveYourConfiguration Component in MDX\nDESCRIPTION: Renders the 'SaveYourConfiguration' MDX component, passing the 'Slack' connector name (via the 'connector' variable). This component displays instructions on where and how to save the obtained Slack application credentials within the Logto connector configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-slack.mdx#2025-04-22_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Exemple 2 (Cas 1) - Facturation avec utilisation temporaire du SSO d'entreprise\nDESCRIPTION: Formule mathématique illustrant le calcul proratisé lorsqu'un service SSO d'entreprise est ajouté pendant 10 jours dans un cycle de facturation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/logto-cloud/billing-and-pricing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: math\nCODE:\n```\n\\$16 + \\$48 \\times (1 \\times 15 / 30) - \\$48 \\times (1 \\times 5 / 30) = \\$32\n```\n\n----------------------------------------\n\nTITLE: Composing Documentation Component with Injected Code Sample - React - JSX\nDESCRIPTION: This snippet demonstrates the rendering of a ScopesAndClaims React component, passing in a code sample as a prop for the configScopesCode property. It assumes that ScopesAndClaims accepts a configScopesCode prop expecting a React node, and that ScopesAndClaimsCode is imported as a renderable code block/component. This pattern allows for flexible composition and display of documentation content with code samples in a React/MDX environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/python/scopes-and-claims/_scopes-and-claims.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Composing Documentation with React Components\nDESCRIPTION: Uses the imported FetchOrganizationTokenForUser component with specific props to render documentation. Passes in the organization scope and code snippets as React components.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components in React\nDESCRIPTION: This code snippet shows how the imported MDX components are rendered within the React component. It includes components for various sections of the tutorial, such as the introduction, application creation, and SSO connector setup.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-oidc-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" link=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#blazor-webassembly\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"シングルページアプリ\" framework=\".NET Core (Blazor WebAssembly)\" />\n\n## Integrate .NET Core (Blazor WebAssembly) SDK \\{#integrate-framework-sdk}\n\n<IntegrateSdk />\n\n## Add OIDC enterprise SSO connector \\{#add-connector-connector}\n\n<AddSsoConnector framework=\".NET Core (Blazor WebAssembly)\" />\n\n## Set up IdP 上の OIDC アプリケーション \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable OIDC enterprise SSO connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSsoConnector />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components for React Native SDK Guide\nDESCRIPTION: This code imports custom components used to render different sections of the React Native SDK integration guide. It includes a guide tip, installation instructions, and integration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/express/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GuideTip from './_guide-tip.mdx';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n\n<GuideTip />\n\n### Installation \\{#installation}\n\n<Installation />\n\n### Integration \\{#integration}\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components\nDESCRIPTION: Imports required MDX components for the documentation page, including a guide tip component and integration component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/integrations/social/naver/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport GuideTip from '../../fragments/_guide-tip.mdx';\n\nimport Integration from './_integration.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection URL in Bash\nDESCRIPTION: Examples of setting the REDIS_URL environment variable with different Redis connection string formats, including options for username, password, and TLS.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/logto-oss/central-cache.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=redis://your-redis-username:your-password@your.redis.url.com:6380\n```\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=redis://:your-password@your.redis.url.com\n```\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=redis://:foo%3D@your.redis.url.com\n```\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=1 # o \"true\", \"yes\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Chrome Extension Manifest Permissions for Logto\nDESCRIPTION: JSON configuration for the manifest.json file specifying the required permissions and host access for the Logto SDK to function within a Chrome extension.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"identity\", \"storage\"],\n  \"host_permissions\": [\"https://*.logto.app/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Resource Components in JSX\nDESCRIPTION: This snippet imports various components and fragments related to API resources configuration and token fetching in a React-like environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/api-resources/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiResourcesDescription from '../../../fragments/_api-resources-description.md';\n\nimport ConfigApiResources from './_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from './_fetch-access-token-for-api-resources.mdx';\nimport FetchOrganizationTokenForUser from './_fetch-organization-token-for-user.mdx';\n```\n\n----------------------------------------\n\nTITLE: Implementing getCustomJwtClaims Function in JavaScript\nDESCRIPTION: Basic implementation of the getCustomJwtClaims function that returns an empty object. This function is used to define custom claims for access tokens in Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/developers/custom-token-claims/create-script.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst getCustomJwtClaims = async ({ token, context, environmentVariables }) => {\n  return {};\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Python-jose Package for Token Verification\nDESCRIPTION: Command to install the Python-jose package with ECDSA support, which is used for JWT token validation. ECDSA is the default cryptography method used by Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/python.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install python-jose[ecdsa]\n\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication UI Elements in Rails ERB Template\nDESCRIPTION: ERB template code for conditionally displaying sign-in or sign-out links based on the current authentication state.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <a href=\"<%= sign_out_path %>\">Sign out</a>\n<% else %>\n  <a href=\"<%= sign_in_path %>\">Sign in</a>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token with Logto SDK\nDESCRIPTION: TypeScript example showing how to get an access token for a specific resource using the Logto SDK client. Returns a token specific to the requested resource URL.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/api-resources/protect-your-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst accessToken = await logtoClient.getAccessToken('https://resource-server.com/api');\n```\n\n----------------------------------------\n\nTITLE: Creating Jade Templates for Index and User Pages\nDESCRIPTION: Implementing Jade templates for the index and user profile pages in an Express application using Logto authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/generic/traditional/README.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jade\nCODE:\n```\nextends layout\n\nblock content\n  h1 Hello logto\n  if auth\n    p: a(href=\"/user\") Go to profile\n  else\n    p: a(href=\"/sign-in\") Click here to sign in\n```\n\nLANGUAGE: jade\nCODE:\n```\nextends layout\n\nblock content\n  h1 Hello logto\n  p userId: #{userId}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Data Mutation Events for User Management\nDESCRIPTION: Table showing webhook events related to user account management operations.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/events.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Event type                    | Description                                                                             |\n| ----------------------------- | --------------------------------------------------------------------------------------- |\n| User.Created                  | A new user account is created.                                                          |\n| User.Deleted                  | A user account is deleted.                                                              |\n| User.Data.Updated             | User profile data is updated, e.g., email, avatar, custom.data, social identifier, etc. |\n| User.SuspensionStatus.Updated | User suspension status is changed (suspended or reactivated).                           |\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationEntity Type for Webhook Payloads in TypeScript\nDESCRIPTION: TypeScript type definition for the ApplicationEntity object that represents application data in webhook payloads. It includes application identification and description fields.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/request.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype ApplicationEntity = {\n  id: string;\n  name: string;\n  description?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Callback in Ruby on Rails Controller\nDESCRIPTION: This snippet shows how to handle the authentication callback in a Ruby on Rails controller. It uses the Logto client to process the sign-in callback.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def callback\n    @client.handle_sign_in_callback(url: request.original_url)\n  end\n  # highlight-end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Session Middleware\nDESCRIPTION: Configures required express-session and cookie-parser middleware for session management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\n\napp.use(cookieParser());\napp.use(\n  session({\n    secret: 'random_session_key', // 独自のシークレットに置き換えてください\n    cookie: { maxAge: 14 * 24 * 60 * 60 * 1000 }, // ミリ秒単位\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication Decorator to Flask API Routes\nDESCRIPTION: Example of applying the authentication decorator to a Flask API endpoint. This shows how to protect routes by requiring valid authentication tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/api-resources/python.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_cors import cross_origin\n\nAPP = Flask(__name__)\n\n@APP.route(\"/user/info\")\n@cross_origin(headers=[\"Content-Type\", \"Authorization\"])\n@requires_auth\ndef api:\n# Your API Logic\n```\n\n----------------------------------------\n\nTITLE: Embedding an Introductory Section Component in MDX with JSX\nDESCRIPTION: This snippet demonstrates how to embed a custom MDX React component named 'Intro', passing 'connector' and 'sdk' as props, along with a documentation link. This initializes the documentation page with a tailored introduction for the Naver connector and Expo (React Native) stack. It requires proper import of the 'Intro' MDX fragment and relies on React/MDX rendering.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-naver.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Intro connector={connector} sdk=\"Expo (React Native)\" link=\"https://expo.dev\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Azure AD Connector Constant in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant named `connector` assigned the string value 'Azure AD'. This constant is likely used within the MDX document, potentially passed as a prop to imported components, to consistently refer to the Azure AD connector being configured throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-azure-ad.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Azure AD';\n```\n\n----------------------------------------\n\nTITLE: Displaying MFA Factor Types and Examples in Markdown\nDESCRIPTION: This markdown table shows different types of authentication factors (Knowledge, Possession, Inherence) and provides examples of verification factors supported by Logto for each type.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/mfa/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tipos        | Qué significa   | Factores de verificación (compatibles con Logto)                                                            |\n| ------------ | --------------- | ----------------------------------------------------------------------------------------------------------- |\n| Conocimiento | Algo que sabes  | Contraseña, código de verificación por correo electrónico y códigos de respaldo                             |\n| Posesión     | Algo que tienes | Código de verificación por SMS, OTP de la aplicación de autenticación, OTP de hardware (clave de seguridad) |\n| Inherencia   | Algo que eres   | Biométricos como huellas dactilares, identificación facial                                                  |\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in MDX/JavaScript\nDESCRIPTION: Exports a constant named 'connector' with the string value 'SAML'. This constant is likely used within the MDX file or imported components (like `<Intro>`, `<AddSocialConnector>`, etc.) to dynamically display the connector name (SAML) in the documentation content.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-saml.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'SAML';\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for WordPress and Facebook Integration Guide\nDESCRIPTION: This code snippet demonstrates the usage of imported MDX components to structure the tutorial content. It includes sections for creating a Logto application, integrating WordPress with Logto, adding and setting up the Facebook connector, and testing the implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-facebook.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"WordPress plugin\" link=\"https://wordpress.org/\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\"WordPress\" />\n\n## Integrate WordPress with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add Facebook connector \\{#add-connector-connector}\n\n<AddSocialConnector connector={connector} framework=\"WordPress\" />\n\n## Set up Facebook login \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Facebook connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSocialConnector connector={connector} />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"WordPress plugin\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Documenting Page Structure with Embedded Comments - JavaScript\nDESCRIPTION: This short snippet consists of a code comment explaining why the templates are divided into sections and the lack of TOC customization in the Docusaurus framework. Its purpose is to provide maintainers with context about content organization decisions. There are no dependencies or parameters, and it does not affect runtime behavior. It improves code readability and future maintainability.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-oidc-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FetchOrganizationTokenForUser Component in React\nDESCRIPTION: This snippet imports the FetchOrganizationTokenForUser component and other code snippets, then renders the component with specific props. It demonstrates how to set up the component for fetching an organization token for a user.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Further Readings Component in MDX\nDESCRIPTION: This MDX/JSX snippet renders the `FurtherReadings` component, likely imported from `./fragments/_further-readings.mdx`. This component typically displays links to related documentation, advanced topics, or next steps relevant to the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-github.mdx#2025-04-22_snippet_9\n\nLANGUAGE: mdx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Impersonation Request API Call\nDESCRIPTION: HTTP request example for initiating user impersonation from Sarah's application to TechCorp's server.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/developers/user-impersonation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/request-impersonation HTTP/1.1\nHost: api.techcorp.com\nAuthorization: Bearer <Sarah's_access_token>\nContent-Type: application/json\n\n{\n  \"userId\": \"alex123\",\n  \"reason\": \"Investigando problema de acceso a recursos\",\n  \"ticketId\": \"TECH-1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: Imports multiple Markdown code snippets and renders them in a ConfigApiResources component. The imported snippets demonstrate different approaches to API resource configuration, including basic configuration, resources with scopes, and resources with shared scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying SMTP Email Connector Option with DocCardList in MDX\nDESCRIPTION: This code creates a visual card for the SMTP connector option, which allows users to connect to their email service using the Simple Mail Transfer Protocol when other solutions don't meet their needs.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/connectors/email-connectors/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'SMTP',\n      href: '/integrations/smtp',\n      description: 'The official Logto connector for SMTP.',\n      customProps: {\n        icon: <Smtp />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Blorc.Core Script Reference in HTML\nDESCRIPTION: This snippet shows how to include the Blorc.Core injector script in the index.html file of a Blazor WebAssembly project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/dotnet-blazor-wasm/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- ... -->\n  <script src=\"_content/Blorc.Core/injector.js\"></script>\n  <!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client for Express\nDESCRIPTION: Initializes the Logto client configuration with application credentials and endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogtoExpressConfig } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  appId: '<your-application-id>',\n  appSecret: '<your-application-secret>',\n  endpoint: '<your-logto-endpoint>', // 例: http://localhost:3001\n  baseUrl: '<your-express-app-base-url>', // 例: http://localhost:3000\n};\n```\n\n----------------------------------------\n\nTITLE: Authentication Status View Template in ERB\nDESCRIPTION: ERB template showing how to conditionally display sign-in or sign-out links based on authentication status.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<% if @client.is_authenticated? %>\n  <a href=\"<%= sign_out_path %>\">Sign out</a>\n<% else %>\n  <a href=\"<%= sign_in_path %>\">Sign in</a>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Requesting User Consent for New Permissions\nDESCRIPTION: Code example showing how to prompt users to consent to new permissions by using the signIn method with the consent prompt parameter.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/authorization/organization-template/configure-organization-template.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nsignIn({ redirectUri: 'your-redirect-url', prompt: 'consent' });\n```\n\n----------------------------------------\n\nTITLE: Handling Callback in Rails Controller\nDESCRIPTION: This snippet shows how to handle the callback in a Rails controller after the user is redirected back from Logto.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass SampleController < ApplicationController\n  # highlight-start\n  def callback\n    @client.handle_sign_in_callback(url: request.original_url)\n  end\n  # highlight-end\nend\n```\n\n----------------------------------------\n\nTITLE: Importing User Info API Documentation Components in JSX\nDESCRIPTION: Imports documentation fragments for user info retrieval APIs and scopes/claims from Logto's documentation system.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GetUserInfoApis from '../../fragments/_get-user-info-apis.mdx';\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Code Component\nDESCRIPTION: Imports a reusable MDX component that contains code examples for getting access tokens and renders it in the current context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<GetAccessTokenCode />\n```\n\n----------------------------------------\n\nTITLE: Cloning Logto Dart SDK from GitHub\nDESCRIPTION: Git command to clone the Logto Dart SDK repository directly from GitHub for developers who prefer forking their own version.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/logto-io/dart\n```\n\n----------------------------------------\n\nTITLE: Configuring FetchOrganizationTokenForUser Component\nDESCRIPTION: Usage of the FetchOrganizationTokenForUser component with organization scope and code snippet props for configuration and token access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Swift SDK での組織スコープ設定\nDESCRIPTION: Logto Swift SDK で組織スコープを設定する方法です。LogtoConfig インスタンスを作成する際に scopes パラメーターに UserScope.organizations.rawValue を追加します。\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Logto\nimport LogtoClient\n\nlet config = try? LogtoConfig(\n    // ...\n    scopes: [\n        UserScope.organizations.rawValue,\n    ],\n    // ...\n)\nlet client = LogtoClient(useConfig: config)\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Component in React/MDX\nDESCRIPTION: Imports a pre-defined MDX component named GetAccessTokenCode from a relative path and renders it in the document.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GetAccessTokenCode from './code/_get-access-token-code.mdx';\n\n<GetAccessTokenCode />\n```\n\n----------------------------------------\n\nTITLE: Listing Existing Connectors with Logto CLI\nDESCRIPTION: Use this command to list existing connectors added to your Logto instance. The output shows official and third-party connectors separately.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/using-cli/manage-connectors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlogto connector list\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cli connector list\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli connector list\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in JSX\nDESCRIPTION: This code imports various components for configuring API resources in Logto and renders them using the ConfigApiResources component. The imported code snippets are passed as props to the main component.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript\nDESCRIPTION: This JavaScript snippet defines and exports a constant `connector` with the value 'Microsoft Entra ID OIDC enterprise SSO'. This constant makes the connector name reusable within the MDX document, likely passed as a prop to imported components like `<Intro>` or `<SaveYourConfiguration>`.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NPM Installation Component in MDX\nDESCRIPTION: Imports a reusable NPM installation component and renders it with the @logto/sveltekit package name parameter\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/sveltekit/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/sveltekit\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Variables for Connector Selection - JavaScript\nDESCRIPTION: This snippet exports a named constant indicating the selected connector ('Azure AD'). It standardizes connector naming across the documentation, ensuring consistency when passing it as a prop to MDX fragments. The approach uses ES module exports in JavaScript/MDX hybrid files.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-azure-ad.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Azure AD';\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name in JavaScript Module\nDESCRIPTION: Exports a constant named 'connector' with the string value 'Twilio'. This constant is likely intended for use within the MDX components imported in this file (e.g., `<Intro connector={connector}>`, `<AddPasswordlessConnector connector={connector}>`) to dynamically pass the connector name.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-twilio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Twilio';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Documentation Components\nDESCRIPTION: Imports MDX component files for a guide tip, installation instructions, and integration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/expo/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GuideTip from './_guide-tip.md';\nimport Installation from './_installation.mdx';\nimport Integration from './_integration.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in MDX\nDESCRIPTION: Imports required code fragments and components for organization token configuration and renders a FetchOrganizationTokenForUser component with specific props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/nuxt/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"UserScope.Organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Export Connector Configuration\nDESCRIPTION: Exports the connector name as a constant for use throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-go-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components and Code Examples\nDESCRIPTION: These import statements bring external components (`FetchOrganizationTokenForUser`, `ConfigOrganizationCode`, `GetOrganizationAccessTokenCode`) into the current MDX file's scope. `FetchOrganizationTokenForUser` is likely a template or wrapper component, while the others (`ConfigOrganizationCode`, `GetOrganizationAccessTokenCode`) probably contain specific code examples or configurations related to organization tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue package with npm\nDESCRIPTION: This command installs the Logto Vue SDK using npm (Node Package Manager). It adds the @logto/vue package to your project's dependencies.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Connector Variable Declaration\nDESCRIPTION: Exports a constant defining the SSO connector name for use throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-react-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Route in Rails\nDESCRIPTION: Setting up the Rails route to handle the authentication callback at the path specified in the Logto redirect URI configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  # highlight-next-line\n  get \"/callback\", to: \"sample#callback\"\nend\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Access Token Fetching Components in JSX\nDESCRIPTION: This code snippet imports and uses components to fetch an access token for API resources. It utilizes a reusable component 'FetchAccessTokenForApiResources' and passes in the necessary props, including a code snippet for getting the access token.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configurando plantilla de email de invitación en JSON\nDESCRIPTION: Ejemplo de configuración JSON para una plantilla de correo electrónico de invitación a una organización. Incluye el asunto, contenido HTML con un enlace de invitación, tipo de uso y formato del contenido.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/organization-experience/invite-organization-members.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subject\": \"Bienvenido a mi organización\",\n  \"content\": \"<p>Únete a {{organization.name}} mediante este <a href=\\\"{{link}}\\\" target=\\\"_blank\\\">enlace</a>.</p>\",\n  \"usageType\": \"OrganizationInvitation\",\n  \"type\": \"text/html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SvelteKit SDK Installation Component\nDESCRIPTION: This code imports a reusable installation instruction component and renders it specifically for the @logto/sveltekit package. The NpmLikeInstallation component likely displays npm, yarn, and pnpm installation commands.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/sveltekit/_installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NpmLikeInstallation from '../../fragments/_npm-like-installation.mdx';\n\n<NpmLikeInstallation packageName=\"@logto/sveltekit\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in MDX (JavaScript)\nDESCRIPTION: This JavaScript code snippet, embedded within an MDX file, exports a constant named `connector` holding the string 'X (Twitter)'. This constant is used by imported MDX components (like `<Intro>`, `<AddSocialConnector>`, etc.) to dynamically display the correct connector name throughout the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-expo-react-native-x-twitter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'X (Twitter)';\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Constant in MDX (JavaScript)\nDESCRIPTION: This JavaScript code snippet, embedded within an MDX file, defines and exports a constant named 'connector' with the string value 'OAuth2'. This constant is likely used programmatically within the MDX file or passed as a prop to imported components (like `<Intro>`, `<AddSocialConnector>`, etc.) to dynamically specify the type of social connector being discussed or configured in the tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-oauth2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OAuth2';\n```\n\n----------------------------------------\n\nTITLE: Embedding MDX Components for Stepwise Documentation - MDX/JSX\nDESCRIPTION: This snippet exemplifies embedding imported MDX and JSX components directly into the Markdown body to assemble a stepwise tutorial. Each component represents tutorial content or a guide, accepting specific props (such as connector or sdk). This approach requires all fragments to be present and properly exported. Inputs are prop values for each fragment; output is rendered tutorial sections. This pattern enhances modularity and maintainability.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-php-kakao.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"PHP\" link=\"https://www.php.net\" />\n\n## Create an application in Logto \\{#create-an-application-in-logto}\n\n<CreateApplication type=\"Traditional web\" framework=\"Laravel\" />\n\n## Integrate Laravel with Logto \\{#integrate-with-logto}\n\n<FrameworkGuide />\n\n## Add Kakao connector \\{#add-connector-connector}\n\n<AddSocialConnector connector={connector} framework=\"Laravel\" />\n\n## Set up Kakao login \\{#set-up-connectorconfigname}\n\n<ConnectorGuide />\n\n### Save your configuration \\{#save-your-configuration}\n\n<SaveYourConfiguration connector={connector} />\n\n## Enable Kakao connector in Sign-in Experience \\{#enable-connector-connector-in-sign-in-experience}\n\n<EnableSocialConnector connector={connector} />\n\n## Testing and Validation \\{#testing-and-validation}\n\n<TestingAndValidation connector={connector} sdk=\"PHP\" />\n\n## Further readings \\{#further-readings}\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Configuring FetchOrganizationTokenForUser Component in MDX\nDESCRIPTION: This MDX snippet shows the usage of the `FetchOrganizationTokenForUser` component. It configures the component by passing the `organizationScope` prop directly and rendering the imported `ConfigOrganizationCode` and `GetOrganizationAccessTokenCode` components as props (`configOrganizationCode` and `getOrganizationAccessTokenCode` respectively). This pattern allows modular composition of documentation pages by embedding specific code examples or content blocks.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<FetchOrganizationTokenForUser\n  organizationScope=\"urn:logto:scope:organizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in React (JSX)\nDESCRIPTION: This snippet exports a constant named 'connector' with the value describing the SSO provider in use. This constant is referenced throughout the documentation fragments to ensure consistent naming. No external dependencies are required beyond a standard JavaScript/React environment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Microsoft Entra ID SAML enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes Documentation Components in React/MDX\nDESCRIPTION: Imports two components related to scopes and claims documentation from separate files and renders the main component with the claims code passed as a prop. Uses MDX syntax for component composition.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Scopes and Claims Components in JSX\nDESCRIPTION: This snippet imports two components related to scopes and claims, then renders the main component with the code component passed as a prop. It demonstrates how to compose and render React components in a documentation context.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/next-auth/_scopes-and-claims.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ScopesAndClaims from '../../fragments/_scopes-and-claims.mdx';\n\nimport ScopesAndClaimsCode from './_scopes-and-claims-code.md';\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Tokens in JavaScript\nDESCRIPTION: Code showing how to get organization tokens or token claims in JavaScript using the Logto client.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclaims = await client.getOrganizationTokenClaims(\"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Importing WordPress Integration Component in JSX/MDX\nDESCRIPTION: Imports a WordPress integration component from a local file and renders it with an accompanying link to WordPress plugin documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/wordpress-plugin/_for-tutorial.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Integration from './_integration.mdx';\n\n<Integration />\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Gradle (Linux/macOS)\nDESCRIPTION: Command to run a Spring Boot application using Gradle on Linux or macOS systems.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/api-resources/spring-boot.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew bootRun\n```\n\n----------------------------------------\n\nTITLE: Redis Connection with URL-Encoded Password\nDESCRIPTION: Example showing how to handle special characters in Redis password using URL encoding.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/central-cache.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=redis://:foo%3D@your.redis.url.com\n```\n\n----------------------------------------\n\nTITLE: Installing Logto Browser SDK for Vanilla JS\nDESCRIPTION: Install the Logto Browser SDK using npm or yarn for a Vanilla JavaScript project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/vanilla-js/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @logto/browser\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/browser\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Token Fetch\nDESCRIPTION: Component implementation for fetching API resource access tokens.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/vanilla-js/_api-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"getAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Seeding Logto Database with CLI\nDESCRIPTION: Commands to seed the Logto database using the Logto CLI or npx.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlogto db seed\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @logto/cli db seed\n```\n\n----------------------------------------\n\nTITLE: Rendering Topbar Component in React MDX File - JavaScript\nDESCRIPTION: This snippet renders the 'Topbar' React component within the MDX document. It provides a navigation UI element at the top of the privacy policy page. The surrounding context assumes that the component has been imported, and that React/MDX processing is in place. No input parameters are required, and the output is the rendered Topbar as part of the React component tree.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/terms/privacy-policy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Topbar />\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK with pnpm\nDESCRIPTION: Command to install the Logto SDK for Nuxt using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/nuxt\n```\n\n----------------------------------------\n\nTITLE: Installing Logto SDK with npm\nDESCRIPTION: Command to install the Logto SDK for Nuxt using npm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @logto/nuxt\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for SSO Integration Guide\nDESCRIPTION: Imports various MDX fragment files that contain sections of the integration guide, including introduction, application creation, connector setup, and testing steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/_template-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/${sdkDocDir}/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/${connectorDocDir}/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SDK Version in Gradle\nDESCRIPTION: Sets the minimum SDK version requirement for Android to 18 or higher in the build.gradle file to support flutter_secure_storage functionality.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/code-snippets/_flutter-secure-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n  android {\n      ...\n\n      defaultConfig {\n          ...\n          minSdkVersion 18\n          ...\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing Organization Token Components in React JSX\nDESCRIPTION: Imports the necessary MDX components and code snippets needed to render documentation about fetching organization tokens for users. Sets up the main component with appropriate props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/_fetch-organization-token-for-user.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchOrganizationTokenForUser from '../../../fragments/_fetch-organization-token-for-user.mdx';\n\nimport ConfigOrganizationCode from './code/_config-organization-code.md';\nimport GetOrganizationAccessTokenCode from './code/_get-organization-access-token-code.md';\n\n<FetchOrganizationTokenForUser\n  organizationScope=\"core.UserScopeOrganizations\"\n  configOrganizationCode={<ConfigOrganizationCode />}\n  getOrganizationAccessTokenCode={<GetOrganizationAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Sign-in Experience Feature Cards with DocCardList in MDX\nDESCRIPTION: This MDX code block imports DocCardList and various SVG icons to create a navigation section for sign-in experience related developer features. It displays cards for custom token claims and user impersonation, each with descriptive text and an icon.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport JwtClaims from '@site/docs/developers/assets/icons/jwt-claims.svg';\nimport UserImpersonation from '@site/docs/developers/assets/icons/role.svg';\nimport Key from '@site/docs/developers/assets/icons/key.svg';\nimport Webhook from '@site/docs/developers/assets/icons/hook.svg';\nimport AuditLog from '@site/docs/developers/assets/icons/list.svg';\nimport Settings from '@site/docs/developers/assets/icons/gear.svg';\n\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'Custom token claims',\n      href: '/developers/custom-token-claims',\n      description: 'Expand the capabilities of access control by attaching additional claims, which can help achieve ABAC or reject token issuance.',\n      customProps: {\n        icon: <JwtClaims />,\n      }\n    },\n    {\n      type: 'link',\n      label: 'User impersonation',\n      href: '/developers/user-impersonation',\n      description: 'Allow authorized users to temporarily act on behalf of end users, useful for troubleshooting, customer support, and administrative tasks.',\n      customProps: {\n        icon: <UserImpersonation />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering User Info Documentation Components in JSX\nDESCRIPTION: Renders the imported documentation components with specific props to display information about user info APIs and scopes/claims configuration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/webflow/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<GetUserInfoApis getIdTokenClaimsApi=\"getIdTokenClaims\" fetchUserInfoApi=\"fetchUserInfo\" />\n\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Installing Logto with npm\nDESCRIPTION: Command to initialize and start Logto using npm.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @logto@latest\n```\n\n----------------------------------------\n\nTITLE: Simplified Redis Connection String\nDESCRIPTION: Example of a minimal Redis connection string without username and port specification.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/central-cache.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nREDIS_URL=redis://:your-password@your.redis.url.com\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/vue with pnpm\nDESCRIPTION: Command to install the Logto Vue integration library using pnpm package manager.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @logto/vue\n```\n\n----------------------------------------\n\nTITLE: Invoking MDX Components for Flutter SAML SSO Guide\nDESCRIPTION: These MDX snippets invoke various imported components to structure the tutorial guide for setting up SAML enterprise SSO with Flutter. Each component call corresponds to a specific section of the guide, passing relevant props like the connector type (using the exported `connector` variable), SDK/framework name ('Flutter'), application type ('Native app'), or external links to customize the rendered content from the imported fragments. Components cover introduction, application creation, SDK integration, connector addition, IdP configuration, saving configuration, enabling the connector, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-flutter-saml-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Intro connector={connector} sdk=\"Flutter\" link=\"https://flutter.dev\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<CreateApplication type=\"Native app\" framework=\"Flutter\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<FrameworkGuide />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<AddSsoConnector framework=\"Flutter\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<ConnectorGuide />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<EnableSsoConnector />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<TestingAndValidation connector={connector} sdk=\"Flutter\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Component with Props in MDX\nDESCRIPTION: This snippet demonstrates rendering the imported `ScopesAndClaims` MDX component. It passes the imported `ScopesAndClaimsCode` component as a prop named `configScopesCode` to the `ScopesAndClaims` component. This is a common pattern in React/MDX for composing UIs and passing data or components down the hierarchy.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/passport/_scopes-and-claims.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ScopesAndClaims configScopesCode={<ScopesAndClaimsCode />} />\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Name Constant in JavaScript/MDX\nDESCRIPTION: This JavaScript snippet, likely within an MDX file, exports a constant string variable named 'connector'. It holds the value 'Okta enterprise SSO', intended for use within the documentation page, potentially passing it as a prop to imported MDX components like <Intro> or <SaveYourConfiguration> to ensure consistency in naming the SSO connector.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-expo-react-native-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Okta enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Modular Documentation - JavaScript\nDESCRIPTION: This snippet imports various MDX fragments representing different sections of a documentation page. These imports enable splitting complex documentation into smaller, manageable, and reusable components. No external dependencies are required other than the Docusaurus project and the referenced MDX files; the imported components are used to render content sections dynamically.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-flutter-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/flutter/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/fr/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-saml/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Webhook Flow with Mermaid Diagram\nDESCRIPTION: A Mermaid diagram illustrating the flow of two webhooks triggered by the 'PostSignIn' event in Logto. The diagram shows how the sign-in completion event triggers Post-SignIn which activates two webhooks that make POST API calls to different service endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/developers/webhooks/README.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  subgraph Logto\n    SF(Anmeldung abgeschlossen)\n    PS(Post-Anmeldung)\n    WH2(Webhook 2)\n    WH1(Webhook 1)\n  end\n\n  subgraph Service 2\n    E2(Endpoint)\n  end\n\n  subgraph Service 1\n    E1(Endpoint)\n  end\n\n  SF -->|Auslösen| PS\n  PS --> WH1\n  PS --> WH2\n  WH1 --->|POST API-Aufruf| E1\n  WH2 --->|POST API-Aufruf| E2\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Access Token Components in MDX\nDESCRIPTION: Imports MDX fragments and code components, then renders them with specific props to display access token fetching documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/quick-starts/framework/php/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n\n<FetchAccessTokenForApiResources\n  getAccessTokenApi=\"GetAccessToken\"\n  getAccessTokenCode={<GetAccessTokenCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Anchor for User Experience Section in Markdown\nDESCRIPTION: This snippet demonstrates how to create an anchor in Markdown for the section explaining the user experience for invitation-only sign-up.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/sign-up-and-sign-in/disable-user-registration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## User experience for invitation-only sign-up \\{#user-experience-for-invitation-only-sign-up}\n```\n\n----------------------------------------\n\nTITLE: Conditional Explanation for Option Type in JSX\nDESCRIPTION: This snippet renders additional explanation when the 'type' prop is 'option'. It describes how configuring the option fetches user information from the userinfo endpoint and makes custom data available.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_claims-need-network-request.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{props.type === 'option' && (\n\n<>\n  By configuring <code>{props.configOption}</code>, the SDK will fetch the user information by\n  requesting to the{' '}\n  <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#UserInfo\">userinfo endpoint</a>{' '}\n  after the user is signed in, and <code>{props.value ?? 'user.custom_data'}</code> will be\n  available once the request is completed.\n</>\n)}\n```\n\n----------------------------------------\n\nTITLE: Rendering Further Readings Component for WordPress Hugging Face Integration\nDESCRIPTION: Renders the FurtherReadings component that provides additional resources and documentation for extending the WordPress Hugging Face integration.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-hugging-face.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Token - Python Example\nDESCRIPTION: Example of retrieving an organization token using the Logto Python SDK.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/authorization/organization-template/protect-organization-resources.mdx#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntoken = await client.getOrganizationToken(\"<organization-id>\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework Integration Guide using FrameworkGuide Component (MDX)\nDESCRIPTION: Embeds the iOS (Swift) framework integration guide using the 'FrameworkGuide' component. This component likely contains the specific steps for integrating the Logto Swift SDK into an iOS project.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-sendgrid.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<FrameworkGuide />\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: Creates a LogtoClient instance with defined access scopes for shopping and store operations, along with their corresponding API resource endpoints. The configuration specifies read and write permissions for both shopping and store services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"shopping:read\", \"shopping:write\", \"store:read\", \"store:write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Fragments and Components in Next.js (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates importing various MDX documentation fragments and guide components into a Next.js documentation file. It organizes tutorial steps into discrete sections (Intro, application creation, connector integration, etc.), laying the foundation for the page's structure. No external dependencies are required beyond the existence of the fragment files; intended for usage within a Next.js app documentation or tutorial.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-next-sendgrid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/next/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/sendgrid/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Variable in React\nDESCRIPTION: This code snippet sets a constant variable 'connector' with the value 'OIDC enterprise SSO'. This variable is likely used throughout the document to refer to the specific SSO connector being implemented.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-oidc-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'OIDC enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Resource Configuration Components in React\nDESCRIPTION: This snippet imports necessary components and code snippets, then renders a ConfigApiResources component with the imported code examples as props. It demonstrates how to structure and display API resource configuration documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ko/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Access Token Components in React JavaScript\nDESCRIPTION: This snippet imports a React fragment component for fetching access tokens and a code example from respective module paths. The imported component is intended to be used in the React DOM structure to demonstrate or facilitate acquiring access tokens for API resources. Dependencies include React and proper path setup for the referenced fragment and code markdown files.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/expo/api-resources/_fetch-access-token-for-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FetchAccessTokenForApiResources from '../../../fragments/_fetch-access-token-for-api-resources.mdx';\n\nimport GetAccessTokenCode from './code/_get-access-token-code.md';\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage Provider\nDESCRIPTION: CLI command to configure Azure Storage as the storage provider with connection string and container settings\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/file-storage-provider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm logto db system set storageProvider '{\"provider\":\"AzureStorage\",\"connectionString\":\"DefaultEndpointsProtocol=https;AccountName=logto;AccountKey=oRhfTBHOHiBxxxxxxxxxxxxxxxxZ0se6XROftl/Xrow==;EndpointSuffix=core.windows.net\",\"container\":\"logto\"}'\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments in JavaScript/MDX\nDESCRIPTION: This snippet imports several documentation fragments (MDX files) and external guides that modularize the structure of the main documentation page. Dependencies include the MDX fragments and the corresponding file paths. Parameters such as 'connector', 'sdk', and 'framework' are used when rendering the components. Inputs are the connector and platform values, outputs are composed documentation sections. The pattern exemplifies modular documentation construction using MDX imports.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-naver.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\\nimport CreateApplication from './fragments/_create-application.mdx';\\nimport AddSocialConnector from './fragments/_add-social-connector.mdx';\\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\\nimport EnableSocialConnector from './fragments/_enable-social-connector.mdx';\\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-razor/_for-tutorial.mdx';\\nimport ConnectorGuide from '@site/docs/integrations/social/naver/_integration.mdx';\\n\\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuration de Wechat Open SDK dans Gradle\nDESCRIPTION: Configuration Gradle pour ajouter le dépôt Maven Central et le SDK WeChat Open dans un projet Android.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-docs/current/integrations/social/wechat-native/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n  // ...\n  mavenCentral()\n}\n\ndependencies {\n  // ...\n  api(\"com.tencent.mm.opensdk:wechat-sdk-android:6.8.0\")  // kotlin-script\n  // ou\n  api 'com.tencent.mm.opensdk:wechat-sdk-android:6.8.0'   // groovy-script\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Local Connector to Logto Instance\nDESCRIPTION: CLI command for creating a symbolic link between a custom connector and local Logto instance for testing purposes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/develop-your-connector/step-by-step-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd logto\nnpx @logto/cli connector link -p .\n```\n\n----------------------------------------\n\nTITLE: Initializing NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This snippet sets up NextAuth with a custom Logto provider. It configures authorization parameters including scopes and a resource URL for API access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access profile read write',\n          resource: 'https://shopping.your-app.com/api',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for OIDC Enterprise SSO Tutorial\nDESCRIPTION: This code snippet imports various MDX fragments and components used throughout the tutorial. It includes sections for introduction, application creation, SSO connector setup, configuration, testing, and further readings.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-blazor-wasm/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/sso/oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: MDX Component Usage\nDESCRIPTION: Implementation of imported MDX components to construct the tutorial content, including connector configuration and SDK integration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-okta-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" link=\"https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#blazor-webassembly\" />\n\n<CreateApplication type=\"シングルページアプリ\" framework=\".NET Core (Blazor WebAssembly)\" />\n\n<IntegrateSdk />\n\n<AddSsoConnector framework=\".NET Core (Blazor WebAssembly)\" />\n\n<ConnectorGuide />\n\n<SaveYourConfiguration connector={connector} />\n\n<EnableSsoConnector />\n\n<TestingAndValidation connector={connector} sdk=\".NET Core (Blazor WebAssembly)\" />\n\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Rendering Intro Component with Props for Hugging Face WordPress Integration\nDESCRIPTION: Renders the introduction component, passing the connector name ('Hugging Face') and SDK information ('WordPress plugin') as props, along with a link to the WordPress website.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-wordpress-plugin-hugging-face.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Intro connector={connector} sdk=\"WordPress plugin\" link=\"https://wordpress.org/\" />\n```\n\n----------------------------------------\n\nTITLE: Importing API Resource Configuration Fragments - JavaScript\nDESCRIPTION: This snippet imports a configuration fragment for API resources from a relative MDX file path. It is essential for incorporating API configuration documentation into the React application. The import relies on module resolution within a JavaScript or React build environment supporting MDX imports.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Claims from ID Token (Kotlin)\nDESCRIPTION: This code shows how to access additional claims from the ID token after configuring extra scopes. It uses the getIdTokenClaims method to retrieve the claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/android/README.mdx#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nlogtoClient.getIdTokenClaims { logtoException, idTokenClaims ->\n    println(\"IdTokenClaims:$idTokenClaims\")\n}\n// Now you can access additional claims `claims.email`, `claims.phone`, etc.\n```\n\n----------------------------------------\n\nTITLE: Visualizing Google One-tap Authentication Flow with Mermaid\nDESCRIPTION: This diagram shows the simplified authentication flow when using Google One-tap, which allows users to sign in with a single click without redirection to Google's authentication page. The sequence depicts the streamlined process from application visit to authentication completion.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/sign-up-and-sign-in/social-sign-in.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nactor user as User\n    participant app as Client Application\n    participant experience as Sign-in page\n    participant logto as Logto core service\n\n    user->>app: Visit the application\n    app->>experience: Redirect to sign-in page\n    user->>experience: Click on \"Sign in with Google\" button\n    experience->>Logto: Request to sign-in using Google authentication\n    Logto->>app: Authenticate user and redirect back to the application\n```\n\n----------------------------------------\n\nTITLE: Installing @logto/chrome-extension using Yarn (Bash)\nDESCRIPTION: This command utilizes the Yarn package manager to add the Logto SDK for Chrome extensions to your project. Running this command will fetch the package and update your project's dependencies, typically managed in `package.json` and `yarn.lock`.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-CN/docusaurus-plugin-content-docs/current/quick-starts/framework/chrome-extension/_installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @logto/chrome-extension\n```\n\n----------------------------------------\n\nTITLE: Triggering Authentication Flow with Logto SDK in React\nDESCRIPTION: This React component demonstrates how to extract the token and email from a magic link URL and trigger the authentication flow using the Logto SDK. It uses the useLogto hook and React Router for URL parameter handling.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/end-user-flows/one-time-token.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// React example\nimport { useLogto } from '@logto/react';\nimport { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst TokenLandingPage = () => {\n  const { signIn } = useLogto();\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    // Extract the token and email from the magic link\n    const oneTimeToken = searchParams.get('token');\n    const email = searchParams.get('email');\n\n    // Assuming this is your sign-in redirect URI\n    const redirectUri = 'https://yourapp.com/callback';\n\n    if (oneTimeToken && email) {\n      signIn({\n        redirectUri,\n        clearTokens: false, // Optional. See warning message below\n        extraParams: {\n          'one_time_token': oneTimeToken,\n          'login_hint': email,\n        },\n      });\n    }\n  }, [searchParams, signIn]);\n\n  return <>Please wait...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information in Next.js API Route Handler\nDESCRIPTION: Example of retrieving user claims in a Next.js API route handler using the getLogtoContext function and returning them as JSON response.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/next-app-router/_get-user-information.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLogtoContext } from '@logto/next/server-actions';\nimport { logtoConfig } from '../../logto';\n\nexport const dynamic = 'force-dynamic';\n\nexport async function GET() {\n  const { claims } = await getLogtoContext(logtoConfig);\n\n  return Response.json({ claims });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Microsoft Entra ID OIDC SSO Guide\nDESCRIPTION: This code imports various MDX fragments that make up different sections of the guide. It also exports a constant for the connector name and includes a truncate comment.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-express-microsoft-entra-id-oidc-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/express/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/entra-id-oidc/_integration.mdx';\n\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'Microsoft Entra ID OIDC enterprise SSO';\n\n{/* truncate */}\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing ConfigApiResources Component\nDESCRIPTION: Imports MDX fragments and code snippets, then composes them into a ConfigApiResources component with the imported code passed as props.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/framework/go/api-resources/_config-api-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport ConfigApiResources from '../../../fragments/_config-api-resources.mdx';\n\nimport ConfigResourcesCode from './code/_config-resources-code.md';\nimport ConfigResourcesWithScopesCode from './code/_config-resources-with-scopes-code.md';\nimport ConfigResourcesWithSharedScopesCode from './code/_config-resources-with-shared-scopes-code.md';\n\n<ConfigApiResources\n  configResourcesCode={<ConfigResourcesCode />}\n  configResourcesWithScopesCode={<ConfigResourcesWithScopesCode />}\n  configResourcesWithSharedScopesCode={<ConfigResourcesWithSharedScopesCode />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Logto Running Status Message\nDESCRIPTION: Example output displayed when Logto is successfully running, showing the URLs for accessing the core app and admin interface.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/get-started-with-oss.mdx#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nCore app is running at http://localhost:3001\nCore app is running at https://your-domain-url\nAdmin app is running at http://localhost:3002\nAdmin app is running at https://your-admin-domain-url\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Custom Scopes and Resources in Python\nDESCRIPTION: Creates a LogtoClient instance with specified read/write scopes and API resource endpoints. The configuration allows access to multiple API endpoints while defining the permitted operations through scopes.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/python/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configs\n        # highlight-start\n        scopes=[\"read\", \"write\"],\n        resources=[\"https://shopping.your-app.com/api\", \"https://store.your-app.com/api\"],\n        # highlight-end\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Fragments for Logto Documentation\nDESCRIPTION: This code imports various MDX fragments that contain different sections of the tutorial. It also sets up some variables and metadata for the documentation page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-mvc-aws-ses.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddPasswordlessConnector from './fragments/_add-passwordless-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnablePasswordlessConnector from './fragments/_enable-passwordless-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport FrameworkGuide from '@site/docs/quick-starts/framework/dotnet-mvc/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/docs/integrations/email/aws-ses/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n\nexport const connector = 'AWS SES';\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information in Logto\nDESCRIPTION: Two primary Logto methods for retrieving user information: getIdTokenClaims for decoding the local ID token (with limitations on available claims), and fetchUserInfo for retrieving comprehensive user data from the userinfo endpoint.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/fragments/_get-user-info-apis.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{props.getIdTokenClaimsApi}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{props.fetchUserInfoApi}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Configuration for Capacitor in TypeScript\nDESCRIPTION: This code snippet defines a configuration object for Logto in a Capacitor application. It specifies the application ID, Logto endpoint, and an array of API resources that the application will access.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/capacitor-js/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type LogtoConfig } from '@logto/capacitor';\n\nconst config: LogtoConfig = {\n  appId: '<your-application-id>',\n  endpoint: '<your-logto-endpoint>',\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // API リソースを追加\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Client with Additional Scopes\nDESCRIPTION: Shows how to initialize the Logto client with additional user info scopes for requesting more user claims.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/python/README.mdx#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom logto import UserInfoScope\n\nclient = LogtoClient(\n    LogtoConfig(\n        # ...other configurations\n        scopes = [\n            UserInfoScope.email,\n            UserInfoScope.phone,\n        ],\n    ),\n    storage=SessionStorage(),\n)\n```\n\n----------------------------------------\n\nTITLE: MDX Component Import Structure\nDESCRIPTION: Framework for importing various MDX fragments and components required for the documentation structure. Includes imports for tutorial sections like intro, application creation, SSO connector setup, and configuration steps.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-vue-okta-enterprise-sso.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Intro from './fragments/_intro.mdx';\nimport CreateApplication from './fragments/_create-application.mdx';\nimport AddSsoConnector from './fragments/_add-sso-connector.mdx';\nimport SaveYourConfiguration from './fragments/_save-your-configuration.mdx';\nimport EnableSsoConnector from './fragments/_enable-sso-connector.mdx';\nimport TestingAndValidation from './fragments/_testing-and-validation.mdx';\nimport IntegrateSdk from '@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx';\nimport ConnectorGuide from '@site/i18n/es/docusaurus-plugin-content-docs/current/integrations/sso/okta/_integration.mdx';\nimport FurtherReadings from './fragments/_further-readings.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Further Readings Component in MDX\nDESCRIPTION: Renders the 'FurtherReadings' MDX component. This component likely provides links to related documentation or resources for more information.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_9\n\nLANGUAGE: mdx\nCODE:\n```\n<FurtherReadings />\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Logto Provider in TypeScript\nDESCRIPTION: This snippet sets up NextAuth with a Logto provider. It exports handlers, signIn, signOut, and auth functions. The Logto provider is configured with custom scopes including 'openid', 'offline_access', and a Logto-specific organization scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from 'next-auth';\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    {\n      id: 'logto',,\n      // ...\n      authorization: {\n        params: {\n          // highlight-next-line\n          scope: 'openid offline_access urn:logto:scope:organizations',\n        },\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Components in JSX/MDX\nDESCRIPTION: Imports various MDX components and fragments for API resource documentation, including configuration, access token fetching, and organization token management.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/ruby/api-resources/_index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiResourcesDescription from '../../../fragments/_api-resources-description.md';\n\nimport ConfigApiResources from './_config-api-resources.mdx';\nimport FetchAccessTokenForApiResources from './_fetch-access-token-for-api-resources.mdx';\nimport FetchOrganizationTokenForUser from './_fetch-organization-token-for-user.mdx';\n```\n\n----------------------------------------\n\nTITLE: Deploying Database Alterations using CLI\nDESCRIPTION: Command to deploy database alterations using Logto CLI. This command will detect and apply any pending database schema changes to your Logto instance.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/logto-oss/using-cli/database-alteration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlogto db alteration deploy\n```\n\n----------------------------------------\n\nTITLE: Commenting on TOC Workaround for Docusaurus - JavaScript\nDESCRIPTION: Provides commentary describing a technical limitation: Docusaurus's inability to customize the Table of Contents (TOC) when using imported MDX. The inline comment informs maintainers about the workaround, referencing a related GitHub issue for context. No executable code; serves purely for documentation maintainability.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-express-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{/*\n  We have to divide templates into sections because imported mdx will not show in the TOC.\n  There's no way to customize TOC either. :-)\n\n  @see https://github.com/facebook/docusaurus/issues/3915\n*/}\n```\n\n----------------------------------------\n\nTITLE: Defining OrganizationScope Type Structure in TypeScript\nDESCRIPTION: TypeScript type definition for OrganizationScope objects used in organization permission-related webhook events. This type includes properties like id, name, and optional description.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/developers/webhooks/request.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ntype OrganizationScope = {\n  id: string;\n  name: string;\n  description?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList for HTTP Email Connector\nDESCRIPTION: MDX code that renders a DocCardList component displaying the HTTP email connector option which allows integration with custom email services through HTTP endpoints.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/connectors/email-connectors/README.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  items={[\n    {\n      type: 'link',\n      label: 'HTTP email connector',\n      href: '/integrations/http-email',\n      description: 'The official Logto connector for HTTP email.',\n      customProps: {\n        icon: <Http />,\n      }\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Exporting OIDC Connector Constant in JavaScript\nDESCRIPTION: This JavaScript snippet exports a constant variable named `connector` with the string value 'OIDC'. This constant is likely used within the MDX components imported in this file to dynamically display the connector name or pass it as a prop.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-dotnet-core-razor-pages-oidc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'OIDC';\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Backup Rules\nDESCRIPTION: Sets up Android backup rules while excluding FlutterSecureStorage preferences from the backup process.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/flutterflow/code-snippets/_flutter-secure-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<application ...\n  android:fullBackupContent=\"@xml/backup_rules\">\n</application>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<full-backup-content>\n  <exclude domain=\"sharedpref\" path=\"FlutterSecureStorage\"/>\n</full-backup-content>\n```\n\n----------------------------------------\n\nTITLE: Fetching Access Token with Refresh Token in Next.js\nDESCRIPTION: This snippet shows how to fetch a new access token using the refresh token in a Next.js application. It demonstrates making a POST request to Logto's OIDC token endpoint with the necessary parameters and headers, including basic authentication.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/next-auth/api-resources/code/_get-access-token-code.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nexport default async function Home() {\n  const session = await auth();\n\n  if (session?.refreshToken) {\n    // Replace the app ID and secret with your own, you can check the \"Integration\" section.\n    const basicAuth = Buffer.from('<logto-app-id>:<logto-app-secret>').toString('base64');\n\n    // Replace the URL with your Logto endpoint, should ends with `/oidc/token`\n    const response = await fetch('https://xxx.logto.app/oidc/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Basic ${basicAuth}`,\n      },\n      body: new URLSearchParams({\n        grant_type: 'refresh_token',\n        refresh_token: session.refreshToken,\n        resource: 'https://shopping.your-app.com/api',\n      }).toString(),\n    });\n\n    const data = await response.json();\n    console.log(data.access_token);\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes and Resources in Logto Express (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to configure the `scopes` and `resources` properties within the `LogtoExpressConfig` object. `scopes` define the permissions the application requests (e.g., 'read', 'write'), while `resources` specify the unique identifiers (URIs) of the API resources the access token should be valid for. This setup is essential for requesting specific access rights and defining the intended audience for the issued tokens in a Logto-integrated Express application. It depends on the `@logto/express` package.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/quick-starts/framework/express/api-resources/code/_config-resources-with-shared-scopes-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"app.ts\"\nimport { UserScope } from '@logto/express';\n\nconst config: LogtoExpressConfig = {\n  // ...other configs\n  // highlight-start\n  scopes: ['read', 'write'],\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'],\n  // highlight-end\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Connector Variable Declaration\nDESCRIPTION: Export declaration for the connector name variable used throughout the documentation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-next-google-workspace-enterprise-sso.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const connector = 'Google Workspace enterprise SSO';\n```\n\n----------------------------------------\n\nTITLE: Initializing Logto Client with New Organization Permission Scopes\nDESCRIPTION: This TypeScript code shows how to initialize a Logto client with new organization permission scopes. This is necessary when new permissions are introduced into the organization template.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/authorization/organization-template/configure-organization-template.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nnew LogtoClient({\n  appId: 'your-app-id',\n  endpoint: 'your-logto-endpoint',\n  scopes: [\n    'urn:logto:scope:organizations',\n    // ... your other existing organization permission scopes,\n    'new-organization-permission-scope',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Configuration Saving Section using SaveYourConfiguration Component (MDX)\nDESCRIPTION: Uses the 'SaveYourConfiguration' component to instruct the user on saving the SendGrid connector configuration. It passes the connector name (via the `connector` variable) as a prop.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-ios-swift-sendgrid.mdx#2025-04-22_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n<SaveYourConfiguration connector={connector} />\n```\n\n----------------------------------------\n\nTITLE: Adding Sign-in and Sign-out Buttons to Chrome Extension Popup HTML\nDESCRIPTION: This HTML snippet adds sign-in and sign-out buttons to the extension's popup page.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/chrome-extension/_integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"sign-in\">Sign in</button> <button id=\"sign-out\">Sign out</button>\n```\n\n----------------------------------------\n\nTITLE: Initializing LogtoClient with Organization Scopes in Ruby\nDESCRIPTION: This code snippet shows how to initialize a Logto client with organization scopes in Ruby. It requires the 'logto/core' and 'logto/client' modules, then creates a new LogtoClient instance with configuration that includes the organizations user scope.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/ruby/api-resources/code/_config-organization-code.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"logto/core\"\nrequire \"logto/client\"\n\n@client = LogtoClient.new(\n  config: LogtoClient::Config.new(\n    # ...其他配置\n    # highlight-next-line\n    scopes: [LogtoCore::USER_SCOPE[:organizations]]\n  ),\n  # ...其他配置\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto API Resources in TypeScript React\nDESCRIPTION: Shows how to set up multiple API resource endpoints in the Logto configuration object. The config specifies two API endpoints for shopping and store services.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/zh-TW/docusaurus-plugin-content-docs/current/quick-starts/framework/react/api-resources/code/_config-resources-code.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // ...other configs\n  // highlight-next-line\n  resources: ['https://shopping.your-app.com/api', 'https://store.your-app.com/api'], // 新增 API 資源 (API resources)\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Connector Enabling Component in MDX\nDESCRIPTION: Renders the 'EnableSsoConnector' MDX component. This component guides the user on how to enable the newly configured Microsoft Entra ID SAML SSO connector in the Logto Sign-in Experience.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/fr/docusaurus-plugin-content-blog-tutorial/build-with-logto/generated-dotnet-core-blazor-webassembly-microsoft-entra-id-saml-enterprise-sso.mdx#2025-04-22_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<EnableSsoConnector />\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in Nuxt.js Vue Template\nDESCRIPTION: Demonstrates how to display user information in a Nuxt.js application using Vue template syntax with the useLogtoUser hook. Includes a dynamic sign-in/sign-out button implementation.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/docs/quick-starts/framework/nuxt/_get-user-information.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  const user = useLogtoUser();\n</script>\n<template>\n  <!-- Display user information when signed in -->\n  <ul v-if=\"Boolean(user)\">\n    <li v-for=\"(value, key) in user\"><b>{{ key }}:</b> {{ value }}</li>\n  </ul>\n  <!-- Simplified button for sign-in and sign-out -->\n  <nuxt-link :to=\"`/sign-${ user ? 'out' : 'in' }`\"> Sign {{ user ? 'out' : 'in' }} </nuxt-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Search Using POSIX Mode\nDESCRIPTION: This example shows how to use regular expressions for searching by setting the mode to 'posix'. It searches using a regex pattern that matches various forms of 'Tom Scott'.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/de/docusaurus-plugin-content-docs/current/user-management/advanced-user-search.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnew URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Structuring Logto Integration Guide in Markdown\nDESCRIPTION: This snippet outlines the structure of the Logto integration guide for React Native using markdown. It includes sections for installation, client initialization, sign-in/sign-out implementation, and a checkpoint for testing the application.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/ja/docusaurus-plugin-content-docs/current/quick-starts/framework/vue/_for-tutorial.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<GuideTip />\n\n### インストール {#installation}\n\n<Installation />\n\n### LogtoClient の初期化 {#init-logtoclient}\n\n<InitClient />\n\n<ImplementSignInAndSignOut />\n\n<Checkpoint />\n```\n\n----------------------------------------\n\nTITLE: Exporting Amazon Connector Constant for Use in Documentation (JavaScript)\nDESCRIPTION: This snippet exports a constant named 'connector' with the value 'Amazon', which is used as a prop to MDX components within the documentation. This facilitates consistent configuration, allowing other components to dynamically reference the target social provider (Amazon). There are no external dependencies for this export, and it serves as a context variable for further content rendering.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/tutorial/build-with-logto/generated-python-amazon.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const connector = 'Amazon';\n```\n\n----------------------------------------\n\nTITLE: Visualizing Shared Session Cookie Flow in Logto\nDESCRIPTION: A flowchart diagram showing how Logto manages shared session cookies for a user accessing multiple client applications from the same user agent. It demonstrates the single sign-on experience across different client applications.\nSOURCE: https://github.com/logto-io/docs.git/blob/master/i18n/es/docusaurus-plugin-content-docs/current/end-user-flows/sign-out.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nsubgraph User [Agente de usuario A]\n  U[Usuario]\n\n  subgraph Layer1 [Dominio del cliente A]\n    A[Aplicación Cliente A]\n  end\n\n  subgraph Layer1 [Dominio del cliente B]\n    B[Aplicación Cliente B]\n  end\n\n  subgraph Layer2 [Dominio de Logto]\n      C{{¿Sesión de inicio de sesión de Logto?}}\n      D[Página de inicio de sesión]\n  end\nend\n\nU --> |Iniciar sesión| A\nA --> |Redirigir a Logto| C\nU --> |Iniciar sesión| B\nB --> |Redirigir a Logto| C\nC --> |No| D\nD --> |Crear sesión| C\n```"
  }
]