[
  {
    "owner": "antfu",
    "repo": "eslint-config",
    "content": "TITLE: Installing @antfu/eslint-config with CLI Wizard\nDESCRIPTION: Command to run the starter wizard that helps set up or migrate projects to use @antfu/eslint-config.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx @antfu/eslint-config@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Basic ESLint Config File\nDESCRIPTION: Creates a basic ESLint configuration file using @antfu/eslint-config with default settings.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.mjs\nimport antfu from '@antfu/eslint-config'\n\nexport default antfu()\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for @antfu/eslint-config\nDESCRIPTION: VS Code settings for optimal ESLint integration, including auto-fix on save and disabling distracting stylistic warnings while maintaining auto-fixing.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // Disable the default formatter, use eslint instead\n  \"prettier.enable\": false,\n  \"editor.formatOnSave\": false,\n\n  // Auto fix\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": \"explicit\",\n    \"source.organizeImports\": \"never\"\n  },\n\n  // Silent the stylistic rules in you IDE, but still auto fix them\n  \"eslint.rules.customizations\": [\n    { \"rule\": \"style/*\", \"severity\": \"off\", \"fixable\": true },\n    { \"rule\": \"format/*\", \"severity\": \"off\", \"fixable\": true },\n    { \"rule\": \"*-indent\", \"severity\": \"off\", \"fixable\": true },\n    { \"rule\": \"*-spacing\", \"severity\": \"off\", \"fixable\": true },\n    { \"rule\": \"*-spaces\", \"severity\": \"off\", \"fixable\": true },\n    { \"rule\": \"*-order\", \"severity\": \"off\", \"fixable\": true },\n    { \"rule\": \"*-dangle\", \"severity\": \"off\", \"fixable\": true },\n    { \"rule\": \"*-newline\", \"severity\": \"off\", \"fixable\": true },\n    { \"rule\": \"*quotes\", \"severity\": \"off\", \"fixable\": true },\n    { \"rule\": \"*semi\", \"severity\": \"off\", \"fixable\": true }\n  ],\n\n  // Enable eslint for all supported languages\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    \"typescript\",\n    \"typescriptreact\",\n    \"vue\",\n    \"html\",\n    \"markdown\",\n    \"json\",\n    \"jsonc\",\n    \"yaml\",\n    \"toml\",\n    \"xml\",\n    \"gql\",\n    \"graphql\",\n    \"astro\",\n    \"svelte\",\n    \"css\",\n    \"less\",\n    \"scss\",\n    \"pcss\",\n    \"postcss\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Lint-Staged with Simple Git Hooks\nDESCRIPTION: JSON configuration for package.json to enable pre-commit linting using lint-staged and simple-git-hooks, running ESLint with fix option before each commit.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"simple-git-hooks\": {\n    \"pre-commit\": \"pnpm lint-staged\"\n  },\n  \"lint-staged\": {\n    \"*\": \"eslint --fix\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ESLint Scripts to package.json\nDESCRIPTION: Example scripts to add to your package.json for running ESLint with and without auto-fixing.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"lint\": \"eslint\",\n    \"lint:fix\": \"eslint --fix\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Activating Git Hooks for Linting\nDESCRIPTION: Bash commands to install the necessary dependencies for pre-commit linting (lint-staged and simple-git-hooks) and activate the git hooks.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D lint-staged simple-git-hooks\n\n// to active the hooks\nnpx simple-git-hooks\n```\n\n----------------------------------------\n\nTITLE: Installing @antfu/eslint-config Manually\nDESCRIPTION: Command to manually install eslint and @antfu/eslint-config as development dependencies using pnpm.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D eslint @antfu/eslint-config\n```\n\n----------------------------------------\n\nTITLE: Configuring Type-Aware Rules in ESLint\nDESCRIPTION: JavaScript configuration to enable TypeScript's type-aware linting by specifying the tsconfig.json path in the ESLint configuration.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n// eslint.config.js\nimport antfu from '@antfu/eslint-config'\n\nexport default antfu({\n  typescript: {\n    tsconfigPath: 'tsconfig.json',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint Config Customization\nDESCRIPTION: Example of customizing @antfu/eslint-config with project type and stylistic preferences.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport antfu from '@antfu/eslint-config'\n\nexport default antfu({\n// Type of the project. 'lib' for libraries, the default is 'app'\n  type: 'lib',\n\n  // Enable stylistic formatting rules\n  // stylistic: true,\n\n  // Or customize the stylistic rules\n  stylistic: {\n    indent: 2, // 4, or 'tab'\n    quotes: 'single', // or 'double'\n  },\n\n  // TypeScript and Vue are autodetected, you can also explicitly enable them:\n  typescript: true,\n  vue: true,\n\n  // Disable jsonc and yaml support\n  jsonc: false,\n  yaml: false,\n\n  // `.eslintignore` is no longer supported in Flat config, use `ignores` instead\n  ignores: [\n    '**/fixtures',\n    // ...globs\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced ESLint Config Composition\nDESCRIPTION: An advanced example showing how to import and compose individual rule sets from @antfu/eslint-config for maximum customization.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport {\n  combine,\n  comments,\n  ignores,\n  imports,\n  javascript,\n  jsdoc,\n  jsonc,\n  markdown,\n  node,\n  sortPackageJson,\n  sortTsconfig,\n  stylistic,\n  toml,\n  typescript,\n  unicorn,\n  vue,\n  yaml,\n} from '@antfu/eslint-config'\n\nexport default combine(\n  ignores(),\n  javascript(/* Options */),\n  comments(),\n  node(),\n  jsdoc(),\n  imports(),\n  unicorn(),\n  typescript(/* Options */),\n  stylistic(),\n  vue(),\n  jsonc(),\n  yaml(),\n  toml(),\n  markdown(),\n)\n```\n\n----------------------------------------\n\nTITLE: Running ESLint Config Inspector\nDESCRIPTION: Command to run the @eslint/config-inspector tool, which visualizes what rules are enabled in your project and how they apply to different files.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpx @eslint/config-inspector\n```\n\n----------------------------------------\n\nTITLE: Configuring Neovim for @antfu/eslint-config\nDESCRIPTION: Neovim configuration for setting up ESLint with the same rule customizations as VS Code to hide stylistic warnings but maintain auto-fixing.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal customizations = {\n  { rule = 'style/*', severity = 'off', fixable = true },\n  { rule = 'format/*', severity = 'off', fixable = true },\n  { rule = '*-indent', severity = 'off', fixable = true },\n  { rule = '*-spacing', severity = 'off', fixable = true },\n  { rule = '*-spaces', severity = 'off', fixable = true },\n  { rule = '*-order', severity = 'off', fixable = true },\n  { rule = '*-dangle', severity = 'off', fixable = true },\n  { rule = '*-newline', severity = 'off', fixable = true },\n  { rule = '*quotes', severity = 'off', fixable = true },\n  { rule = '*semi', severity = 'off', fixable = true },\n}\n\nlocal lspconfig = require('lspconfig')\n-- Enable eslint for all supported languages\nlspconfig.eslint.setup(\n  {\n    filetypes = {\n      \"javascript\",\n      \"javascriptreact\",\n      \"javascript.jsx\",\n      \"typescript\",\n      \"typescriptreact\",\n      \"typescript.tsx\",\n      \"vue\",\n      \"html\",\n      \"markdown\",\n      \"json\",\n      \"jsonc\",\n      \"yaml\",\n      \"toml\",\n      \"xml\",\n      \"gql\",\n      \"graphql\",\n      \"astro\",\n      \"svelte\",\n      \"css\",\n      \"less\",\n      \"scss\",\n      \"pcss\",\n      \"postcss\"\n    },\n    settings = {\n      -- Silent the stylistic rules in you IDE, but still auto fix them\n      rulesCustomizations = customizations,\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Neovim Format on Save\nDESCRIPTION: Setting up ESLint auto-fixing on save in Neovim using an autocmd with the EslintFixAll command.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlspconfig.eslint.setup({\n  --- ...\n  on_attach = function(client, bufnr)\n    vim.api.nvim_create_autocmd(\"BufWritePre\", {\n      buffer = bufnr,\n      command = \"EslintFixAll\",\n    })\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom ESLint Overrides\nDESCRIPTION: Example of extending @antfu/eslint-config with custom rule overrides for specific file patterns.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport antfu from '@antfu/eslint-config'\n\nexport default antfu(\n  {\n    // Configures for antfu's config\n  },\n\n  // From the second arguments they are ESLint Flat Configs\n  // you can have multiple configs\n  {\n    files: ['**/*.ts'],\n    rules: {},\n  },\n  {\n    rules: {},\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Less Opinionated ESLint Rules\nDESCRIPTION: JavaScript configuration to use a less opinionated version of the ESLint config, disabling some of the maintainer's personal preferences for code style.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nimport antfu from '@antfu/eslint-config'\n\nexport default antfu({\n  lessOpinionated: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Overrides with File Extensions\nDESCRIPTION: Example showing how to override ESLint rules for specific file types and global settings\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport antfu from '@antfu/eslint-config'\n\nexport default antfu(\n  {\n    vue: true,\n    typescript: true\n  },\n  {\n    // Remember to specify the file glob here, otherwise it might cause the vue plugin to handle non-vue files\n    files: ['**/*.vue'],\n    rules: {\n      'vue/operator-linebreak': ['error', 'before'],\n    },\n  },\n  {\n    // Without `files`, they are general rules for all files\n    rules: {\n      'style/semi': ['error', 'never'],\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Framework-Specific Override Options\nDESCRIPTION: Example demonstrating how to use the overrides option for different frameworks and plugins\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport antfu from '@antfu/eslint-config'\n\nexport default antfu({\n  vue: {\n    overrides: {\n      'vue/operator-linebreak': ['error', 'before'],\n    },\n  },\n  typescript: {\n    overrides: {\n      'ts/consistent-type-definitions': ['error', 'interface'],\n    },\n  },\n  yaml: {\n    overrides: {\n      // ...\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Config Composer for Advanced Configuration\nDESCRIPTION: Example showing how to use the FlatConfigComposer for more flexible configuration composition\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport antfu from '@antfu/eslint-config'\n\nexport default antfu()\n  .prepend(\n    // some configs before the main config\n  )\n  // overrides any named configs\n  .override(\n    'antfu/imports',\n    {\n      rules: {\n        'import/order': ['error', { 'newlines-between': 'always' }],\n      }\n    }\n  )\n  // rename plugin prefixes\n  .renamePlugins({\n    'old-prefix': 'new-prefix',\n    // ...\n  })\n```\n\n----------------------------------------\n\nTITLE: Combining with Legacy ESLint Config\nDESCRIPTION: Example of how to combine @antfu/eslint-config with legacy eslintrc format configurations using @eslint/eslintrc compatibility layer.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.mjs\nimport antfu from '@antfu/eslint-config'\nimport { FlatCompat } from '@eslint/eslintrc'\n\nconst compat = new FlatCompat()\n\nexport default antfu(\n  {\n    ignores: [],\n  },\n\n  // Legacy config\n  ...compat.config({\n    extends: [\n      'eslint:recommended',\n      // Other extends...\n    ],\n  })\n\n  // Other flat configs...\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Editor-Specific Rule Modifications\nDESCRIPTION: ESLint configuration to disable the special handling of certain rules in editor environments, making them behave consistently in all contexts.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n// eslint.config.js\nimport antfu from '@antfu/eslint-config'\n\nexport default antfu({\n  isInEditor: false\n})\n```\n\n----------------------------------------\n\nTITLE: Using to-function Command with eslint-plugin-command in TypeScript\nDESCRIPTION: Example of using the 'to-function' command to transform an arrow function into a normal function. The transformation happens on save or when running eslint --fix.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\n/// to-function\nconst foo = async (msg: string): void => {\n  console.log(msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Result of to-function Transformation in TypeScript\nDESCRIPTION: The resulting code after the 'to-function' transformation has been applied, converting the arrow function to a standard function declaration.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nasync function foo(msg: string): void {\n  console.log(msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Disable Comments with New Plugin Prefix\nDESCRIPTION: Example showing how to update ESLint disable comments to use the new plugin prefix naming convention\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n-// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\n+// eslint-disable-next-line ts/consistent-type-definitions\ntype foo = { bar: 2 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Renaming in ESLint Config\nDESCRIPTION: Example of reverting plugin prefix renaming back to original names using the renamePlugins method\nSOURCE: https://github.com/antfu/eslint-config/blob/main/README.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport antfu from '@antfu/eslint-config'\n\nexport default antfu()\n  .renamePlugins({\n    ts: '@typescript-eslint',\n    yaml: 'yml',\n    node: 'n'\n    // ...\n  })\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ESLint Formatting for JavaScript\nDESCRIPTION: This code snippet shows a simple JavaScript function that should be formatted by ESLint rather than Prettier. It includes conditional logic and console output.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/all/markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This should be handled by ESLint instead of Prettier\nfunction identity(x) {\n  if (foo) {\n    console.log('bar')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Prettier Formatting for CSS\nDESCRIPTION: This CSS snippet demonstrates how Prettier should handle formatting for stylesheets. It includes a simple class selector with a color property.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/all/markdown.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* This should be handled by Prettier */\n.foo { color:red;}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ESLint Formatting for JavaScript Function\nDESCRIPTION: This snippet shows a JavaScript function that should be handled by ESLint rather than Prettier. It includes conditional logic and console logging.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/with-formatters/markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This should be handled by ESLint instead of Prettier\nfunction identity(x) {\n  if (foo) {\n    console.log('bar')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Prettier Formatting for CSS Styles\nDESCRIPTION: This CSS snippet demonstrates how Prettier should handle formatting for simple style declarations.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/with-formatters/markdown.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* This should be handled by Prettier */\n.foo {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ESLint Formatting for JavaScript Function\nDESCRIPTION: This JavaScript snippet shows a simple identity function with conditional logging, intended to be formatted by ESLint rather than Prettier.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/tab-double-quotes/markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This should be handled by ESLint instead of Prettier\nfunction identity(x) {\n\tif (foo) {\n\t\tconsole.log(\"bar\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Prettier Formatting for CSS\nDESCRIPTION: This CSS snippet defines a simple style rule for the 'foo' class, intended to be formatted by Prettier.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/tab-double-quotes/markdown.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* This should be handled by Prettier */\n.foo { color:red;}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Formatting with ESLint\nDESCRIPTION: Example of JavaScript code that should be handled by ESLint for formatting rather than Prettier. Demonstrates a simple identity function with a conditional statement.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/ts-strict/markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This should be handled by ESLint instead of Prettier\nfunction identity(x) {\n  if (foo) {\n    console.log('bar')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Code Formatting with Prettier\nDESCRIPTION: Example of CSS code that should be handled by Prettier for formatting. Shows a simple CSS rule with improper spacing that would be fixed by Prettier.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/ts-strict/markdown.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* This should be handled by Prettier */\n.foo { color:red;}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Formatting with ESLint\nDESCRIPTION: A JavaScript function demonstrating code that should be formatted by ESLint rather than Prettier. Shows a simple identity function with a conditional log statement that has inconsistent indentation.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/no-markdown-with-formatters/markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This should be handled by ESLint instead of Prettier\nfunction identity(x) {\n  if (foo) {\n    console.log('bar');\n  }\n  }\n```\n\n----------------------------------------\n\nTITLE: CSS Formatting with Prettier\nDESCRIPTION: A CSS code snippet demonstrating formatting that should be handled by Prettier. Shows a simple class selector with inconsistent spacing that Prettier would normalize.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/no-markdown-with-formatters/markdown.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* This should be handled by Prettier */\n.foo { color:red;}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function with ESLint Formatting\nDESCRIPTION: A simple identity function showcasing code that should be formatted by ESLint rather than Prettier. It includes a conditional statement that logs to the console.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/ts-override/markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This should be handled by ESLint instead of Prettier\nfunction identity(x) {\n  if (foo) {\n    console.log('bar')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling with Prettier Formatting\nDESCRIPTION: A basic CSS rule that should be handled by Prettier for formatting. It shows an improperly formatted style that would be corrected by Prettier.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/ts-override/markdown.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* This should be handled by Prettier */\n.foo { color:red;}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Formatting with ESLint\nDESCRIPTION: An example JavaScript function that should be formatted using ESLint rather than Prettier. The function demonstrates basic conditional logic and console output with comments indicating the preferred formatting tool.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/ts-strict-with-react/markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This should be handled by ESLint instead of Prettier\nfunction identity(x) {\n  if (foo) {\n    console.log('bar')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Formatting with Prettier\nDESCRIPTION: A simple CSS selector example that should be formatted using Prettier. The snippet shows a basic color definition for a class with a comment indicating the preferred formatting tool.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/ts-strict-with-react/markdown.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* This should be handled by Prettier */\n.foo { color:red;}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Formatting with ESLint\nDESCRIPTION: A simple JavaScript function demonstrating code formatting that should be handled by ESLint rather than Prettier. Shows conditional logic with console output inside a function.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/js/markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This should be handled by ESLint instead of Prettier\nfunction identity(x) {\n  if (foo) {\n    console.log('bar')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Formatting with Prettier\nDESCRIPTION: A basic CSS rule showing formatting that should be handled by Prettier. Demonstrates styling with color property on a class selector.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/output/js/markdown.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* This should be handled by Prettier */\n.foo { color:red;}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Code with ESLint Formatting\nDESCRIPTION: An example JavaScript function showing code that should be handled by ESLint rather than Prettier. The function has indentation issues that ESLint would flag.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/input/markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This should be handled by ESLint instead of Prettier\nfunction identity(x) {\n  if (foo) {\n    console.log('bar');\n  }\n  }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS Code with Prettier Formatting\nDESCRIPTION: A simple CSS rule example showing code that should be handled by Prettier. The formatting is intentionally poor to demonstrate what Prettier would fix.\nSOURCE: https://github.com/antfu/eslint-config/blob/main/fixtures/input/markdown.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* This should be handled by Prettier */\n.foo { color:red;}\n```"
  }
]