[
  {
    "owner": "tuist",
    "repo": "tuist",
    "content": "TITLE: Declaring Swift Package External Dependencies in Tuist Swift\nDESCRIPTION: This Swift code defines external dependencies for a Tuist project using the Swift Package Manager format within a `Package.swift` file. It includes standard SPM package declarations like `.package(url:from:)` and `.binaryTarget`, along with an optional `PackageSettings` block for custom configuration of package integration by Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n    import ProjectDescriptionHelpers\n\n    let packageSettings = PackageSettings(\n        productTypes: [\n            \"Alamofire\": .framework, // default is .staticFramework\n        ]\n    )\n\n#endif\n\nlet package = Package(\n    name: \"PackageName\",\n    dependencies: [\n        .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n    ],\n    targets: [\n        .binaryTarget(\n            name: \"Sentry\",\n            url: \"https://github.com/getsentry/sentry-cocoa/releases/download/8.40.1/Sentry.xcframework.zip\",\n            checksum: \"db928e6fdc30de1aa97200576d86d467880df710cf5eeb76af23997968d7b2c7\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Install Tuist using Homebrew (bash)\nDESCRIPTION: This snippet provides the bash commands necessary to install Tuist on macOS using the Homebrew package manager. It first taps the official Tuist Homebrew repository and then installs the latest version of the Tuist formula, finally running `tuist init` to initialize a new project or update the current directory.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap tuist/tuist\nbrew install --formula tuist\n\ntuist init\n```\n\n----------------------------------------\n\nTITLE: Define a new iOS application project\nDESCRIPTION: This code defines a `Project` using the ProjectDescription framework. It configures an iOS application target named \"MyApp\" with its associated settings, sources, resources, and dependencies. The code uses an extended default Info.plist and adds a unit test target.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/new-project.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    targets: [\n        .target(\n            name: \"MyApp\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.MyApp\",\n            infoPlist: .extendingDefault(\n                with: [\n                    \"UILaunchScreen\": [\n                        \"UIColorName\": \"\",\n                        \"UIImageName\": \"\",\n                    ],\n                ]\n            ),\n            sources: [\"MyApp/Sources/**\"],\n            resources: [\"MyApp/Resources/**\"],\n            dependencies: []\n        ),\n        .target(\n            name: \"MyAppTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyAppTests\",\n            infoPlist: .default,\n            sources: [\"MyApp/Tests/**\"],\n            resources: [],\n            dependencies: [.target(name: \"MyApp\")]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Package with Build Tool Plugin\nDESCRIPTION: Shows how to define a Swift Package with a build tool plugin for code linting. This example demonstrates a package manifest for a linting tool.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\nlet package = Package(\n    name: \"Framework\",\n    products: [\n        .library(name: \"Framework\", targets: [\"Framework\"]),\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", .upToNextMajor(from: \"0.56.1\")),\n    ],\n    targets: [\n        .target(\n            name: \"Framework\",\n            plugins: [\n                .plugin(name: \"SwiftLint\", package: \"SwiftLintPlugin\"),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Custom Container Translation\nDESCRIPTION: This snippet illustrates the translation of custom containers in markdown. It specifies that only the content of the container should be translated, not the container type itself. The example shows the original and incorrect translations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/contributors/translate.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    ::: warning 루트 변수\\\n    매니페스트의 루트에 있어야 하는 변수는...\n    :::\n\n    # Instead of\n    ::: 주의 루트 변수\\\n    매니페스트의 루트에 있어야 하는 변수는...\n    :::\n```\n\n----------------------------------------\n\nTITLE: Declaring External Dependencies in Tuist Project - Swift\nDESCRIPTION: This snippet shows how to update the project description file to declare 'Kingfisher' as an external dependency in both application and test targets. It uses the ProjectDescription module provided by Tuist. The primary input is the target dependency configuration; the output is an updated project spec used for builds. Dependencies: Tuist installed and set up in the project directory. All target metadata such as name, destination, bundleId, infoPlist, sources, resources, and dependencies need specifying.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/add-dependencies.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    targets: [\n        .target(\n            name: \"MyApp\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.MyApp\",\n            infoPlist: .extendingDefault(\n                with: [\n                    \"UILaunchStoryboardName\": \"LaunchScreen.storyboard\",\n                ]\n            ),\n            sources: [\"MyApp/Sources/**\"],\n            resources: [\"MyApp/Resources/**\"],\n            dependencies: [\n                .external(name: \"Kingfisher\") // [!code ++]\n            ]\n        ),\n        .target(\n            name: \"MyAppTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyAppTests\",\n            infoPlist: .default,\n            sources: [\"MyApp/Tests/**\"],\n            resources: [],\n            dependencies: [.target(name: \"MyApp\")]\n        ),\n    ]\n)\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Swift Package Dependencies with Xcode's Default Integration in Swift\nDESCRIPTION: Demonstrates how to declare Swift Package dependencies in your Tuist project manifest using Xcode's default integration mechanism. The example shows adding a remote package with an exact version requirement.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(name: \"MyProject\", packages: [\n    .remote(url: \"https://github.com/krzyzanowskim/CryptoSwift\", requirement: .exact(\"1.8.0\"))\n])\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist Project in Bash\nDESCRIPTION: This bash snippet shows the command used to initialize a Tuist project.  It should be executed in a chosen directory or within an Xcode project's or workspace's directory. The `tuist init` command sets up the necessary structure for a Tuist-managed project, which can then be used to generate and manage Xcode projects.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/quick-start/get-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist init\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuist Project Configuration in Swift\nDESCRIPTION: This Swift snippet demonstrates how to define a Tuist project using the ProjectDescription framework. It replaces the traditional `Package.swift` by creating a `Project.swift` file that declares a project named \"App\" with a single target. The target is configured for iOS, produces an app product, specifies a bundle identifier, and includes source files matching the given glob pattern. Required dependency is the Tuist ProjectDescription module. Inputs include the project name, targets array, and target configurations. Outputs the project model consumed by Tuist for generating Xcode project files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.App\",\n            sources: [\"Sources/**/*.swift\"]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist Configuration in Swift\nDESCRIPTION: Creates a basic `Tuist.swift` file to configure and define the root of a Tuist-managed project. This snippet imports the `ProjectDescription` framework and instantiates a `Tuist` object which serves as the project configuration entry point. It is necessary for establishing the Tuist project root directory and linking project metadata. This minimal configuration is the starting point before adding further customization or project-level settings.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist Project Manifest for iOS Application in Swift\nDESCRIPTION: Defines a Tuist project manifest for an iOS application named \"MyApp\". It declares two targets: an app target and a unit test target, specifying configurations like destinations, product type, bundle identifiers, Info.plist customizations, source files, resources, and dependencies. This Swift file uses the ProjectDescription framework and serves as a project definition file required by Tuist for project generation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/new-project.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    targets: [\n        .target(\n            name: \"MyApp\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.MyApp\",\n            infoPlist: .extendingDefault(\n                with: [\n                    \"UILaunchScreen\": [\n                        \"UIColorName\": \"\",\n                        \"UIImageName\": \"\",\n                    ],\n                ]\n            ),\n            sources: [\"MyApp/Sources/**\"],\n            resources: [\"MyApp/Resources/**\"],\n            dependencies: []\n        ),\n        .target(\n            name: \"MyAppTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyAppTests\",\n            infoPlist: .default,\n            sources: [\"MyApp/Tests/**\"],\n            resources: [],\n            dependencies: [.target(name: \"MyApp\")]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Target in Project.swift\nDESCRIPTION: This Swift snippet demonstrates how to define a target in the `Project.swift` file. It creates a `.target` with properties like name, destinations, product type, bundle ID, sources, dependencies, and settings.  xcconfig files are used to define the target settings. Example dependencies of other targets and external dependencies are included as comments.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/Project.xcconfig\"),\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/Project.xcconfig\"),\n    ]),\n    targets: [\n        .target( // [!code ++]\n            name: \"TargetX\", // [!code ++]\n            destinations: .iOS, // [!code ++]\n            product: .framework, // [!code ++] // or .staticFramework, .staticLibrary...\n            bundleId: \"io.tuist.targetX\", // [!code ++]\n            sources: [\"Sources/TargetX/**\"], // [!code ++]\n            dependencies: [ // [!code ++]\n                /** Dependencies go here **/ // [!code ++]\n                /** .external(name: \"Kingfisher\") **/ // [!code ++]\n                /** .target(name: \"OtherProjectTarget\") **/ // [!code ++]\n            ], // [!code ++]\n            settings: .settings(configurations: [ // [!code ++]\n                .debug(name: \"Debug\", xcconfig: \"./xcconfigs/TargetX.xcconfig\"), // [!code ++]\n                .debug(name: \"Release\", xcconfig: \"./xcconfigs/TargetX.xcconfig\"), // [!code ++]\n            ]) // [!code ++]\n        ), // [!code ++]\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Library Target in Tuist (Swift)\nDESCRIPTION: Defines a static library target in Tuist by configuring a Project.swift file using Swift syntax. This snippet lists a target with its name, product type, and source file patterns. Key parameters are 'name', 'product', and 'sources'. Requires Tuist and a valid Project.swift file; processes Swift sources to produce a static library. Limitations: Project syntax must conform to Tuist requirements and is only valid within the Tuist ecosystem.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(name: \"MyLibrary\", product: .staticLibrary, sources: [\"**/*.swift\"])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Project with Tuist DSL in Swift\nDESCRIPTION: This Swift snippet demonstrates how to define a project using Tuist's ProjectDescription framework. It replaces the Swift Package Manager's Package.swift with a Project.swift that declares a project named \"App\" having one target. The target is configured for iOS, producing an application product, identified by its bundle ID, and sources specified with a glob pattern. This requires importing ProjectDescription and understanding Tuist's DSL primitives like Project and Target for project configuration. The resulting project definition is used by Tuist to generate an Xcode project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.App\",\n            sources: [\"Sources/**/*.swift\"]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Extending Project model with static constructor for feature frameworks in Swift\nDESCRIPTION: This snippet defines an extension on the Project model, adding a static method called featureFramework that simplifies creation of project configurations for feature frameworks with predefined targets, sources, resources, and dependencies. It helps enforce naming conventions, dependencies, and project structure systematically.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/code-sharing.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nextension Project {\n  public static func featureFramework(name: String, dependencies: [TargetDependency] = []) -> Project {\n    return Project(\n        name: name,\n        targets: [\n            .target(\n                name: name,\n                destinations: .iOS,\n                product: .framework,\n                bundleId: \"io.tuist.\\(name)\",\n                infoPlist: \"\\(name).plist\",\n                sources: [\"Sources/\\(name)/**\"],\n                resources: [\"Resources/\\(name)/**\"],\n                dependencies: dependencies\n            ),\n            .target(\n                name: \"\\(name)Tests\",\n                destinations: .iOS,\n                product: .unitTests,\n                bundleId: \"io.tuist.\\(name)Tests\",\n                infoPlist: \"\\(name)Tests.plist\",\n                sources: [\"Sources/\\(name)Tests/**\"],\n                resources: [\"Resources/\\(name)Tests/**\"],\n                dependencies: [.target(name: name)]\n            )\n        ]\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Target Dependency in Project.swift (Swift)\nDESCRIPTION: Specifies a dependency on the Kingfisher library for the 'MyApp' target within the `Project.swift` file. This tells Tuist that the target requires Kingfisher to be linked during compilation and build.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/add-dependencies.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    targets: [\n        .target(\n            name: \"MyApp\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.MyApp\",\n            infoPlist: .extendingDefault(\n                with: [\n                    \"UILaunchStoryboardName\": \"LaunchScreen.storyboard\",\n                ]\n            ),\n            sources: [\"MyApp/Sources/**\"],\n            resources: [\"MyApp/Resources/**\"],\n            dependencies: [\n                .external(name: \"Kingfisher\") // [!code ++]\n            ]\n        ),\n        .target(\n            name: \"MyAppTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyAppTests\",\n            infoPlist: .default,\n            sources: [\"MyApp/Tests/**\"],\n            resources: [],\n            dependencies: [.target(name: \"MyApp\")]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Project Using Tuist DSL in Swift\nDESCRIPTION: Defines a simple Tuist project with a single target named \"App\" for iOS. This snippet replaces the typical `Package.swift` with a `Project.swift` file. It imports Tuist's `ProjectDescription` framework and creates a `Project` instance specifying project name, target configuration including destination platform, product type, bundle identifier, and source files pattern. The snippet demonstrates the transition from SPM's `PackageDescription` to Tuist's project definition model, focusing on build targets and Xcode-alike primitives. It assumes familiarity with Tuist's domain-specific language and structure.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.App\",\n            sources: [\"Sources/**/*.swift\"]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Plugins in Tuist.swift - Swift\nDESCRIPTION: This snippet demonstrates how to configure plugins hosted in Git repositories within the `Tuist.swift` manifest. Plugins can be referenced using either a specific Git tag (`.git(url:tag:)`) for version stability or a commit SHA (`.git(url:sha:)`) for precise version control. Tuist will fetch these plugins during `tuist install`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/plugins.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\n\nlet tuist = Tuist(\n    project: .tuist(plugins: [\n        .git(url: \"https://url/to/plugin.git\", tag: \"1.0.0\"),\n        .git(url: \"https://url/to/plugin.git\", sha: \"e34c5ba\")\n    ])\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an iOS App Project with Tuist in Swift\nDESCRIPTION: This `Project.swift` manifest defines an iOS application project named \"MyApp\" using Tuist. It includes two targets: the main application target (`MyApp`) and a unit test target (`MyAppTests`), specifying bundle IDs, Info.plist configurations (extending defaults for the app), source/resource paths, and dependencies. This file is typically generated by the `tuist init` command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/new-project.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    targets: [\n        .target(\n            name: \"MyApp\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.MyApp\",\n            infoPlist: .extendingDefault(\n                with: [\n                    \"UILaunchScreen\": [\n                        \"UIColorName\": \"\",\n                        \"UIImageName\": \"\",\n                    ],\n                ]\n            ),\n            sources: [\"MyApp/Sources/**\"],\n            resources: [\"MyApp/Resources/**\"],\n            dependencies: []\n        ),\n        .target(\n            name: \"MyAppTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyAppTests\",\n            infoPlist: .default,\n            sources: [\"MyApp/Tests/**\"],\n            resources: [],\n            dependencies: [.target(name: \"MyApp\")]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Swift Packages in Tuist Project (Swift)\nDESCRIPTION: Demonstrates how to declare a remote Swift package dependency (CryptoSwift) using the `.remote` case within the `packages` array of a Tuist `Project` definition in `Project.swift`. Specifies the package URL and version requirement using Xcode's default SPM integration mechanism.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet project = Project(name: \"MyProject\", packages: [\n    .remote(url: \"https://github.com/krzyzanowskim/CryptoSwift\", requirement: .exact(\"1.8.0\"))\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Git Plugin in Tuist.swift\nDESCRIPTION: Demonstrates how to reference remote plugins from a Git repository in a Tuist.swift manifest, using either tag or SHA for versioning.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/plugins.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\n\nlet tuist = Tuist(\n    project: .tuist(plugins: [\n        .git(url: \"https://url/to/plugin.git\", tag: \"1.0.0\"),\n        .git(url: \"https://url/to/plugin.git\", sha: \"e34c5ba\")\n    ])\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring an Xcode Project with Project.swift in Swift\nDESCRIPTION: Defines an Xcode project using Tuist's Project.swift manifest file. It specifies the project name and targets, enabling validated, reusable project configurations. Dependencies and additional project details can be added within targets.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/manifests.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Project.swift\nlet project = Project(\n    name: \"App\",\n    targets: [\n        // ....\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist with Homebrew\nDESCRIPTION: Provides commands to install Tuist using the Homebrew package manager. It involves tapping the official Tuist formula repository (`tuist/tuist`) and then installing either the latest available version or a specific version (`x.y.z`) using the `--formula` flag. Requires Homebrew to be installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/install-tuist.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap tuist/tuist\nbrew install --formula tuist\nbrew install --formula tuist@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Installing External Swift Package Dependencies with Tuist CLI Bash\nDESCRIPTION: This Bash command executes the Tuist CLI to resolve and fetch the external dependencies declared in the `Package.swift` file. It pulls down Swift Packages and binary targets defined in that file into a local directory managed by Tuist (`Tuist/Dependencies`). This step is necessary before generating the Xcode project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntuist install\n# Resolving and fetching dependencies.\n# Installing Swift Package Manager dependencies.\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tuist with Homebrew in Xcode Cloud (bash)\nDESCRIPTION: This shell script installs a specific version of Tuist via Homebrew, using the formula syntax. It then invokes 'tuist generate' to generate project files as part of the CI workflow. Dependency: Homebrew installed and accessible in the environment. Inputs: None directly, but expects 'tuist@x.y.z' version to be available in Homebrew and 'tuist generate' to act on the project. Outputs: Generates project files. Limitations: Replace 'x.y.z' with the intended Tuist version; Homebrew formula availability required.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/automate/continuous-integration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nbrew install --formula tuist@x.y.z\n\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Running Tuist Dependency Installation and Project Generation Commands (Bash)\nDESCRIPTION: Demonstrates how to fetch Swift package dependencies and generate an Xcode project using Tuist CLI commands. 'tuist install' retrieves dependencies listed in Tuist/Package.swift, and 'tuist generate' produces the Xcode project. Assumes Tuist is installed and initialized in the repository. Input: existing Tuist configuration; output: resolved dependencies and generated Xcode project. Only applicable within a Tuist-managed project directory.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntuist install # Fetch dependencies defined in Tuist/Package.swift\ntuist generate # Generate an Xcode project\n```\n\n----------------------------------------\n\nTITLE: Building a Scheme Using Tuist CLI - Bash\nDESCRIPTION: This snippet shows how to build a specific scheme in a project using the `tuist build` command. It requires Tuist to be installed and initialized in the project directory. The command automatically generates the project if necessary and then builds the specified scheme using the platform-specific build tool under the hood. The expected input is the scheme name (e.g., 'MyScheme'), and the output is the build process results with beautified logs.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist build MyScheme\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Project Targets with External Dependencies in Swift\nDESCRIPTION: Defines project targets in Tuist's Project.swift manifest file with dependencies using the ProjectDescription framework. It describes the main application target and a test target, specifying properties like name, platform destinations, product type, bundle identifier, source files, resources, and dependencies. Key functionality includes declaring an external dependency on Kingfisher for the app target and setting up a unit test target depending on the main app target. This configuration enables Tuist to generate Xcode projects that properly link third-party libraries.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/quick-start/add-dependencies.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    targets: [\n        .target(\n            name: \"MyApp\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.MyApp\",\n            infoPlist: .extendingDefault(\n                with: [\n                    \"UILaunchStoryboardName\": \"LaunchScreen.storyboard\",\n                ]\n            ),\n            sources: [\"MyApp/Sources/**\"],\n            resources: [\"MyApp/Resources/**\"],\n            dependencies: [\n                .external(name: \"Kingfisher\") // [!code ++]\n            ]\n        ),\n        .target(\n            name: \"MyAppTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyAppTests\",\n            infoPlist: .default,\n            sources: [\"MyApp/Tests/**\"],\n            resources: [],\n            dependencies: [.target(name: \"MyApp\")]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Project using ProjectDescription\nDESCRIPTION: Defines a simple iOS application project named MyApp using the ProjectDescription framework. This includes specifying targets for the app and its unit tests, bundle identifiers, source and resource paths, and dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/new-project.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    targets: [\n        .target(\n            name: \"MyApp\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.MyApp\",\n            infoPlist: .extendingDefault(\n                with: [\n                    \"UILaunchScreen\": [\n                        \"UIColorName\": \"\",\n                        \"UIImageName\": \"\",\n                    ],\n                ]\n            ),\n            sources: [\"MyApp/Sources/**\"],\n            resources: [\"MyApp/Resources/**\"],\n            dependencies: []\n        ),\n        .target(\n            name: \"MyAppTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyAppTests\",\n            infoPlist: .default,\n            sources: [\"MyApp/Tests/**\"],\n            resources: [],\n            dependencies: [.target(name: \"MyApp\")]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow: Caching Dependencies\nDESCRIPTION: This GitHub Actions workflow demonstrates how to cache Swift package dependencies using `actions/cache`.  It restores the cache, resolves dependencies only if the cache is missed, and then saves the updated cache. The path of `Package.resolved` file is used to generate cache key and determine whether the dependencies have changed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry/continuous-integration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Restore cache\n  id: cache-restore\n  uses: actions/cache/restore@v4\n  with:\n    path: .build\n    key: ${{ runner.os }}-${{ hashFiles('App.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}\n    restore-keys: .build\n- name: Resolve dependencies\n  if: steps.cache-restore.outputs.cache-hit != 'true'\n  run: xcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n- name: Save cache\n  id: cache-save\n  uses: actions/cache/save@v4\n  with:\n    path: .build\n    key: ${{ steps.cache-restore.outputs.cache-primary-key }}\n```\n\n----------------------------------------\n\nTITLE: Defining a static method to create feature framework projects in Swift\nDESCRIPTION: This code extends the Project model to include a static method 'featureFramework' that generates a project configured as a framework with specified name and dependencies. It consolidates project setup logic such as targets, sources, resources, and identifiers, easing reuse and standardization of project structures.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/code-sharing.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nextension Project {\n  public static func featureFramework(name: String, dependencies: [TargetDependency] = []) -> Project {\n    return Project(\n        name: name,\n        targets: [\n            .target(\n                name: name,\n                destinations: .iOS,\n                product: .framework,\n                bundleId: \"io.tuist.\\(name)\",\n                infoPlist: \"\\(name).plist\",\n                sources: [\"Sources/\\(name)/**\"],\n                resources: [\"Resources/\\(name)/**\"],\n                dependencies: dependencies\n            ),\n            .target(\n                name: \"\\(name)Tests\",\n                destinations: .iOS,\n                product: .unitTests,\n                bundleId: \"io.tuist.\\(name)Tests\",\n                infoPlist: \"\\(name)Tests.plist\",\n                sources: [\"Sources/\\(name)Tests/**\"],\n                resources: [\"Resources/\\(name)Tests/**\"],\n                dependencies: [.target(name: name)]\n            )\n        ]\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Project Model - Swift\nDESCRIPTION: This Swift code snippet extends the `Project` model to add a static constructor `featureFramework`. This function creates a project definition for a feature framework with specified parameters such as name, dependencies, destinations, product, bundle ID, info plist, sources, and resources. It includes the framework target and a corresponding unit test target. The static constructor is designed to encapsulate common project configurations, promoting code reuse and standardization.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/code-sharing.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nextension Project {\n  public static func featureFramework(name: String, dependencies: [TargetDependency] = []) -> Project {\n    return Project(\n        name: name,\n        targets: [\n            .target(\n                name: name,\n                destinations: .iOS,\n                product: .framework,\n                bundleId: \"io.tuist.\\(name)\",\n                infoPlist: \"\\(name).plist\",\n                sources: [\"Sources/\\(name)/**\"],\n                resources: [\"Resources/\\(name)/**\",],\n                dependencies: dependencies\n            ),\n            .target(\n                name: \"\\(name)Tests\",\n                destinations: .iOS,\n                product: .unitTests,\n                bundleId: \"io.tuist.\\(name)Tests\",\n                infoPlist: \"\\(name)Tests.plist\",\n                sources: [\"Sources/\\(name)Tests/**\"],\n                resources: [\"Resources/\\(name)Tests/**\",],\n                dependencies: [.target(name: name)]\n            )\n        ]\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a specific scheme with Tuist\nDESCRIPTION: This snippet demonstrates how to invoke 'tuist build' to build a particular scheme named 'MyScheme'. It ensures the project is generated if not already, then proceeds with the build process.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist build MyScheme\n```\n\n----------------------------------------\n\nTITLE: Building a scheme with a specific configuration\nDESCRIPTION: This example shows how to pass additional arguments to the underlying build tool via the '--' separator, here specifying the Debug configuration for scheme 'MyScheme'. It allows customization of build parameters not directly supported by 'tuist build'.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist build MyScheme -- -configuration Debug\n```\n\n----------------------------------------\n\nTITLE: Defining a Template in Tuist using Swift\nDESCRIPTION: This Swift code defines a template for generating files within a Tuist project. It utilizes the `ProjectDescription` framework to specify attributes, files, and directory structures. The template includes required and optional attributes. The code defines a template with description, attributes (name, platform), and items that create files and directory from the template path, string contents. Required dependencies include `ProjectDescription`. Expected inputs: a template name and optional arguments like platform; output: generated files and directories based on the specified template.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/templates.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet nameAttribute: Template.Attribute = .required(\"name\")\n\nlet template = Template(\n    description: \"Custom template\",\n    attributes: [\n        nameAttribute,\n        .optional(\"platform\", default: \"ios\"),\n    ],\n    items: [\n        .string(\n            path: \"Project.swift\",\n            contents: \"My template contents of name \\(nameAttribute)\"\n        ),\n        .file(\n            path: \"generated/Up.swift\",\n            templatePath: \"generate.stencil\"\n        ),\n        .directory(\n            path: \"destinationFolder\",\n            sourcePath: \"sourceFolder\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing External Dependencies in Project.swift\nDESCRIPTION: This Swift code defines a `Project` in `Project.swift` file, declaring a target named \"App\" with an external dependency on \"Alamofire\". The `dependencies` array in the target definition uses `.external` to link with the external package. The target is of type .app and iOS 13.0 deployment target.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    organizationName: \"tuist.io\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: [.iPhone],\n            product: .app,\n            bundleId: \"io.tuist.app\",\n            deploymentTargets: .iOS(\"13.0\"),\n            infoPlist: .default,\n            sources: [\"Targets/App/Sources/**\"],\n            dependencies: [\n                .external(name: \"Alamofire\"), // [!code ++]\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.swift for Permanent Tuist Registry Use (Swift/Diff)\nDESCRIPTION: This diff shows how to modify the `dependencies` array within a `Package.swift` file to permanently use the Tuist Registry for a specific dependency (swift-composable-architecture in this example). It replaces the standard `.package(url: ...)` declaration with `.package(id: ...)` using the registry identifier format `{organization}.{repository}`. This ensures the Tuist registry is always consulted first when resolving this dependency in subsequent `swift package resolve` or build operations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry/swift-package.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Editing Tuist Project Dependencies Declaration in Swift\nDESCRIPTION: Defines how to declare package dependencies in a Swift Package Manager manifest file (Package.swift) within a Tuist project. This snippet imports PackageDescription and conditionally imports ProjectDescription for Tuist-specific settings. The Package object includes the project name and a dependencies array where third-party libraries like Kingfisher are declared using their GitHub URL and version constraints. Dependencies are expected to be resolved by Swift Package Manager. The use of `productTypes` allows customization of the product type per dependency.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/quick-start/add-dependencies.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\")) // [!code ++]\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Unit Test Target in Tuist Project (Swift)\nDESCRIPTION: This snippet provides the Tuist Swift DSL configuration for an iOS unit test target. It defines a Project with a unit test target named 'MyLibraryTests', specifies the destination (iOS), product type, bundle ID, source files location, and project dependencies. Requires Tuist and an appropriate project directory. Outputs an Xcode test target upon 'tuist generate'. All configuration occurs in Swift for strong type-safety and editor support.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(\n            name: \"MyLibraryTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyLibraryTests\",\n            sources: \"Tests/MyLibraryTests/**\",\n            dependencies: [\n                .target(name: \"MyLibrary\"),\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Xcode Workspace with Workspace.swift in Swift\nDESCRIPTION: Defines a workspace including the main project and dependencies using Tuist's Workspace.swift manifest. It allows adding additional projects or groups and leverages Tuist's dependency resolution to automatically include dependent projects.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/manifests.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// Workspace.swift\nimport ProjectDescription\n\nlet workspace = Workspace(\n    name: \"App-Workspace\",\n    projects: [\n        \"./App\" // Path to directory containing the Project.swift file\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring External Swift Package Dependencies (Swift)\nDESCRIPTION: Defines external dependencies for a Tuist project using a standard Swift Package Manager `Package.swift` file. It includes adding dependencies from URLs and defining binary targets. The `#if TUIST` block allows including Tuist-specific `PackageSettings` to configure the integration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n    import ProjectDescriptionHelpers\n\n    let packageSettings = PackageSettings(\n        productTypes: [\n            \"Alamofire\": .framework, // default is .staticFramework\n        ]\n    )\n\n#endif\n\nlet package = Package(\n    name: \"PackageName\",\n    dependencies: [\n        .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n    ],\n    targets: [\n        .binaryTarget(\n            name: \"Sentry\",\n            url: \"https://github.com/getsentry/sentry-cocoa/releases/download/8.40.1/Sentry.xcframework.zip\",\n            checksum: \"db928e6fdc30de1aa97200576d86d467880df710cf5eeb76af23997968d7b2c7\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Editing SwiftUI ContentView to Use Kingfisher Image Dependency in Swift\nDESCRIPTION: Shows how to import and use the Kingfisher library in a SwiftUI view within a Tuist-managed project. The snippet demonstrates importing Kingfisher alongside SwiftUI, then using `KFImage` to asynchronously load and display an image from a remote URL in the view's body. This illustrates practical usage of an external dependency declared and linked via Tuist and Swift Package Manager.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/quick-start/add-dependencies.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport Kingfisher // [!code ++]\n\npublic struct ContentView: View {\n    public init() {}\n\n    public var body: some View {\n        Text(\"Hello, World!\") // [!code --]\n            .padding() // [!code --]\n        KFImage(URL(string: \"https://cloud.tuist.io/images/tuist_logo_32x32@2x.png\")!) // [!code ++]\n    }\n}\n\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Projects with Dynamic/Static Setting via Tuist\nDESCRIPTION: This bash command demonstrates how to use the `TUIST_DYNAMIC` environment variable to control whether targets are built as static or dynamic when generating a project with Tuist. This allows for configuration-based control over the target type before compilation, leading to a more predictable project graph. The generated project will have targets configured as either static or dynamic based on the value of `TUIST_DYNAMIC`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/cost-of-convenience.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# The value of TUIST_DYNAMIC can be read from the project {#the-value-of-tuist_dynamic-can-be-read-from-the-project}\n# to set the product as static or dynamic based on the value. {#to-set-the-product-as-static-or-dynamic-based-on-the-value}\nTUIST_DYNAMIC=1 tuist generate\n```\n\n----------------------------------------\n\nTITLE: Dynamic Configuration for Static or Dynamic Linking in Tuist\nDESCRIPTION: A function that determines the product type based on an environment variable, allowing switching between static and dynamic linking at project generation time without code changes.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Use the value returned by this function to set the product type of your targets.\nfunc productType() -> Product {\n    if case let .string(linking) = Environment.linking {\n        return linking == \"static\" ? .staticFramework : .framework\n    } else {\n        return .framework\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Build a scheme using Tuist\nDESCRIPTION: This command builds the specified scheme using Tuist. It generates the project if needed and then uses the platform-specific build tool to compile the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist build MyScheme\n```\n\n----------------------------------------\n\nTITLE: Customizing an Xcode Workspace Manifest with Tuist in Swift\nDESCRIPTION: This Swift snippet shows how to define a Tuist Workspace manifest named \"App-Workspace\", which customizes the generated Xcode workspace. It imports `ProjectDescription` and defines a root-level constant `workspace` that specifies workspace name and a list of project paths relative to the workspace, here referencing a project directory \"./App\". Tuist automatically adds dependency projects, so listing only custom projects is required. This enables tailored workspace generation beyond the defaults.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/manifests.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Workspace.swift\nimport ProjectDescription\n\nlet workspace = Workspace(\n    name: \"App-Workspace\",\n    projects: [\n        \"./App\", // Path to directory containing the Project.swift file\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Tuist (Bash)\nDESCRIPTION: This snippet demonstrates how to set environment variables when running Tuist commands. The command `tuist generate` is used. It showcases two examples: setting one environment variable `TUIST_APP_NAME` and setting multiple variables `TUIST_APP_NAME` and `TUIST_APP_LOCALE`. This is the initial step for dynamic configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dynamic-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTUIST_APP_NAME=MyApp tuist generate\n```\n\n----------------------------------------\n\nTITLE: Accessing Target Resource Bundle in Objective-C using Tuist\nDESCRIPTION: Shows the Objective-C method for retrieving the resource bundle for a specific target (e.g., 'MyFeature'). Tuist generates a dedicated class named `{Target}Resources` (e.g., `MyFeatureResources`) with a class method `bundle` to provide access.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/synthesized-files.md#_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\nNSBundle *bundle = [MyFeatureResources bundle];\n```\n\n----------------------------------------\n\nTITLE: Creating initial Tuist project scaffold\nDESCRIPTION: This snippet sets up the basic Tuist environment with configuration files including \"Tuist.swift\", \"Project.swift\", and \"Package.swift\". \"Tuist.swift\" defines project-specific settings, \"Project.swift\" declares project targets, and \"Package.swift\" manages dependencies, establishing the foundation for migration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp-Tuist\",\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add dependencies here\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Tuist (Swift)\nDESCRIPTION: This Swift code demonstrates how to access environment variables from Tuist manifest files using the `Environment` type. The `appName()` function retrieves the `TUIST_APP_NAME` variable. If the variable exists, its value is used; otherwise, a default value, \"MyApp\", is returned. The result of accessing the environment variable is an `Environment.Value?` type.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dynamic-configuration.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc appName() -> String {\n    if case let .string(environmentAppName) = Environment.appName {\n        return environmentAppName\n    } else {\n        return \"MyApp\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Scheme with Mise-Aware Post-Action in Tuist Project (Swift)\nDESCRIPTION: Swift code defining a custom Xcode scheme within a Tuist `Project.swift` manifest file. It demonstrates how to configure a scheme with build, test, and run actions, and notably includes a `postAction` array. This post-action runs a shell script after the build, activating the Tuist environment via Mise before executing `tuist inspect build`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/insights.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    name: \"MyProject\",\n    targets: [\n        // Your targets\n    ],\n    schemes: [\n        .scheme(\n            name: \"MyApp\",\n            shared: true,\n            buildAction: .buildAction(targets: [\"MyApp\"]),\n            testAction: .testAction(targets: [\"MyAppTests\"]),\n            runAction: .runAction(configuration: \"Debug\"),\n            postActions: [\n                .postAction(\n                    name: \"Inspect Build\",\n                    scriptText: \"\"\"\n                    eval \\\"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\\\"\n                    tuist inspect build\n                    \"\"\"\n                )\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Swift Bundle Accessor for Target Resources\nDESCRIPTION: This snippet demonstrates how Tuist generates an extension for the `Bundle` type in Swift that provides a static property `Bundle.module`. This allows easy, compile-time safe access to the resources associated with a target, abstracting away runtime bundle lookup details.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/synthesized-files.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet bundle = Bundle.module\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tuist Project Graph Using Bash\nDESCRIPTION: Provides the command to generate and visualize the project dependency graph with Tuist. Executing `tuist graph` in the project directory outputs a `graph.png` image file, depicting the project structure and dependencies to aid understanding and debugging. No special parameters are needed; it relies on the existing Tuist project configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/quick-start/add-dependencies.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist graph\n```\n\n----------------------------------------\n\nTITLE: Defining an Xcode Project with Swift in Project.swift\nDESCRIPTION: This snippet shows how to declare a basic Xcode project using a Swift `Project` object, specifying its name and targets. The global variable `project` is used as the main configuration element, leveraging Swift's syntax and reusability features.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/manifests.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Project.swift\nlet project = Project(\n    name: \"App\",\n    targets: [\n        // ....\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Extending Tuist Project model with static constructor in Swift\nDESCRIPTION: Defines a Swift extension to the Tuist Project model that adds a static function featureFramework for creating a project with predefined targets following conventions such as target names, bundle identifiers, source and resource folders, and dependencies. This helper function simplifies instantiating consistent framework projects and their unit test targets. It requires importing ProjectDescription and is compiled into the ProjectDescriptionHelpers module accessible by manifests. Parameters include the project name and optional target dependencies, returning a fully configured Project instance with framework and test targets.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/code-sharing.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nextension Project {\n  public static func featureFramework(name: String, dependencies: [TargetDependency] = []) -> Project {\n    return Project(\n        name: name,\n        targets: [\n            .target(\n                name: name,\n                destinations: .iOS,\n                product: .framework,\n                bundleId: \"io.tuist.\\(name)\",\n                infoPlist: \"\\(name).plist\",\n                sources: [\"Sources/\\(name)/**\"],\n                resources: [\"Resources/\\(name)/**\",],\n                dependencies: dependencies\n            ),\n            .target(\n                name: \"\\(name)Tests\",\n                destinations: .iOS,\n                product: .unitTests,\n                bundleId: \"io.tuist.\\(name)Tests\",\n                infoPlist: \"\\(name)Tests.plist\",\n                sources: [\"Sources/\\(name)Tests/**\"],\n                resources: [\"Resources/\\(name)Tests/**\",],\n                dependencies: [.target(name: name)]\n            )\n        ]\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manage Dependencies and Generate Project with Tuist (Bash)\nDESCRIPTION: This snippet provides the Bash commands used with Tuist to manage Swift Package Manager dependencies and generate an Xcode project. The `tuist install` command fetches dependencies defined in the `Tuist/Package.swift` file, and `tuist generate` creates the Xcode project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntuist install # Fetch dependencies defined in Tuist/Package.swift\ntuist generate # Generate an Xcode project\n```\n\n----------------------------------------\n\nTITLE: Defining Project Build Configurations in Project.swift Using Swift\nDESCRIPTION: Shows how to link extracted .xcconfig files into the Tuist Project.swift manifest under the `settings` property to define debug and release configurations. This allows the project targets and build system to utilize externalized build settings. The snippet imports ProjectDescription and sets debug and release configurations pointing to corresponding .xcconfig files, integrating build settings cleanly within the Tuist project definition.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\"),\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\"),\n    ]),\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Reading an Environment Variable in Tuist Manifest (Swift)\nDESCRIPTION: Provides a Swift example function demonstrating how to access an environment variable (specifically `Environment.appName`, corresponding to `TUIST_APP_NAME`) within a Tuist manifest file. It uses pattern matching on the `Environment.Value` enum to extract the string value and returns a default value (\"MyApp\") if the variable is not set or not a string.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dynamic-configuration.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc appName() -> String {\n    if case let .string(environmentAppName) = Environment.appName {\n        return environmentAppName\n    } else {\n        return \"MyApp\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Swift\nDESCRIPTION: This Swift code snippet shows how to read environment variables from the `Environment` type in a Tuist manifest file. The `appName()` function accesses the `TUIST_APP_NAME` environment variable.  If the variable is set, its value is returned; otherwise, a default value of \"MyApp\" is used.  The code accesses a `Environment.Value?` enum, using pattern matching on its cases, where the value can be a string, bool, etc.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dynamic-configuration.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nfunc appName() -> String {\n    if case let .string(environmentAppName) = Environment.appName {\n        return environmentAppName\n    } else {\n        return \"MyApp\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Scheme with Tuist - Bash\nDESCRIPTION: This bash script demonstrates how to build a specific scheme named `MyScheme` using the `tuist build` command.  It invokes the Tuist CLI tool to build the specified scheme. There are no dependencies for this command itself, but the project must be set up with Tuist. The output is the result of the build process managed by Tuist and forwarded to the underlying build tool.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist build MyScheme\n```\n\n----------------------------------------\n\nTITLE: Defining SPM Remote Package in Tuist Project (Swift)\nDESCRIPTION: Demonstrates how to define a remote Swift Package Manager dependency within a Tuist project manifest (`Project.swift`). The package URL and required version are added to the `packages` array when initializing the `Project` object.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nlet project = Project(name: \"MyProject\", packages: [\n    .remote(url: \"https://github.com/krzyzanowskim/CryptoSwift\", requirement: .exact(\"1.8.0\"))\n])\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using the tuist install Command\nDESCRIPTION: This bash command executes `tuist install`. This command resolves and fetches dependencies, installing Swift Package Manager dependencies into the `Tuist/Dependencies` directory.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\n# Resolving and fetching dependencies. {#resolving-and-fetching-dependencies}\n# Installing Swift Package Manager dependencies. {#installing-swift-package-manager-dependencies}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Project Structure with Tuist\nDESCRIPTION: Generates a graph visualization of the project's dependencies and structure. The graph is saved as `graph.png` in the project directory and opened automatically.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/add-dependencies.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ntuist graph\n```\n\n----------------------------------------\n\nTITLE: Defining a Project with Tuist Package Registry Integration in Swift\nDESCRIPTION: This Swift snippet demonstrates how to configure a Tuist Project manifest to use the Tuist Registry for package resolution within an Xcode project. It shows how to specify a package dependency using a registry identifier (id) instead of a git URL, and how to attach the resolved package as a dependency of a target. Dependencies include the Tuist ProjectDescription API, and the manifest expects package names and ids to match those found in the Tuist Registry. The 'project' object outlines overall project settings, a single app target, and configures the 'ComposableArchitecture' product as a dependency. Inputs are the project structure, dependencies, and target definitions. The output is a Project.swift manifest file suitable for Tuist generation. The snippet requires Tuist installed in the environment and access to the specified registry packages.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/registry/generated-project.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyProject\",\n    packages: [\n        // Source control resolution\n        // .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n        // Registry resolution\n        .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n    ],\n    .target(\n        name: \"App\",\n        product: .app,\n        bundleId: \"io.tuist.App\",\n        dependencies: [\n            .package(product: \"ComposableArchitecture\"),\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Adding `CodeCoverageMode` to `Config` in Swift\nDESCRIPTION: This addition allows specifying how code coverage data is gathered in project schemes, giving developers control over coverage collection modes.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Customizing a Tuist Workspace in Swift\nDESCRIPTION: Defines a Tuist Workspace manifest in Swift to customize the generated Xcode workspace beyond the default inclusion of the main project and its dependencies. The 'workspace' constant should be declared and specifies the workspace name and projects paths to include. The snippet imports ProjectDescription since it is necessary for manifest definitions. Tuist automatically includes workspace projects based on the dependency graph, so manual specification is typically for additional projects. The input includes workspace name and project directory paths. Output is the generated Xcode workspace configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/manifests.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Workspace.swift\nimport ProjectDescription\n\nlet workspace = Workspace(\n    name: \"App-Workspace\",\n    projects: [\n        \"./App\", // Path to directory containing the Project.swift file\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using Project.featureFramework - Swift\nDESCRIPTION: This snippet demonstrates how to use the `featureFramework` static constructor defined in the previous example. It imports necessary dependencies including `ProjectDescription` and `ProjectDescriptionHelpers` and then uses the `featureFramework` static method to create a `Project` instance named \"MyFeature\". This showcases how the helper function is used to define the project's characteristics.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/code-sharing.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet project = Project.featureFramework(name: \"MyFeature\")\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Tuist with Homebrew (yaml)\nDESCRIPTION: A GitHub Actions YAML workflow that checks out the repo, installs Tuist via Homebrew, and runs 'tuist build'. Triggers on push and pull requests to 'main'. Dependencies: macos-latest runner with Homebrew installed/access, Tuist formula available. Inputs: none explicit. Outputs: build results as configured by Tuist. Limitations: update 'x.y.z' to the desired Tuist version; ensure secrets and necessary provisioning are configured in the repo.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/automate/continuous-integration.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: test\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\njobs:\n  lint:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: brew install --formula tuist@x.y.z\n      - run: tuist build\n```\n\n----------------------------------------\n\nTITLE: Editing Tuist Project - tuist edit - Bash\nDESCRIPTION: This command executes the Tuist command-line tool to generate and open an Xcode project based on the definitions in the `Project.swift` and `Tuist.swift` files. It allows developers to edit the project structure within Xcode.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ntuist edit\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist Project (Shell)\nDESCRIPTION: This command initializes a new Tuist project in the current directory. It is used as the recommended first step when creating a minimal reproducible project to demonstrate a bug.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/contributors/issue-reporting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntuist init\n```\n\n----------------------------------------\n\nTITLE: Integrating Xcode Packages in Tuist - Swift\nDESCRIPTION: This Swift code defines a Tuist project configuration. It demonstrates the use of the `.package` method to add external Swift packages as dependencies. The snippet shows two different ways of specifying the package: by URL (for source control resolution) and by registry identifier. The `dependencies` array in the `target` definition uses the product name of the package to link it to the app target. Requires the Tuist project definition.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry/generated-project.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyProject\",\n    packages: [\n        // Source control resolution\n        // .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n        // Registry resolution\n        .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n    ],\n    .target(\n        name: \"App\",\n        product: .app,\n        bundleId: \"io.tuist.App\",\n        dependencies: [\n            .package(product: \"ComposableArchitecture\"),\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Running all tests without selective testing\nDESCRIPTION: This command runs all tests in the project, disabling selective testing. This ensures that all tests are executed, regardless of whether they have been modified or affected by recent changes. Useful for comprehensive testing and regression analysis.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/test.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-selective-testing\n```\n\n----------------------------------------\n\nTITLE: Extracting Project Settings To XCConfig Bash\nDESCRIPTION: Shell command using the `tuist migration settings-to-xcconfig` tool to automate the extraction of project-level build settings from an existing Xcode project file (`-p MyApp.xcodeproj`). The extracted settings are saved into a specified `.xcconfig` file (`-x xcconfigs/MyApp-Project.xcconfig`) after ensuring the output directory exists.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p xcconfigs/\ntuist migration settings-to-xcconfig -p MyApp.xcodeproj -x xcconfigs/MyApp-Project.xcconfig\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift library target with Tuist in Swift\nDESCRIPTION: Equivalent to the Bazel swift_library, this Swift snippet defines a Tuist project with a static library target named \"MyLibrary\". It includes all Swift source files recursively via the glob pattern. This configuration leverages Tuist's Swift DSL to enable Xcode features such as autocompletion, type-checking, and validation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(name: \"MyLibrary\", product: .staticLibrary, sources: [\"**/*.swift\"])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Target in Project.swift with Build Settings and Dependencies Using Swift\nDESCRIPTION: Shows a detailed example of declaring a target within the Tuist Project.swift manifest. The target block includes the target name, platform destinations (iOS), product type (e.g., framework), bundle identifier, source paths, dependencies (external and internal), and explicit build configurations linked to .xcconfig files. This code is key for per-target migration, encapsulating both build and dependency information necessary to reproduce the original target in Tuist format.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/Project.xcconfig\"),\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/Project.xcconfig\"),\n    ]),\n    targets: [\n        .target(\n            name: \"TargetX\",\n            destinations: .iOS,\n            product: .framework,\n            bundleId: \"io.tuist.targetX\",\n            sources: [\"Sources/TargetX/**\"],\n            dependencies: [\n                /** Dependencies go here **/\n                /** .external(name: \"Kingfisher\") **/\n                /** .target(name: \"OtherProjectTarget\") **/\n            ],\n            settings: .settings(configurations: [\n                .debug(name: \"Debug\", xcconfig: \"./xcconfigs/TargetX.xcconfig\"),\n                .debug(name: \"Release\", xcconfig: \"./xcconfigs/TargetX.xcconfig\"),\n            ])\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using Project Description Helpers Plugin (Swift)\nDESCRIPTION: This code shows an example usage of the project description helpers within the consuming project by importing the plugin and using its helpers to define the project. The name of the module containing the helpers is derived from the plugin's name.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/plugins.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\\nimport MyTuistPlugin\\nlet project = Project.app(name: \"MyCoolApp\", platform: .iOS)\n```\n\n----------------------------------------\n\nTITLE: Extracting Target Settings To XCConfig Bash\nDESCRIPTION: Shell command utilizing `tuist migration settings-to-xcconfig` to extract build settings specifically for a single target (`-t TargetX`) from an existing Xcode project (`-p MyApp.xcodeproj`). The extracted target-level settings are saved into a designated `.xcconfig` file path (`-x xcconfigs/TargetX.xcconfig`).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntuist migration settings-to-xcconfig -p MyApp.xcodeproj -t TargetX -x xcconfigs/TargetX.xcconfig\n```\n\n----------------------------------------\n\nTITLE: Referencing External Dependencies in a Tuist Target Swift\nDESCRIPTION: This Swift code snippet demonstrates how to reference an external dependency, previously defined in `Package.swift` and installed by `tuist install`, within a Tuist target's dependencies array. It uses the `.external(name:)` dependency type with the name declared in `Package.swift` (e.g., \"Alamofire\") to link the resolved dependency to the application target.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    organizationName: \"tuist.io\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: [.iPhone],\n            product: .app,\n            bundleId: \"io.tuist.app\",\n            deploymentTargets: .iOS(\"13.0\"),\n            infoPlist: .default,\n            sources: [\"Targets/App/Sources/**\"],\n            dependencies: [\n                .external(name: \"Alamofire\") // [!code ++]\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving String Environment Variable with Default (Swift)\nDESCRIPTION: Demonstrates using the `getString(default:)` helper method on an `Environment` variable (e.g., `Environment.appName`) in Swift. This provides a convenient way to retrieve the string value of an environment variable, returning the specified default value if the variable is not set or not a string.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dynamic-configuration.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nEnvironment.appName.getString(default: \"TuistServer\")\n```\n\n----------------------------------------\n\nTITLE: Tuist Project Description Helpers\nDESCRIPTION: This snippet shows how to define target features for reuse in Tuist using ProjectDescriptionHelpers. The first snippet defines an extension on the Target class in ProjectDescriptionHelpers, adding a static function named `featureTargets` that returns an array of Target objects representing a feature. This encapsulates the definition of a feature into a reusable function, enabling sharing and simplifying `Project.swift` files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nextension Target {\n  /**\n    This function is a factory of targets that together represent a feature.\n  */\n  static func featureTargets(name: String) -> [Target] {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Library in Tuist Project Configuration (Swift)\nDESCRIPTION: This snippet shows how to declare a static Swift library using Tuist's Swift-based Project DSL. The example creates a project with a target named 'MyLibrary', built as a static library from all Swift source files matching a glob. Dependencies are resolved automatically by Tuist; the Project.swift must be placed at the project root. Outputs are compatible with Xcode and Tuist tooling. Requires Tuist installed and a valid directory structure.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(name: \"MyLibrary\", product: .staticLibrary, sources: [\"**/*.swift\"])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using ProjectDescriptionHelpers in a Tuist Project manifest file in Swift\nDESCRIPTION: Demonstrates importing the ProjectDescriptionHelpers module in a Project.swift manifest file and using the static constructor featureFramework to instantiate a Project instance named \"MyFeature\". This shows the consumption of reusable project description helpers compiled in separate Swift files to keep manifest files concise and consistent. It requires that ProjectDescriptionHelpers module is available from Tuist/ProjectDescriptionHelpers folder compilation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/code-sharing.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet project = Project.featureFramework(name: \"MyFeature\")\n```\n\n----------------------------------------\n\nTITLE: Declaring External Dependencies in Project.swift\nDESCRIPTION: This Swift code snippet demonstrates how to declare an external dependency in your `Project.swift` file. It uses `.external(name: \"Alamofire\")` to link the Alamofire Swift Package, which was defined previously in the `Package.swift` file.  The dependency is added to a target's `dependencies` array.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    organizationName: \"tuist.io\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: [.iPhone],\n            product: .app,\n            bundleId: \"io.tuist.app\",\n            deploymentTargets: .iOS(\"13.0\"),\n            infoPlist: .default,\n            sources: [\"Targets/App/Sources/**\"],\n            dependencies: [\n                .external(name: \"Alamofire\"), // [!code ++]\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies in Package.swift - Swift\nDESCRIPTION: This Swift code defines the dependencies for the project within the Package.swift file, using the Swift Package Manager format. 'Kingfisher' is specified as a dependency, and there are commented lines showing how to add further dependencies. For Tuist-specific configurations, the code conditionally includes ProjectDescription and defines optional package settings. Required: Swift 5.9+, Tuist, and optionally other SwiftPM-compatible packages. Key input: URLs and version specifications for dependencies. Output: Updated package resolution for the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/add-dependencies.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\")) // [!code ++]\n    ]\n)\n\n```\n\n----------------------------------------\n\nTITLE: Using the featureFramework helper in Project.swift\nDESCRIPTION: This snippet demonstrates how to import the custom helper module and create a project instance by calling the 'featureFramework' static method, promoting code reuse and consistency in project configuration. It showcases integrating the helper into the main project definition.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/code-sharing.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet project = Project.featureFramework(name: \"MyFeature\")\n```\n\n----------------------------------------\n\nTITLE: Install Tuist using Mise (bash)\nDESCRIPTION: This snippet shows how to install and initialize Tuist using Mise (formerly asdf). The `mise x` command executes the `tuist init` command within the context of the latest available Tuist version managed by Mise, ensuring the correct environment is set up.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise x tuist@latest -- tuist init\n```\n\n----------------------------------------\n\nTITLE: Defining a Plugin from a Git Repository\nDESCRIPTION: This code snippet demonstrates how to integrate a plugin from a Git repository into a project's `Tuist.swift` manifest file using the `.git` case.  It allows specification of a URL and either a tag or a SHA.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/plugins.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\n\nlet tuist = Tuist(\n    project: .tuist(plugins: [\n        .git(url: \"https://url/to/plugin.git\", tag: \"1.0.0\"),\n        .git(url: \"https://url/to/plugin.git\", sha: \"e34c5ba\")\n    ])\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Zsh completion script manually in custom directory\nDESCRIPTION: This snippet demonstrates creating a directory for Zsh completions and placing the generated Tuist completion script into this directory, which can then be referenced in `~/.zshrc` for autocompletion support.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/cli/shell-completions.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist --generate-completion-script > ~/.zsh/completion/_tuist\n```\n\n----------------------------------------\n\nTITLE: Running `tuist inspect build` with Mise in Xcode Post-Action (Shell)\nDESCRIPTION: Shell script designed to be used as a post-build action in an Xcode scheme when using the Mise environment manager. It first activates the appropriate environment managed by Mise using 'mise activate -C $SRCROOT bash --shims', ensuring 'tuist' is available in the PATH, and then executes 'tuist inspect build' to capture and potentially upload build metrics. Requires Mise and Tuist CLI.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/insights.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# -C ensures that Mise loads the configuration from the Mise configuration\n# file in the project's root directory.\neval \"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\"\n\ntuist inspect build\n```\n\n----------------------------------------\n\nTITLE: Verifying Tuist Binary Authenticity\nDESCRIPTION: Command to verify the authenticity of Tuist binaries after installation. This helps ensure the installed version hasn't been tampered with.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/install-tuist.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL \"https://docs.tuist.dev/verify.sh\" | bash\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource Accessor Templates Plugin\nDESCRIPTION: This code shows the structure for resource accessor templates plugins. This type of plugin enables sharing of synthesized resource accessors across multiple projects. It contains a `Plugin.swift` manifest that defines the plugin and a `ResourceSynthesizers` directory housing template files like `Strings.stencil`, `Plists.stencil` and `CustomTemplate.stencil`. The name of these template files matters.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/plugins.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n.\\n├── ...\\n├── Plugin.swift\\n├── ResourceSynthesizers\\n├───── Strings.stencil\\n├───── Plists.stencil\\n├───── CustomTemplate.stencil\\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for a Resource Accessor Templates Plugin\nDESCRIPTION: This code demonstrates the directory layout for a resource accessor templates plugin, including the Plugin.swift manifest and a ResourceSynthesizers directory containing various stencil files for different resource types.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/plugins.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── ...\n├── Plugin.swift\n├── ResourceSynthesizers\n├───── Strings.stencil\n├───── Plists.stencil\n├───── CustomTemplate.stencil\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Adding Package Dependencies (Swift)\nDESCRIPTION: This Swift snippet demonstrates how to declare a package dependency in the `Tuist/Package.swift` file. It adds Kingfisher as a dependency, specifying a version range using `.upToNextMajor(from: \"7.12.0\")`. This allows Tuist to manage the project's external dependencies using Swift Package Manager.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\")) // [!code ++]\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Simplified post-action without Mise (Swift)\nDESCRIPTION: This Swift code defines a simplified post-action within a Tuist scheme to execute `tuist inspect build`. It's used when Mise is not required. The `execution` parameter is set to `.always` to ensure the script is always executed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.postAction(\n    name: \"Inspect Build\",\n    script: \"tuist inspect build\",\n    execution: .always\n)\n```\n\n----------------------------------------\n\nTITLE: Opening a Project for Editing with Tuist Command-Line Interface - Bash\nDESCRIPTION: Runs the 'tuist edit' command to open the Tuist-managed Xcode project workspace for editing. Requires the Tuist CLI to be installed and initialized in the project directory. No inputs are required except that the command must be executed from the project root. Outputs are an open Xcode window for project modifications.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/add-dependencies.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n\n```\n\n----------------------------------------\n\nTITLE: Testing with Tuist\nDESCRIPTION: This command illustrates how to run tests using Tuist. By default, Tuist will use the binary cache when running tests.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/cache.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Synthesizers in Swift\nDESCRIPTION: This Swift code snippet demonstrates how to configure resource synthesizers within a Tuist project using the `Project.resourceSynthesizers` property.  It defines which resource types should have accessors synthesized. The snippet includes `[.string(), .fonts()]` specifying which synthesizers to use. The snippet requires the Tuist framework. The output is configuration of which resources to synthesize accessors for. There is a limitation - it requires a specific set of resource types supported by SwiftGen.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/synthesized-files.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(resourceSynthesizers: [.string(), .fonts()])\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Settings After Extraction Bash\nDESCRIPTION: Shell command using `tuist migration check-empty-settings` to verify that all project build settings have been successfully moved out of the original Xcode project file (`-p Project.xcodeproj`) and into `.xcconfig` files. This command helps ensure a clean state after the extraction step.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntuist migration check-empty-settings -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Running Tuist with Swift Package Manager\nDESCRIPTION: Commands to run Tuist using Swift Package Manager, building the ProjectDescription product, and executing the generate command with specific parameters.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/contributors/get-started.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nswift build --product ProjectDescription\nswift run tuist generate --path /path/to/project --no-open\n```\n\n----------------------------------------\n\nTITLE: Listing Project Targets Sorted by Dependency for Migration Using Bash\nDESCRIPTION: Demonstrates how to list all the targets in the Xcode project sorted by their dependency strength using a Tuist migration CLI command. This list helps determine the order in which targets should be migrated—starting from the most dependent targets first—ensuring a systematic migration flow that avoids dependency issues.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\ntuist migration list-targets -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Running Tests without Selective Testing in Tuist\nDESCRIPTION: This command executes all tests within a Tuist project, disabling the selective testing feature.  Selective testing optimizes test execution by running only the tests that are affected by recent changes.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/test.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-selective-testing\n```\n\n----------------------------------------\n\nTITLE: Using Tuist in GitHub Actions with Mise (YAML)\nDESCRIPTION: A GitHub Actions workflow (YAML) configured to run on pull requests and pushes to the main branch. It checks out the code, uses the `jdx/mise-action@v2` to automatically install Mise and the Tuist version specified in `.mise.toml`, and then executes `tuist build`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/automate/continuous-integration.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nname: Build Application\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: jdx/mise-action@v2\n      - run: tuist build\n```\n\n----------------------------------------\n\nTITLE: Define project with Xcode package integration using Tuist\nDESCRIPTION: This Swift snippet demonstrates how to define a Tuist project that integrates with Xcode's package manager. It showcases the usage of the `Project` struct to configure project metadata and dependencies, including packages fetched from the Tuist Registry. The example contrasts URL-based package resolution with registry-based resolution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry/generated-project.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyProject\",\n    packages: [\n        // Source control resolution\n        // .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n        // Registry resolution\n        .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n    ],\n    .target(\n        name: \"App\",\n        product: .app,\n        bundleId: \"io.tuist.App\",\n        dependencies: [\n            .package(product: \"ComposableArchitecture\"),\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Using Project Template Functions in Project.swift\nDESCRIPTION: Example of how to use the custom Project extension function to create a standardized feature framework project. This demonstrates how project description helpers simplify project creation while enforcing conventions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/code-sharing.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet project = Project.featureFramework(name: \"MyFeature\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Dependencies and Generating a Tuist Project\nDESCRIPTION: Shows the Bash commands used in Tuist to manage Swift Package Manager dependencies and generate the Xcode project. `tuist install` fetches dependencies defined in `Tuist/Package.swift`, and `tuist generate` creates the Xcode project based on the manifest files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist install # Fetch dependencies defined in Tuist/Package.swift\ntuist generate # Generate an Xcode project\n```\n\n----------------------------------------\n\nTITLE: Building and testing the Tuist project in CI environment\nDESCRIPTION: Provides commands to install, generate, build, and test the project using Tuist, facilitating CI/CD pipeline automation to validate project configuration after migration. Ensures integrity of build and test processes in automated workflows.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\n\ntuist generate\n\ntuist build -- ...{xcodebuild flags} # or tuist test\n```\n\n----------------------------------------\n\nTITLE: Manual setup of Bash completion by sourcing the script\nDESCRIPTION: This example involves copying the completion script into a custom directory and then sourcing it in the Bash configuration file, such as `~/.bash_profile` or `~/.bashrc`, to enable autocompletion of Tuist commands in Bash shell when bash-completion is not used.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/cli/shell-completions.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.bash_completions/example.bash\n```\n\n----------------------------------------\n\nTITLE: Update Tuist Project with GitHub Repository URL (Bash)\nDESCRIPTION: This command updates the Tuist project settings to include the URL of the GitHub repository. It's used after installing the Tuist GitHub app to enable integrations like pull request insights. Requires the Tuist CLI tool to be installed and accessible in the environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/server/introduction/integrations.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntuist project update tuist/tuist --repository-url https://github.com/tuist/tuist\n```\n\n----------------------------------------\n\nTITLE: Accessing Target Resource Bundle in Swift using Tuist\nDESCRIPTION: Demonstrates how to access the resource bundle associated with the current target in Swift. Tuist synthesizes an extension on the `Bundle` type, adding a static property `module` that returns the correct bundle, abstracting away implementation details.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/synthesized-files.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet bundle = Bundle.module\n```\n\n----------------------------------------\n\nTITLE: Create project directories\nDESCRIPTION: These commands create a new directory called `MyFramework` and navigate into it. These are the first steps for manually creating a Tuist project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/new-project.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir MyFramework\ncd MyFramework\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shell Script for Tuist Inspection with Mise\nDESCRIPTION: This shell script activates Mise in the environment and executes 'tuist inspect build' to track local build times within a Mise-managed CI or local setup. It ensures that the environment is properly configured before running the inspection command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/insights.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# -C ensures that Mise loads the configuration from the Mise configuration\n# file in the project's root directory.\neval \"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\"\n\ntuist inspect build\n```\n\n----------------------------------------\n\nTITLE: Passing Single Environment Variable with tuist generate (Bash)\nDESCRIPTION: Demonstrates how to set a single environment variable (`TUIST_APP_NAME`) specifically for the execution of the `tuist generate` command using the command line. This variable will be accessible within the project's manifest files during generation. Requires the Tuist CLI installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dynamic-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTUIST_APP_NAME=MyApp tuist generate\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Tuist Server\nDESCRIPTION: This command authenticates the local Tuist installation with the server to enable insight collection. Authentication is required before creating or connecting projects.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/gather-insights.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Inspect Build Post-Action - Simplied Script (Swift)\nDESCRIPTION: This Swift snippet shows a simplified version of the post-action script when Mise is not used. It uses the `tuist inspect build` command directly. This should be added as a post-action to your scheme. Requires a Tuist account to track build times.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.postAction(\n    name: \"Inspect Build\",\n    script: \"tuist inspect build\",\n    execution: .always\n)\n```\n\n----------------------------------------\n\nTITLE: Linking a Local Tuist Project to a Remote Project in Swift\nDESCRIPTION: This Swift code snippet shows how to configure a `Tuist.swift` file to link a local project to a remote project on the Tuist server. It initializes a `Tuist` object, passing the `fullHandle` which combines the account handle and project handle (e.g., `tuist/tuist`). This binding is essential for features like binary caching.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/server/introduction/accounts-and-projects.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet tuist = Tuist(fullHandle: \"{account-handle}/{project-handle}\") // e.g. tuist/tuist\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Template in Swift\nDESCRIPTION: This snippet shows how to define a template in Tuist. It creates a template with required and optional attributes, and demonstrates different item types: string content, file from a Stencil template, and directory copying. The template can be used to scaffold new components.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/templates.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet nameAttribute: Template.Attribute = .required(\"name\")\n\nlet template = Template(\n    description: \"Custom template\",\n    attributes: [\n        nameAttribute,\n        .optional(\"platform\", default: \"ios\"),\n    ],\n    items: [\n        .string(\n            path: \"Project.swift\",\n            contents: \"My template contents of name \\(nameAttribute)\"\n        ),\n        .file(\n            path: \"generated/Up.swift\",\n            templatePath: \"generate.stencil\"\n        ),\n        .directory(\n            path: \"destinationFolder\",\n            sourcePath: \"sourceFolder\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Carthage Integration Script for Tuist\nDESCRIPTION: A bash script that runs Carthage update to resolve dependencies before generating the Tuist project. This ensures Carthage dependencies are available for linking.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\ncarthage update\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Scheme with Build Inspection Post-Action (Swift)\nDESCRIPTION: This Swift code snippet demonstrates how to define a custom scheme within a Tuist Project manifest (`Project.swift`). It includes a post-build action that executes a shell script to activate Tuist via Mise and then runs 'tuist inspect build' for tracking build metrics. This is useful for generated projects where manual scheme configuration is desired.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/insights.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    name: \"MyProject\",\n    targets: [\n        // Your targets\n    ],\n    schemes: [\n        .scheme(\n            name: \"MyApp\",\n            shared: true,\n            buildAction: .buildAction(targets: [\"MyApp\"]),\n            testAction: .testAction(targets: [\"MyAppTests\"]),\n            runAction: .runAction(configuration: \"Debug\"),\n            postActions: [\n                .postAction(\n                    name: \"Inspect Build\",\n                    scriptText: \"\"\"\n                    eval \\\"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\\\"\n                    tuist inspect build\n                    \"\"\"\n                )\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Warming the Cache with Tuist CLI - Bash\nDESCRIPTION: Demonstrates how to manually initiate the cache warming process in a Tuist project using the 'tuist cache' command. No extra dependencies are required beyond having Tuist installed and a generated project. This command builds and caches binaries for eligible targets, enabling faster future builds for both developers and CI. The command accepts no parameters and is executed from the root directory of the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist cache\n\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting missing files errors\nDESCRIPTION: Guidance for resolving build failures caused by files not correctly associated or located. Synchronizing file systems with project configurations ensures the project builds successfully after migration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Building and Sharing App Previews with Xcode and Tuist - bash\nDESCRIPTION: This sequence of commands shows how to use xcodebuild for simulating or real device builds, and how to share the output via Tuist. 'xcodebuild' commands specify the scheme, project, and configuration, with an optional device destination for physical device builds. 'tuist share App' shares the last build, while 'tuist share App.ipa' uploads an existing IPA file for preview. Prerequisites: Xcode command line tools, valid Xcode project and scheme, and Tuist installed. Inputs: project and scheme names, optional configuration or IPA file. Outputs: built app and sharable preview link. Limitations: manual device signing, ensure correct paths and configurations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/share/previews.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcodebuild -scheme App -project App.xcodeproj -configuration Debug # Build the app for the simulator\nxcodebuild -scheme App -project App.xcodeproj -configuration Debug -destination 'generic/platform=iOS' # Build the app for the device\ntuist share App --configuration Debug --platforms iOS\ntuist share App.ipa # Share an existing .ipa file\n```\n\n----------------------------------------\n\nTITLE: Defining SPM Build Tool Plugin in Package.swift (Swift)\nDESCRIPTION: Provides an example of a standard Swift Package Manager manifest (`Package.swift`) that includes a build tool plugin. It shows how to declare the plugin as a dependency and then apply it to a target using the `plugins` array.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\nlet package = Package(\n    name: \"Framework\",\n    products: [\n        .library(name: \"Framework\", targets: [\"Framework\"]),\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", .upToNextMajor(from: \"0.56.1\")),\n    ],\n    targets: [\n        .target(\n            name: \"Framework\",\n            plugins: [\n                .plugin(name: \"SwiftLint\", package: \"SwiftLintPlugin\"),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project with XcodeGen\nDESCRIPTION: This snippet shows how to generate an Xcode project using the XcodeGen command-line tool.  The command `xcodegen generate` reads the `project.yaml` file in the current directory and generates the Xcode project and workspace based on the configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nxcodegen generate\n```\n\n----------------------------------------\n\nTITLE: CI Workflow for Tuist with Mise in Codemagic (yaml)\nDESCRIPTION: This YAML config defines a Codemagic workflow named 'Build' that installs Mise and project dependencies as specified in .mise.toml, then builds the project using Tuist. Dependencies: Codemagic CI, accessible internet for installation scripts, and .mise.toml file. Parameters: 'xcode' version, script steps. Inputs: none explicitly; expects project configuration in repo. Outputs: build artifacts as defined by Tuist. Limitations: Replace versions as needed; correct secrets and provisioning expected.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/automate/continuous-integration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  lint:\n    name: Build\n    max_build_duration: 30\n    environment:\n      xcode: 15.0.1\n    scripts:\n      - name: Install Mise\n        script: |\n          curl https://mise.jdx.dev/install.sh | sh\n          mise install # Installs the version from .mise.toml\n      - name: Build\n        script: mise exec -- tuist build\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Project Scheme Post-Action without Mise (Swift)\nDESCRIPTION: Defines a simple post-build action for a Tuist scheme using the Swift ProjectDescription API. This action directly runs the `tuist inspect build` command, suitable for environments where Mise is not used. Requires the Tuist CLI to be accessible in the build environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.postAction(\n    name: \"Inspect Build\",\n    script: \"tuist inspect build\",\n    execution: .always\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing an SPM Package Dependency in a Tuist Target (Swift)\nDESCRIPTION: Shows how to define a Tuist `Target` and link it against an SPM product declared in the project's packages. It uses `.package` specifying the `product` name (e.g., \"CryptoSwift\") and the linkage `type` (e.g., `.runtime`). For macros or plugins, `.macro` or `.plugin` types are used respectively.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet target = .target(name: \"MyTarget\", dependencies: [\n    .package(product: \"CryptoSwift\", type: .runtime)\n])\n```\n\n----------------------------------------\n\nTITLE: Using Tuist Project Description Helpers\nDESCRIPTION: This snippet demonstrates how to utilize the reusable target features within a `Project.swift` file.  It imports both `ProjectDescription` and `ProjectDescriptionHelpers`.  The `Target.featureTargets` function (defined in the other snipper) is then used when defining the project's targets to simplify the creation of the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers // [!code highlight]\n\nlet project = Project(name: \"MyProject\",\n                      targets: Target.featureTargets(name: \"MyFeature\")) // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Defaults with Tuist.swift in Swift\nDESCRIPTION: Specifies root project configuration using Tuist.swift, allowing customization of the project setup. It sets default behaviors such as explicit dependency enforcement, making project management more flexible and streamlined.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/manifests.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// Tuist.swift\nimport ProjectDescription\n\nlet tuist = Tuist(\n    project: .tuist(generationOptions: .options(enforceExplicitDependencies: true))\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Template - Swift\nDESCRIPTION: This Swift code defines a template for generating files within a Tuist project. It uses the `ProjectDescription` framework to specify attributes like a name and an optional platform, and it defines items such as files, directories, and their contents. The example includes the use of string interpolation to populate the content based on the provided name. Dependencies: `ProjectDescription` framework.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/templates.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet nameAttribute: Template.Attribute = .required(\"name\")\n\nlet template = Template(\n    description: \"Custom template\",\n    attributes: [\n        nameAttribute,\n        .optional(\"platform\", default: \"ios\"),\n    ],\n    items: [\n        .string(\n            path: \"Project.swift\",\n            contents: \"My template contents of name \\(nameAttribute)\"\n        ),\n        .file(\n            path: \"generated/Up.swift\",\n            templatePath: \"generate.stencil\"\n        ),\n        .directory(\n            path: \"destinationFolder\",\n            sourcePath: \"sourceFolder\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Editing Tuist Projects with Edit Command in Bash\nDESCRIPTION: This command launches the Tuist edit workflow, generating an Xcode project containing all project manifest files found via the glob pattern '**/{Manifest}.swift' starting from the directory containing 'Tuist.swift'. This enables developers to edit, build, and validate manifest files with full Xcode support, including syntax highlighting and error checking. Prerequisites: Tuist must be installed and the command must be run from a valid Tuist project directory; ensure there is a valid 'Tuist.swift' at the root. The command does not accept input arguments, and the output is a temporary Xcode project for editing purposes.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/editing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n\n```\n\n----------------------------------------\n\nTITLE: Configuring dependencies for the static framework in Tuist\nDESCRIPTION: This code snippet demonstrates how to add dependencies to the static framework target, enabling it to include other frameworks, libraries, or modules. Proper dependency management is essential for ensuring correct build order and functionality.\nSOURCE: https://github.com/tuist/tuist/blob/main/fixtures/ios_app_with_framework_and_resources/StaticFramework2/Resources/StaticFramework2Resources-text.txt#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nlet staticFrameworkWithDeps = Target(\n    name: \"MyStaticFramework\",\n    platform: .iOS,\n    product: .staticFramework,\n    bundleId: \"com.example.mystaticframework\",\n    infoPlist: .default,\n    sources: [\"Sources/**\"],\n    dependencies: [\n        .external(name: \"Alamofire\"),\n        .project(target: \"SharedUtilities\", path: \"../Shared\")\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Custom scheme with build post-action (Swift)\nDESCRIPTION: This Swift code defines a custom scheme within a Tuist project that includes a post-action to inspect the build using `tuist inspect build`. It requires defining a `Project` with targets and schemes, and includes a `postAction` that executes a shell script to activate Mise and then runs `tuist inspect build`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/insights.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    name: \"MyProject\",\n    targets: [\n        // Your targets\n    ],\n    schemes: [\n        .scheme(\n            name: \"MyApp\",\n            shared: true,\n            buildAction: .buildAction(targets: [\"MyApp\"]),\n            testAction: .testAction(targets: [\"MyAppTests\"]),\n            runAction: .runAction(configuration: \"Debug\"),\n            postActions: [\n                .postAction(\n                    name: \"Inspect Build\",\n                    scriptText: \"\"\"\n                    eval \\\"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\\\" \n                    tuist inspect build\n                    \"\"\"\n                )\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Automations with `tuist share --json`\nDESCRIPTION: This snippet shows how to run the `tuist share` command with the `--json` flag to obtain a JSON output containing preview URLs and QR code links for automation scripts, Slack messages, or other CI integrations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/share/previews.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntuist share --json\n{\n  \"id\": 1234567890,\n  \"url\": \"https://cloud.tuist.io/preview/1234567890\",\n  \"qrCodeURL\": \"https://cloud.tuist.io/preview/1234567890/qr-code.svg\"\n}\n```\n\n----------------------------------------\n\nTITLE: XcodeGen Directory Structure\nDESCRIPTION: This snippet displays the typical directory structure used by XcodeGen.  It highlights the `project.yaml` file at the root, which contains the project's configuration in YAML format. XcodeGen reads and uses this file to generate the Xcode project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n/\n  project.yaml\n```\n\n----------------------------------------\n\nTITLE: Building and Testing a Tuist Project in CI Using Bash\nDESCRIPTION: Shows the basic Bash commands needed to install Tuist dependencies, generate the Xcode project from manifests, and perform builds or tests. This snippet includes `tuist install` to prepare the environment, `tuist generate` to create the Xcode project files, and `tuist build` or `tuist test` (with xcodebuild flags) to validate the integrity of the migration on CI servers. These commands are crucial to automate verification during the migration process.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ntuist install\ntuist generate\ntuist build -- ...{xcodebuild flags} # or tuist test\n```\n\n----------------------------------------\n\nTITLE: Comparing Project Generation Commands (XcodeGen vs. Tuist)\nDESCRIPTION: Compares the command-line interface commands used to generate Xcode projects and workspaces with XcodeGen (`xcodegen generate`) and Tuist (`tuist generate`). Tuist also offers an `edit` command for quick modifications.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxcodegen generate\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Tuist with Mise in Xcode Cloud (Bash)\nDESCRIPTION: Bash script intended for Xcode Cloud's post-clone phase. It first installs the Mise version manager, then uses Mise to install the specific Tuist version defined in the project's `.mise.toml` file. Finally, it executes `tuist generate` using the installed Tuist version.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/automate/continuous-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\ncurl https://mise.jdx.dev/install.sh | sh\nmise install # Installs the version from .mise.toml\n\n# Runs the version of Tuist indicated in the .mise.toml file\nmise exec -- tuist generate\n```\n\n----------------------------------------\n\nTITLE: Running scheme tests with tuist\nDESCRIPTION: This command runs the tests associated with the specified scheme, `MyScheme`. It generates the project if needed and uses the platform-specific build tool to execute the tests.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/test.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist test MyScheme\n```\n\n----------------------------------------\n\nTITLE: Generating Project-Scoped Token\nDESCRIPTION: This bash command generates a project-scoped token for authenticating requests from CI workflows to the server for features such as cache. It utilizes the `tuist project tokens create` command followed by the project handle to generate the token.  The token must then be stored as `TUIST_CONFIG_TOKEN` environment variable in the CI environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/automate/continuous-integration.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntuist project tokens create my-handle/MyApp\n```\n\n----------------------------------------\n\nTITLE: Defining an Xcode Project with Registry Packages - Tuist - Swift\nDESCRIPTION: This Swift code defines an Xcode project using Tuist's ProjectDescription framework, demonstrating how to specify package dependencies by referencing a registry identifier using .package(id:from:). To enable registry-based package resolution, the 'ProjectDescription' Tuist dependency is required. The main 'project' contains a single target 'App' that depends on a product from the external package. Key parameters include the registry package ID, version constraints for the dependency, the target name, product type, and bundle identifier. Expected input is the project configuration in Swift syntax, and output is a configured Xcode project; constraints include proper configuration of Tuist and usage of registry identifiers rather than URLs for package definitions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry/generated-project.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyProject\",\n    packages: [\n        // Source control resolution\n        // .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n        // Registry resolution\n        .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n    ],\n    .target(\n        name: \"App\",\n        product: .app,\n        bundleId: \"io.tuist.App\",\n        dependencies: [\n            .package(product: \"ComposableArchitecture\"),\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring External Dependencies (Swift Packages, Binary Targets) in Tuist Swift\nDESCRIPTION: This Swift code snippet demonstrates how to declare external dependencies for a Tuist project using a `Package.swift` file. It shows how to define external Swift packages via URLs and specific versions, and how to include binary targets from remote URLs with checksums. It also includes the optional `PackageSettings` for configuring package integration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n    import ProjectDescriptionHelpers\n\n    let packageSettings = PackageSettings(\n        productTypes: [\n            \"Alamofire\": .framework, // default is .staticFramework\n        ]\n    )\n\n#endif\n\nlet package = Package(\n    name: \"PackageName\",\n    dependencies: [\n        .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n    ],\n    targets: [\n        .binaryTarget(\n            name: \"Sentry\",\n            url: \"https://github.com/getsentry/sentry-cocoa/releases/download/8.40.1/Sentry.xcframework.zip\",\n            checksum: \"db928e6fdc30de1aa97200576d86d467880df710cf5eeb76af23997968d7b2c7\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating individual targets and refactoring into `Project.swift`\nDESCRIPTION: This snippet provides a template to define a target within \"Project.swift\", including configuration of name, platform, product type, bundle ID, sources, dependencies, and settings. It guides proper target declaration post-extraction, enabling incremental migration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/Project.xcconfig\"),\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/Project.xcconfig\")\n    ]),\n    targets: [\n        .target(\n            name: \"TargetX\",\n            platform: .iOS,\n            product: .framework,\n            bundleId: \"io.tuist.targetX\",\n            sources: [\"Sources/TargetX/**\"],\n            dependencies: [\n                /* Dependencies go here */\n            ],\n            settings: .settings(configurations: [\n                .debug(name: \"Debug\", xcconfig: \"./xcconfigs/TargetX.xcconfig\"),\n                .debug(name: \"Release\", xcconfig: \"./xcconfigs/TargetX.xcconfig\")\n            ])\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Project in Swift using ProjectDescription\nDESCRIPTION: This Swift snippet defines a basic project using Tuist's DSL. It includes a project with a single target and defines the project's name, targets, destinations, product type, bundle ID, and source files. It relies on the `ProjectDescription` framework. This sets up a base configuration for your project within the Tuist ecosystem, mimicking Xcode's project structure for easier integration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.App\",\n            sources: [\"Sources/**/*.swift\"]*\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Configurations with Tuist Helpers (Swift)\nDESCRIPTION: Demonstrates how to create reusable project configurations in Tuist using Swift-based Project Description Helpers. An extension on `Target` defines a factory function `featureTargets` in a separate helper file (`Tuist/ProjectDescriptionHelpers/Target+Features.swift`), which is then imported and utilized within the main `Project.swift` manifest.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nextension Target {\n  /**\n    This function is a factory of targets that together represent a feature.\n  */\n  static func featureTargets(name: String) -> [Target] {\n    // ...\n  }\n}\n```\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers // [!code highlight]\n\nlet project = Project(name: \"MyProject\",\n                      targets: Target.featureTargets(name: \"MyFeature\")) // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Defining an iOS Unit Test Target in Bazel (Starlark)\nDESCRIPTION: Creates an iOS unit test build rule in Bazel using Starlark within a BUILD file. Specifies the test's name, bundle ID, minimum OS version, test host, and dependencies. Inputs include the test host and dependent test library; output is a bundle to be run as a unit test. Requires correct Bazel configuration and associated test targets/libraries. May require adjustments for specific Xcode or Bazel versions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nios_unit_test(\n    name = \"MyLibraryTests\",\n    bundle_id = \"io.tuist.MyLibraryTests\",\n    minimum_os_version = \"16.0\",\n    test_host = \"//MyApp:MyLibrary\",\n    deps = [\":MyLibraryTests.library\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests Without Selective Testing using Tuist CLI\nDESCRIPTION: This snippet demonstrates how to run all tests using the `tuist test` command while disabling selective testing. Selective testing optimizes the build by running only the tests that need to be run. By using `--no-selective-testing`, all tests within the project will be executed. It requires that Tuist is installed and properly configured for the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/test.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-selective-testing\n```\n\n----------------------------------------\n\nTITLE: Project Description Helper Plugin Directory Structure\nDESCRIPTION: This shows the required file structure for a project description helper plugin. It includes a `Plugin.swift` file that declares the plugin, and a `ProjectDescriptionHelpers` directory containing helper Swift files. This structure allows the plugin to share project description helpers.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/plugins.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n. \n├── ...\n├── Plugin.swift\n├── ProjectDescriptionHelpers\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Updating Package.swift to Use Registry (Swift)\nDESCRIPTION: This code snippet demonstrates how to update the `Package.swift` file to use the Tuist registry.  It shows the before and after modifications to the dependencies array. Replacing the URL with the registry identifier ensures dependencies are fetched from the registry. The registry identifier format is `{organization}.{repository}`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry/swift-package.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Connecting Local Project to Server (Swift)\nDESCRIPTION: Modifies the local project's Tuist.swift configuration file to include the full handle of the corresponding project created on the Tuist server. This establishes the connection required for sending insights.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/gather-insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(fullHandle: \"my-handle/MyApp\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Install Options for Registry Resolution (Swift)\nDESCRIPTION: Demonstrates how to configure the `Tuist.swift` manifest to prioritize the Tuist Registry for dependency resolution when using the XcodeProj-based integration. The `--replace-scm-with-registry` flag is added to the `passthroughSwiftPackageManagerArguments` within `installOptions`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/registry/xcodeproj-integration.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(\n    fullHandle: \"{account-handle}/{project-handle}\",\n    project: .tuist(\n        installOptions: .options(passthroughSwiftPackageManagerArguments: [\"--replace-scm-with-registry\"])\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Resolve Package Dependencies - Bash\nDESCRIPTION: This bash command resolves package dependencies using `xcodebuild` and specifies a custom directory for cloned source packages. This command is used for caching dependencies to improve build times.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry/continuous-integration.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nxcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n```\n\n----------------------------------------\n\nTITLE: Resolving and Caching Swift Package Dependencies with xcodebuild in Shell\nDESCRIPTION: This shell command resolves Swift package dependencies for an Xcode project by specifying a custom path for cloned source packages to enable caching in CI. The argument `-clonedSourcePackagesDirPath .build` directs resolved packages to the `.build` directory, which can then be efficiently cached. This method reduces the overhead of repeated resolution across CI builds when used with matching cache restore and save steps.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry/continuous-integration.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nxcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n```\n\n----------------------------------------\n\nTITLE: Reusable target feature definitions in Swift\nDESCRIPTION: Provides a Swift extension on the 'Target' class to create feature-related targets, illustrating how Tuist supports code reuse via Swift modules and extensions, contrasting with YAML templates.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nextension Target {\n  /**\n    This function is a factory of targets that together represent a feature.\n  */\n  static func featureTargets(name: String) -> [Target] {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist using Homebrew\nDESCRIPTION: Commands for installing Tuist using Homebrew package manager. Includes adding the Tuist tap and installing either the latest version or a specific version.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/quick-start/install-tuist.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap tuist/tuist\nbrew install --formula tuist\nbrew install --formula tuist@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist CLI using Homebrew - Bash\nDESCRIPTION: This snippet provides bash commands to install the Tuist CLI using Homebrew. It covers tapping the Tuist formula repository and installing either the default or specific versions of the Tuist formula. This method installs and activates a single version globally by default.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/install-tuist.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap tuist/tuist\nbrew install --formula tuist\nbrew install --formula tuist@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Setting up Tuist Registry (Bash)\nDESCRIPTION: Executes the setup process for the Tuist Registry in a project directory. This command generates necessary configuration files and performs the initial login. The generated files should be committed to ensure team access.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist registry setup\n```\n\n----------------------------------------\n\nTITLE: Referencing Swift Package Dependencies in Target Declaration\nDESCRIPTION: Shows how to reference Swift Packages in your target dependencies. The code demonstrates adding a runtime dependency on the CryptoSwift package.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet target = .target(name: \"MyTarget\", dependencies: [\n    .package(product: \"CryptoSwift\", type: .runtime)\n])\n```\n\n----------------------------------------\n\nTITLE: Running All Tests without Binary Cache using Tuist (Bash)\nDESCRIPTION: Executes all tests in the project using `tuist test` while explicitly disabling the use of the binary cache via the `--no-binary-cache` flag. This forces a clean build without reusing cached artifacts.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/test.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Adding External Dependency To Package Swift\nDESCRIPTION: Demonstrates adding an external dependency (e.g., `Kingfisher`) to the `dependencies` array within the `Package` struct in the `Tuist/Package.swift` manifest. The dependency is specified using its repository URL and a version requirement (e.g., `.upToNextMajor`).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\")) // [!code ++]\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using the project description helper in Project.swift with imported module\nDESCRIPTION: This snippet demonstrates how to import the ProjectDescriptionHelpers module and utilize the extended featureFramework method to instantiate a project. It simplifies project setup by leveraging the predefined conventions and constructors, ensuring consistency across project configurations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/code-sharing.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet project = Project.featureFramework(name: \"MyFeature\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Git Tuist Plugins in Tuist.swift (Swift)\nDESCRIPTION: Demonstrates how to register plugins hosted in remote Git repositories within the `Tuist.swift` manifest file. The `.git(url:tag:)` or `.git(url:sha:)` enum cases are used, specifying the repository URL and a specific version reference (tag or commit SHA) for fetching.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/plugins.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\n\nlet tuist = Tuist(\n    project: .tuist(plugins: [\n        .git(url: \"https://url/to/plugin.git\", tag: \"1.0.0\"),\n        .git(url: \"https://url/to/plugin.git\", sha: \"e34c5ba\")\n    ])\n)\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies to use registry identifier in Package.swift\nDESCRIPTION: This diff snippet demonstrates how to replace a URL-based package dependency with a registry identifier in the `dependencies` array. The change switches from a URL string to a registry ID format, such as \"pointfreeco.swift-composable-architecture,\" enabling dependency resolution via registry rather than direct URL. This configuration ensures registry usage during dependency resolution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry/xcodeproj-integration.md#_snippet_1\n\nLANGUAGE: Diff\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n\n```\n\n----------------------------------------\n\nTITLE: Generating Project with Tuist and Caching\nDESCRIPTION: These commands demonstrate how to generate a project with Tuist, utilizing the binary cache by default. They also show how to specify targets to focus on, replacing dependencies with cached binaries. The --no-binary-cache flag allows opting out of caching entirely.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/cache.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate # Only dependencies\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Search # Dependencies + Search dependencies\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Search Settings # Dependencies, and Search and Settings dependencies\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate --no-binary-cache # No cache at all\n```\n\n----------------------------------------\n\nTITLE: Running scheme tests with 'tuist test'\nDESCRIPTION: Executes tests for a specific scheme using Tuist, ensuring project creation if necessary and utilizing platform-specific test tools. It supports passing additional arguments directly to the underlying build tool using '--'.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/test.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist test MyScheme\n```\n\n----------------------------------------\n\nTITLE: Activate Tuist Version with Mise (Bash)\nDESCRIPTION: Activates a specific installed version of Tuist for the current project or globally using the Mise version manager. This command makes a particular version accessible in the specified environment. Requires Tuist versions to be installed by Mise.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/install-tuist.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise use tuist@x.y.z          # Use tuist-x.y.z in the current project\nmise use tuist@latest         # Use the latest tuist in the current directory\nmise use -g tuist@x.y.z       # Use tuist-x.y.z as the global default\nmise use -g tuist@system      # Use the system's tuist as the global default\n```\n\n----------------------------------------\n\nTITLE: Running all tests without selective testing using 'tuist test'\nDESCRIPTION: Executes all tests in the project with the '--no-selective-testing' flag, which disables the smart testing feature that runs only necessary tests, ensuring comprehensive testing coverage.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/test.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-selective-testing\n```\n\n----------------------------------------\n\nTITLE: Logging into the Tuist Registry\nDESCRIPTION: Logs a user into the Tuist Registry. This command is typically used by team members after the initial registry setup files have been generated by `tuist registry setup` and committed to the project repository.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist registry login\n```\n\n----------------------------------------\n\nTITLE: Build a scheme with a specific configuration using Tuist\nDESCRIPTION: This command builds the specified scheme with the specified configuration using Tuist. The `--` terminator forwards the `-configuration Debug` argument to the underlying build tool (e.g., xcodebuild).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist build MyScheme -- -configuration Debug\n```\n\n----------------------------------------\n\nTITLE: Creating Project Template Extensions in Swift\nDESCRIPTION: Example of how to extend the Project model to add static constructors for creating feature frameworks with standardized structure. This helper defines conventions for target naming, bundle identifiers, and folder structure.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/code-sharing.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nextension Project {\n  public static func featureFramework(name: String, dependencies: [TargetDependency] = []) -> Project {\n    return Project(\n        name: name,\n        targets: [\n            .target(\n                name: name,\n                destinations: .iOS,\n                product: .framework,\n                bundleId: \"io.tuist.\\(name)\",\n                infoPlist: \"\\(name).plist\",\n                sources: [\"Sources/\\(name)/**\"],\n                resources: [\"Resources/\\(name)/**\",],\n                dependencies: dependencies\n            ),\n            .target(\n                name: \"\\(name)Tests\",\n                destinations: .iOS,\n                product: .unitTests,\n                bundleId: \"io.tuist.\\(name)Tests\",\n                infoPlist: \"\\(name)Tests.plist\",\n                sources: [\"Sources/\\(name)Tests/**\"],\n                resources: [\"Resources/\\(name)Tests/**\",],\n                dependencies: [.target(name: name)]\n            )\n        ]\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies Using Tuist Registry (Bash)\nDESCRIPTION: This snippet demonstrates resolving dependencies from the Tuist registry in a Swift package using the `swift package` command with the `--replace-scm-with-registry` flag. This command checks for available dependencies in the registry and uses them. It requires the Swift toolchain and a properly configured Tuist registry setup.  The output lists resolved dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/registry/swift-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswift package --replace-scm-with-registry resolve\n```\n\n----------------------------------------\n\nTITLE: Running Specific Scheme Tests with Tuist (Bash)\nDESCRIPTION: Executes tests for a specific scheme named 'MyScheme' using the `tuist test` command. This command first generates the project if necessary and then runs the tests via the platform's build tool (e.g., xcodebuild).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/test.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist test MyScheme\n```\n\n----------------------------------------\n\nTITLE: Editing Tuist Project and Installing Dependencies Using Bash\nDESCRIPTION: Shows commands to open the Tuist project for editing and to install dependencies. `tuist edit` opens the Xcode project for modification, enabling changes like adding dependencies in Package.swift. `tuist install` resolves and downloads dependencies using Swift Package Manager based on configuration. These steps integrate dependency management into the Tuist workflow, ensuring the project is properly configured and dependencies are available.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/quick-start/add-dependencies.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\n```\n\n----------------------------------------\n\nTITLE: Editing Tuist Project\nDESCRIPTION: Opens the Tuist project in Xcode for editing, allowing direct manipulation of the project files. This command is typically used to modify the `Package.swift` file and `Project.swift` manifest.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/add-dependencies.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ntuist edit\n```\n\n----------------------------------------\n\nTITLE: Warming the Cache with Tuist\nDESCRIPTION: This command initiates the process of warming the cache by building binaries for local use or sharing with teammates and CI environments. The command re-uses binaries to speed up the process.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist cache\n```\n\n----------------------------------------\n\nTITLE: Warming the Tuist Cache\nDESCRIPTION: This command initiates the process of warming the Tuist cache, which involves building and assigning unique identifiers to binaries derived from targets in the dependency graph. It re-uses existing binaries to speed up the caching process, making subsequent builds faster.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist cache\n```\n\n----------------------------------------\n\nTITLE: Authenticating as a User with Tuist CLI - Bash\nDESCRIPTION: Runs the command to initiate the interactive, web-based authentication process for users via the Tuist CLI. This command requires the Tuist CLI to be installed and accessible in your terminal. Upon execution, the CLI opens a web-based flow for logging in and then stores tokens in the user's configuration directory for future server requests. The command accepts no parameters and both access and refresh tokens are managed by the CLI.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/server/introduction/authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist Configuration in Swift\nDESCRIPTION: This Swift snippet shows how to create a minimal `Tuist.swift` configuration file used as an entry point by Tuist to identify the project root and manage global project configuration. It imports ProjectDescription and instantiates an empty Tuist configuration object. This file is required by Tuist tooling as a configuration anchor even if initially empty.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Running Shared App Previews with Tuist CLI - Bash\nDESCRIPTION: These Bash commands let users download and run a shared Tuist app preview from a URL. The optional --device flag specifies the target device. Requirements include an installed Tuist CLI and a valid preview link. The command retrieves and launches the preview on either a simulator or a named device, and outputs the running state of the app.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/share/previews.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist run {url}\ntuist run --device \"My iPhone\" {url} # Run the app on a specific device\n```\n\n----------------------------------------\n\nTITLE: Retrieving Boolean Environment Variables with Helper Method\nDESCRIPTION: Shows how to access boolean environment variables using the getBoolean helper method with a default value.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dynamic-configuration.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nEnvironment.isCI.getBoolean(default: false)\n```\n\n----------------------------------------\n\nTITLE: Running Shared App Previews with Tuist - bash\nDESCRIPTION: These commands demonstrate how to run a previously shared Tuist app preview using the Tuist CLI. The basic 'tuist run {url}' command launches the shared preview, while the '--device' flag allows targeting a specific connected device by name. Prerequisites: Tuist installed, a valid preview link URL, optional device connection. Inputs: preview URL, optional device name. Outputs: runs the shared app on simulator or device. Limitations: requires authentication and devices to be properly set up.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/share/previews.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist run {url}\ntuist run --device \"My iPhone\" {url} # Run the app on a specific device\n```\n\n----------------------------------------\n\nTITLE: Building and Testing with Tuist (Shell)\nDESCRIPTION: This shell snippet shows how to use the tuist command-line tool to install, generate, build, and test a project. It's used in a CI environment to validate the generated project. `tuist install` installs dependencies, `tuist generate` generates the Xcode project, `tuist build` compiles the project, and `tuist test` executes the tests.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntuist install\ntuist generate\ntuist build -- ...{xcodebuild flags} # or tuist test\n```\n\n----------------------------------------\n\nTITLE: Running Tuist Generate and CocoaPods Install Workflow (Bash)\nDESCRIPTION: A simple bash script outlining the integration workflow for CocoaPods with a Tuist project. It first runs `tuist generate` to create the base Xcode project and then executes `pod install` to integrate CocoaPods dependencies and create the Xcode workspace.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n#!/usr/bin/env bash\n\ntuist generate\npod install\n```\n\n----------------------------------------\n\nTITLE: Declaring iOS Unit Tests in Bazel Build File (Starlark)\nDESCRIPTION: This Bazel BUILD snippet demonstrates how to declare an iOS unit test target using the ios_unit_test rule. It specifies the test bundle's name, bundle identifier, minimum supported OS version, test host, and dependencies. Inputs are test source files and dependent libraries; the result is a test bundle for iOS. Requires Bazel with iOS-specific rules installed and available in the workspace.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_2\n\nLANGUAGE: Starlark\nCODE:\n```\nios_unit_test(\n    name = \"MyLibraryTests\",\n    bundle_id = \"io.tuist.MyLibraryTests\",\n    minimum_os_version = \"16.0\",\n    test_host = \"//MyApp:MyLibrary\",\n    deps = [\":MyLibraryTests.library\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Project in Tuist Server\nDESCRIPTION: This command creates a new project in the Tuist server with a specified handle and name. The full identifier 'my-handle/MyApp' will be used to connect local projects to this server project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/gather-insights.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist project create my-handle/MyApp\n\n# Tuist project my-handle/MyApp was successfully created 🎉\n```\n\n----------------------------------------\n\nTITLE: Test execution with binary caching in Tuist\nDESCRIPTION: Command to run tests with binary caching enabled, which automatically replaces dependencies with cached binaries when available.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/cache.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test\n```\n\n----------------------------------------\n\nTITLE: Project Testing with Cached Binaries - Bash\nDESCRIPTION: Executes tests using tuist test, utilizing cached binaries for dependencies wherever possible to speed up builds and feedback. Assumes that dependencies have previously been cached using tuist cache or related commands. Outputs test results for the specified targets or the whole project. Applicable for local development and continuous integration testing pipelines.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/cache.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test\n```\n\n----------------------------------------\n\nTITLE: Define a new macOS framework project\nDESCRIPTION: This code defines a `Project` using the ProjectDescription framework. It configures a macOS framework target named \"MyFramework\" with specified settings, sources, and dependencies. It also sets the bundle identifier.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/new-project.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyFramework\",\n    targets: [\n        .target(\n            name: \"MyFramework\",\n            destinations: .macOS,\n            product: .framework,\n            bundleId: \"io.tuist.MyFramework\",\n            sources: [\"MyFramework/Sources/**\"],\n            dependencies: []\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Project Description Helpers Plugin\nDESCRIPTION: Shows how to import and use a project description helpers plugin in a project manifest file, using the plugin's name as the module name.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/plugins.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\nimport MyTuistPlugin\nlet project = Project.app(name: \"MyCoolApp\", platform: .iOS)\n```\n\n----------------------------------------\n\nTITLE: Importing Project Description Helpers from Plugin\nDESCRIPTION: This demonstrates how to import and use project description helpers from a plugin.  It shows how to use the plugin's module name to import and call the helpers.  The plugin's name is the module name.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/plugins.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\nimport MyTuistPlugin\nlet project = Project.app(name: \"MyCoolApp\", platform: .iOS)\n```\n\n----------------------------------------\n\nTITLE: Updating Cache Skipping Logic in Tuist Generate Command\nDESCRIPTION: Illustrates the change in syntax for skipping the binary cache for specific targets when running `tuist generate`. The deprecated `--skip-cache` flag (shown in 'Before') is removed in favor of simply listing the targets to skip as arguments after the command (shown in 'After').\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/references/migrations/from-v3-to-v4.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate --skip-cache Foo\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Foo\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist via Homebrew in Bash\nDESCRIPTION: Installs the Tuist command-line tool using the Homebrew package manager. It first adds the official Tuist tap, then installs the `tuist` formula, and finally initializes a new Tuist project in the current directory.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap tuist/tuist\nbrew install --formula tuist\n\ntuist init\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow: Keychain and Tuist Login\nDESCRIPTION: An example GitHub Actions workflow that creates a keychain, logs into the Tuist Registry using a `TUIST_CONFIG_TOKEN` secret, and performs build steps.  It demonstrates how to integrate Tuist Registry authentication into a CI pipeline. The `TUIST_CONFIG_TOKEN` environment variable is set to authenticate with the registry.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry/continuous-integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build\n\njobs:\n  build:\n    steps:\n      - # Your set up steps...\n      - name: Create keychain\n        run: |\n        TMP_DIRECTORY=$(mktemp -d)\n        KEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\n        KEYCHAIN_PASSWORD=$(uuidgen)\n        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH\n        security default-keychain -s $KEYCHAIN_PATH\n        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n      - name: Log in to the Tuist Registry\n        env:\n          TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_CONFIG_TOKEN }}\n        run: tuist registry login\n      - # Your build steps\n```\n\n----------------------------------------\n\nTITLE: Testing Projects with Tuist CLI and Cached Binaries - Bash\nDESCRIPTION: Illustrates the use of the 'tuist test' command within a Tuist-managed project, leveraging binary cache when available. No additional dependencies are required except for Tuist and a project configured for testing. The command can be run to execute the project's tests, using cached dependencies to minimize build times. Input is implicit from the project's configuration, and the output is standard test results.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/cache.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test\n\n```\n\n----------------------------------------\n\nTITLE: Updating `tuist focus` Command to Exclude Related Tests and Bundle Targets\nDESCRIPTION: This shell command modification changes `tuist focus` to require explicit inclusion of tests and bundle targets, preventing accidental inclusion of unwanted targets. It enhances control over focus scope.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ntuist focus --include-tests --include-bundle-targets\n```\n\n----------------------------------------\n\nTITLE: Using a Git-Based Plugin (Tuist.swift)\nDESCRIPTION: This snippet shows how to use plugins stored in a Git repository. The `Tuist.swift` file imports `ProjectDescription`. It uses the `.git` method to specify the plugin's URL and tag or SHA. `tuist install` fetches plugins from the specified Git repository.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/plugins.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\\n\\n\\nlet tuist = Tuist(\\n    project: .tuist(plugins: [\\n        .git(url: \"https://url/to/plugin.git\", tag: \"1.0.0\"),\\n        .git(url: \"https://url/to/plugin.git\", sha: \"e34c5ba\")\\n    ])\\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Tuist External Dependencies Swift\nDESCRIPTION: Defines external dependencies using a Swift Package Manager manifest (`Package.swift`) located in the `Tuist` directory. It includes a Tuist-specific `PackageSettings` struct for overriding product types (defaults to `.staticFramework`) and lists dependencies within the `dependencies` array of the `Package` struct.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Tuist Organization Account via CLI\nDESCRIPTION: This command uses the Tuist CLI to create a new organization account on the Tuist server. You need to provide a unique handle for the organization. This is the primary method for managing organizations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/server/introduction/accounts-and-projects.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization create {account-handle}\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuist Project Description Helper Plugin Manifest (Plugin.swift)\nDESCRIPTION: Shows the Swift code required within a `Plugin.swift` file to declare a project description helper plugin. It imports the `ProjectDescription` framework and defines a `Plugin` constant specifying the plugin's name.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/plugins.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet plugin = Plugin(name: \"MyPlugin\")\n```\n\n----------------------------------------\n\nTITLE: Defining a macOS Framework Project in Swift using Tuist Project.swift\nDESCRIPTION: Defines a macOS framework project structure using the `ProjectDescription` framework for Tuist. It includes a single target for the framework, specifying destination, product type, bundle ID, source paths, and an empty dependencies list.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/new-project.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyFramework\",\n    targets: [\n        .target(\n            name: \"MyFramework\",\n            destinations: .macOS,\n            product: .framework,\n            bundleId: \"io.tuist.MyFramework\",\n            sources: [\"MyFramework/Sources/**\"],\n            dependencies: []\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Running Latest or Specific App Previews by Reference - Bash\nDESCRIPTION: This set of Bash commands shows how to use Tuist CLI to fetch and run the most recent or a specific build of an app preview by referencing branch names or commit hashes. A Tuist project properly set up with version control is required. Supported references include 'latest', a branch name, or a commit SHA, and the output is the running state of the selected app preview. This approach provides fine-grained control over which build is executed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/share/previews.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist run App@latest # Runs latest App preview associated with the project's default branch\ntuiste run App@my-feature-branch # Runs latest App preview associated with a given branch\ntuist run App@00dde7f56b1b8795a26b8085a781fb3715e834be # Runs latest App preview associated with a given git commit sha\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Package dependencies with Tuist\nDESCRIPTION: Command to install the Swift Package dependencies using Tuist. This uses the Swift Package Manager under the hood to resolve and pull the dependencies of the package.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/swift-package.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\n```\n\n----------------------------------------\n\nTITLE: Structure for Main Workspace (Project Structure)\nDESCRIPTION: This snippet outlines the primary workspace structure for the project, including the main iOS application ('MainApp') with its unit tests and a dynamic iOS framework ('Framework1') with its unit tests. It shows how the app and framework are organized within the main workspace.\nSOURCE: https://github.com/tuist/tuist/blob/main/fixtures/ios_app_with_transitive_framework/README.md#_snippet_0\n\nLANGUAGE: Project Structure\nCODE:\n```\nWorkspace:\n  - App:\n    - MainApp (iOS app)\n    - MainAppTests (iOS unit tests)\n  - Framework1:\n    - Framework1 (dynamic iOS framework)\n    - Framework1Tests (iOS unit tests)\n```\n\n----------------------------------------\n\nTITLE: Create Project Tokens for Authentication in CI (Korean)\nDESCRIPTION: This command creates project-scoped tokens for authentication within CI/CD environments. It generates tokens to authenticate against the Tuist server. The generated token is then expected to be stored in the 'TUIST_CONFIG_TOKEN' environment variable.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/server/introduction/authentication.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist project tokens create\n```\n\n----------------------------------------\n\nTITLE: Building and Sharing App Previews with Xcode and Tuist - Bash\nDESCRIPTION: This snippet illustrates building apps using native xcodebuild commands and sharing them via Tuist. The 'xcodebuild' commands compile the app for the simulator or device. 'tuist share App' and 'tuist share App.ipa' are then used to generate preview links using different build artifacts. Requires Xcode, Tuist, and proper signing for device builds. The process allows sharing builds produced outside Tuist directly through its preview service.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/share/previews.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcodebuild -scheme App -project App.xcodeproj -configuration Debug # Build the app for the simulator\nxcodebuild -scheme App -project App.xcodeproj -configuration Debug -destination 'generic/platform=iOS' # Build the app for the device\ntuist share App --configuration Debug --platforms iOS\ntuist share App.ipa # Share an existing .ipa file\n```\n\n----------------------------------------\n\nTITLE: Running All Tests without Selective Testing using Tuist (Bash)\nDESCRIPTION: Executes all tests in the project using `tuist test` and disables the selective testing feature with the `--no-selective-testing` flag. This ensures all tests are run, regardless of whether Tuist determines they need to be based on code changes.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/test.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-selective-testing\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Scoped Token for CI Environments\nDESCRIPTION: Command to create a project-scoped token for non-interactive environments like CI. The token must be set as the TUIST_CONFIG_TOKEN environment variable with CI=1 also defined.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/server/introduction/authentication.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist project tokens create\n```\n\n----------------------------------------\n\nTITLE: Using a Tuist Template via the Scaffold Command in Bash\nDESCRIPTION: Shows how to run the Tuist CLI scaffold command to generate project components from a previously defined template. The example invokes the `tuist scaffold` command with the template name, a required `--name` argument, and an optional `--platform` argument set to 'macos'. This allows creating new features or projects consistent with the template definition. The command expects the template to be defined in the appropriate Tuist/Templates directory.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/templates.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist scaffold name_of_template --name Name --platform macos\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Project.swift to use external .xcconfig files in Swift\nDESCRIPTION: Demonstrates updating the Project.swift manifest to reference the extracted .xcconfig files for Debug and Release build configurations at the project level. This allows build settings to be managed externally, simplifying project manifests and supporting cleaner migrations. Requires the .xcconfig files to be created beforehand and accessible at specified paths.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\"),\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\"),\n    ]),\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Use arguments to cache targets - Bash\nDESCRIPTION: This bash snippet shows the new command-line arguments for using the binary cache. By using the arguments the cache can be skipped for a specific target. The purpose is to optimize build times and avoid unnecessary cache usage.  \nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/references/migrations/from-v3-to-v4.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Foo\n```\n\n----------------------------------------\n\nTITLE: Importing Project Description Helper Module from Plugin - Swift\nDESCRIPTION: This snippet shows how to make project description helpers from a plugin available for use in your `Project.swift` manifest. After declaring the plugin in `Tuist.swift`, you can import its module. The module name is the same as the plugin name defined in its `Plugin.swift` file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/plugins.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\nimport MyTuistPlugin\nlet project = Project.app(name: \"MyCoolApp\", platform: .iOS)\n```\n\n----------------------------------------\n\nTITLE: Defining Simplified Build Inspection Post-Action (Swift)\nDESCRIPTION: This Swift code snippet shows a simplified way to add a 'tuist inspect build' post-action to a custom scheme within a Tuist Project manifest (`Project.swift`). This version is suitable for users who do not use Mise and directly calls the 'tuist inspect build' command. The 'execution' parameter ensures the script runs every time the build action completes.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.postAction(\n    name: \"Inspect Build\",\n    script: \"tuist inspect build\",\n    execution: .always\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Generation Options with Tuist.swift in Swift\nDESCRIPTION: This example demonstrates how to customize Tuist's behavior by defining a Tuist.swift manifest with specific generation options. Here it enables the enforcement of explicit dependencies in the project definition.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/manifests.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(\n    project: .tuist(generationOptions: .options(enforceExplicitDependencies: true))\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Package.swift to Mandate Registry Resolution (Diff/Swift)\nDESCRIPTION: This diff illustrates how to modify the `dependencies` array within `Tuist/Package.swift` to enforce dependency resolution via the Tuist Registry. It replaces the SCM `url` parameter with a registry `id` parameter, using the format `{organization}.{repository}` (e.g., `pointfreeco.swift-composable-architecture`). This ensures the specified package is always fetched from the registry.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry/xcodeproj-integration.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist.swift for Registry Integration (Swift)\nDESCRIPTION: This Swift snippet demonstrates how to configure the `Tuist.swift` manifest file to enable registry usage for dependencies. It adds the `--replace-scm-with-registry` flag to the `passthroughSwiftPackageManagerArguments` within the `installOptions`. This instructs Tuist to attempt resolving dependencies from the registry if available when using the XcodeProj-based integration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry/xcodeproj-integration.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(\n    fullHandle: \"{account-handle}/{project-handle}\",\n    project: .tuist(\n        installOptions: .options(passthroughSwiftPackageManagerArguments: [\"--replace-scm-with-registry\"])\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Resolve Package Dependencies with Xcodebuild\nDESCRIPTION: This command resolves package dependencies using `xcodebuild` and specifies a custom directory (`.build`) for cloned source packages.  This enables caching of resolved dependencies for faster CI builds, by using `-clonedSourcePackagesDirPath .build`. It's tailored for Xcode integration of packages.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry/continuous-integration.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nxcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist Project - Bash\nDESCRIPTION: This Bash snippet initializes a Tuist project in the current directory.  It uses the `tuist init` command.  The command prompts the user through the process of either creating a new generated project or integrating an existing Xcode project or workspace. No specific parameters are required; it operates within the shell's current working directory.  The primary output is the interactive project setup.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/get-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist init\n```\n\n----------------------------------------\n\nTITLE: Editing Tuist Project via Command Line\nDESCRIPTION: Demonstrates the use of the `tuist edit` shell command that generates an editable Xcode project from the Tuist definitions. This tool allows developers to open the project conveniently in Xcode for further development and inspection. It is recommended to use this in incremental steps when migrating large projects to ease the transition.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n```\n\n----------------------------------------\n\nTITLE: Using project description helpers in Project.swift\nDESCRIPTION: This snippet demonstrates how to import the `ProjectDescriptionHelpers` module in your `Project.swift` manifest and utilize the custom static method `featureFramework` to create a project. It simplifies project setup by applying standardized configurations, making code reuse straightforward and enforcing conventions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/code-sharing.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet project = Project.featureFramework(name: \"MyFeature\")\n```\n\n----------------------------------------\n\nTITLE: Referencing External Dependencies in Tuist Target Swift\nDESCRIPTION: This Swift code snippet shows how to reference an external dependency, previously declared in a `Package.swift` file and installed with `tuist install`, within the `dependencies` array of a `Target` definition in a `Project.swift` file. It uses the `.external(name:)` syntax to link the external package (in this case, \"Alamofire\") to the target.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    organizationName: \"tuist.io\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: [.iPhone],\n            product: .app,\n            bundleId: \"io.tuist.app\",\n            deploymentTargets: .iOS(\"13.0\"),\n            infoPlist: .default,\n            sources: [\"Targets/App/Sources/**\"],\n            dependencies: [\n                .external(name: \"Alamofire\") // [!code ++]\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop for Tuist MCP (Global Installation)\nDESCRIPTION: This JSON snippet shows how to configure Claude Desktop's `claude_desktop_config.json` file to integrate with a globally installed Tuist MCP server. It adds an entry under `mcpServers` named 'tuist' which directly executes the `tuist mcp start` command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/ai/mcp.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"tuist\",\n      \"args\": [\"mcp\", \"start\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing the Project Structure with Tuist Graph\nDESCRIPTION: This shell command invokes Tuist to generate a visual representation of the project structure in PNG format. The command creates a 'graph.png' image file in the project directory, which visually displays dependencies and target relationships, aiding in project understanding and management.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/add-dependencies.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist graph\n```\n\n----------------------------------------\n\nTITLE: Defining a macOS Framework Project with Tuist in Swift\nDESCRIPTION: This `Project.swift` manifest defines a macOS framework project named \"MyFramework\" as part of a manual setup. It specifies a single target for the framework, including its destination (`.macOS`), product type (`.framework`), bundle ID, source paths, and dependencies. This demonstrates configuring a non-application project manually.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/new-project.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyFramework\",\n    targets: [\n        .target(\n            name: \"MyFramework\",\n            destinations: .macOS,\n            product: .framework,\n            bundleId: \"io.tuist.MyFramework\",\n            sources: [\"MyFramework/Sources/**\"],\n            dependencies: []\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Synthesizers in Tuist Project Manifest (Swift)\nDESCRIPTION: Illustrates how to customize the list of resource types for which Tuist should generate type-safe accessors within the `Project.swift` manifest file. This example explicitly configures the project to synthesize accessors only for strings and fonts using the `resourceSynthesizers` parameter.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/synthesized-files.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(resourceSynthesizers: [.string(), .fonts()])\n```\n\n----------------------------------------\n\nTITLE: Tuist generate without skip-cache flag\nDESCRIPTION: This is the Tuist 4 command. It shows how to generate a Tuist project for a specific target, 'Foo', in Tuist 4, where the `--skip-cache` flag is no longer used and skipping the cache is handled via arguments. The omission of the flag implies that the caching behavior is now controlled by default settings or other arguments.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/references/migrations/from-v3-to-v4.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Foo\n```\n\n----------------------------------------\n\nTITLE: Using a Template - Bash\nDESCRIPTION: This Bash command demonstrates how to use the `tuist scaffold` command to generate files based on a defined template. It specifies the name of the template and provides values for the required and optional attributes. The command will execute the template, utilizing the `name_of_template` template with `Name` and optionally `macos` as parameters, based on its definition. Prerequisites: Tuist must be installed and configured.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/templates.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntuist scaffold name_of_template --name Name --platform macos\n```\n\n----------------------------------------\n\nTITLE: Basic cache warming command in Tuist\nDESCRIPTION: The basic command to warm the cache in Tuist, generating binaries for local use or sharing with team members and CI environments.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist cache\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow: Keychain and Registry Login\nDESCRIPTION: This YAML snippet demonstrates a GitHub Actions workflow that creates a keychain, logs in to the Tuist Registry, and then proceeds with build steps.  It sets up the keychain and then authenticates using the `TUIST_CONFIG_TOKEN` secret stored in GitHub. Ensure that the `TUIST_CONFIG_TOKEN` environment variable is correctly set in your GitHub repository secrets.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry/continuous-integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build\n\njobs:\n  build:\n    steps:\n      - # Your set up steps...\n      - name: Create keychain\n        run: |\n        TMP_DIRECTORY=$(mktemp -d)\n        KEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\n        KEYCHAIN_PASSWORD=$(uuidgen)\n        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH\n        security default-keychain -s $KEYCHAIN_PATH\n        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n      - name: Log in to the Tuist Registry\n        env:\n          TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_CONFIG_TOKEN }}\n        run: tuist registry login\n      - # Your build steps\n```\n\n----------------------------------------\n\nTITLE: Refactoring Scheme Action Models to Use Static Initializers in Swift\nDESCRIPTION: This snippet describes the migration from constructors to static methods in Swift scheme action models like `TestAction`. It facilitates API flexibility and backward compatibility by replacing `init()` with class-specific static initializers.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nTestAction.testAction(parameters...)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions: Exporting Tuist logs\nDESCRIPTION: This YAML snippet demonstrates how to export Tuist logs in a GitHub Actions workflow. It sets the `XDG_STATE_HOME` environment variable to `/tmp`, runs `tuist generate`, and then uses the `actions/upload-artifact` action to upload the logs from `/tmp/tuist/logs/*.log` as an artifact named `tuist-logs`. This is useful for debugging Tuist executions in CI environments.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/cli/logging.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Node CI\n\non: [push]\n\nenv:\n  XDG_STATE_HOME: /tmp\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      # ... other steps\n      - run: tuist generate\n      # ... do something with the project\n      - name: Export Tuist logs\n        uses: actions/upload-artifact@v4\n        with:\n          name: tuist-logs\n          path: /tmp/tuist/logs/*.log\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with Tuist\nDESCRIPTION: This command runs 'tuist install' to resolve and download the dependencies defined in the Swift Package Manager for the project, ensuring all required packages are available for project generation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/swift-package.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\n```\n\n----------------------------------------\n\nTITLE: Defining an iOS Unit Test Target in Tuist (Swift)\nDESCRIPTION: Declares an iOS unit test target in Tuist, configured using Swift in the Project.swift file. It defines key attributes such as the test name, destination, product type, bundle identifier, source locations, and target dependencies. Requires Tuist and Swift source files under the specified paths. Output is a unit test bundle compatible with Xcode. This configuration only works in the context of Tuist-managed projects.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(\n            name: \"MyLibraryTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyLibraryTests\",\n            sources: \"Tests/MyLibraryTests/**\",\n            dependencies: [\n                .target(name: \"MyLibrary\"),\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies with Registry (Bash)\nDESCRIPTION: This command uses the `swift package` tool with the `--replace-scm-with-registry` flag to resolve dependencies from the Tuist Registry if they are available. It ensures that when resolving dependencies, the registry is checked first before using the standard source control management (SCM) methods.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/registry/swift-package.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nswift package --replace-scm-with-registry resolve\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Plugin in Tuist.swift\nDESCRIPTION: Shows how to declare a local plugin dependency in a Tuist.swift manifest file, specifying the local path to the plugin.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/plugins.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\n\nlet tuist = Tuist(\n    project: .tuist(plugins: [\n        .local(path: \"/Plugins/MyPlugin\")\n    ])\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Tuist Preview Badge to README - Markdown\nDESCRIPTION: This markdown snippet adds a visual badge to your repository's README file, linking to the latest Tuist app preview for your project. Replace '{account-handle}' and '{project-handle}' with your Tuist account and project names, respectively. Intended as a persistent link and status indicator for collaborators. No dependencies besides README edit permissions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/share/previews.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[![Tuist Preview](https://tuist.dev/{account-handle}/{project-handle}/previews/latest/badge.svg)](https://tuist.dev/{account-handle}/{project-handle}/previews/latest)\n```\n\n----------------------------------------\n\nTITLE: Deploying Tuist Service with Docker Compose - YAML\nDESCRIPTION: This Docker Compose file defines a multi-container application for deploying the Tuist service on-premise. It includes services for the TimescaleDB database, a pgweb database viewer, and the main Tuist application, setting up necessary ports, volumes, environment variables, and service dependencies for a functional deployment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/server/on-premise/install.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: timescale/timescaledb-ha:pg16\n    restart: always\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - PGDATA=/var/lib/postgresql/data/pgdata\n    ports:\n      - '5432:5432'\n    volumes:\n      - db:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  pgweb:\n    container_name: pgweb\n    restart: always\n    image: sosedoff/pgweb\n    ports:\n      - \"8081:8081\"\n    links:\n      - db:db\n    environment:\n      PGWEB_DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n    depends_on:\n      - db\n\n  tuist:\n    image: ghcr.io/tuist/tuist:latest\n    container_name: tuist\n    depends_on:\n      - db\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n      - \"443:443\"\n    expose:\n      - \"80\"\n      - \"8080\"\n      - \"443:443\"\n    environment:\n      # Base Tuist Env - https://docs.tuist.io/es/guides/dashboard/on-premise/install#base-environment-configuration\n      TUIST_USE_SSL_FOR_DATABASE: \"0\"\n      TUIST_LICENSE:  # ...\n      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n      TUIST_APP_URL: https://localhost:8080\n      TUIST_SECRET_KEY_BASE: # ...\n      WEB_CONCURRENCY: 80\n\n      # Auth - one method\n      # GitHub Auth - https://docs.tuist.io/es/guides/dashboard/on-premise/install#github\n      TUIST_GITHUB_OAUTH_ID:\n      TUIST_GITHUB_APP_CLIENT_SECRET:\n\n      # Okta Auth - https://docs.tuist.io/es/guides/dashboard/on-premise/install#okta\n      TUIST_OKTA_SITE:\n      TUIST_OKTA_CLIENT_ID:\n      TUIST_OKTA_CLIENT_SECRET:\n      TUIST_OKTA_AUTHORIZE_URL: # Optional\n      TUIST_OKTA_TOKEN_URL: # Optional\n      TUIST_OKTA_USER_INFO_URL: # Optional\n      TUIST_OKTA_EVENT_HOOK_SECRET: # Optional\n\n      # Storage\n      AWS_ACCESS_KEY_ID: # ...\n      AWS_SECRET_ACCESS_KEY: # ...\n      AWS_S3_REGION: # ...\n      AWS_ENDPOINT: # https://amazonaws.com\n      TUIST_S3_BUCKET_NAME: # ...\n\n      # Other\n\nvolumes:\n  db:\n    driver: local\n\n```\n\n----------------------------------------\n\nTITLE: Adding Core Data Models to Sources Build Phase\nDESCRIPTION: Includes Core Data models in the target's sources build phase, ensuring that `.xcdatamodel` files are compiled and integrated properly into the build process.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_35\n\nLANGUAGE: Swift\nCODE:\n```\ntarget.addSourceFiles(['*.xcdatamodel'])\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Type Selection in Swift for Tuist Manifests\nDESCRIPTION: A Swift function that reads the environment variable set during generation to determine whether to use static libraries or frameworks, enabling switching between development and release configurations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/tma-architecture.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// You can place this in your manifest files or helpers\n// and use the returned value when instantiating targets.\nfunc productType() -> Product {\n    if case let .string(productType) = Environment.productType {\n        return productType == \"static-library\" ? .staticLibrary : .framework\n    } else {\n        return .framework\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist Completion Script for Zsh with oh-my-zsh\nDESCRIPTION: This command generates a Tuist completion script and saves it to the oh-my-zsh completions directory. This enables autocomplete functionality for Tuist commands in Zsh shells with oh-my-zsh installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/cli/shell-completions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist --generate-completion-script > ~/.oh-my-zsh/completions/_tuist\n```\n\n----------------------------------------\n\nTITLE: Editing Tuist Manifest Files with Bash Command\nDESCRIPTION: Executes the 'tuist edit' command from within a Tuist project directory to generate an Xcode project containing all manifest files for editing and compilation. This command requires Tuist to be installed and the existence of a valid 'Tuist.swift' file at the project root. No arguments are necessary; expected output is an Xcode project opened for editing manifests, with no direct effect on the original project files. Limitations include need for correct project structure and cannot be run from generated Xcode projects.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/editing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n```\n\n----------------------------------------\n\nTITLE: Version Compatibility Options for Xcode\nDESCRIPTION: Addition of version compatibility options for specifying compatible Xcode versions using exact, upToNextMajor, and upToNextMinor constraints.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n.exact, .upToNextMajor, and .upToNextMinor\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Community Icon in HTML File - HTML/SVG\nDESCRIPTION: This code snippet renders an SVG graphic consisting of a colored circle and a complex path, styled and positioned via inline SVG attributes. It is embedded within an HTML file, likely in the template section of a UI component. No external dependencies are required beyond browser SVG support; the core parameters are the position, scale, and style properties defined within the SVG tags. The expected output is a customized vector icon, and usage is limited to modern browsers that support inlined SVG rendering.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<g style=\"stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;\" transform=\"translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)\" >\n\t<circle cx=\"45\" cy=\"45\" r=\"45\" style=\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(255,69,0); fill-rule: nonzero; opacity: 1;\" transform=\"  matrix(1 0 0 1 0 0) \"/>\n\t<path d=\"M 75.011 45 c -0.134 -3.624 -3.177 -6.454 -6.812 -6.331 c -1.611 0.056 -3.143 0.716 -4.306 1.823 c -5.123 -3.49 -11.141 -5.403 -17.327 -5.537 l 2.919 -14.038 l 9.631 2.025 c 0.268 2.472 2.483 4.262 4.955 3.993 c 2.472 -0.268 4.262 -2.483 3.993 -4.955 s -2.483 -4.262 -4.955 -3.993 c -1.421 0.145 -2.696 0.973 -3.4 2.204 L 48.68 17.987 c -0.749 -0.168 -1.499 0.302 -1.667 1.063 c 0 0.011 0 0.011 0 0.022 l -3.322 15.615 c -6.264 0.101 -12.36 2.025 -17.55 5.537 c -2.64 -2.483 -6.801 -2.36 -9.284 0.291 c -2.483 2.64 -2.36 6.801 0.291 9.284 c 0.515 0.481 1.107 0.895 1.767 1.186 c -0.045 0.66 -0.045 1.32 0 1.98 c 0 10.078 11.745 18.277 26.23 18.277 c 14.485 0 26.23 -8.188 26.23 -18.277 c 0.045 -0.66 0.045 -1.32 0 -1.98 C 73.635 49.855 75.056 47.528 75.011 45 z M 30.011 49.508 c 0 -2.483 2.025 -4.508 4.508 -4.508 c 2.483 0 4.508 2.025 4.508 4.508 s -2.025 4.508 -4.508 4.508 C 32.025 53.993 30.011 51.991 30.011 49.508 z M 56.152 62.058 v -0.179 c -3.199 2.405 -7.114 3.635 -11.119 3.468 c -4.005 0.168 -7.919 -1.063 -11.119 -3.468 c -0.425 -0.515 -0.347 -1.286 0.168 -1.711 c 0.447 -0.369 1.085 -0.369 1.544 0 c 2.707 1.98 6.007 2.987 9.362 2.83 c 3.356 0.179 6.667 -0.783 9.407 -2.74 c 0.492 -0.481 1.297 -0.47 1.779 0.022 C 56.655 60.772 56.644 61.577 56.152 62.058 z M 55.537 54.34 c -0.078 0 -0.145 0 -0.224 0 l 0.034 -0.168 c -2.483 0 -4.508 -2.025 -4.508 -4.508 s 2.025 -4.508 4.508 -4.508 s 4.508 2.025 4.508 4.508 C 59.955 52.148 58.02 54.239 55.537 54.34 z\" style=\"stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(255,255,255); fill-rule: nonzero; opacity: 1;\" transform=\" matrix(1 0 0 1 0 0) \" stroke-linecap=\"round\" />\n            </g>\n```\n\n----------------------------------------\n\nTITLE: Comparing Configuration File Structures (XcodeGen vs. Tuist)\nDESCRIPTION: Illustrates the typical directory structure and configuration files for XcodeGen (`project.yaml`) versus Tuist (`Project.swift`, `Workspace.swift`, `Tuist.swift`). Tuist utilizes Swift files for defining projects and workspaces.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/\n  project.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n/\n  Tuist.swift\n  Project.swift\n  Workspace.swift\n```\n\n----------------------------------------\n\nTITLE: Authenticate User to Tuist Server (Korean)\nDESCRIPTION: This command initiates the web-based authentication process for user login to the Tuist server. It guides the user through the authentication steps. Upon successful authentication, the CLI stores long-lasting refresh and temporary access tokens in a credentials file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/server/introduction/authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Adding Tuist Preview Badge to README - markdown\nDESCRIPTION: This markdown snippet adds an image badge linked to the latest Tuist Preview for a given project. Replace '{account-handle}' and '{project-handle}' with your own. The badge provides direct access to app previews from the repository README. No dependencies. Input: account and project handles. Output: a clickable badge in the README file. Limitations: badge URLs must be public and reachable.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/share/previews.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[![Tuist Preview](https://tuist.dev/{account-handle}/{project-handle}/previews/latest/badge.svg)](https://tuist.dev/{account-handle}/{project-handle}/previews/latest)\n```\n\n----------------------------------------\n\nTITLE: Removing `.cocoapods` Target Dependency Dependency in Swift\nDESCRIPTION: This change removes the deprecated `.cocoapods` dependency dependency from the project, encouraging explicit post-generation `pod install` commands to improve clarity and dependency management.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Update SSO Configuration for Tuist Organization with Okta (Korean)\nDESCRIPTION: This command updates the SSO configuration for a Tuist organization, specifically configuring it for Okta.  It mirrors the behavior of the Google Workspace integration. The command requires the organization name, the provider as 'okta', and the organization's domain.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/server/introduction/authentication.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider okta --organization-id my-okta-domain.com\n```\n\n----------------------------------------\n\nTITLE: Setting OTHER_LDFLAGS for Target in Tuist\nDESCRIPTION: Example of configuring a target's build settings to include the -ObjC linker flag, which is necessary when integrating Objective-C dependencies in a static linking setup.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/dependencies.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nTarget.target(\n    ...\n    settings: .settings(\n        base: [\"OTHER_LDFLAGS\": \"$(inherited) -ObjC\"]\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Fly.io Configuration for Tuist Cloud Deployment\nDESCRIPTION: Sample Fly.io configuration file (fly.toml) for deploying Tuist Cloud, including app settings, environment configuration, services setup, and HTTP health checks.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/server/on-premise/install.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\napp = \"tuist\"\nprimary_region = \"fra\"\nkill_signal = \"SIGINT\"\nkill_timeout = \"5s\"\n\n[experimental]\n  auto_rollback = true\n\n[env]\n  # Your environment configuration goes here\n  # Or exposed through Fly secrets\n\n[processes]\n  app = \"/usr/local/bin/hivemind /app/Procfile\"\n\n[[services]]\n  protocol = \"tcp\"\n  internal_port = 8080\n  auto_stop_machines = false\n  auto_start_machines = false\n  processes = [\"app\"]\n  http_options = { h2_backend = true }\n\n  [[services.ports]]\n    port = 80\n    handlers = [\"http\"]\n    force_https = true\n\n  [[services.ports]]\n    port = 443\n    handlers = [\"tls\", \"http\"]\n  [services.concurrency]\n    type = \"connections\"\n    hard_limit = 100\n    soft_limit = 80\n\n  [[services.http_checks]]\n    interval = 10000\n    grace_period = \"10s\"\n    method = \"get\"\n    path = \"/ready\"\n    protocol = \"http\"\n    timeout = 2000\n    tls_skip_verify = false\n    [services.http_checks.headers]\n\n[[statics]]\n  guest_path = \"/app/public\"\n  url_prefix = \"/\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Swift Package Product in Tuist Target (Swift)\nDESCRIPTION: Shows how to link a target (`MyTarget`) against a product (`CryptoSwift`) from a previously declared Swift package within `Project.swift`. The `.package` dependency type is used, specifying the product name and linking type (`.runtime`).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nlet target = .target(name: \"MyTarget\", dependencies: [\n    .package(product: \"CryptoSwift\", type: .runtime)\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Synthesizers in Project Definition\nDESCRIPTION: Demonstrates how to configure which resource synthesizers should be used for a project. This allows customizing which resource accessors will be generated during project generation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/synthesized-files.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(resourceSynthesizers: [.string(), .fonts()])\n```\n\n----------------------------------------\n\nTITLE: Standard Tuist Project Directory Structure Example (Bash)\nDESCRIPTION: Illustrates the typical file and directory layout for a Tuist project designed to generate an Xcode project. It shows the placement of key manifest files (`Tuist.swift`, `Workspace.swift`, `Project.swift`) and the central `Tuist` directory containing shared helpers (`ProjectDescriptionHelpers`) and Swift Package dependencies (`Package.swift`). The `Projects` directory typically holds individual feature or application modules.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/directory-structure.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTuist.swift\nTuist/\n  Package.swift\n  ProjectDescriptionHelpers/\nProjects/\n  App/\n    Project.swift\n  Feature/\n    Project.swift\nWorkspace.swift\n```\n\n----------------------------------------\n\nTITLE: Running Selective UI Tests with `tuist test` (Shell)\nDESCRIPTION: Demonstrates how to run selective tests, including UI tests, using the `tuist test` command by specifying the target destination. This is necessary for Tuist to perform selective testing on UI test targets. Examples show specifying the destination using the `--device` flag or by passing the `-destination` argument directly to xcodebuild using device name or simulator ID.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/selective-testing/generated-project.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntuist test --device 'iPhone 14 Pro'\n```\n\nLANGUAGE: sh\nCODE:\n```\n# or\ntuist test -- -destination 'name=iPhone 14 Pro'\n```\n\nLANGUAGE: sh\nCODE:\n```\n# or\ntuist test -- -destination 'id=SIMULATOR_ID'\n```\n\n----------------------------------------\n\nTITLE: Using Tuist in GitHub Actions with Homebrew (YAML)\nDESCRIPTION: Defines a GitHub Actions workflow (YAML) triggered by pull requests and pushes to main. It sets up a macOS runner, checks out the repository, installs a specific version of Tuist (replace `x.y.z`) using Homebrew, and finally runs the `tuist build` command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/automate/continuous-integration.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nname: test\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\njobs:\n  lint:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: brew install --formula tuist@x.y.z\n      - run: tuist build\n```\n\n----------------------------------------\n\nTITLE: Checking empty project build settings using Tuist migration CLI in Bash\nDESCRIPTION: Runs a Tuist migration check to ensure that the traditional build settings in the existing Xcode project are emptied, enforcing that build settings are only modified via .xcconfig files. This guarantees consistency and supports smooth incremental migration. Requires the project file path parameter.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ntuist migration check-empty-settings -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Referencing XCConfig In Project Swift\nDESCRIPTION: Updates the `Project.swift` manifest to reference the extracted project-level build settings by linking `.xcconfig` files to the project's configurations. The `settings` parameter of the `Project` struct is configured with `Configuration.debug` and `Configuration.release` pointing to the path of the generated `.xcconfig` file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\"), // [!code ++]\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\"), // [!code ++]\n    ]),\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configure Tuist MCP Server in Claude (Homebrew)\nDESCRIPTION: This JSON snippet configures the Tuist MCP server in Claude desktop to use the global Tuist installation, typically installed via Homebrew.  It specifies the command to execute (tuist) and the arguments to start the MCP server (mcp start). The configuration is added to the claude_desktop_config.json file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/ai/mcp.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"tuist\",\n      \"args\": [\"mcp\", \"start\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta SSO for Tuist Organization in Bash\nDESCRIPTION: Updates a specified Tuist organization ('my-organization') to enable Single Sign-On (SSO) using Okta, suitable for on-premise setups. This command links the Tuist organization to a specific Okta domain ('my-okta-domain.com'), allowing users authenticating via that Okta instance to be automatically added.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/server/introduction/authentication.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider okta --organization-id my-okta-domain.com\n```\n\n----------------------------------------\n\nTITLE: Sourcing Tuist Bash Completions (Manual)\nDESCRIPTION: Manually sources the Tuist Bash completion script from a specified location (e.g., `~/.bash_completions/example.bash`) within the user's Bash profile (`~/.bash_profile` or `~/.bashrc`). This method is used when `bash-completion` is not installed and requires the completion script to be generated and saved separately beforehand.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/cli/shell-completions.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nsource ~/.bash_completions/example.bash\n```\n\n----------------------------------------\n\nTITLE: Build all schemes without binary cache using Tuist\nDESCRIPTION: This command builds all schemes without using the binary cache. The `--no-binary-cache` flag disables the use of cached build artifacts, forcing a full build from source.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist build --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Uninstalling `tuistenv`-based Tuist Installation (Bash)\nDESCRIPTION: This Bash command downloads and executes the Tuist uninstallation script to remove the previous version management system (`tuistenv`) before migrating to Tuist 4. This step is necessary if you were using `tuistenv` and plan to switch to a different installation method like Mise or Homebrew.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/references/migrations/from-v3-to-v4.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Ls https://uninstall.tuist.io | bash\n```\n\n----------------------------------------\n\nTITLE: Fly.io Deployment Configuration for Tuist Server in TOML\nDESCRIPTION: This TOML snippet provides a reference Fly.io configuration file (`fly.toml`) for deploying the Tuist server application. It defines the application name, primary region, and graceful shutdown signals. The configuration includes environment variables, process commands, service ports with HTTP and TLS settings, concurrency limits, and HTTP readiness checks to verify server health at the `/ready` endpoint via GET requests. It is intended to be generated dynamically in a continuous deployment pipeline. Deployment with this configuration uses Fly.io's local deployment features (`--local-only`) due to limitations with pulling private Docker images remotely.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/server/on-premise/install.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\napp = \"tuist\"\nprimary_region = \"fra\"\nkill_signal = \"SIGINT\"\nkill_timeout = \"5s\"\n\n[experimental]\n  auto_rollback = true\n\n[env]\n  # Your environment configuration goes here\n  # Or exposed through Fly secrets\n\n[processes]\n  app = \"/usr/local/bin/hivemind /app/Procfile\"\n\n[[services]]\n  protocol = \"tcp\"\n  internal_port = 8080\n  auto_stop_machines = false\n  auto_start_machines = false\n  processes = [\"app\"]\n  http_options = { h2_backend = true }\n\n  [[services.ports]]\n    port = 80\n    handlers = [\"http\"]\n    force_https = true\n\n  [[services.ports]]\n    port = 443\n    handlers = [\"tls\", \"http\"]\n  [services.concurrency]\n    type = \"connections\"\n    hard_limit = 100\n    soft_limit = 80\n\n  [[services.http_checks]]\n    interval = 10000\n    grace_period = \"10s\"\n    method = \"get\"\n    path = \"/ready\"\n    protocol = \"http\"\n    timeout = 2000\n    tls_skip_verify = false\n    [services.http_checks.headers]\n\n[[statics]]\n  guest_path = \"/app/public\"\n  url_prefix = \"/\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Swift Manifest Files\nDESCRIPTION: Shows how to access environment variables using the Environment type in Swift manifest files, with pattern matching for handling the returned Environment.Value type.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dynamic-configuration.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc appName() -> String {\n    if case let .string(environmentAppName) = Environment.appName {\n        return environmentAppName\n    } else {\n        return \"MyApp\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Targets By Dependency Order Bash\nDESCRIPTION: Shell command `tuist migration list-targets` used to list all targets found in the specified Xcode project file (`-p Project.xcodeproj`). The output is sorted by the number of dependencies, recommending a migration order starting with the most dependent targets.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntuist migration list-targets -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Resource Accessor Template Plugin Directory Structure\nDESCRIPTION: This snippet defines the necessary directory structure for resource accessor template plugins. It comprises of a `Plugin.swift` file declaring the plugin's name, and a `ResourceSynthesizers` directory, which includes resource accessor template files like Strings.stencil, Plists.stencil, and CustomTemplate.stencil.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/plugins.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n. \n├── ...\n├── Plugin.swift\n├── ResourceSynthesizers\n├───── Strings.stencil\n├───── Plists.stencil\n├───── CustomTemplate.stencil\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist Project (Bash)\nDESCRIPTION: This bash command, `tuist init`, initializes a Tuist project within the current directory. It either creates a new project or guides the user through the process of integrating an existing Xcode project or workspace. The command sets up the necessary configurations for Tuist to manage the project, enabling features like selective testing, previews, and registry services. No specific parameters are required; the command is executed in the target directory. The output is the generated project structure and configurations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/get-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist init\n```\n\n----------------------------------------\n\nTITLE: Uninstalling tuistenv for Tuist v4 migration\nDESCRIPTION: Command to uninstall the previous version of Tuist that used tuistenv before migrating to Tuist 4, which uses Mise for version management.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/references/migrations/from-v3-to-v4.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Ls https://uninstall.tuist.io | bash\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions: Install Tuist using Homebrew\nDESCRIPTION: This YAML file configures a GitHub Actions workflow to install Tuist using Homebrew and then execute the `tuist build` command. The workflow triggers on pull requests and pushes to the main branch. It first checks out the repository, installs Tuist using `brew install --formula`, and then runs `tuist build`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/automate/continuous-integration.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: test\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\njobs:\n  lint:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: brew install --formula tuist@x.y.z\n      - run: tuist build\n```\n\n----------------------------------------\n\nTITLE: Running selective tests with Tuist xcodebuild (Shell)\nDESCRIPTION: This command allows running tests in an Xcode project generated by Tuist, but it leverages Tuist's internal hashing mechanism to only execute tests for targets that have changed since the last successful run. This significantly reduces test execution time. It requires a Tuist account and project. The `-scheme` parameter can be used to specify the scheme to test.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/selective-testing/xcodebuild.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntuist xcodebuild test -scheme App\n```\n\nLANGUAGE: Shell\nCODE:\n```\ntuist xcodebuild test\n```\n\n----------------------------------------\n\nTITLE: Docker Login and Pull Image\nDESCRIPTION: This snippet shows how to authenticate with the Docker registry and pull the Tuist Docker image. It uses a personal access token for authentication.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/server/on-premise/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $TOKEN | docker login ghcr.io -u USERNAME --password-stdin\ndocker pull ghcr.io/tuist/tuist:latest\n```\n\n----------------------------------------\n\nTITLE: Skip Cache with Arguments - Bash\nDESCRIPTION: This snippet shows the difference in the command-line arguments for skipping the binary cache during project generation. Before Tuist 4, `--skip-cache` was used; now arguments determine which targets the cache is skipped for. The purpose is to optimize build times and avoid unnecessary cache usage.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/references/migrations/from-v3-to-v4.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate --skip-cache Foo\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Template in Tuist Using Swift\nDESCRIPTION: Defines a Tuist template manifest using Swift that specifies required and optional attributes and various template items such as strings, files, and directories. The template requires a 'name' attribute and optionally accepts a 'platform' attribute with a default of 'ios'. It demonstrates how to specify files with static content, files generated via Stencil templates, and directory copying. Dependencies include the ProjectDescription module. The manifest is intended to be placed in a directory under Tuist/Templates to enable scaffolding.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/templates.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet nameAttribute: Template.Attribute = .required(\"name\")\n\nlet template = Template(\n    description: \"Custom template\",\n    attributes: [\n        nameAttribute,\n        .optional(\"platform\", default: \"ios\"),\n    ],\n    items: [\n        .string(\n            path: \"Project.swift\",\n            contents: \"My template contents of name \\(nameAttribute)\"\n        ),\n        .file(\n            path: \"generated/Up.swift\",\n            templatePath: \"generate.stencil\"\n        ),\n        .directory(\n            path: \"destinationFolder\",\n            sourcePath: \"sourceFolder\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Swift Packages from Targets in Tuist\nDESCRIPTION: Demonstrates how to reference Swift Package dependencies from targets in a Tuist project. The example shows adding a runtime dependency.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet target = .target(name: \"MyTarget\", dependencies: [\n    .package(product: \"CryptoSwift\", type: .runtime)\n])\n```\n\n----------------------------------------\n\nTITLE: Extracting Build Settings to xcconfig (Shell)\nDESCRIPTION: This shell script extracts project build settings into an `.xcconfig` file. It uses `mkdir` to create the `xcconfigs/` directory, and then executes `tuist migration settings-to-xcconfig` to extract the settings from `MyApp.xcodeproj` to `xcconfigs/MyApp-Project.xcconfig`. This makes the project leaner and easier to migrate.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir -p xcconfigs/\ntuist migration settings-to-xcconfig -p MyApp.xcodeproj -x xcconfigs/MyApp-Project.xcconfig\n```\n\n----------------------------------------\n\nTITLE: Importing Static Dependency - Swift Module - Swift\nDESCRIPTION: Demonstrates the use of the `@_implementationOnly` attribute when importing a static dependency (`StaticModule`) into a dynamic framework or library. This prevents the static dependency's symbols from being inadvertently included in the dynamic module's `.swiftmodule` file, thereby avoiding potential compilation failures related to transitive static dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\n@_implementationOnly import StaticModule\n```\n\n----------------------------------------\n\nTITLE: Using Dependency in SwiftUI (Swift)\nDESCRIPTION: Demonstrates how to import and use the Kingfisher library within a SwiftUI view. It loads an image from a URL using `KFImage` provided by the Kingfisher framework.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/add-dependencies.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport Kingfisher // [!code ++]\n\npublic struct ContentView: View {\n    public init() {}\n\n    public var body: some View {\n        Text(\"Hello, World!\") // [!code --]\n            .padding() // [!code --]\n        KFImage(URL(string: \"https://cloud.tuist.io/images/tuist_logo_32x32@2x.png\")!) // [!code ++]\n    }\n}\n\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an SPM Build Tool Plugin Dependency in a Tuist Project (Swift)\nDESCRIPTION: Shows how to integrate an SPM build tool plugin within a Tuist project manifest (`Project.swift`). The external package providing the plugin is declared in the project's `packages` array. A target then declares a dependency on the specific plugin product using `.package` with `type: .plugin`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"Framework\",\n    packages: [\n        .remote(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", requirement: .upToNextMajor(from: \"0.56.1\")),\n    ],\n    targets: [\n        .target(\n            name: \"Framework\",\n            dependencies: [\n                .package(product: \"SwiftLintBuildToolPlugin\", type: .plugin),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Define Static Library Target in Tuist (Swift)\nDESCRIPTION: This snippet demonstrates how to define a static library target within a Tuist `Project.swift` manifest using Swift. It configures the target's name, product type, and specifies the source files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(name: \"MyLibrary\", product: .staticLibrary, sources: [\"**/*.swift\"])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Inspect Build Post-Action - Mise Integration (Bash)\nDESCRIPTION: This bash script is used in the post-action of an Xcode scheme to track local build times using `tuist inspect build` when using Mise. It first activates Tuist within the Mise environment to ensure the Tuist command is available and uses the project's root directory. The script must be placed in your scheme's post-action to run after builds.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/insights.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# -C ensures that Mise loads the configuration from the Mise configuration\n# file in the project's root directory.\neval \"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\"\n\ntuist inspect build\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Tuist with Homebrew in Xcode Cloud (Bash)\nDESCRIPTION: Bash script for Xcode Cloud's post-clone phase. It installs a specific version of Tuist (e.g., `tuist@x.y.z`) using Homebrew and then runs the `tuist generate` command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/automate/continuous-integration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nbrew install --formula tuist@x.y.z\n\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Failing Cache Warm if Remote Cache Check Throws in Swift\nDESCRIPTION: This modification ensures `cache warm` operation fails gracefully if remote cache existence check encounters an error, maintaining predictable behavior.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Inspect Build Post-Action - Custom Scheme (Swift)\nDESCRIPTION: This Swift code configures a custom scheme for a project, including a post-action to inspect build times. It specifies the project name, targets, build actions, and the `tuist inspect build` command within the post action.  The script uses Mise to activate the Tuist environment within the project. Requires a Tuist account to track build times.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/insights.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    name: \"MyProject\",\n    targets: [\n        // Your targets\n    ],\n    schemes: [\n        .scheme(\n            name: \"MyApp\",\n            shared: true,\n            buildAction: .buildAction(targets: [\"MyApp\"]),\n            testAction: .testAction(targets: [\"MyAppTests\"]),\n            runAction: .runAction(configuration: \"Debug\"),\n            postActions: [\n                .postAction(\n                    name: \"Inspect Build\",\n                    scriptText: \"\"\"\n                    eval \\\"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\\\"\\n                    tuist inspect build\n                    \"\"\"\n                )\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose YAML configuration for Tuist environment deployment\nDESCRIPTION: This YAML configuration file orchestrates the deployment of a multi-container environment comprising a PostgreSQL database, a web interface (pgweb), and the Tuist application itself. It sets container images, port mappings, environment variables, service dependencies, health checks, and volume management to facilitate a seamless setup. Key dependencies include the database for data storage and the application for operational management, with environment variables allowing customizable runtime settings.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/server/on-premise/install.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: timescale/timescaledb-ha:pg16\n    restart: always\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - PGDATA=/var/lib/postgresql/data/pgdata\n    ports:\n      - '5432:5432'\n    volumes:\n      - db:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  pgweb:\n    container_name: pgweb\n    restart: always\n    image: sosedoff/pgweb\n    ports:\n      - \"8081:8081\"\n    links:\n      - db:db\n    environment:\n      PGWEB_DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n    depends_on:\n      - db\n\n  tuist:\n    image: ghcr.io/tuist/tuist:latest\n    container_name: tuist\n    depends_on:\n      - db\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n      - \"443:443\"\n    expose:\n      - \"80\"\n      - \"8080\"\n      - \"443:443\"\n    environment:\n      TUIST_USE_SSL_FOR_DATABASE: \"0\"\n      TUIST_LICENSE:  // ...\n      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n      TUIST_APP_URL: https://localhost:8080\n      TUIST_SECRET_KEY_BASE: // ...\n      WEB_CONCURRENCY: 80\n\n      TUIST_GITHUB_OAUTH_ID:\n      TUIST_GITHUB_APP_CLIENT_SECRET:\n\n      TUIST_OKTA_SITE:\n      TUIST_OKTA_CLIENT_ID:\n      TUIST_OKTA_CLIENT_SECRET:\n      TUIST_OKTA_AUTHORIZE_URL: // Optional\n      TUIST_OKTA_TOKEN_URL: // Optional\n      TUIST_OKTA_USER_INFO_URL: // Optional\n      TUIST_OKTA_EVENT_HOOK_SECRET: // Optional\n\n      AWS_ACCESS_KEY_ID: # ...\n      AWS_SECRET_ACCESS_KEY: # ...\n      AWS_S3_REGION: # ...\n      AWS_ENDPOINT: https://amazonaws.com\n      TUIST_S3_BUCKET_NAME: # ...\n\nvolumes:\n  db:\n    driver: local\n```\n\n----------------------------------------\n\nTITLE: Declaring Project Resource Synthesizers in Swift\nDESCRIPTION: This Swift code shows how to configure custom resource synthesizers, e.g., strings and fonts, for a project, which aids in the management of resources through compile-time checks and type safety. The `Project.resourceSynthesizers` property is used for this purpose.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/synthesized-files.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(resourceSynthesizers: [.string(), .fonts()])\n```\n\n----------------------------------------\n\nTITLE: Consolidating Scheme TestAction Options Under `TestActionOptions` in Swift\nDESCRIPTION: This refactoring consolidates various `TestAction` options like language, region, and code coverage into a unified `TestActionOptions` type, providing API consistency and clarity.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nTestAction.targets(options: .options(language: region: codeCoverage: codeCoverageTargets))\n```\n\n----------------------------------------\n\nTITLE: Standard Tuist Project Directory Structure Example\nDESCRIPTION: Shows the typical directory structure of a Tuist project that generates an Xcode project, including the Tuist directory, manifest files, and project organization.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/directory-structure.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTuist.swift\nTuist/\n  Package.swift\n  ProjectDescriptionHelpers/\nProjects/\n  App/\n    Project.swift\n  Feature/\n    Project.swift\nWorkspace.swift\n```\n\n----------------------------------------\n\nTITLE: Reading String Environment Variable with Fallback (Swift)\nDESCRIPTION: Provides a Swift function to read the `TUIST_APP_NAME` environment variable using `Environment.appName`. It demonstrates pattern matching to check if the variable is a string (`.string`) and returns its value, falling back to a default string \"MyApp\" if the variable is not set or is not a string. Requires access to Tuist's `ProjectDescription` module and the `Environment` type.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dynamic-configuration.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc appName() -> String {\n    if case let .string(environmentAppName) = Environment.appName {\n        return environmentAppName\n    } else {\n        return \"MyApp\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scripting CocoaPods Integration with Tuist (Bash)\nDESCRIPTION: A Bash script showing a workflow for using CocoaPods with Tuist. It first generates the Xcode project using `tuist generate` and then runs `pod install` to integrate CocoaPods dependencies, creating a `.xcworkspace`. Note the warnings about incompatibility with `tuist build/test`, binary caching, and selective testing.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n#!/usr/bin/env bash\n\ntuist generate\npod install\n```\n\n----------------------------------------\n\nTITLE: Generating Tuist Zsh Completion Script for oh-my-zsh\nDESCRIPTION: Generates the Tuist completion script using the `--generate-completion-script` flag and redirects the output to the standard oh-my-zsh completions directory (`~/.oh-my-zsh/completions/`) as `_tuist`. This requires oh-my-zsh to be installed and assumes a global Tuist installation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/cli/shell-completions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist --generate-completion-script > ~/.oh-my-zsh/completions/_tuist\n```\n\n----------------------------------------\n\nTITLE: Displaying Swift Version for Hashing in Tuist\nDESCRIPTION: Command used by Tuist to obtain the Swift version for hashing. This prevents compilation errors due to Swift version mismatches between targets and binaries.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/hashing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/xcrun swift --version\n```\n\n----------------------------------------\n\nTITLE: Adding Objective-C Linker Flag - Tuist Target - Swift\nDESCRIPTION: Configures a Tuist target's build settings to include the essential `-ObjC` linker flag in `OTHER_LDFLAGS`. This flag is necessary for consuming libraries written in Objective-C, such as many of Google's libraries, ensuring that Objective-C classes and categories are correctly loaded by the linker. The `$(inherited)` value preserves any existing flags.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nTarget.target(\n    ...\n    settings: .settings(\n        base: [\"OTHER_LDFLAGS\": \"$(inherited) -ObjC\"]\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Package Dependency to Package.swift (Swift)\nDESCRIPTION: Defines a Swift Package Manager (SPM) package dependency in the `Package.swift` file. This specifies an external library (Kingfisher) to be included in the project. It uses `.upToNextMajor` versioning to specify a compatible version range.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/add-dependencies.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\")) // [!code ++]\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Project Description Helper Plugin - Bash\nDESCRIPTION: This snippet illustrates the expected directory structure for a Tuist project description helper plugin. It requires a `Plugin.swift` manifest file at the top level of the plugin directory and a `ProjectDescriptionHelpers` subdirectory containing the Swift helper files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/plugins.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n.\n├── ...\n├── Plugin.swift\n├── ProjectDescriptionHelpers\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Generating and installing Zsh completion script for Tuist with oh-my-zsh\nDESCRIPTION: This snippet shows how to generate a shell completion script for Zsh and integrate it with oh-my-zsh by copying the script into the specified completions directory, enabling command autocompletion for Tuist in Zsh when using oh-my-zsh framework.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/cli/shell-completions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist --generate-completion-script > ~/.oh-my-zsh/completions/_tuist\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Project Scheme Post-Action with Mise (Swift)\nDESCRIPTION: Defines a Tuist project using the Swift ProjectDescription API. It includes a custom scheme with a post-build action that executes a shell script. This script activates the Mise environment and runs `tuist inspect build` to send build time data to Tuist Insights.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/insights.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    name: \"MyProject\",\n    targets: [\n        // Your targets\n    ],\n    schemes: [\n        .scheme(\n            name: \"MyApp\",\n            shared: true,\n            buildAction: .buildAction(targets: [\"MyApp\"]),\n            testAction: .testAction(targets: [\"MyAppTests\"]),\n            runAction: .runAction(configuration: \"Debug\"),\n            postActions: [\n                .postAction(\n                    name: \"Inspect Build\",\n                    scriptText: \"\"\"\n                    eval \\\"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\\\"\n                    tuist inspect build\n                    \"\"\"\n                )\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Post-Action for `tuist inspect build` in Tuist Project (Swift)\nDESCRIPTION: Swift code snippet showing how to define a post-build action within a Tuist `Project.swift` scheme configuration for environments *not* using Mise. It directly specifies the `tuist inspect build` command as the script to execute. The `execution` parameter is set to `.always`, ensuring the script runs regardless of the build outcome.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.postAction(\n    name: \"Inspect Build\",\n    script: \"tuist inspect build\",\n    execution: .always\n)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Example for Keychain Setup and Tuist Registry Login in YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that creates a temporary keychain for storing registry credentials and logs into the Tuist Registry using an environment token. It ensures the default keychain is created and unlocked before running `tuist registry login`. The workflow relies on secrets management to safely pass the `TUIST_CONFIG_TOKEN` as an environment variable. Additional build steps can follow after authentication.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry/continuous-integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build\n\njobs:\n  build:\n    steps:\n      - # Your set up steps...\n      - name: Create keychain\n        run: |\n          TMP_DIRECTORY=$(mktemp -d)\n          KEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\n          KEYCHAIN_PASSWORD=$(uuidgen)\n          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH\n          security default-keychain -s $KEYCHAIN_PATH\n          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n      - name: Log in to the Tuist Registry\n        env:\n          TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_CONFIG_TOKEN }}\n        run: tuist registry login\n      - # Your build steps\n```\n\n----------------------------------------\n\nTITLE: Creating a Project on Tuist Server\nDESCRIPTION: Command to create a new project on the Tuist server with a specified handle.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/gather-insights.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist project create my-handle/MyApp\n\n# Tuist project my-handle/MyApp was successfully created 🎉\n```\n\n----------------------------------------\n\nTITLE: Generating Tuist Bash Completion Script (with bash-completion)\nDESCRIPTION: Generates the Tuist completion script and saves it to the standard bash-completion directory (`/usr/local/etc/bash_completion.d/_tuist`). This requires the `bash-completion` package to be installed and assumes a global Tuist installation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/cli/shell-completions.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist --generate-completion-script > /usr/local/etc/bash_completion.d/_tuist\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Integration Script for Tuist\nDESCRIPTION: A bash script that generates the Xcode project with Tuist and then runs pod install to integrate CocoaPods dependencies. This creates a workspace with both your project and Pods dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\ntuist generate\npod install\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Handle in Tuist.swift (swift)\nDESCRIPTION: This Swift code snippet illustrates how to configure the binding between local and remote projects within Tuist.  It uses the `Tuist` struct and requires a `fullHandle` parameter which is constructed by concatenating the organization and project handles. This file must be created at `Tuist.swift`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/server/introduction/accounts-and-projects.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet tuist = Tuist(fullHandle: \"{account-handle}/{project-handle}\") // e.g. tuist/tuist\n```\n\n----------------------------------------\n\nTITLE: Running Tuist Edit Workflow via Command Line - Bash\nDESCRIPTION: This snippet demonstrates how to launch the Tuist edit workflow by executing the 'tuist edit' command in a project directory using Bash. This command scans for manifest files and generates an auxiliary Xcode project in a global directory, allowing the user to edit manifest files with full Xcode support. The only input required is that it must be executed from the root or a subdirectory of a Tuist project containing a valid Tuist.swift file; the command outputs an Xcode project ready for editing.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/editing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n\n```\n\n----------------------------------------\n\nTITLE: Accessing the logger via ServiceContext in Bash\nDESCRIPTION: This snippet demonstrates how to access the current logger instance in the Tuist CLI environment using the ServiceContext singleton, which relies on swift-service-context for dependency injection. It highlights that the logger can be retrieved with `ServiceContext.current?.logger` from anywhere in the code, but notes limitations when using Dispatch for asynchronous operations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/contributors/cli/logging.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nServiceContext.current?.logger\n```\n\n----------------------------------------\n\nTITLE: Configuring OTHER_LDFLAGS with -ObjC in Tuist Project Manifest (Swift)\nDESCRIPTION: This Swift snippet demonstrates how to ensure that the '-ObjC' flag is included in the OTHER_LDFLAGS build setting within a Tuist manifest. It uses the Target.target initializer with a settings parameter, where the base settings dictionary explicitly adds '-ObjC'. This configuration is necessary for proper linking when using Objective-C libraries in a Swift or mixed-language project. Inputs include the Target definition and the settings dictionary; output is correct linker behavior at build time. The approach is limited to Tuist manifests and assumes familiarity with Tuist's API.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nTarget.target(\n    ...\n    settings: .settings(\n        base: [\"OTHER_LDFLAGS\": \"$(inherited) -ObjC\"]\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Installing External Dependencies with Tuist Bash\nDESCRIPTION: This command-line snippet shows how to use the `tuist install` command to resolve and fetch the external dependencies declared in the `Package.swift` file. Running this command pulls the dependencies into the `Tuist/Dependencies` directory, preparing them for use in the Tuist project. It provides control over when dependencies are updated.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntuist install\n# Resolving and fetching dependencies. {#resolving-and-fetching-dependencies}\n# Installing Swift Package Manager dependencies. {#installing-swift-package-manager-dependencies}\n```\n\n----------------------------------------\n\nTITLE: Build Script for Prebuilt Static Framework\nDESCRIPTION: A shell script that automates rebuilding the 'PrebuiltStaticFramework.framework' used in the project. It ensures the static framework is up-to-date by executing the build process located in the specified directory.\nSOURCE: https://github.com/tuist/tuist/blob/main/fixtures/ios_app_with_static_library_and_package/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nios_app_with_static_library_and_package/Prebuilt/build.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist Configuration in Swift\nDESCRIPTION: This `Tuist.swift` file initializes the Tuist configuration object. Its presence in the project's root directory helps Tuist identify the project boundaries and is necessary for manual project setup. It simply imports `ProjectDescription` and creates a `Tuist` instance.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/new-project.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Using @_implementationOnly for Static Dependencies in Swift\nDESCRIPTION: Illustrates the use of the `@_implementationOnly` attribute when importing a static Swift module (`StaticModule`) within a dynamic framework or library. This prevents symbols from the static dependency from leaking into the dynamic library's `.swiftmodule`, thereby avoiding potential compilation errors caused by transitive static dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n@_implementationOnly import StaticModule\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh for Completions\nDESCRIPTION: These commands configure Zsh to use custom completion scripts. It adds a custom completion directory to the function path and enables the Zsh completion system. Required for Tuist completion to work in Zsh without oh-my-zsh.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/cli/shell-completions.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfpath=(~/.zsh/completion $fpath)\nautoload -U compinit\ncompinit\n```\n\n----------------------------------------\n\nTITLE: Activating Tuist with Mise in post-action (Bash)\nDESCRIPTION: This script activates Tuist within the Mise environment during a build post-action.  It ensures that the correct Tuist version is used by loading the Mise configuration from the project's root directory. It's typically used when integrating Tuist Insights in a build scheme's post-action.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/insights.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# -C ensures that Mise loads the configuration from the Mise configuration\n# file in the project's root directory.\neval \"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\"\n\ntuist inspect build\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist using Mise\nDESCRIPTION: Commands for installing Tuist using Mise, a tool for managing deterministic versions of tools across different environments. Includes options for installing specific versions or using the version specified in configuration files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/quick-start/install-tuist.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise install tuist            # Установить текущую версию, указанную в .tool-versions/.mise.toml\nmise install tuist@x.y.z      # Установить версию с указанным номером\nmise install tuist@3          # Установить версию с нестрогим номером\n```\n\n----------------------------------------\n\nTITLE: Defining the Tuist Manifest\nDESCRIPTION: Defines the Tuist manifest file, `Tuist.swift`, which is used to configure Tuist and specify the root directory of the project. This example shows a basic Tuist configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/new-project.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Simplified Post-Action Script for Build Inspection\nDESCRIPTION: This code block shows how to set a basic post-action in a custom scheme to run 'tuist inspect build', useful when not integrating Mise. The script is executed after the build completes to collect build insights.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.postAction(\n    name: \"Inspect Build\",\n    script: \"tuist inspect build\",\n    execution: .always\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Type in Tuist Manifests Using Swift\nDESCRIPTION: Defines a Swift helper function to dynamically determine the product type (static library or framework) based on an environment variable within Tuist manifest files. This function reads a 'TUIST_PRODUCT_TYPE' environment variable and returns the appropriate Product enum case for target instantiation. It enables flexible switching between static and dynamic linking at generation-time using Tuist, optimizing build configurations for different build scenarios. Prerequisite: Tuist environment with access to the Environment abstraction exposing 'productType'.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/tma-architecture.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// You can place this in your manifest files or helpers\n// and use the returned value when instantiating targets.\nfunc productType() -> Product {\n    if case let .string(productType) = Environment.productType {\n        return productType == \"static-library\" ? .staticLibrary : .framework\n    } else {\n        return .framework\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist Project via Mise in Bash\nDESCRIPTION: Uses the Mise version manager to execute the `tuist init` command with the latest available version of Tuist. Mise handles the download and execution of the specified Tuist version to initialize a new project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise x tuist@latest -- tuist init\n```\n\n----------------------------------------\n\nTITLE: Accessing Logger in Tuist CLI - Bash\nDESCRIPTION: This snippet demonstrates how to access the logger within the Tuist CLI.  It uses `ServiceContext.current?.logger` to retrieve the logger instance, which has been injected using `swift-service-context`.  This approach allows for logging from various parts of the application without direct dependencies on the logging backend. Requires swift-service-context to function.  The logger provides diagnostic information and is crucial for understanding the application state.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/contributors/cli/logging.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nServiceContext.current?.logger\n```\n\n----------------------------------------\n\nTITLE: Resolving Xcode Package Dependencies with Caching (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to resolve and cache dependencies in a GitHub Actions workflow using `xcodebuild` and the `actions/cache` action. It restores a cache based on the `Package.resolved` file, resolves dependencies if the cache is not hit, and saves the cache. This improves build performance by avoiding re-downloading dependencies for each build.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/registry/continuous-integration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Restore cache\n  id: cache-restore\n  uses: actions/cache/restore@v4\n  with:\n    path: .build\n    key: ${{ runner.os }}-${{ hashFiles('App.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}\n    restore-keys: .build\n- name: Resolve dependencies\n  if: steps.cache-restore.outputs.cache-hit != 'true'\n  run: xcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n- name: Save cache\n  id: cache-save\n  uses: actions/cache/save@v4\n  with:\n    path: .build\n    key: ${{ steps.cache-restore.outputs.cache-primary-key }}\n```\n\n----------------------------------------\n\nTITLE: Preventing Transitive Static Dependencies from Leaking into Swift Modules using '@_implementationOnly' (Swift)\nDESCRIPTION: This snippet shows how to import static dependencies in Swift modules without exposing them transitively by using the '@_implementationOnly' attribute. This approach is essential to avoid compilation issues caused by static symbols included in a dynamic framework's '.swiftmodule' files. It is recommended for managing dependencies that should not leak outside their implementation scope.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\n@_implementationOnly import StaticModule\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Product Types in Tuist\nDESCRIPTION: Snippet showing how to override the product type of a specific Swift Package (FBLPromises) to use a dynamic framework, which resolves certain runtime crashes with Google libraries.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/dependencies.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.10\n\nimport PackageDescription\n\n#if TUIST\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet packageSettings = PackageSettings(\n    productTypes: [\n        \"FPLPromises\": .framework,\n    ]\n)\n#endif\n\nlet package = Package(\n...\n```\n\n----------------------------------------\n\nTITLE: Running Tuist using the run command\nDESCRIPTION: Demonstrates how to run a development version of Tuist using the tuist run command to execute Tuist commands like generate with specific arguments and paths.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/contributors/get-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist run tuist generate --path /path/to/project --no-open\n```\n\n----------------------------------------\n\nTITLE: Selective UI Testing with Tuist Test Command - Shell\nDESCRIPTION: Demonstrates how to run selective UI tests in a Tuist generated project by specifying the device destination using the `tuist test` command. The code snippet shows different ways to pass the destination parameter either directly or via the `--` separator. This allows Tuist to selectively run UI tests only on the specified simulator or device, which is a prerequisite for UI selective testing.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/selective-testing/generated-project.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntuist test --device 'iPhone 14 Pro'\ntuist test -- -destination 'name=iPhone 14 Pro'\ntuist test -- -destination 'id=SIMULATOR_ID'\n```\n\n----------------------------------------\n\nTITLE: Accessing Bundles in Swift\nDESCRIPTION: Demonstrates how to access the target bundle using Tuist's synthesized extension on the Bundle type. This provides a consistent interface for accessing resources regardless of the target product type.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/synthesized-files.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet bundle = Bundle.module\n```\n\n----------------------------------------\n\nTITLE: Extracting and managing package dependencies\nDESCRIPTION: This snippet adds dependencies to the `Package.swift` file with the ability to customize product types per package. It helps externalize and manage dependencies systematically, supporting dependency versioning and project modularity.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\"))\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Implicit Imports Using Tuist CLI in Bash\nDESCRIPTION: This snippet demonstrates how to use the tuist inspect implicit-imports command in a terminal environment to detect implicit dependencies in your Xcode project. Tuist must be installed and initialized in your project ahead of time. The command performs a static analysis of your project's source code to identify imports that create implicit dependencies, returning a non-zero exit code if any are found. This can be integrated into continuous integration pipelines to help maintain project reliability, though it is limited in detecting imports hidden behind conditional compiler directives.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/inspect/implicit-dependencies.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist inspect implicit-imports\n\n```\n\n----------------------------------------\n\nTITLE: Inspecting Implicit Imports with Tuist in Bash\nDESCRIPTION: This command-line snippet demonstrates how to use Tuist to analyze your project for implicit Swift import dependencies. Requires Tuist to be installed and a compatible project to be set up. The command, 'tuist inspect implicit-imports', scans the project code to find any instances where modules are imported without being declared as dependencies. It exits with a non-zero status code if implicit imports are found, allowing integration into CI pipelines. Input: run in the project's root directory. Output: a list of implicit imports (if any), or exit status for automation. Limitations: cannot detect imports within conditional compilation blocks.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/inspect/implicit-dependencies.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist inspect implicit-imports\n```\n\n----------------------------------------\n\nTITLE: Inspecting Implicit Imports Using Tuist (Bash)\nDESCRIPTION: This command uses Tuist to inspect and report on implicit dependencies in the project.  It analyzes the code statically and exits with a non-zero exit code if implicit imports are found. This functionality helps in identifying potential issues caused by implicitly defined dependencies in the Xcode project graph.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/inspect/implicit-dependencies.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist inspect implicit-imports\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies\nDESCRIPTION: This JavaScript snippet defines package dependencies for a Tuist project using Swift Package Manager. It imports PackageDescription and optionally ProjectDescription when TUIST is defined.  It allows customizing product types for packages and specifies external dependencies like Alamofire or Kingfisher. This snippet is contained in a `Tuist/Package.swift` file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Project Link | Tuist | Swift\nDESCRIPTION: This Swift snippet demonstrates how to configure a local Tuist project to link with a remote project hosted on the Tuist server. This line is added to the project's `Tuist.swift` configuration file, specifying the full handle (account-handle/project-handle) of the remote project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/server/introduction/accounts-and-projects.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nlet tuist = Tuist(fullHandle: \"{account-handle}/{project-handle}\") // e.g. tuist/tuist\n```\n\n----------------------------------------\n\nTITLE: Generating Tuist Project Token for CI Authentication (bash)\nDESCRIPTION: This bash command generates a project-scoped authentication token for secure server-side requests from CI environments. Dependencies: an initialized Tuist project, appropriate permissions, and Tuist CLI installed. Inputs: 'my-handle/MyApp' is the project handle, which should be replaced with your own identifier. Outputs: authentication token printed to stdout. To use, export the token to the 'TUIST_CONFIG_TOKEN' environment variable in CI, ideally as a secret. Limitation: Only accepted on CI environments detected by Tuist; set 'CI=1' as environment variable to force if needed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/automate/continuous-integration.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntuist project tokens create my-handle/MyApp\n```\n\n----------------------------------------\n\nTITLE: Create and Unlock Keychain - Bash\nDESCRIPTION: Creates a temporary keychain, sets its settings, makes it the default, and unlocks it. This is necessary for `tuist registry login` to store credentials in a CI environment where a default keychain may not exist or be locked. The credentials will be stored in the default keychain. It ensures that your default keychain is created and unlocked _before_ `tuist registry login` is run.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry/continuous-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTMP_DIRECTORY=$(mktemp -d)\nKEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\nKEYCHAIN_PASSWORD=$(uuidgen)\nsecurity create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\nsecurity set-keychain-settings -lut 21600 $KEYCHAIN_PATH\nsecurity default-keychain -s $KEYCHAIN_PATH\nsecurity unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n```\n\n----------------------------------------\n\nTITLE: Translating GitHub Alerts in Markdown\nDESCRIPTION: Demonstrates the correct way to translate GitHub alert blocks in Markdown for Tuist documentation. The alert type (e.g., `[!WARNING]`) must not be translated, while the title ('루트 변수') and content should be. An incorrect example translating the type (`[!주의]`) is also shown for comparison.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/contributors/translate.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!WARNING] 루트 변수\n> 매니페스트의 루트에 있어야 하는 변수는...\n\n// Instead of\n> [!주의] 루트 변수\n> 매니페스트의 루트에 있어야 하는 변수는...\n```\n\n----------------------------------------\n\nTITLE: Logging into Tuist Registry with Bash\nDESCRIPTION: This command allows team members or users on different machines to log in to the Tuist Registry after the initial setup has been performed and the configuration files have been committed. It uses the existing registry configuration files in the project directory to authenticate the user against the registry service.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntuist registry login\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tuist with Mise in Xcode Cloud (bash)\nDESCRIPTION: This shell script installs Mise by downloading and running the official installation script, then leverages Mise to install dependencies declared in the .mise.toml file, including Tuist. It executes Tuist using the version specified in the project's configuration. Dependencies: curl, access to internet for installation scripts, and correctly configured .mise.toml. Inputs: no direct inputs, but requires .mise.toml for versioning. Outputs: runs 'tuist generate'. Ensure execution permissions for CI scripts and that the CI environment allows downloads and command execution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/automate/continuous-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\ncurl https://mise.jdx.dev/install.sh | sh\nmise install # Installs the version from .mise.toml\n\n# Runs the version of Tuist indicated in the .mise.toml file {#runs-the-version-of-tuist-indicated-in-the-misetoml-file}\nmise exec -- tuist generate\n```\n\n----------------------------------------\n\nTITLE: Validating target migration with build and test\nDESCRIPTION: Runs build and test commands to ensure the target has been correctly migrated and is functioning as expected. Use of additional tools like xcdiff can help compare generated projects for accuracy, providing verification post-migration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntuist build\n\ntuist test\n// Optionally, use xcdiff for comparison\n```\n\n----------------------------------------\n\nTITLE: Keychain Creation in CI\nDESCRIPTION: This bash script creates a temporary keychain, sets its settings, and unlocks it. This is necessary for storing Tuist Registry credentials when using Xcode integration in a CI environment. It creates a keychain file, sets its timeout, sets it as the default keychain and unlocks it. The script uses `mktemp`, `uuidgen`, and `security` command line tools.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry/continuous-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTMP_DIRECTORY=$(mktemp -d)\nKEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\nKEYCHAIN_PASSWORD=$(uuidgen)\nsecurity create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\nsecurity set-keychain-settings -lut 21600 $KEYCHAIN_PATH\nsecurity default-keychain -s $KEYCHAIN_PATH\nsecurity unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n```\n\n----------------------------------------\n\nTITLE: Translating Custom Containers in Markdown\nDESCRIPTION: This snippet illustrates how to translate custom container blocks in markdown used by Vitepress by translating only the container title and contents but keeping the container type keyword in English. This ensures the markdown rendering system properly recognizes the container while reflecting the translation in the displayed text.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/contributors/translate.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::: warning 루트 변수\\\n매니페스트의 루트에 있어야 하는 변수는...\n:::\n\n# Instead of\n::: 주의 루트 변수\\\n매니페스트의 루트에 있어야 하는 변수는...\n:::\n```\n\n----------------------------------------\n\nTITLE: Running Tuist using Swift Package Manager\nDESCRIPTION: Shows how to build the ProjectDescription product and run Tuist directly with Swift Package Manager, providing an alternative method for testing Tuist during development.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/contributors/get-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nswift build --product ProjectDescription\nswift run tuist generate --path /path/to/project --no-open\n```\n\n----------------------------------------\n\nTITLE: Testing with Tuist\nDESCRIPTION: This command demonstrates how to perform testing within the Tuist project environment. It is used to verify the functionality and behavior of the project's components. It is meant for development workflows such as running the app on a simulator or device, or running tests, not for release builds. \nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/cache.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test\n```\n\n----------------------------------------\n\nTITLE: Declaring SwiftLint Build Tool Plugin in Tuist Project\nDESCRIPTION: Shows how to include a Swift Package Manager build tool plugin (SwiftLint) in a Tuist project manifest. This demonstrates the correct way to reference plugin-type dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"Framework\",\n    packages: [\n        .remote(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", requirement: .upToNextMajor(from: \"0.56.1\")),\n    ],\n    targets: [\n        .target(\n            name: \"Framework\",\n            dependencies: [\n                .package(product: \"SwiftLintBuildToolPlugin\", type: .plugin),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Type in Tuist Build Generation - Bash\nDESCRIPTION: This shell script demonstrates how to set the TUIST_PRODUCT_TYPE environment variable to influence the linking type of built targets when using Tuist. By setting this variable before running tuist generate, the script ensures the manifest can read the desired product type and alter how targets are generated (static-library vs. framework). This approach requires developers to read the environment variable value from their manifest files and adapt target generation logic accordingly. The script expects Tuist to be available in the environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/tma-architecture.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# You\\'ll have to read the value of the variable from the manifest {#youll-have-to-read-the-value-of-the-variable-from-the-manifest}\n# and use it to change the linking type {#and-use-it-to-change-the-linking-type}\nTUIST_PRODUCT_TYPE=static-library tuist generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Product Type with Environment Variables in Bash\nDESCRIPTION: Sets an environment variable to control the product type (static library vs framework) at generation time using Tuist's dynamic configuration capabilities.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/tma-architecture.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# You'll have to read the value of the variable from the manifest\n# and use it to change the linking type\nTUIST_PRODUCT_TYPE=static-library tuist generate\n```\n\n----------------------------------------\n\nTITLE: Incremental Dependency Resolution and Caching with xcodebuild in GitHub Actions\nDESCRIPTION: This sequence demonstrates how to cache resolved Swift package dependencies in CI to improve build times. It restores the cache using a key based on the `Package.resolved` file hash, runs the dependency resolution if the cache is missed, and then saves the updated cache. The path settings should match your project structure for successful caching.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/registry/continuous-integration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Restore cache\n  id: cache-restore\n  uses: actions/cache/restore@v4\n  with:\n    path: .build\n    key: ${{ runner.os }}-${{ hashFiles('App.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}\n    restore-keys: .build\n- name: Resolve dependencies\n  if: steps.cache-restore.outputs.cache-hit != 'true'\n  run: xcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n- name: Save cache\n  id: cache-save\n  uses: actions/cache/save@v4\n  with:\n    path: .build\n    key: ${{ steps.cache-restore.outputs.cache-primary-key }}\n```\n\n----------------------------------------\n\nTITLE: Determining Product Type with Swift\nDESCRIPTION: This Swift code snippet shows a function `productType()` used within Tuist manifests or helpers.  It reads the value of `TUIST_PRODUCT_TYPE` from the environment and returns the appropriate `Product` enum value (.staticLibrary or .framework). This allows you to dynamically configure the product type for your targets based on the environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/tma-architecture.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// You can place this in your manifest files or helpers\n// and use the returned value when instantiating targets.\nfunc productType() -> Product {\n    if case let .string(productType) = Environment.productType {\n        return productType == \"static-library\" ? .staticLibrary : .framework\n    } else {\n        return .framework\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Tuist with Codemagic using Mise (YAML)\nDESCRIPTION: Defines a Codemagic workflow in YAML format. It includes steps to install Mise, use Mise to install Tuist according to the `.mise.toml` file, and then execute the `tuist build` command within the specified Xcode environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/automate/continuous-integration.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nworkflows:\n  lint:\n    name: Build\n    max_build_duration: 30\n    environment:\n      xcode: 15.0.1\n    scripts:\n      - name: Install Mise\n        script: |\n          curl https://mise.jdx.dev/install.sh | sh\n          mise install # Installs the version from .mise.toml\n      - name: Build\n        script: mise exec -- tuist build\n```\n\n----------------------------------------\n\nTITLE: Tuist directory structure\nDESCRIPTION: This displays the typical directory structure used by Tuist, showing the Tuist.swift, Project.swift, and Workspace.swift files that define the project and workspace configurations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/\n  Tuist.swift\n  Project.swift\n  Workspace.swift\n```\n\n----------------------------------------\n\nTITLE: Getting Boolean Environment Variable in Tuist (Swift)\nDESCRIPTION: This Swift snippet shows how to access boolean-based environment variables using the `getBoolean()` helper method. The `Environment.isCI` variable is accessed, and a default value of `false` is provided. This streamlines the retrieval of boolean values, similar to the string example, ensuring a default is provided to avoid needing to explicitly define a full function each time.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dynamic-configuration.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nEnvironment.isCI.getBoolean(default: false)\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist using Mise\nDESCRIPTION: Instructions for installing and initializing Tuist using the Mise version manager.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise x tuist@latest -- tuist init\n```\n\n----------------------------------------\n\nTITLE: Sample tuist share JSON Output - json\nDESCRIPTION: This example JSON document is the output structure generated by 'tuist share --json'. It includes keys for the preview's unique identifier 'id', the app preview URL 'url', and a QR code image URL 'qrCodeURL'. Inputs: none (this is output). Outputs: provides URLs usable for CI/CD, Slack, or automation tooling. Limitations: actual ID and URLs will vary per run.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/share/previews.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1234567890,\n  \"url\": \"https://cloud.tuist.io/preview/1234567890\",\n  \"qrCodeURL\": \"https://cloud.tuist.io/preview/1234567890/qr-code.svg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Contributors in an HTML Table\nDESCRIPTION: This HTML code uses a table (`<table>`) with multiple rows (`<tr>`) and cells (`<td>`) to create a grid layout showcasing project contributors. Each cell includes a link (`<a>`) to the contributor's profile (e.g., GitHub, personal website, LinkedIn), an image (`<img>`) displaying their avatar fetched from GitHub Avatars, and their name/username below the image. Attributes like `align`, `valign`, and `width` are used for basic styling and layout within the table cells.\nSOURCE: https://github.com/tuist/tuist/blob/main/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/aniltaskiran\"><img src=\"https://avatars.githubusercontent.com/u/16738729?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>aniltaskiran</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/unxavi\"><img src=\"https://avatars.githubusercontent.com/u/3817679?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Javier Vieira</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/a-sarris\"><img src=\"https://avatars.githubusercontent.com/u/78614622?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aris Sarris</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://xxw9999.notion.site/xxw9999/iOS-8585a34b2886419586960c5c02b9d845\"><img src=\"https://avatars.githubusercontent.com/u/67373938?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>kimxwan0319</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://florian.codes\"><img src=\"https://avatars.githubusercontent.com/u/7734806?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Florian Fittschen</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jesus-mg-ios\"><img src=\"https://avatars.githubusercontent.com/u/85997060?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesus (iOS)</b></sub></a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nicholaskim94\"><img src=\"https://avatars.githubusercontent.com/u/7912759?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nicholas Kim</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Smponias\"><img src=\"https://avatars.githubusercontent.com/u/14213855?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alexandros Smponias</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mangofever\"><img src=\"https://avatars.githubusercontent.com/u/724343?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Go</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AlbGarciam\"><img src=\"https://avatars.githubusercontent.com/u/45308839?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alberto Garcia</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/andreascuderi/\"><img src=\"https://avatars.githubusercontent.com/u/8319309?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Andrea Scuderi</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://dogoautilio.wordpress.com/\"><img src=\"https://avatars.githubusercontent.com/u/1487375?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Diogo Autilio</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shahzadmajeed\"><img src=\"https://avatars.githubusercontent.com/u/1209459?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Shahzad Majeed</b></sub></a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/danrevah\"><img src=\"https://avatars.githubusercontent.com/u/7808742?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dan</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nivanchikov\"><img src=\"https://avatars.githubusercontent.com/u/1830010?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nikita Ivanchikov</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/xoxo-anastasi-xoxo\"><img src=\"https://avatars.githubusercontent.com/u/28875920?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Anastasia Kazantseva</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/MonocularVision\"><img src=\"https://avatars.githubusercontent.com/u/429790?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Michael McGuire</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.michaelfcollins3.me\"><img src=\"https://avatars.githubusercontent.com/u/104274?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Michael Collins</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/devyhan\"><img src=\"https://avatars.githubusercontent.com/u/45344633?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>YoHan Cho</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/euriasb\"><img src=\"https://avatars.githubusercontent.com/u/3721257?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>euriasb</b></sub></a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MontakOleg\"><img src=\"https://avatars.githubusercontent.com/u/1800899?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>MontakOleg</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/oozoofrog\"><img src=\"https://avatars.githubusercontent.com/u/3011832?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>oozoofrog</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MartinStrambach\"><img src=\"https://avatars.githubusercontent.com/u/11178869?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Martin Strambach</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/sh-a-n\"><img src=\"https://avatars.githubusercontent.com/u/2219548?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>sh-a-n</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://linkedin.com/in/batuhansaka\"><img src=\"https://avatars.githubusercontent.com/u/9626765?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Batuhan Saka</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jcsoohwancho.github.io\"><img src=\"https://avatars.githubusercontent.com/u/51935215?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>SooHwanCho</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.bouncingball.mobi\"><img src=\"https://avatars.githubusercontent.com/u/798117?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gary Riches</b></sub></a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://mustiikhalil.github.io/mustiikhalil/\"><img src=\"https://avatars.githubusercontent.com/u/26250654?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>mustiikhalil</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/serejahh\"><img src=\"https://avatars.githubusercontent.com/u/2575555?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Serhii Butenko</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/petrukha-ivan\"><img src=\"https://avatars.githubusercontent.com/u/93926277?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Petrukha Ivan</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lo1tuma\"><img src=\"https://avatars.githubusercontent.com/u/169170?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mathias Schreck</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Buju77\"><img src=\"https://avatars.githubusercontent.com/u/266349?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Yen-Chia Lin</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://coolmathgames.tech\"><img src=\"https://avatars.githubusercontent.com/u/6877780?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mary </b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/woohyunjin06\"><img src=\"https://avatars.githubusercontent.com/u/30452977?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Hyunjin</b></sub></a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kevin58332\"><img src=\"https://avatars.githubusercontent.com/u/47673410?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kevin Aguilar</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://andrewroan.com\"><img src=\"https://avatars.githubusercontent.com/u/9873566?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Andrew Roan</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/ibrahim-oktay-518b4939/\"><img src=\"https://avatars.githubusercontent.com/u/36792481?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>ibrahim oktay</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/navartis\"><img src=\"https://avatars.githubusercontent.com/u/7813723?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dmitriy Kulakov</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/woin2ee\"><img src=\"https://avatars.githubusercontent.com/u/81426024?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jaewon-Yun</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/tatagrigory\"><img src=\"https://avatars.githubusercontent.com/u/5187973?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>tatagrigory</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://linkedin.com/in/denilchungath\"><img src=\"https://avatars.githubusercontent.com/u/95201442?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Denil Chungath</b></sub></a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/victor-sarda/\"><img src=\"https://avatars.githubusercontent.com/u/6460866?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Victor Sarda</b></sub></a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/tzxdtc\"><img src=\"https://avatars.githubusercontent.com/u/19767846?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>tzxdtc10</b></sub></a></td>\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Optimize Object Lifetimes in Build Settings\nDESCRIPTION: Code snippet showing the addition of a SettingsDictionary extension method for setting the SWIFT_OPTIMIZE_OBJECT_LIFETIME build setting in Xcode projects.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nswiftOptimizeObjectLifetimes(_ enabled:)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Package Dependencies with Package.swift\nDESCRIPTION: Declares a Swift Package Manager manifest to manage external dependencies for the Tuist project. It conditionally imports ProjectDescription if the TUIST compiler flag is set, allowing for shared package settings such as product types (e.g., frameworks). The Package struct defines the project name and a list of external packages with version requirements. This is useful to integrate Swift packages including third-party dependencies like Alamofire or Kingfisher.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Warming the Cache with Tuist\nDESCRIPTION: This command initiates the process of warming the cache in Tuist. It builds targets and assigns unique identifiers to binaries, substituting original targets with their binary versions. This command re-uses binaries to speed up the process.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist cache\n```\n\n----------------------------------------\n\nTITLE: Testing with Tuist\nDESCRIPTION: This command shows how to run tests using Tuist.  The binary cache is automatically used if available, unless explicitly disabled.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/cache.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test\n```\n\n----------------------------------------\n\nTITLE: Creating the initial Tuist project scaffold\nDESCRIPTION: Defines the basic Tuist setup files including Tuist.swift, Project.swift, and Package.swift for a new project. These files configure project settings, targets, dependencies, and package management. They help establish a clean project structure aligned with Tuist practices.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp-Tuist\",\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Tuist with Mise (yaml)\nDESCRIPTION: This GitHub Actions YAML defines a workflow for building an application with Tuist. It checks out the repository, uses the 'mise-action' to set up Mise and Tuist automatically based on configuration files, and runs 'tuist build'. Dependencies: GitHub Actions runners (macos-latest), 'jdx/mise-action', and correct repo configuration. Inputs: triggers on pushes and pull requests to 'main'. Outputs: build artifacts. Limitation: Uses default 'tuist' versioning as managed by Mise unless otherwise overridden.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/automate/continuous-integration.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build Application\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: jdx/mise-action@v2\n      - run: tuist build\n```\n\n----------------------------------------\n\nTITLE: Fly.io Configuration\nDESCRIPTION: This snippet shows the `fly.toml` configuration file used for deploying Tuist server on Fly.io. It defines app name, region, kill signals, environment variables, processes, services, ports, concurrency settings, HTTP checks, and static file configurations. The `http_checks` section is particularly important as it defines the `/ready` endpoint check.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/server/on-premise/install.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\napp = \"tuist\"\nprimary_region = \"fra\"\nkill_signal = \"SIGINT\"\nkill_timeout = \"5s\"\n\n[experimental]\n  auto_rollback = true\n\n[env]\n  # Your environment configuration goes here\n  # Or exposed through Fly secrets\n\n[processes]\n  app = \"/usr/local/bin/hivemind /app/Procfile\"\n\n[[services]]\n  protocol = \"tcp\"\n  internal_port = 8080\n  auto_stop_machines = false\n  auto_start_machines = false\n  processes = [\"app\"]\n  http_options = { h2_backend = true }\n\n  [[services.ports]]\n    port = 80\n    handlers = [\"http\"]\n    force_https = true\n\n  [[services.ports]]\n    port = 443\n    handlers = [\"tls\", \"http\"]\n  [services.concurrency]\n    type = \"connections\"\n    hard_limit = 100\n    soft_limit = 80\n\n  [[services.http_checks]]\n    interval = 10000\n    grace_period = \"10s\"\n    method = \"get\"\n    path = \"/ready\"\n    protocol = \"http\"\n    timeout = 2000\n    tls_skip_verify = false\n    [services.http_checks.headers]\n\n[[statics]]\n  guest_path = \"/app/public\"\n  url_prefix = \"/\"\n```\n\n----------------------------------------\n\nTITLE: Swift configuration code for defining a remote Tuist project with full handle\nDESCRIPTION: This Swift code snippet shows how to define a full handle for a remote Tuist project by setting up an identifier with the organization handle and project handle. It is used in the configuration file 'Tuist.swift' to link local and remote projects, enabling features like project management and cloud integration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/server/introduction/accounts-and-projects.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet tuist = Tuist(fullHandle: \"{account-handle}/{project-handle}\") // e.g. tuist/tuist\n```\n\n----------------------------------------\n\nTITLE: Improving App Extensions Schemes\nDESCRIPTION: Enhances scheme configurations for app extensions to automate scheme generation and improve build consistency for extensions.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_36\n\nLANGUAGE: Swift\nCODE:\n```\nscheme.autoGenerate = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Package Dependency for Tuist Registry (Diff)\nDESCRIPTION: This diff shows how to modify the dependencies array in a Package.swift file to use the Tuist Registry identifier instead of a standard source control URL. Replacing `.package(url: ...)` with `.package(id: ...)` ensures that the dependency is always resolved via the registry when resolving dependencies. The registry identifier format is `{organization}.{repository}`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry/swift-package.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Scripting Carthage Integration with Tuist (Bash)\nDESCRIPTION: A simple Bash script demonstrating how to integrate Carthage dependencies with Tuist. It runs `carthage update` to fetch and build frameworks into `Carthage/Build` before generating the Xcode project using `tuist generate`. This ensures frameworks are available when Tuist links them via `.framework` or `.xcframework` dependency types.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n#!/usr/bin/env bash\n\ncarthage update\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Running Specific App Preview Versions with Tuist CLI - Bash\nDESCRIPTION: This snippet enables running previews associated with the latest build, a specific branch, or a particular commit using version specifiers. The 'tuist run App@latest', 'App@branch', and 'App@commit' commands fetch and execute previews tied to these project states. This is useful for reviewing different build versions during continuous integration or feature development. Requires valid Tuist project association and naming conventions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/share/previews.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist run App@latest # Runs latest App preview associated with the project's default branch\ntuist run App@my-feature-branch # Runs latest App preview associated with a given branch\ntuist run App@00dde7f56b1b8795a26b8085a781fb3715e834be # Runs latest App preview associated with a given git commit sha\n```\n\n----------------------------------------\n\nTITLE: Codemagic: Install Tuist using Homebrew\nDESCRIPTION: This YAML file defines a Codemagic workflow that installs Tuist using Homebrew. It sets up the environment and then adds a step to install Tuist. It specifies the Tuist version using `brew install --formula`. After the installation, it runs the `tuist build` command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/automate/continuous-integration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  lint:\n    name: Build\n    max_build_duration: 30\n    environment:\n      xcode: 15.0.1\n    scripts:\n      - name: Install Tuist\n        script: |\n          brew install --formula tuist@x.y.z\n      - name: Build\n        script: tuist build\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a Tuist Project with Bash\nDESCRIPTION: This snippet shows the basic sequence of commands to set up and manage a new Tuist project for the iOS platform. It includes initializing the project structure, customizing project manifests, generating the Xcode project files, and building the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist init --platform ios\ntuist edit # Customize your project manifest\ntuist generate # Generates Xcode project & workspace\ntuist build # Builds your project\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist with Homebrew in Codemagic Workflows (YAML)\nDESCRIPTION: YAML configuration snippet for a Codemagic workflow. It defines steps to install a specific version of Tuist (e.g., `tuist@x.y.z`) using Homebrew and then executes the `tuist build` command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/automate/continuous-integration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  lint:\n    name: Build\n    max_build_duration: 30\n    environment:\n      xcode: 15.0.1\n    scripts:\n      - name: Install Tuist\n        script: |\n          brew install --formula tuist@x.y.z\n      - name: Build\n        script: tuist build\n```\n\n----------------------------------------\n\nTITLE: Retrieving String Environment Variables with Helper Method\nDESCRIPTION: Demonstrates using the getString helper method to retrieve a string environment variable with a default fallback value.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dynamic-configuration.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nEnvironment.appName.getString(default: \"TuistServer\")\n```\n\n----------------------------------------\n\nTITLE: Running tuist inspect build with Mise in Scheme Post-Action (Shell)\nDESCRIPTION: Shell script designed to be used in an Xcode scheme's post-action. It activates the Mise environment to ensure `tuist` is available and then executes `tuist inspect build` to track build times. Requires Mise and a logged-in Tuist account.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/insights.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# -C ensures that Mise loads the configuration from the Mise configuration\n# file in the project's root directory.\neval \"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\"\n\ntuist inspect build\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output from Tuist Share Automation - JSON\nDESCRIPTION: This JSON snippet represents the output structure returned by 'tuist share --json'. It includes a unique preview 'id', the preview URL ('url'), and a URL to a QR code image ('qrCodeURL'). Used for programmatic handling of share links in CI/CD automations or external integrations. The QR code enables easy physical device downloads.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/share/previews.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1234567890,\n  \"url\": \"https://cloud.tuist.io/preview/1234567890\",\n  \"qrCodeURL\": \"https://cloud.tuist.io/preview/1234567890/qr-code.svg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GitHub Alert Translation\nDESCRIPTION: This snippet demonstrates how to translate the content and title of a GitHub alert while maintaining its type. The type of the alert (WARNING) should not be translated, only the text inside the alert.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/contributors/translate.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    > [!WARNING] 루트 변수\n    > 매니페스트의 루트에 있어야 하는 변수는...\n\n    // Instead of\n    > [!주의] 루트 변수\n    > 매니페스트의 루트에 있어야 하는 변수는...\n```\n\n----------------------------------------\n\nTITLE: Generating projects with Tuist\nDESCRIPTION: This command shows how to generate an Xcode project using Tuist, based on the configuration defined in Project.swift and other manifest files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Replacing `TuistConfig.swift` with `Config.swift` in Swift\nDESCRIPTION: This snippet indicates the transition from deprecated `TuistConfig.swift` to the new `Config.swift` configuration file, aligning with the latest documentation for project configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Initializing Tuist Configuration in Swift\nDESCRIPTION: Defines the basic Tuist configuration by creating a Tuist.swift manifest. This snippet imports the ProjectDescription framework and instantiates a Tuist object, which can be extended to configure project-wide Tuist settings. No complex parameters are required, and it serves as an entry point for Tuist setup.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: CLI command to create a new organization account in Tuist\nDESCRIPTION: This snippet demonstrates the command used to create a new organization account within Tuist via the CLI. It requires specifying the organization handle and relies on the 'tuist organization create' subcommand to establish a new account, facilitating team collaboration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/server/introduction/accounts-and-projects.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization create {account-handle}\n```\n\n----------------------------------------\n\nTITLE: Extracting project build settings into `.xcconfig` files\nDESCRIPTION: This command extracts build settings from the Xcode project into an `.xcconfig` file, simplifying project configuration. It updates \"Project.swift\" to reference the `.xcconfig` and ensures settings are maintained externally, facilitating easier migration and version control.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p xcconfigs/\ntuist migration settings-to-xcconfig -p MyApp.xcodeproj -x xcconfigs/MyApp-Project.xcconfig\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Library with Tuist (Swift)\nDESCRIPTION: This snippet demonstrates how to define an equivalent static library target in a Tuist Project.swift file using Swift. It defines a target named \"MyLibrary\", specifies its product type as `.staticLibrary`, and includes source files matching the glob pattern.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(name: \"MyLibrary\", product: .staticLibrary, sources: [\"**/*.swift\"])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Destructuring useData Hook (JavaScript)\nDESCRIPTION: This snippet imports the `useData` composition API hook from the VitePress documentation framework. It then destructures the `params` property from the hook's return value, making the page parameters available as a Vue ref within the component.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/references/examples/[example].md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useData } from 'vitepress'\n\n// params is a Vue ref\nconst { params } = useData()\n```\n\n----------------------------------------\n\nTITLE: Using Resource Synthesizers from a Plugin\nDESCRIPTION: This Swift code demonstrates how to configure a project to use resource synthesizers provided by a specific plugin. The `resourceSynthesizers` property of the `Project` struct is used.  The `plugin` parameter specifies the name of the plugin to use.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/plugins.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nlet project = Project(resourceSynthesizers: [.strings(plugin: \"MyPlugin\")])\n```\n\n----------------------------------------\n\nTITLE: Making 'tuist scaffold list' Grep-Compatible Output\nDESCRIPTION: Modifies the output format of the 'tuist scaffold list' command to be easily processed by grep or other command-line tools for scripting purposes.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_40\n\nLANGUAGE: Shell\nCODE:\n```\ntuist scaffold list | grep <pattern>\n```\n\n----------------------------------------\n\nTITLE: Running the tuist edit command in Bash\nDESCRIPTION: Command to create and open an Xcode project containing all Tuist manifest files. This enables editing of project manifests with Xcode's code completion and error checking capabilities.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/editing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n```\n\n----------------------------------------\n\nTITLE: Adding SPM Dependency to Tuist Target (Swift)\nDESCRIPTION: Shows how to reference a Swift Package Manager dependency, previously defined at the project level, from within a specific target's dependencies array in a Tuist manifest. It uses the `.package` dependency type, specifying the product name and linking type (e.g., `.runtime`).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nlet target = .target(name: \"MyTarget\", dependencies: [\n    .package(product: \"CryptoSwift\", type: .runtime)\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring FBLPromises Product Type - Tuist Package Settings - Swift\nDESCRIPTION: Explicitly sets the product type for the `FBLPromises` Swift package dependency to `.framework` (dynamic framework) within Tuist's `PackageSettings`. This configuration addresses a specific runtime crash that can occur when integrating Google libraries that have a dependency on `FBLPromises` by ensuring the dependency is linked as a dynamic framework.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.10\n\nimport PackageDescription\n\n#if TUIST\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet packageSettings = PackageSettings(\n    productTypes: [\n        \"FPLPromises\": .framework,\n    ]\n)\n#endif\n\nlet package = Package(\n...\n```\n\n----------------------------------------\n\nTITLE: Create Project Token\nDESCRIPTION: This command creates a project-scoped token for use in non-interactive environments like CI. The CLI expects this token to be set as the `TUIST_CONFIG_TOKEN` environment variable and `CI=1` to be set.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/server/introduction/authentication.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist project tokens create\n```\n\n----------------------------------------\n\nTITLE: Extracting Project Build Settings into .xcconfig Using Bash\nDESCRIPTION: Provides commands to create a directory for .xcconfig files and then extract build settings from an existing Xcode project into an .xcconfig file via Tuist migration commands. This is used to simplify and externalize build configurations, making migration and project maintenance easier. The snippet shows how to generate these files and prepare them for use in the Project.swift manifest.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir -p xcconfigs/\ntuist migration settings-to-xcconfig -p MyApp.xcodeproj -x xcconfigs/MyApp-Project.xcconfig\n```\n\n----------------------------------------\n\nTITLE: Importing Static Module with @_implementationOnly (Swift)\nDESCRIPTION: This snippet demonstrates how to import a static dependency using the `@_implementationOnly` attribute. This prevents transitive static dependencies from leaking through the `.swiftmodule` of a dynamic framework or library, avoiding compilation failures. It enforces that the `StaticModule` is only used within the implementation of the current module.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\n@_implementationOnly import StaticModule\n```\n\n----------------------------------------\n\nTITLE: Integrating SwiftLint Build Tool Plugin in Tuist Project\nDESCRIPTION: Shows how to integrate a Swift Package build tool plugin into a Tuist project for code linting. The example includes package declaration and target dependency setup.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"Framework\",\n    packages: [\n        .remote(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", requirement: .upToNextMajor(from: \"0.56.1\")),\n    ],\n    targets: [\n        .target(\n            name: \"Framework\",\n            dependencies: [\n                .package(product: \"SwiftLintBuildToolPlugin\", type: .plugin),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Editing Tuist Project with tuist edit (Bash)\nDESCRIPTION: The `tuist edit` command creates an Xcode project that enables editing of Tuist manifest files. It is designed to be run from a Tuist project directory. The command resolves the manifests to be included using the glob `**/{Manifest}.swift` from the project's root directory. Prerequisites include a Tuist project setup and a valid `Tuist.swift` file at the root.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/editing.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ntuist edit\n```\n\n----------------------------------------\n\nTITLE: Determining Product Type Based on Environment Variable (Swift)\nDESCRIPTION: A Swift function designed for use within a Tuist project manifest (`Project.swift`). It reads a value from the `Environment.linking` variable and returns the appropriate `Product` type (`.staticFramework` or `.framework`), allowing dynamic control of linking types at generation time.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\n// Use the value returned by this function to set the product type of your targets.\nfunc productType() -> Product {\n    if case let .string(linking) = Environment.linking {\n        return linking == \"static\" ? .staticFramework : .framework\n    } else {\n        return .framework\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Boolean Environment Variable with Default (Swift)\nDESCRIPTION: Shows the usage of the `getBoolean(default:)` helper method on an `Environment` variable (e.g., `Environment.isCI`) in Swift. This method retrieves the boolean representation of an environment variable, returning the specified default value if the variable is not set or cannot be interpreted as a boolean.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dynamic-configuration.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nEnvironment.isCI.getBoolean(default: false)\n```\n\n----------------------------------------\n\nTITLE: Defining a migrated Xcode target with dependencies and external configurations in Swift\nDESCRIPTION: Shows how to declare a target in Tuist's Project.swift manifest, including name, supported platforms, product type, bundle identifier, source files, dependencies (both local and external), and build settings referencing per-target .xcconfig files. This snippet is essential for incrementally migrating individual targets and describing dependencies precisely. Requires prior extraction of build settings and source alignment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/Project.xcconfig\"),\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/Project.xcconfig\"),\n    ]),\n    targets: [\n        .target(\n            name: \"TargetX\",\n            destinations: .iOS,\n            product: .framework,\n            bundleId: \"io.tuist.targetX\",\n            sources: [\"Sources/TargetX/**\"],\n            dependencies: [\n                /** Dependencies go here **/\n                /** .external(name: \"Kingfisher\") **/\n                /** .target(name: \"OtherProjectTarget\") **/\n            ],\n            settings: .settings(configurations: [\n                .debug(name: \"Debug\", xcconfig: \"./xcconfigs/TargetX.xcconfig\"),\n                .debug(name: \"Release\", xcconfig: \"./xcconfigs/TargetX.xcconfig\"),\n            ])\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Claude (JSON configuration for Homebrew installation)\nDESCRIPTION: This JSON snippet shows how to configure the MCP server for Claude desktop using a global Tuist installation via Homebrew. It defines the command and arguments needed to start the MCP server for integration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/ai/mcp.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"tuist\",\n      \"args\": [\"mcp\", \"start\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist Completion Script for Zsh without oh-my-zsh\nDESCRIPTION: This command generates a Tuist completion script and saves it to a custom Zsh completion directory. This enables autocomplete functionality for Tuist commands in Zsh shells without oh-my-zsh.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/cli/shell-completions.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist --generate-completion-script > ~/.zsh/completion/_tuist\n```\n\n----------------------------------------\n\nTITLE: Defining an SPM Package Manifest with a Build Tool Plugin (Swift)\nDESCRIPTION: Illustrates a standard `Package.swift` manifest file for a Swift package. This example defines a library product and target, includes a dependency on `SwiftLintPlugins`, and configures the target to use the `SwiftLint` build tool plugin from that dependency.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\nlet package = Package(\n    name: \"Framework\",\n    products: [\n        .library(name: \"Framework\", targets: [\"Framework\"]),\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", .upToNextMajor(from: \"0.56.1\")),\n    ],\n    targets: [\n        .target(\n            name: \"Framework\",\n            plugins: [\n                .plugin(name: \"SwiftLint\", package: \"SwiftLintPlugin\"),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Package Dependencies in Tuist Project\nDESCRIPTION: Shows how to add Swift Package Manager dependencies to a Tuist project by specifying packages when instantiating a Project. This uses Xcode's default integration mechanism.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(name: \"MyProject\", packages: [\n    .remote(url: \"https://github.com/krzyzanowskim/CryptoSwift\", requirement: .exact(\"1.8.0\"))\n])\n```\n\n----------------------------------------\n\nTITLE: Using 'tuist edit' to Modify the Xcode Project\nDESCRIPTION: This snippet explains how to invoke the 'tuist edit' command to generate and open the Xcode project for editing, facilitating incremental or full migration of project dependencies and structure. It encourages starting with smaller projects to familiarize with Tuist's workflow.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntuist edit\n```\n\n----------------------------------------\n\nTITLE: Updating Tuist Project with Repository URL\nDESCRIPTION: This command updates the Tuist project with the URL of the GitHub repository. It is used to configure the integration between Tuist and GitHub.  The `tuist project update` command takes the organization and repository name (e.g., tuist/tuist) as an argument, followed by the `--repository-url` flag and the URL of the repository.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/server/introduction/integrations.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntuist project update tuist/tuist --repository-url https://github.com/tuist/tuist\n```\n\n----------------------------------------\n\nTITLE: Accessing Bundle in Swift\nDESCRIPTION: This Swift snippet demonstrates how to access a target's bundle using the `Bundle.module` property. It provides a convenient way to interact with resources bundled within the target.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/synthesized-files.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet bundle = Bundle.module\n```\n\n----------------------------------------\n\nTITLE: Generating Fish Completion Script\nDESCRIPTION: This command generates a Fish shell completion script using `tuist --generate-completion-script` and saves it to `~/.config/fish/completions/tuist.fish`. Before saving, it ensures the `~/.config/fish/completions` directory exists. This sets up command completion in the Fish shell for the Tuist CLI.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/cli/shell-completions.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir -p ~/.config/fish/completions\ntuist --generate-completion-script > ~/.config/fish/completions/tuist.fish\n```\n\n----------------------------------------\n\nTITLE: Connecting Local Project to Tuist Server (Swift)\nDESCRIPTION: Updates the `Tuist.swift` configuration file to associate the local project with its counterpart on the Tuist server. This involves importing the `ProjectDescription` module and initializing a `Tuist` object, passing the server project's full handle (e.g., \"my-handle/MyApp\") to the `fullHandle` parameter. This connection enables features like sending build insights.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/quick-start/gather-insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(fullHandle: \"my-handle/MyApp\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist with the init command\nDESCRIPTION: The `tuist init` command initializes Tuist in the current directory. It can be used in any directory or in the directory of an Xcode project or workspace. The command guides the user through creating a generated project or integrating an existing Xcode project or workspace.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/quick-start/get-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist init\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Tuist CLI using login command (Bash)\nDESCRIPTION: This snippet shows how to authenticate a user with Tuist by running the 'tuist auth login' command in the terminal. It is a prerequisite for accessing server capabilities like gathering insights.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/gather-insights.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Defining a Plugin using a Local Path\nDESCRIPTION: This swift code snippet demonstrates how to add a local plugin to a project's Tuist.swift manifest file.  It uses the `.local` case to specify a path.  The path is used to fetch the plugin from the local filesystem.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/plugins.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\n\nlet tuist = Tuist(\n    project: .tuist(plugins: [\n        .local(path: \"/Plugins/MyPlugin\")\n    ])\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Plugin in Tuist.swift - Swift\nDESCRIPTION: This snippet shows how to configure a local plugin within the `Tuist.swift` manifest file. It uses `.local(path:)` to specify the file system path to the plugin's directory, allowing Tuist to discover and use the plugin's artifacts.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/plugins.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\n\nlet tuist = Tuist(\n    project: .tuist(plugins: [\n        .local(path: \"/Plugins/MyPlugin\")\n    ])\n)\n```\n\n----------------------------------------\n\nTITLE: Updating dependency declaration to use registry identifier in Package.swift\nDESCRIPTION: This diff snippet demonstrates changing a package dependency declaration in Package.swift from a URL-based package to using a registry identifier. The modification replaces the URL with an 'id' based on the registry's organization and repository, enforcing registry-based dependency resolution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry/xcodeproj-integration.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository with Bash\nDESCRIPTION: This command clones the TootSDK repository from GitHub and navigates into the cloned directory. It's a prerequisite step for using Tuist with the Swift Package.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/swift-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TootSDK/TootSDK\ncd TootSDK\n```\n\n----------------------------------------\n\nTITLE: Translate Heading Titles\nDESCRIPTION: This example shows how to translate heading titles within markdown files. The title text should be translated, but the heading ID (anchor link) must remain unchanged to preserve internal linking.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/contributors/translate.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Add dependencies {#add-dependencies}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n# 의존성 추가하기 {#add-dependencies}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Environment Variables in Tuist (Bash)\nDESCRIPTION: This snippet extends the previous by showing how to define multiple environment variables at once. It uses space separation to set `TUIST_APP_NAME` and `TUIST_APP_LOCALE`, showing how to pass different configuration settings at generation time. This enables more complex and flexible project configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dynamic-configuration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTUIST_APP_NAME=MyApp TUIST_APP_LOCALE=pl tuist generate\n```\n\n----------------------------------------\n\nTITLE: Authenticating Tuist with Server (Bash)\nDESCRIPTION: Authenticates the local Tuist CLI with the Tuist server. This command initiates the login process, which is a prerequisite for using server-dependent features like project creation and insights gathering. Requires an existing account on the Tuist server.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/quick-start/gather-insights.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Setup for Tuist with TimescaleDB and pgweb\nDESCRIPTION: A complete docker-compose.yml configuration for deploying Tuist with TimescaleDB as the database, pgweb for database visualization, and the Tuist service. Includes environment variables for authentication, storage configuration, and database connection settings.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/server/on-premise/install.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: timescale/timescaledb-ha:pg16\n    restart: always\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - PGDATA=/var/lib/postgresql/data/pgdata\n    ports:\n      - '5432:5432'\n    volumes:\n      - db:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  pgweb:\n    container_name: pgweb\n    restart: always\n    image: sosedoff/pgweb\n    ports:\n      - \"8081:8081\"\n    links:\n      - db:db\n    environment:\n      PGWEB_DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n    depends_on:\n      - db\n\n  tuist:\n    image: ghcr.io/tuist/tuist:latest\n    container_name: tuist\n    depends_on:\n      - db\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n      - \"443:443\"\n    expose:\n      - \"80\"\n      - \"8080\"\n      - \"443:443\"\n    environment:\n      # Base Tuist Env - https://docs.tuist.io/en/guides/dashboard/on-premise/install#base-environment-configuration\n      TUIST_USE_SSL_FOR_DATABASE: \"0\"\n      TUIST_LICENSE:  # ...\n      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n      TUIST_APP_URL: https://localhost:8080\n      TUIST_SECRET_KEY_BASE: # ...\n      WEB_CONCURRENCY: 80\n\n      # Auth - one method\n      # GitHub Auth - https://docs.tuist.io/en/guides/dashboard/on-premise/install#github\n      TUIST_GITHUB_OAUTH_ID:\n      TUIST_GITHUB_APP_CLIENT_SECRET:\n\n      # Okta Auth - https://docs.tuist.io/en/guides/dashboard/on-premise/install#okta\n      TUIST_OKTA_SITE:\n      TUIST_OKTA_CLIENT_ID:\n      TUIST_OKTA_CLIENT_SECRET:\n      TUIST_OKTA_AUTHORIZE_URL: # Optional\n      TUIST_OKTA_TOKEN_URL: # Optional\n      TUIST_OKTA_USER_INFO_URL: # Optional\n      TUIST_OKTA_EVENT_HOOK_SECRET: # Optional\n\n      # Storage\n      AWS_ACCESS_KEY_ID: # ...\n      AWS_SECRET_ACCESS_KEY: # ...\n      AWS_S3_REGION: # ...\n      AWS_ENDPOINT: # https://amazonaws.com\n      TUIST_S3_BUCKET_NAME: # ...\n\n      # Other\n\nvolumes:\n  db:\n    driver: local\n```\n\n----------------------------------------\n\nTITLE: Defining an Xcode Project with Project.swift in Swift\nDESCRIPTION: This snippet demonstrates how to create a basic Project.swift manifest file that defines an Xcode project with a specified name. The project will be generated in the directory containing the manifest file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/manifests.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Project.swift\nlet project = Project(\n    name: \"App\",\n    targets: [\n        // ....\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude for Mise-Managed Tuist MCP Server (JSON)\nDESCRIPTION: JSON configuration snippet for Claude Desktop (`claude_desktop_config.json`) to integrate with a Tuist MCP server managed by Mise. It uses the 'mise' command to execute a specific ('tuist@x.y.z') or latest ('tuist@latest') version of Tuist, passing the 'mcp start' arguments to launch the server.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/ai/mcp.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"mise\",\n      \"args\": [\"x\", \"tuist@latest\", \"--\", \"tuist\", \"mcp\", \"start\"] // Or tuist@x.y.z to fix the version\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Selective Tests with tuist xcodebuild (Bash)\nDESCRIPTION: Illustrates how to run tests selectively by prefixing the standard `xcodebuild test` command with `tuist`. This example specifies the 'App' scheme. The command utilizes project hashing on successful runs to determine which tests need execution based on code changes since the last successful run. Requires a configured Tuist project and account.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/selective-testing/xcodebuild.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist xcodebuild test -scheme App\n```\n\n----------------------------------------\n\nTITLE: Creating a Project Token for CI with Tuist - Bash\nDESCRIPTION: Generates a new project-scoped authentication token for use in non-interactive CI environments. The command must be run in an environment with Tuist CLI installed. After token creation, the token should be set to the TUIST_CONFIG_TOKEN environment variable, and CI=1 should be exported, enabling the CLI to authenticate requests securely within CI/CD pipelines. The generated token is limited in its backend permissions to maintain security.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/server/introduction/authentication.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist project tokens create\n```\n\n----------------------------------------\n\nTITLE: Update SSO Configuration for Tuist Organization (Korean)\nDESCRIPTION: This command updates the SSO configuration for a Tuist organization. It allows the configuration of Google Workspace or Okta SSO providers for authentication. It's a way to connect a Tuist organization with a domain for developer authentication.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/server/introduction/authentication.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider google --organization-id my-google-domain.com\n```\n\n----------------------------------------\n\nTITLE: Initiating User Authentication Flow in Bash\nDESCRIPTION: Runs the Tuist CLI command to start a web-based authentication process for the current user. Successful authentication stores long-lived refresh and short-lived access tokens in `~/.config/tuist/credentials`, enabling automatic authentication for subsequent server requests.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/server/introduction/authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist with Homebrew\nDESCRIPTION: Commands for installing Tuist using Homebrew package manager. This method allows installation of either the latest version or a specific version of Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/install-tuist.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap tuist/tuist\nbrew install --formula tuist\nbrew install --formula tuist@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Using Plugin Resource Synthesizer - Swift\nDESCRIPTION: This snippet demonstrates how to configure a project (`Project.swift`) to use a resource synthesizer template provided by a specific plugin. The `resourceSynthesizers` array specifies the resource type (`.strings`) and references the plugin by its name (`plugin: \"MyPlugin\"`).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/plugins.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nlet project = Project(resourceSynthesizers: [.strings(plugin: \"MyPlugin\")])\n```\n\n----------------------------------------\n\nTITLE: Sharing app previews and running them with Tuist\nDESCRIPTION: This snippet covers commands for sharing app previews via Tuist, generating links to run apps on simulators or real devices, and running specific previews based on branch, commit, or latest specifier. It enables easy distribution and testing of app versions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/share/previews.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist share App\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist run {url}\ntuist run --device \"My iPhone\" {url} # Run the app on a specific device\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist run App@latest # Runs latest App preview associated with the project's default branch\ntuist run App@my-feature-branch # Runs latest App preview associated with a given branch\ntuist run App@00dde7f56b1b8795a26b8085a781fb3715e834be # Runs latest App preview associated with a given git commit sha\n```\n\n----------------------------------------\n\nTITLE: Defining a Plugin in Swift (Plugin.swift)\nDESCRIPTION: This code snippet shows how to declare a simple plugin using the ProjectDescription framework in Swift, which is necessary for creating project description helper plugins and resource accessor templates. The plugin is identified by its name.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/plugins.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet plugin = Plugin(name: \"MyPlugin\")\n```\n\n----------------------------------------\n\nTITLE: Passing a Single Environment Variable to Tuist Generate (Bash)\nDESCRIPTION: Demonstrates how to set an environment variable (`TUIST_APP_NAME`) directly before the `tuist generate` command in Bash. This variable can then be accessed within Tuist manifest files to dynamically configure the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dynamic-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTUIST_APP_NAME=MyApp tuist generate\n```\n\n----------------------------------------\n\nTITLE: Running Tests Without Binary Cache using Tuist CLI\nDESCRIPTION: This snippet shows how to execute tests using the `tuist test` command while disabling the binary cache. This is useful when debugging issues with the cache or when the cache is not needed. The command ensures the project is generated if required and runs tests through the platform-specific build tool. It assumes Tuist is installed and configured.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/test.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Defining Tuist Project Structure - Project.swift - Swift\nDESCRIPTION: This snippet shows how to define the main project structure using Tuist's ProjectDescription DSL in a `Project.swift` file. It imports the necessary framework and defines a basic application project with a single iOS target, specifying its name, destinations, product type, bundle identifier, and source files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.App\",\n            sources: [\"Sources/**/*.swift\"]*\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Logger via swift-service-context in Tuist CLI (bash)\nDESCRIPTION: Shows how to access the logger instance injected via swift-service-context in the Tuist CLI environment. This snippet demonstrates retrieving the current service context's logger using a bash command, emphasizing that the logging instance is provided using task locals, which have limitations with Dispatch queues in asynchronous code dispatching.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/contributors/cli/logging.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nServiceContext.current?.logger\n```\n\n----------------------------------------\n\nTITLE: Running Carthage and Tuist Generate Workflow (Bash)\nDESCRIPTION: A basic bash script demonstrating the typical workflow for integrating Carthage dependencies with a Tuist project. It first runs `carthage update` to fetch and build dependencies and then runs `tuist generate` to create the Xcode project/workspace that references the built products.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n#!/usr/bin/env bash\n\ncarthage update\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Generating Tuist Bash Completions (bash-completion)\nDESCRIPTION: Generates the Tuist Bash completion script using `tuist --generate-completion-script` and saves it to the standard bash-completion directory (`/usr/local/etc/bash_completion.d/`) as `_tuist`. This requires the `bash-completion` package to be installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/cli/shell-completions.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ntuist --generate-completion-script > /usr/local/etc/bash_completion.d/_tuist\n```\n\n----------------------------------------\n\nTITLE: Xcode Cloud: Install Tuist using Homebrew\nDESCRIPTION: This bash script installs Tuist using Homebrew. It utilizes the `brew install --formula` command to install a specific version of Tuist (x.y.z). After installation, it runs the `tuist generate` command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/automate/continuous-integration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nbrew install --formula tuist@x.y.z\n\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Tuist - Bash\nDESCRIPTION: This snippet uses the `tuist install` command to install Swift Package Manager dependencies. This command internally leverages the Swift Package Manager to fetch and resolve dependencies.  The command is intended to be run from the root directory of the Swift Package, in this case, the TootSDK directory.  The output includes downloading the required dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/swift-package.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\n```\n\n----------------------------------------\n\nTITLE: Creating an Organization Account using CLI (bash)\nDESCRIPTION: This snippet demonstrates how to create a new organization account using the `tuist organization create` command via the CLI. The command takes an account handle as input, which is a string that uniquely identifies the organization.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/server/introduction/accounts-and-projects.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization create {account-handle}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose deployment for Tuist with TimescaleDB and pgweb\nDESCRIPTION: This Docker Compose configuration sets up a complete Tuist environment with a PostgreSQL database (TimescaleDB), pgweb for database management, and the Tuist service itself. It includes environment variables for database connection, authentication methods (GitHub/Okta), and S3 storage configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/server/on-premise/install.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: timescale/timescaledb-ha:pg16\n    restart: always\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - PGDATA=/var/lib/postgresql/data/pgdata\n    ports:\n      - '5432:5432'\n    volumes:\n      - db:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  pgweb:\n    container_name: pgweb\n    restart: always\n    image: sosedoff/pgweb\n    ports:\n      - \"8081:8081\"\n    links:\n      - db:db\n    environment:\n      PGWEB_DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n    depends_on:\n      - db\n\n  tuist:\n    image: ghcr.io/tuist/tuist:latest\n    container_name: tuist\n    depends_on:\n      - db\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n      - \"443:443\"\n    expose:\n      - \"80\"\n      - \"8080\"\n      - \"443:443\"\n    environment:\n      # Base Tuist Env - https://docs.tuist.io/en/guides/dashboard/on-premise/install#base-environment-configuration\n      TUIST_USE_SSL_FOR_DATABASE: \"0\"\n      TUIST_LICENSE:  # ...\n      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n      TUIST_APP_URL: https://localhost:8080\n      TUIST_SECRET_KEY_BASE: # ...\n      WEB_CONCURRENCY: 80\n\n      # Auth - one method\n      # GitHub Auth - https://docs.tuist.io/en/guides/dashboard/on-premise/install#github\n      TUIST_GITHUB_OAUTH_ID:\n      TUIST_GITHUB_APP_CLIENT_SECRET:\n\n      # Okta Auth - https://docs.tuist.io/en/guides/dashboard/on-premise/install#okta\n      TUIST_OKTA_SITE:\n      TUIST_OKTA_CLIENT_ID:\n      TUIST_OKTA_CLIENT_SECRET:\n      TUIST_OKTA_AUTHORIZE_URL: # Optional\n      TUIST_OKTA_TOKEN_URL: # Optional\n      TUIST_OKTA_USER_INFO_URL: # Optional\n      TUIST_OKTA_EVENT_HOOK_SECRET: # Optional\n\n      # Storage\n      AWS_ACCESS_KEY_ID: # ...\n      AWS_SECRET_ACCESS_KEY: # ...\n      AWS_S3_REGION: # ...\n      AWS_ENDPOINT: # https://amazonaws.com\n      TUIST_S3_BUCKET_NAME: # ...\n\n      # Other\n\nvolumes:\n  db:\n    driver: local\n```\n\n----------------------------------------\n\nTITLE: Using an External Dependency in SwiftUI View - Swift\nDESCRIPTION: This snippet demonstrates how to use the 'Kingfisher' package within a SwiftUI ContentView to download and display a remote image. The snippet requires 'Kingfisher' to be properly configured as a dependency. Key parameter: a URL to the remote image. The output is a SwiftUI view displaying both text and the fetched image. Limitations: Ensure the URL is valid and Kingfisher is properly imported; network failures are not handled in this snippet.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/add-dependencies.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport Kingfisher // [!code ++]\n\npublic struct ContentView: View {\n    public init() {}\n\n    public var body: some View {\n        Text(\"Hello, World!\") // [!code --]\n            .padding() // [!code --]\n        KFImage(URL(string: \"https://cloud.tuist.io/images/tuist_logo_32x32@2x.png\")!) // [!code ++]\n    }\n}\n\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Editing a Tuist Project Using the CLI in Bash\nDESCRIPTION: This Bash command snippet describes how to use the Tuist CLI tool to open and edit the generated Xcode project. The `tuist edit` command generates an Xcode project for the current Tuist-managed project and opens it in Xcode to allow direct editing. This improves developer experience by enabling use of Xcode tooling while managing project configuration declaratively. The prerequisite is that Tuist is installed and the current directory contains valid Tuist project definitions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n```\n\n----------------------------------------\n\nTITLE: General Invocation of tuist xcodebuild Selective Testing\nDESCRIPTION: Illustrates the general usage of `tuist xcodebuild test` as referenced in the workflow example table. This command triggers Tuist's selective testing mechanism, hashing project components and running only affected tests based on changes since the last successful execution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/selective-testing/xcodebuild.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntuist xcodebuild test\n```\n\n----------------------------------------\n\nTITLE: Importing VPFeature Vue Component\nDESCRIPTION: This snippet imports the `VPFeature` component from the VitePress library. This component is used for displaying features or other content in a visually appealing way. It is a dependency from the vitepress theme and enables the use of pre-defined components.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/tuist/about.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nimport VPFeature from \"vitepress/dist/client/theme-default/components/VPFeature.vue\";\n```\n\n----------------------------------------\n\nTITLE: Create a Project-Scoped Token for CI Environments in Tuist CLI\nDESCRIPTION: This snippet provides the command to generate a project-scoped token used in non-interactive CI environments, enabling authentication via environment variables. It requires setting `TUIST_CONFIG_TOKEN` with the token value and `CI=1` to denote CI environment. The token permissions are limited for safety, with future documentation planned.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/server/introduction/authentication.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist project tokens create\n```\n\n----------------------------------------\n\nTITLE: Running Shared Tuist App Previews - Bash\nDESCRIPTION: This snippet details running shared app previews using Tuist on a simulator or a specified physical device. 'tuist run {url}' executes the app preview using the provided link, and the '--device' flag allows targeting a registered device by name. Requires a previously generated preview URL and the Tuist CLI on the recipient's machine. Useful for quickly testing shared builds without manual installation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/share/previews.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist run {url}\ntuist run --device \"My iPhone\" {url} # Run the app on a specific device\n```\n\n----------------------------------------\n\nTITLE: Defining a Template Manifest in Swift\nDESCRIPTION: Example of a template manifest file that defines a custom template with required and optional attributes. The template includes string content, file generation with Stencil templates, and directory copying capabilities.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/templates.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet nameAttribute: Template.Attribute = .required(\"name\")\n\nlet template = Template(\n    description: \"Custom template\",\n    attributes: [\n        nameAttribute,\n        .optional(\"platform\", default: \"ios\"),\n    ],\n    items: [\n        .string(\n            path: \"Project.swift\",\n            contents: \"My template contents of name \\(nameAttribute)\"\n        ),\n        .file(\n            path: \"generated/Up.swift\",\n            templatePath: \"generate.stencil\"\n        ),\n        .directory(\n            path: \"destinationFolder\",\n            sourcePath: \"sourceFolder\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow - Caching Dependencies\nDESCRIPTION: This GitHub Actions workflow snippet shows how to cache dependencies using GitHub Actions' caching mechanism. It restores a cache if available, resolves dependencies if the cache is missed, and saves the resolved dependencies back to the cache.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry/continuous-integration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Restore cache\n  id: cache-restore\n  uses: actions/cache/restore@v4\n  with:\n    path: .build\n    key: ${{ runner.os }}-${{ hashFiles('App.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}\n    restore-keys: .build\n- name: Resolve dependencies\n  if: steps.cache-restore.outputs.cache-hit != 'true'\n  run: xcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n- name: Save cache\n  id: cache-save\n  uses: actions/cache/save@v4\n  with:\n    path: .build\n    key: ${{ steps.cache-restore.outputs.cache-primary-key }}\n```\n\n----------------------------------------\n\nTITLE: Automating Tuist Generation and CocoaPods Integration (Bash)\nDESCRIPTION: A shell script outlining a workflow for integrating CocoaPods dependencies into a Tuist-generated project. It first runs `tuist generate` to create the `.xcodeproj` file. Subsequently, `pod install` is executed, which reads the `Podfile`, integrates the specified pods, and typically creates an `.xcworkspace`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\ntuist generate\npod install\n```\n\n----------------------------------------\n\nTITLE: Declaring Target Dependencies in a Tuist Project File - Swift\nDESCRIPTION: Sets up project targets and links external dependencies such as 'Kingfisher' inside a Tuist-managed project definition via ProjectDescription API. The code expects Tuist and the required SPM dependencies to be installed. Inputs include details like target names, bundle IDs, source and resource paths, and dependency declarations (e.g., .external(name: \"Kingfisher\")). Outputs a Tuist Project spec, typically stored as a Project.swift file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/add-dependencies.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    targets: [\n        .target(\n            name: \"MyApp\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.MyApp\",\n            infoPlist: .extendingDefault(\n                with: [\n                    \"UILaunchStoryboardName\": \"LaunchScreen.storyboard\",\n                ]\n            ),\n            sources: [\"MyApp/Sources/**\"],\n            resources: [\"MyApp/Resources/**\"],\n            dependencies: [\n                .external(name: \"Kingfisher\") // [!code ++]\n            ]\n        ),\n        .target(\n            name: \"MyAppTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyAppTests\",\n            infoPlist: .default,\n            sources: [\"MyApp/Tests/**\"],\n            resources: [],\n            dependencies: [.target(name: \"MyApp\")]\n        ),\n    ]\n)\n\n```\n\n----------------------------------------\n\nTITLE: Running Tuist from Terminal with the Run Command\nDESCRIPTION: Command to run Tuist using its own run command for development purposes. This example demonstrates generating a project without opening it afterward.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/contributors/get-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist run tuist generate --path /path/to/project --no-open\n```\n\n----------------------------------------\n\nTITLE: Activating Tuist with Mise in Xcode Post-Action (Shell)\nDESCRIPTION: This shell script is intended for use in an Xcode scheme's post-build action. It activates the Tuist environment using Mise before running 'tuist inspect build' to track build times. The '-C' flag ensures Mise loads configuration from the project root, and '$SRCROOT' provides the project directory path.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/insights.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# -C ensures that Mise loads the configuration from the Mise configuration\n# file in the project's root directory.\neval \"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\"\n\ntuist inspect build\n```\n\n----------------------------------------\n\nTITLE: Running all tests without binary cache using 'tuist test'\nDESCRIPTION: Performs testing across the entire project without utilizing cached build artifacts, which can be useful for ensuring tests are run against the latest code without cached dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/test.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Tuist Plugins in Tuist.swift (Swift)\nDESCRIPTION: Shows how to register a locally available plugin within the `Tuist.swift` manifest file. The `.local(path:)` enum case is used within the `plugins` array, pointing to the directory containing the plugin's definition.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/plugins.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\n\nlet tuist = Tuist(\n    project: .tuist(plugins: [\n        .local(path: \"/Plugins/MyPlugin\")\n    ])\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Single Target In Project Swift\nDESCRIPTION: Shows how to define a specific target (`TargetX`) within the `targets` array of the `Project.swift` manifest using the `.target` function. It includes configuration for destinations, product type, bundle identifier, source file glob patterns, dependencies (with commented examples), and references target-specific `.xcconfig` files for build settings.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/Project.xcconfig\"),\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/Project.xcconfig\"),\n    ]),\n    targets: [\n        .target( // [!code ++]\n            name: \"TargetX\", // [!code ++]\n            destinations: .iOS, // [!code ++]\n            product: .framework, // [!code ++] // or .staticFramework, .staticLibrary...\n            bundleId: \"io.tuist.targetX\", // [!code ++]\n            sources: [\"Sources/TargetX/**\"], // [!code ++]\n            dependencies: [ // [!code ++]\n                /** Dependencies go here **/\n                /** .external(name: \"Kingfisher\") **/\n                /** .target(name: \"OtherProjectTarget\") **/\n            ], // [!code ++]\n            settings: .settings(configurations: [ // [!code ++]\n                .debug(name: \"Debug\", xcconfig: \"./xcconfigs/TargetX.xcconfig\"), // [!code ++]\n                .debug(name: \"Release\", xcconfig: \"./xcconfigs/TargetX.xcconfig\"), // [!code ++]\n            ]) // [!code ++]\n        ), // [!code ++]\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Tuist Directory Structure\nDESCRIPTION: This snippet illustrates the common directory structure used in Tuist projects.  It includes `Tuist.swift` which is the entry point of the project, `Project.swift` for defining individual projects, and `Workspace.swift` for defining the workspace.  These files define the project structure and configuration in Swift.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n/\n  Tuist.swift\n  Project.swift\n  Workspace.swift\n```\n\n----------------------------------------\n\nTITLE: Activating Tuist versions with Mise\nDESCRIPTION: Commands for activating specific Tuist versions with Mise, either globally or for a particular project. This is a required step after installation when using Mise.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/quick-start/install-tuist.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise use tuist@x.y.z          # Использовать tuist версии x.y.z в текущей директории\nmise use tuist@latest         # Использовать tuist последней версии в текущей директории\nmise use -g tuist@x.y.z       # Использовать tuist версии x.y.z глобально\nmise use -g tuist@system      # Использовать системный tuist глобально\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Component with VitePress Data in Tuist Examples\nDESCRIPTION: Imports the useData hook from VitePress and extracts the params object containing URL parameters. This setup allows dynamic access to external URL references.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/references/examples/[example].md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useData } from 'vitepress'\n\n// params is a Vue ref\nconst { params } = useData()\n```\n\n----------------------------------------\n\nTITLE: Generating Tuist Zsh Completions (Manual)\nDESCRIPTION: Generates the Tuist Zsh completion script and saves it to a manually configured directory (`~/.zsh/completion/`) as `_tuist`. This method is used when not using oh-my-zsh and requires the Zsh environment to be configured to load completions from this path (see related snippet).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/cli/shell-completions.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ntuist --generate-completion-script > ~/.zsh/completion/_tuist\n```\n\n----------------------------------------\n\nTITLE: Running Selective UI Tests with Tuist (Shell)\nDESCRIPTION: This shell script demonstrates how to run UI tests selectively using the `tuist test` command in a Tuist project. The command utilizes the `--device` or `-destination` parameters to specify the target device or simulator ID, allowing for focused testing. The command assumes a generated project, a Tuist account, and project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/selective-testing/generated-project.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntuist test --device 'iPhone 14 Pro'\n# or\ntuist test -- -destination 'name=iPhone 14 Pro'\n# or\ntuist test -- -destination 'id=SIMULATOR_ID'\n```\n\n----------------------------------------\n\nTITLE: Building and testing Tuist project in CI/CD pipelines\nDESCRIPTION: This snippet demonstrates commands to automate building and testing the Tuist-generated project within CI environments, ensuring reliable validation of project migration. It includes installing, generating, building, and testing the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\ntuist generate\ntuist build -- ...{xcodebuild flags} # or tuist test\n```\n\n----------------------------------------\n\nTITLE: Building and testing Tuist project in CI with Bash commands\nDESCRIPTION: Command-line instructions to integrate Tuist project build and testing steps within a continuous integration pipeline. It ensures that each migration change is validated by installing dependencies, generating the project, and building or testing it using Tuist CLI commands. These commands require Tuist to be installed and configured in the CI environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntuist install\ntuist generate\ntuist build -- ...{xcodebuild flags} # or tuist test\n```\n\n----------------------------------------\n\nTITLE: Running All Tests Without Binary Cache Using Tuist CLI\nDESCRIPTION: This snippet shows how to run all tests while disabling the binary cache feature. The `--no-binary-cache` flag disables the caching of build artifacts. This is useful when you want to ensure the tests are run from scratch or when debugging cache-related issues. The command ensures the project is generated if needed and subsequently executes tests with the platform-specific build tool.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/test.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Running Tests without Binary Cache in Tuist\nDESCRIPTION: This command runs all tests in a Tuist project, bypassing the binary cache. This can be useful for ensuring tests are run against the latest code changes and for debugging caching-related issues.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/test.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Obtaining Tuist Share Command Output as JSON - Bash\nDESCRIPTION: This snippet shows how to use the '--json' flag to get a structured JSON output from the 'tuist share' command. The output includes the preview link and a QR code URL, facilitating integrations with CI/CD and notifications (e.g., Slack). Requires Tuist CLI and a successful build share operation. Intended for automation and scripting.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/share/previews.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntuist share --json\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for a Tuist Resource Accessor Template Plugin\nDESCRIPTION: Displays the necessary directory structure for a resource accessor template plugin. It includes the `Plugin.swift` manifest and a `ResourceSynthesizers` directory containing Stencil template files (e.g., `Strings.stencil`, `Plists.stencil`) for various resource types.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/plugins.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n.\n├── ...\n├── Plugin.swift\n├── ResourceSynthesizers\n├───── Strings.stencil\n├───── Plists.stencil\n├───── CustomTemplate.stencil\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Activating Tuist Versions with Mise\nDESCRIPTION: Shows how to activate specific Tuist versions using Mise, either per project or globally. Unlike Homebrew, Mise requires explicit activation. Commands demonstrate using a specific version, the latest version locally, or setting a global default version, including reverting to the system's version. Requires Mise and an installed Tuist version.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/install-tuist.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise use tuist@x.y.z          # Use tuist-x.y.z in the current project\nmise use tuist@latest         # Use the latest tuist in the current directory\nmise use -g tuist@x.y.z       # Use tuist-x.y.z as the global default\nmise use -g tuist@system      # Use the system's tuist as the global default\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic Link Using Vitepress Params (Vue)\nDESCRIPTION: This snippet shows how to bind a dynamic href attribute in an anchor tag to a property from the Vitepress-provided params object. The anchor's href uses Vue's binding syntax to insert a URL defined by params.url, enabling context-aware links in the rendered HTML. This usage assumes params.url exists within the current Vitepress page context and outputs a link that opens in a new browser tab.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/references/examples/[example].md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<a :href=\"params.url\" target=\"blank\">Check out example</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Vitepress Page Data with useData in Vue Script Setup (Vue)\nDESCRIPTION: This snippet demonstrates importing and using Vitepress's useData composable within a Vue 3 <script setup> block. It initializes a reactive 'params' reference containing page parameters, which can be used throughout the component. Dependencies include Vitepress (providing useData) and Vue 3 with script setup support. The params ref may include page-specific metadata, enabling dynamic functionality like generating links or displaying content based on the current page context.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/references/examples/[example].md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\n\n// params is a Vue ref\nconst { params } = useData()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Swift Bundle Accessor Extension for Resources\nDESCRIPTION: Provides an extension to the Swift `Bundle` type that exposes the target's resource bundle via `Bundle.module`, simplifying resource access in Swift code. Dependencies include the target being configured correctly to include resources, and the extension is automatically generated during project synthesis.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/synthesized-files.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet bundle = Bundle.module\n```\n\n----------------------------------------\n\nTITLE: Running Selective Tests with tuist xcodebuild and Scheme\nDESCRIPTION: Demonstrates the command to run tests selectively using Tuist integrated with xcodebuild, specifying a particular scheme. Prepending `tuist` enables hash-based selective testing, executing only tests affected by changes since the last successful run for the 'App' scheme.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/selective-testing/xcodebuild.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntuist xcodebuild test -scheme App\n```\n\n----------------------------------------\n\nTITLE: Verifying Tuist Binary Authenticity via Script\nDESCRIPTION: Shows a command using `curl` to download and `bash` to execute a verification script hosted at `docs.tuist.dev`. This script is used to verify the authenticity of the installed Tuist binaries. Requires `curl` and `bash` to be available in the environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/install-tuist.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL \"https://docs.tuist.dev/verify.sh\" | bash\n```\n\n----------------------------------------\n\nTITLE: Objective-C Bundle Accessor for Target Resources\nDESCRIPTION: Defines an interface `{Target}Resources` to access the resource bundle in Objective-C, generated during project build. It allows Objective-C code to retrieve the bundle associated with a specific target, ensuring resources are accessible even when the target type does not support resources natively.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/synthesized-files.md#_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSBundle *bundle = [MyFeatureResources bundle];\n```\n\n----------------------------------------\n\nTITLE: Generating Projects with Tuist CLI and Cache Control - Bash\nDESCRIPTION: Showcases various invocations of 'tuist generate' to create Xcode projects while controlling binary cache usage for dependencies and specified targets. The '--no-binary-cache' flag allows full opt-out from using cached binaries. These commands require a generated Tuist project and the Tuist CLI. Key parameters include the target(s) to generate and the cache configuration. Outputs are Xcode projects with dependencies substituted by binaries where applicable, except when explicitly disabled.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/cache.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate # Only dependencies\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Search # Dependencies + Search dependencies\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Search Settings # Dependencies, and Search and Settings dependencies\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate --no-binary-cache # No cache at all\n\n```\n\n----------------------------------------\n\nTITLE: Determining target migration order based on dependencies\nDESCRIPTION: Uses a Tuist command to list project targets sorted by their dependency count. Helps prioritize migration of highly depended-upon targets first, ensuring a logical and efficient migration process.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntuist migration list-targets -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Extracting project build settings into .xcconfig file using Bash\nDESCRIPTION: Uses Tuist migration tooling to export the existing Xcode project build settings into an external .xcconfig file for easier maintenance and leaner project manifests. The command creates the required directory and runs the extraction with project and output parameters. This process improves migration by separating build configuration from the project definition.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir -p xcconfigs/\ntuist migration settings-to-xcconfig -p MyApp.xcodeproj -x xcconfigs/MyApp-Project.xcconfig\n```\n\n----------------------------------------\n\nTITLE: Resolving Package Dependencies with xcodebuild (Shell)\nDESCRIPTION: This shell command resolves package dependencies using `xcodebuild`. The `-resolvePackageDependencies` flag triggers dependency resolution, and `-clonedSourcePackagesDirPath` specifies the directory where the dependencies are cached. This is crucial for enabling caching of resolved dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/registry/continuous-integration.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nxcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n```\n\n----------------------------------------\n\nTITLE: Integrating Tuist with Mise using GitHub Actions (YAML)\nDESCRIPTION: YAML configuration for a GitHub Actions workflow. It utilizes the `jdx/mise-action` community action to automatically set up Mise and install the Tuist version specified in the project's `.mise.toml` file. Subsequently, it runs the `tuist build` command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/automate/continuous-integration.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build Application\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: jdx/mise-action@v2\n      - run: tuist build\n```\n\n----------------------------------------\n\nTITLE: Configuring OTHER_LDFLAGS for Objective-C Libraries in Tuist Manifest (Swift)\nDESCRIPTION: Demonstrates how to add the `-ObjC` flag to the `OTHER_LDFLAGS` build setting within a Tuist `Target` definition. This is necessary when depending on Objective-C libraries, common among Google's offerings, to ensure proper linking.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nTarget.target(\n    ...\n    settings: .settings(\n        base: [\"OTHER_LDFLAGS\": \"$(inherited) -ObjC\"]\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tuist in Xcode Cloud with Mise (Bash)\nDESCRIPTION: A Bash script designed for Xcode Cloud's post-clone phase. It first installs Mise using curl, then uses Mise to install the Tuist version specified in the project's `.mise.toml` file. Finally, it executes `tuist generate` using the Mise-managed Tuist version.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/automate/continuous-integration.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/sh\ncurl https://mise.jdx.dev/install.sh | sh\nmise install # Installs the version from .mise.toml\n\n# Runs the version of Tuist indicated in the .mise.toml file\nmise exec -- tuist generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Synthesizers to Use a Tuist Plugin in Swift\nDESCRIPTION: Demonstrates how to configure a specific resource synthesizer (e.g., `.strings`) within a project's definition (`Project.swift`) to use templates provided by a named plugin. The `plugin` parameter specifies which plugin's templates to apply.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/plugins.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nlet project = Project(resourceSynthesizers: [.strings(plugin: \"MyPlugin\")])\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Package Dependencies with Tuist and SPM - Swift\nDESCRIPTION: Defines dependencies for the project in Package.swift, utilizing Swift Package Manager syntax with Tuist-specific conditionals for extra settings. Required dependencies include the swift-tools library and optional Tuist 'ProjectDescription' interface. Set dependencies by adding URLs and version constraints under the 'dependencies' array, e.g., Kingfisher. Outputs a configured Package.swift; tuples such as 'productTypes' or 'PackageSettings' can be customized for target-specific behavior.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/add-dependencies.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\")) // [!code ++]\n    ]\n)\n\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Tuist Registry and Keychain (YAML)\nDESCRIPTION: This YAML snippet demonstrates a GitHub Actions workflow that sets up a keychain, logs in to the Tuist Registry, and includes placeholder steps for building the project. It leverages the `security` command from the previous snippet to create and unlock a keychain. The `TUIST_CONFIG_TOKEN` environment variable is used for authentication, retrieved from GitHub secrets.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/registry/continuous-integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build\n\njobs:\n  build:\n    steps:\n      - # Your set up steps...\n      - name: Create keychain\n        run: |\n        TMP_DIRECTORY=$(mktemp -d)\n        KEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\n        KEYCHAIN_PASSWORD=$(uuidgen)\n        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH\n        security default-keychain -s $KEYCHAIN_PATH\n        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n      - name: Log in to the Tuist Registry\n        env:\n          TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_CONFIG_TOKEN }}\n        run: tuist registry login\n      - # Your build steps\n```\n\n----------------------------------------\n\nTITLE: Editing Tuist Project in Xcode via Bash\nDESCRIPTION: This bash command uses `tuist edit` to generate and open an Xcode project for a Tuist project, enabling developers to modify the project in Xcode. This allows for direct project editing, integrating Tuist's structure with Xcode's interface. The command assumes that Tuist is installed and configured in the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n```\n\n----------------------------------------\n\nTITLE: Building and Sharing App Previews with Tuist CLI - Bash\nDESCRIPTION: This snippet demonstrates how to use the Tuist CLI to build an app for both the simulator and device, and then share its preview via a public link. 'tuist build App' is used for the simulator, while the '-- -destination' flag targets device builds; 'tuist share App' uploads the build for preview. Prerequisites: Tuist installed, a valid project, and correct app signing for device builds. Outputs a shareable link that recipients can use to run the preview.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/share/previews.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist build App # Build the app for the simulator\ntuist build App -- -destination 'generic/platform=iOS' # Build the app for the device\ntuist share App\n```\n\n----------------------------------------\n\nTITLE: Building and sharing app previews via Tuist CLI and Xcodebuild\nDESCRIPTION: This snippet demonstrates how to build an app for simulator and device, and how to generate shareable previews using Tuist or Xcodebuild commands, facilitating quick app review and testing without full deployment processes.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/share/previews.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist build App # Build the app for the simulator\ntuist build App -- -destination 'generic/platform=iOS' # Build the app for the device\ntuist share App\n```\n\nLANGUAGE: bash\nCODE:\n```\nxcodebuild -scheme App -project App.xcodeproj -configuration Debug # Build the app for the simulator\nxcodebuild -scheme App -project App.xcodeproj -configuration Debug -destination 'generic/platform=iOS' # Build the app for the device\n\n```\n\n----------------------------------------\n\nTITLE: Warming Cache with Tuist - Bash\nDESCRIPTION: Runs the tuist cache command to build and store binaries for targets based on their hash, enabling faster subsequent builds by reusing cached outputs. Requires Tuist to be installed and a generated project in a compatible repository. Accepts no arguments; outputs cached binaries for the detected targets. Primarily intended for use in local and CI pipelines to seed or refresh the cache.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist cache\n```\n\n----------------------------------------\n\nTITLE: Using the Tuist Scaffold Command in Bash\nDESCRIPTION: This bash command demonstrates how to use the `tuist scaffold` command to generate project files based on a defined template. It takes the template name and optional parameters like `--name` and `--platform` as arguments. The command triggers the scaffolding process using the defined template, resulting in project structure generation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/templates.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntuist scaffold name_of_template --name Name --platform macos\n```\n\n----------------------------------------\n\nTITLE: Updating Tuist Project with Repository URL - Bash\nDESCRIPTION: This command updates a Tuist project by specifying the repository URL. This is typically used after installing the Tuist GitHub app to associate the project with the GitHub repository. The `--repository-url` parameter is used to set the URL. The command takes the project path and repository URL as input and updates the project configuration accordingly.  This assumes Tuist is installed and the user has proper access.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/server/introduction/integrations.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist project update tuist/tuist --repository-url https://github.com/tuist/tuist\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow: Caching Dependencies\nDESCRIPTION: This YAML configuration demonstrates how to restore, resolve, and save cached dependencies in a GitHub Actions workflow using actions/cache. This configuration uses actions/cache@v4 to restore and save the .build directory. It uses hashFiles to compute a key based on the Package.resolved file.  Ensure that path to Package.resolved is valid\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry/continuous-integration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Restore cache\n  id: cache-restore\n  uses: actions/cache/restore@v4\n  with:\n    path: .build\n    key: ${{ runner.os }}-${{ hashFiles('App.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}\n    restore-keys: .build\n- name: Resolve dependencies\n  if: steps.cache-restore.outputs.cache-hit != 'true'\n  run: xcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n- name: Save cache\n  id: cache-save\n  uses: actions/cache/save@v4\n  with:\n    path: .build\n    key: ${{ steps.cache-restore.outputs.cache-primary-key }}\n```\n\n----------------------------------------\n\nTITLE: Project generation commands with binary cache options in Tuist\nDESCRIPTION: Commands for generating projects with different caching behaviors, including options for specifying targets and disabling binary caching completely.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/cache.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate # Only dependencies\ntuist generate Search # Dependencies + Search dependencies\ntuist generate Search Settings # Dependencies, and Search and Settings dependencies\ntuist generate --no-binary-cache # No cache at all\n```\n\n----------------------------------------\n\nTITLE: Automating tuist share Output with JSON - bash\nDESCRIPTION: This command demonstrates how to run 'tuist share' with the '--json' flag, making the command output structured information about the generated preview in JSON format. This is useful for integration into CI/CD pipelines or custom automations. Input: none (used as a CLI flag). Output: JSON object detailing the preview link and QR code. Requires Tuist installed and configured.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/share/previews.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntuist share --json\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist with Mise in Codemagic Workflows (YAML)\nDESCRIPTION: YAML configuration snippet for a Codemagic workflow. It defines a step to install the Mise version manager, uses Mise to install the Tuist version specified in `.mise.toml`, and then executes `tuist build` via Mise.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/automate/continuous-integration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  lint:\n    name: Build\n    max_build_duration: 30\n    environment:\n      xcode: 15.0.1\n    scripts:\n      - name: Install Mise\n        script: |\n          curl https://mise.jdx.dev/install.sh | sh\n          mise install # Installs the version from .mise.toml\n      - name: Build\n        script: mise exec -- tuist build\n```\n\n----------------------------------------\n\nTITLE: Defining a static factory method for a project feature in Swift\nDESCRIPTION: This snippet shows how to extend the `Project` class with a static method `featureFramework`, which simplifies creating a feature-oriented project setup with predefined targets for the main framework and associated tests. It encapsulates project configuration details such as target names, bundle IDs, source and resource paths, and dependencies, fostering reuse and consistency.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/code-sharing.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nextension Project {\n  public static func featureFramework(name: String, dependencies: [TargetDependency] = []) -> Project {\n    return Project(\n        name: name,\n        targets: [\n            .target(\n                name: name,\n                destinations: .iOS,\n                product: .framework,\n                bundleId: \"io.tuist.\\(name)\",\n                infoPlist: \"\\(name).plist\",\n                sources: [\"Sources/\\(name)/**\"],\n                resources: [\"Resources/\\(name)/**\"],\n                dependencies: dependencies\n            ),\n            .target(\n                name: \"\\(name)Tests\",\n                destinations: .iOS,\n                product: .unitTests,\n                bundleId: \"io.tuist.\\(name)Tests\",\n                infoPlist: \"\\(name)Tests.plist\",\n                sources: [\"Sources/\\(name)Tests/**\"],\n                resources: [\"Resources/\\(name)Tests/**\"],\n                dependencies: [.target(name: name)]\n            )\n        ]\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Target Product Type Dynamically in Tuist Manifest - Swift\nDESCRIPTION: This Swift function, intended for use within Tuist manifest files or project helpers, reads the TUIST_PRODUCT_TYPE environment variable and returns the appropriate Product enum value for the target. If TUIST_PRODUCT_TYPE is not set, it defaults to .framework; otherwise, it chooses .staticLibrary when the string is 'static-library'. This approach enables dynamic switching between static and dynamic linking at generation-time without hard-coding build configurations. Requires Tuist's Environment API and assumes manifest context.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/tma-architecture.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// You can place this in your manifest files or helpers\n// and use the returned value when instantiating targets.\nfunc productType() -> Product {\n    if case let .string(productType) = Environment.productType {\n        return productType == \"static-library\" ? .staticLibrary : .framework\n    } else {\n        return .framework\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Tuist Template with the Scaffold Command\nDESCRIPTION: This bash snippet demonstrates how to use a defined template with the 'tuist scaffold' command. It shows passing required and optional arguments to the template for code generation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/templates.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist scaffold name_of_template --name Name --platform macos\n```\n\n----------------------------------------\n\nTITLE: Project Generation with Binary Cache\nDESCRIPTION: These commands demonstrate how Tuist's project generation works with and without binary caching.  `tuist generate` includes dependencies, while `tuist generate --no-binary-cache` disables caching.  The target-specific commands also replace any dependent targets with their cached binaries, if available.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/cache.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate # Only dependencies\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Search # Dependencies + Search dependencies\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Search Settings # Dependencies, and Search and Settings dependencies\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate --no-binary-cache # No cache at all\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Defaults in Tuist.swift for Project Customization\nDESCRIPTION: This snippet sets custom configuration options for Tuist by defining a `Tuist` object and enabling explicit dependency enforcement. It provides a way to override default behaviors and specify project-wide settings in the root of the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/manifests.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// Tuist.swift\nimport ProjectDescription\n\nlet tuist = Tuist(\n    project: .tuist(generationOptions: .options(enforceExplicitDependencies: true))\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Root Settings with Tuist.swift in Swift\nDESCRIPTION: Defines Tuist root-level configuration via a Tuist.swift manifest in Swift format. This snippet imports ProjectDescription and declares a 'tuist' constant with configuration details such as generation options. The example sets enforceExplicitDependencies to true, enabling stricter dependency validation. This manifest guides Tuist in interpreting project root settings. The required input is the ProjectDescription module and relevant configuration parameters. Output affects overall project generation behavior and validation rules.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/manifests.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(\n    project: .tuist(generationOptions: .options(enforceExplicitDependencies: true))\n)\n```\n\n----------------------------------------\n\nTITLE: Showing Typical Tuist Project Directory Structure (Bash)\nDESCRIPTION: Displays the standard directory layout for a Tuist project. This structure includes the root configuration file (Tuist.swift), the Tuist/ directory for helpers and dependencies, the Projects/ directory for individual app/feature projects, and the Workspace.swift file. It helps visualize how Tuist projects are organized on disk.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/directory-structure.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTuist.swift\nTuist/\n  Package.swift\n  ProjectDescriptionHelpers/\nProjects/\n  App/\n    Project.swift\n  Feature/\n    Project.swift\nWorkspace.swift\n```\n\n----------------------------------------\n\nTITLE: Setting Product Type for FBLPromises to Dynamic Framework in Package.swift (Swift)\nDESCRIPTION: This snippet shows the explicit configuration of the 'FBLPromises' library product type as a dynamic framework in a Swift Package manifest. The code demonstrates conditional configuration using Tuist-specific imports and the PackageSettings data structure to override the product type mapping. Key dependencies include ProjectDescription and ProjectDescriptionHelpers, and the approach must be placed inside a Tuist-compatible Package.swift file. The input is a dictionary mapping product names to types; output is correct build artifact generation, preventing runtime crashes related to incorrect linkage.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.10\n\nimport PackageDescription\n\n#if TUIST\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet packageSettings = PackageSettings(\n    productTypes: [\n        \"FPLPromises\": .framework,\n    ]\n)\n#endif\n\nlet package = Package(\n...\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Steps to Cache and Restore Swift Package Dependencies\nDESCRIPTION: YAML steps for GitHub Actions to restore, resolve, and save cache of Swift package dependencies using the `.build` directory. It uses the `Package.resolved` file hash to generate cache keys, speeding up dependency resolution by reusing cached artifacts when possible. The workflow checks if the cache hit is missing before running `xcodebuild` to resolve dependencies, then saves the updated cache to be reused in future runs.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry/continuous-integration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Restore cache\n  id: cache-restore\n  uses: actions/cache/restore@v4\n  with:\n    path: .build\n    key: ${{ runner.os }}-${{ hashFiles('App.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}\n    restore-keys: .build\n- name: Resolve dependencies\n  if: steps.cache-restore.outputs.cache-hit != 'true'\n  run: xcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n- name: Save cache\n  id: cache-save\n  uses: actions/cache/save@v4\n  with:\n    path: .build\n    key: ${{ steps.cache-restore.outputs.cache-primary-key }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Template using Swift\nDESCRIPTION: Defines a custom project template in Swift for use with Tuist, including required and optional attributes, and template items such as strings, files, and directories. This template can be customized at scaffold time.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/templates.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet nameAttribute: Template.Attribute = .required(\"name\")\n\nlet template = Template(\n    description: \"Custom template\",\n    attributes: [\n        nameAttribute,\n        .optional(\"platform\", default: \"ios\"),\n    ],\n    items: [\n        .string(\n            path: \"Project.swift\",\n            contents: \"My template contents of name \\(nameAttribute)\"\n        ),\n        .file(\n            path: \"generated/Up.swift\",\n            templatePath: \"generate.stencil\"\n        ),\n        .directory(\n            path: \"destinationFolder\",\n            sourcePath: \"sourceFolder\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Configuration with Tuist - Bash\nDESCRIPTION: This bash script shows how to build a specific scheme (`MyScheme`) with a specific configuration (`Debug`). It utilizes the `--` terminator to forward arguments directly to the underlying build tool. The command requires Tuist to be installed and the project to be set up. The output will reflect the build results for the specified configuration as managed by Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist build MyScheme -- -configuration Debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Project Remote Handle in Swift\nDESCRIPTION: This Swift code snippet shows how to configure the link between your local project and a remote Tuist server project. It is placed in the `Tuist.swift` configuration file at the project root and uses the `Tuist` object to specify the full handle (`account-handle/project-handle`) of the remote project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/server/introduction/accounts-and-projects.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet tuist = Tuist(fullHandle: \"{account-handle}/{project-handle}\") // e.g. tuist/tuist\n```\n\n----------------------------------------\n\nTITLE: Integrating Tuist with Codemagic using Homebrew (YAML)\nDESCRIPTION: Provides a Codemagic workflow configuration (YAML) that demonstrates installing a specific version of Tuist (replace `x.y.z`) via Homebrew within the CI environment. Following the installation, it runs the `tuist build` command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/automate/continuous-integration.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nworkflows:\n  lint:\n    name: Build\n    max_build_duration: 30\n    environment:\n      xcode: 15.0.1\n    scripts:\n      - name: Install Tuist\n        script: |\n          brew install --formula tuist@x.y.z\n      - name: Build\n        script: tuist build\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Library with Bazel Rules (Starlark)\nDESCRIPTION: This snippet demonstrates how to define a Swift library within a Bazel BUILD file using Starlark syntax. It specifies the library's name, source files (via a glob pattern), and module name for the built artifact. The dependencies include Bazel's rules for Swift. Inputs include the library's Swift source files; the output is a built library module. Requires Bazel and rules_swift configured in the workspace.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_0\n\nLANGUAGE: Starlark\nCODE:\n```\nswift_library(\n    name = \"MyLibrary.library\",\n    srcs = glob([\"**/*.swift\"]),\n    module_name = \"MyLibrary\"\n)\n```\n\n----------------------------------------\n\nTITLE: Script for Carthage Integration with Tuist\nDESCRIPTION: A bash script that runs Carthage update to resolve dependencies before generating the Tuist project. This workflow allows using Carthage with Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\ncarthage update\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: CI Workflow Snippet for Uploading Tuist Logs using GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to automate the process of exporting Tuist logs during a CI pipeline run using GitHub Actions. It sets an environment variable, performs project generation, and uploads the logs as artifacts for review. Dependencies include GitHub Actions' official actions for checkout and artifact upload, and the script assumes Tuist is executed within the workflow environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/cli/logging.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Node CI\n\non: [push]\n\nenv:\n  XDG_STATE_HOME: /tmp\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      # ... other steps\n      - run: tuist generate\n      # ... do something with the project\n      - name: Export Tuist logs\n        uses: actions/upload-artifact@v4\n        with:\n          name: tuist-logs\n          path: /tmp/tuist/logs/*.log\n```\n\n----------------------------------------\n\nTITLE: Creating a Tuist Organization via CLI\nDESCRIPTION: This Bash command uses the Tuist CLI (`tuist organization create`) to create a new organization account on the Tuist server. Replace `{account-handle}` with the desired unique handle for the new organization. This command requires the Tuist CLI to be installed and authenticated.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/server/introduction/accounts-and-projects.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization create {account-handle}\n```\n\n----------------------------------------\n\nTITLE: Managing Swift Package Dependencies and Generating Project with Tuist (Bash)\nDESCRIPTION: These bash commands demonstrate the standard workflow for managing Swift Package Manager dependencies and generating an Xcode project using Tuist. `tuist install` fetches the dependencies defined in `Tuist/Package.swift`, and `tuist generate` creates the Xcode project structure.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntuist install # Fetch dependencies defined in Tuist/Package.swift\ntuist generate # Generate an Xcode project\n```\n\n----------------------------------------\n\nTITLE: Running Latest or Specific App Previews by Branch, Tag, or Commit - bash\nDESCRIPTION: This set of commands utilizes Tuist's 'run' command to execute the latest preview build of an app associated with a project's default branch, a specified feature branch, or a specific commit SHA. The syntax allows selection using the format 'App@latest', 'App@branch-name', or 'App@commit-hash'. Prerequisites: Tuist installed, preview builds must be previously shared, and the correct naming convention for apps. Inputs: app name and branch/tag/commit specifier. Outputs: launches the designated preview on the local environment. Limitations: only available for existing previews.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/share/previews.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist run App@latest # Runs latest App preview associated with the project's default branch\ntuist run App@my-feature-branch # Runs latest App preview associated with a given branch\ntuist run App@00dde7f56b1b8795a26b8085a781fb3715e834be # Runs latest App preview associated with a given git commit sha\n```\n\n----------------------------------------\n\nTITLE: Defining Tuist Configuration in Tuist.swift\nDESCRIPTION: Defines the minimal `Tuist` configuration file using the `ProjectDescription` framework. This file signals the root of the Tuist project directory to the CLI, enabling commands like `tuist edit` to function correctly.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/new-project.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Exporting Tuist Logs in GitHub Actions\nDESCRIPTION: Configuration for GitHub Actions workflow that exports Tuist logs as artifacts. It sets the XDG_STATE_HOME environment variable to a temporary directory and uploads log files after running Tuist commands.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/cli/logging.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Node CI\n\non: [push]\n\nenv:\n  XDG_STATE_HOME: /tmp\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      # ... other steps\n      - run: tuist generate\n      # ... do something with the project\n      - name: Export Tuist logs\n        uses: actions/upload-artifact@v4\n        with:\n          name: tuist-logs\n          path: /tmp/tuist/logs/*.log\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Account via CLI | Tuist | Bash\nDESCRIPTION: This snippet shows the command-line interface command used to create a new organization account on the Tuist server. It requires providing a unique handle for the new organization. This operation is typically done using the Tuist CLI.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/server/introduction/accounts-and-projects.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ntuist organization create {account-handle}\n```\n\n----------------------------------------\n\nTITLE: Building All Schemes Disabling Binary Cache Using Tuist CLI - Bash\nDESCRIPTION: This snippet shows how to build all available schemes in the project while disabling the use of the binary cache by passing the `--no-binary-cache` flag. Disabling binary caching forces a full rebuild, which can be useful for troubleshooting or ensuring a clean build. It requires Tuist to be installed and configured in the environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist build --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Updating Tuist Project with GitHub Repository URL (sh)\nDESCRIPTION: This shell command updates a specific Tuist project ('tuist/tuist' in this example) to associate it with the provided GitHub repository URL. This step is required after installing the Tuist GitHub app to enable integration features like pull request insights.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/server/introduction/integrations.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntuist project update tuist/tuist --repository-url https://github.com/tuist/tuist\n```\n\n----------------------------------------\n\nTITLE: Updating Tuist Project Repository URL Using Tuist CLI - Shell\nDESCRIPTION: This shell command is used to update the repository URL for a Tuist project via the Tuist CLI. It requires the Tuist CLI to be installed in your environment. The command expects the project identifier and the new repository URL as parameters. The primary output is the successful update of the project's repository information, which enables integration with platforms such as GitHub. There are no significant limitations, but valid project names and accessible repository URLs are prerequisites.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/server/introduction/integrations.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntuist project update tuist/tuist --repository-url https://github.com/tuist/tuist\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Tuist Project Authentication Token (Bash)\nDESCRIPTION: A Bash command used to generate a project-scoped authentication token for accessing Tuist Cloud features (like remote caching) from CI. Replace `my-handle/MyApp` with your actual project handle. The generated token should be securely stored as the `TUIST_CONFIG_TOKEN` environment variable in your CI settings.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/automate/continuous-integration.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ntuist project tokens create my-handle/MyApp\n```\n\n----------------------------------------\n\nTITLE: Building and Sharing App Previews with Tuist CLI - bash\nDESCRIPTION: These shell commands demonstrate how to use Tuist to build an application for both the simulator and physical device, as well as share a built app preview link. 'tuist build App' compiles the app for the simulator, while specifying a device destination builds for a real device. 'tuist share App' uploads the build and generates a sharable preview link. Prerequisites: Tuist must be installed, the user must have a Tuist account, and the project should be configured. Input: project and app name. Output: built app and a preview link. Limitations: device builds require manual signing.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/share/previews.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist build App # Build the app for the simulator\ntuist build App -- -destination 'generic/platform=iOS' # Build the app for the device\ntuist share App\n```\n\n----------------------------------------\n\nTITLE: Logging into GitHub Container Registry and Pulling Docker Image Using Bash\nDESCRIPTION: This Bash snippet demonstrates how to authenticate with the GitHub Container Registry using a personal access token and how to pull the latest Tuist Docker image. The command expects a token stored in the environment variable TOKEN, which is passed securely to the docker login command via standard input to prevent exposure. Subsequently, it pulls the latest Tuist image from ghcr.io. This snippet requires Docker to be installed and configured on the host machine. The inputs are the personal access token and Docker as a dependency; the output is a locally available Docker image ready for deployment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/server/on-premise/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $TOKEN | docker login ghcr.io -u USERNAME --password-stdin\ndocker pull ghcr.io/tuist/tuist:latest\n```\n\n----------------------------------------\n\nTITLE: Defining iOS Workspace Structure in Tuist YAML\nDESCRIPTION: This YAML snippet illustrates how to declare an iOS workspace in Tuist, organizing an application (MainApp), its unit tests, a dynamic framework (Framework1), a static framework (StaticFramework), and a bundle of resources (StaticFrameworkResources). The structure implicitly establishes project hierarchy, grouping modules under their respective workspace containers. Prerequisites include Tuist installed and configured for the project. This arrangement supports modular iOS architectures by defining clear separations between app logic, shared frameworks, and bundles.\nSOURCE: https://github.com/tuist/tuist/blob/main/fixtures/ios_app_with_framework_and_resources/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nWorkspace:\n  - App:\n    - MainApp (iOS app)\n    - MainAppTests (iOS unit tests)\n  - Framework1:\n    - Framework1 (dynamic iOS framework)\n  - StaticFramework\n    - StaticFramework (static iOS framework)\n    - StaticFrameworkResources (iOS bundle)\n```\n\n----------------------------------------\n\nTITLE: Define Unit Test Target in Tuist (Swift)\nDESCRIPTION: This snippet shows how to define a unit test target in a Tuist `Project.swift` manifest using Swift. It specifies the target name, supported destinations, product type, bundle identifier, source files, and explicitly lists dependencies on other targets.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(\n            name: \"MyLibraryTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyLibraryTests\",\n            sources: \"Tests/MyLibraryTests/**\",\n            dependencies: [\n                .target(name: \"MyLibrary\"),\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using @_implementationOnly to Prevent Transitive Static Dependency Leaks in Swift\nDESCRIPTION: This Swift code demonstrates the use of the '@_implementationOnly' attribute when importing a static dependency within a dynamic framework or library. This prevents symbols from static modules from leaking into the consuming dynamic module's .swiftmodule interface, thereby avoiding potential compilation failures related to unintended transitive dependencies. The snippet is applied at the import statement; input is the module name, and output is a stricter encapsulation of implementation details. Limitations include that '@_implementationOnly' is an underscored attribute and not part of Swift's stable API.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\n@_implementationOnly import StaticModule\n```\n\n----------------------------------------\n\nTITLE: Defining package dependencies in Tuist Package.swift manifest using Swift\nDESCRIPTION: Specifies external package dependencies for the project using Swift Package Manager syntax inside the Tuist/Package.swift manifest. This snippet shows how to add repositories with version requirements and optionally customize product types for those packages. This setup enables Tuist to manage and integrate external code libraries consistently across the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\"))\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Project Generation and Binary Cache Control - Bash\nDESCRIPTION: Provides multiple tuist generate commands to produce Xcode project files while optionally reusing cached binaries for dependencies. The --no-binary-cache flag forces Tuist to forego binaries and use sources for all targets, which is required for release builds. Accepts positional arguments specifying which targets to focus on and outputs generated Xcode projects with dependencies configured based on cache availability. Useful for both development and CI workflows and requires Tuist and a previously initialized project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/cache.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate # Only dependencies\ntuist generate Search # Dependencies + Search dependencies\ntuist generate Search Settings # Dependencies, and Search and Settings dependencies\ntuist generate --no-binary-cache # No cache at all\n```\n\n----------------------------------------\n\nTITLE: Defining Tuist Workspace (Swift)\nDESCRIPTION: This Swift code defines a Tuist workspace named \"Workspace.\" It specifies which projects to include, additional files, and generation options.  The `projects` array lists the projects to be included, using glob patterns for specifying multiple projects. The `additionalFiles` array specifies files and directories that should be included in the workspace but are not built as part of any project.  `generationOptions` is set to disable automatic Xcode schemes and enable Markdown rendering of the README.\nSOURCE: https://github.com/tuist/tuist/blob/main/fixtures/ios_app_with_custom_workspace/Documentation/README.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet workspace = Workspace(\n    name: \"Workspace\",\n    projects: [\n        \"App\",\n        \"Frameworks/**\",\n    ],\n    additionalFiles: [\n        \"Documentation/**\",\n        .folderReference(path: \"Website\"),\n    ],\n    generationOptions: .options(enableAutomaticXcodeSchemes: false,\n                                renderMarkdownReadme: true)\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Package Dependencies with Swift Package Manager in Package.swift\nDESCRIPTION: Extends the Package.swift manifest snippet by showing how to add an actual dependency (Kingfisher with a version constraint) into the dependencies array. This is representative of adding third-party libraries during migration so that the Tuist project is aware of Swift package dependencies. The snippet notes that product types can be overridden in PackageSettings optionally.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\"))\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Installed External Dependency in Target (Swift)\nDESCRIPTION: Demonstrates how to add a dependency on an external package (like \"Alamofire\") to a local target defined in `Project.swift`. The external dependency must be declared in `Tuist/Package.swift` and installed using `tuist install` before generating the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    organizationName: \"tuist.io\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: [.iPhone],\n            product: .app,\n            bundleId: \"io.tuist.app\",\n            deploymentTargets: .iOS(\"13.0\"),\n            infoPlist: .default,\n            sources: [\"Targets/App/Sources/**\"],\n            dependencies: [\n                .external(name: \"Alamofire\") // [!code ++]\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tuist in Xcode Cloud with Homebrew (Bash)\nDESCRIPTION: This Bash script is intended for Xcode Cloud's post-clone step. It installs a specific version of Tuist (replace `x.y.z` with the desired version) using Homebrew and subsequently runs the `tuist generate` command. This script assumes Homebrew is available in the Xcode Cloud environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/automate/continuous-integration.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/sh\nbrew install --formula tuist@x.y.z\n\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Updating Tuist Generate Command to Remove --skip-cache Flag (Bash)\nDESCRIPTION: This snippet demonstrates the change in usage for the `tuist generate` command where the deprecated `--skip-cache` flag has been removed. The snippet shows the before and after commands to generate a target named Foo, advising users to now control binary cache skipping via command arguments instead of the flag. This update affects shell scripts and CI automation configurations relying on Tuist commands, ensuring compatibility with Tuist 4. Requires a shell supporting typical command-line operations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/references/migrations/from-v3-to-v4.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate --skip-cache Foo\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Foo\n```\n\n----------------------------------------\n\nTITLE: Defining iOS unit tests with Bazel and Tuist in Swift\nDESCRIPTION: This pair of snippets compares Bazel's ios_unit_test rule and Tuist's unit test target configuration. The Bazel rule sets the test target's name, bundle ID, minimum OS version, test host dependency, and other dependencies. Tuist's configuration uses Swift syntax to define a unit test target with destinations set to iOS, a bundle identifier, source file location, and dependencies on another target. Both ensure the test target is linked correctly to the main target.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nios_unit_test(\n    name = \"MyLibraryTests\",\n    bundle_id = \"io.tuist.MyLibraryTests\",\n    minimum_os_version = \"16.0\",\n    test_host = \"//MyApp:MyLibrary\",\n    deps = [\":MyLibraryTests.library\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Tuist Project in Swift\nDESCRIPTION: Defines a Tuist Project manifest using Swift syntax to declare an Xcode project with a given name and targets. The 'project' constant is expected at the root of the Project.swift file. Tuist uses this manifest to generate an Xcode project in the same directory. Dependencies include the ProjectDescription framework. Inputs are project properties such as name and an array of targets. Outputs include the generated Xcode project folder named as specified. Only one root constant 'project' should be declared to avoid conflicts. Reusable code can be implemented via Swift functions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/manifests.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Project.swift\nlet project = Project(\n    name: \"App\",\n    targets: [\n        // ....\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Product Type Based on Environment Variable in Tuist\nDESCRIPTION: A Swift function that determines the product type (static or dynamic framework) based on an environment variable, enabling runtime configuration of linking strategy.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/dependencies.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Use the value returned by this function to set the product type of your targets.\nfunc productType() -> Product {\n    if case let .string(linking) = Environment.linking {\n        return linking == \"static\" ? .staticFramework : .framework\n    } else {\n        return .framework\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Connection in Tuist.swift\nDESCRIPTION: Code to add to your Tuist.swift file to connect your local project to the server using the project's full handle.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/gather-insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(fullHandle: \"my-handle/MyApp\")\n```\n\n----------------------------------------\n\nTITLE: Install Tuist using Homebrew (Bash)\nDESCRIPTION: Installs the Tuist command-line interface using the Homebrew package manager. It first taps the official Tuist Homebrew repository and then installs the latest or a specified version of the Tuist formula. Requires Homebrew to be installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/install-tuist.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap tuist/tuist\nbrew install --formula tuist\nbrew install --formula tuist@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Target Dependencies in Tuist Project\nDESCRIPTION: This Swift code snippet updates the Tuist project manifest to specify dependencies for the application's target. It declares the external dependency 'Kingfisher', which must be resolved via `tuist install`. This configuration ensures that the application target correctly links to the external library and integrates it during build.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/add-dependencies.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    targets: [\n        .target(\n            name: \"MyApp\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.MyApp\",\n            infoPlist: .extendingDefault(\n                with: [\n                    \"UILaunchStoryboardName\": \"LaunchScreen.storyboard\",\n                ]\n            ),\n            sources: [\"MyApp/Sources/**\"],\n            resources: [\"MyApp/Resources/**\"],\n            dependencies: [\n                .external(name: \"Kingfisher\") // [!code ++]\n            ]\n        ),\n        .target(\n            name: \"MyAppTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyAppTests\",\n            infoPlist: .default,\n            sources: [\"MyApp/Tests/**\"],\n            resources: [],\n            dependencies: [.target(name: \"MyApp\")]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Product Type Selection Based on Environment Variables in Swift\nDESCRIPTION: A function that determines the product type (static or dynamic framework) based on an environment variable. This can be used with Tuist's dynamic configurations to change linking types without modifying manifests.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Use the value returned by this function to set the product type of your targets.\nfunc productType() -> Product {\n    if case let .string(linking) = Environment.linking {\n        return linking == \"static\" ? .staticFramework : .framework\n    } else {\n        return .framework\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Generating Projects with Tuist CLI (bash)\nDESCRIPTION: This shell snippet demonstrates the use of Tuist's command-line interface to install dependencies and generate Xcode projects. 'tuist install' resolves Swift Package Manager dependencies declared in Tuist/Package.swift, while 'tuist generate' creates or updates the Xcode project based on configuration files. Requires Tuist installed globally or in the environment, with a valid Tuist configuration directory. Expected outputs are a .xcodeproj file and resolved dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntuist install # Fetch dependencies defined in Tuist/Package.swift\ntuist generate # Generate an Xcode project\n```\n\n----------------------------------------\n\nTITLE: CI Workflow for Tuist with Homebrew in Codemagic (yaml)\nDESCRIPTION: A YAML configuration for Codemagic that specifies installing Tuist via Homebrew in one script step, and then building the project with Tuist in the next. Dependencies: Homebrew available on CI image, access to internet, and Tuist formula reachable for the specified version. Parameters: 'xcode' version, script steps. Outputs: build results as per Tuist's configuration. Limitation: Replace 'x.y.z' with desired Tuist version; appropriate provisioning and access required.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/automate/continuous-integration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  lint:\n    name: Build\n    max_build_duration: 30\n    environment:\n      xcode: 15.0.1\n    scripts:\n      - name: Install Tuist\n        script: |\n          brew install --formula tuist@x.y.z\n      - name: Build\n        script: tuist build\n```\n\n----------------------------------------\n\nTITLE: Logging in to Tuist Registry (Bash)\nDESCRIPTION: Logs in a user to the Tuist Registry using existing configuration files generated by `tuist registry setup`. This command is used by team members after the initial setup or for re-authentication. Requires a Tuist account and project, and the presence of generated config files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntuist registry login\n```\n\n----------------------------------------\n\nTITLE: Building and Sharing Previews with Xcode Tools - Bash\nDESCRIPTION: This sequence of Bash commands demonstrates building an iOS app using Xcode command line tools and sharing the build with Tuist. Requirements include the presence of Xcode, the target app scheme, and configuration details. The commands can build for a simulator or a device, share based on configuration and platform, and also share existing .ipa files. Inputs include scheme, project path, and output files; outputs are shareable preview links.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/share/previews.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcodebuild -scheme App -project App.xcodeproj -configuration Debug # Build the app for the simulator\nxcodebuild -scheme App -project App.xcodeproj -configuration Debug -destination 'generic/platform=iOS' # Build the app for the device\ntuist share App --configuration Debug --platforms iOS\ntuist share App.ipa # Share an existing .ipa file\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist using Homebrew\nDESCRIPTION: Instructions for installing Tuist using Homebrew package manager and initializing a new Tuist project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap tuist/tuist\nbrew install --formula tuist\n\ntuist init\n```\n\n----------------------------------------\n\nTITLE: Integrating SPM Build Tool Plugin in Tuist Project (Swift)\nDESCRIPTION: Illustrates how to integrate a Swift Package Manager build tool plugin defined in a `Package.swift` into a Tuist project manifest (`Project.swift`). It requires adding the plugin package URL to the project's `packages` array and adding the plugin product as a `.plugin` dependency to the relevant target.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"Framework\",\n    packages: [\n        .remote(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", requirement: .upToNextMajor(from: \"0.56.1\")),\n    ],\n    targets: [\n        .target(\n            name: \"Framework\",\n            dependencies: [\n                .package(product: \"SwiftLintBuildToolPlugin\", type: .plugin),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Switching Linking Type with Environment Variable in Bash for Tuist\nDESCRIPTION: A Bash shell snippet demonstrating how to set the 'TUIST_PRODUCT_TYPE' environment variable before running the 'tuist generate' command. This environment variable controls whether generated targets link as static libraries or dynamic frameworks, enabling customizable build configurations at generation time without manual manifest changes. It facilitates faster development builds or optimized release builds through automation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/tma-architecture.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# You'll have to read the value of the variable from the manifest {#youll-have-to-read-the-value-of-the-variable-from-the-manifest}\n# and use it to change the linking type {#and-use-it-to-change-the-linking-type}\nTUIST_PRODUCT_TYPE=static-library tuist generate\n```\n\n----------------------------------------\n\nTITLE: Exporting Tuist Logs in GitHub Actions CI Workflow\nDESCRIPTION: This YAML snippet shows a configuration for a GitHub Actions workflow step that exports Tuist log files as a build artifact. It sets the `XDG_STATE_HOME` environment variable to `/tmp` to ensure logs are stored in a known, disposable location within the CI runner, and then uses the `actions/upload-artifact` action to upload all `.log` files from `/tmp/tuist/logs/`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/cli/logging.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Node CI\n\non: [push]\n\nenv:\n  XDG_STATE_HOME: /tmp\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      # ... other steps\n      - run: tuist generate\n      # ... do something with the project\n      - name: Export Tuist logs\n        uses: actions/upload-artifact@v4\n        with:\n          name: tuist-logs\n          path: /tmp/tuist/logs/*.log\n```\n\n----------------------------------------\n\nTITLE: Fly.io Configuration File\nDESCRIPTION: This snippet provides a sample `fly.toml` configuration file for deploying the Tuist application on Fly.io. It includes service definitions, port configurations, health checks, and static file serving.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/server/on-premise/install.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\napp = \"tuist\"\nprimary_region = \"fra\"\nkill_signal = \"SIGINT\"\nkill_timeout = \"5s\"\n\n[experimental]\n  auto_rollback = true\n\n[env]\n  # Your environment configuration goes here\n  # Or exposed through Fly secrets\n\n[processes]\n  app = \"/usr/local/bin/hivemind /app/Procfile\"\n\n[[services]]\n  protocol = \"tcp\"\n  internal_port = 8080\n  auto_stop_machines = false\n  auto_start_machines = false\n  processes = [\"app\"]\n  http_options = { h2_backend = true }\n\n  [[services.ports]]\n    port = 80\n    handlers = [\"http\"]\n    force_https = true\n\n  [[services.ports]]\n    port = 443\n    handlers = [\"tls\", \"http\"]\n  [services.concurrency]\n    type = \"connections\"\n    hard_limit = 100\n    soft_limit = 80\n\n  [[services.http_checks]]\n    interval = 10000\n    grace_period = \"10s\"\n    method = \"get\"\n    path = \"/ready\"\n    protocol = \"http\"\n    timeout = 2000\n    tls_skip_verify = false\n    [services.http_checks.headers]\n\n[[statics]]\n  guest_path = \"/app/public\"\n  url_prefix = \"/\"\n```\n\n----------------------------------------\n\nTITLE: Uninstall tuistenv using curl and bash\nDESCRIPTION: This command uninstalls the `tuistenv` tool, which was used for version management in Tuist 3.  It is necessary to remove it before installing Tuist 4. It uses curl to download and pipe the uninstallation script to bash for execution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/references/migrations/from-v3-to-v4.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Ls https://uninstall.tuist.io | bash\n```\n\n----------------------------------------\n\nTITLE: Uninstalling tuistenv Using Bash\nDESCRIPTION: This snippet provides the bash command to uninstall the deprecated tuistenv tool, which was previously used for managing Tuist versions before version 4. This uninstallation is necessary as tuistenv support has been dropped in favor of using Mise or other tools for version management. Running this command removes tuistenv from the system, allowing the user to reinstall Tuist by preferred newer methods. It requires a bash shell environment and network access to fetch the uninstall script.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/references/migrations/from-v3-to-v4.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Ls https://uninstall.tuist.io | bash\n```\n\n----------------------------------------\n\nTITLE: Getting String Environment Variables in Swift\nDESCRIPTION: This Swift code demonstrates how to retrieve a string value from an environment variable using a helper method. This method requires a default value to be passed, ensuring consistent results.  It shows how to use the `.getString(default: )` method to access a string value, providing a default value in case the environment variable isn't set.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dynamic-configuration.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nEnvironment.appName.getString(default: \"TuistServer\")\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace Structure for iOS App with XCFrameworks in YAML\nDESCRIPTION: This snippet declares the hierarchical workspace layout of the iOS project using a YAML-like notation. It lists the app target ('MainApp'), unit testing target ('MainAppTests'), dynamic framework ('MyFramework'), static framework ('MyStaticFramework'), and a static library ('MyStaticLibrary'). Each target is identified by its name and its purpose/type within the workspace. This structure is essential to understanding the project's modular organization and dependency relationships.\nSOURCE: https://github.com/tuist/tuist/blob/main/fixtures/ios_app_with_xcframeworks/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nWorkspace:\n  - App:\n    - MainApp (iOS app)\n    - MainAppTests (iOS unit tests)\n  - MyFramework:\n    - MyFramework (dynamic iOS framework)\n  - MyStaticFramework:\n    - MyStaticFramework (static iOS framework)\n  - MyStaticLibirary:\n    - MyStaticLibrary (static iOS libraries)\n```\n\n----------------------------------------\n\nTITLE: Defining an iOS App Project in Swift using Tuist Project.swift\nDESCRIPTION: Defines an iOS application project structure using the `ProjectDescription` framework for Tuist. It includes targets for the main app and unit tests, specifying destinations, product types, bundle IDs, info plist configurations, source/resource paths, and target dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/new-project.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    targets: [\n        .target(\n            name: \"MyApp\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.MyApp\",\n            infoPlist: .extendingDefault(\n                with: [\n                    \"UILaunchScreen\": [\n                        \"UIColorName\": \"\",\n                        \"UIImageName\": \"\",\n                    ],\n                ]\n            ),\n            sources: [\"MyApp/Sources/**\"],\n            resources: [\"MyApp/Resources/**\"],\n            dependencies: []\n        ),\n        .target(\n            name: \"MyAppTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyAppTests\",\n            infoPlist: .default,\n            sources: [\"MyApp/Tests/**\"],\n            resources: [],\n            dependencies: [.target(name: \"MyApp\")]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Setting Up macOS Keychain and Logging into Tuist Registry\nDESCRIPTION: This YAML snippet demonstrates an example CI workflow that creates a macOS keychain, logs into the Tuist registry with a secret token, and prepares the environment for building. It enforces environment variable setup and sequencing of steps to ensure secure and consistent CI runs.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/registry/continuous-integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build\n\njobs:\n  build:\n    steps:\n      - # Your set up steps...\n      - name: Create keychain\n        run: |\n        TMP_DIRECTORY=$(mktemp -d)\n        KEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\n        KEYCHAIN_PASSWORD=$(uuidgen)\n        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH\n        security default-keychain -s $KEYCHAIN_PATH\n        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n      - name: Log in to the Tuist Registry\n        env:\n          TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_CONFIG_TOKEN }}\n        run: tuist registry login\n      - # Your build steps\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Library Target in Bazel vs. Tuist\nDESCRIPTION: Compares the syntax for defining a Swift library target named 'MyLibrary'. The Bazel example uses the `swift_library` rule in a `BUILD` file (represented as text), while the Tuist example uses Swift within a `Project.swift` file to define the target.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_0\n\nLANGUAGE: Starlark\nCODE:\n```\nswift_library(\n    name = \"MyLibrary.library\",\n    srcs = glob([\"**/*.swift\"]),\n    module_name = \"MyLibrary\"\n)\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(name: \"MyLibrary\", product: .staticLibrary, sources: [\"**/*.swift\"])\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating individual targets with configuration extraction\nDESCRIPTION: Guides the process of extracting target-specific build settings into `.xcconfig` files and defining them in `Project.swift`. Facilitates modular migration by focusing on one target at a time, improving manageability and reviewability.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntuist migration settings-to-xcconfig -p MyApp.xcodeproj -t TargetX -x xcconfigs/TargetX.xcconfig\n```\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/Project.xcconfig\"),\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/Project.xcconfig\")\n    ]),\n    targets: [\n        .target( // [!code ++]\n            name: \"TargetX\", // [!code ++]\n            destinations: .iOS, // [!code ++]\n            product: .framework, // [!code ++] // or .staticFramework, .staticLibrary...\n            bundleId: \"io.tuist.targetX\", // [!code ++]\n            sources: [\"Sources/TargetX/**\"], // [!code ++]\n            dependencies: [ // [!code ++]\n                /** Dependencies go here **/ // [!code ++]\n                /** .external(name: \"Kingfisher\") **/ // [!code ++]\n                /** .target(name: \"OtherProjectTarget\") **/ // [!code ++]\n            ], // [!code ++]\n            settings: .settings(configurations: [ // [!code ++]\n                .debug(name: \"Debug\", xcconfig: \"./xcconfigs/TargetX.xcconfig\"), // [!code ++]\n                .debug(name: \"Release\", xcconfig: \"./xcconfigs/TargetX.xcconfig\") // [!code ++]\n            ]) // [!code ++]\n        ), // [!code ++]\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting compilation errors due to missing files\nDESCRIPTION: Addresses potential issues with incomplete or mismatched file references in the project, advising to compare the generated file list with Xcode's actual file structure. Proper file organization and alignment are crucial for successful project compilation after migration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Updating Swift Package.swift to Use Tuist Registry\nDESCRIPTION: This snippet shows how to modify the `Package.swift` file to use the registry identifier for dependencies instead of a URL.  This ensures that the Tuist Registry is used every time dependencies are resolved. It involves replacing the `.package(url: ...)` declaration with a `.package(id: ...)` declaration, where the id follows the format `{organization}.{repository}`. The primary input is the `Package.swift` file, and the output is the modified file with updated dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry/swift-package.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude with Mise installation\nDESCRIPTION: This JSON snippet shows how to configure the Claude desktop application to use the Tuist MCP server when Tuist is installed via Mise. It uses `mise x tuist@latest` to execute Tuist. You can pin a specific version using `tuist@x.y.z` instead of `tuist@latest`. The `args` array is configured to pass `tuist mcp start` to the Tuist CLI.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/ai/mcp.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"mise\",\n      \"args\": [\"x\", \"tuist@latest\", \"--\", \"tuist\", \"mcp\", \"start\"] // Or tuist@x.y.z to fix the version\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist CLI using Mise - Bash\nDESCRIPTION: These bash commands demonstrate how to install the Tuist CLI using Mise, a package manager that supports deterministic tool versioning. You can install the current, specific, or fuzzy versions of Tuist. The snippet also emphasizes that Mise requires explicit version activation via the `mise use` command either globally or per project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/install-tuist.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise install tuist            # Install the current version specified in .tool-versions/.mise.toml\nmise install tuist@x.y.z      # Install a specific version number\nmise install tuist@3          # Install a fuzzy version number\n```\n\nLANGUAGE: bash\nCODE:\n```\nmise use tuist@x.y.z          # Use tuist-x.y.z in the current project\nmise use tuist@latest         # Use the latest tuist in the current directory\nmise use -g tuist@x.y.z       # Use tuist-x.y.z as the global default\nmise use -g tuist@system      # Use the system's tuist as the global default\n```\n\n----------------------------------------\n\nTITLE: Referencing xcconfig Files in Project.swift\nDESCRIPTION: This Swift snippet shows how to integrate the generated `.xcconfig` files into the `Project.swift` file. It updates the `Project` definition to include settings configurations that reference the `.xcconfig` file for both Debug and Release builds. This ensures that build settings are loaded from the external file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\"), // [!code ++]\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\"), // [!code ++]\n    ]),\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Package\nDESCRIPTION: This Swift code defines a `Package.swift` file within a Tuist project. It declares external dependencies, such as Alamofire and Sentry, using URLs and checksums. The `packageSettings` configure package integration. The `package` variable configures the dependency settings.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n    import ProjectDescriptionHelpers\n\n    let packageSettings = PackageSettings(\n        productTypes: [\n            \"Alamofire\": .framework, // default is .staticFramework\n        ]\n    )\n\n#endif\n\nlet package = Package(\n    name: \"PackageName\",\n    dependencies: [\n        .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n    ],\n    targets: [\n        .binaryTarget(\n            name: \"Sentry\",\n            url: \"https://github.com/getsentry/sentry-cocoa/releases/download/8.40.1/Sentry.xcframework.zip\",\n            checksum: \"db928e6fdc30de1aa97200576d86d467880df710cf5eeb76af23997968d7b2c7\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining iOS unit tests with Tuist in Swift\nDESCRIPTION: This Swift snippet defines a Tuist project with a unit test target named \"MyLibraryTests\" configured for iOS. It specifies the product type as unit tests, sets a bundle identifier, points to the source files, and declares a dependency on the main \"MyLibrary\" target. This configuration supports Xcode's testing infrastructure and integrates with Tuist's build system.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(\n            name: \"MyLibraryTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyLibraryTests\",\n            sources: \"Tests/MyLibraryTests/**\",\n            dependencies: [\n                .target(name: \"MyLibrary\"),\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Tuist Fish Completions\nDESCRIPTION: Creates the Fish shell completions directory (`~/.config/fish/completions`) if it doesn't exist, then generates the Tuist Fish completion script using `tuist --generate-completion-script` and saves it as `tuist.fish` within that directory. This requires the Fish shell to be installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/cli/shell-completions.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir -p ~/.config/fish/completions\ntuist --generate-completion-script > ~/.config/fish/completions/tuist.fish\n```\n\n----------------------------------------\n\nTITLE: Integrating SPM Build Tool Plugin in Tuist Project (Swift)\nDESCRIPTION: Illustrates how to integrate an SPM build tool plugin (SwiftLintBuildToolPlugin from SwiftLintPlugins) into a Tuist project manifest (`Project.swift`). The package is declared in the `Project`'s `packages` array, and the plugin is referenced in the target's dependencies using `.package(product: ..., type: .plugin)`. This specific mechanism is required for SPM build tool plugins in Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"Framework\",\n    packages: [\n        .remote(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", requirement: .upToNextMajor(from: \"0.56.1\")),\n    ],\n    targets: [\n        .target(\n            name: \"Framework\",\n            dependencies: [\n                .package(product: \"SwiftLintBuildToolPlugin\", type: .plugin),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Sharing Previews with Tuist CLI - Bash\nDESCRIPTION: These Bash commands allow users to build an iOS app using the Tuist CLI for both the simulator and a physical device and then share the resulting preview. Dependencies include having a Tuist project, a valid Tuist account, and ensuring the app is properly signed for device builds. The commands expect the target app name and may require device destination arguments. The output is a shareable preview link generated by Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/share/previews.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist build App # Build the app for the simulator\ntuist build App -- -destination 'generic/platform=iOS' # Build the app for the device\ntuist share App\n```\n\n----------------------------------------\n\nTITLE: Updating Package.swift to use Tuist Registry (Swift)\nDESCRIPTION: This snippet outlines how to modify the `Package.swift` file in a Swift package to utilize the Tuist Registry for dependency resolution. It replaces the traditional URL-based dependency declaration with an identifier-based one.  The key change is replacing `.package(url: ...)` with `.package(id: ...)` and using the registry identifier (e.g., `{organization}.{repository}`).  This ensures that dependencies are resolved from the registry instead of a URL.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/registry/swift-package.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Generating project with dynamic frameworks\nDESCRIPTION: This shell command demonstrates how to use the `tuist generate` command with an environment variable `TUIST_DYNAMIC` to control whether the generated project uses dynamic frameworks or static libraries. Setting `TUIST_DYNAMIC=1` likely configures Tuist to generate dynamic frameworks. The environment variable value can be read from the Tuist project configuration to set the target type accordingly at generation time.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/cost-of-convenience.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# The value of TUIST_DYNAMIC can be read from the project {#the-value-of-tuist_dynamic-can-be-read-from-the-project}\n# to set the product as static or dynamic based on the value. {#to-set-the-product-as-static-or-dynamic-based-on-the-value}\nTUIST_DYNAMIC=1 tuist generate\n```\n\n----------------------------------------\n\nTITLE: Accessing VitePress Parameters with useData in Vue\nDESCRIPTION: This JavaScript snippet, intended for a Vue 3 `<script setup>` block within a VitePress application, imports the `useData` composable function from `vitepress`. It then calls `useData` and destructures the `params` reactive reference from the returned object. The `params` ref holds route parameters, which can be used reactively within the component's template, likely to access data like a URL.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/references/examples/[example].md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\n\n// params is a Vue ref\nconst { params } = useData()\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Package.swift\nDESCRIPTION: This Swift code defines a `Package` in `Package.swift` that declares Alamofire as a dependency, along with a binary target for Sentry. The `package`'s `dependencies` array specifies external dependencies using the `.package` function with the URL and version range, while the targets array specifies the binary targets with their associated URL and checksum.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet package = Package(\n    name: \"PackageName\",\n    dependencies: [\n        .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n    ],\n    targets: [\n        .binaryTarget(\n            name: \"Sentry\",\n            url: \"https://github.com/getsentry/sentry-cocoa/releases/download/8.40.1/Sentry.xcframework.zip\",\n            checksum: \"db928e6fdc30de1aa97200576d86d467880df710cf5eeb76af23997968d7b2c7\"\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating macOS Keychain for CI using Bash\nDESCRIPTION: This script creates a temporary keychain on macOS CI environments to store registry credentials securely. It sets the keychain's settings, makes it the default, and unlocks it. Dependencies include the `security` command-line tool and `uuidgen`. It is essential to run this before executing `tuist registry login` to ensure credentials are stored properly.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/registry/continuous-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTMP_DIRECTORY=$(mktemp -d)\nKEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\nKEYCHAIN_PASSWORD=$(uuidgen)\nsecurity create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\nsecurity set-keychain-settings -lut 21600 $KEYCHAIN_PATH\nsecurity default-keychain -s $KEYCHAIN_PATH\nsecurity unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n```\n\n----------------------------------------\n\nTITLE: Defining Project with Package Dependencies using Tuist\nDESCRIPTION: This code snippet defines a Tuist project named 'MyProject' with a package dependency resolved through the Tuist Registry. It showcases how to declare a package dependency using its registry identifier instead of a direct URL. The target 'App' then depends on a product from that package.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry/generated-project.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyProject\",\n    packages: [\n        // Source control resolution\n        // .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n        // Registry resolution\n        .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n    ],\n    .target(\n        name: \"App\",\n        product: .app,\n        bundleId: \"io.tuist.App\",\n        dependencies: [\n            .package(product: \"ComposableArchitecture\"),\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift library with Bazel and Tuist in Swift\nDESCRIPTION: This snippet demonstrates how to declare a Swift library in Bazel using a swift_library rule written in Starlark, and its equivalent configuration in Tuist's Swift DSL. The Bazel rule specifies the target name, source files using glob patterns, and the module name. The Tuist snippet declares a static library target with a matching name and source inclusion using a glob pattern. Dependencies include the Bazel build system and Tuist CLI for execution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nswift_library(\n    name = \"MyLibrary.library\",\n    srcs = glob([\"**/*.swift\"]),\n    module_name = \"MyLibrary\"\n)\n```\n\n----------------------------------------\n\nTITLE: Uninstall Tuist (tuistenv) - Bash\nDESCRIPTION: This bash script uninstalls the current version of Tuist if it was installed using `tuistenv`.  It's a necessary step when migrating from Tuist 3 to 4 because `tuistenv` has been dropped in favor of tools like Mise.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/references/migrations/from-v3-to-v4.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Ls https://uninstall.tuist.io | bash\n```\n\n----------------------------------------\n\nTITLE: Reading Boolean Environment Variable Using getBoolean Helper (Swift)\nDESCRIPTION: Illustrates the use of the `getBoolean(default:)` helper method on `Environment.isCI` to read a boolean environment variable (typically `TUIST_IS_CI`). This method returns the variable's boolean value if it can be parsed as such, or the specified default value (`false`) if the variable is not set or not a valid boolean. Requires Tuist's `ProjectDescription` module and the `Environment` type.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dynamic-configuration.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nEnvironment.isCI.getBoolean(default: false)\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Building XCFramework Dependencies Using Shell Script\nDESCRIPTION: This snippet explains how to obtain the prebuilt `.xcframework` binaries required by this iOS app project by executing a shell script. The `build.sh` script exists within each framework's directory under `XCFrameworks` and produces the compiled `.xcframework`. This dependency management approach allows the main application and tests to link against these precompiled binaries, facilitating modular builds and easier dependency management.\nSOURCE: https://github.com/tuist/tuist/blob/main/fixtures/ios_app_with_xcframeworks/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ne.g. ios_app_with_xcframeworks/XCFrameworks/MyFramework/build.sh\n```\n\n----------------------------------------\n\nTITLE: Building with no binary cache\nDESCRIPTION: This command builds all schemes without utilizing the binary cache by including the '--no-binary-cache' argument. It is useful when a fresh build is required or cache invalidation is desired.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist build --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Accessing Target Bundle in Objective-C\nDESCRIPTION: This Objective-C code snippet demonstrates how to access a target's resources bundle using an interface named `{Target}Resources`.  This approach provides a unified interface to the bundle that contains the target resources.  The `MyFeatureResources` likely represents the target's name, and its function `bundle` returns the appropriate bundle object. There are no specific dependencies listed. The output is the `NSBundle` object. There are no known limitations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/synthesized-files.md#_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\nNSBundle *bundle = [MyFeatureResources bundle];\n```\n\n----------------------------------------\n\nTITLE: Objective-C Bundle Accessor for Target Resources\nDESCRIPTION: This snippet shows the Objective-C interface `{Target}Resources` generated by Tuist to access the bundle containing target resources. The class provides a class method `bundle` to retrieve the resource bundle reference, facilitating resource access in Objective-C projects.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/synthesized-files.md#_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSBundle *bundle = [MyFeatureResources bundle];\n```\n\n----------------------------------------\n\nTITLE: Comparing Project Generation Commands in XcodeGen and Tuist\nDESCRIPTION: Shows the equivalent project generation commands for XcodeGen and Tuist. Both commands convert project declarations into Xcode projects and workspaces.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxcodegen generate\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Extracting Target Settings to xcconfig (Shell)\nDESCRIPTION: This shell command extracts build settings for a specific target in an Xcode project into an `.xcconfig` file.  It uses the `tuist migration settings-to-xcconfig` command with the `-t` option to specify the target (`TargetX`) and the `-x` option to specify the output `.xcconfig` file (`xcconfigs/TargetX.xcconfig`).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ntuist migration settings-to-xcconfig -p MyApp.xcodeproj -t TargetX -x xcconfigs/TargetX.xcconfig\n```\n\n----------------------------------------\n\nTITLE: Determining Target Product Type Based on Environment Variable in Swift\nDESCRIPTION: A Swift helper function intended for use within Tuist manifest files (`Project.swift` or helper files). It reads the value of the `linking` environment variable using `Environment.linking`. If the value is the string \"static\", it returns `.staticFramework`; otherwise, it defaults to `.framework` (dynamic linking). This allows dynamic configuration of target product types during project generation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Use the value returned by this function to set the product type of your targets.\nfunc productType() -> Product {\n    if case let .string(linking) = Environment.linking {\n        return linking == \"static\" ? .staticFramework : .framework\n    } else {\n        return .framework\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Keychain for Xcode Integration (Bash)\nDESCRIPTION: This Bash script creates a new keychain, sets its settings, unlocks it, and sets it as the default keychain. This is necessary for Xcode integration in a CI environment where a pre-existing keychain might not be available. It uses `mktemp` to create a temporary directory, `uuidgen` for a unique password, and `security` to manage the keychain.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/registry/continuous-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTMP_DIRECTORY=$(mktemp -d)\nKEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\nKEYCHAIN_PASSWORD=$(uuidgen)\nsecurity create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\nsecurity set-keychain-settings -lut 21600 $KEYCHAIN_PATH\nsecurity default-keychain -s $KEYCHAIN_PATH\nsecurity unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n```\n\n----------------------------------------\n\nTITLE: Determining the target migration order\nDESCRIPTION: This command lists all targets in a project sorted by dependency count, assisting in planning migration sequence from most depended-upon to least, ensuring dependencies are migrated in a manageable order.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntuist migration list-targets -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in Package.swift for Tuist-managed Swift Project\nDESCRIPTION: This Swift code snippet defines the package dependencies for a Swift project using the Package.swift manifest. It illustrates how to declare external dependencies (e.g., Kingfisher) with version constraints and customize product types via conditional compilation. This configuration enables Swift Package Manager to handle dependency resolution and integration into the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/add-dependencies.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\")) // [!code ++]\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Project Generation Options with Tuist.swift in Swift\nDESCRIPTION: This Swift snippet demonstrates customizing Tuist's project generation using a `Tuist.swift` manifest. It imports `ProjectDescription` and declares a root constant `tuist` initialized with a `Tuist` object, setting the `project` property with generation options enforcing explicit dependencies. This manifest enables finer control over generation behaviors, serving as the root marker for Tuist scanning the project directory hierarchy.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/manifests.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(\n    project: .tuist(generationOptions: .options(enforceExplicitDependencies: true))\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist to include --replace-scm-with-registry in installOptions\nDESCRIPTION: This Swift code snippet shows how to add the '--replace-scm-with-registry' flag to the `installOptions` in the `Tuist.swift` configuration file. This modifies the build process to favor registry-based dependency resolution when using the XcodeProj-based integration. The `fullHandle` identifies the project, and the `installOptions` are extended with the argument for registry usage.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry/xcodeproj-integration.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(\n    fullHandle: \"{account-handle}/{project-handle}\",\n    project: .tuist(\n        installOptions: .options(passthroughSwiftPackageManagerArguments: [\"--replace-scm-with-registry\"])\n    )\n)\n\n```\n\n----------------------------------------\n\nTITLE: Sample Tuist Share JSON Output - JSON\nDESCRIPTION: This JSON object demonstrates the structure of the output returned from `tuist share --json`. It includes an id for the preview, a direct URL to the generated preview, and a URL for downloading a QR code image that links to the preview. No code invocation is shown; this illustrates expected results. Consumers must handle these fields for downstream automation or sharing purposes.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/share/previews.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1234567890,\n  \"url\": \"https://cloud.tuist.io/preview/1234567890\",\n  \"qrCodeURL\": \"https://cloud.tuist.io/preview/1234567890/qr-code.svg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing an Xcode Workspace with Tuist in Swift\nDESCRIPTION: Defines a Workspace manifest in Swift to customize the generated Xcode workspace by specifying additional projects to include. The workspace is named via the 'name' property and includes paths to directories with Project.swift files via the 'projects' array. This manifest allows adding extra projects beyond the default dependency graph resolution. Dependencies do not need manual addition because Tuist resolves and includes them automatically.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/manifests.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Workspace.swift\nimport ProjectDescription\n\nlet workspace = Workspace(\n    name: \"App-Workspace\",\n    projects: [\n        \"./App\", // Path to directory containing the Project.swift file\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist.swift to Optionally Use Registry with XcodeProj Integration (Swift)\nDESCRIPTION: This Swift code snippet shows how to configure the `Tuist.swift` file to pass the `--replace-scm-with-registry` flag via `installOptions`. This instructs Tuist's XcodeProj-based integration to prioritize resolving Swift Package Manager dependencies from the Tuist Registry when available, otherwise using the original SCM source. This requires a valid `Tuist.swift` file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry/xcodeproj-integration.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(\n    fullHandle: \"{account-handle}/{project-handle}\",\n    project: .tuist(\n        installOptions: .options(passthroughSwiftPackageManagerArguments: [\"--replace-scm-with-registry\"])\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring an Xcode Project Manifest with Tuist in Swift\nDESCRIPTION: This Swift snippet defines a Tuist Project manifest named \"App\" that declares an Xcode project in the directory containing the manifest file. The manifest uses the `Project` object with a `name` parameter and an array of targets (elided here). Only one root-level variable `project` is permitted. Dependencies include the Tuist ProjectDescription module. The manifest enables Tuist to generate the corresponding Xcode project with the specified targets.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/manifests.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Project.swift\nlet project = Project(\n    name: \"App\",\n    targets: [\n        // ....\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Organization SSO with Google - Tuist CLI Bash\nDESCRIPTION: Configures SSO for a Tuist organization using Google Workspace as the identity provider. You must be logged in via Google and have an email from the target organization's domain. The command requires the organization name, the provider (google), and the intended Google Workspace domain. This is crucial for granting automated organization membership to developers with matching Google domains; no additional parameters are required beyond those specified.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/server/introduction/authentication.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider google --organization-id my-google-domain.com\n```\n\n----------------------------------------\n\nTITLE: Defining an Xcode Project with Tuist in Swift\nDESCRIPTION: Defines a Tuist Project manifest using Swift to specify the name and targets of an Xcode project. This manifest must contain a single root variable declaring the Project instance. The project is generated in the same directory using the defined name. Being a Swift file allows validation and reusability of code via Swift functions. The key parameter is the 'name' property which sets the project name. The output is a generated Xcode project based on this manifest.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/manifests.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Project.swift\nlet project = Project(\n    name: \"App\",\n    targets: [\n        // ....\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Adding '-ObjC' to 'OTHER_LDFLAGS' in Tuist Target Settings (Swift)\nDESCRIPTION: This snippet demonstrates how to specify the '-ObjC' linker flag in the 'OTHER_LDFLAGS' build setting within a Tuist target configuration. This is necessary for Google libraries written in Objective-C to ensure proper linkage. It modifies the target's settings via the '.settings' method, incorporating the '-ObjC' flag with inherited flags. Dependencies include Tuist's Target class and build settings structure.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nTarget.target(\n    ...\n    settings: .settings(\n        base: [\"OTHER_LDFLAGS\": \"$(inherited) -ObjC\"]\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Target Factories with Tuist Helpers\nDESCRIPTION: Demonstrates how Tuist leverages Swift for code reusability using Project Description Helpers. The first part defines a Swift extension (`Target+Features.swift`) in the `Tuist/ProjectDescriptionHelpers` directory to create a factory function for feature targets. The second part (`Project.swift`) shows how to import this helper module and use the factory function within a project manifest.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nextension Target {\n  /**\n    This function is a factory of targets that together represent a feature.\n  */\n  static func featureTargets(name: String) -> [Target] {\n    // ...\n  }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers // [!code highlight]\n\nlet project = Project(name: \"MyProject\",\n                      targets: Target.featureTargets(name: \"MyFeature\")) // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Defining a Unit Test Target in Bazel vs. Tuist\nDESCRIPTION: Contrasts the definition of an iOS unit test target ('MyLibraryTests'). The Bazel example uses the `ios_unit_test` rule, specifying dependencies, bundle ID, minimum OS version, and the test host. The Tuist example achieves the same using Swift in `Project.swift`, defining the product type, bundle ID, sources, and dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_1\n\nLANGUAGE: Starlark\nCODE:\n```\nios_unit_test(\n    name = \"MyLibraryTests\",\n    bundle_id = \"io.tuist.MyLibraryTests\",\n    minimum_os_version = \"16.0\",\n    test_host = \"//MyApp:MyLibrary\",\n    deps = [\":MyLibraryTests.library\"],\n)\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(\n            name: \"MyLibraryTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyLibraryTests\",\n            sources: \"Tests/MyLibraryTests/**\",\n            dependencies: [\n                .target(name: \"MyLibrary\"),\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Vitepress and Vue.js\nDESCRIPTION: This Vue.js snippet uses the `useData` function from Vitepress to access the current page's data, in this case, the URL from parameters.  It retrieves the page's URL as `params.url` which can be further used for creating links or performing other operations.  The `params` is a Vue ref object.  The code does not have dependencies other than Vitepress and Vue.js.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/references/examples/[example].md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\nimport { useData } from 'vitepress'\n\n// params is a Vue ref\nconst { params } = useData()\n```\n\n----------------------------------------\n\nTITLE: Customizing Project Generation Options with Tuist.swift in Swift\nDESCRIPTION: Defines the root configuration file Tuist.swift in Swift to override default project generation options. It imports ProjectDescription and declares a 'tuist' variable with generation options such as enabling explicit dependency enforcement. This manifest guides Tuist on how to generate projects and influences resolving project roots and configurations. The main parameter shown is 'generationOptions', controlling aspects like dependency management enforcement.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/manifests.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(\n    project: .tuist(generationOptions: .options(enforceExplicitDependencies: true))\n)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow - Create Keychain, Login to Registry\nDESCRIPTION: This GitHub Actions workflow demonstrates how to create a keychain, log in to the Tuist Registry using a secret token, and prepare the CI environment for Tuist operations. It highlights the importance of creating and unlocking the keychain before attempting to log in to the registry.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry/continuous-integration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build\n\njobs:\n  build:\n    steps:\n      - # Your set up steps...\n      - name: Create keychain\n        run: |\n        TMP_DIRECTORY=$(mktemp -d)\n        KEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\n        KEYCHAIN_PASSWORD=$(uuidgen)\n        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH\n        security default-keychain -s $KEYCHAIN_PATH\n        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n      - name: Log in to the Tuist Registry\n        env:\n          TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_CONFIG_TOKEN }}\n        run: tuist registry login\n      - # Your build steps\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude for Mise-Managed Tuist MCP Server\nDESCRIPTION: This JSON configuration snippet sets up Claude's desktop client to connect to a Tuist MCP server managed by `mise`. It uses `mise x tuist@latest -- tuist mcp start` to execute the specific Tuist version managed by `mise`, ensuring Claude interacts with the correct Tuist installation. A specific version like `tuist@x.y.z` can also be used.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/ai/mcp.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"mise\",\n      \"args\": [\"x\", \"tuist@latest\", \"--\", \"tuist\", \"mcp\", \"start\"] // Or tuist@x.y.z to fix the version\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Codemagic: Install Tuist using Mise\nDESCRIPTION: This YAML configuration file defines a Codemagic workflow that uses Mise to install and run Tuist.  It includes a `script` that downloads and installs Mise. Afterwards it utilizes `mise install` to use the version from the .mise.toml file and finally uses `mise exec -- tuist build` to build the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/automate/continuous-integration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  lint:\n    name: Build\n    max_build_duration: 30\n    environment:\n      xcode: 15.0.1\n    scripts:\n      - name: Install Mise\n        script: |\n          curl https://mise.jdx.dev/install.sh | sh\n          mise install # Installs the version from .mise.toml\n      - name: Build\n        script: mise exec -- tuist build\n```\n\n----------------------------------------\n\nTITLE: Setting product type to dynamic framework for 'FBLPromises' in Package.swift (Swift)\nDESCRIPTION: This snippet adjusts the package manifest to set the product type of 'FBLPromises' to '.framework', resolving runtime crashes related to unrecognized selectors. It modifies the 'PackageSettings' with a 'productTypes' dictionary, keying 'FPLPromises' to '.framework'. Dependencies involve Swift Package Manager's 'PackageDescription' and conditional compilation directives.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nimport PackageDescription\n\n#if TUIST\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet packageSettings = PackageSettings(\n    productTypes: [\n        \"FPLPromises\": .framework,\n    ]\n)\n#endif\n\nlet package = Package(\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Checking for empty or missing build settings in project\nDESCRIPTION: Runs a Tuist migration command to verify if build settings have been correctly extracted into `.xcconfig` files. This ensures configuration consistency and helps identify settings that need to be migrated or adjusted.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist migration check-empty-settings -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist project scaffold in Swift\nDESCRIPTION: Defines the initial scaffolding of a Tuist project using Swift manifest files. Includes the Tuist.swift for project-scoped settings, Project.swift to define the Xcode project structure and targets, and Tuist/Package.swift for managing dependencies with Swift Package Manager. The snippet sets up basic placeholders, with project and package names configured. This scaffold is the foundation for migrating an existing Xcode project to Tuist and requires the Tuist CLI tooling to function correctly.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp-Tuist\",\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        // Customize the product types for specific package product\n        // Default is .staticFramework\n        // productTypes: [\"Alamofire\": .framework,]\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        // You can read more about dependencies here: https://docs.tuist.io/documentation/tuist/dependencies\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Xcode Cloud: Install Tuist using Mise\nDESCRIPTION: This bash script installs Mise, a tool for managing tool versions, and then uses it to install and run Tuist. It first installs Mise using a curl command, then installs the specific Tuist version defined in the `.mise.toml` file. Finally, it executes the `tuist generate` command using Mise's `exec` functionality.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/automate/continuous-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\ncurl https://mise.jdx.dev/install.sh | sh\nmise install # Installs the version from .mise.toml\n\n# Runs the version of Tuist indicated in the .mise.toml file {#runs-the-version-of-tuist-indicated-in-the-misetoml-file}\nmise exec -- tuist generate\n```\n\n----------------------------------------\n\nTITLE: Updating SPM Dependency to Use Registry ID in diff\nDESCRIPTION: This diff snippet illustrates how to change a Swift Package Manager dependency in a `Package.swift` file to resolve from the Tuist Registry instead of a URL. It replaces the `.package(url: ...)` declaration with `.package(id: ...)` using the registry identifier format `{organization}.{repository}`. This modification ensures the package is fetched from the registry when available.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/registry/xcodeproj-integration.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Managing dependencies with Tuist CLI commands\nDESCRIPTION: These bash commands show how to work with Swift Package Manager dependencies using Tuist. The `tuist install` command resolves and fetches dependencies defined in Tuist's `Package.swift`, similar to Bazel's plugin requirements. The `tuist generate` command then generates an Xcode project reflecting resolved dependencies and project configuration. This workflow simplifies dependency management in Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntuist install # Fetch dependencies defined in Tuist/Package.swift\ntuist generate # Generate an Xcode project\n```\n\n----------------------------------------\n\nTITLE: Automating Preview Sharing and Extracting JSON Output - Bash\nDESCRIPTION: The Bash command runs tuist share with the --json flag to output preview sharing results in machine-readable JSON format. Dependencies include a configured Tuist CLI and a valid project or .ipa file. The main output is a JSON object containing fields like 'id', 'url', and 'qrCodeURL', which can be parsed for further CI/CD scripting or external integrations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/share/previews.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntuist share --json\n```\n\n----------------------------------------\n\nTITLE: Automating Carthage Dependency Update and Tuist Generation (Bash)\nDESCRIPTION: A shell script demonstrating a common workflow for projects using Carthage with Tuist. It first runs `carthage update` to fetch and build dependencies defined in a Cartfile, placing them typically in `Carthage/Build`. Then, it runs `tuist generate` to create the Xcode project which can then link against these frameworks.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\ncarthage update\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Updating Package.swift to Use Registry Identifier (Diff)\nDESCRIPTION: This diff snippet illustrates the change required in the `Tuist/Package.swift` file to force the resolution of a specific dependency through the Tuist Registry. It replaces the `.package(url: ...)` declaration with `.package(id: ...)` using the registry identifier format `{organization}.{repository}`. This ensures the specified package is always fetched via the registry.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry/xcodeproj-integration.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Project Reference in Swift\nDESCRIPTION: This Swift snippet shows the minimal configuration file Tuist.swift that initializes the Tuist object to define the root of the project. Its presence signals Tuist where the project configuration starts. It imports the ProjectDescription framework and creates a Tuist instance, which is used internally by Tuist's tooling to locate and configure the project environment. This file is required alongside Project.swift for Tuist project setup.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Creating a Project-Scoped Token in Bash\nDESCRIPTION: Generates a project-scoped authentication token using the Tuist CLI. This token is designed for non-interactive environments like CI/CD pipelines. For the CLI to use this token, it must be set as the `TUIST_CONFIG_TOKEN` environment variable, and the `CI=1` environment variable must also be present.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/server/introduction/authentication.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist project tokens create\n```\n\n----------------------------------------\n\nTITLE: Listing project targets by dependency count using Tuist migration CLI in Bash\nDESCRIPTION: Runs a Tuist migration command to list all targets in the given Xcode project, sorted by their number of dependencies. This helps in planning the migration order by identifying the most dependent targets to migrate first, which minimizes integration issues. Requires the path to the Xcode project file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ntuist migration list-targets -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Resolving Swift Package Dependencies Using Tuist Registry (Bash)\nDESCRIPTION: This snippet demonstrates how to resolve Swift package dependencies from the Tuist Registry using the `--replace-scm-with-registry` flag. This flag instructs the Swift package manager to prioritize resolving dependencies from the registry when available.  It's essential to have the Tuist Registry configured correctly before running this command.  The primary output is the resolved package dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry/swift-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswift package --replace-scm-with-registry resolve\n```\n\n----------------------------------------\n\nTITLE: Accessing Logger via ServiceContext in Bash\nDESCRIPTION: Demonstrates how to access the current logger instance through the ServiceContext singleton in a shell environment. The snippet shows the usage of ServiceContext.current?.logger to retrieve the logger dependency injected using swift-service-context. This example assumes the environment supports bash commands and Swift concurrency constructs. It also notes a key limitation: task local values used by swift-service-context do not propagate through Dispatch queues, requiring explicit passing of the logger to asynchronous operations using Dispatch.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/contributors/cli/logging.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nServiceContext.current?.logger\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuist Framework Project Manifest in Swift\nDESCRIPTION: Specifies a Tuist project manifest for a macOS framework named \"MyFramework\". It includes one target configured as a framework product, declares source file locations, dependencies, and uses ProjectDescription. This manifest serves as the main project configuration file required by Tuist when manually creating or modifying projects.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/new-project.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyFramework\",\n    targets: [\n        .target(\n            name: \"MyFramework\",\n            destinations: .macOS,\n            product: .framework,\n            bundleId: \"io.tuist.MyFramework\",\n            sources: [\"MyFramework/Sources/**\"],\n            dependencies: []\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining iOS Unit Tests with Tuist (Swift)\nDESCRIPTION: This snippet shows how to define an equivalent iOS unit test target in a Tuist Project.swift file using Swift syntax. It configures the target's name, destinations, product type (`.unitTests`), bundle ID, source directory, and dependencies on another target.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    // ...\n    targets: [\n        .target(\n            name: \"MyLibraryTests\",\n            destinations: .iOS,\n            product: .unitTests,\n            bundleId: \"io.tuist.MyLibraryTests\",\n            sources: \"Tests/MyLibraryTests/**\",\n            dependencies: [\n                .target(name: \"MyLibrary\"),\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests using Tuist CLI\nDESCRIPTION: This snippet demonstrates how to run tests using the `tuist test` command. It executes tests for a specific scheme, generating the project if required, and then runs the tests using the platform-specific build tool. It assumes that Tuist is installed and configured for the project. The output is beautified using xcbeautify, and the command can use the binary cache for optimization and selective testing.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/test.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist test MyScheme\n```\n\n----------------------------------------\n\nTITLE: Exporting Tuist Logs in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow to export Tuist logs as an artifact. It uses the `actions/upload-artifact` action to upload all `.log` files from the `/tmp/tuist/logs/` directory. The `XDG_STATE_HOME` environment variable is set to `/tmp` to ensure logs are written to a predictable location during CI.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/cli/logging.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Node CI\n\non: [push]\n\nenv:\n  XDG_STATE_HOME: /tmp\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      # ... other steps\n      - run: tuist generate\n      # ... do something with the project\n      - name: Export Tuist logs\n        uses: actions/upload-artifact@v4\n        with:\n          name: tuist-logs\n          path: /tmp/tuist/logs/*.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist Registry Flag in Swift\nDESCRIPTION: This Swift snippet demonstrates how to configure Tuist to use the registry flag (`--replace-scm-with-registry`) when resolving Swift Package Manager dependencies. It adds the flag to the `passthroughSwiftPackageManagerArguments` within the `installOptions` of the `Tuist.project` definition in your `Tuist.swift` file. This ensures the flag is passed to SPM commands executed by Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/registry/xcodeproj-integration.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(\n    fullHandle: \"{account-handle}/{project-handle}\",\n    project: .tuist(\n        installOptions: .options(passthroughSwiftPackageManagerArguments: [\"--replace-scm-with-registry\"])\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Implicit Imports with Tuist CLI\nDESCRIPTION: This command executes the Tuist CLI's inspection tool specifically for implicit imports. It statically analyzes the source code within the project to identify modules that are imported without a corresponding explicit dependency declaration in the project's manifest. The command is useful for identifying potential issues caused by implicit dependencies, and it exits with a non-zero status code if any are detected.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/inspect/implicit-dependencies.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist inspect implicit-imports\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude for Global Tuist MCP Server\nDESCRIPTION: This JSON configuration snippet modifies Claude's desktop settings (`claude_desktop_config.json`) to register the Tuist MCP server. It specifies the `tuist` command with `mcp start` arguments to launch the server, assuming Tuist is globally installed (e.g., via Homebrew) and accessible in the system PATH.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/ai/mcp.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"tuist\",\n      \"args\": [\"mcp\", \"start\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting String Environment Variable in Tuist (Swift)\nDESCRIPTION: This Swift snippet shows how to get a string-based environment variable using a helper method, `getString()`.  It illustrates the use of the `Environment` type to access `appName`, and provides a default value to ensure consistent results. This simplifies retrieving string values directly and avoids the need for the full function shown previously.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dynamic-configuration.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nEnvironment.appName.getString(default: \"TuistServer\")\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project with Tuist - Bash\nDESCRIPTION: This snippet leverages the `tuist generate` command to create an Xcode project. This command converts the Swift Package into an Xcode project, enabling development within the Xcode environment.  It should be executed from the directory where the Tuist configuration resides (in this case, the root of the project). The expected output is an Xcode project file which can then be opened and used.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/swift-package.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Modifying Package.swift for Registry (Swift Diff)\nDESCRIPTION: This diff shows how to modify the `Package.swift` file to use the Tuist Registry for dependency resolution. Instead of specifying the URL of the repository, the `id` parameter is used with the registry identifier in the format `{organization}.{repository}`.  This ensures that the registry is used every time dependencies are resolved.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/registry/swift-package.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Target Bundle in Swift\nDESCRIPTION: This Swift code snippet demonstrates how to access a target's resources bundle using the `Bundle.module` property. This provides a unified interface to access the bundle, making the code easier to reason about and the resources to move around. No specific dependencies are listed.  The output is the `Bundle` object. It simplifies resource access within the target. There are no known limitations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/synthesized-files.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet bundle = Bundle.module\n```\n\n----------------------------------------\n\nTITLE: Check for Empty Build Settings in Tuist Migration Using Bash\nDESCRIPTION: This command runs a migration check to ensure that there are no empty build settings remaining in an Xcode project after exporting to .xcconfig files. It helps maintain consistency by alerting to any settings that might still reside in the project and were not exported. This supports the goal of fully externalizing build settings during migration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ntuist migration check-empty-settings -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Generating Project with Dynamic Framework\nDESCRIPTION: This snippet demonstrates how to generate a Tuist project with either static or dynamic frameworks based on an environment variable (TUIST_DYNAMIC). This allows for explicit control over framework types at project generation time, improving predictability and avoiding build-time resolution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/cost-of-convenience.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# The value of TUIST_DYNAMIC can be read from the project {#the-value-of-tuist_dynamic-can-be-read-from-the-project}\n# to set the product as static or dynamic based on the value. {#to-set-the-product-as-static-or-dynamic-based-on-the-value}\nTUIST_DYNAMIC=1 tuist generate\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuist Project Manifest in Swift\nDESCRIPTION: Demonstrates how to declare a basic Tuist project manifest with Project.swift. The manifest defines the project name and prepares a placeholder for targets. This file is essential for Tuist to generate the Xcode project, providing the core structure for targets and related settings. It depends on importing ProjectDescription and is the main file to customize for project-specific configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp-Tuist\",\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Building a Scheme with a Specific Configuration Using Tuist CLI - Bash\nDESCRIPTION: This snippet demonstrates passing additional arguments to the underlying build tool by using the `--` terminator. It builds the 'MyScheme' scheme with a specified build configuration (Debug) by forwarding `-configuration Debug` directly to the platform CLI. This feature requires Tuist and a compatible build tool, enabling customization of build parameters beyond the default tuist build options.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist build MyScheme -- -configuration Debug\n```\n\n----------------------------------------\n\nTITLE: Running Tuist Generate with Dynamic Linking Flag\nDESCRIPTION: A command-line example showing how to use environment variables with Tuist to control whether libraries are linked statically or dynamically at generation time, instead of using Xcode's mergeable libraries feature.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/cost-of-convenience.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# The value of TUIST_DYNAMIC can be read from the project\n# to set the product as static or dynamic based on the value.\nTUIST_DYNAMIC=1 tuist generate\n```\n\n----------------------------------------\n\nTITLE: Creating a Project on Tuist Server (Bash)\nDESCRIPTION: Creates a new project named 'MyApp' under the specified handle 'my-handle' on the Tuist server. The command outputs a confirmation message upon successful creation. The resulting full project handle (`my-handle/MyApp`) is needed to link the local project configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/quick-start/gather-insights.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist project create my-handle/MyApp\n\n# Tuist project my-handle/MyApp was successfully created 🎉\n```\n\n----------------------------------------\n\nTITLE: Generating Zsh Completion Script (No oh-my-zsh)\nDESCRIPTION: This snippet generates a Zsh completion script for Tuist CLI using the `tuist --generate-completion-script` command and directs the output to a file named `_tuist` within the `~/.zsh/completion` directory.  This approach is used when `oh-my-zsh` isn't available. It provides completion functionality for the Tuist CLI without relying on the oh-my-zsh framework.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/cli/shell-completions.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ntuist --generate-completion-script > ~/.zsh/completion/_tuist\n```\n\n----------------------------------------\n\nTITLE: Project Description Helper Plugin Manifest (Swift)\nDESCRIPTION: This snippet shows the content of the `Plugin.swift` file which is required for defining a project description helper plugin. It imports the `ProjectDescription` framework, providing the necessary types and functionality for interacting with the Tuist build system. The `plugin` constant holds a `Plugin` instance, specifying the plugin's name, `MyPlugin` in this case.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/plugins.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\\n\\nlet plugin = Plugin(name: \"MyPlugin\")\n```\n\n----------------------------------------\n\nTITLE: Dynamically Binding URL to Anchor Tag in Vue/HTML\nDESCRIPTION: This HTML snippet demonstrates Vue's directive binding. It creates an anchor (`<a>`) tag where the `href` attribute is dynamically bound to the `url` property of the `params` object (obtained via `useData` in the script setup). The `target=\"blank\"` attribute ensures the link opens in a new tab.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/references/examples/[example].md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a :href=\"params.url\" target=\"blank\">Check out example</a>\n```\n\n----------------------------------------\n\nTITLE: Generating Project with Dynamic Product\nDESCRIPTION: This snippet shows how to use the TUIST_DYNAMIC environment variable to set a product as static or dynamic. It reads the value of `TUIST_DYNAMIC` from the project, which will be either `1` for dynamic or not for static, and then uses this value to configure whether a product should be static or dynamic.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/cost-of-convenience.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# The value of TUIST_DYNAMIC can be read from the project\n# to set the product as static or dynamic based on the value.\nTUIST_DYNAMIC=1 tuist generate\n```\n\n----------------------------------------\n\nTITLE: Script for CocoaPods Integration with Tuist\nDESCRIPTION: A bash script that generates the Tuist project first and then runs pod install to integrate CocoaPods dependencies. This creates a workspace containing both the project and Pods.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dependencies.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\ntuist generate\npod install\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies with xcodebuild\nDESCRIPTION: This bash command resolves package dependencies using `xcodebuild` and specifies a custom directory for cloned source packages.  This is used for incremental resolution across environments. The command takes `-clonedSourcePackagesDirPath` as a parameter to specify where packages are cloned.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry/continuous-integration.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nxcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath .build\n```\n\n----------------------------------------\n\nTITLE: Configuring a Tuist Project\nDESCRIPTION: This Swift snippet defines a `Tuist.swift` file, which is used to configure the Tuist project. This file's location determines the root of the project. The snippet imports the `ProjectDescription` framework and creates a `Tuist` instance. This serves as the configuration file for your Tuist project, and it's essential for setting up your project's structure and settings within the Tuist environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Defining SPM Build Tool Plugin in Package.swift (Swift)\nDESCRIPTION: Example of a standard Swift Package Manifest (`Package.swift`) that declares a dependency on an SPM build tool plugin (SwiftLintPlugins) and applies it to a target (`Framework`). This manifest structure is used when defining standalone Swift packages.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\nlet package = Package(\n    name: \"Framework\",\n    products: [\n        .library(name: \"Framework\", targets: [\"Framework\"]),\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", .upToNextMajor(from: \"0.56.1\")),\n    ],\n    targets: [\n        .target(\n            name: \"Framework\",\n            plugins: [\n                .plugin(name: \"SwiftLint\", package: \"SwiftLintPlugin\"),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuist.swift to use --replace-scm-with-registry flag\nDESCRIPTION: This Swift code snippet shows how to modify the Tuist.swift configuration file to include the '--replace-scm-with-registry' flag in install options. It ensures dependencies are resolved from the registry when available, using the ProjectDescription framework to set up the Tuist project parameters.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry/xcodeproj-integration.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(\n    fullHandle: \"{account-handle}/{project-handle}\",\n    project: .tuist(\n        installOptions: .options(passthroughSwiftPackageManagerArguments: [\"--replace-scm-with-registry\"])\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Tuist project directory structure in Bash\nDESCRIPTION: This snippet shows a typical directory layout of a Tuist project structured to generate an Xcode project. It demonstrates how Tuist uses distinct directories like Tuist, Projects, and root files to organize project configurations and shared helper code. This example requires a Unix-like shell environment to visualize directory hierarchy.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/directory-structure.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTuist.swift\nTuist/\n  Package.swift\n  ProjectDescriptionHelpers/\nProjects/\n  App/\n    Project.swift\n  Feature/\n    Project.swift\nWorkspace.swift\n```\n\n----------------------------------------\n\nTITLE: Extracting dependencies into `Package.swift`\nDESCRIPTION: Includes necessary dependency declarations within the `Package.swift` file, utilizing Tuist's dependency syntax. Assists in external dependency management to support modular and maintainable project configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n\n    let packageSettings = PackageSettings(\n        productTypes: [:]\n    )\n#endif\n\nlet package = Package(\n    name: \"MyApp\",\n    dependencies: [\n        // Add your own dependencies here:\n        // .package(url: \"https://github.com/Alamofire/Alamofire\", from: \"5.0.0\"),\n        .package(url: \"https://github.com/onevcat/Kingfisher\", .upToNextMajor(from: \"7.12.0\")) // [!code ++]\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions: Install Tuist using Mise\nDESCRIPTION: This YAML file sets up a GitHub Actions workflow to build an application. The workflow runs on the latest macOS, checks out the code, utilizes the `mise-action` for installing Mise and managing Tuist. The `tuist build` command is then executed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/automate/continuous-integration.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build Application\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: jdx/mise-action@v2\n      - run: tuist build\n```\n\n----------------------------------------\n\nTITLE: Launching Tuist Project Editor via CLI in Bash\nDESCRIPTION: This Bash snippet executes the Tuist CLI command to edit the generated project. Running `tuist edit` generates an Xcode project from the Tuist DSL manifest, allowing developers to open and work on the project within Xcode. This command is key to transitioning from a manifest-based definition to a familiar graphical interface in Xcode for development and inspection.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n```\n\n----------------------------------------\n\nTITLE: Generating Zsh Completion Script\nDESCRIPTION: This snippet generates a Zsh completion script using the `tuist --generate-completion-script` command and saves it to a file within the Zsh completion directory.  It assumes `oh-my-zsh` is installed, placing the script in the `~/.oh-my-zsh/completions` directory. If `oh-my-zsh` is not installed, the script is saved to `~/.zsh/completion/_tuist`. The command redirects the output of the completion script generator to the specified file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/cli/shell-completions.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ntuist --generate-completion-script > ~/.oh-my-zsh/completions/_tuist\n```\n\n----------------------------------------\n\nTITLE: Running All Tests Without Selective Testing Using Tuist CLI\nDESCRIPTION: This snippet demonstrates running all tests while disabling selective testing. Selective testing is often enabled by default to optimize test runs. The `--no-selective-testing` flag disables the feature, which runs only the tests that need to be run. The command generates the project if necessary, then initiates test execution with the build tool.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/test.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-selective-testing\n```\n\n----------------------------------------\n\nTITLE: Cloning TootSDK Repository - Bash\nDESCRIPTION: This snippet clones the TootSDK repository from GitHub.  It uses the `git clone` command with the repository URL.  The output is the local copy of the repository in the current directory. No dependencies are explicitly required beyond a working git installation and network access. The expected input is the command itself; output is the cloned repository.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/swift-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TootSDK/TootSDK\ncd TootSDK\n```\n\n----------------------------------------\n\nTITLE: Reading String Environment Variable Using getString Helper (Swift)\nDESCRIPTION: Demonstrates using the `getString(default:)` helper method on `Environment.appName` to read the `TUIST_APP_NAME` environment variable. This method simplifies accessing string variables by returning the variable's value if it's set as a string, or the provided default value (\"TuistServer\") otherwise. Requires Tuist's `ProjectDescription` module and the `Environment` type.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dynamic-configuration.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nEnvironment.appName.getString(default: \"TuistServer\")\n```\n\n----------------------------------------\n\nTITLE: Integrating Tuist with Homebrew using GitHub Actions (YAML)\nDESCRIPTION: YAML configuration for a GitHub Actions workflow. It includes steps to check out the repository code, install a specific version of Tuist (e.g., `tuist@x.y.z`) using Homebrew, and then execute the `tuist build` command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/automate/continuous-integration.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: test\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\njobs:\n  lint:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: brew install --formula tuist@x.y.z\n      - run: tuist build\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project with Tuist\nDESCRIPTION: This snippet demonstrates how to generate an Xcode project using Tuist. The command `tuist generate` reads the project manifest files (e.g., `Project.swift`, `Workspace.swift`) in the current directory and creates the corresponding Xcode project and workspace. Running `tuist edit` will also generate an Xcode project but that can be opened for editing the manifest.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Scheme Post-Action for Build Inspection\nDESCRIPTION: This Swift code snippet demonstrates how to configure a scheme in Tuist with a post-action that runs 'tuist inspect build', enabling automatic build time tracking after each build. It utilizes a custom scheme with the specified post-action included.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/insights.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(\n    name: \"MyProject\",\n    targets: [\n        // Your targets\n    ],\n    schemes: [\n        .scheme(\n            name: \"MyApp\",\n            shared: true,\n            buildAction: .buildAction(targets: [\"MyApp\"]),\n            testAction: .testAction(targets: [\"MyAppTests\"]),\n            runAction: .runAction(configuration: \"Debug\"),\n            postActions: [\n                .postAction(\n                    name: \"Inspect Build\",\n                    scriptText: \"\"\"\n                    eval \\\"$($HOME/.local/bin/mise activate -C $SRCROOT bash --shims)\\\"\n                    tuist inspect build\n                    \"\"\"\n                )\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop for Tuist MCP (Mise Installation)\nDESCRIPTION: This JSON snippet provides the configuration for Claude Desktop's `claude_desktop_config.json` when Tuist is managed by `mise`. It sets up the 'tuist' MCP server using `mise x` to execute the `tuist mcp start` command, allowing specification of a Tuist version.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/ai/mcp.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"mise\",\n      \"args\": [\"x\", \"tuist@latest\", \"--\", \"tuist\", \"mcp\", \"start\"] // Or tuist@x.y.z to fix the version\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up and logging in to the Tuist registry\nDESCRIPTION: This bash script sets up the Tuist registry configuration and logs in the user. It generates necessary configuration files within the project directory. It is a prerequisite for using the Tuist Registry and accessing its functionalities, and ensures that subsequent commands can interact with it. The command takes no specific parameters; its output includes generated files and login confirmation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/registry.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist registry setup\n```\n\n----------------------------------------\n\nTITLE: Updating Package.swift to Use Registry Identifier (Diff)\nDESCRIPTION: Illustrates the required modification in the `Tuist/Package.swift` file to ensure a specific dependency is always resolved using the Tuist Registry. This involves changing the `.package` declaration from using a `url:` parameter to an `id:` parameter with the registry identifier (format: `{organization}.{repository}`).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/registry/xcodeproj-integration.md#_snippet_1\n\nLANGUAGE: Diff\nCODE:\n```\ndependencies: [\n-   .package(url: \"https://github.com/pointfreeco/swift-composable-architecture\", from: \"0.1.0\")\n+   .package(id: \"pointfreeco.swift-composable-architecture\", from: \"0.1.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude with Global Tuist installation (Homebrew)\nDESCRIPTION: This JSON snippet demonstrates how to configure the Claude desktop application to use the Tuist MCP server. The `command` key specifies the Tuist executable and the `args` key provides the arguments to start the MCP server. This setup is tailored for a global Tuist installation (e.g., using Homebrew).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/ai/mcp.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"tuist\",\n      \"args\": [\"mcp\", \"start\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HTML for Contributors\nDESCRIPTION: This snippet generates HTML table cells. Each cell displays a contributor's avatar, username, and a link to their GitHub profile. The width of each cell is set to 14.28%. The code uses an `img` tag for displaying profile pictures.\nSOURCE: https://github.com/tuist/tuist/blob/main/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/TamarMilchtaich\"><img src=\"https://avatars.githubusercontent.com/u/49520876?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tamar Milchtaich Lavi</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rock88\"><img src=\"https://avatars.githubusercontent.com/u/323908?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Andrey K</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://2stable.com\"><img src=\"https://avatars.githubusercontent.com/u/69604865?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alex Vera</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.annalisemariottini.com\"><img src=\"https://avatars.githubusercontent.com/u/14299642?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Annalise Mariottini</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n    </tr>\n    <tr>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gustn3965\"><img src=\"https://avatars.githubusercontent.com/u/48749182?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>HyunSu Park</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vldalx\"><img src=\"https://avatars.githubusercontent.com/u/13873200?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vladimir</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://rhysmorgan.co\"><img src=\"https://avatars.githubusercontent.com/u/11096937?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rhys Morgan</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/pierrerodgers\"><img src=\"https://avatars.githubusercontent.com/u/48193278?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>pierrerodgers</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/honghoker\"><img src=\"https://avatars.githubusercontent.com/u/50417461?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>eunpyo hong</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://medium.com/@dbstj169\"><img src=\"https://avatars.githubusercontent.com/u/65678579?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Yunseo Kang</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ilia3546\"><img src=\"https://avatars.githubusercontent.com/u/4445510?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ilya Kharlamov</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n    </tr>\n    <tr>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/brianvar\"><img src=\"https://avatars.githubusercontent.com/u/115399684?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>brianvar</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HossamYoussof\"><img src=\"https://avatars.githubusercontent.com/u/6381926?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Hossam Youssof</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/devMinseok\"><img src=\"https://avatars.githubusercontent.com/u/51021614?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Minseok Kang</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alpanyukov\"><img src=\"https://avatars.githubusercontent.com/u/36258478?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alexander</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/sanghyeok-kim\"><img src=\"https://avatars.githubusercontent.com/u/57667738?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Loyle</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vvisionnn\"><img src=\"https://avatars.githubusercontent.com/u/24761186?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ydna</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://brucemcrooster.dev\"><img src=\"https://avatars.githubusercontent.com/u/53529192?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Evan</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n    </tr>\n    <tr>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.snipnotes.de\"><img src=\"https://avatars.githubusercontent.com/u/5102728?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Felix Lisczyk</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lukaswuerzburger\"><img src=\"https://avatars.githubusercontent.com/u/10812458?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Lukas Würzburger</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GetToSet\"><img src=\"https://avatars.githubusercontent.com/u/8158163?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ethan Wong</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://tdkn.dev\"><img src=\"https://avatars.githubusercontent.com/u/1296540?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Shun Tedokon</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://connorricks.com\"><img src=\"https://avatars.githubusercontent.com/u/13373737?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Connor Ricks</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://franciscodiaz.cl\"><img src=\"https://avatars.githubusercontent.com/u/530662?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Francisco Diaz</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Ethan-IS\"><img src=\"https://avatars.githubusercontent.com/u/140235921?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ethan Parker</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n    </tr>\n    <tr>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lukevanin\"><img src=\"https://avatars.githubusercontent.com/u/550579?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Luke Van In</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://mustafataibah.vercel.app/\"><img src=\"https://avatars.githubusercontent.com/u/83141712?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mustafa Taibah</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vkondrashkov\"><img src=\"https://avatars.githubusercontent.com/u/16046780?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vladislav Kondrashkov</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n    </tr>\n  </tbody>\n</table>\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Tuist Project Authentication Token (Bash)\nDESCRIPTION: Bash command to generate a project-scoped authentication token for Tuist Cloud, replacing `my-handle/MyApp` with the actual project handle. This token is necessary for authenticating requests from CI environments for server-side features like caching. The generated token should be stored securely as the `TUIST_CONFIG_TOKEN` environment variable in the CI settings.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/automate/continuous-integration.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntuist project tokens create my-handle/MyApp\n```\n\n----------------------------------------\n\nTITLE: Resolving Swift Package Dependencies with Tuist Registry (Bash)\nDESCRIPTION: This command resolves the dependencies specified in the Swift package's Package.swift file. The --replace-scm-with-registry flag instructs the Swift Package Manager to attempt to resolve dependencies from the Tuist Registry if available, falling back to the standard source control if not found in the registry. It's a temporary flag for a single command execution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry/swift-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswift package --replace-scm-with-registry resolve\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Mise (JSON configuration for MCP setup)\nDESCRIPTION: This JSON snippet demonstrates setting up the MCP server for Mise installation by specifying the command, arguments to install or update Tuist, and start the MCP server.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/ai/mcp.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"mise\",\n      \"args\": [\"x\", \"tuist@latest\", \"--\", \"tuist\", \"mcp\", \"start\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Tuist Project (Bash)\nDESCRIPTION: Runs the `tuist init` command in the terminal. This initiates an interactive walkthrough to either create a new Tuist-managed project or integrate Tuist into an existing Xcode project or workspace. It also facilitates connecting the setup to Tuist's remote server for features like selective testing and caching.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/get-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist init\n```\n\n----------------------------------------\n\nTITLE: Building And Testing Tuist Project Bash\nDESCRIPTION: Provides a sequence of shell commands (`tuist install`, `tuist generate`, `tuist build` or `tuist test`) to integrate Tuist into a continuous integration (CI) pipeline. These commands fetch dependencies, generate the Xcode project, and then build or test the project, allowing for the inclusion of `xcodebuild` flags.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\ntuist generate\ntuist build -- ...{xcodebuild flags} # or tuist test\n```\n\n----------------------------------------\n\nTITLE: Running Selective UI Tests with Tuist test\nDESCRIPTION: These commands demonstrate how to execute selective UI tests using the `tuist test` command by specifying the target device destination. Providing a destination is a prerequisite for Tuist to perform selective testing on UI test targets. Various formats for specifying the destination are shown, including by device name or simulator ID.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/selective-testing/generated-project.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntuist test --device 'iPhone 14 Pro'\n# or\ntuist test -- -destination 'name=iPhone 14 Pro'\n# or\ntuist test -- -destination 'id=SIMULATOR_ID'\n```\n\n----------------------------------------\n\nTITLE: Updating Xcode project settings in `Project.swift`\nDESCRIPTION: This code snippet shows how to link the extracted `.xcconfig` file to the project configurations within \"Project.swift\", standardizing build settings and externalizing them from the project file for easier management and migration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\"),\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\")\n    ]),\n    targets: [\n        /** Targets go here **/\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuist Project with Remote SPM Packages in Swift\nDESCRIPTION: Demonstrates how to instantiate a Tuist `Project` object in Swift, declaring remote Swift Package Manager dependencies using the `packages` array. Each entry uses `.remote` specifying the package URL and `requirement` for version control (e.g., `.exact`).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(name: \"MyProject\", packages: [\n    .remote(url: \"https://github.com/krzyzanowskim/CryptoSwift\", requirement: .exact(\"1.8.0\"))\n])\n```\n\n----------------------------------------\n\nTITLE: Defining a Project Description Helper Plugin\nDESCRIPTION: This snippet demonstrates the basic structure of a project description helper plugin, defined by a `Plugin.swift` manifest.  The manifest declares the plugin's name, which is used to reference the helpers within other projects.  The plugin depends on the `ProjectDescription` framework. The `ProjectDescriptionHelpers` directory contains actual helper files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/plugins.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\\n├── ...\\n├── Plugin.swift\\n├── ProjectDescriptionHelpers\\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Framework in Swift for Tuist\nDESCRIPTION: This snippet illustrates how to define a static framework target in a Tuist project using Swift, specifying its name, platform, product type, dependencies, and source files. It enables modular code development and reuse within the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/fixtures/ios_app_with_framework_and_resources/StaticFramework2/Resources/StaticFramework2Resources-text.txt#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet staticFramework = Target(\n    name: \"MyStaticFramework\",\n    platform: .iOS,\n    product: .staticFramework,\n    bundleId: \"com.example.mystaticframework\",\n    infoPlist: .default,\n    sources: [\"Sources/**\"],\n    dependencies: []\n)\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image with Authentication\nDESCRIPTION: This snippet demonstrates how to authenticate to a private container registry and pull a Docker image. It uses the `docker login` command with a token passed via stdin for authentication and then pulls the image using `docker pull`. This is essential for deploying Tuist server.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/server/on-premise/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $TOKEN | docker login ghcr.io -u USERNAME --password-stdin\ndocker pull ghcr.io/tuist/tuist:latest\n```\n\n----------------------------------------\n\nTITLE: Consuming an SPM Dependency in SwiftUI Code - Swift\nDESCRIPTION: Demonstrates the use of an imported dependency (Kingfisher) by instantiating a KFImage view that loads and displays a remote image within a SwiftUI ContentView. Requires Kingfisher to be declared as a package dependency and properly linked. Input is a valid image URL; output is a runtime SwiftUI interface displaying the loaded image alongside greeting text and padding. Limitations: assumes network connectivity and URL validity.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/add-dependencies.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport Kingfisher // [!code ++]\n\npublic struct ContentView: View {\n    public init() {}\n\n    public var body: some View {\n        Text(\"Hello, World!\") // [!code --]\n            .padding() // [!code --]\n        KFImage(URL(string: \"https://cloud.tuist.io/images/tuist_logo_32x32@2x.png\")!) // [!code ++]\n    }\n}\n\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Translating GitHub Alerts in Markdown\nDESCRIPTION: Demonstrates the correct way to translate GitHub alert blocks in Markdown for Tuist documentation. Only the title and content should be translated, leaving the alert type (`[!WARNING]`) untranslated. An incorrect example is provided for clarity.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/contributors/translate.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    > [!WARNING] 루트 변수\n    > 매니페스트의 루트에 있어야 하는 변수는...\n\n    // Instead of\n    > [!주의] 루트 변수\n    > 매니페스트의 루트에 있어야 하는 변수는...\n    ```\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh for Manual Completions\nDESCRIPTION: Configures the Zsh environment for loading custom completion scripts without oh-my-zsh. It adds a custom completion directory (`~/.zsh/completion`) to the function path (`fpath`) and initializes the completion system using `autoload` and `compinit`. These lines should be added to the `~/.zshrc` file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/cli/shell-completions.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nfpath=(~/.zsh/completion $fpath)\nautoload -U compinit\ncompinit\n```\n\n----------------------------------------\n\nTITLE: Using a Plugin (Tuist.swift)\nDESCRIPTION: This snippet demonstrates adding a plugin to a project's `Tuist.swift` manifest file to use local plugins. It imports the `ProjectDescription` framework and specifies the plugin using the `.local` method.  The path specifies the plugin's location. Then running `tuist install` will fetch plugins.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/plugins.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\\n\\n\\nlet tuist = Tuist(\\n    project: .tuist(plugins: [\\n        .local(path: \"/Plugins/MyPlugin\")\\n    ])\\n)\n```\n\n----------------------------------------\n\nTITLE: Create and Unlock Keychain for CI - Bash\nDESCRIPTION: This bash script creates a new keychain, sets its settings, makes it the default, and unlocks it. This is necessary for storing and accessing Tuist Registry credentials in CI environments that require Xcode integration of packages.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry/continuous-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTMP_DIRECTORY=$(mktemp -d)\nKEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\nKEYCHAIN_PASSWORD=$(uuidgen)\nsecurity create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\nsecurity set-keychain-settings -lut 21600 $KEYCHAIN_PATH\nsecurity default-keychain -s $KEYCHAIN_PATH\nsecurity unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n```\n\n----------------------------------------\n\nTITLE: Generating Tuist Zsh Completion Script (Manual Setup)\nDESCRIPTION: Generates the Tuist completion script using the `--generate-completion-script` flag and saves it to a custom Zsh completion directory (`~/.zsh/completion/_tuist`). This method is used when not using oh-my-zsh and requires prior configuration of the Zsh environment to load scripts from this path.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/cli/shell-completions.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist --generate-completion-script > ~/.zsh/completion/_tuist\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Tuist Plugin Helpers in Project.swift (Swift)\nDESCRIPTION: Illustrates how to import and utilize helpers defined within a project description helper plugin. After configuring the plugin in `Tuist.swift`, its helpers become available under a module named after the plugin (e.g., `MyTuistPlugin`), which can be imported in `Project.swift`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/plugins.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\nimport MyTuistPlugin\nlet project = Project.app(name: \"MyCoolApp\", platform: .iOS)\n```\n\n----------------------------------------\n\nTITLE: Defining iOS Unit Tests with Bazel (BUILD)\nDESCRIPTION: This snippet illustrates the configuration in a Bazel BUILD file for defining an iOS unit test target. It specifies the test target's name, bundle ID, minimum OS version, the host application it tests against, and its dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nios_unit_test(\n    name: \"MyLibraryTests\",\n    bundle_id: \"io.tuist.MyLibraryTests\",\n    minimum_os_version: \"16.0\",\n    test_host: \"//MyApp:MyLibrary\",\n    deps: [\":MyLibraryTests.library\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Resource Accessor Plugin - Bash\nDESCRIPTION: This snippet illustrates the expected directory structure for a Tuist resource accessor templates plugin. It requires a `Plugin.swift` manifest file at the top level and a `ResourceSynthesizers` subdirectory containing the Stencil template files for different resource types (e.g., Strings, Plists).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/plugins.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n.\n├── ...\n├── Plugin.swift\n├── ResourceSynthesizers\n├───── Strings.stencil\n├───── Plists.stencil\n├───── CustomTemplate.stencil\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Repeating target migration until completion\nDESCRIPTION: Encourages iterative migration of all targets, starting with the most dependent ones, and recommends updating continuous integration pipelines to leverage Tuist. This process ensures a consistent, optimized project configuration with improved build speed and reliability.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Using the 'Kingfisher' Library in SwiftUI Application\nDESCRIPTION: This Swift code modifies the 'ContentView' to import Kingfisher and display an image from a URL using 'KFImage'. It demonstrates how to incorporate an external dependency into the application code, displaying an image loaded asynchronously from the web within a SwiftUI view.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/add-dependencies.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport Kingfisher // [!code ++]\n\npublic struct ContentView: View {\n    public init() {}\n\n    public var body: some View {\n        Text(\"Hello, World!\") // [!code --]\n            .padding() // [!code --]\n        KFImage(URL(string: \"https://cloud.tuist.io/images/tuist_logo_32x32@2x.png\")!) // [!code ++]\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setup Organization SSO with Google Provider in Tuist CLI\nDESCRIPTION: This snippet demonstrates how to configure Tuist organization single sign-on (SSO) with a Google Workspace provider, associating a domain with your organization. It requires the CLI to be authenticated with Google and uses the `tuist organization update sso` command with provider and organization ID parameters. Dependencies include prior authentication and correct domain info.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/server/introduction/authentication.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider google --organization-id my-google-domain.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh for Completion Loading\nDESCRIPTION: These commands add the completion script path to Zsh and configure the autoloading of completion scripts.  It updates the `fpath` variable to include the `~/.zsh/completion` directory where the completion scripts are saved and then calls `autoload -U compinit` and `compinit` to initialize the completion system. These commands ensure the completion scripts are loaded when Zsh starts.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/cli/shell-completions.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nfpath=(~/.zsh/completion $fpath)\nautoload -U compinit\ncompinit\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh Environment for Custom Completions\nDESCRIPTION: Adds a custom completions directory (`~/.zsh/completion`) to the Zsh function path (`fpath`) and enables the completion system using `autoload` and `compinit`. These lines should be added to the `~/.zshrc` file when not using oh-my-zsh.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/cli/shell-completions.md#_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nfpath=(~/.zsh/completion $fpath)\nautoload -U compinit\ncompinit\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuist Resource Accessor Template Plugin Manifest (Plugin.swift)\nDESCRIPTION: Shows the Swift code required within a `Plugin.swift` file to declare a resource accessor templates plugin. Similar to other plugin types, it imports `ProjectDescription` and defines a `Plugin` constant with the plugin's name.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/plugins.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet plugin = Plugin(name: \"MyPlugin\")\n```\n\n----------------------------------------\n\nTITLE: Installing External Dependencies with Tuist CLI (Bash)\nDESCRIPTION: Executes the `tuist install` command to process the dependency manifest (like `Tuist/Package.swift`). This resolves package versions, fetches source code or binaries, and prepares them for integration into the generated Xcode project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dependencies.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntuist install\n# Resolving and fetching dependencies. {#resolving-and-fetching-dependencies}\n# Installing Swift Package Manager dependencies. {#installing-swift-package-manager-dependencies}\n```\n\n----------------------------------------\n\nTITLE: Generating and Visualizing Dependency Graph with Tuist - Bash\nDESCRIPTION: This bash command uses Tuist to visualize the project's dependency graph. When run, it generates a PNG file representing the project's structure and opens it. Tuist must be installed and initialized in the project. Input: none; Output: A visual diagram at 'graph.png'.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/add-dependencies.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist graph\n\n```\n\n----------------------------------------\n\nTITLE: Project Generation with Tuist\nDESCRIPTION: These commands demonstrate how to generate Xcode projects using Tuist with various options related to binary caching. The first three commands generate the project while utilizing the binary cache for dependencies, and optionally for specified targets. The last command generates the project without using the binary cache at all.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/cache.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate # Only dependencies\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Search # Dependencies + Search dependencies\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Search Settings # Dependencies, and Search and Settings dependencies\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate --no-binary-cache # No cache at all\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Settings (Shell)\nDESCRIPTION: This shell snippet is used in a CI pipeline to verify that changes to build settings are made directly to the `.xcconfig` files and that settings are not directly in the Xcode project itself. The `tuist migration check-empty-settings` command will check for and flag any such settings.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ntuist migration check-empty-settings -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Updating Cache Skipping in `tuist generate` (Bash)\nDESCRIPTION: Illustrates the change in skipping the binary cache for specific targets with `tuist generate` in Tuist 4. The `--skip-cache` flag (used in v3, shown as 'Before') is removed; instead, targets to exclude from caching are now passed directly as arguments to the command (shown as 'After').\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/references/migrations/from-v3-to-v4.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate --skip-cache Foo\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Foo\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Project in Tuist using Swift\nDESCRIPTION: This snippet shows how to define a simple Xcode project with a single target using Tuist's DSL in Project.swift. It replaces the Package.swift file and specifies project metadata, target details, and source files dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"App\",\n    targets: [\n        .target(\n            name: \"App\",\n            destinations: .iOS,\n            product: .app,\n            bundleId: \"io.tuist.App\",\n            sources: [\"Sources/**/*.swift\"]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies via CLI\nDESCRIPTION: This bash command is used to resolve and fetch the dependencies defined in `Package.swift` into the `Tuist/Dependencies` directory.  It acts similarly to `pod install` for CocoaPods and allows developers to manage when dependencies are fetched and updated.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\n# Resolving and fetching dependencies. {#resolving-and-fetching-dependencies}\n# Installing Swift Package Manager dependencies. {#installing-swift-package-manager-dependencies}\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Environment Variables with tuist generate (Bash)\nDESCRIPTION: Illustrates how to set multiple environment variables simultaneously (`TUIST_APP_NAME` and `TUIST_APP_LOCALE`) when executing the `tuist generate` command. The variables are separated by spaces and are accessible within the project manifests during generation. Requires the Tuist CLI installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/dynamic-configuration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTUIST_APP_NAME=MyApp TUIST_APP_LOCALE=pl tuist generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude for Global Tuist MCP Server (JSON)\nDESCRIPTION: JSON configuration snippet for Claude Desktop (`claude_desktop_config.json`) to integrate with a globally installed Tuist MCP server (e.g., via Homebrew). It specifies the 'tuist' command with 'mcp start' arguments to launch the Tuist MCP server process.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/ai/mcp.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"tuist\",\n      \"args\": [\"mcp\", \"start\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Scheme Tests with Tuist CLI\nDESCRIPTION: This snippet demonstrates how to execute tests for a specific scheme using the `tuist test` command.  The command utilizes the `MyScheme` parameter to specify the scheme for which tests should be run. The command will generate the project if it's needed and runs tests with the platform-specific build tool.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/test.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist test MyScheme\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Target Product Type in Tuist (Swift)\nDESCRIPTION: Defines a Swift helper function within a Tuist manifest (`Project.swift`) to dynamically determine the target product type (`.staticFramework` or `.framework`) based on an environment variable `linking` accessed via `Environment.linking`. This allows switching between static and dynamic linking at generation time (e.g., `tuist generate -DLINKING=static`).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/dependencies.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\n// Use the value returned by this function to set the product type of your targets.\nfunc productType() -> Product {\n    if case let .string(linking) = Environment.linking {\n        return linking == \"static\" ? .staticFramework : .framework\n    } else {\n        return .framework\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image with Token Authentication\nDESCRIPTION: This snippet demonstrates how to pull a Docker image from a private registry using a personal access token for authentication. It uses `docker login` with the token passed via stdin and then pulls the specified image.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/server/on-premise/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $TOKEN | docker login ghcr.io -u USERNAME --password-stdin\ndocker pull ghcr.io/tuist/tuist:latest\n```\n\n----------------------------------------\n\nTITLE: Resolving Swift Package Dependencies with Tuist Registry (Bash)\nDESCRIPTION: This Bash command resolves Swift package dependencies using the `swift package resolve` command with the `--replace-scm-with-registry` flag. This flag instructs SwiftPM to prioritize resolving dependencies from the Tuist Registry if they are available there, overriding the standard SCM source temporarily for this specific command execution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry/swift-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswift package --replace-scm-with-registry resolve\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables using Bash\nDESCRIPTION: This snippet demonstrates how to set environment variables when running Tuist commands. The `TUIST_APP_NAME` variable is set to \"MyApp\", and the `tuist generate` command is executed. Multiple variables can be specified separated by spaces.  The example shows setting both `TUIST_APP_NAME` and `TUIST_APP_LOCALE`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dynamic-configuration.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nTUIST_APP_NAME=MyApp tuist generate\n```\n\n----------------------------------------\n\nTITLE: Configuring an Xcode Workspace with Swift in Workspace.swift\nDESCRIPTION: This snippet demonstrates creating a `Workspace` object, which includes a list of project paths to be aggregated into a single workspace. It leverages Swift syntax to specify project locations and utilizes Tuist to automatically manage dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/manifests.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// Workspace.swift\nimport ProjectDescription\n\nlet workspace = Workspace(\n    name: \"App-Workspace\",\n    projects: [\n        \"./App\" // Path to directory containing Project.swift\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Building All Schemes without Cache with Tuist - Bash\nDESCRIPTION: This bash script executes the `tuist build` command without using the binary cache. The `--no-binary-cache` flag disables cache usage. It relies on the project being set up with Tuist. The command builds all schemes without using the binary cache and generates the output based on the underlying build tool.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist build --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist Configuration File in Swift\nDESCRIPTION: A minimal Tuist configuration manifest that creates an empty Tuist object. This file, `Tuist.swift`, is used by Tuist to identify the root of the project and trigger project loading and editing features. It is a prerequisite for Tuist to function properly in manual setups.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/new-project.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for a Project Description Helper Plugin\nDESCRIPTION: This snippet illustrates the expected directory layout for a project description helper plugin, which contains a Plugin.swift manifest and a ProjectDescriptionHelpers directory with helper Swift files. It ensures proper organization for plugin recognition by Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/plugins.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── ...\n├── Plugin.swift\n├── ProjectDescriptionHelpers\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Generating Bash Completion Script\nDESCRIPTION: This command uses `tuist --generate-completion-script` to create a Bash completion script and redirects it to `/usr/local/etc/bash_completion.d/_tuist`.  It is designed to work with `bash-completion` and places the script in a standard location for completion scripts within the `bash-completion` framework. This enables automatic completion for the Tuist CLI in Bash shells.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/cli/shell-completions.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ntuist --generate-completion-script > /usr/local/etc/bash_completion.d/_tuist\n```\n\n----------------------------------------\n\nTITLE: Define iOS Unit Tests in Bazel (Starlark)\nDESCRIPTION: This snippet illustrates how to define an iOS unit test target in Bazel using the `ios_unit_test` rule. It includes configuration for the target name, bundle identifier, minimum OS version, test host, and dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nios_unit_test(\n    name = \"MyLibraryTests\",\n    bundle_id = \"io.tuist.MyLibraryTests\",\n    minimum_os_version = \"16.0\",\n    test_host = \"//MyApp:MyLibrary\",\n    deps = [\":MyLibraryTests.library\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Tuist Registry (Bash)\nDESCRIPTION: Initializes the Tuist Registry configuration for a project and logs in the current user. This command generates necessary configuration files that should be committed to source control. Requires a Tuist account and project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/registry.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ntuist registry setup\n```\n\n----------------------------------------\n\nTITLE: Activating Tuist Versions with Mise\nDESCRIPTION: Commands for activating installed Tuist versions either at the project level or system-wide using Mise. Unlike Homebrew, Mise requires explicit activation of tool versions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/install-tuist.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise use tuist@x.y.z # 현재 프로젝트에서 tuist-x.y.z 사용\nmise use tuist@latest # 현재 디렉터리에서 최신 tuist를 사용합니다.\nmise use -g tuist@x.y.z # 시스템의 기본값으로 tuist-x.y.z 사용\nmise use -g tuist@system # 시스템의 tuist를 전역 기본값으로 사용합니다.\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist with Mise\nDESCRIPTION: Demonstrates installing Tuist using the Mise tool manager. It shows commands for installing the version specified in configuration files (`.tool-versions` or `.mise.toml`), a specific version (`x.y.z`), or a fuzzy version (e.g., latest `3.x`). Requires Mise to be installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/install-tuist.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise install tuist            # Install the current version specified in .tool-versions/.mise.toml\nmise install tuist@x.y.z      # Install a specific version number\nmise install tuist@3          # Install a fuzzy version number\n```\n\n----------------------------------------\n\nTITLE: Tuist generate with skip-cache flag\nDESCRIPTION: This is the Tuist 3 command. It shows how to use `tuist generate` with the `--skip-cache` flag to bypass the cache for a specific target. This command is used to force a fresh generation of the project for the 'Foo' target, ignoring any cached artifacts.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/references/migrations/from-v3-to-v4.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate --skip-cache Foo\n```\n\n----------------------------------------\n\nTITLE: Using the Tuist Scaffold Command to Generate Projects with a Template\nDESCRIPTION: Demonstrates how to invoke the `tuist scaffold` command to generate projects or features from a previously defined template, specifying parameters such as name and platform. The command supports optional arguments and utilizes templates with placeholders.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/templates.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntuist scaffold name_of_template --name Name --platform macos\n```\n\n----------------------------------------\n\nTITLE: Manual Directory Setup for Tuist Project in Bash\nDESCRIPTION: Commands to create a directory named \"MyFramework\" and change the current directory to it. These commands establish the folder structure for a manually created Tuist project. This step is a prerequisite for adding Tuist manifest files and configuring the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/new-project.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir MyFramework\ncd MyFramework\n```\n\n----------------------------------------\n\nTITLE: Logging in to the Tuist Registry\nDESCRIPTION: This bash command allows team members to log in to the Tuist Registry after the initial setup. It relies on the pre-generated configuration files from the 'tuist registry setup' command. The command does not require specific parameters and facilitates access to the Tuist registry for all project members.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/registry.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist registry login\n```\n\n----------------------------------------\n\nTITLE: Editing Project with Tuist Command-Line Interface - Bash\nDESCRIPTION: This command opens the current Swift project in an editable state using Tuist, which is required before modifying package dependencies. The command assumes Tuist is already installed in the environment. This prepares the project for immediate Xcode edits.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/add-dependencies.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist edit\n\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies using Tuist Registry (Bash)\nDESCRIPTION: This snippet demonstrates the use of the `swift package --replace-scm-with-registry resolve` command. This command replaces Source Control Management (SCM) dependencies with the registry dependencies for resolving dependencies from the registry. It takes no input, and the output is the resolved dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry/swift-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswift package --replace-scm-with-registry resolve\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash for Completion Loading\nDESCRIPTION: This snippet shows how to load a Bash completion script. It uses the `source` command to load a completion file. The example assumes the completion script is located at `~/.bash_completions/example.bash`. This command must be added to `.bash_profile` or `.bashrc` for the completion script to be loaded on shell startup.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/cli/shell-completions.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nsource ~/.bash_completions/example.bash\n```\n\n----------------------------------------\n\nTITLE: Setting OTHER_LDFLAGS in Tuist Target (Swift)\nDESCRIPTION: This code snippet demonstrates how to add the `-ObjC` flag to the `OTHER_LDFLAGS` build setting within a Tuist target. This is necessary when using Google libraries written in Objective-C. The flag is added to the base settings of the target.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nTarget.target(\n    ...\n    settings: .settings(\n        base: [\"OTHER_LDFLAGS\": \"$(inherited) -ObjC\"]\n    )\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Verify Tuist Binary Authenticity (Bash)\nDESCRIPTION: Verifies that the installed Tuist binaries were built by the official Tuist team by executing a script from the documentation website. The script checks the code signing certificate details. Requires `curl` and `bash` to be available and internet connectivity.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/install-tuist.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL \"https://docs.tuist.dev/verify.sh\" | bash\n```\n\n----------------------------------------\n\nTITLE: Extracting project build settings into `.xcconfig` files\nDESCRIPTION: Uses Tuist to export build settings from an Xcode project into an `.xcconfig` file, simplifying project configuration. After extraction, updates `Project.swift` to reference the generated `.xcconfig` files, streamlining build configuration management.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p xcconfigs/\ntuist migration settings-to-xcconfig -p MyApp.xcodeproj -x xcconfigs/MyApp-Project.xcconfig\n```\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp\",\n    settings: .settings(configurations: [\n        .debug(name: \"Debug\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\"), // [!code ++]\n        .release(name: \"Release\", xcconfig: \"./xcconfigs/MyApp-Project.xcconfig\") // [!code ++]\n    ]),\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Environment Variables to Tuist Generate (Bash)\nDESCRIPTION: Illustrates setting multiple environment variables (e.g., `TUIST_APP_NAME`, `TUIST_APP_LOCALE`) separated by spaces before the `tuist generate` command in Bash. These variables enable more complex dynamic configurations within manifests.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dynamic-configuration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTUIST_APP_NAME=MyApp TUIST_APP_LOCALE=pl tuist generate\n```\n\n----------------------------------------\n\nTITLE: Creating a Framework Project Manually\nDESCRIPTION: Defines a macOS framework project named MyFramework using the ProjectDescription framework.  It outlines the target configuration for the framework, including bundle identifier, source path, and dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/new-project.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyFramework\",\n    targets: [\n        .target(\n            name: \"MyFramework\",\n            destinations: .macOS,\n            product: .framework,\n            bundleId: \"io.tuist.MyFramework\",\n            sources: [\"MyFramework/Sources/**\"],\n            dependencies: []\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Workspace with Workspace.swift in Swift\nDESCRIPTION: This snippet shows how to define a Workspace.swift manifest to customize the Xcode workspace by specifying its name and explicitly including projects. Path references point to directories containing Project.swift files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/manifests.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// Workspace.swift\nimport ProjectDescription\n\nlet workspace = Workspace(\n    name: \"App-Workspace\",\n    projects: [\n        \"./App\", // Path to directory containing the Project.swift file\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a new project with Tuist CLI (Bash)\nDESCRIPTION: This snippet demonstrates how to create a new project in Tuist using the 'tuist project create' command followed by a project handle. It enables setting up a project for subsequent insights gathering and server connection.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/gather-insights.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist project create my-handle/MyApp\n\n# Tuist project my-handle/MyApp was successfully created 🎉 {#tuist-project-myhandlemyapp-was-successfully-created-}\n```\n\n----------------------------------------\n\nTITLE: Getting Boolean Environment Variables in Swift\nDESCRIPTION: This Swift snippet demonstrates how to retrieve a boolean value from an environment variable using a helper method.  This method requires a default value to be passed to ensure consistent results. It uses `.getBoolean(default: )` to access a boolean environment variable and provides a default value if not set.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dynamic-configuration.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nEnvironment.isCI.getBoolean(default: false)\n```\n\n----------------------------------------\n\nTITLE: Project.swift configuration file demonstrating reusability\nDESCRIPTION: Shows how to import custom helper modules and call the 'featureTargets' function to define targets, highlighting the reusability benefits of Swift and Tuist over YAML templates.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers // [!code highlight]\n\nlet project = Project(name: \"MyProject\",\n                      targets: Target.featureTargets(name: \"MyFeature\")) // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Resource Accessor Templates Plugin Manifest (Swift)\nDESCRIPTION: This snippet displays the contents of the `Plugin.swift` file, mandatory for resource accessor template plugins.  It imports `ProjectDescription` and initializes a `Plugin` object with the name of the plugin.  The plugin name is used to reference the templates.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/plugins.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\\n\\nlet plugin = Plugin(name: \"MyPlugin\")\n```\n\n----------------------------------------\n\nTITLE: Updating Tuist Project with GitHub Repository URL (Shell)\nDESCRIPTION: This shell command uses the `tuist project update` command to associate a specific Tuist project (identified by `tuist/tuist`) with its corresponding GitHub repository URL. This step is typically performed after installing the Tuist GitHub app to enable integration features.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/server/introduction/integrations.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntuist project update tuist/tuist --repository-url https://github.com/tuist/tuist\n```\n\n----------------------------------------\n\nTITLE: Example Standard Tuist Project Directory Structure (Bash)\nDESCRIPTION: Illustrates the typical directory layout for a standard Tuist project used to generate an Xcode project. It shows the location of key configuration files like Tuist.swift, Workspace.swift, Project.swift, and helper modules for shared code.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/directory-structure.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTuist.swift\nTuist/\n  Package.swift\n  ProjectDescriptionHelpers/\nProjects/\n  App/\n    Project.swift\n  Feature/\n    Project.swift\nWorkspace.swift\n```\n\n----------------------------------------\n\nTITLE: Defining Project Description Helper Plugin Manifest - Swift\nDESCRIPTION: This snippet shows the minimal content of the `Plugin.swift` manifest file required to define a project description helper plugin in Tuist. It imports the `ProjectDescription` framework and declares a `Plugin` instance with a specified name, which is used to identify the plugin.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/plugins.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet plugin = Plugin(name: \"MyPlugin\")\n```\n\n----------------------------------------\n\nTITLE: Specifying source files for the static framework in Tuist\nDESCRIPTION: This snippet shows how to designate specific source directories or files for inclusion in the static framework target, supporting modular and maintainable code organization within the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/fixtures/ios_app_with_framework_and_resources/StaticFramework2/Resources/StaticFramework2Resources-text.txt#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nlet staticFrameworkSources = Target(\n    name: \"MyStaticFramework\",\n    platform: .iOS,\n    product: .staticFramework,\n    bundleId: \"com.example.mystaticframework\",\n    infoPlist: .default,\n    sources: [\"Sources/Core/**\", \"Sources/Extensions/**\"],\n    dependencies: []\n)\n```\n\n----------------------------------------\n\nTITLE: Structure for Standalone Framework2 Project (Project Structure)\nDESCRIPTION: This snippet describes the structure of the standalone 'Framework2' project, which is designed to generate a prebuilt dynamic iOS framework. This framework is intended to be consumed as a binary dependency by other parts of the workspace, specifically by 'Framework1'.\nSOURCE: https://github.com/tuist/tuist/blob/main/fixtures/ios_app_with_transitive_framework/README.md#_snippet_1\n\nLANGUAGE: Project Structure\nCODE:\n```\n  - Framework2:\n    - Framework2 (dynamic iOS framework)\n```\n\n----------------------------------------\n\nTITLE: Generating Tuist Fish Completion Script\nDESCRIPTION: Creates the necessary completions directory for Fish shell (`~/.config/fish/completions`) if it doesn't exist, and then generates the Tuist completion script, saving it as `tuist.fish` within that directory. Requires Fish shell to be installed and assumes a global Tuist installation.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/cli/shell-completions.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.config/fish/completions\ntuist --generate-completion-script > ~/.config/fish/completions/tuist.fish\n```\n\n----------------------------------------\n\nTITLE: Defining Tuist Project Manifest Swift\nDESCRIPTION: Creates the main project manifest using the `Project` struct in the `Project.swift` file. It specifies the project name (`MyApp-Tuist`) and includes a placeholder for target definitions. This file is essential for Tuist to generate the Xcode project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp-Tuist\",\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Accessor Plugin Manifest - Swift\nDESCRIPTION: This snippet shows the minimal content of the `Plugin.swift` manifest file required to define a resource accessor templates plugin in Tuist. It imports the `ProjectDescription` framework and declares a `Plugin` instance with a specified name, used to identify the plugin.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/plugins.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet plugin = Plugin(name: \"MyPlugin\")\n```\n\n----------------------------------------\n\nTITLE: Defining Package Settings in Swift\nDESCRIPTION: This Swift code defines the `PackageSettings` instance to configure how packages are integrated into the Tuist project. It overrides the default product type for the Alamofire package to .framework.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\n#if TUIST\n    import ProjectDescription\n    import ProjectDescriptionHelpers\n\n    let packageSettings = PackageSettings(\n        productTypes: [\n            \"Alamofire\": .framework, // default is .staticFramework\n        ]\n    )\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Translating Markdown Headings with IDs\nDESCRIPTION: This snippet advises on translating markdown heading titles by translating the visible heading text but keeping the id attribute unchanged. This preserves linkable heading anchors used by the documentation system while allowing localized display text.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/contributors/translate.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Add dependencies {#add-dependencies}\n\n# 의존성 추가하기 {#add-dependencies}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic External Link with Vue Binding\nDESCRIPTION: This snippet creates an anchor tag that uses Vue's attribute binding to set the href attribute dynamically from the params.url value. The target attribute is set to 'blank' to open the link in a new tab.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/references/examples/[example].md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<a :href=\"params.url\" target=\"blank\">Check out example</a>\n```\n\n----------------------------------------\n\nTITLE: Translating Markdown Headings with IDs\nDESCRIPTION: Shows the correct procedure for translating Markdown headings that include an ID (`{#id}`). The heading text should be translated into the target language, but the ID itself must remain unchanged to preserve linking.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/contributors/translate.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Add dependencies {#add-dependencies}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n# 의존성 추가하기 {#add-dependencies}\n```\n\n----------------------------------------\n\nTITLE: User Login with Tuist CLI\nDESCRIPTION: This command initiates a web-based authentication flow for users to log in to the Tuist server. It stores refresh and access tokens in the `~/.config/tuist/credentials` directory, keyed by domain. The CLI automatically uses these credentials for subsequent requests.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/server/introduction/authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Type with Environment Variables (Bash)\nDESCRIPTION: This bash command demonstrates how to change the product type (e.g., static library or framework) at generation time using an environment variable. It sets the `TUIST_PRODUCT_TYPE` variable to determine the linking type.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/tma-architecture.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTUIST_PRODUCT_TYPE=static-library tuist generate\n```\n\n----------------------------------------\n\nTITLE: Rendering External Link to Tuist Example\nDESCRIPTION: Renders an anchor tag with a dynamic href attribute bound to the URL parameter. The link opens in a new tab and displays a standard text inviting users to check out the example.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/references/examples/[example].md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a :href=\"params.url\" target=\"blank\">Check out example</a>\n```\n\n----------------------------------------\n\nTITLE: Comparing XcodeGen and Tuist Directory Structures\nDESCRIPTION: Illustrates the typical directory structure and main configuration files for XcodeGen and Tuist. XcodeGen primarily uses a `project.yaml` file, whereas Tuist utilizes `Project.swift`, `Workspace.swift`, and potentially `Tuist.swift` files within the project directory.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n/\n  project.yaml\n```\n\nLANGUAGE: Bash\nCODE:\n```\n/\n  Tuist.swift\n  Project.swift\n  Workspace.swift\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Target Features in Tuist\nDESCRIPTION: Demonstrates Tuist's approach to code reusability using Swift modules instead of YAML templates. Creates helper functions to generate groups of related targets for features.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nextension Target {\n  /**\n    This function is a factory of targets that together represent a feature.\n  */\n  static func featureTargets(name: String) -> [Target] {\n    // ...\n  }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers // [!code highlight]\n\nlet project = Project(name: \"MyProject\",\n                      targets: Target.featureTargets(name: \"MyFeature\")) // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Validating target migration with build and test commands\nDESCRIPTION: This step involves running build and test commands via `tuist` to ensure that the migrated target works correctly. It promotes verification of project integrity after each migration step.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntuist build\n\ntuist test\n```\n\n----------------------------------------\n\nTITLE: Using Target features in Project.swift in Tuist\nDESCRIPTION: This Swift code demonstrates how to use the `featureTargets` function defined in `ProjectDescriptionHelpers` to create targets for a project. The `ProjectDescriptionHelpers` module is imported to access the function.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\nimport ProjectDescriptionHelpers // [!code highlight]\n\nlet project = Project(name: \"MyProject\",\n                      targets: Target.featureTargets(name: \"MyFeature\")) // [!code highlight]\n```\n\n----------------------------------------\n\nTITLE: Tuist macOS app for Preview management\nDESCRIPTION: This snippet explains using the Tuist macOS menu bar app to easily launch previews without CLI interaction, requiring authentication with `tuist auth login` and local Xcode installation to work properly.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/share/previews.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Project Directory Structure Example (Bash)\nDESCRIPTION: This snippet demonstrates a typical Tuist project structure. It shows the layout of files and directories, including Tuist.swift, ProjectDescriptionHelpers, Package.swift, and project-specific directories such as App and Feature.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/directory-structure.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTuist.swift\nTuist/\n  Package.swift\n  ProjectDescriptionHelpers/\nProjects/\n  App/\n    Project.swift\n  Feature/\n    Project.swift\nWorkspace.swift\n```\n\n----------------------------------------\n\nTITLE: Generating Projects with XcodeGen and Tuist\nDESCRIPTION: Compares the command-line commands used to generate Xcode projects and workspaces. XcodeGen uses `xcodegen generate`, while Tuist uses `tuist generate`. Tuist also offers an `edit` command for a quicker development cycle.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nxcodegen generate\n```\n\nLANGUAGE: Bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Uninstalling tuistenv using curl\nDESCRIPTION: Command to uninstall the `tuistenv`-based installation of Tuist using a curl command that pipes the uninstallation script to bash. This is a prerequisite step before installing Tuist v4, especially if migrating from a version managed by `tuistenv`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/references/migrations/from-v3-to-v4.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Ls https://uninstall.tuist.io | bash\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuist Project\nDESCRIPTION: This JavaScript snippet defines a Tuist project named \"MyApp-Tuist\". It imports the ProjectDescription module and creates a Project instance. The project currently contains an empty list of targets, which will be populated during the migration process. Adding the `-Tuist` suffix is recommended to avoid conflicts.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ProjectDescription\n\nlet project = Project(\n    name: \"MyApp-Tuist\",\n    targets: [\n        /** Targets will go here **/\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying Tuist Binaries Authenticity - Bash\nDESCRIPTION: This single-line bash command downloads and runs a verification script that checks the authenticity of the installed Tuist binaries. It ensures the binaries have not been tampered with and are trustworthy. This step is recommended after installation for security purposes.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/install-tuist.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL \"https://docs.tuist.dev/verify.sh\" | bash\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Keychain in Bash for CI Environments\nDESCRIPTION: This bash script creates a temporary macOS keychain on a CI environment, sets timeout parameters, makes it the default keychain, and unlocks it. It is necessary to store registry credentials securely when using Xcode integration with Tuist Registry. Dependencies include macOS security tools and UUID generation. The script outputs environment variables for keychain path and password used in subsequent steps.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry/continuous-integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTMP_DIRECTORY=$(mktemp -d)\nKEYCHAIN_PATH=$TMP_DIRECTORY/keychain.keychain\nKEYCHAIN_PASSWORD=$(uuidgen)\nsecurity create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\nsecurity set-keychain-settings -lut 21600 $KEYCHAIN_PATH\nsecurity default-keychain -s $KEYCHAIN_PATH\nsecurity unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH\n```\n\n----------------------------------------\n\nTITLE: Pull/Merge Request Comments Integration\nDESCRIPTION: This snippet describes configuring Tuist to post preview links as comments on pull requests in Git platforms like GitHub, enhancing review workflows by providing automatic, easy access to build versions for testers.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/share/previews.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Listing Project Targets (Shell)\nDESCRIPTION: This shell command lists the targets in an Xcode project, sorted by the number of dependencies. This is useful for determining the order in which targets should be migrated to Tuist, starting with the most dependent ones.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ntuist migration list-targets -p Project.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Update Organization SSO Settings\nDESCRIPTION: These commands update the organization's Single Sign-On (SSO) settings.  The first command configures Google Workspace SSO by specifying the organization and Google domain. The second command configures Okta SSO using the organization and Okta domain.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/server/introduction/authentication.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider google --organization-id my-google-domain.com\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider okta --organization-id my-okta-domain.com\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directories Manually in Bash\nDESCRIPTION: These Bash commands create a new directory named \"MyFramework\" and change the current working directory into it. This is the initial step for manually setting up a Tuist project structure without using `tuist init`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/new-project.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir MyFramework\ncd MyFramework\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for a Tuist Project Description Helper Plugin\nDESCRIPTION: Illustrates the required directory layout for a project description helper plugin. It must contain a `Plugin.swift` manifest file and a `ProjectDescriptionHelpers` directory where the shared helper Swift files reside.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/plugins.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n.\n├── ...\n├── Plugin.swift\n├── ProjectDescriptionHelpers\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Defining Tuist Configuration - Tuist.swift - Swift\nDESCRIPTION: This snippet demonstrates the content of a `Tuist.swift` file. This file imports the ProjectDescription framework and creates a basic `Tuist()` instance, serving as a configuration file and marking the root directory of the Tuist project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: README badge configuration for Tuist Previews\nDESCRIPTION: This snippet provides markdown code for embedding a badge in your README file to display the latest Tuist Preview status, customizable with your project account and handle.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/share/previews.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[![Tuist Preview](https://tuist.dev/{account-handle}/{project-handle}/previews/latest/badge.svg)](https://tuist.dev/{account-handle}/{project-handle}/previews/latest)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Swift Version for Hashing in Terminal\nDESCRIPTION: Command used by Tuist to obtain the Swift version for hashing during the binary caching process. This prevents compilation errors due to Swift version mismatches between targets and binaries.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/hashing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/xcrun swift --version\n```\n\n----------------------------------------\n\nTITLE: Creating Tuist Project Configuration in Tuist.swift\nDESCRIPTION: This snippet defines the Tuist project setup in a dedicated Tuist.swift file, which contains the project configuration object. It replaces the need for a Package.swift for project structure, serving as the main configuration entry point.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/swift-package.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Importing Project Description Helpers in Manifest Files\nDESCRIPTION: Example of how to import project description helpers in a manifest file. The ProjectDescriptionHelpers module is compiled from files in the Tuist/ProjectDescriptionHelpers directory and can be imported in Project.swift, Package.swift, and Workspace.swift manifests.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/code-sharing.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Project.swift\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n```\n\n----------------------------------------\n\nTITLE: Install Tuist using Mise (Bash)\nDESCRIPTION: Installs the Tuist command-line interface using the Mise version manager. It shows commands to install the version specified in configuration, a specific version number, or a fuzzy version. Requires Mise to be installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/install-tuist.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise install tuist            # Install the current version specified in .tool-versions/.mise.toml\nmise install tuist@x.y.z      # Install a specific version number\nmise install tuist@3          # Install a fuzzy version number\n```\n\n----------------------------------------\n\nTITLE: Defining Tuist Project Settings Swift\nDESCRIPTION: Defines project-specific settings for Tuist using the `Tuist()` struct in the `Tuist.swift` file. This file is optional but allows customizing project-scoped behavior beyond the main `Project.swift` manifest.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Environment Variables using Bash\nDESCRIPTION: This code shows how to set multiple environment variables using the bash command line. The commands will pass configuration to the Tuist process. These environment variables can then be accessed in the manifest files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/dynamic-configuration.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nTUIST_APP_NAME=MyApp TUIST_APP_LOCALE=pl tuist generate\n```\n\n----------------------------------------\n\nTITLE: Cloning the TootSDK repository using git\nDESCRIPTION: This script clones the TootSDK repository from GitHub and navigates into the project directory. It is necessary to set up the project environment before managing dependencies with Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/swift-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TootSDK/TootSDK\ncd TootSDK\n```\n\n----------------------------------------\n\nTITLE: Setting up Tuist Registry\nDESCRIPTION: Command to set up Tuist Registry in your project directory. This creates necessary registry configuration files and logs in to the registry. The generated files should be committed to the repository for team access.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/registry.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist registry setup\n```\n\n----------------------------------------\n\nTITLE: Inspect Implicit Imports with Tuist\nDESCRIPTION: This command is used to inspect a Tuist project for implicit dependencies. It performs static analysis of the project's code and outputs any implicit imports it finds. The command exits with a non-zero exit code if implicit imports are detected.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/inspect/implicit-dependencies.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist inspect implicit-imports\n```\n\n----------------------------------------\n\nTITLE: Setting up Okta SSO for Tuist Organization\nDESCRIPTION: Command to configure Single Sign-On (SSO) with Okta for a Tuist organization. This is intended for on-premise customers and provides the same functionality as Google SSO.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/server/introduction/authentication.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider okta --organization-id my-okta-domain.com\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Workspace SSO for Tuist Organization\nDESCRIPTION: Command to configure Single Sign-On (SSO) with Google Workspace for a Tuist organization. This allows any user with the specified Google hosted domain to be automatically added to the organization.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/server/introduction/authentication.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider google --organization-id my-google-domain.com\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist Completion Script for Fish Shell\nDESCRIPTION: These commands create the Fish completions directory if needed and generate a Tuist completion script in the Fish shell's completion directory. This enables autocomplete functionality for Tuist commands in Fish shells.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/cli/shell-completions.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.config/fish/completions\ntuist --generate-completion-script > ~/.config/fish/completions/tuist.fish\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Tuist Deployment (YAML)\nDESCRIPTION: This snippet defines a `docker-compose.yml` file to set up the Tuist application with its dependencies.  It configures three services: `db` (PostgreSQL database), `pgweb` (database web UI), and `tuist` (the Tuist application). The configuration includes port mappings, volume mounts, environment variables, and health checks. This setup enables local or remote deployment via Docker.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/server/on-premise/install.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: timescale/timescaledb-ha:pg16\n    restart: always\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - PGDATA=/var/lib/postgresql/data/pgdata\n    ports:\n      - '5432:5432'\n    volumes:\n      - db:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  pgweb:\n    container_name: pgweb\n    restart: always\n    image: sosedoff/pgweb\n    ports:\n      - \"8081:8081\"\n    links:\n      - db:db\n    environment:\n      PGWEB_DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n    depends_on:\n      - db\n\n  tuist:\n    image: ghcr.io/tuist/tuist:latest\n    container_name: tuist\n    depends_on:\n      - db\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n      - \"443:443\"\n    expose:\n      - \"80\"\n      - \"8080\"\n      - \"443:443\"\n    environment:\n      # Base Tuist Env - https://docs.tuist.io/en/guides/dashboard/on-premise/install#base-environment-configuration\n      TUIST_USE_SSL_FOR_DATABASE: \"0\"\n      TUIST_LICENSE:  # ...\n      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n      TUIST_APP_URL: https://localhost:8080\n      TUIST_SECRET_KEY_BASE: # ...\n      WEB_CONCURRENCY: 80\n\n      # Auth - one method\n      # GitHub Auth - https://docs.tuist.io/en/guides/dashboard/on-premise/install#github\n      TUIST_GITHUB_OAUTH_ID:\n      TUIST_GITHUB_APP_CLIENT_SECRET:\n\n      # Okta Auth - https://docs.tuist.io/en/guides/dashboard/on-premise/install#okta\n      TUIST_OKTA_SITE:\n      TUIST_OKTA_CLIENT_ID:\n      TUIST_OKTA_CLIENT_SECRET:\n      TUIST_OKTA_AUTHORIZE_URL: # Optional\n      TUIST_OKTA_TOKEN_URL: # Optional\n      TUIST_OKTA_USER_INFO_URL: # Optional\n      TUIST_OKTA_EVENT_HOOK_SECRET: # Optional\n\n      # Storage\n      AWS_ACCESS_KEY_ID: # ...\n      AWS_SECRET_ACCESS_KEY: # ...\n      AWS_S3_REGION: # ...\n      AWS_ENDPOINT: # https://amazonaws.com\n      TUIST_S3_BUCKET_NAME: # ...\n\n      # Other\n\nvolumes:\n  db:\n    driver: local\n```\n\n----------------------------------------\n\nTITLE: Project folder structures for XcodeGen and Tuist\nDESCRIPTION: Shows the typical directory organization for XcodeGen with 'project.yaml' and for Tuist with 'Tuist.swift', 'Project.swift', and 'Workspace.swift' files, emphasizing the shift to Swift-based configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/\n  project.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n/\n  Tuist.swift\n  Project.swift\n  Workspace.swift\n```\n\n----------------------------------------\n\nTITLE: Defining Target features with ProjectDescriptionHelpers in Tuist\nDESCRIPTION: This Swift code defines a function that returns an array of targets representing a feature. It uses ProjectDescriptionHelpers to extend the Target class.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nextension Target {\n  /**\n    This function is a factory of targets that together represent a feature.\n  */\n  static func featureTargets(name: String) -> [Target] {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running all tests without binary cache\nDESCRIPTION: This command runs all tests in the project, bypassing the binary cache. This forces a full rebuild and test execution. It is useful for debugging or when the cache might be invalid.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/test.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist test --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Building Projects with Tuist CLI\nDESCRIPTION: Examples of using the 'tuist build' command to build projects with different options. These commands demonstrate building a specific scheme, using a custom configuration, and building all schemes without binary cache.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist build MyScheme\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist build MyScheme -- -configuration Debug\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist build --no-binary-cache\n```\n\n----------------------------------------\n\nTITLE: Creating Framework Directories with Bash\nDESCRIPTION: Provides Bash commands to create a directory for a new framework project (`MyFramework`) and navigate into it. This is the initial step for manually setting up a Tuist project structure on the command line.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/new-project.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir MyFramework\ncd MyFramework\n```\n\n----------------------------------------\n\nTITLE: Declaring a Plugin\nDESCRIPTION: This snippet shows how to declare a basic plugin using the `Plugin` struct from the `ProjectDescription` module.  The plugin is named \"MyPlugin\".  This is the foundation for all other plugin types.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/plugins.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet plugin = Plugin(name: \"MyPlugin\")\n```\n\n----------------------------------------\n\nTITLE: Sourcing Tuist Completion Script in Bash without bash-completion\nDESCRIPTION: This line sources a custom Tuist completion script in Bash. Add this to your bash profile or bashrc file to enable Tuist command autocomplete when bash-completion is not installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/cli/shell-completions.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.bash_completions/example.bash\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist with Mise\nDESCRIPTION: Commands for installing Tuist using Mise package manager. Mise allows for installing specific versions of Tuist and maintaining consistent tool versions across different environments.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/install-tuist.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise install tuist # .tool-versions/.mise.toml에 지정된 현재 버전을 설치합니다.\nmise install tuist@x.y.z # 특정 버전 설치\nmise install tuist@3 # 주요 버전 설치\n```\n\n----------------------------------------\n\nTITLE: XcodeGen and Tuist project generation commands\nDESCRIPTION: Demonstrates the command-line instructions to generate Xcode projects using both XcodeGen and Tuist, highlighting the quick edit feature of Tuist for on-the-fly project adjustments.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxcodegen generate\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Logging into Tuist Registry (Bash)\nDESCRIPTION: Logs the current user into the Tuist Registry using existing configuration files. This command is typically used by team members after the initial setup files have been committed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/registry.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist registry login\n```\n\n----------------------------------------\n\nTITLE: Running Scheme Tests with Tuist\nDESCRIPTION: This command runs the tests associated with a specified scheme within a Tuist project. Tuist will automatically generate the project if necessary before running the tests using the appropriate platform-specific build tool.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/test.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist test MyScheme\n```\n\n----------------------------------------\n\nTITLE: Fixing UpHomebrew Package Check in Setup.swift\nDESCRIPTION: Adjusts the UpHomebrew method to correctly verify installation of packages even when executable names differ from package names, ensuring reliable setup verification.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_32\n\nLANGUAGE: Swift\nCODE:\n```\nfunc checkPackageInstallation(packages: [String]) {\n  // Check logic that compares executable name and package\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into Tuist Registry\nDESCRIPTION: Command for team members to log in to Tuist Registry after the initial setup has been done. This allows all team members to access the registry for faster package resolution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/registry.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist registry login\n```\n\n----------------------------------------\n\nTITLE: Using a Template with the Scaffold Command\nDESCRIPTION: Example bash command showing how to use a defined template with the 'tuist scaffold' command. The command includes required and optional parameters that were defined in the template manifest.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/templates.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist scaffold name_of_template --name Name --platform macos\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode project with Tuist\nDESCRIPTION: This command invokes 'tuist generate' to create a native Xcode project based on the current project configuration and dependencies, enabling developers to open and work on the project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/swift-package.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Tuist Registry\nDESCRIPTION: Initializes the Tuist Registry configuration for the current project. This command generates necessary configuration files and logs the user into the registry. The generated files should be committed to the repository.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/registry.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist registry setup\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist Completion Script for Bash with bash-completion\nDESCRIPTION: This command generates a Tuist completion script and saves it to the bash-completion directory. This enables autocomplete functionality for Tuist commands in Bash shells with bash-completion installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/cli/shell-completions.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist --generate-completion-script > /usr/local/etc/bash_completion.d/_tuist\n```\n\n----------------------------------------\n\nTITLE: Connecting Local Project to Server in Swift\nDESCRIPTION: This Swift code modifies the Tuist.swift configuration file to connect a local project to the server project. The fullHandle parameter specifies which server project to send insights to.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/quick-start/gather-insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(fullHandle: \"my-handle/MyApp\")\n```\n\n----------------------------------------\n\nTITLE: Cloning a Swift Package repository\nDESCRIPTION: Commands to clone the TootSDK example repository and navigate to its directory. This is the first step in the process of using Tuist with an existing Swift Package.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/swift-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TootSDK/TootSDK\ncd TootSDK\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image for Tuist Cloud Deployment\nDESCRIPTION: Commands to authenticate with GitHub Container Registry and pull the Tuist Docker image using a personal access token.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/server/on-premise/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $TOKEN | docker login ghcr.io -u USERNAME --password-stdin\ndocker pull ghcr.io/tuist/tuist:latest\n```\n\n----------------------------------------\n\nTITLE: Translating Markdown Headings with IDs\nDESCRIPTION: Provides guidance on translating Markdown headings that include specific IDs. The heading text should be translated (e.g., 'Add dependencies' becomes '의존성 추가하기'), but the associated ID (`{#add-dependencies}`) must be preserved exactly as in the original source.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/contributors/translate.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Add dependencies {#add-dependencies}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n# 의존성 추가하기 {#add-dependencies}\n```\n\n----------------------------------------\n\nTITLE: Setting FBLPromises Product Type in Tuist Package.swift (Swift)\nDESCRIPTION: Shows how to configure the `productTypes` within `PackageSettings` in a `Tuist/Package.swift` file to explicitly set the product type for the `FBLPromises` dependency to `.framework`. This configuration helps prevent potential runtime crashes related to unrecognized selectors when using certain Google libraries that depend on FBLPromises.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/dependencies.md#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.10\n\nimport PackageDescription\n\n#if TUIST\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet packageSettings = PackageSettings(\n    productTypes: [\n        \"FPLPromises\": .framework,\n    ]\n)\n#endif\n\nlet package = Package(\n...\n```\n```\n\n----------------------------------------\n\nTITLE: User Authentication Login Command in Tuist CLI\nDESCRIPTION: This snippet details the command used for user login via the Tuist CLI, initiating a web-based authentication flow and storing credentials securely in the user's configuration directory. It ensures that requests to the server are authenticated using stored tokens, with automatic refresh handling. Dependencies include the Tuist CLI installed and network access for web-based login.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/server/introduction/authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Authenticating as a User with Tuist CLI\nDESCRIPTION: Command to authenticate with the Tuist server as a user through a web-based authentication flow. This stores credentials locally and automatically handles token refresh.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/server/introduction/authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Encoding Revision Kind in Package.swift\nDESCRIPTION: Modifies Package.swift to encode revision types properly as 'revision', ensuring correct version resolution in package dependencies.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_33\n\nLANGUAGE: Swift\nCODE:\n```\ncase .revision:\n    return \"revision\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Tuist Preview Badge to README - Markdown\nDESCRIPTION: This Markdown snippet displays a badge in a repository's README file that links to the latest Tuist app preview. Users must replace {account-handle} and {project-handle} with their own values. The badge gives visibility to the preview feature and outputs both a preview badge and a clickable link. No dependencies other than README edit permissions and valid Tuist preview URLs.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/share/previews.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[![Tuist Preview](https://tuist.dev/{account-handle}/{project-handle}/previews/latest/badge.svg)](https://tuist.dev/{account-handle}/{project-handle}/previews/latest)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Pulling Docker Image with Token (Bash)\nDESCRIPTION: This snippet demonstrates how to authenticate to the GitHub Container Registry (ghcr.io) using a personal access token and then pull the latest Tuist Docker image. It requires the Docker CLI and a personal access token stored in the `TOKEN` environment variable with appropriate permissions.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/server/on-premise/install.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\necho $TOKEN | docker login ghcr.io -u USERNAME --password-stdin\ndocker pull ghcr.io/tuist/tuist:latest\n```\n\n----------------------------------------\n\nTITLE: Changing Target Actions to Scripts for Xcode Alignment in Swift\nDESCRIPTION: This update renames `actions` to `scripts` in target definitions to align terminology with Xcode's build phases, improving clarity and consistency.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\ntarget.scripts.append(Script(...))\n```\n\n----------------------------------------\n\nTITLE: Displaying Tuist Success Message in Terminal\nDESCRIPTION: Terminal output from the Tuist build tool showing a successful app launch confirmation. The message uses special characters and emoji to convey status information.\nSOURCE: https://github.com/tuist/tuist/blob/main/Tests/TuistKitAcceptanceTests/__Snapshots__/ShareAcceptanceTests/test_share_ios_app_with_frameworks.2.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n▌ ✔ Success\n▌ App was successfully launched 📲\n```\n\n----------------------------------------\n\nTITLE: Accessing Bundle in Objective-C\nDESCRIPTION: This Objective-C code shows how to access a bundle for a target using a generated interface. The `{Target}Resources` interface allows for easy access to the bundle containing resources.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/synthesized-files.md#_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\nNSBundle *bundle = [MyFeatureResources bundle];\n```\n\n----------------------------------------\n\nTITLE: Headers Configuration with Umbrella Header\nDESCRIPTION: Implementation of the umbrellaHeader parameter to Headers to automatically get a list of public headers, along with new static functions for common use cases with umbrella headers.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\numbrellaHeader\n```\n\n----------------------------------------\n\nTITLE: Accessing Bundles in Objective-C\nDESCRIPTION: Shows how to access the target bundle in Objective-C using Tuist's synthesized interface. The interface is named after the target with 'Resources' appended to it.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/synthesized-files.md#_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\nNSBundle *bundle = [MyFeatureResources bundle];\n```\n\n----------------------------------------\n\nTITLE: Command Migration: Project Generation with Cache Skipping\nDESCRIPTION: Example showing the command syntax change for skipping cache when generating a project, comparing the before and after approaches in Tuist 4.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/references/migrations/from-v3-to-v4.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate --skip-cache Foo\n```\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate Foo\n```\n\n----------------------------------------\n\nTITLE: Simplifying TestAction Initialization in Swift\nDESCRIPTION: This refactoring combines redundant initialization methods of `TestAction` into a single static method accepting test plans and build configurations, improving usability.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nTestAction.testActions([Path], configuration: PresetBuildConfiguration)\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode project from a Swift Package with Tuist\nDESCRIPTION: Command to generate a native Xcode project from the Swift Package. This transforms the Package.swift targets into a fully functional Xcode project and targets.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/projects/adoption/swift-package.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Tuist\nDESCRIPTION: Resolves and installs the dependencies defined in the `Package.swift` file using the Swift Package Manager. Tuist converts these dependencies into Xcode projects and targets.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/add-dependencies.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ntuist install\n```\n\n----------------------------------------\n\nTITLE: Comparing Directory Structures in XcodeGen and Tuist\nDESCRIPTION: Illustrates the differences in directory structure between XcodeGen and Tuist projects. XcodeGen uses project.yaml while Tuist uses Swift files like Project.swift and Workspace.swift.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/\n  project.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\n/\n  Tuist.swift\n  Project.swift\n  Workspace.swift\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Tuist Server (bash)\nDESCRIPTION: Authenticates the current user with the Tuist server using their credentials. This is the first step required to interact with server-side features like gathering insights.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/gather-insights.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Transitioning `PresetBuildConfiguration` to `ConfigurationName`\nDESCRIPTION: This change replaces the `PresetBuildConfiguration` type with a more flexible `ConfigurationName`, supporting extension-based configurations and string literals, enhancing customization.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nSchemeAction(configuration: ConfigurationName)\n```\n\n----------------------------------------\n\nTITLE: Adding sourceRootPath Attribute in Project\nDESCRIPTION: Introduces the 'sourceRootPath' attribute to the Project model to specify the directory where Xcode project files are generated, allowing flexible project layout customization.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_38\n\nLANGUAGE: Swift\nCODE:\n```\nstruct Project {\n  var sourceRootPath: String\n}\n```\n\n----------------------------------------\n\nTITLE: Fail Generation on Non-Existent Directory in Glob\nDESCRIPTION: Breaks the project generation process if a source entry specifies a glob pattern that matches a non-existent directory, to avoid silent failures.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_39\n\nLANGUAGE: Swift\nCODE:\n```\nguard directory.exists else {\n  throw Error(\"Directory does not exist\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project with Tuist\nDESCRIPTION: This command generates a native Xcode project from the Swift Package, enabling direct development and editing within Xcode.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/swift-package.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project with Tuist\nDESCRIPTION: This command generates a native Xcode project from the Swift Package using Tuist. This allows developers to work with the package in a familiar Xcode environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/swift-package.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Adding Static Method `.settings()` for `Settings` Initialization in Swift\nDESCRIPTION: This pattern introduces a static method `.settings()` to initialize `Settings`, allowing for more flexible and backward-compatible API changes.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\nsettings: .settings(base: [\"setting\": \"value\"])\n```\n\n----------------------------------------\n\nTITLE: Project Description Helper Plugin Directory Structure\nDESCRIPTION: Shows the basic directory structure for a project description helper plugin, including the Plugin.swift manifest and ProjectDescriptionHelpers directory.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/plugins.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── ...\n├── Plugin.swift\n├── ProjectDescriptionHelpers\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Cloning the TootSDK Swift Package Repository\nDESCRIPTION: This snippet shows how to clone the TootSDK repository containing a Swift Package locally, preparing it for Tuist operations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/swift-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TootSDK/TootSDK\ncd TootSDK\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin Manifest in Swift\nDESCRIPTION: Defines a basic Plugin.swift manifest file that declares a plugin's name, which is required for all plugin types in Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/plugins.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet plugin = Plugin(name: \"MyPlugin\")\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Tuist\nDESCRIPTION: This command runs Tuist to install Swift Package Manager dependencies for the project, resolving and pulling all required packages.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/swift-package.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode project with Tuist\nDESCRIPTION: Generates the Xcode project after modifications in `Package.swift` or `Project.swift` manifests, allowing to open and build the project within Xcode.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/add-dependencies.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ntuist generate\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Package Dependencies with Tuist\nDESCRIPTION: This command uses Tuist to install the dependencies defined in the Package.swift file. Tuist leverages Swift Package Manager for dependency resolution.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/swift-package.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist install\n```\n\n----------------------------------------\n\nTITLE: Managing SceneKit and Asset Catalogs\nDESCRIPTION: Treats SceneKit catalog resources similarly to asset catalogs to unify resource handling within Xcode projects, simplifying asset management.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_34\n\nLANGUAGE: Swift\nCODE:\n```\nif resourceType == .scenekit {\n  // Handle SceneKit catalog\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Swift Package Cache Hashing for Module Maps in Swift\nDESCRIPTION: This update makes cache hashes for Swift Package Manager dependencies with module maps independent of project path, improving cache consistency.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Supporting Custom SF Symbols Generation in SwiftGen\nDESCRIPTION: This update enhances SwiftGen to support generating custom SF Symbols (`symbolset`), enabling developers to include custom vector assets in their assets catalog.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Passing Multiple Environment Variables in Tuist\nDESCRIPTION: Demonstrates how to pass multiple environment variables to Tuist during project generation by separating them with spaces.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dynamic-configuration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTUIST_APP_NAME=MyApp TUIST_APP_LOCALE=pl tuist generate\n```\n\n----------------------------------------\n\nTITLE: Merging `CustomConfiguration` with `Configuration` in Swift\nDESCRIPTION: This change merges `CustomConfiguration` into `Configuration` to simplify the API, reducing confusion, and streamlining configuration management.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\nlet configurations: [Configuration] = [ ... ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Tuist\nDESCRIPTION: This YAML snippet defines a Docker Compose configuration for deploying the Tuist service alongside a PostgreSQL database and a web interface for the database. It uses the `docker-compose.yml` format, specifying the version and defining three services: `db`, `pgweb`, and `tuist`. The `db` service uses the `timescale/timescaledb-ha:pg16` image, sets up PostgreSQL user/password, volume and port configurations. `pgweb` is a web interface linked to the database.  The `tuist` service leverages the `ghcr.io/tuist/tuist:latest` image, sets up environment variables like database URLs, SSL settings, and licensing, exposes ports for web access and dependencies on the database for startup.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/server/on-premise/install.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: timescale/timescaledb-ha:pg16\n    restart: always\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - PGDATA=/var/lib/postgresql/data/pgdata\n    ports:\n      - '5432:5432'\n    volumes:\n      - db:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  pgweb:\n    container_name: pgweb\n    restart: always\n    image: sosedoff/pgweb\n    ports:\n      - \"8081:8081\"\n    links:\n      - db:db\n    environment:\n      PGWEB_DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n    depends_on:\n      - db\n\n  tuist:\n    image: ghcr.io/tuist/tuist:latest\n    container_name: tuist\n    depends_on:\n      - db\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n      - \"443:443\"\n    expose:\n      - \"80\"\n      - \"8080\"\n      - \"443:443\"\n    environment:\n      # Base Tuist Env - https://docs.tuist.io/pt/guides/dashboard/on-premise/install#base-environment-configuration\n      TUIST_USE_SSL_FOR_DATABASE: \"0\"\n      TUIST_LICENSE:  # ...\n      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres?sslmode=disable\n      TUIST_APP_URL: https://localhost:8080\n      TUIST_SECRET_KEY_BASE: # ...\n      WEB_CONCURRENCY: 80\n\n      # Auth - one method\n      # GitHub Auth - https://docs.tuist.io/pt/guides/dashboard/on-premise/install#github\n      TUIST_GITHUB_OAUTH_ID:\n      TUIST_GITHUB_APP_CLIENT_SECRET:\n\n      # Okta Auth - https://docs.tuist.io/pt/guides/dashboard/on-premise/install#okta\n      TUIST_OKTA_SITE:\n      TUIST_OKTA_CLIENT_ID:\n      TUIST_OKTA_CLIENT_SECRET:\n      TUIST_OKTA_AUTHORIZE_URL: # Optional\n      TUIST_OKTA_TOKEN_URL: # Optional\n      TUIST_OKTA_USER_INFO_URL: # Optional\n      TUIST_OKTA_EVENT_HOOK_SECRET: # Optional\n\n      # Storage\n      AWS_ACCESS_KEY_ID: # ...\n      AWS_SECRET_ACCESS_KEY: # ...\n      AWS_S3_REGION: # ...\n      AWS_ENDPOINT: # https://amazonaws.com\n      TUIST_S3_BUCKET_NAME: # ...\n\n      # Other\n\nvolumes:\n  db:\n    driver: local\n```\n\n----------------------------------------\n\nTITLE: Setting up Tuist Registry with Bash\nDESCRIPTION: This command initializes the Tuist Registry configuration for the current project. It generates necessary configuration files (like `.tuist/config.json` and `.tuist/auth.json`) and automatically logs the user into the registry service. The generated configuration files should be committed to version control so other team members can use the registry.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/develop/registry.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ntuist registry setup\n```\n\n----------------------------------------\n\nTITLE: Headers Exclusion Rule Parameter\nDESCRIPTION: Implementation of the exclusionRule parameter to Headers to specify patterns for excluding certain header files from being included in a target.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nexclusionRule\n```\n\n----------------------------------------\n\nTITLE: RunAction and ProfileAction Pre/Post Actions\nDESCRIPTION: Addition of preActions and postActions parameters to RunAction and ProfileAction to allow executing scripts before and after running or profiling an application.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\npreActions and postActions\n```\n\n----------------------------------------\n\nTITLE: Passing Single Environment Variable in Tuist\nDESCRIPTION: Shows how to pass a single environment variable when generating a Tuist project, using the TUIST_APP_NAME variable as an example.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dynamic-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTUIST_APP_NAME=MyApp tuist generate\n```\n\n----------------------------------------\n\nTITLE: Using Resource Synthesizers from a Plugin\nDESCRIPTION: Demonstrates how to use a resource synthesizer from a plugin in a project definition, specifying the plugin name.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/plugins.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet project = Project(resourceSynthesizers: [.strings(plugin: \"MyPlugin\")])\n```\n\n----------------------------------------\n\nTITLE: Fixing Installation on Temporary Files in Swift\nDESCRIPTION: This fix addresses errors when temporary files exist during installation, ensuring robustness when handling intermediate files in `/tmp/`.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Debug Attachment Control for RunAction and TestAction\nDESCRIPTION: Implementation of attachDebugger parameter for RunAction and TestAction to control whether a debugger is attached to an app or test process.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nattachDebugger\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Tuist Server\nDESCRIPTION: Command to authenticate with the Tuist server, which is required before creating projects or gathering insights.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/quick-start/gather-insights.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntuist auth login\n```\n\n----------------------------------------\n\nTITLE: Adding `name` Parameter to Remote Cache API Calls in Swift\nDESCRIPTION: This enhancement allows specifying a `name` for remote cache operations, improving cache management and identification.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Fixing SwiftPackageManager Dependency Mapping on Xcode 13 in Swift\nDESCRIPTION: This change corrects dependency mapping issues specific to Xcode 13 in Swift, ensuring compatibility and correct dependency linkage.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Verifying Tuist binary files\nDESCRIPTION: Command for verifying the authenticity of Tuist binary files using a verification script hosted on the Tuist documentation site.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/quick-start/install-tuist.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL \"https://docs.tuist.dev/verify.sh\" | bash\n```\n\n----------------------------------------\n\nTITLE: Connecting local project to server by editing Tuist.swift (Swift)\nDESCRIPTION: This code snippet shows how to connect your local project to the server by editing 'Tuist.swift' and setting the full handle of the project. This enables gathering insights and reporting build results to the server.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/gather-insights.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist(fullHandle: \"my-handle/MyApp\")\n```\n\n----------------------------------------\n\nTITLE: Configure Tuist\nDESCRIPTION: This code configures Tuist to determine the root directory of the project using the `Tuist.swift` file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/new-project.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist with Mise\nDESCRIPTION: Command to install and initialize Tuist using the Mise version manager.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise x tuist@latest -- tuist init\n```\n\n----------------------------------------\n\nTITLE: Displaying URL Parameter as a Link with Vue.js\nDESCRIPTION: This Vue.js snippet uses the `:href` directive to create a hyperlink, targeting an external URL.  The URL is dynamically assigned the value of `params.url` which is obtained from the Vitepress setup. The target attribute is set to \"blank\", causing the link to open in a new tab/window. The URL is received from the data obtained from `useData()`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/references/examples/[example].md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<a :href=\"params.url\" target=\"blank\">예제 확인</a>\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Link with Vue Binding (HTML/Vue)\nDESCRIPTION: This template snippet creates an HTML anchor (`<a>`) element. The `href` attribute is dynamically bound using the Vue `v-bind` shorthand (`:`), linking to the URL stored in the `params.url` variable obtained from the VitePress `useData` hook. The link is configured to open in a new browser tab.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/references/examples/[example].md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a :href=\"params.url\" target=\"blank\">Check out example</a>\n```\n\n----------------------------------------\n\nTITLE: Fly.io Deployment Configuration File (TOML)\nDESCRIPTION: This TOML snippet provides a reference configuration file (`fly.toml`) for deploying the Tuist server on Fly.io. It defines the application name, region, process commands, service ports, health checks, and static asset paths required for the deployment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/server/on-premise/install.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\napp = \"tuist\"\nprimary_region = \"fra\"\nkill_signal = \"SIGINT\"\nkill_timeout = \"5s\"\n\n[experimental]\n  auto_rollback = true\n\n[env]\n  # Your environment configuration goes here\n  # Or exposed through Fly secrets\n\n[processes]\n  app = \"/usr/local/bin/hivemind /app/Procfile\"\n\n[[services]]\n  protocol = \"tcp\"\n  internal_port = 8080\n  auto_stop_machines = false\n  auto_start_machines = false\n  processes = [\"app\"]\n  http_options = { h2_backend = true }\n\n  [[services.ports]]\n    port = 80\n    handlers = [\"http\"]\n    force_https = true\n\n  [[services.ports]]\n    port = 443\n    handlers = [\"tls\", \"http\"]\n  [services.concurrency]\n    type = \"connections\"\n    hard_limit = 100\n    soft_limit = 80\n\n  [[services.http_checks]]\n    interval = 10000\n    grace_period = \"10s\"\n    method = \"get\"\n    path = \"/ready\"\n    protocol = \"http\"\n    timeout = 2000\n    tls_skip_verify = false\n    [services.http_checks.headers]\n\n[[statics]]\n  guest_path = \"/app/public\"\n  url_prefix = \"/\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tuist Server Project (bash)\nDESCRIPTION: Creates a new project on the Tuist server under the specified handle (e.g., 'my-handle/MyApp'). The command output includes the full project handle needed for connecting the local project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/quick-start/gather-insights.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist project create my-handle/MyApp\n\n# Tuist project my-handle/MyApp was successfully created 🎉 {#tuist-project-myhandlemyapp-was-successfully-created-}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Workspace SSO for Tuist Organization in Bash\nDESCRIPTION: Updates a specific Tuist organization ('my-organization') to enable Single Sign-On (SSO) using Google Workspace. This command links the Tuist organization to a specified Google hosted domain ('my-google-domain.com'), automatically adding users who sign in with that domain. Requires prior authentication with a Google account associated with the target domain.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/server/introduction/authentication.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider google --organization-id my-google-domain.com\n```\n\n----------------------------------------\n\nTITLE: Updating Organization SSO with Okta - Tuist CLI Bash\nDESCRIPTION: Configures SSO for a Tuist organization using Okta as the identity provider, suitable for on-premise customers. The user must provide the organization name, the provider (okta), and the Okta domain ID. Pre-authentication with the relevant Okta organization is assumed; command parameters must match the target organization's configuration.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/server/introduction/authentication.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider okta --organization-id my-okta-domain.com\n```\n\n----------------------------------------\n\nTITLE: Setup Organization SSO with Okta Provider in Tuist CLI\nDESCRIPTION: This snippet shows how to configure SSO for an on-premise setup using Okta, linking your domain with the Tuist organization. It assumes prior authentication with Google is not required and utilizes the same command with different provider and domain parameters. Essential for integrating identity providers in self-hosted environments.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/server/introduction/authentication.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntuist organization update sso my-organization --provider okta --organization-id my-okta-domain.com\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist via Homebrew (Bash)\nDESCRIPTION: This snippet demonstrates how to install Tuist using the Homebrew package manager on macOS. It first taps the official Tuist repository and then installs the `tuist` formula. Finally, it initializes a new Tuist project in the current directory using `tuist init`. Requires Homebrew to be installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap tuist/tuist\nbrew install --formula tuist\n\ntuist init\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist with Homebrew\nDESCRIPTION: Commands to install Tuist using Homebrew package manager and initialize a new Tuist project.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap tuist/tuist\nbrew install --formula tuist\n\ntuist init\n```\n\n----------------------------------------\n\nTITLE: Installing Tuist via Mise (Bash)\nDESCRIPTION: This snippet shows how to install and run the latest version of Tuist using the Mise tool manager. The `mise x tuist@latest -- tuist init` command temporarily installs or uses the latest cached version of Tuist to execute the `tuist init` command, initializing a new project. Requires Mise to be installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise x tuist@latest -- tuist init\n```\n\n----------------------------------------\n\nTITLE: Translate Custom Container Example\nDESCRIPTION: This snippet demonstrates the correct way to translate custom containers in markdown. Like GitHub alerts, the content and title should be translated, but the container type (e.g., warning) should remain in English.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/contributors/translate.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    ::: warning 루트 변수\\\n    매니페스트의 루트에 있어야 하는 변수는...\n    :::\n\n    # Instead of\n    ::: 주의 루트 변수\\\n    매니페스트의 루트에 있어야 하는 변수는...\n    :::\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuist\nDESCRIPTION: This JavaScript snippet initializes a Tuist project. It imports the ProjectDescription module and creates a Tuist instance. This serves as the entry point for defining project-scoped settings.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/guides/develop/projects/adoption/migrate/xcode-project.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ProjectDescription\n\nlet tuist = Tuist()\n```\n\n----------------------------------------\n\nTITLE: Fly.io Configuration (fly.toml)\nDESCRIPTION: This toml configuration file is used to deploy an application on Fly.io.  It specifies the app name, region, environment variables, processes, services, ports, concurrency, HTTP checks, and static file configurations.  It supports health checks and ensures the service is running.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/server/on-premise/install.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\napp = \"tuist\"\nprimary_region = \"fra\"\nkill_signal = \"SIGINT\"\nkill_timeout = \"5s\"\n\n[experimental]\n  auto_rollback = true\n\n[env]\n  # Your environment configuration goes here\n  # Or exposed through Fly secrets\n\n[processes]\n  app = \"/usr/local/bin/hivemind /app/Procfile\"\n\n[[services]]\n  protocol = \"tcp\"\n  internal_port = 8080\n  auto_stop_machines = false\n  auto_start_machines = false\n  processes = [\"app\"]\n  http_options = { h2_backend = true }\n\n  [[services.ports]]\n    port = 80\n    handlers = [\"http\"]\n    force_https = true\n\n  [[services.ports]]\n    port = 443\n    handlers = [\"tls\", \"http\"]\n  [services.concurrency]\n    type = \"connections\"\n    hard_limit = 100\n    soft_limit = 80\n\n  [[services.http_checks]]\n    interval = 10000\n    grace_period = \"10s\"\n    method = \"get\"\n    path = \"/ready\"\n    protocol = \"http\"\n    timeout = 2000\n    tls_skip_verify = false\n    [services.http_checks.headers]\n\n[[statics]]\n  guest_path = \"/app/public\"\n  url_prefix = \"/\"\n```\n\n----------------------------------------\n\nTITLE: Running Tuist commands via Terminal\nDESCRIPTION: Demonstrates how to execute Tuist commands directly from the terminal, including the use of Swift Package Manager and command-line options, emphasizing non-interactive, synchronous execution with status feedback.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/contributors/get-started.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntuist run tuist generate --path /path/to/project --no-open\nswift build --product ProjectDescription\nswift run tuist generate --path /path/to/project --no-open\n```\n\n----------------------------------------\n\nTITLE: Visualizing the Dependency Graph Using Tuist CLI - Bash\nDESCRIPTION: Executes 'tuist graph' to generate and open a visual representation (PNG file) of the project's dependency structure. Requires Tuist to be initialized in the project directory. The command takes no arguments by default; resulting outputs are the 'graph.png' file and its automatic opening by the system.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/quick-start/add-dependencies.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist graph\n\n```\n\n----------------------------------------\n\nTITLE: Define Swift Library in Bazel (Starlark)\nDESCRIPTION: This snippet shows how to define a Swift library target in Bazel using the `swift_library` rule. It specifies the target name, source files using a glob pattern, and the desired module name.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nswift_library(\n    name = \"MyLibrary.library\",\n    srcs = glob([\"**/*.swift\"]),\n    module_name = \"MyLibrary\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Product Type for FBLPromises (Swift)\nDESCRIPTION: This snippet shows how to explicitly set the product type of `FBLPromises` to `.framework` in the `Package.swift` file.  This resolves a crash related to unrecognized selectors. It modifies the `packageSettings` to include a specific product type configuration for `FPLPromises`.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.10\n\nimport PackageDescription\n\n#if TUIST\nimport ProjectDescription\nimport ProjectDescriptionHelpers\n\nlet packageSettings = PackageSettings(\n    productTypes: [\n        \"FPLPromises\": .framework,\n    ]\n)\n#endif\n\nlet package = Package(\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh shell to load Tuist completion script manually\nDESCRIPTION: This code adds a custom directory to the Zsh function path and initializes the completion system by editing `~/.zshrc`. It ensures that the completion script can be autoloaded and used in a Zsh environment without oh-my-zsh, allowing command auto-completion for Tuist.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/cli/shell-completions.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfpath=(~/.zsh/completion $fpath)\nautoload -U compinit\ncompinit\n```\n\n----------------------------------------\n\nTITLE: Generating Tuist Zsh Completions (oh-my-zsh)\nDESCRIPTION: Generates the Tuist Zsh completion script using the `tuist --generate-completion-script` command and saves it to the standard oh-my-zsh completions directory (`~/.oh-my-zsh/completions/`) as `_tuist`. This requires oh-my-zsh to be installed and configured.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/cli/shell-completions.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ntuist --generate-completion-script > ~/.oh-my-zsh/completions/_tuist\n```\n\n----------------------------------------\n\nTITLE: Replacing `tuist up` with `tuist-up` CLI Tool\nDESCRIPTION: This migration moves provisioning environment setup to an independent CLI tool, `tuist-up`, reducing complexity within Tuist and enabling separate management of setup scripts through `up.toml`.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Replacing Deprecated `TUIST_*` Variables with `TUIST_CONFIG_*` in Swift\nDESCRIPTION: This update deprecates old configuration environment variables, encouraging use of the new `TUIST_CONFIG_*` for configuration variables, aligning with latest environment variable standards.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Configuring Tuist Schemes in Xcode\nDESCRIPTION: Shows how to modify Xcode schemes to set up Tuist commands, including passing arguments and setting working directories, facilitating integrated command execution within the IDE environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/contributors/get-started.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n• Set scheme arguments in Xcode to include commands like 'generate --no-open'\n• Configure scheme working directory to the project root using --path or scheme settings\n```\n\n----------------------------------------\n\nTITLE: Installing Bash completion script for Tuist using bash-completion\nDESCRIPTION: This snippet shows copying the generated completion script into the system directory designated for Bash completions (`/usr/local/etc/bash_completion.d/`) to enable command auto-completion for Tuist within Bash environments that have bash-completion installed.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/cli/shell-completions.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntuist --generate-completion-script > /usr/local/etc/bash_completion.d/_tuist\n```\n\n----------------------------------------\n\nTITLE: Sourcing Tuist Bash Completion Script Manually\nDESCRIPTION: Sources a custom Bash completion script directly within a user's profile (`~/.bash_profile` or `~/.bashrc`). This approach is used when `bash-completion` is not installed. The user must first generate the Tuist script and save it to a location like `~/.bash_completions/` (e.g., as `tuist.bash`, replacing `example.bash` in the command).\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/cli/shell-completions.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.bash_completions/example.bash\n```\n\n----------------------------------------\n\nTITLE: Setting up Fish shell completion for Tuist\nDESCRIPTION: This snippet provides commands to create the Fish shell completions directory and save the generated Tuist completion script there, enabling command autocompletion support within Fish shell environment.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/cli/shell-completions.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.config/fish/completions\n tuist --generate-completion-script > ~/.config/fish/completions/tuist.fish\n```\n\n----------------------------------------\n\nTITLE: FileList Excluding Parameter\nDESCRIPTION: Addition of an 'excluding' parameter to FileList to filter out specific files from the list of files to be included in a target.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nexcluding\n```\n\n----------------------------------------\n\nTITLE: Adding --json flag to tuist scaffold list command\nDESCRIPTION: Extends the 'tuist scaffold list' command to support a '--json' flag, enabling output in JSON format for easier parsing and scripting.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_31\n\nLANGUAGE: Shell\nCODE:\n```\ntuist scaffold list --json\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Package with Build Tool Plugin in Package.swift\nDESCRIPTION: Example of a Package.swift file that defines a package with a SwiftLint build tool plugin dependency. This shows how build tool plugins are defined in Swift Package Manager.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/develop/projects/dependencies.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version: 5.9\nimport PackageDescription\n\nlet package = Package(\n    name: \"Framework\",\n    products: [\n        .library(name: \"Framework\", targets: [\"Framework\"]),\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", .upToNextMajor(from: \"0.56.1\")),\n    ],\n    targets: [\n        .target(\n            name: \"Framework\",\n            plugins: [\n                .plugin(name: \"SwiftLint\", package: \"SwiftLintPlugin\"),\n            ]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Parallelizing Package.swift Loading for Dependencies Fetch in Swift\nDESCRIPTION: This optimization improves `tuist dependencies fetch` performance by loading multiple Package.swift files concurrently, reducing total execution time.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Running Tuist Directly with Swift Package Manager\nDESCRIPTION: Commands to build the ProjectDescription dependency and run Tuist directly using Swift Package Manager. This alternative approach bypasses the run command.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/contributors/get-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nswift build --product ProjectDescription\nswift run tuist generate --path /path/to/project --no-open\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Library with Bazel (BUILD)\nDESCRIPTION: This snippet shows the syntax used in a Bazel BUILD file to define a Swift library target. It specifies the name of the target, includes all '.swift' files in subdirectories using `glob`, and sets the module name.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nswift_library(\n    name: \"MyLibrary.library\",\n    srcs: glob([\"**/*.swift\"]),\n    module_name: \"MyLibrary\"\n)\n```\n\n----------------------------------------\n\nTITLE: Ensuring Semantic Version Compatibility in Tuist\nDESCRIPTION: Checks and uses the latest semantic version of Tuist in environment executions to maintain compatibility and leverage recent improvements.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_37\n\nLANGUAGE: Swift\nCODE:\n```\nif let latestVersion = getLatestSemanticVersion() {\n  useVersion(latestVersion)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Logger in Tuist CLI using swift-service-context\nDESCRIPTION: Shows how to access the logger instance that's dependency-injected using swift-service-context. Note that task locals don't propagate through Dispatch, so the logger needs to be passed explicitly to asynchronous operations.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/contributors/cli/logging.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nServiceContext.current?.logger\n```\n\n----------------------------------------\n\nTITLE: Removing `tuist doc` Command in Swift\nDESCRIPTION: This removal simplifies project maintenance and binary size by eliminating the rarely used `tuist doc` command. Users are encouraged to use `swift-doc` via Fastlane or scripting.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Updating Template Definitions from `Template.swift` to Named Files\nDESCRIPTION: This change deprecates the use of `Template.swift` in favor of file names that describe templates, improving clarity and consistency across project templates.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Resource Accessor Templates Plugin Directory Structure\nDESCRIPTION: Illustrates the directory structure for a resource accessor templates plugin, including the Plugin.swift manifest and various template files.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/plugins.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── ...\n├── Plugin.swift\n├── ResourceSynthesizers\n├───── Strings.stencil\n├───── Plists.stencil\n├───── CustomTemplate.stencil\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Bumping Minimum Supported Xcode Version to 12.4 in Swift\nDESCRIPTION: This change updates the minimum required Xcode version for contributors to 12.4, ensuring compatibility with recent development tools.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Translating GitHub Alerts in Markdown\nDESCRIPTION: This snippet demonstrates the correct way to translate GitHub alert markdown blocks by only translating the title and content, but keeping the alert type tag unchanged to preserve functionality. It shows an example where the warning alert type is maintained as 'WARNING' while the text is translated, preventing any reconciliation errors with Crowdin.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/contributors/translate.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!WARNING] 루트 변수\n> 매니페스트의 루트에 있어야 하는 변수는...\n\n// Instead of\n> [!주의] 루트 변수\n> 매니페스트의 루트에 있어야 하는 변수는...\n```\n\n----------------------------------------\n\nTITLE: Translate GitHub Alert Example\nDESCRIPTION: This snippet illustrates how to translate GitHub alerts within markdown files. It's crucial to translate only the title and content, while leaving the alert type (e.g., WARNING) in its original English form to maintain the structure.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/contributors/translate.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    > [!WARNING] 루트 변수\n    > 매니페스트의 루트에 있어야 하는 변수는...\n\n    // Instead of\n    > [!주의] 루트 변수\n    > 매니페스트의 루트에 있어야 하는 변수는...\n```\n\n----------------------------------------\n\nTITLE: Translating Custom Containers in Markdown\nDESCRIPTION: Illustrates the correct method for translating VitePress custom containers in Markdown. The container type (e.g., `::: warning`) should remain untranslated, whereas the title ('루트 변수') and content require translation. An incorrect example translating the container type (`::: 주의`) is provided for clarity.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/contributors/translate.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::: warning 루트 변수\\\n매니페스트의 루트에 있어야 하는 변수는...\n:::\n\n# Instead of\n::: 주의 루트 변수\\\n매니페스트의 루트에 있어야 하는 변수는...\n:::\n```\n\n----------------------------------------\n\nTITLE: Generating projects with XcodeGen\nDESCRIPTION: This command demonstrates how to generate an Xcode project using XcodeGen based on the configuration defined in project.yaml.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxcodegen generate\n```\n\n----------------------------------------\n\nTITLE: XcodeGen directory structure\nDESCRIPTION: This illustrates the directory structure used by XcodeGen, where the project configuration is typically defined in a project.yaml file at the root.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ko/guides/develop/projects/adoption/migrate/xcodegen-project.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/\n  project.yaml\n```\n\n----------------------------------------\n\nTITLE: Configure Tuist MCP Server in Claude (Mise)\nDESCRIPTION: This JSON snippet configures the Tuist MCP server in Claude desktop to use a Tuist installation managed by Mise. It specifies the command to execute (mise), and the arguments include specifying the tuist version (@latest or a specific version), and starting the MCP server.  This configuration is added to the claude_desktop_config.json file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/es/guides/ai/mcp.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"tuist\": {\n      \"command\": \"mise\",\n      \"args\": [\"x\", \"tuist@latest\", \"--\", \"tuist\", \"mcp\", \"start\"] // Or tuist@x.y.z to fix the version\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Library Target in Bazel (Starlark)\nDESCRIPTION: Defines a Swift library build rule in Bazel using the BUILD file in Starlark syntax. The rule specifies the target library name, source glob for Swift files, and sets the module name. Key parameters include 'name', 'srcs', and 'module_name'. Requires Bazel and a configured Starlark environment; input is Swift source files, output is a built static library. Limitations: Requires correct Starlark syntax and integration with Bazel's rules for Swift.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/guides/develop/projects/adoption/migrate/bazel-project.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nswift_library(\n    name = \"MyLibrary.library\",\n    srcs = glob([\"**/*.swift\"]),\n    module_name = \"MyLibrary\"\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Logger with swift-service-context in Tuist CLI\nDESCRIPTION: This snippet demonstrates how to access the logger in the Tuist CLI using swift-service-context.  It assumes swift-service-context is used for dependency injection. The logger provides an abstraction for logging backend and helps CLI not to depend on it directly. To access the logger, one can get it from ServiceContext.current?.logger. This approach makes logging accessible from anywhere within the CLI.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ja/contributors/cli/logging.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nServiceContext.current?.logger\n```\n\n----------------------------------------\n\nTITLE: Translating Custom Containers in Markdown\nDESCRIPTION: Illustrates the proper method for translating custom container blocks (e.g., `::: warning`) in Markdown for Tuist. The container type must remain untranslated, while the title and content are translated. An incorrect example is shown for comparison.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/contributors/translate.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    ::: warning 루트 변수\\\n    매니페스트의 루트에 있어야 하는 변수는...\n    :::\n\n    # Instead of\n    ::: 주의 루트 변수\\\n    매니페스트의 루트에 있어야 하는 변수는...\n    :::\n```\n\n----------------------------------------\n\nTITLE: Cloning the Tuist Repository\nDESCRIPTION: Command to clone the Tuist repository to your local machine using git.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/contributors/get-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:tuist/tuist.git\n```\n\n----------------------------------------\n\nTITLE: Heading Translation in Markdown\nDESCRIPTION: This code snippet provides guidance on translating heading titles while retaining the original ID. The primary aim is to translate the text within the heading while preserving the identifier, as shown in the example. This is used for maintaining the internal linking functionality within the document.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/en/contributors/translate.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n# Add dependencies {#add-dependencies}\n```\n\nIt should be translated as (note the id is not translated):\n\n```markdown\n# 의존성 추가하기 {#add-dependencies}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing VitePress Data and Setting Up Parameters in Vue\nDESCRIPTION: This snippet imports the useData hook from VitePress and extracts the params object which contains URL parameters for the current page. The setup is done using Vue's script setup syntax.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/ru/references/examples/[example].md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\n\n// params is a Vue ref\nconst { params } = useData()\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Benchmark Rake Task in Tuist\nDESCRIPTION: Defines a rake task in Ruby to run benchmarks for the Tuist project, facilitating performance testing and benchmarking improvements.\nSOURCE: https://github.com/tuist/tuist/blob/main/CHANGELOG.md#_snippet_30\n\nLANGUAGE: Ruby\nCODE:\n```\ntask :benchmark do\n  # Benchmark task implementation\nend\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Vue Component with VitePress Theme (Vue)\nDESCRIPTION: This snippet imports the VPFeature component from VitePress's default theme and prepares it for use within the current Vue single file component or VitePress-powered page. The script uses ESM import syntax under the <script setup> block, ensuring the component is available for use in the corresponding Markdown or Vue file. No additional dependencies are required except for VitePress and its default theme package. There are no explicit parameters, and this snippet expects that the feature component will be used or referenced in the same file.\nSOURCE: https://github.com/tuist/tuist/blob/main/docs/docs/pt/guides/tuist/about.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport VPFeature from \"vitepress/dist/client/theme-default/components/VPFeature.vue\";\n</script>\n```"
  }
]