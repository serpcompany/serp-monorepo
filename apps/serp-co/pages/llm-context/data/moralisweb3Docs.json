[
  {
    "owner": "moralisweb3",
    "repo": "docs",
    "content": "TITLE: Complete Server for Blockchain Data Fetching with Express & Moralis - JavaScript\nDESCRIPTION: Entire index.js file implementing an Express server with Moralis integration. It provides an endpoint /demo that fetches and returns native balance, ERC-20 tokens, and the first ten NFTs for a given address and EVM chain. Demonstrates initialization, API key configuration, async data access, error handling, and the modular getDemoData function. Requires Moralis API key, Express, Moralis, and @moralisweb3/common-evm-utils packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst app = express();\nconst port = 3000;\n\nconst MORALIS_API_KEY = \"replace_me\";\nconst address = \"0x9e8f0f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f\";\nconst chain = EvmChain.ETHEREUM;\n\nasync function getDemoData() {\n  // Get native balance\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  // Format the native balance formatted in ether via the .ether getter\n  const native = nativeBalance.result.balance.ether;\n\n  // Get token balances\n  const tokenBalances = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  // Format the balances to a readable output with the .display() method\n  const tokens = tokenBalances.result.map((token) => token.display());\n\n  // Get the nfts\n  const nftsBalances = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n    limit: 10,\n  });\n\n  // Format the output to return name, amount and metadata\n  const nfts = nftsBalances.result.map((nft) => ({\n    name: nft.result.name,\n    amount: nft.result.amount,\n    metadata: nft.result.metadata,\n  }));\n\n  return { native, tokens, nfts };\n}\n\napp.get(\"/demo\", async (req, res) => {\n  try {\n    // Get and return the crypto data\n    const data = await getDemoData();\n    res.status(200);\n    res.json(data);\n  } catch (error) {\n    // Handle errors\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: MORALIS_API_KEY,\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\nstartServer();\n\n```\n\n----------------------------------------\n\nTITLE: Getting ERC20 Token Metadata in JavaScript\nDESCRIPTION: Demonstrates how to fetch ERC20 token metadata using Moralis SDK in JavaScript. Requires Moralis API key and uses the EvmApi.token.getTokenMetadata endpoint to retrieve metadata for multiple token addresses on the Ethereum chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-token-metadata-by-token-addresses.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const addresses = [\n    \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n  ];\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenMetadata({\n    addresses,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Verifying Moralis Webhook Signature in Python\nDESCRIPTION: This Python function validates the signature of an incoming Moralis webhook request. It extracts the signature from the `x-signature` header, computes the expected signature using `Web3.keccak` (SHA3) on the request data concatenated with the encoded secret key, and compares the result with the provided signature. A `TypeError` is raised if the signature is missing, and a `ValueError` is raised if it's invalid. Requires the `web3.py` library.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/stream-security/webhook-security.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef verify_Signature(req, secret):\n    provided_signature = req.headers.get(\"x-signature\")\n    if not provided_signature:\n        raise TypeError(\"Signature not provided\")\n\n    data = req.data+secret.encode()\n    signature = Web3.keccak(text=data.decode()).hex()\n\n    if provided_signature != signature:\n        raise ValueError(\"Invalid Signature\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis SDK Options\nDESCRIPTION: Configure the Moralis SDK with various options including API key, address formatting, chain ID formatting, and log level settings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/01-moralis-sdk.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  formatEvmAddress: \"checksum\",\n  formatEvmChainId: \"decimal\",\n  logLevel: \"verbose\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Metadata with Moralis Python SDK\nDESCRIPTION: Retrieves detailed metadata for a specific NFT using the Moralis EVM API (`evm_api.nft.get_nft_metadata`). Requires the `moralis` SDK, an API key, and parameters including the NFT contract address, token ID, and chain ('eth' in this example). The result is formatted and printed as a JSON string, including normalized metadata if requested.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"token_id\": \"3931\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_nft_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(json.dumps(result, indent=4))\n\n# result\n\"\"\"\n{\n    \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n    \"token_id\": \"3931\",\n    \"amount\": \"1\",\n    \"owner_of\": \"0x1cf2b8c64aed32bff2ae80e701681316d3212afd\",\n    \"token_hash\": \"3c86855c82470edd82df190019e83f16\",\n    \"block_number_minted\": \"5754322\",\n    \"block_number\": \"13868997\",\n    \"transfer_index\": [\n        13868997,\n        30,\n        36,\n        0\n    ],\n    \"contract_type\": null,\n    \"name\": \"CRYPTOPUNKS\",\n    \"symbol\": \"\\u03fe\",\n    \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/3931\",\n    \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk3931.webp\\\",\\\"name\\\":\\\"CryptoPunk 3931\\\",\\\"attributes\\\":[\\\"Vampire Hair\\\",\\\"Goat\\\"],\\\"description\\\":\\\"Male\\\"}\",\n    \"last_token_uri_sync\": null,\n    \"last_metadata_sync\": \"2022-05-12T18:00:22.340Z\",\n    \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\",\n    \"normalized_metadata\": {\n        \"name\": \"CryptoPunk 3931\",\n        \"description\": \"Male\",\n        \"animation_url\": null,\n        \"external_link\": null,\n        \"image\": \"https://www.larvalabs.com/cryptopunks/cryptopunk3931.webp\",\n        \"attributes\": [\n            {\n                \"trait_type\": \"type\",\n                \"value\": \"Male\",\n                \"display_type\": null,\n                \"max_value\": null,\n                \"trait_count\": 0,\n                \"order\": null\n            },\n            {\n                \"trait_type\": \"attribute\",\n                \"value\": \"Vampire Hair\",\n                \"display_type\": null,\n                \"max_value\": null,\n                \"trait_count\": 0,\n                \"order\": null\n            },\n            {\n                \"trait_type\": \"attribute\",\n                \"value\": \"Goat\",\n                \"display_type\": null,\n                \"max_value\": null,\n                \"trait_count\": 0,\n                \"order\": null\n            }\n        ]\n    }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON API Response from Moralis Web3 Script - JSON\nDESCRIPTION: This snippet displays a sample JSON response returned after running a Moralis Web3 API script to fetch ERC721 token data. No external JSON formatting library is required, but users must be familiar with the structure returned by the Moralis API. The JSON object includes pagination fields, a cursor for fetching more data, and an array of token result objects with detailed on-chain information. It is meant for reference to verify the expected output structure and contents when using the API in scripts or applications.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"total\\\": 512,\\n  \\\"page\\\": 1,\\n  \\\"page_size\\\": 100,\\n  \\\"cursor\\\": \\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsidG9rZW5BZGRyZXNzIjoiMHhkNGU0MDc4Y2EzNDk1ZGU1YjFkNGRiNDM0YmViYzVhOTg2MTk3NzgyIn0sImtleXMiOlsiMTY1MzUxNDU1OS4yNDIiXSwid2hlcmUiOnsidG9rZW5fYWRkcmVzcyI6IjB4ZDRlNDA3OGNhMzQ5NWRlNWIxZDRkYjQzNGJlYmM1YTk4NjE5Nzc4MiJ9LCJsaW1pdCI6MTAwLCJvZmZzZXQiOjAsIm9yZGVyIjpbXSwidG90YWwiOjUxMiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2ODAzNDg2fQ.i2E2SDeatbnmmxe3Qbhh86jd_aWypQKs8Svpr5disZ4\\\",\\n  \\\"result\\\": [\\n    {\\n      \\\"token_address\\\": \\\"0xd4e4078ca3495de5b1d4db434bebc5a986197782\\\",\\n      \\\"token_id\\\": \\\"17\\\",\\n      \\\"owner_of\\\": \\\"0x8e232860171762f6ff2d22d1fcc45af78bd3fbb5\\\",\\n      \\\"block_number\\\": \\\"15791552\\\",\\n      \\\"block_number_minted\\\": \\\"7516983\\\",\\n      \\\"token_hash\\\": \\\"98e881f3d1052b7ca90fb91b898baa0f\\\",\\n      \\\"amount\\\": \\\"1\\\",\\n      \\\"contract_type\\\": \\\"ERC721\\\",\\n      \\\"name\\\": \\\"Autoglyphs\\\",\\n      \\\"symbol\\\": \\\"\\u2615\\\",\\n      \\\"token_uri\\\": \\\"data:text/plain;charset=utfn      \\\"metadata\\\": null,\\n      \\\"last_token_uri_sync\\\": \\\"2022-08-04T16:48:25.721Z\\\",\\n      \\\"last_metadata_sync\\\": \\\"2022-08-04T16:48:58.389Z\\\",\\n      \\\"minter_address\\\": null\\n    },\\n    {\\n      \\\"token_address\\\": \\\"0xd4e4078ca3495de5b1d4db434bebc5a986197782\\\",\\n      \\\"token_id\\\": \\\"23\\\",\\n      \\\"owner_of\\\": \\\"0x8e232860171762f6ff2d22d1fcc45af78bd3fbb5\\\",\\n      \\\"block_number\\\": \\\"15791549\\\",\\n      \\\"block_number_minted\\\": \\\"7516996\\\",\\n      \\\"token_hash\\\": \\\"3c1ad6384b0bea044ff67ca1b949f6d9\\\",\\n      \\\"amount\\\": \\\"1\\\",\\n      \\\"contract_type\\\": \\\"ERC721\\\",\\n      \\\"name\\\": \\\"Autoglyphs\\\",\\n      \\\"symbol\\\": \\\"\\u2615\\\",\\n      \\\"token_uri\\\": \\\"...\\\",\\n      \\\"metadata\\\": null,\\n      \\\"last_token_uri_sync\\\": \\\"2022-08-04T16:48:25.721Z\\\",\\n      \\\"last_metadata_sync\\\": \\\"2022-08-04T16:48:58.389Z\\\",\\n      \\\"minter_address\\\": null\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Balances with TypeScript\nDESCRIPTION: TypeScript implementation to retrieve ERC20 token balances for a wallet address using Moralis API. Requires Moralis and @moralisweb3/common-evm-utils packages. Returns token details including address, name, symbol, logo, and balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK in TypeScript\nDESCRIPTION: Shows how to initialize the Moralis SDK in a TypeScript project using ES module `import`. It requires the `moralis` package and involves calling the asynchronous `Moralis.start()` method with at least the `apiKey`. Other configurations can be added to the object passed to `start`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/01-moralis-sdk.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring Wallet Transactions with Moralis Streams API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to set up a stream for monitoring native transactions for a specific wallet address (`0x68...`) on Ethereum and Polygon. It initializes Moralis, defines stream parameters (chains, description, tag, webhook URL, includeNativeTxs), creates the stream using `Moralis.Streams.add`, and then attaches the target wallet address to the created stream using `Moralis.Streams.addAddress`. Requires a Moralis API key (`YOUR_API_KEY`) and a webhook URL (`YOUR_WEBHOOK_URL`).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const stream = {\n    chains: [EvmChain.ETHEREUM, EvmChain.POLYGON],\n    description: \"monitor Bobs wallet\",\n    tag: \"bob\",\n    webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n    includeNativeTxs: true,\n  };\n\n  const newStream = await Moralis.Streams.add(stream);\n  const { id } = newStream.toJSON();\n\n  // Now we attach bobs address to the stream\n  const address = \"0x68b3f12d6e8d85a8d3dbbc15bba9dc5103b888a4\";\n\n  await Moralis.Streams.addAddress({ address, id });\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching All NFTs from a Collection (EVM) with Moralis Python SDK\nDESCRIPTION: Retrieves a list of all NFTs belonging to a specific contract address (NFT collection) on an EVM-compatible chain using `evm_api.nft.get_contract_nfts`. Requires the `moralis` SDK, API key, and parameters like the contract address, chain, limit, and normalization options. The result is printed as a JSON string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    # \"totalRanges\": 0,\n    # \"range\": 0,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_contract_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output for ERC-20 Token Balances\nDESCRIPTION: This is an example of the JSON response returned from the Moralis Wallet API after fetching ERC-20 token balances for a given smart account address. The response contains an array of objects, each describing a token's address, symbol, name, logo, decimals, and balance (in token's smallest units). This output format is consistent for JavaScript, TypeScript, and Python implementations when using the Moralis interface. No dependencies are required to consume this JSON, but parsing and usage are typically paired with Moralis SDK scripts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-ERC-20-token-by-smart-account.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"token_address\": \"0x350845DD3f03F1355233a3A7CEBC24b5aAD05eC5\",\n    \"name\": \"APE\",\n    \"symbol\": \"APE\",\n    \"logo\": null,\n    \"thumbnail\": null,\n    \"decimals\": 18,\n    \"balance\": \"101715701444169451516503179\"\n  },\n  {\n    \"token_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"name\": \"Wrapped Ether\",\n    \"symbol\": \"WETH\",\n    \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.webp\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.webp\",\n    \"decimals\": 18,\n    \"balance\": \"85000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with MoralisNextAuthProvider\nDESCRIPTION: Setting up NextAuth in [...nextauth].ts/js file to use MoralisNextAuthProvider and configure JWT and session callbacks for user authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\n\nexport default NextAuth({\n  providers: [MoralisNextAuthProvider()],\n  // adding user info to the user session object\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      (session as { user: unknown }).user = token.user;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching All NFTs Owned by an Address (Cross-Chain) with Moralis Python SDK\nDESCRIPTION: Retrieves NFTs owned by a specific wallet address across multiple EVM chains (Ethereum, BSC, Polygon) by iterating through a list of chains and calling `evm_api.nft.get_wallet_nfts` for each. Requires the `moralis` SDK, API key, and address/parameters. Results from all chains are aggregated into a list and printed as a JSON string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 1,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = []\nfor chain in ('eth', 'bsc', 'polygon'):\n\tparams['chain'] = chain\n\tresult += [evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n\t)]\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for API Reference Documentation\nDESCRIPTION: This code imports the necessary React components for rendering API documentation. It imports the ApiReference component and configuration data from a JSON file that contains the specifications for the getTopProfitableWalletPerToken endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Token Top Traders/get-top-profitable-wallet-per-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Express Endpoint for Returning Native Balance - JavaScript\nDESCRIPTION: Defines an Express GET endpoint '/demo' that calls getDemoData to fetch and return the native balance in JSON format. Includes error handling with status codes for both success and failure. This endpoint can be accessed via browser or HTTP request to quickly obtain wallet information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/demo\", async (req, res) => {\n  try {\n    // Get and return the crypto data\n    const data = await getDemoData();\n    res.status(200);\n    res.json(data);\n  } catch (error) {\n    // Handle errors\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Owners with Moralis NFT API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Moralis NFT API in a Node.js environment to fetch all owners for a specific NFT by contract address and token ID on the Ethereum blockchain. The script initializes Moralis with an API key, defines the NFT's contract address, token ID, and chain, then calls getNFTTokenIdOwners to retrieve the results. Dependencies include the 'moralis' and '@moralisweb3/common-evm-utils' libraries. Required parameters are the Moralis API key, NFT contract address, token id, and chain. The expected output is a JSON object with details about each owner; constraints include the need to set up Moralis and provide a valid API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owner-of-an-nft.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xa186d739ca2b3022b966194004c6b01855d59571\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const tokenId = \"1\";\n\n  const response = await Moralis.EvmApi.nft.getNFTTokenIdOwners({\n    address,\n    chain,\n    tokenId,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Balances with JavaScript\nDESCRIPTION: JavaScript implementation to retrieve ERC20 token balances for a wallet address using Moralis API. Requires Moralis and @moralisweb3/common-evm-utils packages. Returns token details including address, name, symbol, logo, and balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Monitoring Wallet Transactions with Moralis Streams API (Python)\nDESCRIPTION: This Python snippet illustrates using the Moralis SDK (`moralis.streams`) to establish a stream for tracking native transactions of a specific wallet address (`0x68...`) on Ethereum (`0x1`) and Polygon (`0x89`). It defines the stream configuration in a dictionary (`create_stream_body`), creates the stream using `streams.evm_streams.create_stream`, retrieves the stream ID (`result.id`), and then adds the target wallet address to the stream using `streams.evm_streams.add_address_to_stream`. Requires a Moralis API key and a webhook URL (`YOUR_WEBHOOK_URL`).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import streams\n\napi_key = \"04u5XkBCRyoxrAM89MeOSV055R6QpRxTWGw431jWd8ydCJtq0TpY6jErerZ9FN3u\"\n\ncreate_stream_body = {\n  \"description\": \"monitor Bobs wallet\",\n  \"tag\": \"bob\",\n  \"webhook_url\": \"https://YOUR_WEBHOOK_URL\",\n  \"include_native_txs\": True,\n  \"chain_ids\": [\n    \"0x1\",\n    \"0x89\"\n  ]\n}\n\nresult = streams.evm_streams.create_stream(\n  api_key=api_key,\n  body=create_stream_body,\n)\n\nadd_address_body = {\n  \"address\": \"0x68b3f12d6e8d85a8d3dbbc15bba9dc5103b888a4\"\n}\n\nparams = {\n  \"id\": result.id\n}\n\n# Now we attach bobs address to the stream\nstreams.evm_streams.add_address_to_stream(\n  api_key=api_key,\n  body=add_address_body,\n  params=params,\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Project URLs for Web3 Authentication\nDESCRIPTION: This snippet demonstrates how to include the URLs for the web3_auth app and Django's built-in authentication in the project's urls.py file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('web3_auth/', include('web3_auth.urls')),\n    path('auth/', include('django.contrib.auth.urls')),\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Moralis SDK Modules - JavaScript\nDESCRIPTION: Shows how to import, instantiate, and register Moralis SDK modules with the core package in JavaScript. The process involves importing MoralisCore and MoralisEvmApi, creating a core instance, and then registering modules prior to any SDK usage. Prerequisites include installing the appropriate modules and ensuring their compatibilities. Modules must be registered at the top level before using any Moralis functionality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport MoralisCore from \"@moralisweb3/core\";\nimport MoralisEvmApi from \"@moralisweb3/evm-api\";\n\nconst core = MoralisCore.create();\n// Register all imported modules to the @moralisweb3/core module\ncore.registerModules([MoralisEvmApi]);\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFT Collections with Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to retrieve NFT collections for a wallet address using the Moralis SDK with type safety. It imports Moralis and EvmChain, initializes the SDK, specifies the address and chain, calls `Moralis.EvmApi.nft.getWalletNFTCollections`, and prints the result as JSON. Dependencies include `moralis` and `@moralisweb3/common-evm-utils`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/04-NFT Collections/how-to-get-all-nft-collections-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTCollections({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers with TypeScript\nDESCRIPTION: TypeScript implementation for getting ERC20 token transfers using Moralis SDK. Provides type safety and requires Moralis and @moralisweb3/common-evm-utils packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-contract.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Running Ngrok to Expose Local Server\nDESCRIPTION: This shell command runs Ngrok to expose the local server running on port 3000 to the internet, providing a public URL for webhook reception.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic.Link Authentication in NextJS SignIn Component\nDESCRIPTION: Complete implementation of a SignIn component that incorporates Magic.Link authentication using the MagicAuthConnector. The code includes handling authentication flow, requesting challenge messages, and redirecting after successful authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-magiclink.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MagicAuthConnector } from \"@everipedia/wagmi-magic-connector\";\nimport { signIn } from \"next-auth/react\";\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { useRouter } from \"next/router\";\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\n\nfunction SignIn() {\n  const { connectAsync } = useConnect({\n    connector: new MagicAuthConnector({\n      options: {\n        apiKey: \"YOUR_MAGIC_LINK_API_KEY\", //required\n      },\n    }),\n  });\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\n  const { push } = useRouter();\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n\n    const { account } = await connectAsync();\n\n    const { message } = await requestChallengeAsync({\n      address: account,\n      chainId: \"0x1\",\n    });\n\n    const signature = await signMessageAsync({ message });\n\n    // redirect user after success authentication to '/user' page\n    const { url } = await signIn(\"moralis-auth\", {\n      message,\n      signature,\n      redirect: false,\n      callbackUrl: \"/user\",\n    });\n    /**\n     * instead of using signIn(..., redirect: \"/user\")\n     * we get the url from callback and push it to the router to avoid page refreshing\n     */\n    push(url);\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={() => handleAuth()}>Authenticate via Magic.Link</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Final React App.js with wagmi and Routing - JavaScript\nDESCRIPTION: This is the complete App.js file for the React client integrating wagmi for wallet connections and react-router-dom for routing. It imports required dependencies, configures wagmi with the mainnet and public provider, and defines application routes for signin, user, and home pages. The WagmiConfig context wraps the app to provide blockchain connectivity, with RouterProvider handling navigation. Prerequisites include wagmi, viem, react-router-dom, and necessary wagmi providers chained in the project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\n\nimport { createConfig, configureChains, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { mainnet } from \"wagmi/chains\";\n\nimport Signin from \"./signin\";\nimport User from \"./user\";\n\nconst { publicClient, webSocketPublicClient } = configureChains(\n  [mainnet],\n  [publicProvider()]\n);\n\nconst config = createConfig({\n  autoConnect: true,\n  publicClient,\n  webSocketPublicClient,\n});\n\nconst router = createBrowserRouter([\n  {\n    path: \"/signin\",\n    element: <Signin />,\n  },\n  {\n    path: \"/user\",\n    element: <User />,\n  },\n  {\n    path: \"/\",\n    element: <h1>Home Component</h1>,\n  },\n]);\n\nfunction App() {\n  return (\n    <WagmiConfig config={config}>\n      <RouterProvider router={router} />\n    </WagmiConfig>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Final BalancesComponent with API Integration - TypeScript\nDESCRIPTION: Shows the complete TypeScript implementation for the Angular balances component. Imports Component decorators and axios, declares template and stylesheet, and contains logic to fetch balance data on initialization. Expects a functional backend and axios dependency. The ngOnInit method fetches and sets the address, native balance, and token balances to be displayed in the template.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from \"@angular/core\";\n\nimport axios from \"axios\";\n\n@Component({\n  selector: \"app-balances\",\n  templateUrl: \"./balances.component.html\",\n  styleUrls: [\"./balances.component.css\"],\n})\nexport class BalancesComponent implements OnInit {\n  constructor() {}\n\n  address = \"\";\n  nativeBalance = \"\";\n  tokenBalances = \"\";\n\n  async ngOnInit() {\n    const { data } = await axios(`http://localhost:3000/balances`);\n\n    this.address = data.address;\n    this.nativeBalance = data.nativeBalance;\n    this.tokenBalances = data.tokenBalances;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Native Balance using JavaScript\nDESCRIPTION: JavaScript implementation to fetch native balance of a multi-signature wallet using Moralis SDK. Requires Moralis API key and uses the EvmChain.ETHEREUM chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = '0x849D52316331967b6fF1198e5E32A0eB168D039d';\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n}\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Getting Uniswap V2 Pair Address with Moralis DeFi API in Python\nDESCRIPTION: This Python snippet demonstrates how to use the Moralis Python SDK to fetch a Uniswap V2 pair address given two ERC-20 token contract addresses. It requires the 'moralis' Python package, and an API key. The key parameters include the exchange ('uniswapv2'), token0/1 addresses, and chain ('eth'). The script sends the request and prints a structured JSON-like response with details about both tokens and the resulting pair address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-address-of-a-liquidity-pool.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"exchange\": \"uniswapv2\",\n    \"token0_address\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    \"token1_address\": \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.defi.get_pair_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs Across EVM Chains with Moralis SDK (TypeScript)\nDESCRIPTION: Explains how to use Moralis with TypeScript to retrieve all NFTs owned by a wallet across Ethereum, BSC, and Polygon. Requires 'moralis' and '@moralisweb3/common-evm-utils', Node.js, and an API key. The script initializes Moralis, iterates over specified EVM chains, fetches NFTs for the address, accumulates results in an array, and prints the output. The structure and logic closely match the JavaScript example, ensuring type safety for TypeScript users.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs with Moralis Wallet API - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates querying all NFTs owned by a specific address across multiple EVM chains (Ethereum, BSC, Polygon) using Moralis Wallet API. It requires the 'moralis' and '@moralisweb3/common-evm-utils' npm packages along with a valid Moralis API key. The 'runApp' async function starts the Moralis client, iterates through selected chains, and collects NFT ownership data for the provided address into an array which it then logs to the console. Parameters include address and chains list; outputs a list of NFT data responses. Limitations: Make sure the API key is valid and network access is enabled.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Implementing MetaMask Authentication Flow in React Component (signin.jsx)\nDESCRIPTION: This React functional component (`SignIn`) implements the client-side logic for Web3 authentication using MetaMask. It utilizes `wagmi` hooks (`useConnect`, `useDisconnect`, `useAccount`, `useSignMessage`) to interact with the wallet and `axios` to communicate with a backend server. The `handleAuth` function orchestrates the process: connecting the wallet, requesting a message from the server's `/request-message` endpoint, prompting the user to sign the message, sending the message and signature to the server's `/verify` endpoint for verification (which likely sets an authentication cookie), and finally redirecting the user to the `/user` page upon success using `react-router-dom`'s `useNavigate`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\nimport axios from \"axios\";\n\nexport default function SignIn() {\n  const navigate = useNavigate();\n\n  const { connectAsync } = useConnect();\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n\n  const handleAuth = async () => {\n    //disconnects the web3 provider if it's already active\n    if (isConnected) {\n      await disconnectAsync();\n    }\n    // enabling the web3 provider metamask\n    const { account } = await connectAsync({\n      connector: new InjectedConnector(),\n    });\n\n    const userData = { address: account, chain: 1 };\n    // making a post request to our 'request-message' endpoint\n    const { data } = await axios.post(\n      `${process.env.REACT_APP_SERVER_URL}/request-message`,\n      userData,\n      {\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n      }\n    );\n    const message = data.message;\n    // signing the received message via metamask\n    const signature = await signMessageAsync({ message });\n\n    await axios.post(\n      `${process.env.REACT_APP_SERVER_URL}/verify`,\n      {\n        message,\n        signature,\n      },\n      { withCredentials: true } // set cookie from Express server\n    );\n\n    // redirect to /user\n    navigate(\"/user\");\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={() => handleAuth()}>Authenticate via MetaMask</button>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing wagmi and viem Dependencies for React App - Bash\nDESCRIPTION: This snippet shows the command to install the required npm libraries wagmi and viem, which enable Web3 wallet connectivity and chain interactions in a React application. Ensure you run this command in your app's directory, and Node.js along with npm must be already installed. The installed packages will allow you to integrate wagmi's React hooks for wallet connection and blockchain data fetching.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install wagmi viem\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit and Wagmi Providers in NextJS `_app.jsx` (JavaScript)\nDESCRIPTION: Configures RainbowKit and Wagmi in the main NextJS application component (`pages/_app.jsx`). It imports necessary modules, sets up chains (mainnet) and providers (publicProvider), initializes wagmi configuration (`createConfig`), and wraps the application components with `WagmiConfig`, `SessionProvider` (from next-auth), and `RainbowKitProvider` to make wallet connection and session management available throughout the app. Requires a WalletConnect `projectId` obtained from the WalletConnect Cloud dashboard.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDefaultWallets, RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { createConfig, configureChains, WagmiConfig } from \"wagmi\";\nimport { mainnet } from \"wagmi/chains\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { SessionProvider } from \"next-auth/react\";\nimport \"@rainbow-me/rainbowkit/styles.css\";\n\nconst { chains, publicClient, webSocketPublicClient } = configureChains(\n  [mainnet],\n  [publicProvider()]\n);\n\nconst { connectors } = getDefaultWallets({\n  appName: \"My RainbowKit App\",\n  projectId: \"WALLET_CONNECT_PROJECT_ID\", // Get your project ID from https://cloud.walletconnect.com/\n  chains,\n});\n\nconst config = createConfig({\n  autoConnect: true,\n  publicClient,\n  webSocketPublicClient,\n  connectors,\n});\n\n// added RainbowKitProvider wrapper\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <WagmiConfig config={config}>\n      <SessionProvider session={pageProps.session} refetchInterval={0}>\n        <RainbowKitProvider chains={chains}>\n          <Component {...pageProps} />\n        </RainbowKitProvider>\n      </SessionProvider>\n    </WagmiConfig>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Wallet and Chain Input Component with Web3UIKit - JavaScript\nDESCRIPTION: This snippet implements a React component for entering a wallet address and selecting a blockchain network. It uses web3uikit Input, Select, and CryptoLogos for UI, requires React, and references a logo SVG and CSS classes for styling. Inputs are passed as 'chain', 'wallet', 'setChain', and 'setWallet'. This is a purely presentational/input component and does not fetch data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \\\"react\\\";\nimport \\\"../App.css\\\";\nimport {Input, Select, CryptoLogos} from '@web3uikit/core'\n\nfunction WalletInputs({chain, wallet, setChain, setWallet}) {\n  return (\n    <>\n    <div className=\\\"header\\\">\\n      <div className=\\\"title\\\">\\n        <svg width=\\\"40\\\" height=\\\"40\\\" viewBox=\\\"0 0 500 500\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path id=\\\"logo_exterior\\\" d=\\\"M500 250C500 111.929 388.071 0 250 0C111.929 0 0 111.929 0 250C0 388.071 111.929 500 250 500C388.071 500 500 388.071 500 250Z\\\" fill=\\\"#784FFE\\\"></path><path id=\\\"logo_interior\\\" fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M154.338 187.869L330.605 187L288.404 250.6L388 250.118L345.792 312.652L168.382 313.787L211.25 250.633L112 250.595L154.338 187.869Z\\\" fill=\\\"white\\\"></path></svg>\\n        <h1>Zapper</h1>\\n      </div>\\n      <div className=\\\"walletInputs\\\">\\n        <Input\\n          id=\\\"Wallet\\\"\\n          label=\\\"Wallet Address\\\"\\n          labelBgColor=\\\"rgb(33, 33, 38)\\\"\\n          value={wallet}\\n          style={{height: \\\"50px\\\"}}\\n          onChange={(e) => setWallet(e.target.value)}\\n        />\\n        <Select\\n          defaultOptionIndex={0}\\n          id=\\\"Chain\\\"\\n          onChange={(e) => setChain(e.value)}\\n          options={[\\n          {\\n            id: 'eth',\\n            label: 'Ethereum',\\n            value: \\\"0x1\\\",\\n            prefix: <CryptoLogos chain=\\\"ethereum\\\"/>\\n          },\\n          {\\n            id: 'matic',\\n            label: 'Polygon',\\n            value: \\\"0x89\\\",\\n            prefix: <CryptoLogos chain=\\\"polygon\\\"/>\\n          },\\n          ]}\\n        />\\n      </div>\\n    </div>\\n    </>\\n  );\\n}\\n\\nexport default WalletInputs;\n```\n\n----------------------------------------\n\nTITLE: Fetching EVM NFT Collections by Wallet using Moralis API\nDESCRIPTION: Moralis API endpoint (v2.2) for retrieving NFT collections owned by a specific EVM wallet address. Requires the wallet `address` as a path parameter. Moralis also supports filtering by token address(es).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:address/nft/collections\n```\n\n----------------------------------------\n\nTITLE: Querying ERC20 Token Balances with Moralis Web3 API (JavaScript)\nDESCRIPTION: This JavaScript snippet connects to the Moralis Web3 API to fetch all ERC20 tokens owned by a specified address on a specified chain. Dependencies include the 'moralis' and '@moralisweb3/common-evm-utils' node modules. Key parameters are 'address' (the wallet to query) and 'chain' (EvmChain constant). The function logs the resulting token balances as a JSON array. Make sure to replace 'YOUR_API_KEY' with your actual Moralis API key and install all required dependencies via npm.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Multi-Chain Wallet Activity with Moralis SDK in Python\nDESCRIPTION: This Python snippet illustrates how to get the active chains for a specified wallet address using the Moralis Python SDK. It sets the API key, defines parameters including the address and a list of chain identifiers ('eth', 'bsc', 'polygon'), and calls `evm_api.transaction.get_wallet_active_chains`. The result containing chain activity is then printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/01-Wallet Details/how-to-get-multichain-activity-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chains\": [\"eth\", \"bsc\", \"polygon\"],\n}\n\nresult = evm_api.transaction.get_wallet_active_chains(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Web3 Sign-In with Moralis and Next-Auth in JavaScript\nDESCRIPTION: This React component (`SignIn`) handles the user authentication flow using Web3 wallets (specifically MetaMask via wagmi). It connects the wallet, requests a challenge message from Moralis using `useAuthRequestChallengeEvm`, signs the message using `useSignMessage`, and then authenticates the user via `next-auth`'s `signIn` function with the 'moralis-auth' provider, passing the message and signature. Upon successful authentication, it redirects the user to the '/user' page without a full page refresh using `next/router`. Dependencies include `wagmi`, `next-auth/react`, `@moralisweb3/next`, and `next/router`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\nimport { signIn } from \"next-auth/react\";\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { useRouter } from \"next/router\";\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\n\nfunction SignIn() {\n  const { connectAsync } = useConnect();\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\n  const { push } = useRouter();\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n\n    const { account, chain } = await connectAsync({\n      connector: new MetaMaskConnector(),\n    });\n\n    const { message } = await requestChallengeAsync({\n      address: account,\n      chainId: chain.id,\n    });\n\n    const signature = await signMessageAsync({ message });\n\n    // redirect user after success authentication to '/user' page\n    const { url } = await signIn(\"moralis-auth\", {\n      message,\n      signature,\n      redirect: false,\n      callbackUrl: \"/user\",\n    });\n    /**\n     * instead of using signIn(..., redirect: \"/user\")\n     * we get the url from callback and push it to the router to avoid page refreshing\n     */\n    push(url);\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={handleAuth}>Authenticate via Metamask</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs with TypeScript\nDESCRIPTION: TypeScript implementation to fetch NFTs owned by a wallet address across multiple chains using Moralis API. Provides type safety while querying NFTs on Ethereum, BSC, and Polygon networks.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Metadata in Python\nDESCRIPTION: Demonstrates how to fetch NFT metadata using Moralis NFT API with Python. The code uses the evm_api module from moralis to make the API call with the required parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/02-NFT Metadata/how-to-get-the-metadata-of-an-nft.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"token_id\": \"3931\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_nft_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Metadata by Symbols using Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to retrieve ERC20 token metadata using the Moralis SDK. It imports necessary modules (`Moralis`, `EvmChain`), initializes Moralis with an API key, specifies token symbols ('UNI', 'AAVE', 'LINK') and the Ethereum chain using `EvmChain`. It then calls `Moralis.EvmApi.token.getTokenMetadataBySymbol` and logs the resulting JSON response. Requires `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-symbols.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const symbols = [\"UNI\", \"AAVE\", \"LINK\"];\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenMetadataBySymbol({\n    symbols,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Querying ERC-20 Token Balances with Moralis Wallet API (TypeScript)\nDESCRIPTION: This TypeScript example illustrates how to use the Moralis Wallet API to fetch ERC-20 token balances for a smart contract account address on an EVM-compatible chain. Prerequisites include the \"moralis\" and \"@moralisweb3/common-evm-utils\" modules installed in a TypeScript environment. After importing the necessary modules and starting Moralis with your API key, the script defines the account address and EvmChain, calls getWalletTokenBalances, and logs the output to the console. Replace \"YOUR_API_KEY\" with your actual Moralis API key. The script outputs JSON-formatted token balances data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-ERC-20-token-by-smart-account.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Import the Moralis module for TypeScript\nimport Moralis from \"moralis\";\n// Import EvmChain from common EVM utils\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\n// Define an asynchronous function runApp\nconst runApp = async () => {\n  // Initialize Moralis with your API key and other configurations\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  // Define the smart account address you want to retrieve ERC-20 tokens for\n  const address = \"0x9b722B2aA4Cc119aCf8c95bBF5244092Be6880b9\";\n\n  // Specify the chain (EVM) you are working with\n  const chain = EvmChain.POLYGON;\n\n  // Use Moralis EvmApi to get wallet token balances for the address and chain\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  // Log the JSON response to the console\n  console.log(response.toJSON());\n};\n\n// Call the runApp function to start the application\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying Native Balance of Multi-Signature Wallet with Moralis Wallet API (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize Moralis, import EvmChain utilities, and fetch the native balance of a given wallet address. The API requires installing 'moralis' and '@moralisweb3/common-evm-utils', with TypeScript typings. The code expects the user to enter a valid API key for authentication and uses async/await for the asynchronous API call. Results are printed in JSON format. The script is intended for a Node.js environment with TypeScript support.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async() => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x849D52316331967b6fF1198e5E32A0eB168D039d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating ERC20 Transfer Monitor Stream with Moralis\nDESCRIPTION: JavaScript implementation for creating a stream that monitors ERC20 transfers. The code sets up event monitoring for transfers over 1000 tokens from a specific address using the Moralis Streams API. It includes ABI definition, filtering conditions, and stream configuration options.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-listen-all-er-c20-token-transfers-over-certain-amount-sent-by-specific-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ERC20_transfer_ABI = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" },\n  ],\n  \"name\": \"transfer\",\n  \"type\": \"event\",\n}];\n\nconst filter_ERC20 = {  \n  \"and\": [  \n    { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] },  \n    { \"gt\": [\"value\", \"1000000000\"] },\n  ],  \n};\n\nconst options = {\n  chains: [EvmChain.ETHEREUM],\n  description: \"monitor all ERC20 transfers\",\n  tag: \"ERC20_transfers\",\n  abi: ERC20_transfer_ABI,\n  includeContractLogs: true,\n  allAddresses: true,\n  topic0: [\"Transfer(address,address,uint256)\"],\n  advancedOptions: [\n    {\n      topic0: \"Transfer(address,address,uint256)\",\n      filter: filter_ERC20\n    },\n  ],\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n};\n\nconst stream = await Moralis.Streams.add(options);\n```\n\n----------------------------------------\n\nTITLE: Complete NodeJS Blockchain Data Query Implementation\nDESCRIPTION: Final implementation showing the complete setup with Moralis integration, including functions to fetch native balance, token balances, and NFTs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst app = express();\nconst port = 3000;\n\nconst MORALIS_API_KEY = \"replace_me\";\nconst address = \"0x9e8f0f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f\";\nconst chain = EvmChain.ETHEREUM;\n\nasync function getDemoData() {\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  const native = nativeBalance.result.balance.ether;\n\n  const tokenBalances = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  const tokens = tokenBalances.result.map((token) => token.display());\n\n  const nftsBalances = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n    limit: 10,\n  });\n\n  const nfts = nftsBalances.result.map((nft) => ({\n    name: nft.result.name,\n    amount: nft.result.amount,\n    metadata: nft.result.metadata,\n  }));\n\n  return { native, tokens, nfts };\n}\n\napp.get(\"/demo\", async (req, res) => {\n  try {\n    const data = await getDemoData();\n    res.status(200);\n    res.json(data);\n  } catch (error) {\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: MORALIS_API_KEY,\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\nstartServer();\n```\n\n----------------------------------------\n\nTITLE: Paginating Bonding Token Requests with Cursor (Shell)\nDESCRIPTION: Shows how to paginate through multiple pages of bonding tokens on Pump.fun by adding the 'cursor' query parameter in the API request. The cursor token is obtained from a previous API response and allows fetching subsequent result pages. This cURL request additionally demonstrates how to pass a custom cursor while retaining all necessary headers for authentication and content type. This pattern is essential when more results than the 'limit' parameter are available.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/07-get-bonding-tokens.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/token/mainnet/exchange/pumpfun/bonding?limit=100&cursor=YOUR_CURSOR' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Getting Sushiswap V2 Pair Address using JavaScript\nDESCRIPTION: JavaScript implementation for retrieving a Sushiswap V2 pair address using Moralis DeFi API. Requires Moralis API key and token addresses for both tokens in the pair. Returns pair address and token details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"sushiswapv2\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for ERC20 Metadata\nDESCRIPTION: Sample JSON response returned by the Moralis Token API showing token metadata including name, symbol, decimals, and logo URLs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-contract.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"address\": \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n    \"name\": \"Uniswap\",\n    \"symbol\": \"UNI\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984.webp\",\n    \"logo_hash\": \"064ee9557deba73c1a31014a60f4c081284636b785373d4ccdd1b3440df11f43\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection NFTs with Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use the Moralis SDK to fetch all NFTs from a given collection contract on Ethereum. It depends on the `moralis` and `@moralisweb3/common-evm-utils` packages. The script initializes Moralis with an API key, defines the target contract `address` and `chain`, uses `Moralis.EvmApi.nft.getContractNFTs` to fetch the data, and prints the result as JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getContractNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Filters for Streamed Events - JSON\nDESCRIPTION: This snippet defines a filter object to monitor USDC transfer events where either the sender or the recipient is the zero address, and the transferred amount is greater than or equal to 10,000 USDC (expressed as 10,000,000,000 units due to 6 decimal places). It uses logical 'or' and 'and' operators to combine multiple conditions. This structure is used within Moralis Admin Panel's filter UI and expects event field names and values as specified.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/filter-streams.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"or\": [\n    {\n      \"and\": [\n        { \"eq\": [\"from\", \"0x0000000000000000000000000000000000000000\"] },\n        { \"gte\": [\"value\", \"10000000000\"] }\n      ]\n    },\n    {\n      \"and\": [\n        { \"eq\": [\"to\", \"0x0000000000000000000000000000000000000000\"] },\n        { \"gte\": [\"value\", \"10000000000\"] }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Transactions with Moralis Block API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Moralis SDK to fetch all transactions from a specific block on the Ethereum blockchain. It includes internal transactions and uses the getBlock endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const blockNumberOrHash = \"15863321\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getBlock({\n    blockNumberOrHash,\n    chain,\n    include: \"internal_transactions\",\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs via Moralis NFT API in TypeScript\nDESCRIPTION: This TypeScript example shows how to initialize the Moralis SDK, configure your API key, and fetch all NFTs belonging to a specified address on Ethereum. The script imports required packages, declares type-safe variables, waits for authentication, and prints out NFTs in JSON format. Prerequisites: Node.js (v.14+), type definitions, and appropriate SDKs installed with npm/yarn.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart.js Line Chart Component in React\nDESCRIPTION: Defines a React functional component `CandlestickChart` that uses `react-chartjs-2` to render a line chart. It imports and registers necessary Chart.js components (scales, elements, title, tooltip, legend). The component takes `candlestickData` as a prop, formats it into separate datasets for High, Low, Open, and Close values, and configures basic chart options like responsiveness and tooltips. Initially, this sets up the structure before implementing the custom candlestick rendering.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-chartsjs-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst CandlestickChart = ({ candlestickData }) => {\n  const formatData = () => {\n    const labels = candlestickData.map((data) =>\n      new Date(data.time * 1000).toLocaleDateString()\n    );\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: \"High\",\n          data: candlestickData.map((data) => data.high),\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1,\n          fill: false,\n        },\n        {\n          label: \"Low\",\n          data: candlestickData.map((data) => data.low),\n          borderColor: \"rgba(255, 99, 132, 1)\",\n          borderWidth: 1,\n          fill: false,\n        },\n        {\n          label: \"Open\",\n          data: candlestickData.map((data) => data.open),\n          borderColor: \"rgba(54, 162, 235, 1)\",\n          borderWidth: 1,\n          fill: false,\n        },\n        {\n          label: \"Close\",\n          data: candlestickData.map((data) => data.close),\n          borderColor: \"rgba(255, 206, 86, 1)\",\n          borderWidth: 1,\n          fill: false,\n        },\n      ],\n    };\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      title: {\n        display: true,\n        text: \"Cryptocurrency Price Chart\",\n      },\n      tooltip: {\n        mode: \"index\",\n        intersect: false,\n      },\n    },\n    scales: {\n      y: {\n        type: \"linear\",\n        display: true,\n        position: \"left\",\n      },\n    },\n    interaction: {\n      mode: \"index\",\n      intersect: false,\n    },\n  };\n\n  return (\n    <div className=\"chart-container\">\n      <Line options={options} data={formatData()} />\n    </div>\n  );\n};\n\nexport default CandlestickChart;\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Authentication Implementation\nDESCRIPTION: Implementation of WalletConnect provider authentication including provider setup and configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signInWithMoralis } from '@moralisweb3/client-firebase-evm-auth';\nimport { Web3Provider } from '@ethersproject/providers';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nconst provider = new WalletConnectProvider({\n  rpc: {\n    1: 'https://your_rpc_url_here/',\n    // ...\n  }\n});\n\nawait provider.enable();\n\nawait signInWithMoralis(moralisAuth, {\n  provider: new Web3Provider(provider)\n});\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs Owned by an Address using Moralis API - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to fetch all NFTs owned by a specific Ethereum address by calling Moralis.EvmApi.nft.getWalletNFTs. It requires the 'moralis' and '@moralisweb3/common-evm-utils' packages. Key parameters needed are 'apiKey' for the Moralis account, 'address' for the wallet address, and 'chain' specifying the blockchain. The script prints the entire NFT ownership JSON response to the console. The configuration should be customized with your own API key, and further configuration can be passed as needed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Monitoring Wallet Transactions with Moralis Streams API (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to utilize the Moralis SDK to create a stream that monitors native transactions for a specified wallet address (`0x68...`) across Ethereum and Polygon. It involves initializing Moralis with an API key, configuring the stream object with details like target chains, description, tag, webhook URL, and enabling native transaction monitoring, creating the stream via `Moralis.Streams.add`, and finally associating the wallet address with the stream using `Moralis.Streams.addAddress`. A Moralis API key (`YOUR_API_KEY`) and a webhook URL (`YOUR_WEBHOOK_URL`) are prerequisites.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const stream = {\n    chains: [EvmChain.ETHEREUM, EvmChain.POLYGON],\n    description: \"monitor Bobs wallet\",\n    tag: \"bob\",\n    webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n    includeNativeTxs: true,\n  };\n\n  const newStream = await Moralis.Streams.add(stream);\n  const { id } = newStream.toJSON();\n\n  // Now we attach bobs address to the stream\n  const address = \"0x68b3f12d6e8d85a8d3dbbc15bba9dc5103b888a4\";\n\n  await Moralis.Streams.addAddress({ address, id });\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Querying All Wallet NFTs via Moralis NFT API in TypeScript\nDESCRIPTION: This TypeScript example illustrates acquiring all NFTs owned by a specified address across multiple EVM chains using Moralis. The code imports Moralis and EvmChain types, requires the Moralis API key, and iterates through chain constants (`EvmChain.ETHEREUM`, `EvmChain.BSC`, `EvmChain.POLYGON`). The relevant NFT data for each chain is pushed into the `allNFTs` array and logged to the console. Inputs are the address and a list of chain constants; outputs are API responses for each chain. Be sure to install `moralis` and `@moralisweb3/common-evm-utils` and follow all async/await best practices.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Handling Moralis Stream Updates with Firebase Cloud Functions (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a Firebase Cloud Function triggered by the `onWrite` event for documents within a specified Moralis stream collection (`moralis/txs/{collectionName}`). It fetches the updated transaction data and conditionally runs `doSomeOperation` if the transaction exists and is confirmed, enabling server-side processing of blockchain events from Moralis Streams.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/integrations/firebase.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as functions from \"firebase-functions\";\n\nconst collectionName = \"LoremIpsum\";\n\nexport const onItemWrite = functions.firestore\n  .document(`moralis/txs/${collectionName}/{id}`)\n  .onWrite(async (change) => {\n    const transaction = change.after.data();\n\n    if (transaction && transaction.confirmed) {\n      doSomeOperation(/* ... */);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation for ENS Domain Registration Monitoring\nDESCRIPTION: Sets up a stream to monitor ENS domain registrations with cost greater than 1 ETH using Moralis Streams API. Includes ABI definition, filter configuration, and stream setup with webhook integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-monitor-ens-domain-registrations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ensNameRegisteredAbi = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    {\n      \"indexed\": false,\n      \"internalType\": \"string\",\n      \"name\": \"name\",\n      \"type\": \"string\",\n    },\n    {\n      \"indexed\": true,\n      \"internalType\": \"bytes32\",\n      \"name\": \"label\",\n      \"type\": \"bytes32\",\n    },\n    {\n      \"indexed\": true,\n      \"internalType\": \"address\",\n      \"name\": \"owner\",\n      \"type\": \"address\",\n    },\n    {\n      \"indexed\": false,\n      \"internalType\": \"uint256\",\n      \"name\": \"cost\",\n      \"type\": \"uint256\",\n    },\n    {\n      \"indexed\": false,\n      \"internalType\": \"uint256\",\n      \"name\": \"expires\",\n      \"type\": \"uint256\",\n    },\n  ],\n  \"name\": \"NameRegistered\",\n  \"type\": \"event\",\n}];\n\nconst filter = {\n  \"and\": [\n    { \"eq\": [\"owner\", \"0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5\"] },\n    { \"gt\": [\"cost\", \"1000000000000000000\"] },\n  ],\n};\n\nconst options = {\n  chains: [EvmChain.ETHEREUM],\n  description: \"ENS Name Registrations\",\n  tag: \"ensRegistrationByBob\",\n  abi: ensNameRegisteredAbi,\n  topic0: [\"NameRegistered(string,bytes32,address,uint256,uint256)\"],\n  includeContractLogs: true,\n  advancedOptions: [\n    {\n      topic0: \"NameRegistered(string,bytes32,address,uint256,uint256)\",\n      filter,\n      includeNativeTxs: true,\n    },\n  ],\n  webhookUrl: \"<https://YOUR_WEBHOOK_URL>\",\n};\n\nconst stream = await Moralis.Streams.add(options);\n\nconst { id } = stream.toJSON();\n\nawait Moralis.Streams.addAddress({\n  id,\n  address: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Authentication Message via Moralis Auth - NodeJS\nDESCRIPTION: Defines an asynchronous function requestMessage, which constructs and sends a challenge request to the Moralis Auth API using the provided address and chain. The function uses the constants for network type, domain, statement, URI, expiration time, and timeout to generate a login message that a client (such as Unity) should sign. Returns the challenge result needed for authentication. Requires Moralis SDK configuration and initialization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function requestMessage(address, chain) {\n\n  const result = await Moralis.Auth.requestMessage({\n    address,\n    chain,\n    networkType: NETWORK,\n    domain: DOMAIN,\n    statement: STATEMENT,\n    uri: URI,\n    expirationTime: EXPIRATION_TIME,\n    timeout: TIMEOUT,\n  })\n\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Wallet ERC20 Balances\nDESCRIPTION: This JSON snippet shows an example response from the Moralis `getWalletTokenBalances` API endpoint. It returns an array of objects, where each object represents an ERC20 token owned by the address, including details like `token_address`, `name`, `symbol`, `decimals`, and the `balance` held by the wallet.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\n  {\n    \"token_address\": \"0xefd6c64533602ac55ab64442307f6fe2c9307305\",\n    \"name\": \"APE\",\n    \"symbol\": \"APE\",\n    \"logo\": null,\n    \"thumbnail\": null,\n    \"decimals\": 18,\n    \"balance\": \"101715701444169451516503179\"\n  },\n  {\n    \"token_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"name\": \"Wrapped Ether\",\n    \"symbol\": \"WETH\",\n    \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.webp\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.webp\",\n    \"decimals\": 18,\n    \"balance\": \"85000000000000000\"\n  }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching All NFTs using Moralis Wallet API in TypeScript\nDESCRIPTION: This example illustrates how to retrieve all NFTs from a collection using Moralis in a TypeScript environment. It imports Moralis and EvmChain utilities, then initializes the Moralis client with an API key. Key parameters ('address' and 'chain') are provided, and the NFT data from the target contract is retrieved and logged as JSON. Be sure to install the necessary TypeScript typings for Moralis and replace 'YOUR_API_KEY' with your actual API key before running.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getContractNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Token Metadata with Moralis Token API (JavaScript)\nDESCRIPTION: This JavaScript snippet initializes the Moralis SDK and queries the Moralis Token API to obtain metadata for an array of ERC20 token addresses on Ethereum. It requires the 'moralis' and '@moralisweb3/common-evm-utils' Node packages, and an API key from Moralis. The addresses and chain are set as parameters, and the output is logged as JSON. Ensure the Moralis API key is obtained and network access is enabled.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-token-metadata-by-token-addresses.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const addresses = [\n    \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n  ];\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenMetadata({\n    addresses,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Cross-Chain NFTs with Python\nDESCRIPTION: Python implementation to retrieve NFTs owned by an address across multiple chains using Moralis SDK. Uses the moralis package and handles chain-specific parameters. Returns NFT data from Ethereum, BSC, and Polygon chains.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 1,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = []\nfor chain in ('eth', 'bsc', 'polygon'):\n\tparams['chain'] = chain\n\tresult += [evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n\t)]\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Details by Hash in JavaScript using Moralis API\nDESCRIPTION: This JavaScript code demonstrates how to fetch transaction details from the Ethereum blockchain using the Moralis API. It requires an API key and takes a transaction hash as input to return detailed transaction information in JSON format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-a-transaction-by-transaction-hash.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the Moralis library and EvmChain module\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n// Define the main function to run the application\nconst runApp = async () => {\n  // Initialize Moralis with your API key and other configurations\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  // Specify the transaction hash to retrieve details\n  const transactionHash =\n    \"0xaae93882e8a9fe9ff30151853db20e4cd161940757a01744465ab83b751c5875\";\n\n  // Specify the blockchain (Ethereum in this case)\n  const chain = EvmChain.ETHEREUM;\n\n  // Fetch details of the specified transaction using the Moralis API\n  const response = await Moralis.EvmApi.transaction.getTransaction({\n    transactionHash,\n    chain,\n  });\n\n  // Log the response details to the console in JSON format\n  console.log(response.toJSON());\n};\n\n// Execute the application by calling the main function\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Content by Number using Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to retrieve block details using the Moralis SDK. It initializes the SDK with an API key, specifies the block number (`15863321`) and the chain (`EvmChain.ETHEREUM`), then calls the `getBlock` method. The resulting block data is printed to the console in JSON format. Requires the `moralis` and `@moralisweb3/common-evm-utils` packages and Node.js v14+.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-content-by-block-number.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const blockNumberOrHash = \"15863321\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getBlock({\n    blockNumberOrHash,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical ERC20 Prices using Moralis Web3 Token API in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch historical prices for an ERC20 token by initializing the Moralis SDK with an API key, specifying the token address and chain, and iterating over a range of Ethereum block numbers. For each block interval, it calls the Moralis EvmApi getTokenPrice endpoint and records the price result. Required dependencies include the moralis and @moralisweb3/common-evm-utils packages. Inputs are the token's contract address, the target network (via EvmChain), and block ranges, with the output being an array of JSON-formatted price data. Replace 'YOUR_API_KEY' with your valid API key before running.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-historical-erc20-token-price.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const historicalPrice = [];\n\n  const address = \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  for (let toBlock = 16323500; toBlock < 16323550; toBlock += 10) {\n    const response = await Moralis.EvmApi.token.getTokenPrice({\n      address,\n      chain,\n      toBlock,\n    });\n\n    historicalPrice.push(response?.toJSON());\n  }\n\n  console.log(historicalPrice);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs Across EVM Chains with Moralis SDK (Python)\nDESCRIPTION: Shows how to fetch all NFTs owned by a given address on multiple EVM-compatible chains (Ethereum, BSC, Polygon) using the Moralis Python SDK. Requires 'moralis' Python package and an API key. The snippet sets query parameters, iterates through chain identifiers, retrieves NFTs via 'evm_api.nft.get_wallet_nfts', and prints the collected results as pretty-formatted JSON. Key parameters involve the address, chain, output format, pagination ('limit', 'cursor'), and metadata normalization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 1,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = []\nfor chain in ('eth', 'bsc', 'polygon'):\n\tparams['chain'] = chain\n\tresult += [evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n\t)]\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Transfers with Moralis NFT API - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize Moralis in a JavaScript (Node.js) environment and retrieve all transfer events for a specific NFT using the getNFTTransfers endpoint. It requires the 'moralis' and '@moralisweb3/common-evm-utils' packages. You must provide a valid Moralis API key, an NFT contract address, token ID, and chain (using EvmChain). The response, which contains a paginated list of transfer transactions, is logged as JSON. Ensure to install Moralis SDK and authenticate before using this code.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const tokenId = \"1\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTTransfers({\n    address,\n    tokenId,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs Across EVM Chains with Moralis SDK (JavaScript)\nDESCRIPTION: Demonstrates how to use the Moralis SDK in JavaScript to fetch all NFTs belonging to a specified address on multiple EVM-compatible blockchains (Ethereum, BSC, Polygon). Requires 'moralis' and '@moralisweb3/common-evm-utils' packages, Node.js v14+, and an API key. The snippet loops through selected chains, retrieves NFTs for each, aggregates the responses, and prints them. Key parameters include 'address' (the wallet to query) and 'chain' (the target EVM chain). Outputs an array of NFT data per chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: TokenManager Class Implementation in C#\nDESCRIPTION: Core JWT management class that handles token generation, validation, and principal extraction. Uses Microsoft.Identity.Model.JsonWebTokens and System.IdentityModel.Tokens.Jwt packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\nusing Microsoft.IdentityModel.Tokens;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\n\nnamespace JwtServices\n{\n    public class TokenManager\n    {\n        private static string Secret = \"TW9yYWlscyBXZWIzIEFQSXMgYXJlIHRoZSBncmVhdGVzdCB0aGluZyBzaW5jZSBzbGljZWQgYnJlYWQh\";\n\n        public static string GenerateToken(IDictionary<string, string> appClaims)\n        {\n            byte[] key = Convert.FromBase64String(Secret);\n            SymmetricSecurityKey securityKey = new SymmetricSecurityKey(key);\n            List<Claim> claims = new List<Claim>();\n\n            if (appClaims != null && appClaims.Count > 0)\n            {\n                foreach (string k in appClaims.Keys)\n                {\n                    claims.Add(new Claim(k, appClaims[k]));\n                }\n            }\n\n            SecurityTokenDescriptor descriptor = new SecurityTokenDescriptor\n            {\n                Subject = new ClaimsIdentity(claims),\n                Expires = DateTime.UtcNow.AddMinutes(30),\n                SigningCredentials = new SigningCredentials(securityKey,\n                SecurityAlgorithms.HmacSha256Signature)\n            };\n\n            JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler();\n            JwtSecurityToken token = handler.CreateJwtSecurityToken(descriptor);\n\n            return handler.WriteToken(token);\n        }\n\n        public static ClaimsPrincipal GetPrincipal(string token)\n        {\n            try\n            {\n                JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();\n                JwtSecurityToken jwtToken = (JwtSecurityToken)tokenHandler.ReadToken(token);\n\n                if (jwtToken == null)\n                {\n                    return null;\n                }\n\n                byte[] key = Convert.FromBase64String(Secret);\n\n                TokenValidationParameters parameters = new TokenValidationParameters()\n                {\n                    RequireExpirationTime = true,\n                    ValidateIssuer = false,\n                    ValidateAudience = false,\n                    IssuerSigningKey = new SymmetricSecurityKey(key)\n                };\n\n                SecurityToken securityToken;\n                ClaimsPrincipal principal = tokenHandler.ValidateToken(token,\n                      parameters, out securityToken);\n\n                return principal;\n            }\n            catch\n            {\n                return null;\n            }\n        }\n\n        public static bool ValidateToken(string token)\n        {\n            bool resp = false;\n\n            ClaimsPrincipal principal = GetPrincipal(token);\n\n            if (principal != null && principal.Identity != null)\n            {\n                try\n                {\n                    ClaimsIdentity identity = (ClaimsIdentity)principal.Identity;\n                    Claim? firstClaim = identity.FindFirst(ClaimTypes.Name);\n                    resp = firstClaim?.Value != null;\n                }\n                catch (NullReferenceException)\n                {\n                }\n            }\n\n            return resp;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Monitoring USDT Transfers with Moralis Streams - Python\nDESCRIPTION: This Python snippet demonstrates configuring a Moralis EVM stream to receive notifications for USDT transfers above $1 million on Ethereum, filtered by sender and value. Advanced options are set with filter_ERC20; after stream creation, the USDT address is attached to monitor relevant events. Requires Moralis Python client, valid API key, and necessary body/parameter setup. Inputs: filter and the address to analyze; Outputs: real-time webhook events for transfers. Limitation: targets only ERC20 'Transfer' events as filtered.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# Above code is same as prior\n\nfilter_ERC20 = {\n  \"and\": [\n    { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] },\n    { \"gt\": [\"value\", \"1000000000\"] }, // Example of USDT (6 Decimals)\n  ],\n}\n\ncreate_stream_body = {\n  # same parameters as prior\n  \"advanced_options\": [\n    {\n      \"topic0\": \"Transfer(address,address,uint256)\",\n      \"filter\": filter_ERC20\n    }\n  ]\n}\n\nresult = streams.evm_streams.create_stream(\n  api_key=api_key,\n  body=create_stream_body,\n)\n\nadd_address_body = {\n  \"address\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"\n}\n\nparams = {\n  \"id\": result.id\n}\n\n# Now we attach USDT address to the stream\nstreams.evm_streams.add_address_to_stream(\n  api_key=api_key,\n  body=add_address_body,\n  params=params,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Native Balance of Multi-Signature Wallet with Moralis Wallet API (JavaScript)\nDESCRIPTION: This snippet initializes the Moralis SDK in JavaScript and uses the EvmApi to fetch the native cryptocurrency balance of a specified wallet address on the Ethereum chain. It requires installing the 'moralis' and '@moralisweb3/common-evm-utils' dependencies. The user must provide a valid API key and set the correct address and chain parameters. Printed output will be in JSON format. Limitations include requirement for Node.js environment and network connectivity.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async() => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = '0x849D52316331967b6fF1198e5E32A0eB168D039d';\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n}\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs by Wallet and Chain - Moralis SDK - Python\nDESCRIPTION: This Python code snippet demonstrates how to use the Moralis Python SDK to fetch all NFTs associated with a given wallet across Ethereum, BSC, and Polygon chains. It prepares API parameters, iterates over each chain, and stores the response objects in a results list. The output is formatted as pretty-printed JSON for readability. Dependencies include the moralis SDK for Python and json module, and users must provide an API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 1,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = []\nfor chain in ('eth', 'bsc', 'polygon'):\n\tparams['chain'] = chain\n\tresult += [evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n\t)]\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Querying Wallet NFTs via Moralis API in Python\nDESCRIPTION: This Python script demonstrates how to collect all NFTs owned by a wallet across Ethereum, BSC, and Polygon using the 'moralis' package. It sets up the API key and default parameters, iterates through the target chains, and calls 'evm_api.nft.get_wallet_nfts' for each chain, accumulating the responses. The result is printed as pretty-printed JSON. Customize the 'api_key', 'address', and other parameters as needed. Ensure you have the 'moralis' package installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 1,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = []\nfor chain in ('eth', 'bsc', 'polygon'):\n\tparams['chain'] = chain\n\tresult += [evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n\t)]\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Complete Express.js Server with Moralis Authentication\nDESCRIPTION: The complete implementation of a Node.js server using Express and Moralis for Web3 authentication. Includes routes for requesting authentication messages, verifying signatures, and fetching native token balances.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\")\nconst cors = require('cors')\nconst Moralis = require(\"moralis\").default\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\")\n\nconst app = express()\nconst port = 3000\n\n// Use CORS\napp.use(cors())\n\n// Using express.urlencoded middleware\napp.use(express.urlencoded({\n  extended: true\n}))\n\n// Values set in the backend\nconst MORALIS_API_KEY = \"Your Moralis API KEY\" //FILL THIS WITH YOUR KEY!!\nconst NETWORK = \"evm\";\n\n// Put your preferred message values here\nconst DOMAIN = 'moralis.io';\nconst STATEMENT = 'Please sign this message to confirm your identity.';\nconst URI = 'https://moralis.io/';\nconst EXPIRATION_TIME = '2023-01-01T00:00:00.000Z';\nconst TIMEOUT = 15;\n\n// requestMessage method\nasync function requestMessage(address, chain) {\n\n    const result = await Moralis.Auth.requestMessage({\n        address,\n        chain,\n        network: NETWORK,\n        domain: DOMAIN,\n        statement: STATEMENT,\n        uri: URI,\n        expirationTime: EXPIRATION_TIME,\n        timeout: TIMEOUT,\n    })\n\n    return result\n}\n\n// verify method\nasync function verify(message, signature) {\n\n    const verifiedData = Moralis.Auth.verify({\n        message: message,\n        signature: signature,\n        network: NETWORK,\n    })\n\n    return verifiedData\n}\n\n// POST operation for requestMessage()\napp.post(\"/request\", async (req, res) => {\n    try {\n        const data = await requestMessage(req.body.address, req.body.chain)\n        res.status(200)\n        res.json(data)\n\n    } catch (error) {\n        // Handle errors\n        console.error(error)\n        res.status(500)\n        res.json({ error: error.message })\n    }\n})\n\n// POST operation for verify()\napp.post(\"/verify\", async (req, res) => {\n    try {\n      const data = await verify(req.body.message, req.body.signature)\n      res.status(200)\n      res.json(data)\n \n    } catch (error) {\n      // Handle errors\n      console.error(error)\n      res.status(500)\n      res.json({ error: error.message })\n    }\n})\n\n// getNativeBalance method\nasync function getNativeBalance(address, chain) {\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  })\n\n  const native = nativeBalance.result.balance.ether\n  return native\n}\n\n// POST operation for getNativeBalance()\napp.post(\"/nativeBalance\", async (req, res) => {\n  try {\n    // Get and return the native balance\n    const nativeBalance = await getNativeBalance(req.body.address, req.body.chain)\n    res.status(200)\n    res.send(nativeBalance)\n\n  } catch (error) {\n    // Handle errors\n    console.error(error)\n    res.status(500)\n    res.json({ error: error.message })\n  }\n})\n\n// Default GET operation\napp.get(\"/\", (req, res) => {\n  res.send(\"Server running!\")\n})\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: MORALIS_API_KEY,\n  })\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`)\n  })\n}\n\nstartServer()\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs using Python\nDESCRIPTION: Python implementation to get all NFTs from a collection using Moralis evm_api. Includes additional parameters like format, limit, and metadata normalization. Uses the moralis library and json for response handling.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    # \"totalRanges\": 0,\n    # \"range\": 0,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_contract_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Querying All Wallet NFTs via Moralis NFT API in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize Moralis, loop through different EVM chains (ETHEREUM, BSC, POLYGON), and retrieve all NFTs owned by a given address via the Moralis NFT API (`getWalletNFTs`). It requires the `moralis` and `@moralisweb3/common-evm-utils` packages and an API key. Expected inputs include the address and an array of chain identifiers. The output is an array of NFT data responses for the specified address across all selected chains, displayed using `console.log`. Ensure Moralis initialization and that each chain is valid; rate limits may apply.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers with JavaScript\nDESCRIPTION: JavaScript implementation for getting ERC20 token transfers using Moralis SDK. Requires Moralis and @moralisweb3/common-evm-utils packages. Takes contract address and chain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-contract.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying ERC-20 Token Balances with Moralis Wallet API (Python)\nDESCRIPTION: This Python snippet shows how to fetch ERC-20 token balances for a specified smart contract account address using the Moralis Wallet API and \"moralis\" Python package. The script defines the API key and parameters (address and chain), and uses evm_api.token.get_wallet_token_balances to make the request. Results are printed as a JSON-like output. Dependencies include the \"moralis\" Python SDK. The 'address' is the smart contract account being queried, and 'chain' is the EVM chain (e.g., 'polygon'). Replace 'YOUR_API_KEY' with a valid API key for functionality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-ERC-20-token-by-smart-account.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Import the necessary module from Moralis\nfrom moralis import evm_api\n\n# Define your Moralis API key\napi_key = \"YOUR_API_KEY\"\n\n# Create a dictionary of parameters with the smart account address and chain\nparams = {\n    \"address\": \"0x9b722B2aA4Cc119aCf8c95bBF5244092Be6880b9\",\n    \"chain\": \"polygon\",\n}\n\n# Use the Moralis evm_api to get wallet token balances\nresult = evm_api.token.get_wallet_token_balances(\n    api_key=api_key,\n    params=params,\n)\n\n# Print the result to the console\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet ERC20 Balances with Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to initialize the Moralis SDK and utilize the `Moralis.EvmApi.token.getWalletTokenBalances` method to get ERC20 token balances for a specified wallet address on an EVM chain (Ethereum). It imports `Moralis` and `EvmChain`, requires a Moralis API key, and uses `address` and `chain` parameters. The result, a list of token balances, is printed to the console as JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying Pancakeswap V1 Pair Reserves with Moralis DeFi API (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates importing and initializing the Moralis SDK to query Pancakeswap V1 pair reserves for a given pair address on the Binance Smart Chain (BSC). Dependencies include the Moralis SDK and @moralisweb3/common-evm-utils, and TypeScript environment with the necessary types. Key configuration options include the API key, pair address, and chain (BSC). The output is printed as a JSON object with the reserve values. Ensure TypeScript 4.x+ and all required packages are installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-reserves.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xaebe45e3a03b734c68e5557ae04bfc76917b4686\";\n\n  const chain = EvmChain.BSC;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK in JavaScript\nDESCRIPTION: Initialize the Moralis SDK using an API key in JavaScript. The API key should be stored in a .env file for security.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/01-moralis-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs with Moralis Wallet API - Python\nDESCRIPTION: This Python snippet retrieves all NFTs owned by a specific address across Ethereum, BSC, and Polygon using the Moralis Python SDK. Dependencies include the 'moralis' package and the standard 'json' module. You must provide your Moralis API key. The script constructs API parameters, loops through selected chains, calls 'evm_api.nft.get_wallet_nfts' for each chain with the proper parameters, and aggregates the results into a list, which is then output as formatted JSON. Key parameters are api_key, address, chain, and various query filters. Result is a JSON-formatted list of NFT data; ensure valid API key and Python environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 1,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = []\nfor chain in ('eth', 'bsc', 'polygon'):\n\tparams['chain'] = chain\n\tresult += [evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n\t)]\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Sample Lens API Response Format\nDESCRIPTION: Example of the JSON data structure returned by the Lens API for a profile query. This shows the type of information available about a Lens profile.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"0x09\",\n    \"name\": \"Nicolo\",\n    \"bio\": \"Strategy @AaveAave.lens & @LensProtocol\\n\\nnicolo.eth\",\n    \"attributes\": [\n        {\n            \"displayType\": null,\n            \"traitType\": \"string\",\n            \"key\": \"location\",\n            \"value\": \"London, UK\",\n            \"__typename\": \"Attribute\"\n        },\n        {\n            \"displayType\": null,\n            \"traitType\": \"string\",\n            \"key\": \"twitter\",\n            \"value\": \"nicolo\",\n            \"__typename\": \"Attribute\"\n        },\n        {\n            \"displayType\": null,\n            \"traitType\": \"string\",\n            \"key\": \"statusMessage\",\n            \"value\": \"🌿👻\",\n            \"__typename\": \"Attribute\"\n        },\n        {\n            \"displayType\": null,\n            \"traitType\": \"string\",\n            \"key\": \"app\",\n            \"value\": \"Lenster\",\n            \"__typename\": \"Attribute\"\n        }\n    ],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complete `signin.jsx` Component with RainbowKit Integration (JavaScript)\nDESCRIPTION: Shows the final code for the `SignIn` component (`pages/signin.jsx`) incorporating RainbowKit. It includes necessary imports (from next, react, wagmi, rainbowkit, moralis, next-auth), hooks (`useAccount`, `useNetwork`, `useSession`, `useSignMessage`, `useRouter`, `useAuthRequestChallengeEvm`), the `useEffect` hook containing the authentication logic (`handleAuth`) triggered by wallet connection status, and renders the `ConnectButton` for user interaction.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter } from \"next/router\";\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\nimport { ConnectButton } from \"@rainbow-me/rainbowkit\";\nimport { signIn, useSession } from \"next-auth/react\";\nimport { useAccount, useSignMessage, useNetwork } from \"wagmi\";\nimport { useEffect } from \"react\";\n\nfunction SignIn() {\n  const { isConnected, address } = useAccount();\n  const { chain } = useNetwork();\n  const { status } = useSession();\n  const { signMessageAsync } = useSignMessage();\n  const { push } = useRouter();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\n\n  useEffect(() => {\n    const handleAuth = async () => {\n      const { message } = await requestChallengeAsync({\n        address: address,\n        chainId: chain.id,\n      });\n\n      const signature = await signMessageAsync({ message });\n\n      // redirect user after success authentication to '/user' page\n      const { url } = await signIn(\"moralis-auth\", {\n        message,\n        signature,\n        redirect: false,\n        callbackUrl: \"/user\",\n      });\n      /**\n       * instead of using signIn(..., redirect: \"/user\")\n       * we get the url from callback and push it to the router to avoid page refreshing\n       */\n      push(url);\n    };\n    if (status === \"unauthenticated\" && isConnected) {\n      handleAuth();\n    }\n  }, [status, isConnected]);\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <ConnectButton />\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration object for the Solana challenge verification API. It then renders the ApiReference component with the specific configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/reference/02-Challenge/verify-challenge-solana.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.auth.verifyChallengeSolana} />\n```\n\n----------------------------------------\n\nTITLE: Getting ERC-20 Transfers in TypeScript\nDESCRIPTION: TypeScript implementation to retrieve ERC-20 token transfers for a smart contract account using Moralis EvmApi. Includes type safety and requires Moralis API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-erc-20-transfers-of-smart-contract-account.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const address = \"0x9b722B2aA4Cc119aCf8c95bBF5244092Be6880b9\";\n  const chain = EvmChain.POLYGON;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving DEX Token Pair Reserves via Moralis API\nDESCRIPTION: Fetches the reserves for a specific DEX token pair identified by its address using the Moralis Deep Index API v2.2. Requires the `:pair_address` path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:pair_address/reserves\n```\n\n----------------------------------------\n\nTITLE: Querying SPL NFT Balance with Moralis Solana API (Python)\nDESCRIPTION: This Python snippet outlines the process to request SPL NFT balances for a Solana address using the 'moralis' Python SDK. Required dependencies include the 'moralis' Python package and a valid API key. The 'params' dictionary holds 'network' and 'address'. The output is directly printed, showing all NFTs linked to the specified wallet in dictionary or list form.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/nft-api/how-to-get-spl-nft-balance-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"network\": \"mainnet\",\n    \"address\": \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\",\n}\n\nresult = sol_api.account.get_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying Wallet NFTs via Moralis API in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates querying all NFTs for a wallet address across Ethereum, BSC, and Polygon blockchains using the Moralis SDK with type safety. The sample requires 'moralis' and '@moralisweb3/common-evm-utils' as dependencies. It starts Moralis with an API key, specifies the address and chains, and loops through each chain to call 'getWalletNFTs'. The output, an array containing each chain's NFT response, is printed. You should provide your API key before running.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical NFT Floor Prices by Contract using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to retrieve historical floor price data for an NFT collection using the Moralis SDK. It calls `Moralis.EvmApi.nft.getNFTHistoricalFloorPriceByContract` with the chain ID, NFT contract address, and a specified time interval (e.g., '1d' for daily). The response containing historical price points is logged to the console. Requires the Moralis SDK and a valid API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/07-NFT Floor Prices/how-to-get-nft-floor-prices.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst response = await Moralis.EvmApi.nft.getNFTHistoricalFloorPriceByContract({\n  chain: \"0x1\", // Ethereum Mainnet\n  address: \"0x524cab2ec69124574082676e6f654a18df49a048\", // NFT Worlds Contract\n  interval: \"1d\", // Interval options: 1d, 7d, 30d, etc.\n});\nconsole.log(response.raw);\n```\n```\n\n----------------------------------------\n\nTITLE: Revoking ERC20 Token Approval using Ethers.js in JavaScript\nDESCRIPTION: This JavaScript function, `revokeApproval`, demonstrates how to revoke a token approval using the ethers.js library. It requires the token contract address and the spender address as input. It connects to the user's wallet (e.g., MetaMask) via `window.ethereum` to get a provider and signer. Then, it creates an instance of the ERC20 token contract using its address and ABI (specifically the `approve` function signature). Finally, it calls the `approve` function on the contract, passing the spender's address and setting the approval amount to 0, effectively revoking the permission. An alert confirms success.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/001-Wallet Approvals/build-a-revoke-cash-clone.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst { ethers } = require(\"ethers\");\n\nconst revokeApproval = async (tokenAddress, spenderAddress) => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n\n  const tokenContract = new ethers.Contract(\n    tokenAddress,\n    [\n      \"function approve(address spender, uint256 value) external returns (bool)\",\n    ],\n    signer\n  );\n\n  await tokenContract.approve(spenderAddress, 0);\n  alert(\"Approval revoked successfully!\");\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Anonymous Supabase Client\nDESCRIPTION: JavaScript code to initialize anonymous Supabase client\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst _supabaseAnon = supabase.createClient(SUPABASE_URL, SUPABASE_PUBLIC_ANON_KEY);\n```\n\n----------------------------------------\n\nTITLE: Adding MetaMask Web3 Authentication Logic Using Next-Auth and Moralis (JavaScript)\nDESCRIPTION: This React component implements a complete Web3 authentication flow using Next.js with next-auth, wagmi, and Moralis. It connects a user\\'s MetaMask wallet, requests a challenge message, prompts message signature, then authenticates via next-auth\\'s moralis-auth provider. Dependencies include Next.js, Wagmi, MetaMaskConnector, next-auth, and @moralisweb3/next. Parameters involved are the user\\'s wallet address, chain ID, signature, and a generated authentication message. Successful authentication triggers a programmatic redirect to the protected '/user' route, with logic to prevent full-page refreshes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { MetaMaskConnector } from \\\"wagmi/connectors/metaMask\\\";\nimport { signIn } from \\\"next-auth/react\\\";\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \\\"wagmi\\\";\nimport { useRouter } from \\\"next/router\\\";\nimport { useAuthRequestChallengeEvm } from \\\"@moralisweb3/next\\\";\n\nfunction SignIn() {\n  const { connectAsync } = useConnect();\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\n  const { push } = useRouter();\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n\n    const { account, chain } = await connectAsync({\n      connector: new MetaMaskConnector(),\n    });\n\n    const { message } = await requestChallengeAsync({\n      address: account,\n      chainId: chain.id,\n    });\n\n    const signature = await signMessageAsync({ message });\n\n    // redirect user after success authentication to '/user' page\n    const { url } = await signIn(\\\"moralis-auth\\\", {\n      message,\n      signature,\n      redirect: false,\n      callbackUrl: \\\"/user\\\",\n    });\n    /**\n     * instead of using signIn(..., redirect: \\\"/user\\\")\n     * we get the url from callback and push it to the router to avoid page refreshing\n     */\n    push(url);\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={handleAuth}>Authenticate via Metamask</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Sample API Response of NFTs from Moralis Wallet API in JSON\nDESCRIPTION: This JSON snippet displays a typical response structure from the Moralis API when fetching NFTs from a collection. It includes pagination metadata (total, page, page_size, cursor), an array of NFT result objects with metadata, and a status indicator. The input for this response is a request to 'getContractNFTs' with appropriate address and chain parameters. This format is useful for verifying output structure and mapping fields for further application logic.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"total\": 9991,\n  \"page\": 0,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3aGVyZSI6eyJ0b2tlbl9hZGRyZXNzIjoiMHhiNDdlM2NkODM3ZGRmOGU0YzU3ZjA1ZDcwYWI4NjVkZTZlMTkzYmJiIn0sInRva2VuX2FkZHJlc3MiOiIweGI0N2UzY2Q4MzdkZGY4ZTRjNTdmMDVkNzBhYjg2NWRlNmUxOTNiYmIiLCJsaW1pdCI6MTAwLCJvZmZzZXQiOjAsIm9yZGVyIjpbXSwicGFnZSI6MSwia2V5IjoiZmQ5MmE0ODg3MmE4NjIwZTFlNmU0NTk3ODZkMTExYWYiLCJ0b3RhbCI6OTk5MSwiaWF0IjoxNjY3ODA4NzcxfQ.9qXwHyyUKJkzrub-ze-q2gm8dC0dy-jvgF0CJrm5piY\",\n  \"result\": [\n    {\n      \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n      \"token_id\": \"9082\",\n      \"amount\": \"1\",\n      \"token_hash\": \"fffdaced3ddfb220d9124289a518bb97\",\n      \"block_number_minted\": \"12021693\",\n      \"updated_at\": null,\n      \"contract_type\": null,\n      \"name\": \"CRYPTOPUNKS\",\n      \"symbol\": \"Ͼ\",\n      \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/9082\",\n      \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk9082.webp\\\",\\\"name\\\":\\\"CryptoPunk 9082\\\",\\\"attributes\\\":[\\\"Bandana\\\",\\\"Big Shades\\\",\\\"Shadow Beard\\\"],\\\"description\\\":\\\"Male\\\"}\",\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-10-05T17:55:52.262Z\",\n      \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n    },\n    {\n      \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n      \"token_id\": \"4799\",\n      \"amount\": \"1\",\n      \"token_hash\": \"fff8ff007820e85a75c545389d5a88d4\",\n      \"block_number_minted\": \"11637283\",\n      \"updated_at\": null,\n      \"contract_type\": null,\n      \"name\": \"CRYPTOPUNKS\",\n      \"symbol\": \"Ͼ\",\n      \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/4799\",\n      \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk4799.webp\\\",\\\"name\\\":\\\"CryptoPunk 4799\\\",\\\"attributes\\\":[\\\"Blue Eye Shadow\\\",\\\"Black Lipstick\\\",\\\"Straight Hair Blonde\\\",\\\"Earring\\\"],\\\"description\\\":\\\"Female\\\"}\",\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-07-17T17:25:24.644Z\",\n      \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n    },\n    {\n      \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n      \"token_id\": \"47\",\n      \"amount\": \"1\",\n      \"token_hash\": \"fff3657368693f145d0ad29453f6cd4d\",\n      \"block_number_minted\": \"3918216\",\n      \"updated_at\": null,\n      \"contract_type\": null,\n      \"name\": \"CRYPTOPUNKS\",\n      \"symbol\": \"Ͼ\",\n      \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/47\",\n      \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk047.webp\\\",\\\"name\\\":\\\"CryptoPunk 047\\\",\\\"attributes\\\":[\\\"Knitted Cap\\\"],\\\"description\\\":\\\"Male\\\"}\",\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-07-24T12:12:11.930Z\",\n      \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Full SigninComponent for MetaMask Authentication - Angular TypeScript\nDESCRIPTION: This full signin.component.ts implementation provides an Angular component class for user sign-in with MetaMask. It includes all necessary imports, Wagmi configuration, and the handleAuth() async method, handling provider connection, message signing, backend authentication, and routing to user profile post-authentication. Dependencies specified include Angular core modules, Wagmi, axios, environment configuration, and proper use of component decorators. All key logic for performing the MetaMask authentication flow resides here.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from \"@angular/core\";\n// for navigating to other routes\nimport { Router } from \"@angular/router\";\n\n// for making HTTP requests\nimport axios from \"axios\";\n\nimport {\n  connect,\n  disconnect,\n  getAccount,\n  injected,\n  signMessage,\n} from \"@wagmi/core\";\nimport { http, createConfig } from \"@wagmi/core\";\nimport { mainnet, sepolia } from \"@wagmi/core/chains\";\n\nimport { environment } from \"../../environments/environment\";\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n});\n\n@Component({\n  selector: \"app-signin\",\n  standalone: true,\n  imports: [],\n  templateUrl: \"./signin.component.html\",\n  styleUrl: \"./signin.component.css\",\n})\nexport class SigninComponent {\n  constructor(private router: Router) {}\n  ngOnInit(): void {}\n\n  async handleAuth() {\n    const { isConnected } = getAccount(config);\n\n    if (isConnected) await disconnect(config); //disconnects the web3 provider if it's already active\n\n    const provider = await connect(config, { connector: injected() }); // enabling the web3 provider metamask\n\n    const userData = {\n      address: provider.accounts[0],\n      chain: provider.chainId,\n    };\n\n    const { data } = await axios.post(\n      `${environment.SERVER_URL}/request-message`,\n      userData\n    );\n\n    const message = data.message;\n\n    const signature = await signMessage(config, { message });\n\n    await axios.post(\n      `${environment.SERVER_URL}/verify`,\n      {\n        message,\n        signature,\n      },\n      { withCredentials: true } // set cookie from Express server\n    );\n\n    // redirect to /user\n    this.router.navigateByUrl(\"/user\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Top ERC20 Tokens Price Movers using Moralis Market Data API (JavaScript)\nDESCRIPTION: This JavaScript code shows how to initialize Moralis with your API key and query the top ERC20 tokens by price movement using the getTopERC20TokensByPriceMovers method on the Market Data API. Requires installation of the 'moralis' NPM package and '@moralisweb3/common-evm-utils'. The script starts the SDK, sends the API request, and prints the raw response which will list both gainers and losers. Input required: a valid Moralis API key. Output: JSON object of top gaining and losing ERC20 tokens.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-ERC20-tokens-by-price-change.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getTopERC20TokensByPriceMovers();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating Challenge Request Endpoint via Moralis Auth API in ASP.NET Core (C#)\nDESCRIPTION: Implements a POST endpoint 'RequestMessage' that receives address, network, and chainId parameters, constructs an EIP-4361 challenge using Moralis, and returns the result. Dependencies: Moralis SDK, defined DTOs (ChallengeRequestDto, ChainNetworkType, ChainList), and routing via ASP.NET Core. Inputs are Ethereum wallet information; output is a challenge message for client signature. Handles ApiException and general Exception for proper HTTP error responses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost, Route(\"{address}/{network}/{chainId}\")]\npublic async Task<IActionResult> RequestMessage(string address, ChainNetworkType network, ChainList chainId)\n{\n    try\n    { \n        ChallengeRequestDto req = new ChallengeRequestDto()\n        {\n            // The Ethereum address performing the signing conformant to capitalization encoded\n            // checksum specified in EIP-55 where applicable.\n            Address = address,\n            // The EIP-155 Chain ID to which the session is bound, and the network where Contract\n            // Accounts MUST be resolved.\n            ChainId = (long)chainId,\n            // The RFC 3986 authority that is requesting the signing\n            Domain = \"defi.finance\",\n            // The ISO 8601 datetime string that, if present, indicates when the signed\n            // authentication message is no longer valid.\n            ExpirationTime = DateTime.UtcNow.AddMinutes(60),\n            // The ISO 8601 datetime string that, if present, indicates when the signed\n            // authentication message will become valid.\n            NotBefore = DateTime.UtcNow,\n            // A list of information or references to information the user wishes to have resolved\n            // as part of authentication by the relying party. They are expressed as RFC 3986 URIs\n            // separated by \"\\n- \" where \\n is the byte 0x0a.\n            Resources = new string[] { \"https://www.1155project.com\" },\n            // Time is seconds at which point this request becomes invalid.\n            Timeout = 120,\n            // A human-readable ASCII assertion that the user will sign, and it must not\n            // contain '\\n' (the byte 0x0a).\n            Statement = \"Please confirm\",\n            // An RFC 3986 URI referring to the resource that is the subject of the signing\n            // (as in the subject of a claim).\n            Uri = \"https://defi.finance\"\n        };\n\n        ChallengeResponseDto resp = await MoralisClient.AuthenticationApi.AuthEndpoint.Challenge(req, network);\n\n        return new CreatedAtRouteResult(nameof(RequestMessage), resp);\n    }\n    catch (ApiException ex)\n    {\n        return new BadRequestResult();\n    }\n    catch (Exception ex)\n    {\n        return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Content in JavaScript\nDESCRIPTION: JavaScript implementation for fetching block content using Moralis Block API. Uses the getBlock endpoint with blockNumberOrHash and chain parameters to retrieve block data from the Ethereum network.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-content-by-block-number.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const blockNumberOrHash = \"15863321\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getBlock({\n    blockNumberOrHash,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Get ERC20 Token Allowance using TypeScript\nDESCRIPTION: TypeScript implementation to query token allowance using Moralis EvmApi. Requires Moralis SDK and common-evm-utils. Takes token address, chain, owner address, and spender address as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-the-spender-allowance.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  const address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const ownerAddress = \"0x7c470D1633711E4b77c8397EBd1dF4095A9e9E02\";\n\n  const spenderAddress = \"0xed33259a056f4fb449ffb7b7e2ecb43a9b5685bf\";\n\n  const response = await Moralis.EvmApi.token.getTokenAllowance({\n    address,\n    chain,\n    ownerAddress,\n    spenderAddress,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoint for Native Balance (JavaScript)\nDESCRIPTION: Adds a GET endpoint '/nativeBalance' to the Express app. This endpoint retrieves the native token balance for a given wallet address and chain using 'Moralis.EvmApi.balance.getNativeBalance'. It also fetches the USD price of the native token (approximated via WETH/WMATIC price) using 'Moralis.EvmApi.token.getTokenPrice' and adds it to the response. Requires 'address' and 'chain' as query parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//GET AMOUNT AND VALUE OF NATIVE TOKENS\n\napp.get(\"/nativeBalance\", async (req, res) => {\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const { address, chain } = req.query;\n\n    const response = await Moralis.EvmApi.balance.getNativeBalance({\n      address: address,\n      chain: chain,\n    });\n\n    const nativeBalance = response.data;\n\n    let nativeCurrency;\n    if (chain === \"0x1\") {\n      nativeCurrency = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"; // WETH on Ethereum\n    } else if (chain === \"0x89\") {\n      nativeCurrency = \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\"; // WMATIC on Polygon\n    }\n\n    const nativePrice = await Moralis.EvmApi.token.getTokenPrice({\n      address: nativeCurrency, //WETH Contract\n      chain: chain,\n    });\n\n    nativeBalance.usd = nativePrice.data.usdPrice;\n\n    res.send(nativeBalance);\n  } catch (e) {\n    res.send(e);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting Telegram Bot getUpdates Response - JSON\nDESCRIPTION: This snippet shows the output of the Telegram Bot API's getUpdates endpoint used to retrieve recent messages or events sent to the bot in a channel or chat. It is necessary to obtain the chat id for targeting notifications; the first example shows an empty result, indicating no messages, while the second provides a sample structure with key fields such as 'channel_post', 'chat', 'sender_chat', and 'text'. No dependencies beyond a valid Telegram bot token and recent chat activity are required. Output structure must be parsed to extract chat identifiers for further integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ok\": true,\n  \"result\": []\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ok\": true,\n  \"result\": [\n    {\n      \"update_id\": 596287107,\n      \"channel_post\": {\n        \"message_id\": 3,\n        \"sender_chat\": {\n          \"id\": -1001828021353,\n          \"title\": \"Doodle NFT Bot Channel\",\n          \"type\": \"channel\"\n        },\n        \"chat\": {\n          \"id\": -1001828021353,\n          \"title\": \"Doodle NFT Bot Channel\",\n          \"type\": \"channel\"\n        },\n        \"date\": 1673428599,\n        \"text\": \"Hello\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth and Moralis Authentication Provider - TypeScript\nDESCRIPTION: TypeScript implementation for NextAuth API endpoint. Sets up MoralisNextAuthProvider and ensures proper typing when augmenting the session with user data. Place in pages/api/auth/[...nextauth].ts. Requires NextAuth and @moralisweb3/next. Must be used in TypeScript-based NextJS setups to satisfy type safety in session callback.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\n\nexport default NextAuth({\n  providers: [MoralisNextAuthProvider()],\n  // adding user info to the user session object\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      (session as { user: unknown }).user = token.user;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing RequestMessage Method for Moralis Auth Challenge in C#\nDESCRIPTION: Creates an HTTP POST endpoint to generate an EIP-4361 compliant challenge message using Moralis Auth API. It handles various parameters and error scenarios.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost, Route(\"{address}/{network}/{chainId}\")]\npublic async Task<IActionResult> RequestMessage(string address, ChainNetworkType network, ChainList chainId)\n{\n    try\n    { \n        ChallengeRequestDto req = new ChallengeRequestDto()\n        {\n            Address = address,\n            ChainId = (long)chainId,\n            Domain = \"defi.finance\",\n            ExpirationTime = DateTime.UtcNow.AddMinutes(60),\n            NotBefore = DateTime.UtcNow,\n            Resources = new string[] { \"https://www.1155project.com\" },\n            Timeout = 120,\n            Statement = \"Please confirm\",\n            Uri = \"https://defi.finance\"\n        };\n\n        ChallengeResponseDto resp = await MoralisClient.AuthenticationApi.AuthEndpoint.Challenge(req, network);\n\n        return new CreatedAtRouteResult(nameof(RequestMessage), resp);\n    }\n    catch (ApiException ex)\n    {\n        return new BadRequestResult();\n    }\n    catch (Exception ex)\n    {\n        return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs Owned by an Address using Moralis API - Python\nDESCRIPTION: This Python snippet provides a method for fetching all NFTs owned by a specific Ethereum address with the Moralis Python SDK. The code initializes the API key, constructs a parameters dictionary specifying the address, blockchain (as 'eth'), format, pagination, and optional filters, then calls evm_api.nft.get_wallet_nfts. The result is printed in formatted JSON. Users must install the Moralis SDK for Python, and input their Moralis API key, with options for extra filtering and metadata normalization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Token Price with Moralis API in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch the price of an ERC20 token using the Moralis SDK. It requires the installation of the 'moralis' library and '@moralisweb3/common-evm-utils' package. Key parameters are the 'address' (ERC20 contract address) and 'chain' (target blockchain, e.g., Ethereum). The code prints the returned token price in JSON format. Make sure to replace 'YOUR_API_KEY' with your actual Moralis API key and execute this code in a Node.js environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-the-price-of-an-erc20-token.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenPrice({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Metadata in TypeScript\nDESCRIPTION: Shows how to fetch NFT metadata using Moralis NFT API with TypeScript. The implementation is similar to the JavaScript version but with type definitions included.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/02-NFT Metadata/how-to-get-the-metadata-of-an-nft.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const tokenId = \"3931\";\n\n  const response = await Moralis.EvmApi.nft.getNFTMetadata({\n    address,\n    chain,\n    tokenId,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Defining the Protected View Logic in Django\nDESCRIPTION: This Python code defines a Django view function named `protected`. It retrieves the authenticated user's Ethereum address from the session, queries the Moralis Web3 API to check if the user owns any NFTs from a specific contract address on the Polygon chain (OpenSea contract in this example), and passes the first found NFT's data (if any) to the `protected.html` template for rendering. It requires the `requests` and `json` libraries, Django's request/session handling, and a Moralis `API_KEY`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-gating-django.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python views.py\ndef protected(request):\n    eth_address = request.session.get(\n        'verified_data', {}).get('address', None)\n    nfts = []\n    # this is the opensea contract address on polygon\n    CONTRACT_ADDRESS = \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\"\n    WEB3_API_URL = 'https://deep-index.moralis.io/api/v2'\n    REQUEST_URL = '%s/%s/nft?chain=polygon&token_addresses=%s' % (\n        WEB3_API_URL,\n        eth_address,\n        CONTRACT_ADDRESS\n        )\n         \n    x = requests.get(\n        REQUEST_URL,\n        headers={'X-API-KEY': API_KEY})\n    print(json.loads(x.text))\n    nfts = json.loads(x.text)['result']\n    # show only 1 nft\n    if nfts:\n        nfts = json.dumps([nfts[0]], indent=4)\n    print(eth_address)\n    print(nfts)\n    return render(\n        request, 'protected.html',\n        {'nfts': nfts})\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Top ERC20 Tokens Using Moralis Python SDK - Python\nDESCRIPTION: This snippet utilizes the Moralis Python SDK to fetch the top ERC20 tokens by market cap. It imports the necessary 'moralis' package, sets the API key, and calls evm_api.market_data.get_top_erc20_tokens_by_market_cap with the API key. The result is printed as JSON. Ensure the 'moralis' Python package is installed. Expected input is the API key, and output is a Python dictionary or list of token objects, printed to standard output. This script is run in a Python 3 environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-erc20-tokens-by-market-cap.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\n\nresult = evm_api.market_data.get_top_erc20_tokens_by_market_cap(\n  api_key=api_key,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis in Express Backend - JavaScript\nDESCRIPTION: Sets up Moralis in the Express backend using require(), imports dotenv for environment variables, and enables CORS middleware. Listens on port 8080 without defining any custom routes yet. Dependencies: moralis, express, cors, dotenv. Inputs: none directly. Outputs: startup log. Functional endpoints must be added subsequently.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nrequire(\"dotenv\").config();\n\nconst app = express();\nconst port = 8080;\n\napp.use(cors());\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Trades by Marketplace using Moralis API in TypeScript\nDESCRIPTION: This TypeScript code demonstrates fetching NFT trades for a specific marketplace using the Moralis EvmApi. It imports Moralis and EvmChain, initializes the API with a key, sets up parameters, and makes an API call to getNFTTrades. The response is then logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/06-NFT Marketdata/how-to-get-nft-trades-by-marketplace.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n  \n  const marketplace = \"opensea\";\n\n  const response = await Moralis.EvmApi.nft.getNFTTrades({\n    address,\n    chain,\n    marketplace,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Transfers in TypeScript\nDESCRIPTION: TypeScript implementation to fetch ERC20 token transfers for a specific wallet address using Moralis SDK. Requires Moralis API key and uses the EvmChain.ETHEREUM chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-erc20-transfers-by-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs using JavaScript\nDESCRIPTION: JavaScript implementation to get all NFTs from a collection using Moralis EvmApi. Requires Moralis and @moralisweb3/common-evm-utils dependencies. Uses async/await pattern and accepts address and chain parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getContractNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Handling User Authentication with MetaMask and Wagmi - TypeScript\nDESCRIPTION: Implements the handleAuth() method for authenticating users using MetaMask. It checks for existing Web3 connections, connects to MetaMask, retrieves the user's address and chain, requests a message from the backend, signs it, then verifies on the server and redirects authenticated users to the /user page. Relies on Wagmi for blockchain interactions and axios for HTTP communication. Required parameters include configuration, environment variables, and router navigation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n  async handleAuth() {\n    const { isConnected } = getAccount(config);\n\n    if (isConnected) await disconnect(config); //disconnects the web3 provider if it's already active\n\n    const provider = await connect(config, { connector: injected() }); // enabling the web3 provider metamask\n\n    const userData = {\n      address: provider.accounts[0],\n      chain: provider.chainId,\n    };\n\n    const { data } = await axios.post(\n      `${environment.SERVER_URL}/request-message`,\n      userData\n    );\n\n    const message = data.message;\n\n    const signature = await signMessage(config, { message });\n\n    await axios.post(\n      `${environment.SERVER_URL}/verify`,\n      {\n        message,\n        signature,\n      },\n      { withCredentials: true } // set cookie from Express server\n    );\n\n    // redirect to /user\n    this.router.navigateByUrl('/user');\n  }\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers in TypeScript\nDESCRIPTION: TypeScript implementation to get ERC20 token transfers for a specific wallet address using Moralis Token API. Requires Moralis SDK and common-evm-utils package. Returns transfer details including transaction hashes, addresses, timestamps, and values.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verbose Transactions in TypeScript\nDESCRIPTION: TypeScript implementation for getting verbose transactions of an address using the Moralis Transaction API. This code initializes Moralis with an API key, defines a wallet address and blockchain to query, then calls the getWalletTransactionsVerbose endpoint to retrieve detailed transaction data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-transaction-verbose.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response =\n    await Moralis.EvmApi.transaction.getWalletTransactionsVerbose({\n      address,\n      chain,\n    });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Price with Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the Moralis SDK to fetch the price of an SPL token on the Solana mainnet. It imports necessary types, initializes the Moralis SDK with an API key, defines the token address and network (using `SolNetwork` enum), calls `Moralis.SolApi.token.getTokenPrice`, and logs the resulting price information as JSON. Requires `moralis` and `@moralisweb3/common-sol-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/how-to-get-spl-token-price.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.token.getTokenPrice({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Price with Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript code snippet illustrates how to fetch the current price of a specific ERC20 token using the Moralis SDK. It requires initializing the Moralis SDK with an API key, specifying the token's contract address, and the blockchain chain. The raw API response containing the price data is logged.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"ERC20_TOKEN_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getTokenPrice({\n    chain,\n    address,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with Moralis Streams SDK - JavaScript\nDESCRIPTION: This snippet creates a new blockchain event monitoring stream using the Moralis JavaScript SDK. Required dependencies include the Moralis SDK (installed via npm). Parameters like webhookUrl, description, tag, supported chains, and included native transactions are provided; at least one of the transaction/log switches must be enabled. The script prints the stream ID of the newly created stream.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nconst runApp = async () => {\n    await Moralis.start({\n        apiKey: \"YOUR_API_KEY\",\n    });\n\n    const response = await Moralis.Streams.add({\n        webhookUrl: \"https://webhook.site/1e7ded60-9b44-4708-8a2e-d1c86b2e82d8\", // replace with your own webhook URL\n        description: \"My first stream\",\n        tag: \"my_stream\",\n        chains: [\"0x1\"],\n        includeNativeTxs: true,\n    });\n\n    console.log(response.toJSON().id); // print the stream id\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs using TypeScript\nDESCRIPTION: TypeScript implementation to get all NFTs from a collection using Moralis EvmApi. Includes type safety and requires Moralis and @moralisweb3/common-evm-utils dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getContractNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Metadata with Moralis Token API in JavaScript\nDESCRIPTION: This code demonstrates how to fetch the metadata of one or more ERC20 tokens on a specified EVM-compatible chain using the Moralis Token API in JavaScript. It requires the moralis and @moralisweb3/common-evm-utils packages, and utilizes an API key along with 'addresses' (array of ERC20 addresses) and 'chain' (chain identifier). The output, printed as raw JSON, includes token name, symbol, and decimals. Ensure you replace placeholder values and properly secure your API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const addresses = [\"ERC20_TOKEN_ADDRESS\"];\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getTokenMetadata({\n    chain,\n    addresses,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis with API Key in JavaScript\nDESCRIPTION: Code snippet showing how to import and initialize the Moralis SDK in a JavaScript application. This configuration requires your Moralis API key to authenticate requests to the Moralis services.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/06-common-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nMoralis.start({\n  apiKey: \"YOUR_MORALIS_API_KEY\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Network Constant\nDESCRIPTION: Defining the network constant for EVM compatibility.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst NETWORK = \"evm\";\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs by Wallet and Chain - Moralis SDK - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the Moralis SDK, define a list of EVM-compatible blockchains, and retrieve all NFTs owned by a specified wallet address across these chains using the getWalletNFTs API endpoint. Dependencies include moralis and @moralisweb3/common-evm-utils; an API key is required. Users must set the address and (optionally) the chains to be queried. The output is an array of responses for each chain, printed to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Owners with Moralis NFT API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to retrieve all NFT owners for a specific contract address on Ethereum. It initializes the Moralis client with an API key, configures the contract address and chain, and calls the EvmApi.nft.getNFTOwners endpoint to fetch NFT owner data. Dependencies required are the 'moralis' library and '@moralisweb3/common-evm-utils' package. Inputs include the NFT contract address and blockchain chain, and output is the NFT owners' information printed in JSON format; ensure you have a valid API key and installed peer dependencies for execution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xd4e4078ca3495DE5B1d4dB434BEbc5a986197782\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTOwners({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoint for ERC20 Token Transfers (JavaScript)\nDESCRIPTION: Adds a GET endpoint '/tokenTransfers' to the Express app. It fetches the history of ERC20 token transfers for a given wallet address and chain using 'Moralis.EvmApi.token.getWalletTokenTransfers'. It then iterates through the transfers, fetches token metadata (like decimals and symbol) using 'Moralis.EvmApi.token.getTokenMetadata' for each transfer, and compiles a list of transfers with added details. Requires 'address' and 'chain' as query parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n//GET USERS TOKEN TRANSFERS\n\napp.get(\"/tokenTransfers\", async (req, res) => {\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const { address, chain } = req.query;\n\n    const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n      address: address,\n      chain: chain,\n    });\n\n    const userTrans = response.data.result;\n\n    let userTransDetails = [];\n\n    for (let i = 0; i < userTrans.length; i++) {\n\n      try {\n        const metaResponse = await Moralis.EvmApi.token.getTokenMetadata({\n          addresses: [userTrans[i].address],\n          chain: chain,\n        });\n        if (metaResponse.data) {\n          userTrans[i].decimals = metaResponse.data[0].decimals;\n          userTrans[i].symbol = metaResponse.data[0].symbol;\n          userTransDetails.push(userTrans[i]);\n        } else {\n          console.log(\"no details for coin\");\n        }\n      } catch (e) {\n        console.log(e);\n      }\n\n    }\n\n\n\n    res.send(userTransDetails);\n  } catch (e) {\n    res.send(e);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Failed Webhook History with Moralis Streams - JavaScript\nDESCRIPTION: This JavaScript example shows how to fetch a list of failed webhook deliveries from Moralis Streams using the Moralis SDK's getHistory method. It requires the Moralis JavaScript SDK to be initialized. The limit parameter restricts the maximum results returned. The output is a collection of failed webhook event objects, which can be further processed for replay or audit purposes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst history = await Moralis.Streams.getHistory({ limit: 100 });\n```\n\n----------------------------------------\n\nTITLE: Importing Lens API Client and Query\nDESCRIPTION: Import statement for the Lens API client and Profile query in the main page component. This allows the page to access the Lens Protocol API functionality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { urqlClient, Profile } from './api/lensCalls';\n```\n\n----------------------------------------\n\nTITLE: Implementing Main React App Component with API Call\nDESCRIPTION: Defines the main `App` component. It uses `useState` to manage the fetched `candlestickData` and a `loading` state. The `useEffect` hook calls `fetchOHLCVData` on component mount. `fetchOHLCVData` is an async function that uses `axios` to call the Moralis OHLCV API endpoint, passing the API key from environment variables and query parameters (chain, timeframe, dates, etc.). It formats the API response into the structure expected by the chart component and updates the state. A loading spinner (`ClipLoader`) is shown while data is being fetched.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-chartsjs-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CandlestickChart from \"./components/CandlestickChart\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst App = () => {\n  const [candlestickData, setCandlestickData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchOHLCVData = async () => {\n    setLoading(true);\n    try {\n      const apiKey = process.env.REACT_APP_MORALIS_API_KEY;\n      const currentTime = Math.floor(Date.now() / 1000);\n      const fromDate = currentTime - 30 * 24 * 60 * 60; // 30 days\n\n      const response = await axios.get(\n        `https://deep-index.moralis.io/api/v2.2/pairs/0xa478c2975ab1ea89e8196811f51a7b7ade33eb11/ohlcv`,\n        {\n          params: {\n            chain: \"eth\",\n            timeframe: \"1d\",\n            currency: \"usd\",\n            fromDate,\n            toDate: currentTime,\n            limit: 1000,\n          },\n          headers: {\n            \"X-API-Key\": apiKey,\n          },\n        }\n      );\n\n      const formattedData = response.data.result.map((item) => ({\n        time: Math.floor(new Date(item.timestamp).getTime() / 1000),\n        open: item.open,\n        high: item.high,\n        low: item.low,\n        close: item.close,\n      }));\n\n      setCandlestickData(formattedData);\n    } catch (error) {\n      console.error(\"Error fetching OHLCV data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchOHLCVData();\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <h1>Crypto Candlestick Chart</h1>\n      {loading ? (\n        <div className=\"loading-spinner\">\n          <ClipLoader color=\"#2196f3\" size={50} />\n        </div>\n      ) : (\n        candlestickData.length > 0 && (\n          <div className=\"chart-container\">\n            <CandlestickChart candlestickData={candlestickData} />\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Filtering High-Value USDT Transfers using Moralis Streams - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set up a Moralis Stream with advanced filtering to monitor USDT transactions over $1M from a specific address on Ethereum. Dependencies include the Moralis JavaScript SDK, initialized prior to usage. The filter_ERC20 object specifies the sender and minimum transfer value; parameters are used in stream creation followed by attaching the USDT contract address. Expects a valid Moralis API key and prior SDK initialization; outputs new stream id and attaches the monitored address. Only transfers matching the filter trigger webhooks.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Above code is same as prior\\n\\nconst filter_ERC20 = {\\n  \\\"and\\\": \\[\\n    { \\\"eq\\\": [\\\"from\\\", \\\"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\\\"] },\\n    { \\\"gt\\\": [\\\"value\\\", \\\"1000000000\\\"] }, // Example of USDT (6 Decimals)\\n  ],\\n};\\n\\nconst runApp = async () => {\\n  const stream = {\\n    // same parameters as prior\\n    advancedOptions: [\\n      {\\n        topic0: \\\"Transfer(address,address,uint256)\\\",\\n        filter: filter_ERC20\\n      },\\n    ]\\n  };\\n\\n  const newStream = await Moralis.Streams.add(stream);\\n  const { id } = newStream.toJSON();\\n\\n  // Now we attach USDT address to the stream\\n  const address = \\\"0xdAC17F958D2ee523a2206206994597C13D831ec7\\\";\\n\\n  await Moralis.Streams.addAddress({ address, id });\\n};\\n\\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Filter Options in WebUI for NFT Transfer Monitoring\nDESCRIPTION: This JSON snippet shows the advanced options configuration needed when setting up an NFT transfer monitoring stream through the Moralis WebUI. It filters for transfers from a specific sender address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-listen-to-all-nft-transfers-sent-from-a-specific-address.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\n     \"topic0\": \"transfer(address,address,uint256)\",\n     \"filter\": { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] }\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining ABI Outputs for ERC20 \"balanceOf\" Function - JavaScript\nDESCRIPTION: Defines the outputs array for the ERC20 'balanceOf' ABI in JavaScript, showcasing an unnamed output of type uint256. No additional dependencies beyond standard JavaScript syntax for describing ABI objects. The output array contains a single object without a name property, which affects how result values are keyed in downstream trigger output.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\noutputs: [\n  {\n    name: \"\",\n    type: \"uint256\",\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Native Token Balance with Axios - JavaScript\nDESCRIPTION: This snippet defines a React component that queries a local backend for native (ETH/MATIC) token balances using Axios, formats the balance and USD value, and conditionally displays them in a styled Table using web3uikit. It requires @web3uikit/core, @web3uikit/icons, React, and Axios. The key parameters are 'wallet' (wallet address), 'chain' (chain ID), 'nativeBalance', 'setNativeBalance', 'nativeValue', and 'setNativeValue'. Expects valid API responses with 'balance' and 'usd' fields. The UI allows manual refresh with a Reload icon.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \\\"react\\\";\nimport axios from \\\"axios\\\";\nimport { Table } from \\\"@web3uikit/core\\\";\nimport {Reload} from '@web3uikit/icons'\n\n\nfunction NativeTokens({\n  wallet,\n  chain,\n  nativeBalance,\n  setNativeBalance,\n  nativeValue,\n  setNativeValue,\n}) {\n\n\n  async function getNativeBalance() {\n    const response = await axios.get(\\\"http://localhost:8080/nativeBalance\\\", {\n      params: {\n        address: wallet,\n        chain: chain,\n      },\n    });\n    if (response.data.balance && response.data.usd) {\n      setNativeBalance((Number(response.data.balance) / 1e18).toFixed(3));\n      setNativeValue(\n        (\n          (Number(response.data.balance) / 1e18) *\n          Number(response.data.usd)\n        ).toFixed(2)\n      );\n    }\n  }\n\n  return (\n    <>\n      <div className=\\\"tabHeading\\\">Native Balance <Reload onClick={getNativeBalance}/></div>\n      {(nativeBalance >0 && nativeValue >0) && \n      <Table\n      pageSize={1}\n      noPagination={true}\n      style={{width:\\\"900px\\\"}}\n      columnsConfig=\\\"300px 300px 250px\\\"\n      data={[[\\\"Native\\\", nativeBalance, `$${nativeValue}`]]}\n      header={[\n        <span>Currency</span>,\n        <span>Balance</span>,\n        <span>Value</span>,\n      ]}\n    />\n      }\n      \n    </>\n  );\n}\n\nexport default NativeTokens;\n```\n\n----------------------------------------\n\nTITLE: Fetching Sushiswap V2 Pair Reserves with Moralis SDK (Python)\nDESCRIPTION: This Python snippet shows how to get the reserves of a Sushiswap V2 pair using the Moralis Python SDK. It sets up the API key and parameters including the `pair_address` and `chain`. It then calls the `evm_api.defi.get_pair_reserves` function and prints the result. Requires the `moralis` Python package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-reserves.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"pair_address\": \"0xc40d16476380e4037e6b1a2594caf6a6cc8da967\",\n    \"chain\": \"eth\",\n    # \"to_block\": \"\",\n    # \"to_date\": \"\",\n}\n\nresult = evm_api.defi.get_pair_reserves(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n\n```\n\n----------------------------------------\n\nTITLE: Fetching All NFTs Owned by an Address (EVM) with Moralis Python SDK\nDESCRIPTION: Retrieves a list of all NFTs owned by a specific wallet address on an EVM-compatible chain (e.g., Ethereum) using `evm_api.nft.get_wallet_nfts`. Requires the `moralis` SDK, API key, and parameters like wallet address, chain, limit, and normalization options. The result is converted to a JSON string for printing due to potential unicode characters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Wallet Active Chains\nDESCRIPTION: This JSON object represents a sample response from the Moralis `getWalletActiveChains` endpoint. It includes the queried wallet address and an array `active_chains`, where each object details activity on a specific chain (like 'eth', 'bsc', 'polygon'), including chain ID, and timestamps, block numbers, and transaction hashes for the first and last recorded transactions on that chain for the given address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/01-Wallet Details/how-to-get-multichain-activity-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n  \"active_chains\": [\n    {\n      \"chain\": \"eth\",\n      \"chain_id\": \"0x1\",\n      \"first_transaction\": {\n        \"block_timestamp\": \"2015-09-28T08:24:43.000Z\",\n        \"block_number\": \"302086\",\n        \"transaction_hash\": \"0x9b629147b75dc0b275d478fa34d97c5d4a26926457540b15a5ce871df36c23fd\"\n      },\n      \"last_transaction\": {\n        \"block_timestamp\": \"2023-07-18T22:00:59.000Z\",\n        \"block_number\": \"17722945\",\n        \"transaction_hash\": \"0xde35173f86138e2c0accd780b08cf986009c6ac577d441fe49050764666493e4\"\n      }\n    },\n    {\n      \"chain\": \"bsc\",\n      \"chain_id\": \"0x38\",\n      \"first_transaction\": {\n        \"block_timestamp\": \"2022-03-22T08:29:46.000Z\",\n        \"block_number\": \"16275630\",\n        \"transaction_hash\": \"0x144bf655f6ad276c42e6380997db73eff30725923a2c089fb7e57b3e3d07a32b\"\n      },\n      \"last_transaction\": {\n        \"block_timestamp\": \"2023-06-12T11:37:50.000Z\",\n        \"block_number\": \"29035694\",\n        \"transaction_hash\": \"0x18e5043a363ba33ad2320f7980efd50372bc021fb1b3041e7831db9058492551\"\n      }\n    },\n    {\n      \"chain\": \"polygon\",\n      \"chain_id\": \"0x89\",\n      \"first_transaction\": {\n        \"block_timestamp\": \"2021-07-20T02:38:06.000Z\",\n        \"block_number\": \"17055069\",\n        \"transaction_hash\": \"0x482328171e8549129acd9dde9408602410909adac2e4e46a9591592b2e0e1a24\"\n      },\n      \"last_transaction\": {\n        \"block_timestamp\": \"2023-07-14T08:55:47.000Z\",\n        \"block_number\": \"45062599\",\n        \"transaction_hash\": \"0x7dd9979c5d57ac74c2787f47e8ff9942d0eebf6375ab5262ac48d0455b9c3de3\"\n      }\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Listening to Smart Contract Events with Moralis Streams (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates setting up a Moralis Stream to listen for ERC20 'Transfer' events from the USDT contract (`0xdAC...`) on the Ethereum chain. It defines the event ABI, initializes Moralis, configures the stream with the chain, description, tag, webhook URL, ABI, enables contract logs, and specifies the event topic. It then adds the stream and associates the USDT contract address with it.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst ERC20_transfer_ABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"from\", type: \"address\" },\n      { indexed: true, name: \"to\", type: \"address\" },\n      { indexed: false, name: \"value\", type: \"uint256\" },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const stream = {\n    chains: [EvmChain.ETHEREUM],\n    description: \"monitor USDT transfers\",\n    tag: \"USDT\",\n    webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n    abi: ERC20_transfer_ABI,\n    includeContractLogs: true,\n    topic0: [\"Transfer(address,address,uint256)\"],\n  };\n\n  const newStream = await Moralis.Streams.add(stream);\n  const { id } = newStream.toJSON();\n\n  // Now we attach USDT address to the stream\n  const address = \"0xdAC17F958D2ee523a2206206994597C13D831ec7\";\n\n  await Moralis.Streams.addAddress({ address, id });\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Price in JavaScript\nDESCRIPTION: JavaScript implementation to get ERC20 token price using Moralis API. Requires Moralis and @moralisweb3/common-evm-utils packages. Returns token price and related information for a specified token address on the Ethereum chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-the-price-of-an-erc20-token.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenPrice({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Metadata with Moralis Token API in TypeScript\nDESCRIPTION: This TypeScript snippet retrieves metadata for one or more ERC20 tokens using the Moralis Token API. Importing Moralis and EvmChain, it requires an API key, an array of token addresses, and a chain identifier. The response contains detailed metadata and is printed on the console. Ensure type safety and replace configuration placeholders as needed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const addresses = [\"ERC20_TOKEN_ADDRESS\"];\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getTokenMetadata({\n    chain,\n    addresses,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Token Approvals with Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to fetch token approvals for a specific wallet address on the Ethereum network (chain '0x1'). It first initializes the Moralis SDK with an API key, then calls the `Moralis.EvmApi.token.getWalletApprovals` function with the target chain and wallet address. The raw response containing the approval data is logged to the console. Error handling is included via a try-catch block.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/001-Wallet Approvals/build-a-revoke-cash-clone.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const response = await Moralis.EvmApi.token.getWalletApprovals({\n    chain: \"0x1\",\n    address: \"0xcB1C1FdE09f811B294172696404e88E658659905\",\n  });\n\n  console.log(response.raw);\n} catch (e) {\n  console.error(e);\n}\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Creating State Variables for User Token Input in React (JavaScript)\nDESCRIPTION: This snippet sets up multiple React state variables in the NewInterchainToken component to capture user input from the UI. These variables include token name, symbol, decimals, initial supply, and the salt value, all of which are required arguments for deploying a new interchain token contract. useState hooks are used for managing dynamic user input, which will be passed to contract interaction and UI logic.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst NewInterchainToken: React.FC = () = >{\n  //...\n  const[tokenName, setTokenName] = useState < string > \"\";\n  const[tokenSymbol, setTokenSymbol] = useState < string > \"\";\n  const[tokenDecimals, setTokenDecimals] = useState < number > 18;\n  const[initialSupply, setInitialSupply] = useState < number > 0;\n  const[saltValue, setSaltValue] = useState < string > \"\";\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Express Server Implementation\nDESCRIPTION: Full server implementation including all authentication endpoints, native balance checking, and necessary configurations for Moralis integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\")\nconst cors = require('cors')\nconst Moralis = require(\"moralis\").default\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\")\n\nconst app = express()\nconst port = 3000\n\n// Use CORS\napp.use(cors())\n\n// Using express.urlencoded middleware\napp.use(express.urlencoded({\n  extended: true\n}))\n\n// Values set in the backend\nconst MORALIS_API_KEY = \"Your Moralis API KEY\" //FILL THIS WITH YOUR KEY!!\nconst NETWORK = \"evm\";\n\n// Put your preferred message values here\nconst DOMAIN = 'moralis.io';\nconst STATEMENT = 'Please sign this message to confirm your identity.';\nconst URI = 'https://moralis.io/';\nconst EXPIRATION_TIME = '2023-01-01T00:00:00.000Z';\nconst TIMEOUT = 15;\n\n// requestMessage method\nasync function requestMessage(address, chain) {\n\n    const result = await Moralis.Auth.requestMessage({\n        address,\n        chain,\n        network: NETWORK,\n        domain: DOMAIN,\n        statement: STATEMENT,\n        uri: URI,\n        expirationTime: EXPIRATION_TIME,\n        timeout: TIMEOUT,\n    })\n\n    return result\n}\n\n// verify method\nasync function verify(message, signature) {\n\n    const verifiedData = Moralis.Auth.verify({\n        message: message,\n        signature: signature,\n        network: NETWORK,\n    })\n\n    return verifiedData\n}\n\n// POST operation for requestMessage()\napp.post(\"/request\", async (req, res) => {\n    try {\n        const data = await requestMessage(req.body.address, req.body.chain)\n        res.status(200)\n        res.json(data)\n\n    } catch (error) {\n        // Handle errors\n        console.error(error)\n        res.status(500)\n        res.json({ error: error.message })\n    }\n})\n\n// POST operation for verify()\napp.post(\"/verify\", async (req, res) => {\n    try {\n      const data = await verify(req.body.message, req.body.signature)\n      res.status(200)\n      res.json(data)\n \n    } catch (error) {\n      // Handle errors\n      console.error(error)\n      res.status(500)\n      res.json({ error: error.message })\n    }\n})\n\n// getNativeBalance method\nasync function getNativeBalance(address, chain) {\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  })\n\n  const native = nativeBalance.result.balance.ether\n  return native\n}\n\n// POST operation for getNativeBalance()\napp.post(\"/nativeBalance\", async (req, res) => {\n  try {\n    // Get and return the native balance\n    const nativeBalance = await getNativeBalance(req.body.address, req.body.chain)\n    res.status(200)\n    res.send(nativeBalance)\n\n  } catch (error) {\n    // Handle errors\n    console.error(error)\n    res.status(500)\n    res.json({ error: error.message })\n  }\n})\n\n// Default GET operation\napp.get(\"/\", (req, res) => {\n  res.send(\"Server running!\")\n})\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: MORALIS_API_KEY,\n  })\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`)\n  })\n}\n\nstartServer()\n```\n\n----------------------------------------\n\nTITLE: Connecting to MetaMask Using Ethers.js in JavaScript\nDESCRIPTION: This JavaScript function asynchronously connects to the MetaMask wallet using the Ethers.js provider. It requests the user's accounts and chain ID, retrieves the connected signer, and returns these details for subsequent authentication steps. The function requires that Ethers.js is loaded and that a MetaMask-compatible provider is available in the browser. Parameters for provider methods include 'eth_requestAccounts' for address access and 'eth_chainId' for network verification. The output is an object with the signer, chain ID, and the primary account address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectToMetamask = async () => {\\n  const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\\n\\n  const [accounts, chainId] = await Promise.all([\\n    provider.send('eth_requestAccounts', []),\\n    provider.send('eth_chainId', []),\\n  ]);\\n\\n  const signer = provider.getSigner();\\n  return { signer, chain: chainId, account: accounts[0] };\\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Starter Repository\nDESCRIPTION: Commands to clone the starter repository, install dependencies, and start the development server for the Web3 profile application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/IAmJaysWay/lens-starter\ncd lens-starter\ncd web3profile-starter\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Querying Pancakeswap V1 Pair Address Using Moralis SDK (Python)\nDESCRIPTION: Shows the usage of the Moralis Python SDK to fetch the pair address of a Pancakeswap V1 liquidity pool for given BEP20 token addresses. Requires 'moralis' (install via pip) and a valid API key. Inputs include exchange name, token0_address, token1_address, and chain ID. Invokes 'evm_api.defi.get_pair_address' and prints the JSON response, containing token metadata and the pair address. Suitable for scripting and automation in Python environments.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"exchange\": \"pancakeswapv1\",\n    # token 0 address, e.g. WBNB token address\n    \"token0_address\": \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n    # token 1 address, e.g. LINK token address\n    \"token1_address\": \"0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD\",\n    \"chain\": \"bsc\"\n}\n\nresult = evm_api.defi.get_pair_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying Top NFT Collections by Market Cap with Moralis SDK - Python\nDESCRIPTION: This Python code sample illustrates how to query the top NFT collections by market cap using the Moralis Python SDK. It requires the \\'moralis\\' library to be installed (typically via pip). The script sets the API key, calls the market_data.get_top_nft_collections_by_market_cap function, and prints the result. It assumes Python 3 and prints the API\\'s JSON response directly to the standard output.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-market-cap.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\n\nresult = evm_api.market_data.get_top_nft_collections_by_market_cap(\n  api_key=api_key,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor Pagination with NodeJS for NFT Owner Retrieval\nDESCRIPTION: NodeJS implementation for retrieving NFT owners using Moralis Web3 API with cursor-based pagination. Handles rate limiting, processes paginated results, and stores owner data in a JSON file. Requires Moralis SDK and filesystem module.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/00-General FAQs/02-pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst fs = require(\"fs\");\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst init = async () => {\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n  const chain = EvmChain.ETHEREUM;\n\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const planRateLimit = 150;\n  const endpointRateLimit = 5;\n  let allowedRequests = planRateLimit / endpointRateLimit;\n  let cursor = null;\n  let owners = {};\n\n  do {\n    if (allowedRequests <= 0) {\n      await new Promise((r) => setTimeout(r, 1100));\n      allowedRequests = planRateLimit / endpointRateLimit;\n    }\n\n    const response = await Moralis.EvmApi.nft.getNFTOwners({\n      address,\n      chain,\n      limit: 100,\n      cursor: cursor,\n    });\n\n    console.log(`On page ${response.pagination.page}`);\n\n    for (const NFT of response.result) {\n      if (NFT.ownerOf.checksum in owners) {\n        owners[NFT.ownerOf.checksum].push({\n          amount: NFT.amount,\n          owner: NFT.ownerOf,\n          tokenId: NFT.tokenId,\n          tokenAddress: NFT.tokenAddress,\n        });\n      } else {\n        owners[NFT.ownerOf.checksum] = [\n          {\n            amount: NFT.amount,\n            owner: NFT.ownerOf,\n            tokenId: NFT.tokenId,\n            tokenAddress: NFT.tokenAddress,\n          },\n        ];\n      }\n    }\n    cursor = response.pagination.cursor;\n    allowedRequests--;\n  } while (cursor != \"\" && cursor != null);\n\n  fs.writeFileSync(\"owners.json\", JSON.stringify(owners));\n\n  console.log(\"total owners:\", Object.keys(owners).length);\n};\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction by Hash using Moralis SDK in JavaScript\nDESCRIPTION: Initializes the Moralis SDK with an API key and fetches transaction details using `Moralis.EvmApi.transaction.getTransaction`. Requires `moralis` and `@moralisweb3/common-evm-utils` dependencies. Key parameters are `transactionHash` (the hash of the transaction) and `chain` (the blockchain identifier, e.g., `EvmChain.ETHEREUM`). Outputs the transaction details as a JSON object to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-a-transaction-by-transaction-hash.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const transactionHash =\n    \"0xaae93882e8a9fe9ff30151853db20e4cd161940757a01744465ab83b751c5875\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getTransaction({\n    transactionHash,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Uniswap V3 Pair Address using Moralis SDK in JavaScript\nDESCRIPTION: Initializes the Moralis SDK with an API key and fetches the Uniswap V3 pair address for specified WETH and LINK tokens on the Ethereum chain using `Moralis.EvmApi.defi.getPairAddress`. Requires the `moralis` and `@moralisweb3/common-evm-utils` packages and a valid Moralis API key. Outputs the pair address and token details in JSON format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-uniswap-v3-pair-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"uniswapv3\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers by Contract with Moralis SDK (Python)\nDESCRIPTION: Provides a Python example for getting ERC20 transfers related to a contract address using the `moralis` Python library. Requires the library and an API key. It uses the `evm_api.token.get_token_transfers` function, passing the `api_key` and a `params` dictionary containing the contract `address` and `chain`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-contract.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_token_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet ERC20 Balances with Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the Moralis SDK and use the `Moralis.EvmApi.token.getWalletTokenBalances` method to retrieve ERC20 token balances for a given wallet address on a specific EVM chain (Ethereum in this case). It requires the `moralis` and `@moralisweb3/common-evm-utils` packages and a Moralis API key. The `address` and `chain` parameters specify the target wallet and blockchain. The response, containing token details, is logged to the console in JSON format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Top NFT Collections in Python\nDESCRIPTION: Python implementation using Moralis SDK to get top NFT collections by market cap. Uses the evm_api module and requires API key authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-market-cap.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\n\nresult = evm_api.market_data.get_top_nft_collections_by_market_cap(\n  api_key=api_key,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance with Moralis SDK (TypeScript)\nDESCRIPTION: Uses the Moralis TypeScript SDK to fetch the native balance of an EVM address. Requires `moralis` and `@moralisweb3/common-evm-utils` packages, Moralis initialization with an API key, the target wallet `address`, and the `chain` identifier (e.g., `EvmChain.ETHEREUM`). Outputs the balance information as a JSON object to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-balance-of-a-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async() => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical ERC20 Token Prices in Python\nDESCRIPTION: Python implementation to retrieve historical token prices using Moralis API. Makes multiple requests to get prices at different block heights using the get_token_price endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-historical-erc20-token-price.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nhistoricalPrice = []\n\nfor to_block in range(16323500, 16323550, 10):\n  params = {\n    \"address\": \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\n    \"chain\": \"eth\",\n    \"to_block\": to_block\n  }\n  result = evm_api.token.get_token_price(\n    api_key=api_key,\n    params=params,\n  )\n\n  historicalPrice.append(result)\n\nprint(historicalPrice)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor Pagination with Python for NFT Owner Retrieval\nDESCRIPTION: Python implementation for retrieving NFT owners using Moralis Web3 API with cursor-based pagination. Handles rate limiting, processes paginated results, and stores owner data in a JSON file. Requires Moralis Python SDK.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/00-General FAQs/02-pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport time\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\naddress = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\"\nchain = \"0x1\"\n\n\ndef get_all_nft_owners(chain, address):\n    plan_rate_limit = 150\n    endpoint_rate_limit = 5\n    allowed_requests = plan_rate_limit / endpoint_rate_limit\n\n    cursor = \"\"\n    owners = {}\n\n    response = evm_api.nft.get_nft_owners(\n        api_key=api_key,\n        params={\n            \"chain\": chain,\n            \"address\": address,\n            \"cursor\": cursor,\n        },\n    )\n\n    cursor = response[\"cursor\"]\n    print(f\"On page {response['page']}\")\n\n    for nft in response[\"result\"]:\n        if nft[\"owner_of\"] in owners:\n            owners[nft[\"owner_of\"]].append(\n                {\n                    \"amount\": nft[\"amount\"],\n                    \"owner\": nft[\"owner_of\"],\n                    \"token_id\": nft[\"token_id\"],\n                    \"token_address\": nft[\"token_address\"],\n                }\n            )\n        else:\n            owners[nft[\"owner_of\"]] = [\n                {\n                    \"amount\": nft[\"amount\"],\n                    \"owner\": nft[\"owner_of\"],\n                    \"token_id\": nft[\"token_id\"],\n                    \"token_address\": nft[\"token_address\"],\n                }\n            ]\n\n    while cursor != \"\" and cursor is not None:\n        if allowed_requests <= 1:\n            time.sleep(1.1)\n            allowed_requests = plan_rate_limit / endpoint_rate_limit\n\n        response = evm_api.nft.get_nft_owners(\n            api_key=api_key,\n            params={\n                \"chain\": chain,\n                \"address\": address,\n                \"cursor\": cursor,\n            },\n        )\n        print(f\"On page {response['page']}\")\n        for nft in response[\"result\"]:\n            if nft[\"owner_of\"] in owners:\n                owners[nft[\"owner_of\"]].append(\n                    {\n                        \"amount\": nft[\"amount\"],\n                        \"owner\": nft[\"owner_of\"],\n                        \"token_id\": nft[\"token_id\"],\n                        \"token_address\": nft[\"token_address\"],\n                    }\n                )\n            else:\n                owners[nft[\"owner_of\"]] = [\n                    {\n                        \"amount\": nft[\"amount\"],\n                        \"owner\": nft[\"owner_of\"],\n                        \"token_id\": nft[\"token_id\"],\n                        \"token_address\": nft[\"token_address\"],\n                    }\n                ]\n\n        cursor = response[\"cursor\"]\n        allowed_requests -= 1\n\n    print(f\"Total owners: {len(owners)}\")\n    return owners\n\n\nowners = get_all_nft_owners(chain=chain, address=address)\n\nwith open(\"owners.json\", \"w\") as file:\n    json.dump(owners, file)\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Collection Transfers in Python\nDESCRIPTION: This code demonstrates how to get all transfers for an NFT collection using the Moralis Python SDK. It imports the evm_api module, sets the required parameters including API key, NFT collection address, and chain, then calls the get_nft_contract_transfers function.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft-collection.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n}\n\nresult = evm_api.nft.get_nft_contract_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Next-Auth with MoralisNextAuthProvider in TypeScript\nDESCRIPTION: Demonstrates setting up the Next-Auth configuration in `pages/api/auth/[...nextauth].ts`. It uses `MoralisNextAuthProvider` from `@moralisweb3/next` as an authentication provider. The callbacks `jwt` and `session` are configured to include user information obtained from Moralis authentication into the JWT and session objects, making it accessible in the application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\n\nexport default NextAuth({\n  providers: [MoralisNextAuthProvider()],\n  // adding user info to the user session object\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      (session as { user: unknown }).user = token.user;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor Pagination with Node.js in Moralis API\nDESCRIPTION: This Node.js example demonstrates how to use cursor pagination to retrieve all NFT owners for a specific contract (Cryptopunks). It processes multiple pages of results, organizing the data into an owners object with token details, and continues pagination until no more results are available.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/resources/03-pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\nconst init = async () => {\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\"; //Cryptopunks contract address\n  const chain = EvmChain.ETHEREUM;\n  await Moralis.start({\n    apiKey: \"MORALIS_API_KEY\",\n    // ...and any other configuration\n  });\n  let cursor = null;\n  let owners = {};\n  do {\n    const response = await Moralis.EvmApi.nft.getNFTOwners({\n      address,\n      chain,\n      limit: 100,\n      cursor: cursor,\n      disableTotal: false,\n    });\n    console.log(\n      `Got page ${response.pagination.page} of ${Math.ceil(\n        response.pagination.total / response.pagination.pageSize\n      )}, ${response.pagination.total} total`\n    );\n    for (const NFT of response.result) {\n      if (NFT.ownerOf.checksum in owners) {\n        owners[NFT.ownerOf.checksum].push({\n          amount: NFT.amount,\n          owner: NFT.ownerOf,\n          tokenId: NFT.tokenId,\n          tokenAddress: NFT.tokenAddress,\n        });\n      } else {\n        owners[NFT.ownerOf.checksum] = [\n          {\n            amount: NFT.amount,\n            owner: NFT.ownerOf,\n            tokenId: NFT.tokenId,\n            tokenAddress: NFT.tokenAddress,\n          },\n        ];\n      }\n    }\n    cursor = response.pagination.cursor;\n  } while (cursor != \"\" && cursor != null);\n  console.log(\"owners:\", owners, \"total owners:\", Object.keys(owners).length);\n};\ninit();\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Metadata with Moralis SDK (JavaScript)\nDESCRIPTION: This snippet demonstrates how to fetch metadata (name, symbol, decimals) for one or more ERC20 tokens using the Moralis JavaScript SDK. It requires initializing the Moralis SDK with an API key, specifying the token contract addresses, and the target blockchain chain. The raw API response containing the metadata is logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const addresses = [\"ERC20_TOKEN_ADDRESS\"];\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getTokenMetadata({\n    chain,\n    addresses,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Program Dependencies\nDESCRIPTION: Shell commands to add required Rust packages for Solana program development.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo add solana_program\ncargo add borsh\n```\n\n----------------------------------------\n\nTITLE: Get ERC20 Token Allowance using JavaScript\nDESCRIPTION: JavaScript implementation to query token allowance using Moralis EvmApi. Requires Moralis SDK and common-evm-utils. Takes token address, chain, owner address, and spender address as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-the-spender-allowance.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  const address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const ownerAddress = \"0x7c470D1633711E4b77c8397EBd1dF4095A9e9E02\";\n\n  const spenderAddress = \"0xed33259a056f4fb449ffb7b7e2ecb43a9b5685bf\";\n\n  const response = await Moralis.EvmApi.token.getTokenAllowance({\n    address,\n    chain,\n    ownerAddress,\n    spenderAddress,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Deleting an Address from a Moralis Stream using JavaScript\nDESCRIPTION: This snippet shows how to remove a specific blockchain address from a Moralis stream using the `Moralis.Streams.deleteAddress` method. It requires the Moralis SDK, the stream's `id`, and the specific `address` to be deleted. This is an asynchronous operation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/monitor-multiple-addresses.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Delete an address\nawait Moralis.Streams.deleteAddress({\n  id,\n  address,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs by Wallet and Chain - Moralis SDK - TypeScript\nDESCRIPTION: This TypeScript adaption illustrates the same functionality as the JavaScript version, using ES module import syntax, strict typing, and the Moralis and @moralisweb3/common-evm-utils packages. It initializes Moralis, iterates through specified chains, calls getWalletNFTs for the target address, and aggregates the results for display. The script should be run in a TypeScript environment with all dependencies installed and requires an API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoint for ERC20 Token Balances (JavaScript)\nDESCRIPTION: Adds a GET endpoint '/tokenBalances' to the Express app. This endpoint fetches all ERC20 token balances for a given wallet address and chain using 'Moralis.EvmApi.token.getWalletTokenBalances'. It then iterates through the tokens, fetches their USD prices using 'Moralis.EvmApi.token.getTokenPrice', and filters out tokens with a price below $0.01, returning an array of valuable tokens with their balances and prices. Requires 'address' and 'chain' as query parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//GET AMOUNT AND VALUE OF ERC20 TOKENS\n\napp.get(\"/tokenBalances\", async (req, res) => {\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const { address, chain } = req.query;\n\n    const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n      address: address,\n      chain: chain,\n    });\n\n    let tokens = response.data;\n    let legitTokens = [];\n    for (let i = 0; i < tokens.length; i++) {\n      try {\n        const priceResponse = await Moralis.EvmApi.token.getTokenPrice({\n          address: tokens[i].token_address,\n          chain: chain,\n        });\n        if (priceResponse.data.usdPrice > 0.01) {\n          tokens[i].usd = priceResponse.data.usdPrice;\n          legitTokens.push(tokens[i]);\n        } else {\n          console.log(\"💩 coin\");\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n\n    res.send(legitTokens);\n  } catch (e) {\n    res.send(e);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Top ERC20 Tokens Price Movers using Moralis Market Data API (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use Moralis to retrieve the top ERC20 tokens by price gain and loss. It initializes Moralis with an API key, makes a call to getTopERC20TokensByPriceMovers on the Market Data API, and logs the raw result. Dependencies include the 'moralis' and '@moralisweb3/common-evm-utils' packages. Inputs include a valid Moralis API key, outputs include JSON-formatted results of top ERC20 movers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-ERC20-tokens-by-price-change.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getTopERC20TokensByPriceMovers();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Ngrok Forwarding Output\nDESCRIPTION: This text snippet shows an example of the Ngrok output, displaying the forwarding URL that maps to the local server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nForwarding https://***.ngrok.io -> http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Implementing Moralis Signature Verification and Discord Bot\nDESCRIPTION: Combines Moralis signature verification with Discord bot implementation to send notifications for new donations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst Moralis = require(\"moralis\").default;\nconst discord = require(\"discord.js\");\nrequire(\"dotenv\").config();\nconst app = express();\nconst port = 3000;\n\nconst client = new discord.Client({\n  intents: [],\n});\n\nclient.login(process.env.PASS);\n\napp.use(express.json());\n\napp.post(\"/webhook\", async (req, res) => {\n  const { body, headers } = req;\n\n  try {\n    Moralis.Streams.verifySignature({\n      body,\n      signature: headers[\"x-signature\"],\n    });\n\n    let from = body.txs[0].fromAddress;\n    let amount = Number(body.txs[0].value / 1e18);\n\n    const channel = await client.channels.fetch(process.env.CHANNEL);\n    channel.send(\n      `New Donation submitted by ${from}, for ${amount.toFixed(2)} MATIC!!!!`\n    );\n\n    return res.status(200).json();\n  } catch (e) {\n    console.log(\"Not Moralis\");\n    return res.status(400).json();\n  }\n});\n\nMoralis.start({\n  apiKey: process.env.APIKEY,\n}).then(() => {\n  app.listen(port, () => {\n    console.log(`Listening to streams`);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring Wallet Transactions with Moralis Streams (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to set up a Moralis Stream to monitor native transactions for a specific wallet address (`0x68b...`) on the Ethereum and Polygon chains. It initializes the Moralis SDK, defines the stream configuration including chains, description, tag, webhook URL, and enables native transaction inclusion. It then adds the stream and associates the target wallet address with it.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const stream = {\n    chains: [EvmChain.ETHEREUM, EvmChain.POLYGON],\n    description: \"monitor Bobs wallet\",\n    tag: \"bob\",\n    webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n    includeNativeTxs: true,\n  };\n\n  const newStream = await Moralis.Streams.add(stream);\n  const { id } = newStream.toJSON();\n\n  // Now we attach bobs address to the stream\n  const address = \"0x68b3f12d6e8d85a8d3dbbc15bba9dc5103b888a4\";\n\n  await Moralis.Streams.addAddress({ address, id });\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Transactions with Moralis Block API in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to use the Moralis SDK to retrieve all transactions from a specific block on the Ethereum blockchain, including internal transactions, using the getBlock endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const blockNumberOrHash = \"15863321\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getBlock({\n    blockNumberOrHash,\n    chain,\n    include: \"internal_transactions\",\n  });\n\n  console.log(response?.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uniswap V2 Pair Address using Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates initializing the Moralis SDK and using the `Moralis.EvmApi.defi.getPairAddress` function to find the Uniswap V2 pair address for two given token addresses (WETH and LINK in this example) on the Ethereum chain. It requires the Moralis SDK (`moralis`, `@moralisweb3/common-evm-utils`) and an API key. The script logs the JSON response containing token details and the pair address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-address-of-a-liquidity-pool.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Uniswap V2 Pair Reserves in JavaScript\nDESCRIPTION: JavaScript implementation to fetch pair reserves from a Uniswap V2 liquidity pool using Moralis DeFi API. Requires Moralis API key and pair address as input parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-reserves.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Top NFT Collections in JavaScript\nDESCRIPTION: JavaScript implementation using Moralis SDK to get top NFT collections by market cap. Requires Moralis API key and proper SDK initialization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-market-cap.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getTopNFTCollectionsByMarketCap();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Handling Client-Side Authentication Flow with MetaMask and Ether.js\nDESCRIPTION: This asynchronous JavaScript function `handleAuth` implements the user authentication process. It first connects to MetaMask using `connectToMetamask`, then fetches a challenge message from the backend (via an assumed `requestMessage` function, likely using Axios). The user signs this message using their wallet's signer, and the resulting signature along with the original message is sent back to the backend for verification (via an assumed `verifyMessage` function). Upon successful verification, user data is retrieved and rendered (using an assumed `renderUser` function). Depends on `connectToMetamask`, `requestMessage`, `verifyMessage`, `renderUser`, Ether.js, and likely Axios.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst handleAuth = async () => {\n  // Connect to Metamask\n  const { signer, chain, account } = await connectToMetamask();\n\n  if (!account) {\n    throw new Error('No account found');\n  }\n  if (!chain) {\n    throw new Error('No chain found');\n  }\n\n  // Assumes existence of requestMessage function (likely using Axios)\n  const { message } = await requestMessage(account, chain);\n\n  const signature = await signer.signMessage(message);\n\n  // Assumes existence of verifyMessage function (likely using Axios)\n  const { user } = await verifyMessage(message, signature);\n\n  // Assumes existence of renderUser function\n  renderUser(user);\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Transactions with Moralis SDK in TypeScript\nDESCRIPTION: Initializes the Moralis SDK using TypeScript syntax, providing an API key. It defines the wallet address and specifies the Ethereum chain via `EvmChain`. The `Moralis.EvmApi.transaction.getWalletTransactions` method is called asynchronously to fetch transactions, and the result is logged as JSON. Requires the `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/05-Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Adding npm Start Script for Nodemon\nDESCRIPTION: This JSON snippet adds a 'start' script to package.json, allowing the use of 'npm run start' to run the app with nodemon for auto-restarting.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"start\": \"nodemon index.js\",\n  ...\n},\n```\n\n----------------------------------------\n\nTITLE: Fetching All NFTs using Moralis Wallet API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Moralis Wallet API in a Node.js environment to fetch all NFTs from a specific collection on Ethereum. It requires the 'moralis' and '@moralisweb3/common-evm-utils' npm packages. The key parameters are 'address' (the NFT contract address) and 'chain' (the blockchain network, here set to Ethereum). Outputs a JSON representation of all NFTs retrieved from the collection. The code must be executed after replacing 'YOUR_API_KEY' with a valid Moralis API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getContractNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Building Protected User Profile Page with Solana Wallet and NextAuth (JavaScript & React)\nDESCRIPTION: This React page component is a protected user dashboard that displays user data and manages wallet disconnection using Solana wallet adapter hooks and NextAuth session/server authentication. It uses getServerSideProps for session validation, rendering user information and providing both WalletDisconnectButton and LogoutBtn based on wallet state. The component depends on @solana/wallet-adapter-react, @solana/wallet-adapter-react-ui, and NextAuth, requiring proper authentication configuration. It expects a user session prop and responds to session and wallet connection changes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useTransition } from \\\"react\\\";\nimport styles from \\\"../styles/User.module.css\\\";\nimport { getSession, signOut } from \\\"next-auth/react\\\";\nimport UserData from \\\"../app/components/userData/userData\\\";\nimport LogoutBtn from \\\"../app/components/logoutBtn/logoutBtn\\\";\nimport { WalletDisconnectButton } from \\\"@solana/wallet-adapter-react-ui\\\";\nimport { useWallet } from \\\"@solana/wallet-adapter-react\\\";\nrequire(\\\"@solana/wallet-adapter-react-ui/styles.css\\\");\n\nexport async function getServerSideProps(context) {\n  const session = await getSession(context);\n  if (!session) {\n    return { redirect: { destination: \\\"/\\\" } };\n  }\n  return {\n    props: { userSession: session },\n  };\n}\n\nexport default function Home({ userSession }) {\n  const { publicKey, disconnecting, connected } = useWallet();\n  const [isPending, startTransition] = useTransition();\n\n  console.log(userSession);\n\n  useEffect(() => {\n    startTransition(() => {\n      publicKey && console.log(publicKey.toBase58());\n    });\n  }, [publicKey]);\n\n  useEffect(() => {\n    startTransition(() => {\n      disconnecting && signOut();\n    });\n  }, [disconnecting]);\n\n  useEffect(() => {\n    startTransition(() => {\n      console.log({ disconnecting });\n    });\n  }, [disconnecting]);\n\n  if (userSession) {\n    return (\n      <div className={styles.body}>\n        {!isPending && (\n          <div className={styles.card}>\n            <>\n              <UserData />\n              <div className={styles.buttonsRow}>\n                {connected || disconnecting ? (\n                  <WalletDisconnectButton />\n                ) : (\n                  <LogoutBtn />\n                )}\n              </div>\n            </>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Uniswap V3 Pair Address using Moralis SDK (Python)\nDESCRIPTION: This Python snippet demonstrates fetching a Uniswap V3 pair address using the Moralis Python SDK. It sets up the parameters including the exchange ('uniswapv3'), token addresses (WETH and LINK), and the chain ('eth'). It then calls the `evm_api.defi.get_pair_address` function with the API key and parameters dictionary. The resulting pair information is printed to the standard output.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-uniswap-v3-pair-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"exchange\": \"uniswapv3\",\n    # token 0 address, e.g. WETH token address\n    \"token0_address\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    # token 1 address, e.g. LINK token address\n    \"token1_address\": \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.defi.get_pair_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Updating a Stream with ERC20 Transfer Logs - JavaScript\nDESCRIPTION: This JavaScript snippet updates an existing stream to monitor ERC20 transfer events by adding contract log support and specifying an Ethereum event ABI. Dependencies include Moralis SDK and an existing stream ID. Key parameters include the ABI array, topic0 filter, and updated description. Useful for adding custom filtering to streams.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst runApp = async () => {\n    await Moralis.start({\n        apiKey: \"YOUR_API_KEY\",\n    });\n\n    const ERC20TransferABI = [\n        {\n            anonymous: false,\n            inputs: [\n                {\n                    indexed: true,\n                    name: \"from\",\n                    type: \"address\",\n                },\n                {\n                    indexed: true,\n                    name: \"to\",\n                    type: \"address\",\n                },\n                {\n                    indexed: false,\n                    name: \"value\",\n                    type: \"uint256\",\n                },\n            ],\n            name: \"Transfer\",\n            type: \"event\",\n        },\n    ];\n\n    const topic = \"Transfer(address,address,uint256)\";\n\n    const response = await Moralis.Streams.update({\n        id: \"4f7dbfb3-42c9-4d8d-bbba-975ea2d2b1a1\", // stream ID from the previous snippet\n        abi: ERC20TransferABI,\n        includeContractLogs: true,\n        topic0: [topic],\n        description: \"My first stream updated\",\n    });\n\n    console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Displaying and Filtering NFT Portfolio with Metadata Processing - JavaScript\nDESCRIPTION: This React component fetches a user's NFTs from a local API using Axios, processes the returned metadata to extract images (handling IPFS links), and provides name and ID filters via web3uikit Input controls. It displays NFT cards with images and metadata. Prerequisites: React, Axios, @web3uikit/core, @web3uikit/icons. Key props: 'chain', 'wallet', 'filteredNfts', 'setFilteredNfts', 'nfts', 'setNfts'. Assumes NFT metadata is correctly formatted as JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \\\"react\\\";\nimport axios from \\\"axios\\\";\nimport { useState, useEffect } from \\\"react\\\";\nimport { Reload } from \\\"@web3uikit/icons\\\";\nimport { Input } from \\\"@web3uikit/core\\\"\n\nfunction Nfts({ chain, wallet, filteredNfts, setFilteredNfts, nfts, setNfts }) {\n  const [nameFilter, setNameFilter] = useState(\\\"\\\");\n  const [idFilter, setIdFilter] = useState(\\\"\\\");\n\n  async function getUserNfts() {\n    const response = await axios.get(\\\"http://localhost:8080/nftBalance\\\", {\n      params: {\n        address: wallet,\n        chain: chain,\n      },\n    });\n\n    if (response.data.result) {\n      nftProcessing(response.data.result);\n    }\n  }\n\n  function nftProcessing(t) {\n    for (let i = 0; i < t.length; i++) {\n      let meta = JSON.parse(t[i].metadata);\n      if (meta && meta.image) {\n        if (meta.image.includes(\\\".\\\")) {\n          t[i].image = meta.image;\n        } else {\n          t[i].image = \\\"https://ipfs.moralis.io:2053/ipfs/\\\" + meta.image;\n        }\n      }\n    }\n    setNfts(t);\n    setFilteredNfts(t);\n  }\n\n  useEffect(() => {\n    if (idFilter === \\\"\\\" && nameFilter === \\\"\\\") {\n      return setFilteredNfts(nfts);\n    }\n\n    let filNfts = [];\n\n    for (let i = 0; i < nfts.length; i++) {\n      if (\n        nfts[i].name.toLowerCase().includes(nameFilter) &&\n        idFilter.length === 0\n      ) {\n        filNfts.push(nfts[i]);\n      } else if (\n        nfts[i].token_id.includes(idFilter) &&\n        nameFilter.length === 0\n      ) {\n        filNfts.push(nfts[i]);\n      } else if (\n        nfts[i].token_id.includes(idFilter) &&\n        nfts[i].name.toLowerCase().includes(nameFilter)\n      ) {\n        filNfts.push(nfts[i]);\n      }\n    }\n\n    setFilteredNfts(filNfts);\n  }, [nameFilter, idFilter]);\n\n  return (\n    <>\n      <div className=\\\"tabHeading\\\">\\n        NFT Portfolio <Reload onClick={getUserNfts} />\\n      </div>\n      <div className= \\\"filters\\\">\\n      <Input\\n          id=\\\"NameF\\\"\\n          label=\\\"Name Filter\\\"\\n          labelBgColor=\\\"rgb(33, 33, 38)\\\"\\n          value={nameFilter}\\n          style={{}}\\n          onChange={(e) => setNameFilter(e.target.value)}\\n        />\\n        <Input\\n          id=\\\"IdF\\\"\\n          label=\\\"Id Filter\\\"\\n          labelBgColor=\\\"rgb(33, 33, 38)\\\"\\n          value={idFilter}\\n          style={{}}\\n          onChange={(e) => setIdFilter(e.target.value)}\\n        />\\n        </div>\\n        <div className=\\\"nftList\\\">\\n        {filteredNfts.length > 0 &&\\n        \\n          filteredNfts.map((e) => {\\n            return (\\n              <>\\n                <div className=\\\"nftInfo\\\">\\n                {e.image && <img src={e.image} width={200} />}\\n                \\n                <div>Name: {e.name}, </div>\\n                <div>(ID: {e.token_id.slice(0,5)})</div>\\n                </div>\\n              </>\\n            );\\n          })\\n          }\\n          </div>\\n      \\n    </>\\n  );\\n}\\n\\nexport default Nfts;\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Balance using Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to retrieve the SPL token balance for a Solana wallet address using the Moralis SDK with type safety. It initializes Moralis, defines the address and network (MAINNET using `SolNetwork` enum), and calls `Moralis.SolApi.account.getSPL`. The resulting token balances are logged. Requires `moralis` and `@moralisweb3/common-sol-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/token-api/how-to-get-spl-token-balance-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getSPL({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical ERC20 Token Prices in JavaScript\nDESCRIPTION: JavaScript implementation to retrieve historical token prices using Moralis API. Makes multiple requests to get prices at different block heights using the getTokenPrice endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-historical-erc20-token-price.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const historicalPrice = [];\n\n  const address = \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  for (let toBlock = 16323500; toBlock < 16323550; toBlock += 10) {\n    const response = await Moralis.EvmApi.token.getTokenPrice({\n      address,\n      chain,\n      toBlock,\n    });\n\n    historicalPrice.push(response?.toJSON());\n  }\n\n  console.log(historicalPrice);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis Stream for ERC20 Token Transfer Tracking\nDESCRIPTION: Sets up a Moralis stream to monitor BUSD token transfers on BSC network. Defines the ERC20 Transfer event ABI, configures stream options with filters for specific token address, and adds wallet addresses to track. Uses webhook for notifications and includes contract logs with specific topic filtering.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-track-specific-erc20-token-transfers-from-a-list-of-wallets.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ERC20TransferABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n];\n\n// This filter will only listen to BUST token transfers\nconst filter = {\n    eq: [\n        \"moralis_streams_contract_address\",\n        \"0x55d398326f99059ff775485246999027b3197955\",\n    ], // BUST contract https://bscscan.com/token/0x55d398326f99059ff775485246999027b3197955\n};\n\nconst options = {\n    chains: [\"0x38\"],\n    description: \"Listen to a list of wallets for BUSD transfers\",\n    tag: \"busd-transfers\",\n    webhookUrl: \"https://webhook.site/e04c2edc-afb9-45b8-aff5-20724b2b1561\",\n    includeContractLogs: true,\n    topic0: [\"Transfer(address,address,uint256)\"],\n    abi: ERC20TransferABI,\n    advancedOptions: [\n        {\n            topic0: \"Transfer(address,address,uint256)\",\n            filter,\n        },\n    ],\n};\n\nconst stream = await Moralis.Streams.add(options);\n\nconst { id } = stream.toJSON(); // { id: 'YOUR_STREAM_ID', ...stream }\n\n// Attach the list of addresses to the stream\nawait Moralis.Streams.addAddress({\n    id,\n    address: [\"0x1234...5678\", \"0x8765...4321\", \"0x543...0f43\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying NFT Metadata in Card (TypeScript/JSX)\nDESCRIPTION: This React component (`src/components/modules/NFTCard/NFTCard.jsx`) is responsible for fetching and displaying the details of a single NFT. It receives the NFT mint address (`nftAddress`) and an optional filter query (`filterQuery`) as props. It uses `useEffect` to call `getNFTMetadata` on mount, which fetches metadata via a backend API call (`/SolApi/nft/getNFTMetadata`) and an additional `axios` request to the metadata URI. The fetched data (name, image, symbol, standard) is stored in state and rendered in the card UI. It also includes basic filtering logic based on the NFT symbol.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `src/components/modules/NFTCard/NFTCard.jsx`\n\n// 5️⃣\n// NFTCard uses two parameters.\n// Lets take a look at `nftAddress` address now.\nconst NFTCard = ({ nftAddress, filterQuery }) => {\n  //...\n  const [nftData, setNftData] = useState({\n    contractType: \"\",\n    name: \"\",\n    symbol: \"\",\n    metadata: \"\",\n  });\n  const [filterSymbol, setFilterSymbol] = useState();\n\n  //7️⃣\n  // `getNFTMetadata` function sends a request to backend api route\n  // to fetch the metadata.\n  const getNFTMetadata = async () => {\n    const options = {\n      network: \"mainnet\",\n      address: nftAddress,\n    };\n    const response = await apiPost(\"/SolApi/nft/getNFTMetadata\", options);\n    const result = await axios.get(`${response.metaplex.metadataUri}`, {\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    });\n    setFilterSymbol(response.symbol);\n    // 9️⃣\n    // Data from backend API route is saved in `nftData` state variable.\n    setNftData({\n      contractType: response.standard,\n      name: response.name,\n      symbol: response.symbol,\n      metadata: result.data,\n    });\n  };\n\n  // 6️⃣\n  // When the component is first loaded with `nftAddress` this below\n  // useEffect will be triggered and it invokes the `getNFTMetadata` function.\n  useEffect(() => {\n    if (nftAddress) {\n      getNFTMetadata();\n    }\n  }, [nftAddress]);\n\n  if (filterSymbol?.toLowerCase().includes(filterQuery)) {\n    return (\n      <>\n        // 🔟 // When the data in `nftData` state variable is updated, the UI //\n        will be rendered with the NFT metadata.\n        <Box\n          bgColor={bgColor}\n          padding={3}\n          borderRadius=\"xl\"\n          borderWidth=\"1px\"\n          borderColor={borderColor}\n        >\n          <Box maxHeight=\"260px\" overflow={\"hidden\"} borderRadius=\"xl\">\n            <Image\n              src={resolveIPFS(nftData?.metadata?.image)}\n              //...\n            />\n          </Box>\n          <Box mt=\"1\" fontWeight=\"semibold\" as=\"h4\" noOfLines={1} marginTop={2}>\n            {nftData?.name ? nftData?.name : <>no name</>}\n          </Box>\n          <HStack alignItems={\"center\"}>\n            <Box as=\"h4\" noOfLines={1} fontWeight=\"medium\" fontSize=\"smaller\">\n              {nftData?.contractType} standard\n            </Box>\n          </HStack>\n          <SimpleGrid\n            columns={1}\n            spacing={4}\n            bgColor={descBgColor}\n            padding={2.5}\n            borderRadius=\"xl\"\n            marginTop={2}\n          >\n            <Box>\n              <Box as=\"h4\" noOfLines={1} fontWeight=\"medium\" fontSize=\"sm\">\n                Symbol\n              </Box>\n              <Box as=\"h4\" noOfLines={1} fontSize=\"sm\">\n                {nftData?.symbol ? nftData?.symbol : <>no symbol</>}\n              </Box>\n            </Box>\n          </SimpleGrid>\n        </Box>\n      </>\n    );\n  }\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Querying ERC20 Token Balances with Moralis Web3 API (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates invoking Moralis's getWalletTokenBalances API to return all ERC20 tokens for a specified address and chain. Dependencies required are 'moralis' and '@moralisweb3/common-evm-utils'. Specify the wallet address and EvmChain, then output the token result to console as JSON. Ensure you use a valid Moralis API key and set up TypeScript properly for execution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Listening to Smart Contract Events with Moralis Streams API (TypeScript)\nDESCRIPTION: This TypeScript example shows how to use the Moralis SDK to create a stream that listens for ERC20 'Transfer' events emitted by the USDT contract (`0xdA...`) on the Ethereum network. It includes defining the event ABI (`ERC20_transfer_ABI`), initializing Moralis, setting up the stream configuration (chain, description, tag, webhook, ABI, `includeContractLogs: true`, `topic0`), creating the stream via `Moralis.Streams.add`, and adding the USDT contract address to the stream with `Moralis.Streams.addAddress`. A Moralis API key (`YOUR_API_KEY`) and a webhook URL (`YOUR_WEBHOOK_URL`) are needed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst ERC20_transfer_ABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"from\", type: \"address\" },\n      { indexed: true, name: \"to\", type: \"address\" },\n      { indexed: false, name: \"value\", type: \"uint256\" },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const stream = {\n    chains: [EvmChain.ETHEREUM],\n    description: \"monitor USDT transfers\",\n    tag: \"USDT\",\n    webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n    abi: ERC20_transfer_ABI,\n    includeContractLogs: true,\n    topic0: [\"Transfer(address,address,uint256)\"],\n  };\n\n  const newStream = await Moralis.Streams.add(stream);\n  const { id } = newStream.toJSON();\n\n  // Now we attach USDT address to the stream\n  const address = \"0xdAC17F958D2ee523a2206206994597C13D831ec7\";\n\n  await Moralis.Streams.addAddress({ address, id });\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Page with Wallet Authentication (JavaScript & React)\nDESCRIPTION: This React page component defines the sign-in interface for the Next.js app, integrating Solana wallet authentication via the WalletAdaptor component. Dependencies include @web3uikit/core for typography, NextAuth for session management, and styling modules. The component conditionally displays a wallet select button or loading state based on session and authentication progress, handling redirection on successful sign-in. It requires proper CSS modules and expects session data from NextAuth.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useTransition } from \\\"react\\\";\nimport styles from \\\"../styles/Home.module.css\\\";\nimport { useRouter } from \\\"next/router\\\";\nimport { Typography } from \\\"@web3uikit/core\\\";\nimport { useSession } from \\\"next-auth/react\\\";\nimport WalletAdaptor from \\\"../app/components/loginBtn/walletAdaptor\\\";\n\nexport default function Home() {\n  const router = useRouter();\n  const { data: session, status } = useSession();\n  const [isPending, startTransition] = useTransition();\n\n  useEffect(() => {\n    startTransition(() => {\n      session && status === \\\"authenticated\\\" && router.push(\\\"./user\\\");\n    });\n  }, [session, status]);\n\n  useEffect(() => {\n    startTransition(() => {\n      session && console.log(session);\n    });\n  }, [session]);\n\n  return (\n    <div className={styles.body}>\n      {!isPending && (\n        <div className={styles.card}>\n          <>\n            {!session ? (\n              <>\n                <Typography variant=\\\"body18\\\">\n                  Select Wallet for Authentication\n                </Typography>\n                <br />\n                <WalletAdaptor />\n              </>\n            ) : (\n              <Typography variant=\\\"caption14\\\">Loading...</Typography>\n            )}\n          </>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Price with Moralis Token API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve real-time price data for a specified ERC20 token using the Moralis Token API in JavaScript. It requires moralis, @moralisweb3/common-evm-utils, an API key, the token address, and chain info. The price information is returned and logged, with placeholders to be filled with actual data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"ERC20_TOKEN_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getTokenPrice({\n    chain,\n    address,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating a Moralis Stream Programmatically to Monitor Contract Factory Events in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a Moralis Stream to listen for a specific event (`factoryEvent`) across all contract addresses on the Ethereum network. It defines the event ABI, configures stream options including the chain, description, tag, ABI, enabling all addresses and contract logs, specifying the event topic, and setting the webhook URL. The stream is initiated using `Moralis.Streams.add(options)`. This requires the Moralis SDK and a configured webhook endpoint. Note: The `allAddresses` feature requires a Moralis Business or Enterprise plan.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-listen-all-events-from-a-contract-factory.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Contract_Factory_ABI = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"contract\", \"type\": \"address\" },\n  ],\n  \"name\": \"factoryEvent\",\n  \"type\": \"event\",\n}]; // valid abi of the event\n\nconst options = {\n  chains: [EvmChain.ETHEREUM], // list of blockchains to monitor\n  description: \"monitor a contract factory\", // your description\n  tag: \"contract_Factory\", // give it a tag\n  abi: Contract_Factory_ABI,\n  includeContractLogs: true,\n  allAddresses: true,\n  topic0: [\"factoryEvent(address,address,address)\"], // topic of the event\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\", // webhook url to receive events,\n};\n\nconst stream = await Moralis.Streams.add(options);\n\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection NFTs with Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to retrieve all NFTs for a specific contract address on the Ethereum blockchain. It requires the `moralis` and `@moralisweb3/common-evm-utils` packages. The script initializes Moralis with an API key, specifies the contract `address` (e.g., CryptoPunks) and `chain` (Ethereum), calls `Moralis.EvmApi.nft.getContractNFTs`, and logs the JSON response containing the list of NFTs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getContractNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Get Wallet Transactions in JavaScript\nDESCRIPTION: Demonstrates how to fetch all transactions for a wallet address using Moralis API in JavaScript. Requires Moralis SDK and common-evm-utils. Takes an address and chain as parameters and returns transaction data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/05-Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App Structure in React\nDESCRIPTION: This snippet shows the main App.js file structure, including state management, component imports, and the overall layout of the portfolio dashboard. It uses React hooks and Web3UIKit components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport NativeTokens from \"./components/NativeTokens\";\nimport Tokens from \"./components/Tokens\";\nimport TransferHistory from \"./components/TransferHistory\";\nimport Nfts from \"./components/Nfts\";\nimport WalletInputs from \"./components/WalletInputs\";\nimport PortfolioValue from \"./components/PortfolioValue\";\nimport { Avatar, TabList, Tab } from \"@web3uikit/core\";\n\nfunction App() {\n  const [wallet, setWallet] = useState(\"\");\n  const [chain, setChain] = useState(\"0x1\");\n  const [nativeBalance, setNativeBalance] = useState(0);\n  const [nativeValue, setNativeValue] = useState(0);\n  const [tokens, setTokens] = useState([]);\n  const [nfts, setNfts] = useState([]);\n  const [filteredNfts, setFilteredNfts] = useState([]);\n  const [transfers, setTransfers] = useState([]);\n\n\n  return (\n    <div className=\"App\">\n      <WalletInputs\n        chain={chain}\n        setChain={setChain}\n        wallet={wallet}\n        setWallet={setWallet}\n      />\n      <div className=\"content\">\n        <div className=\"walletInfo\">\n          {wallet.length === 42 && (\n            <>\n              <div>\n                <Avatar isRounded size={130} theme=\"image\" />\n                <h2>{`${wallet.slice(0, 6)}...${wallet.slice(36)}`}</h2>\n              </div>\n              <PortfolioValue\n                nativeValue={nativeValue}\n                tokens={tokens}\n              />\n            </>\n          )}\n        </div>\n\n        <TabList>\n          <Tab tabKey={1} tabName={\"Tokens\"}>\n            <NativeTokens\n              wallet={wallet}\n              chain={chain}\n              nativeBalance={nativeBalance}\n              setNativeBalance={setNativeBalance}\n              nativeValue={nativeValue}\n              setNativeValue={setNativeValue}\n            />\n            <Tokens\n              wallet={wallet}\n              chain={chain}\n              tokens={tokens}\n              setTokens={setTokens}\n            />\n          </Tab>\n          <Tab tabKey={2} tabName={\"Transfers\"}>\n            <TransferHistory\n              chain={chain}\n              wallet={wallet}\n              transfers={transfers}\n              setTransfers={setTransfers}\n            />\n          </Tab>\n          <Tab tabKey={3} tabName={\"NFT's\"}>\n            <Nfts\n              wallet={wallet}\n              chain={chain}\n              nfts={nfts}\n              setNfts={setNfts}\n              filteredNfts={filteredNfts}\n              setFilteredNfts={setFilteredNfts}  \n            />\n          </Tab>\n        </TabList>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Monitoring Wallet Transactions with Moralis Streams (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to set up a Moralis Stream to monitor native transactions for a specific wallet address (`0x68b...`) on the Ethereum and Polygon chains. It initializes the Moralis SDK, defines the stream configuration including chains, description, tag, webhook URL, and enables native transaction inclusion. It then adds the stream and associates the target wallet address with it.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const stream = {\n    chains: [EvmChain.ETHEREUM, EvmChain.POLYGON],\n    description: \"monitor Bobs wallet\",\n    tag: \"bob\",\n    webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n    includeNativeTxs: true,\n  };\n\n  const newStream = await Moralis.Streams.add(stream);\n  const { id } = newStream.toJSON();\n\n  // Now we attach bobs address to the stream\n  const address = \"0x68b3f12d6e8d85a8d3dbbc15bba9dc5103b888a4\";\n\n  await Moralis.Streams.addAddress({ address, id });\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Native Balance with Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to retrieve the native SOL balance for a Solana wallet using the Moralis SDK with type safety. It imports necessary modules, initializes Moralis using an API key, defines the wallet address and network (MAINNET), and invokes `Moralis.SolApi.account.getBalance`. The resulting balance information is then logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/balance-api/how-to-get-native-solana-balance-by-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getBalance({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Price with Moralis Token API in TypeScript\nDESCRIPTION: This TypeScript snippet fetches the current price of a given ERC20 token from the Moralis Token API. It requires initializing Moralis with an API key, specifying the token address and EVM chain, and then prints the price data to the console. Replace placeholder variables and secure your API key according to best practices.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"ERC20_TOKEN_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getTokenPrice({\n    chain,\n    address,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Stream with Moralis Streams SDK - JavaScript\nDESCRIPTION: This snippet demonstrates how to delete a specific stream using the Moralis JavaScript SDK. The stream ID is required as input. The function sends a delete request and prints the response. Ensure Moralis is initialized with your API key before making the call.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst runApp = async () => {\n    await Moralis.start({\n        apiKey: \"YOUR_API_KEY\",\n    });\n\n    const response = await Moralis.Streams.delete({\n        id: \"4f7dbfb3-42c9-4d8d-bbba-975ea2d2b1a1\", // stream ID from the previous snippet\n    });\n\n    console.log(response.toJSON());\n};\n\nrunApp();\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for getContractNFTs Endpoint\nDESCRIPTION: This JSON object shows an example response structure returned by the Moralis `getContractNFTs` endpoint when fetching NFTs from a collection. It includes pagination details (`total`, `page`, `page_size`, `cursor`), an array of NFT objects (`result`) containing details like `token_address`, `token_id`, `metadata`, and the synchronization status (`status`).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"total\": 9991,\n  \"page\": 0,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3aGVyZSI6eyJ0b2tlbl9hZGRyZXNzIjoiMHhiNDdlM2NkODM3ZGRmOGU0YzU3ZjA1ZDcwYWI4NjVkZTZlMTkzYmJiIn0sInRva2VuX2FkZHJlc3MiOiIweGI0N2UzY2Q4MzdkZGY4ZTRjNTdmMDVkNzBhYjg2NWRlNmUxOTNiYmIiLCJsaW1pdCI6MTAwLCJvZmZzZXQiOjAsIm9yZGVyIjpbXSwicGFnZSI6MSwia2V5IjoiZmQ5MmE0ODg3MmE4NjIwZTFlNmU0NTk3ODZkMTExYWYiLCJ0b3RhbCI6OTk5MSwiaWF0IjoxNjY3ODA4NzcxfQ.9qXwHyyUKJkzrub-ze-q2gm8dC0dy-jvgF0CJrm5piY\",\n  \"result\": [\n    {\n      \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n      \"token_id\": \"9082\",\n      \"amount\": \"1\",\n      \"token_hash\": \"fffdaced3ddfb220d9124289a518bb97\",\n      \"block_number_minted\": \"12021693\",\n      \"updated_at\": null,\n      \"contract_type\": null,\n      \"name\": \"CRYPTOPUNKS\",\n      \"symbol\": \"Ͼ\",\n      \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/9082\",\n      \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk9082.webp\\\",\\\"name\\\":\\\"CryptoPunk 9082\\\",\\\"attributes\\\":[\\\"Bandana\\\",\\\"Big Shades\\\",\\\"Shadow Beard\\\"],\\\"description\\\":\\\"Male\\\"}\",\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-10-05T17:55:52.262Z\",\n      \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n    },\n    {\n      \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n      \"token_id\": \"4799\",\n      \"amount\": \"1\",\n      \"token_hash\": \"fff8ff007820e85a75c545389d5a88d4\",\n      \"block_number_minted\": \"11637283\",\n      \"updated_at\": null,\n      \"contract_type\": null,\n      \"name\": \"CRYPTOPUNKS\",\n      \"symbol\": \"Ͼ\",\n      \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/4799\",\n      \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk4799.webp\\\",\\\"name\\\":\\\"CryptoPunk 4799\\\",\\\"attributes\\\":[\\\"Blue Eye Shadow\\\",\\\"Black Lipstick\\\",\\\"Straight Hair Blonde\\\",\\\"Earring\\\"],\\\"description\\\":\\\"Female\\\"}\",\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-07-17T17:25:24.644Z\",\n      \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n    },\n    {\n      \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n      \"token_id\": \"47\",\n      \"amount\": \"1\",\n      \"token_hash\": \"fff3657368693f145d0ad29453f6cd4d\",\n      \"block_number_minted\": \"3918216\",\n      \"updated_at\": null,\n      \"contract_type\": null,\n      \"name\": \"CRYPTOPUNKS\",\n      \"symbol\": \"Ͼ\",\n      \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/47\",\n      \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk047.webp\\\",\\\"name\\\":\\\"CryptoPunk 047\\\",\\\"attributes\\\":[\\\"Knitted Cap\\\"],\\\"description\\\":\\\"Male\\\"}\",\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-07-24T12:12:11.930Z\",\n      \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Transactions using TypeScript\nDESCRIPTION: Example showing how to use Moralis API to get all transactions for a specific wallet address on Ethereum chain using TypeScript. Requires Moralis API key and @moralisweb3/common-evm-utils package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Displaying User Session and Handling Sign-Out in React Component (user.jsx)\nDESCRIPTION: This React functional component (`User`) displays authenticated user session information and provides a sign-out mechanism. It uses the `useEffect` hook to attempt fetching session data from the backend's `/authenticate` endpoint via `axios` upon component mount, ensuring `withCredentials: true` is set to send any authentication cookies. If the request is successful, it stores and displays the session data (excluding the `iat` field); otherwise (e.g., unauthorized), it redirects the user to the `/signin` page using `useNavigate`. The `signOut` function makes a request to the backend's `/logout` endpoint (again with credentials) and redirects the user to `/signin`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { useEffect, useState } from \"react\";\n\nimport { useNavigate } from \"react-router-dom\";\n\nimport axios from \"axios\";\n\nexport default function User() {\n  const navigate = useNavigate();\n\n  const [session, setSession] = useState({});\n\n  useEffect(() => {\n    axios(`${process.env.REACT_APP_SERVER_URL}/authenticate`, {\n      withCredentials: true,\n    })\n      .then(({ data }) => {\n        const { iat, ...authData } = data; // remove unimportant iat value\n\n        setSession(authData);\n      })\n      .catch((err) => {\n        navigate(\"/signin\");\n      });\n  }, []);\n\n  async function signOut() {\n    await axios(`${process.env.REACT_APP_SERVER_URL}/logout`, {\n      withCredentials: true,\n    });\n\n    navigate(\"/signin\");\n  }\n\n  return (\n    <div>\n      <h3>User session:</h3>\n      <pre>{JSON.stringify(session, null, 2)}</pre>\n      <button type=\"button\" onClick={signOut}>\n        Sign out\n      </button>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reading EvmChain Properties and Formatting Output - Moralis SDK - JavaScript\nDESCRIPTION: Retrieves properties from an EvmChain instance, including decimal and hexadecimal chainId formats as well as formatted output tailored by the formatting function. Also demonstrates fetching the chain's human-readable name and currency properties (name, symbol, decimals), useful for display and validation. Assumes chain is a valid EvmChain object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"decimal: \", chain.decimal);\n// decimal: 1\nconsole.log(\"hex: \", chain.hex);\n// hex: \"0x1\"\nconsole.log(\"hex: \", chain.format());\n// output depends on specified by default formatting type\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"name: \", chain.name);\n// name:\"Ethereum Mainnet\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"currency: \", chain.currency);\n// currency: {name : \"Ether\", symbol: \"ETH\", decimals: 18 }\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Domain with Moralis SDK - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to resolve an ENS domain to an Ethereum address by using the Moralis SDK. It first requires the 'moralis' package and the '@moralisweb3/common-evm-utils' package. After starting Moralis with an API key, it calls resolveENSDomain with the given 'domain' parameter and prints the resulting address in JSON format. You will need to install 'moralis' and '@moralisweb3/common-evm-utils' via npm or yarn. The only required parameter is a valid ENS domain string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-domain.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const domain = \"vitalik.eth\";\n\n  const response = await Moralis.EvmApi.resolve.resolveENSDomain({\n    domain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Implementing Interchain Token Transfer using wagmi in React\nDESCRIPTION: Implements the core logic for initiating an interchain token transfer using wagmi hooks within a React component. It configures the `useContractWrite` hook to call the `interchainTransfer` function on the specified `interchainTokenContractAddress` with the provided ABI. Arguments include `destinationChain`, `receiverAddress`, the transfer `amountToTransfer` (converted to Wei using `ethers.utils.parseEther`), and an empty metadata parameter ('0x'). The transaction's `value` override is set to the estimated `gasAmount`. The `useWaitForTransaction` hook monitors the transaction's status using its hash. The `handleTokenTransfer` function performs input validation, calls the `write` function obtained from `useContractWrite` to submit the transaction, and uses Chakra UI's `toast` to provide feedback during submission and on errors.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst TransferToken = () = >{\n  //...\n  //  Token  Transfer\n  const {\n    data: tokenTransfer,\n    write\n  } = useContractWrite({\n    address: interchainTokenContractAddress,\n    abi: interchainTokenContractABI,\n    functionName: 'interchainTransfer',\n    args: [destinationChain, receiverAddress, ethers.utils.parseEther(amountToTransfer.toString()), '0x'],\n    overrides: {\n      value: ethers.BigNumber.from(gasAmount.toString()),\n    },\n    mode: 'recklesslyUnprepared',\n  });\n  const {\n    data: useWaitForTokenTransferTransactionData,\n    isSuccess,\n    isError,\n    isLoading,\n  } = useWaitForTransaction({\n    //  Call  a  hook  to  wait  for  the  transaction  to  be  mined\n    hash: tokenTransfer ? .hash,\n  });\n  //  token  transfer\n  const handleTokenTransfer = async() = >{\n    if (!sourceChain || !destinationChain || !receiverAddress || !amountToTransfer) {\n      toast({\n        title: 'Invalid  Input',\n        description: 'Please  fill  all  the  fields  correctly.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n    if (write) {\n      write();\n      toast({\n        title: 'Transaction  Submitted',\n        description: 'Please  confirm  the  transaction  in  Metamask.',\n        status: 'info',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isError) {\n      toast({\n        title: 'Transaction  Error',\n        description: 'There  was  an  error  submitting  your  transaction.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n  return (\n  //...\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK in Cloud Functions (TypeScript)\nDESCRIPTION: Initializes the Moralis SDK within a Node.js environment (like Firebase Cloud Functions) using TypeScript. It imports the Moralis library and calls `Moralis.start()` with the user's API key, enabling subsequent calls to the Moralis Web3 API. The API key should be replaced with a valid key from the Moralis dashboard.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nMoralis.start({\n  apiKey: \"your_api_key_here\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical ERC20 Token Holders via Moralis API\nDESCRIPTION: Fetches historical timeseries data about the holders (e.g., holder count over time) of a specific ERC20 token using the Moralis Deep Index API v2.2. Requires the `:token_address` path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/erc20/:token_address/holders/historical\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers in TypeScript\nDESCRIPTION: TypeScript implementation to get ERC20 token transfers for a specific wallet address using Moralis API. Requires Moralis SDK and common-evm-utils package. Uses type-safe approach for better development experience.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Tracking Trending Tokens with Volume and Buyer Metrics in JSON\nDESCRIPTION: Example demonstrating how to track trending tokens by filtering for high volume and increasing buyers, with results sorted by volume in descending order.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/03-Token API/filtered-token-api-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filters\": [\n    { \"metric\": \"volumeUsd\", \"timeFrame\": \"oneDay\", \"gt\": 500000 },\n    { \"metric\": \"buyers\", \"timeFrame\": \"oneDay\", \"gt\": 100 }\n  ],\n  \"sortBy\": {\n    \"metric\": \"volumeUsd\",\n    \"timeFrame\": \"oneDay\",\n    \"type\": \"DESC\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Metadata in JavaScript\nDESCRIPTION: Demonstrates how to fetch NFT metadata using Moralis NFT API with JavaScript. The code initializes Moralis with an API key, specifies the NFT contract address, chain, and token ID, then calls the getNFTMetadata endpoint to retrieve the NFT's metadata.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/02-NFT Metadata/how-to-get-the-metadata-of-an-nft.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const tokenId = \"3931\";\n\n  const response = await Moralis.EvmApi.nft.getNFTMetadata({\n    address,\n    chain,\n    tokenId,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet ERC20 Token Balances with Moralis Python Library\nDESCRIPTION: This Python snippet demonstrates querying the balance of specific ERC20 tokens within a user's wallet address using the Moralis EVM API Python library. It requires the Moralis API key, the user's wallet address, a list of token addresses, and the chain identifier. The result containing the token balances is printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"USER_WALLET_ADDRESS\",\n    \"token_addresses\": [\"ERC20_TOKEN_ADDRESS\"],\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.token.get_wallet_token_balances(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Complete Express.js Server for Moralis Authentication - JavaScript\nDESCRIPTION: This final server implementation for index.js combines all endpoints for a Moralis-based authentication backend in Node.js using Express. It imports and configures all required dependencies, loads environment variables, sets up CORS for the React client, defines REST endpoints for authentication flows, and starts the server only after initializing a Moralis connection. Requires valid .env configuration and Moralis API key. Limits: listen port is hardcoded to 4000 unless otherwise changed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nconst cookieParser = require(\"cookie-parser\");\nconst jwt = require(\"jsonwebtoken\");\n\n// to use our .env variables\nrequire(\"dotenv\").config();\n\nconst app = express();\nconst port = 4000;\n\napp.use(express.json());\napp.use(cookieParser());\n\n// allow access to React app domain\napp.use(\n  cors({\n    origin: \"http://localhost:3000\",\n    credentials: true,\n  })\n);\n\nconst config = {\n  domain: process.env.APP_DOMAIN,\n  statement: \"Please sign this message to confirm your identity.\",\n  uri: process.env.REACT_URL,\n  timeout: 60,\n};\n\n// request message to be signed by client\napp.post(\"/request-message\", async (req, res) => {\n  const { address, chain, network } = req.body;\n\n  try {\n    const message = await Moralis.Auth.requestMessage({\n      address,\n      chain,\n      ...config,\n    });\n\n    res.status(200).json(message);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n\napp.post(\"/verify\", async (req, res) => {\n  try {\n    const { message, signature } = req.body;\n\n    const { address, profileId } = (\n      await Moralis.Auth.verify({\n        message,\n        signature,\n        networkType: \"evm\",\n      })\n    ).raw;\n\n    const user = { address, profileId, signature };\n\n    // create JWT token\n    const token = jwt.sign(user, process.env.AUTH_SECRET);\n\n    // set JWT cookie\n    res.cookie(\"jwt\", token, {\n      httpOnly: true,\n    });\n\n    res.status(200).json(user);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n\napp.get(\"/authenticate\", async (req, res) => {\n  const token = req.cookies.jwt;\n  if (!token) return res.sendStatus(403); // if the user did not send a jwt token, they are unauthorized\n\n  try {\n    const data = jwt.verify(token, process.env.AUTH_SECRET);\n    res.json(data);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n\napp.get(\"/logout\", async (req, res) => {\n  try {\n    res.clearCookie(\"jwt\");\n    return res.sendStatus(200);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\nstartServer();\n```\n\n----------------------------------------\n\nTITLE: Get Pancakeswap V1 Pair Address in JavaScript\nDESCRIPTION: JavaScript implementation to fetch a Pancakeswap V1 pair address using Moralis DeFi API. Requires Moralis and common-evm-utils packages. Takes token addresses as input and returns pair address details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.BSC;\n\n  // token 0 address, e.g. WBNB token address\n  const token0Address = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"pancakeswapv1\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic NextJS Homepage Component\nDESCRIPTION: Defines a simple React functional component named `HomePage` inside a `pages/index.jsx` file. This component renders a basic welcome message and serves as the default page for the NextJS application according to NextJS file-system based routing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomePage() {\n  return <div>Welcome to my Next.js dApp!</div>;\n}\n\nexport default HomePage;\n```\n\n----------------------------------------\n\nTITLE: Advanced Options Configuration for NFT Transfer Monitoring\nDESCRIPTION: JSON configuration for advanced filtering options in the WebUI setup. Specifies the transfer event topic and filters for a specific sender address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-listen-to-all-nft-transfers-sent-from-a-specific-address.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\n     \"topic0\": \"Transfer(address,address,uint256)\",\n     \"filter\": { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] }\n}]\n```\n\n----------------------------------------\n\nTITLE: Stream Filter Configuration for Large Transfer Events in JSON\nDESCRIPTION: JSON configuration for filtering Transfer events with values greater than 50 billion (50000000000). Used in Moralis Stream API to only capture large value transfers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"topic0\": \"Transfer(address,address,uint256)\",\n    \"filter\": { \"gt\": [\"value\", 50000000000] }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC-20 Token Balance History using Moralis Wallet API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to query an Ethereum address's ERC-20 token balances at a specific block using the Moralis Wallet API. Dependencies include the 'moralis' package and '@moralisweb3/common-evm-utils'; they must be installed before running. The script initializes Moralis with your API key, specifies the wallet address, chain, and block number, retrieves token balances as of the specified block, and handles both successful responses and errors. Inputs required: API key, wallet address, chain, and block. Outputs formatted JSON data of balances; ensure to replace 'YOUR_API_KEY' before use.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-erc-20-token-balance-history.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Import Moralis and EvmChain for Ethereum blockchain interaction\\nconst Moralis = require(\\\"moralis\\\").default;\\nconst { EvmChain } = require(\\\"@moralisweb3/common-evm-utils\\\");\\n\\n// The main function to run the script\\nconst runApp = async () => {\\n  // Initialize Moralis with your API key\\n  await Moralis.start({\\n    apiKey: \\\"YOUR_API_KEY\\\",\\n  });\\n\\n  // Define the wallet address and blockchain details\\n  const address = \\\"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\\\";\\n  const chain = EvmChain.ETHEREUM; // Ethereum mainnet\\n  const toBlock = \\\"16310000\\\"; // Block number for historical data\\n\\n  try {\\n    // Get token balances at the specified block\\n    const response = await Moralis.EvmApi.token.getWalletTokenBalances({\\n      address,\\n      chain,\\n      toBlock\\n    });\\n\\n    // Output the history of token balances at the specified block\\n    console.log(\\\"Token Balances at Block:\\\", toBlock);\\n    console.log(JSON.stringify(response, null, 2)); // formatted JSON output\\n  } catch (error) {\\n    // Error handling\\n    console.error(\\\"Error fetching token balances:\\\", error);\\n  }\\n};\\n\\n// Execute the function\\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Full Web3 Authentication Flow with Signature Challenge - React (JavaScript)\nDESCRIPTION: Implements a complete MetaMask authentication sequence using wagmi hooks and Moralis authentication. The sign-in handler connects the wallet, requests a signature challenge from Moralis, signs the message via MetaMask, and logs the signature. Dependencies: wagmi, @moralisweb3/next. Parameters include user account, chain ID, and challenge message. Inputs come from user interaction and state hooks; output is the signature string. Constraints: Requires wallet, proper environmental configuration, and browser context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\\n\\nfunction SignIn() {\\n  const { connectAsync } = useConnect();\\n  const { disconnectAsync } = useDisconnect();\\n  const { isConnected } = useAccount();\\n  const { signMessageAsync } = useSignMessage();\\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\\n\\n  const handleAuth = async () => {\\n    if (isConnected) {\\n      await disconnectAsync();\\n    }\\n\\n    const { account, chain } = await connectAsync({\\n      connector: new MetaMaskConnector(),\\n    });\\n\\n    const { message } = await requestChallengeAsync({\\n      address: account,\\n      chainId: chain.id,\\n    });\\n\\n    const signature = await signMessageAsync({ message });\\n\\n    console.log(signature);\\n  };\\n\\n  return (\\n    <div>\\n      <h3>Web3 Authentication</h3>\\n      <button onClick={handleAuth}>Authenticate via Metamask</button>\\n    </div>\\n  );\\n}\\n\\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for /request-message Using Moralis - JavaScript\nDESCRIPTION: This Express.js REST endpoint receives an address, chain, and network in the request body and calls Moralis.Auth.requestMessage to create a unique signable challenge for wallet authentication. dotenv is used for config management, with dependencies on express and Moralis SDK. On success, it responds with the message; otherwise, it sends a 400 error. Inputs are address/chain/network, output is a signable message object or error. Must be mounted after express.json() middleware is applied.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// to use our .env variables\nrequire(\"dotenv\").config();\n\napp.use(express.json());\n\n// for our server's method of setting a user session\nconst cookieParser = require(\"cookie-parser\");\nconst jwt = require(\"jsonwebtoken\");\n\nconst config = {\n  domain: process.env.APP_DOMAIN,\n  statement: \"Please sign this message to confirm your identity.\",\n  uri: process.env.REACT_URL,\n  timeout: 60,\n};\n\napp.post(\"/request-message\", async (req, res) => {\n  const { address, chain, network } = req.body;\n\n  try {\n    const message = await Moralis.Auth.requestMessage({\n      address,\n      chain,\n      ...config,\n    });\n\n    res.status(200).json(message);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Addresses to a Stream with Moralis Streams SDK - JavaScript\nDESCRIPTION: This JavaScript snippet adds a list of wallet addresses to an existing stream using the Moralis SDK. The user supplies stream ID and address list; Moralis must be initialized with an API key. The response is printed after the add operation. Input flexibility allows one or multiple addresses per call.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst runApp = async () => {\n    await Moralis.start({\n        apiKey: \"YOUR_API_KEY\",\n    });\n\n    const list = [\n        \"0xf3d8d9f1f1ccbc8f7e313b7e7cdaa1d6e5b2c2f2\",\n        \"0x7a250d5630b4cf539739df2c5dacb4c659f2488d\",\n        \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n        \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n    ];\n    const response = await Moralis.Streams.addAddress({\n        id: \"4f7dbfb3-42c9-4d8d-bbba-975ea2d2b1a1\", // stream ID from the previous snippet,\n        address: list,\n    });\n\n    console.log(response.toJSON());\n};\n\nrunApp();\n\n```\n\n----------------------------------------\n\nTITLE: Comparing EvmChain Instances and Values for Equality - Moralis SDK - JavaScript\nDESCRIPTION: Shows how to validate the equality of EvmChain instances against decimal or hex values, as well as against other created EvmChain instances. The equals method allows type-agnostic comparison for chain IDs, improving reliability when working with chains in different formats. Requires chain to be an EvmChain instance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"check 1: \", chain.equals(1));\n// check 1: true\nconsole.log(\"check 2: \", chain.equals(\"0x1\"));\n// check 2: true\nconsole.log(\"check 3: \", chain.equals(EvmChain.create(1)));\n// check 3: true\nconsole.log(\"check 4: \", chain.equals(EvmChain.create(\"0x1\")));\n// check 4: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Number by Date with Moralis Block API in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to use the Moralis SDK to retrieve the nearest block number for a given date on the Ethereum blockchain using the getDateToBlock endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const date = \"2023-07-05\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getDateToBlock({\n    date,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Building Token Transfer UI with React/Chakra UI in JavaScript\nDESCRIPTION: This React functional component snippet defines the user interface for the token transfer functionality. It uses Chakra UI components (`Box`, `VStack`, `FormControl`, `FormLabel`, `Select`, `Input`, `FormHelperText`, `Button`, `Stack`) to create form inputs for source/destination chains, token address, receiver address, and amount. Buttons are included to trigger token approval (`handleApprove`) and the actual transfer (`handleTokenTransfer`), with loading states managed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst TransferToken = () => {\n  //...\n\n  return (\n    <Box\n      padding=\"7\"\n      maxW=\"xxl\"\n      borderWidth=\"1px\"\n      borderRadius=\"lg\"\n      overflow=\"hidden\"\n      margin=\"auto\"\n      marginTop=\"-20\"\n    >\n      {/* ... */}\n      <VStack spacing={5} align=\"stretch\">\n        {formVisibility && (\n          <>\n            <FormControl>\n              <FormLabel>Source Chain Name</FormLabel>\n              <Stack spacing={3}>\n                <Select\n                  placeholder=\"Select source chain\"\n                  value={sourceChain}\n                  onChange={(e) => setSourceChain(e.target.value)}\n                  size=\"md\"\n                >\n                  {/* ... */}\n                </Select>\n              </Stack>\n              <FormHelperText>\n                Source chain for your token e.g., Fantom, Binance, Polygon, etc.\n              </FormHelperText>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Token Contract Address</FormLabel>\n              <Input\n                placeholder=\"Enter Token Contract Address\"\n                value={interchainTokenContractAddress}\n                onChange={(e) =>\n                  setInterchainTokenContractAddress(e.target.value)\n                }\n              />\n              <FormHelperText>\n                Contract address of the token you want to transfer.\n              </FormHelperText>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Destination Chain</FormLabel>\n              <Stack spacing={3}>\n                <Select\n                  placeholder=\"Select Destination chain\"\n                  value={destinationChain}\n                  onChange={(e) => setDestinationChain(e.target.value)}\n                  size=\"md\"\n                >\n                  {/* ... */}\n                </Select>\n              </Stack>\n              <FormHelperText>\n                Destination chain for your token e.g., Fantom, Binance, Polygon,\n                etc.\n              </FormHelperText>\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Receiver Address</FormLabel>\n              <Input\n                placeholder=\"Enter Receiver Address\"\n                value={receiverAddress}\n                onChange={(e) => setReceiverAddress(e.target.value)}\n              />\n              <FormHelperText>Receiver address for your token.</FormHelperText>\n            </FormControl>\n          </>\n        )}\n\n        <FormControl>\n          <FormLabel>Amount to Transfer</FormLabel>\n          <Input\n            placeholder=\"Enter Amount to Transfer\"\n            value={amountToTransfer}\n            onChange={(e) => setAmountToTransfer(Number(e.target.value))}\n          />\n          <FormHelperText>\n            Amount to transfer to the receiver address.\n          </FormHelperText>\n        </FormControl>\n\n        {approveButonVisibility && (\n          <Button\n            colorScheme=\"blue\"\n            onClick={handleApprove}\n            isLoading={isSpendLoading}\n            loadingText=\"Approving Token...\"\n            w=\"sm\"\n            variant=\"solid\"\n            disabled={isSpendLoading}\n          >\n            Approve\n          </Button>\n        )}\n\n        <Button\n          colorScheme=\"cyan\"\n          onClick={handleTokenTransfer}\n          isLoading={isLoading}\n          loadingText=\"Transferring Token...\"\n          w=\"sm\"\n          variant=\"solid\"\n          disabled={isLoading}\n        >\n          Transfer Token\n        </Button>\n      </VStack>\n    </Box>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Token Approval for ITS Contract in JavaScript/React\nDESCRIPTION: This code defines the logic for approving the Interchain Token Service (ITS) contract to spend tokens on behalf of the user. It utilizes `useContractWrite` to call the `approve` function on the specified ERC20 token contract and `useWaitForTransaction` to monitor the transaction status. The `handleApprove` function initiates the approval, checks if an amount is entered, calls the `approveWrite` function, and uses a `toast` notification for user feedback. Requires `ethers.utils` for unit conversion and assumes the presence of `interchainTokenServiceContractAddress` and `amountToTransfer` state variables.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// transfer-token.js\n//...\nconst TransferToken = () = >{\n  //...\n  // Approve token to be spent by the contract\n  const {\n    data: useContractWriteSpendData,\n    write: approveWrite\n  } = useContractWrite({\n    address: '0x6f1205e4A044b03251292ac7278E150F26e00592',\n    // Address of the token contract on Fantom\n    abi: erc20ABI,\n    functionName: 'approve',\n    args: [interchainTokenServiceContractAddress, ethers.utils.parseUnits(amountToTransfer.toString(), 18)],\n    mode: 'recklesslyUnprepared',\n  });\n  const {\n    data: useWaitForTransactionSpendData,\n    isSuccess: isSpendSuccess,\n    isLoading: isSpendLoading,\n  } = useWaitForTransaction({\n    hash: useContractWriteSpendData ? .hash,\n  });\n  // Handle Approval\n  const handleApprove = () = >{\n    if (!amountToTransfer) {\n      toast({\n        title: 'Please enter amount',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n    approveWrite();\n    toast({\n      title: 'Approving Token...',\n      description: 'Please confirm the transaction in Metamask.',\n      status: 'info',\n      duration: 5000,\n      isClosable: true,\n    });\n  };\n  return (\n  //..\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Lowest Price using Moralis SDK (JavaScript)\nDESCRIPTION: This snippet in JavaScript demonstrates retrieving the lowest price for an NFT collection from the user's balance using the Moralis SDK. Dependencies are 'moralis', '@moralisweb3/common-evm-utils', and valid API key. 'address' should be set to the NFT contract address (from getWalletNFTs) and 'chain' specifies the blockchain. Output is logged as raw data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"NFT_CONTRACT_ADDRESS\"; // provided from `getWalletNFTs`\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getNFTLowestPrice({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Token Metadata with Moralis Token API (Python)\nDESCRIPTION: This Python snippet demonstrates how to use the Moralis Python SDK to fetch metadata for multiple ERC20 tokens given their addresses. The script requires the 'moralis' Python package and a valid API key. The 'evm_api.token.get_token_metadata' function is called with the specified addresses and chain ('eth'), printing the structured metadata result. Ensure the SDK is installed and configured with your API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-token-metadata-by-token-addresses.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"addresses\": [\n        \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n        \"0x514910771AF9Ca656af840dff83E8264EcF986CA\"\n    ],\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.token.get_token_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for SPL Token Balance Query\nDESCRIPTION: This JSON object shows an example response from the Moralis Solana API's `getSPL` endpoint. It returns an array of objects, each representing an SPL token held by the queried address, including the associated token address, mint address, raw amount, formatted amount, and decimals.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/token-api/how-to-get-spl-token-balance-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\n  {\n    \"associatedTokenAddress\": \"Dpmpwm93Amvj4uEFpYhjv8ZzfpgARq6zxKTi6mrj97gW\",\n    \"mint\": \"BXWuzb3jEuGsGUe29xdApu8Z3jVgrFbr3wWdsZmLWYk9\",\n    \"amountRaw\": \"100000000000\",\n    \"amount\": \"100\",\n    \"decimals\": \"9\"\n  }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Balances and Prices - JavaScript\nDESCRIPTION: Defines the '/tokenBalances' GET endpoint that returns a filtered list of ERC20 tokens held by the given address, including their USD prices (> $0.01). Relies on Moralis.EvmApi for balance and price. Query parameters: 'address', 'chain'. Dependencies: Moralis SDK. Outputs an array of 'legit' tokens with price info. Gracefully logs and skips tokens on errors. Limitation: Not optimized for a large number of tokens (serial requests).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//GET AMOUNT AND VALUE OF ERC20 TOKENS\n\napp.get(\"/tokenBalances\", async (req, res) => {\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const { address, chain } = req.query;\n\n    const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n      address: address,\n      chain: chain,\n    });\n\n    let tokens = response.data;\n    let legitTokens = [];\n    for (let i = 0; i < tokens.length; i++) {\n      try {\n        const priceResponse = await Moralis.EvmApi.token.getTokenPrice({\n          address: tokens[i].token_address,\n          chain: chain,\n        });\n        if (priceResponse.data.usdPrice > 0.01) {\n          tokens[i].usd = priceResponse.data.usdPrice;\n          legitTokens.push(tokens[i]);\n        } else {\n          console.log(\"\\ud83d\\udca9 coin\");\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n\n    res.send(legitTokens);\n  } catch (e) {\n    res.send(e);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Controller for Express\nDESCRIPTION: Express controller that handles HTTP requests for authentication operations, including requesting messages and verifying signatures using the authentication service.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requestMessage, verifyMessage } from './authService';\nimport { NextFunction, Request, Response } from 'express';\n\nexport async function request(req: Request, res: Response, next: NextFunction) {\n  try {\n    const { address, chain, network } = req.body;\n\n    const message = await requestMessage({\n      address,\n      chain,\n      network,\n    });\n\n    res.status(200).json({ message });\n  } catch (err) {\n    next(err);\n  }\n}\n\nexport async function verify(req: Request, res: Response, next: NextFunction) {\n  try {\n    const { network, message, signature } = req.body;\n\n    const user = await verifyMessage({\n      network,\n      message,\n      signature,\n    });\n\n    res.status(200).json({ user });\n  } catch (err) {\n    next(err);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Top ERC20 Tokens by Price Change using Moralis SDK (Python)\nDESCRIPTION: This Python snippet illustrates how to get the top ERC20 tokens by price movers using the Moralis Python SDK. It imports the necessary `evm_api` module, sets the API key, and calls the `get_top_erc20_tokens_by_price_movers` function from the `market_data` submodule. The resulting dictionary containing gainers and losers is then printed. Requires the `moralis` Python package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-ERC20-tokens-by-price-change.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\n\nresult = evm_api.market_data.get_top_erc20_tokens_by_price_movers(\n  api_key=api_key,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Axelar and OpenZeppelin Dependencies in Solidity\nDESCRIPTION: Imports required interfaces and contracts into the `GMPDistribution.sol` file. This includes `AxelarExecutable` for handling messages, `IAxelarGateway` for interacting with the Axelar gateway, `IAxelarGasService` for handling gas payments, and `IERC20` from OpenZeppelin for ERC-20 token interactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\nimport { AxelarExecutable } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\";\nimport { IAxelarGateway } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\";\nimport { IAxelarGasService } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\npragma solidity ^0.8.19;\ncontract GMPDistribution {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Solana Tic-Tac-Toe Gameplay and Real-time Updates in TypeScript\nDESCRIPTION: This snippet from GameBoard.tsx handles the core gameplay logic, including making moves, listening for account changes, and updating the UI. It uses Solana's onAccountChange listener for real-time updates and includes functions for playing the game and celebrating wins.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `src/components/templates/TicTacToe/GameBoard.tsx`\n\nconst GameBoard: FC<BoardInput> = ({ data, connection }) => {\n  const { publicKey } = useWallet();\n  const toast = useToast();\n  const [currentgameData, setCurrentGameData] = useState<GameAccount>();\n  const [subscriptions, SetSubscriptions] = useState<number[]>([]);\n  const [spinner, setSpinner] = useState<number | null>();\n\n  const accountPublicKey = data.accountId;\n\n  useEffect(() => {\n    setCurrentGameData(data.gameInput);\n  }, [data]);\n\n  // Listen to account changes\n  useEffect(() => {\n    const SubId = connection.onAccountChange(accountPublicKey, (e) => {\n      console.log(e);\n      const gameInput = deserializeUnchecked(GameAccountSchema, GameAccount, e.data);\n      setCurrentGameData(gameInput);\n    });\n    SetSubscriptions((existing) => [...existing, SubId]);\n    console.log(SubId);\n  }, [accountPublicKey]);\n\n  useEffect(() => {\n    console.log(subscriptions);\n    if (subscriptions.length > 1) {\n      connection.removeAccountChangeListener(subscriptions[0]);\n      deleteArrayElement(subscriptions[0]);\n    }\n  }, [subscriptions]);\n\n  const celebrateWin = (winnerId: number) => {\n    switch (winnerId) {\n      case 1: {\n        if (currentgameData?.player1 === publicKey?.toBase58()) {\n          toast({\n            title: 'You won the game!! ',\n            status: 'success',\n            position: 'bottom-right',\n            isClosable: true,\n          });\n        } else {\n          toast({\n            title: 'Player 1 won the game!! ',\n            status: 'error',\n            position: 'bottom-right',\n            isClosable: true,\n          });\n        }\n        break;\n      }\n      case 2: {\n        if (currentgameData?.player2 === publicKey?.toBase58()) {\n          toast({\n            title: 'You won the game!! ',\n            status: 'success',\n            position: 'bottom-right',\n            isClosable: true,\n          });\n        } else {\n          toast({\n            title: 'Player 2 won the game!! ',\n            status: 'error',\n            position: 'bottom-right',\n            isClosable: true,\n          });\n        }\n        break;\n      }\n      case 3: {\n        toast({\n          title: 'Its a Draw!! ',\n          status: 'success',\n          position: 'bottom-right',\n          isClosable: true,\n        });\n\n        break;\n      }\n    }\n  };\n\n  async function playGame(move: number) {\n    if (currentgameData) {\n      const gamePlayer =\n        currentgameData.player1 === publicKey?.toBase58()\n          ? 1\n          : currentgameData.player2 === publicKey?.toBase58()\n          ? 2\n          : 0;\n      if (gamePlayer) {\n          const gameMove = { player1: currentgameData.player1, player2: currentgameData.player2, gamePlayer, move };\n          await apiPost('/TicTacToe/playGame', gameMove);\n    }\n  }\n\n  if (currentgameData) {\n    return (\n      <>\n        <Flex>\n          <Grid gridTemplateColumns={'repeat(3, 1fr)'} gridTemplateRows={'repeat(3, 1fr)'} justifyContent={'center'}>\n            {currentgameData.moves.map((e, i) => {\n              return (\n                <Flex\n                  onClick={() => { playGame(i);}\n                  fontSize={'25px'}\n                  color={'white'}\n                  cursor={'pointer'}\n                >\n                  {(e === 1 && '🔴') || (e === 2 && '❌') || (e === 0 && (spinner === i ? <Spinner /> : ''))}\n                </Flex>\n              );\n            })}\n          </Grid>\n        </Flex>\n      </>\n    );\n  }\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor Pagination for NFT Owners with NodeJS and Moralis API\nDESCRIPTION: This code snippet demonstrates how to use cursor pagination to retrieve NFT owners from the Ethereum blockchain using the Moralis API. It iterates through pages of results, accumulating owner data until all results are fetched.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/03-pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst init = async () => {\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\"; //Cryptopunks contract address\n  const chain = EvmChain.ETHEREUM;\n  await Moralis.start({\n    apiKey: \"MORALIS_API_KEY\",\n    // ...and any other configuration\n  });\n\n  let cursor = null;\n  let owners = {};\n  do {\n    const response = await Moralis.EvmApi.nft.getNFTOwners({\n      address,\n      chain,\n      limit: 100,\n      cursor: cursor,\n      disableTotal: false,\n    });\n    console.log(\n      `Got page ${response.pagination.page} of ${Math.ceil(\n        response.pagination.total / response.pagination.pageSize\n      )}, ${response.pagination.total} total`\n    );\n    for (const NFT of response.result) {\n      if (NFT.ownerOf.checksum in owners) {\n        owners[NFT.ownerOf.checksum].push({\n          amount: NFT.amount,\n          owner: NFT.ownerOf,\n          tokenId: NFT.tokenId,\n          tokenAddress: NFT.tokenAddress,\n        });\n      } else {\n        owners[NFT.ownerOf.checksum] = [\n          {\n            amount: NFT.amount,\n            owner: NFT.ownerOf,\n            tokenId: NFT.tokenId,\n            tokenAddress: NFT.tokenAddress,\n          },\n        ];\n      }\n    }\n    cursor = response.pagination.cursor;\n  } while (cursor != \"\" && cursor != null);\n\n  console.log(\"owners:\", owners, \"total owners:\", Object.keys(owners).length);\n};\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Fetching Smart Account NFT Transfers in TypeScript using Moralis SDK\nDESCRIPTION: This TypeScript snippet demonstrates how to fetch NFT transfer history for a smart contract account using the Moralis SDK. It initializes Moralis with an API key, defines the target address and chain (Ethereum), calls the `Moralis.EvmApi.nft.getWalletNFTTransfers` function, and prints the JSON response. Requires the `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-NFT-transfers-of-smart-account.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import necessary libraries and modules\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\n// Define an asynchronous function to run the application\nconst runApp = async () => {\n  // Initialize Moralis with your API key and configuration\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...other configuration options\n  });\n\n  // Define the Ethereum address you want to query NFT transfers for\n  const address = \"0x350845DD3f03F1355233a3A7CEBC24b5aAD05eC5\";\n\n  // Specify the Ethereum chain (in this case, ETHEREUM)\n  const chain = EvmChain.ETHEREUM;\n\n  // Retrieve NFT transfer data using Moralis' EvmApi\n  const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n    address,\n    chain,\n  });\n\n  // Output the JSON response to the console\n  console.log(response.toJSON());\n};\n\n// Execute the runApp function\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying Top ERC20 Tokens Using Moralis SDK - TypeScript\nDESCRIPTION: This code shows how to access the Moralis Web3 Market Data API from a TypeScript environment. By importing the Moralis and EvmChain modules, initializing the SDK with the API key, and calling the getTopERC20TokensByMarketCap method, developers can retrieve the top ERC20 tokens data. Dependencies include the 'moralis' and '@moralisweb3/common-evm-utils' npm packages. The API key must be supplied in the configuration. The code outputs the returned JSON data and is suitable for backend TypeScript applications.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-erc20-tokens-by-market-cap.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getTopERC20TokensByMarketCap();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Implementing Follow Function\nDESCRIPTION: Handles the follow functionality by connecting the wallet and executing the follow transaction.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nasync function follow() {\n  if (isConnected) {\n    await disconnectAsync();\n  }\n  await connectAsync({\n    connector: new MetaMaskConnector({}),\n  });\n\n  write();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Top NFT Collections by Market Cap with Moralis SDK - JavaScript\nDESCRIPTION: This snippet demonstrates how to query the top NFT collections by market cap using the Moralis JavaScript SDK. Dependencies include the \\'moralis\\' and \\'@moralisweb3/common-evm-utils\\' packages, with the main function asynchronously initializing Moralis and invoking the market data endpoint. It expects an API key and logs the raw response from the API; inputs are minimal and outputs are printed directly to the console. The configuration requires Node v14+ and a valid Moralis API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-market-cap.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getTopNFTCollectionsByMarketCap();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Building the Solana Program\nDESCRIPTION: Compiles the Rust code into a Solana binary program for deployment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo build-bpf\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Metadata Backend API Route (JavaScript)\nDESCRIPTION: This Node.js backend API route (from `pages/api/SolApi/nft/getNFTMetadata.js`) handles requests to fetch metadata for a specific Solana NFT mint address. It utilizes the Moralis SDK, initializing it with the API key, and calls `Moralis.SolApi.nft.getNFTMetadata` with the provided network and NFT address. It returns the fetched metadata or an error.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Refer full code in `pages/api/SolApi/nft/getNFTMetadata.js`\n\n// 8️⃣\n// This API route uses `getNFTMetadata` function from Moralis sdk to get the\n// NFT metadata and sends the response to frontend\nimport Moralis from \"moralis\";\n\nexport default async function handler(req, res) {\n  const { address, network } = req.body;\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const data = await Moralis.SolApi.nft.getNFTMetadata({\n      network,\n      address,\n    });\n    res.status(200).json(data);\n  } catch (error) {\n    res.status(400).json(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis\nDESCRIPTION: Basic Moralis initialization with API key setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from 'moralis';\n\nMoralis.start({\n  apiKey: 'your_api_key_here',\n});\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Trades - Moralis NFT API - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch all NFT trades for a specific collection and marketplace via the Moralis NFT API using Node.js. It depends on the 'moralis' and '@moralisweb3/common-evm-utils' packages. Key parameters include 'apiKey' for authentication, 'address' for the NFT contract address, 'chain' to specify the blockchain (e.g., EvmChain.ETHEREUM), and 'marketplace' for the trade platform (e.g., \"opensea\"). The script authenticates, queries trade data, and prints the JSON result. Ensure all dependencies are installed and a valid API key is provided.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/06-NFT Marketdata/how-to-get-nft-trades-by-marketplace.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const marketplace = \"opensea\";\n\n  const response = await Moralis.EvmApi.nft.getNFTTrades({\n    address,\n    chain,\n    marketplace,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with Moralis Streams SDK - Python\nDESCRIPTION: This Python snippet uses the Moralis SDK to create a new EVM stream, requiring the moralis Python package. The example shows constructing the body with required parameters (webhookUrl, description, tag, chainIds, and includeNativeTxs). It prints the stream ID after creation. API key is needed as a prerequisite.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\nstream_body = {\n    \"webhookUrl\": \"https://webhook.site/1e7ded60-9b44-4708-8a2e-d1c86b2e82d8\",\n    \"description\": \"my first stream\",\n    \"tag\": \"my_stream\",\n    \"chainIds\": [\"0x1\"],\n    \"includeNativeTxs\": True,\n}\n\nresults = streams.evm_streams.create_stream(api_key=api_key, body=stream_body)\nprint(results[\"id\"]) # print the stream id\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3Auth Connector in NextJS Sign-In Page\nDESCRIPTION: This JavaScript snippet shows how to configure the `Web3AuthConnector` within a NextJS component (`pages/signin.jsx`) for Web3 authentication. It utilizes hooks from `wagmi`, `next-auth/react`, and `@moralisweb3/next` to manage the full authentication flow: connecting via Web3Auth, fetching a challenge from Moralis, signing the message, and authenticating the user session with `next-auth`. Requires replacing `YOUR_CLIENT_ID` with a valid ID from the Web3Auth dashboard.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-web3authio.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Web3AuthConnector } from \"@web3auth/web3auth-wagmi-connector\";\nimport { signIn } from \"next-auth/react\";\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { useRouter } from \"next/router\";\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\n\nfunction SignIn() {\n  const { connectAsync } = useConnect({\n    connector: new Web3AuthConnector({\n      chains: [\"0x1\"],\n      options: {\n        clientId: \"YOUR_CLIENT_ID\", // Get your own client id from https://dashboard.web3auth.io\n      },\n    }),\n  });\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n  const { push } = useRouter();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm()\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n\n    const { account } = await connectAsync();\n\n    const { message } = await requestChallengeAsync({\n      address: account,\n      chainId: \"0x1\",\n    });\n\n    const signature = await signMessageAsync({ message });\n\n    // redirect user after success authentication to '/user' page\n    const { url } = await signIn(\"moralis-auth\", {\n      message,\n      signature,\n      redirect: false,\n      callbackUrl: \"/user\",\n    });\n    /**\n     * instead of using signIn(..., redirect: \"/user\")\n     * we get the url from callback and push it to the router to avoid page refreshing\n     */\n    push(url);\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={() => handleAuth()}>Authenticate via Web3Auth</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Setting up USDC Transfer Monitoring with Moralis Streams API\nDESCRIPTION: JavaScript implementation for creating a stream to monitor USDC transfers, specifically tracking burns and mints by filtering transfers where either the sender or receiver is the zero address and the amount is >= 10000 USDC. Uses Moralis Streams API and includes ABI definition and stream configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-monitor-for-er-c20-token-burns-or-mints.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst transferUsdcAbi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nconst filter = {\n  or: [\n    {\n      and: [\n        { eq: [\"sender\", \"0x00000...00000\"] },\n        { gte: [\"amount\", \"10000000000\"] },\n      ],\n    },\n    {\n      and: [\n        { eq: [\"receiver\", \"0x00000...00000\"] },\n        { gte: [\"amount\", \"10000000000\"] },\n      ],\n    },\n  ],\n};\n\nconst options = {\n  chains: [EvmChain.ETHEREUM],\n  description: \"Token burns and mints\",\n  tag: \"mintsAndBurns\",\n  abi: transferUsdcAbi,\n  includeContractLogs: true,\n  topic0: [\"Transfer(address,address,uint256)\"],\n  advancedOptions: [\n    {\n      topic0: \"Transfer(address,address,uint256)\",\n      filter,\n      includeNativeTxs: true,\n    },\n  ],\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n};\n\nconst stream = await Moralis.Streams.add(options);\n\nconst { id } = stream.toJSON();\n\nawait Moralis.Streams.addAddress({\n  id,\n  address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Metadata by Symbols using Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to fetch metadata for multiple ERC20 tokens (UNI, AAVE, LINK) on the Ethereum chain. It initializes the Moralis SDK with an API key, defines an array of token symbols and the target chain (Ethereum), calls `Moralis.EvmApi.token.getTokenMetadataBySymbol` with these parameters, and logs the JSON response containing the metadata for each token. Requires `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-symbols.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const symbols = [\"UNI\", \"AAVE\", \"LINK\"];\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenMetadataBySymbol({\n    symbols,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical ERC20 Prices using Moralis Web3 Token API in TypeScript\nDESCRIPTION: This TypeScript snippet provides an equivalent implementation of obtaining historical ERC20 token prices with the Moralis Web3 Token API. It uses TypeScript's import syntax and types, relying on moralis and @moralisweb3/common-evm-utils packages. After initializing with an API key, it loops over a set Ethereum block number range, querying price data for each block and storing the results in an array. Inputs include the target contract address, chain, and from/to block numbers. Outputs are displayed as JSON. Ensure you have TypeScript, Moralis, and the utility package installed, and update 'YOUR_API_KEY' as needed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-historical-erc20-token-price.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const historicalPrice = [];\n\n  const address = \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  for (let toBlock = 16323500; toBlock < 16323550; toBlock += 10) {\n    const response = await Moralis.EvmApi.token.getTokenPrice({\n      address,\n      chain,\n      toBlock,\n    });\n\n    historicalPrice.push(response?.toJSON());\n  }\n\n  console.log(historicalPrice);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Balances with Python\nDESCRIPTION: Python implementation to retrieve ERC20 token balances for a wallet address using Moralis API. Requires the moralis package. Returns token details including address, name, symbol, logo, and balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.token.get_wallet_token_balances(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Owner Information using Moralis API in Python\nDESCRIPTION: This Python code snippet demonstrates how to use the Moralis evm_api to fetch the owner of a specific NFT. It requires an API key and configures parameters including the NFT contract address, token ID, chain, and other optional settings like result format and metadata normalization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owner-of-an-nft.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xa186d739ca2b3022b966194004c6b01855d59571\",\n    \"token_id\": \"1\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_nft_token_id_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Transactions using Moralis Transaction API (Python)\nDESCRIPTION: This Python snippet details how to fetch all Ethereum transactions for a given wallet address using the Moralis Transaction API. Prerequisites include installing the 'moralis' SDK and providing an API key. The code prepares address and chain parameters, calls 'get_wallet_transactions' via the SDK, and prints the result; the chain is specified as 'eth' for Ethereum mainnet.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.transaction.get_wallet_transactions(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Full UserComponent for Session Display and Logout - Angular TypeScript\nDESCRIPTION: Provides a complete user.component.ts with Angular component decorator, session management, session authentication check, and signOut method. The component displays authenticated user data or redirects to sign-in if unauthenticated and supports logging out. Depends on Angular core and router modules, axios, environment configuration, and NgIf for template logic. Implements all described user session flows for the app.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from \"@angular/core\";\nimport { NgIf } from \"@angular/common\"; // Import NgIf\nimport { Router } from \"@angular/router\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\n\n@Component({\n  selector: \"app-user\",\n  standalone: true,\n  imports: [NgIf], // Include NgIf in the imports array\n  templateUrl: \"./user.component.html\",\n  styleUrls: [\"./user.component.css\"],\n})\nexport class UserComponent {\n  constructor(private router: Router) {}\n\n  session = \"\";\n\n  async ngOnInit() {\n    try {\n      const { data } = await axios.get(\n        `${environment.SERVER_URL}/authenticate`,\n        {\n          withCredentials: true,\n        }\n      );\n\n      const { iat, ...authData } = data; // remove unimportant iat value\n\n      this.session = JSON.stringify(authData, null, 2); // format to be displayed nicely\n    } catch (err) {\n      // if user does not have a \"session\" token, redirect to /signin\n      this.router.navigateByUrl(\"/signin\");\n    }\n  }\n\n  async signOut() {\n    await axios.get(`${environment.SERVER_URL}/logout`, {\n      withCredentials: true,\n    });\n    this.router.navigateByUrl(\"/signin\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Top ERC20 Tokens by Price Change using Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to retrieve the top ERC20 tokens ranked by price change using the Moralis SDK. It first initializes the Moralis SDK using an API key. Then, it asynchronously calls `Moralis.EvmApi.marketData.getTopERC20TokensByPriceMovers()` to fetch the data and logs the raw response. Dependencies include the `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-ERC20-tokens-by-price-change.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getTopERC20TokensByPriceMovers();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet ERC20 Balances with Moralis SDK (Python)\nDESCRIPTION: This Python snippet demonstrates using the `moralis` SDK's `evm_api.token.get_wallet_token_balances` function to fetch ERC20 token balances. It requires the `moralis` package and a Moralis API key. The `params` dictionary holds the target `address` and `chain` ('eth' for Ethereum). The function returns a dictionary representing the token balances, which is then printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.token.get_wallet_token_balances(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Using Moralis EVM API with Module Approach\nDESCRIPTION: Example of using Moralis EVM API functionality with the modular approach\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport MoralisEvmApi from \"@moralisweb3/evm-api\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst evmApi = core.getModule < MoralisEvmApi > MoralisEvmApi.moduleName;\nevmApi.block.getBlock({\n  chain: EvmChain.ETHEREUM,\n  blockNumberOrHash: \"\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Moralis API Key in Environment Variables\nDESCRIPTION: Creates an environment variable file to store the Moralis API key securely. This key is required to authenticate requests to the Moralis API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nMORALIS_API_KEY=replace_me\n```\n\n----------------------------------------\n\nTITLE: Querying ERC-20 Token Balances with Moralis Wallet API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve ERC-20 token balances for a specified smart contract account address using the Moralis Wallet API. The code requires installing the \"moralis\" and \"@moralisweb3/common-evm-utils\" packages. Parameters for the API call include the EVM address and chain identifier. Moralis is started with an API key, then the EvmApi method getWalletTokenBalances is used to fetch the balance data for the provided address and chain. The resulting token data is logged as a JSON object. \"YOUR_API_KEY\" must be replaced with your actual Moralis API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-ERC-20-token-by-smart-account.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Import Moralis and EvmChain from Moralis and common EVM utils respectively\n    const Moralis = require(\"moralis\").default;\n    const { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n    // Define an asynchronous function runApp\n    const runApp = async () => {\n      // Initialize Moralis with your API key and other configurations\n      await Moralis.start({\n        apiKey: \"YOUR_API_KEY\",\n        // ...and any other configuration\n      });\n\n      // Define the smart account address you want to retrieve ERC-20 tokens for\n      const address = \"0x9b722B2aA4Cc119aCf8c95bBF5244092Be6880b9\";\n\n      // Specify the (EVM) you are working with\n      const chain = EvmChain.POLYGON;\n\n      // Use Moralis EvmApi to get wallet token balances for the address and chain\n      const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n        address,\n        chain,\n      });\n\n      // Log the JSON response to the console\n      console.log(response.toJSON());\n    };\n\n    // Call the runApp function to start the application\n    runApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical NFT Transfers using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates fetching historical NFT transfer events that interacted with a given wallet using Moralis SDK. It requires the 'moralis' and '@moralisweb3/common-evm-utils' packages. The 'address' and 'chain' parameters designate the wallet and target blockchain, respectively. Output is logged as raw data for analysis. Proper API key management is advised.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs with Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to fetch all NFTs for a given Ethereum address using the Moralis SDK and TypeScript typings. It involves initializing Moralis with an API key, defining the address and chain (using `EvmChain`), and calling the asynchronous `getWalletNFTs` method. The response, typed by the SDK, is then logged.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Lowest Price using Moralis SDK\nDESCRIPTION: This snippet demonstrates how to use the Moralis SDK to fetch the lowest price for an NFT contract on a specified blockchain. It requires the NFT contract address and the target blockchain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"NFT_CONTRACT_ADDRESS\"; // provided from `getWalletNFTs`\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getNFTLowestPrice({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"NFT_CONTRACT_ADDRESS\"; // provided from `getWalletNFTs`\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getNFTLowestPrice({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"NFT_CONTRACT_ADDRESS\", # provided from `getWalletNFTs`\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.nft.get_nft_lowest_price(\n  api_key=api_key,\n  params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Triggers for ERC20 Sender and Receiver Using ABI - JavaScript\nDESCRIPTION: Demonstrates how to set up two separate trigger objects for ERC20 transfers: one for the sender's balance and one for the receiver's balance, referring to the respective ABI objects. Showcases the use of dynamic selectors ('$contract', '$from', '$to') for input mapping. Each trigger associates an ABI to a contract address and the relevant address input, suitable for deployment in Moralis event streams.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst trigger = {\n  contractAddress: \"$contract\",\n  functionAbi: balanceOfSenderAbi,\n  inputs: [\"$from\"],\n  type: \"erc20transfer\",\n};\nconst trigger2 = {\n  contractAddress: \"$contract\",\n  functionAbi: balanceOfReceiverAbi,\n  inputs: [\"$to\"],\n  type: \"erc20transfer\",\n};\nconst triggers = [trigger, trigger2];\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Balance using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch the SPL token balance for a Solana address using the Moralis SDK. It initializes Moralis with an API key, specifies the target address and network (MAINNET), and calls `Moralis.SolApi.account.getSPL`. The response containing token details is logged to the console. Requires `moralis` and `@moralisweb3/common-sol-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/token-api/how-to-get-spl-token-balance-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getSPL({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Express.js Server with Moralis API Integration (JavaScript)\nDESCRIPTION: Creates an Express.js server that serves a '/balances' API endpoint by querying Moralis EvmApi for native and token balances, handling CORS for React development, and responding with formatted JSON. Depends on 'express', 'cors', '@moralisweb3/common-evm-utils', 'moralis', and a valid MORALIS_API_KEY. Key parameters are blockchain address and API key; outputs are JSON wallet balances. Limitation: API key must be secured; static address is used.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nconst express = require(\"express\");\nconst cors = require(\"cors\");\n\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst app = express();\nconst port = 4000;\n\n// allow access to React app domain\napp.use(\n  cors({\n    origin: \"http://localhost:3000\",\n    credentials: true,\n  })\n);\n\nconst MORALIS_API_KEY = \"replace_me\";\nconst address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\napp.get(\"/balances\", async (req, res) => {\n  try {\n    // Promise.all() for receiving data async from two endpoints\n    const [nativeBalance, tokenBalances] = await Promise.all([\n      Moralis.EvmApi.balance.getNativeBalance({\n        chain: EvmChain.ETHEREUM,\n        address,\n      }),\n      Moralis.EvmApi.token.getWalletTokenBalances({\n        chain: EvmChain.ETHEREUM,\n        address,\n      }),\n    ]);\n    res.status(200).json({\n      // formatting the output\n      address,\n      nativeBalance: nativeBalance.result.balance.ether,\n      tokenBalances: tokenBalances.result.map((token) => token.display()),\n    });\n  } catch (error) {\n    // Handle errors\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: MORALIS_API_KEY,\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\nstartServer();\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs with Moralis Wallet API - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates cross-chain querying of all NFTs owned by a given address using Moralis Wallet API and EvmChain utility. Required packages include 'moralis' and '@moralisweb3/common-evm-utils', and a Moralis API key must be provided. The async function 'runApp' performs Moralis SDK initialization, loops through a list of supported EVM chains, fetches wallet NFTs for each chain, aggregates the results, and prints all collected responses. Important parameters are the wallet address and supported chains; output is a composite list of NFT result objects. Note that proper configuration and valid API key are prerequisites.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Handling User Sign-Out in Angular - TypeScript\nDESCRIPTION: Defines an async signOut() method for logging the user out of the session by calling the backend /logout endpoint. After successful logout (using credentials cookie), the user is redirected back to the sign-in page. This method is designed to be triggered from the UI for ending authenticated sessions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nasync signOut() {\n  await axios.get(`${environment.SERVER_URL}/logout`, {\n    withCredentials: true,\n  });\n  this.router.navigateByUrl('/signin');\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Express Server for Webhook Notifications in JavaScript\nDESCRIPTION: Full Express.js server implementation that handles incoming webhooks from Moralis Streams API and triggers desktop notifications for large USDT transfers. Includes request parsing and notification formatting.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst notifier = require(\"node-notifier\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.post(\"/webhook\", (req, res) => {\n  const webhook = req.body;\n\n  for (const erc20Transfer of webhook.erc20Transfers) {\n    const addrs = `${erc20Transfer.from.slice(\n      0,\n      4\n    )}...${erc20Transfer.from.slice(38)}`;\n    const amount = Number(erc20Transfer.valueWithDecimals).toFixed(0);\n\n    notifier.notify({\n      title: \"NEW USDT Transfer\",\n      message: `${addrs} just sent \\n$${amount}`,\n    });\n  }\n\n  return res.status(200).json();\n});\n\napp.listen(port, () => {\n  console.log(`Listening to streams`);\n});\n```\n\n----------------------------------------\n\nTITLE: Backend API Route for Fetching NFT Metadata (TypeScript)\nDESCRIPTION: This Next.js API route uses the Moralis SDK to fetch metadata for a specific NFT. It handles the request from the frontend and returns the NFT metadata.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-explorer.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nexport default async function handler(req, res) {\n  const { address, network } = req.body;\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const data = await Moralis.SolApi.nft.getNFTMetadata({\n      network,\n      address,\n    });\n    res.status(200).json(data);\n  } catch (error) {\n    res.status(400).json(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trading Pairs for ERC-20 Token Using Moralis API in Python\nDESCRIPTION: This function, `get_token_pairs`, retrieves trading pairs for a specific ERC-20 token on the Base blockchain via the Moralis API, automatically detecting the correct network from `agent_wallet`. The output is a formatted description of available pairs with price and liquidity data, or an error message. Prerequisites are a configured Moralis API key, an `agent_wallet` context, and the `requests` library.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_token_pairs(token_address: str) -> str:\\n    \"\"\"\\n    Fetch trading pairs for a specific ERC-20 token on the Base blockchain.\\n    Automatically determines if the network is mainnet or testnet.\\n\\n    Args:\\n        token_address (str): The address of the ERC-20 token.\\n\\n    Returns:\\n        str: Information about trading pairs or an error message if unsuccessful.\\n    \"\"\"\\n    # Determine the network dynamically based on the agent's current network ID\\n    is_mainnet = agent_wallet.network_id in [\"base\", \"base-mainnet\"]\\n    chain = \"base\" if is_mainnet else \"base sepolia\"\\n\\n    # API endpoint and headers\\n    url = f\"https://deep-index.moralis.io/api/v2.2/erc20/{token_address}/pairs\"\\n    headers = {\\n        \"accept\": \"application/json\",\\n        \"X-API-Key\": MORALIS_API_KEY\\n    }\\n    params = {\\n        \"chain\": chain\\n    }\\n\\n    try:\\n        response = requests.get(url, headers=headers, params=params)\\n        response.raise_for_status()\\n        pairs = response.json().get(\"pairs\", [])\\n\\n        # Format the output\\n        if pairs:\\n            pairs_info = \"\\n\".join(\\n                [\\n                    f\"Pair: {pair['pair_label']}\\\\n\"\\n                    f\"Price (USD): {pair['usd_price']}\\\\n\"\\n                    f\"24hr Price Change (%): {pair['usd_price_24hr_percent_change']}\\\\n\"\\n                    f\"Liquidity (USD): {pair['liquidity_usd']}\\\\n\"\\n                    f\"Exchange Address: {pair['exchange_address']}\\\\n\"\\n                    f\"Base Token: {pair['pair'][0]['token_name']} ({pair['pair'][0]['token_symbol']})\\\\n\"\\n                    f\"Quote Token: {pair['pair'][1]['token_name']} ({pair['pair'][1]['token_symbol']})\\\\n\"\\n                    for pair in pairs\\n                ]\\n            )\\n            return f\"Trading pairs for token {token_address}:\\n{pairs_info}\"\\n        else:\\n            return f\"No trading pairs found for token {token_address}.\"\\n\\n    except requests.exceptions.RequestException as e:\n```\n\n----------------------------------------\n\nTITLE: Creating Solana Wallet Adapter Component with Moralis Auth (TypeScript)\nDESCRIPTION: This React functional component initializes and manages Solana wallet authentication, leveraging Moralis and NextAuth to sign and validate wallet connections. Dependencies include @solana/wallet-adapter-react, @solana/wallet-adapter-react-ui, bs58, next-auth/react, and @moralisweb3/next. The component handles wallet connection states, requests an authentication challenge, signs the challenge, and authenticates the user session. Expected input is user interaction with the wallet button, and the output is user authentication or error handling. The component assumes a devnet network and expects wallets compatible with the Solana adapter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from \\\"react\\\";\nimport { useWallet } from \\\"@solana/wallet-adapter-react\\\";\nimport { WalletMultiButton } from \\\"@solana/wallet-adapter-react-ui\\\";\nrequire(\\\"@solana/wallet-adapter-react-ui/styles.css\\\");\nimport base58 from \\\"bs58\\\";\nimport { signIn, signOut } from \\\"next-auth/react\\\";\nimport { useAuthRequestChallengeSolana } from \\\"@moralisweb3/next\\\";\nimport React from \\\"react\\\";\nexport default function WalletAdaptor() {\n  const { publicKey, signMessage, disconnecting, disconnect, connected } =\n    useWallet();\n  const { requestChallengeAsync, error } = useAuthRequestChallengeSolana();\n  const signCustomMessage = async () => {\n    if (!publicKey) {\n      throw new Error(\\\"Wallet not avaiable to process request.\\\");\n    }\n    const address = publicKey.toBase58();\n    const challenge = await requestChallengeAsync({\n      address,\n      network: \\\"devnet\\\",\n    });\n    const encodedMessage = new TextEncoder().encode(challenge?.message);\n    if (!encodedMessage) {\n      throw new Error(\\\"Failed to get encoded message.\\\");\n    }\n\n    const signedMessage = await signMessage?.(encodedMessage);\n    const signature = base58.encode(signedMessage as Uint8Array);\n    try {\n      const authResponse = await signIn(\\\"moralis-auth\\\", {\n        message: challenge?.message,\n        signature,\n        network: \\\"Solana\\\",\n        redirect: false,\n      });\n      if (authResponse?.error) {\n        throw new Error(authResponse.error);\n      }\n    } catch (e) {\n      disconnect();\n      console.log(e);\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      disconnect();\n      console.log(error);\n    }\n  }, [disconnect, error]);\n\n  useEffect(() => {\n    if (disconnecting) {\n      signOut({ redirect: false });\n    }\n  }, [disconnecting]);\n\n  useEffect(() => {\n    connected && signCustomMessage();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connected]);\n\n  return <WalletMultiButton />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Moralis Trigger Interface in TypeScript\nDESCRIPTION: Details the TypeScript interface `Trigger` used to configure Moralis Streams Triggers. It outlines the required and optional properties like `type` (event type), `contractAddress` (target contract), `functionAbi` (function to call), `inputs` (function arguments), `topic0` (event signature for log triggers), and `callFrom` (caller address override). This interface defines the structure needed to specify which function to call under what conditions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Trigger {\n  type: \"tx\" | \"log\" | \"erc20transfer\" | \"erc20approval\" | \"nfttransfer\";\n  contractAddress: string;\n  functionAbi: AbiItem;\n  inputs?: (string | string[])[];\n  topic0?: string;\n  callFrom?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tic-Tac-Toe Gameplay and State Updates in TypeScript/React\nDESCRIPTION: This TypeScript/React component (`GameBoard`) manages the interactive Tic-Tac-Toe board. It initializes the game state (`currentgameData`) from props and uses `useEffect` with `connection.onAccountChange` to subscribe to real-time updates for the specific game account on the Solana blockchain. The `playGame` function handles user clicks on the board, determines the player, formats the move data, and sends it to a backend API (`/TicTacToe/playGame`) for processing and transaction signing. Another `useEffect` manages the account change listener subscriptions to prevent duplicates and memory leaks. The `celebrateWin` function checks the updated game state for a winner or draw and displays appropriate toast notifications using `useToast`. The UI renders the game board based on `currentgameData`, showing player moves ('🔴', '❌') or a spinner during move processing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `src/components/templates/TicTacToe/GameBoard.tsx`\n\nconst GameBoard: FC<BoardInput> = ({ data, connection }) => {\n  const { publicKey } = useWallet();\n  const toast = useToast();\n  const [currentgameData, setCurrentGameData] = useState<GameAccount>();\n  const [subscriptions, SetSubscriptions] = useState<number[]>([]);\n  const [spinner, setSpinner] = useState<number | null>();\n\n  const accountPublicKey = data.accountId;\n\n  useEffect(() => {\n    setCurrentGameData(data.gameInput);\n  }, [data]);\n\n  // Listen to account changes\n  useEffect(() => {\n    const SubId = connection.onAccountChange(accountPublicKey, (e) => {\n      console.log(e);\n      const gameInput = deserializeUnchecked(GameAccountSchema, GameAccount, e.data);\n      setCurrentGameData(gameInput);\n    });\n    SetSubscriptions((existing) => [...existing, SubId]);\n    console.log(SubId);\n  }, [accountPublicKey]);\n\n  useEffect(() => {\n    console.log(subscriptions);\n    if (subscriptions.length > 1) {\n      connection.removeAccountChangeListener(subscriptions[0]);\n      deleteArrayElement(subscriptions[0]);\n    }\n  }, [subscriptions]);\n\n  const celebrateWin = (winnerId: number) => {\n    switch (winnerId) {\n      case 1: {\n        if (currentgameData?.player1 === publicKey?.toBase58()) {\n          toast({\n            title: 'You won the game!! ',\n            status: 'success',\n            position: 'bottom-right',\n            isClosable: true,\n          });\n        } else {\n          toast({\n            title: 'Player 1 won the game!! ',\n            status: 'error',\n            position: 'bottom-right',\n            isClosable: true,\n          });\n        }\n        break;\n      }\n      case 2: {\n        if (currentgameData?.player2 === publicKey?.toBase58()) {\n          toast({\n            title: 'You won the game!! ',\n            status: 'success',\n            position: 'bottom-right',\n            isClosable: true,\n          });\n        } else {\n          toast({\n            title: 'Player 2 won the game!! ',\n            status: 'error',\n            position: 'bottom-right',\n            isClosable: true,\n          });\n        }\n        break;\n      }\n      case 3: {\n        toast({\n          title: 'Its a Draw!! ',\n          status: 'success',\n          position: 'bottom-right',\n          isClosable: true,\n        });\n\n        break;\n      }\n    }\n  };\n\n  async function playGame(move: number) {\n    if (currentgameData) {\n      const gamePlayer =\n        currentgameData.player1 === publicKey?.toBase58()\n          ? 1\n          : currentgameData.player2 === publicKey?.toBase58()\n          ? 2\n          : 0;\n      if (gamePlayer) {\n          const gameMove = { player1: currentgameData.player1, player2: currentgameData.player2, gamePlayer, move };\n          await apiPost('/TicTacToe/playGame', gameMove);\n    }\n  }\n\n  if (currentgameData) {\n    return (\n      <>\n        <Flex>\n          <Grid gridTemplateColumns={'repeat(3, 1fr)'} gridTemplateRows={'repeat(3, 1fr)'} justifyContent={'center'}>\n            {currentgameData.moves.map((e, i) => {\n              return (\n                <Flex\n                  onClick={() => { playGame(i);}\n                  fontSize={'25px'}\n                  color={'white'}\n                  cursor={'pointer'}\n                >\n                  {(e === 1 && '🔴') || (e === 2 && '❌') || (e === 0 && (spinner === i ? <Spinner /> : ''))}\n                </Flex>\n              );\n            })}\n          </Grid>\n        </Flex>\n      </>\n    );\n  }\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Owner Information using Moralis API in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to fetch the owner of a specific NFT using the Moralis NFT API. It initializes Moralis with an API key and uses the getNFTTokenIdOwners endpoint with the required parameters: NFT contract address, blockchain chain, and token ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owner-of-an-nft.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xa186d739ca2b3022b966194004c6b01855d59571\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const tokenId = \"1\";\n\n  const response = await Moralis.EvmApi.nft.getNFTTokenIdOwners({\n    address,\n    chain,\n    tokenId,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Adding Rate Limiting Enforcement to a Firebase Function in TypeScript\nDESCRIPTION: This code demonstrates integrating IP-based rate limiting inside a Firebase Cloud Function for getBlock. The limiter computes the qualifier from the request, enforces the quota using rejectOnQuotaExceededOrRecordUsage, and executes the core API logic. Input and output remain unchanged. It presupposes the rate limiting and IP normalization functions are implemented.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getBlock = functions.https.onCall(async (data: GetBlockData) => {\n  const qualifier = \\\"ip-\\\" + readNormalizedIp(context.rawRequest);\n  limiter.rejectOnQuotaExceededOrRecordUsage(qualifier);\n\n  // ...\n  return response.toJSON();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis Authentication API Route in JavaScript\nDESCRIPTION: Provides the JavaScript version for configuring the Moralis API handler in `pages/api/moralis/[...moralis].js`. It mirrors the TypeScript setup, initializing `MoralisNextApi` with the API key and authentication parameters derived from environment variables, including setting a message expiration time and statement. It also validates the presence of required environment variables.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\n\nconst DATE = new Date();\nconst FUTUREDATE = new Date(DATE);\nFUTUREDATE.setDate(FUTUREDATE.getDate() + 1);\n\nconst { MORALIS_API_KEY, APP_DOMAIN, NEXTAUTH_URL } = process.env;\n\nif (!MORALIS_API_KEY || !APP_DOMAIN || !NEXTAUTH_URL) {\n  throw new Error(\n    \"Missing env variables. Please add the required env variables.\"\n  );\n}\n\nexport default MoralisNextApi({\n  apiKey: MORALIS_API_KEY,\n  authentication: {\n    timeout: 120,\n    domain: APP_DOMAIN,\n    uri: NEXTAUTH_URL,\n    expirationTime: FUTUREDATE.toISOString(),\n    statement: \"Sign message to authenticate.\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection NFTs with Moralis SDK in Python\nDESCRIPTION: This Python script demonstrates fetching all NFTs for a given contract address using the Moralis Python SDK. It sets up parameters including the API key, contract address, chain ('eth'), and optional parameters like limit and metadata normalization. It calls `evm_api.nft.get_contract_nfts` and prints the result formatted as JSON. Requires the `moralis` package and a valid Moralis API Key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    # \"totalRanges\": 0,\n    # \"range\": 0,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_contract_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n```\n\n----------------------------------------\n\nTITLE: Updating a Moralis Stream with Triggers using the SDK in JavaScript\nDESCRIPTION: Shows how to use the Moralis JavaScript SDK to update an existing stream by adding triggers. The `Moralis.Streams.update` function is called with the `id` of the target stream and the `triggers` array (containing one or more trigger configuration objects) to apply the trigger logic to the stream.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMoralis.Streams.update({\n  id: \"YOUR_STREAM_ID\",\n  triggers,\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs using Moralis SDK in C#\nDESCRIPTION: Demonstrates calling the Moralis .NET SDK to fetch NFTs owned by a specific address on a given chain. It uses the `GetNFTs` method from the `MoralisClient.Web3Api.Account` endpoint, limiting the result to the first 10 NFTs found.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Load first 10 NFTs for the address\nNftOwnerCollection nfts = await MoralisClient.Web3Api.Account.GetNFTs(address, (ChainList)chainId, \"\", null, 10);\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Data Using Moralis getBlock Endpoint\nDESCRIPTION: This snippet shows how to use Moralis' getBlock endpoint to retrieve blockchain data. It demonstrates initializing Moralis with an API key, specifying a block number or hash, and retrieving detailed block information from the Ethereum blockchain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/01-Get Blocks/eth-call-and-getblock.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nasync function runApp() {\n  await Moralis.start({ apiKey: \"YOUR_API_KEY\" });\n\n  const blockNumberOrHash = \"15863321\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getBlock({\n    blockNumberOrHash,\n    chain,\n  });\n  console.log(response.toJSON());\n}\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Data with Metadata Using Moralis - JavaScript\nDESCRIPTION: Further extends getDemoData to fetch the first ten NFTs for an address using Moralis.EvmApi.nft.getWalletNFTs. It returns an array of NFTs with their name, amount, and metadata properties for enhanced UI or analytics uses. This output can be consumed by clients to show a user's digital collectibles in detail.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getDemoData() {\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n  const native = nativeBalance.result.balance.ether;\n\n  const tokenBalances = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n  const tokens = tokenBalances.result.map((token) => token.display());\n\n  // Get the nfts\n  const nftsBalances = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n    limit: 10,\n  });\n\n  // Format the output to return name, amount and metadata\n  const nfts = nftsBalances.result.map((nft) => ({\n    name: nft.result.name,\n    amount: nft.result.amount,\n    metadata: nft.result.metadata,\n  }));\n\n  // Add nfts to the output\n  return { native, tokens, nfts };\n}\n\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for /verify Using Moralis and JWT - JavaScript\nDESCRIPTION: This Express.js endpoint verifies a signed message using Moralis.Auth.verify and upon success creates a JWT containing the user's address and profileId, set as an HTTP-only cookie. Inputs are a JSON body with message and signature, output is the user info or 400 error. Dependencies include express, Moralis, jsonwebtoken. Used after client signs a Moralis message with their Web3 wallet. Limitations: requires middleware for JSON parsing and cookie handling.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/verify\", async (req, res) => {\n  try {\n    const { message, signature } = req.body;\n\n    const { address, profileId } = (\n      await Moralis.Auth.verify({\n        message,\n        signature,\n        networkType: \"evm\",\n      })\n    ).raw;\n\n    const user = { address, profileId, signature };\n\n    // create JWT token\n    const token = jwt.sign(user, process.env.AUTH_SECRET);\n\n    // set JWT cookie\n    res.cookie(\"jwt\", token, {\n      httpOnly: true,\n    });\n\n    res.status(200).json(user);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Smart Contract Events with Moralis Streams (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates setting up a Moralis Stream to listen for ERC20 'Transfer' events from the USDT contract (`0xdAC...`) on the Ethereum chain. It defines the event ABI, initializes Moralis, configures the stream with the chain, description, tag, webhook URL, ABI, enables contract logs, and specifies the event topic. It then adds the stream and associates the USDT contract address with it.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst ERC20_transfer_ABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"from\", type: \"address\" },\n      { indexed: true, name: \"to\", type: \"address\" },\n      { indexed: false, name: \"value\", type: \"uint256\" },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const stream = {\n    chains: [EvmChain.ETHEREUM],\n    description: \"monitor USDT transfers\",\n    tag: \"USDT\",\n    webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n    abi: ERC20_transfer_ABI,\n    includeContractLogs: true,\n    topic0: [\"Transfer(address,address,uint256)\"],\n  };\n\n  const newStream = await Moralis.Streams.add(stream);\n  const { id } = newStream.toJSON();\n\n  // Now we attach USDT address to the stream\n  const address = \"0xdAC17F958D2ee523a2206206994597C13D831ec7\";\n\n  await Moralis.Streams.addAddress({ address, id });\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers by Contract with Moralis SDK (JavaScript)\nDESCRIPTION: Demonstrates fetching ERC20 transfers for a specific contract address on the Ethereum chain using the Moralis JavaScript SDK. Requires the Moralis SDK (`moralis`, `@moralisweb3/common-evm-utils`) and an API key. The `Moralis.EvmApi.token.getTokenTransfers` function is called with the contract `address` and `chain`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-contract.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Populating Frontend with Lens Profile Data (JavaScript/JSX)\nDESCRIPTION: Updates the JSX returned by the `Home` component in `pages/index.js`. It replaces static placeholder values with dynamic data from the `profile` prop (e.g., `profile.coverPicture.original.url`, `profile.name`, `profile.stats.totalFollowers`). This renders the fetched profile information on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n    <div className={styles.container}>\n      <img\n        className={styles.banner}\n        src={profile.coverPicture.original.url}\n        alt=\"cover\"\n      />\n      <div className={styles.profile}>\n        <div className={styles.profileLeft}>\n          <img\n            className={styles.profileImg}\n            src={profile.picture.original.url}\n            alt=\"profileImg\"\n          />\n          <div className={styles.info}>\n            <div className={styles.name}>{profile.name}</div>\n            <div className={styles.handle}>{profile.handle}</div>\n            <div className={styles.bio}>{profile.bio}</div>\n            <div className={styles.follow}>\n              <div>Followers</div>\n              <div>{profile.stats.totalFollowers}</div>\n            </div>\n            <div className={styles.follow}>\n              <div>Following</div>\n              <div>{profile.stats.totalFollowing}</div>\n            </div>\n          </div>\n        </div>\n        <div className={styles.profileRight}>\n          <Tabs defaultActiveKey=\"1\" centered>\n            <TabPane tab=\"I'm Following\" key=\"1\">\n              <div className={styles.followingNFTs}>\n                {nftArray?.map((e) => {\n                  return <iframe className={styles.animation} src={e}></iframe>;\n                })}\n              </div>\n            </TabPane>\n            <TabPane tab=\"Follow Me\" key=\"2\">\n              <div className={styles.followMe}>\n                <div>\n                  <div className={styles.promptOne}>Hey There 👋🏼</div>\n                  <div className={styles.promptTwo}>\n                    Give me a follow and receive this cool NFT!\n                  </div>\n                  <Button onClick={follow} type=\"primary\">\n                    Follow Me\n                  </Button>\n                </div>\n                {myNFT && (\n                  <iframe className={styles.myNFT} src={myNFT}></iframe>\n                )}\n              </div>\n            </TabPane>\n            <TabPane tab=\"Social Posts\" key=\"3\" disabled={true} />\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Querying Top NFT Collections by Market Cap with Moralis SDK - TypeScript\nDESCRIPTION: This example shows how to use Moralis\\'s TypeScript SDK to retrieve the top NFT collections by market cap. It requires the \\'moralis\\' and \\'@moralisweb3/common-evm-utils\\' libraries and uses modern ES6+ import syntax. The code asynchronously starts Moralis, sends the market data request, and logs the resulting raw data, with \\'YOUR_API_KEY\\' as a mandatory parameter. Suitable for Node v14+ with TypeScript support.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-market-cap.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getTopNFTCollectionsByMarketCap();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Requesting Authentication Message via Moralis Auth API (TypeScript)\nDESCRIPTION: Defines an asynchronous backend function `requestMessage` in TypeScript. This function takes the user's wallet address, chain ID, and network type ('evm') as input. It utilizes the initialized Moralis SDK's `Auth.requestMessage` method to generate a challenge message tailored for Web3 authentication, including domain details and an expiration time. It returns the generated message string, which should be sent to the client for the user to sign.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function requestMessage({ address, chain, network }: { address: string; chain: string; network: 'evm' }) {\n  const result = await Moralis.Auth.requestMessage({\n    address,\n    chain,\n    network,\n    domain: 'defi.finance',\n    statement: 'Please sign this message to confirm your identity.',\n    uri: 'https://defi.finance',\n    expirationTime: '2023-01-01T00:00:00.000Z',\n    timeout: 15,\n  });\n\n  const { message } = result.toJSON();\n\n  return message;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ERC20 Transfer Event ABI in JSON for Moralis Streams\nDESCRIPTION: This JSON snippet represents the ABI (Application Binary Interface) for the standard ERC20 `Transfer` event. It defines the event name (`Transfer`), its inputs (`from`, `to`, `value`) with their types (`address`, `uint256`) and whether they are indexed. Providing this ABI is crucial when configuring a Moralis Stream to listen for and filter `Transfer` events, enabling access to event parameters for filtering conditions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/filter-streams.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Interchain Token Transfer Function in Solidity with Axelar\nDESCRIPTION: A partial implementation of the GMPDistribution contract showing the sendToMany function structure that will initiate a cross-chain token transfer using Axelar's callContractWithToken method. This function will encode recipient addresses and initiate the GMP transaction.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npragma solidity ^0.8.19;\n\n// Imports\n\ncontract GMPDistribution is AxelarExecutable {\n\n    IAxelarGasService public immutable gasService;\n\n    constructor() AxelarExecutable(_gateway) {}\n\n    function sendToMany(\n    string memory _destChain,\n    string memory _destContractAddr,\n    address[] calldata _destinationAddrs,\n    string memory _symbol,\n    uint256 _amount\n    ) external payable {\n        // Check that funds have been sent\n\n        // Obtain token address\n\n        // Transfer token\n\n        // Grant approval to gateway contract\n\n        // Encode GMP message\n\n        // Pay gas with the source chain's native token\n\n        // Begin the interchain transaction.\n        gateway.callContractWithToken(\n            _destChain,\n            _destContractAddr,\n            recipientAddressesEncoded,\n            _symbol,\n            _amount\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Transactions in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Moralis SDK in JavaScript to fetch all transactions of a specific block using the getBlock endpoint. It requires the block number or hash and optionally specifies the chain and whether to include internal transactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const blockNumberOrHash = \"15863321\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getBlock({\n    blockNumberOrHash,\n    chain,\n    include: \"internal_transactions\",\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating Solana Wallet Adapter Component with Moralis Auth (JavaScript)\nDESCRIPTION: A JavaScript version of the wallet adapter React component to manage Solana wallet authentication in a Next.js app using Moralis and NextAuth. It mirrors the TypeScript component but omits type annotations, and relies on the same dependencies. The component handles UI for wallet connection, challenge-request signing, error handling, and session management. User interacts via a wallet button, and the process authenticates or logs out users based on wallet state.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from \\\"react\\\";\nimport { useWallet } from \\\"@solana/wallet-adapter-react\\\";\nimport { WalletMultiButton } from \\\"@solana/wallet-adapter-react-ui\\\";\nrequire(\\\"@solana/wallet-adapter-react-ui/styles.css\\\");\nimport base58 from \\\"bs58\\\";\nimport { signIn, signOut } from \\\"next-auth/react\\\";\nimport { useAuthRequestChallengeSolana } from \\\"@moralisweb3/next\\\";\nimport React from \\\"react\\\";\nexport default function WalletAdaptor() {\n  const { publicKey, signMessage, disconnecting, disconnect, connected } =\n    useWallet();\n  const { requestChallengeAsync, error } = useAuthRequestChallengeSolana();\n  const signCustomMessage = async () => {\n    if (!publicKey) {\n      throw new Error(\\\"Wallet not avaiable to process request.\\\");\n    }\n    const address = publicKey.toBase58();\n    const challenge = await requestChallengeAsync({\n      address,\n      network: \\\"devnet\\\",\n    });\n    const encodedMessage = new TextEncoder().encode(challenge?.message);\n    if (!encodedMessage) {\n      throw new Error(\\\"Failed to get encoded message.\\\");\n    }\n\n    const signedMessage = await signMessage?.(encodedMessage);\n    const signature = base58.encode(signedMessage);\n    try {\n      const authResponse = await signIn(\\\"moralis-auth\\\", {\n        message: challenge?.message,\n        signature,\n        network: \\\"Solana\\\",\n        redirect: false,\n      });\n      if (authResponse?.error) {\n        throw new Error(authResponse.error);\n      }\n    } catch (e) {\n      disconnect();\n      console.log(e);\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      disconnect();\n      console.log(error);\n    }\n  }, [disconnect, error]);\n\n  useEffect(() => {\n    if (disconnecting) {\n      signOut({ redirect: false });\n    }\n  }, [disconnecting]);\n\n  useEffect(() => {\n    connected && signCustomMessage();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connected]);\n\n  return <WalletMultiButton />;\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signatures in Python\nDESCRIPTION: Python implementation for verifying webhook request signatures using Web3 keccak hashing to validate the authenticity of incoming webhook requests.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/response-body.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef verify_Signature(req, secret):\n    provided_signature = req.headers.get(\"x-signature\")\n    if not provided_signature:\n        raise TypeError(\"Signature not provided\")\n\n    data = req.data+secret.encode()\n    signature = Web3.keccak(text=data.decode()).hex()\n\n    if provided_signature != signature:\n        raise ValueError(\"Invalid Signature\")\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Generation in VerifySignature Method (Complete)\nDESCRIPTION: This C# code shows the complete `VerifySignature` method in an ASP.NET Core controller after integrating JWT generation. Upon successfully completing the Moralis authentication challenge (`CompleteChallenge`), it creates a dictionary of claims (Address, ProfileId, SignatureValidated), uses the `TokenManager.GenerateToken` method to create a JWT, and returns the generated token within a `CreatedAtRouteResult`. It retains the placeholder comment for database saving and includes standard error handling.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost, Route(\"verify/{network}\")]\npublic async Task<IActionResult> VerifySignature(ChainNetworkType network, [FromBody] CompleteChallengeRequestDto req)\n{\n    try\n    { \n        CompleteChallengeResponseDto completeResp = await MoralisClient.AuthenticationApi.AuthEndpoint.CompleteChallenge(req, network);\n\n        // ---------------------------------------------------------------------------------\n        // Here is where you would save authentication information to the database.\n        // ---------------------------------------------------------------------------------\n\n        Dictionary<string, string> claims = new Dictionary<string, string>();\n        claims.Add(\"Address\", completeResp.Address);\n        claims.Add(\"AuthenticationProfileId\", completeResp.ProfileId);\n        claims.Add(\"SignatureValidated\", \"true\");\n\n        string token = TokenManager.GenerateToken(claims);\n        \n        return new CreatedAtRouteResult(nameof(VerifySignature), token);\n    }\n    catch (ApiException ex)\n    {\n        return new BadRequestResult();\n    }\n    catch (Exception ex)\n    {\n        return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Sign-In Page with Particle Connect and Moralis\nDESCRIPTION: This JavaScript code snippet demonstrates the implementation of a Next.js sign-in page (`pages/signin.jsx`) using Particle Connect and Moralis. It imports necessary hooks and components (`useRouter`, `useEffect`, `useAccount`, `ConnectButton`, `useConnectKit`, `ModalProvider`, `useAuthRequestChallengeEvm`, `signIn`), handles the Moralis authentication challenge/response flow triggered by a Particle Connect account connection (`account`), signs the message using the connected Particle account (`connect.particle.evm.personalSign`), and uses `next-auth` (`signIn`) to establish a user session upon successful verification. The `ModalProvider` configures Particle Connect options, including project credentials (retrieved from environment variables), supported chains (`Ethereum`), and wallet connection methods (`evmWallets` including Particle Auth and WalletConnect).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-particle.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter } from 'next/router';\nimport { useEffect } from 'react';\nimport { useAccount, ConnectButton, useConnectKit, ModalProvider } from '@particle-network/connect-react-ui';\nimport { useAuthRequestChallengeEvm } from '@moralisweb3/next';\nimport { signIn } from 'next-auth/react';\nimport { Ethereum } from '@particle-network/chains';\nimport { evmWallets } from '@particle-network/connect';\nimport '@particle-network/connect-react-ui/dist/index.css';\n\nexport default function SignIn() {\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\n  const { push } = useRouter();\n  const account = useAccount();\n  const connect = useConnectKit();\n\n  useEffect(() => {\n    if (account) {\n      (async () => {\n        const { message } = await requestChallengeAsync({\n          address: account,\n          chainId: '0x1',\n        });\n\n        const signature = await connect.particle.evm.personalSign(`0x${Buffer.from(message).toString('hex')}`); // Conversion to hex, then signing with connected Particle account (whether that be through Particle Auth or otherwise)\n\n        const result = await signIn(\"moralis-auth\", {\n          message,\n          signature,\n          redirect: false,\n          callbackUrl: '/user',\n        });\n\n        if (result && result.url) {\n          push(result.url);\n        }\n      })();\n    }\n  }, [account]);\n\n  return (\n    <ModalProvider\n      options={{ // Options for Particle Auth; the projectId, clientKey, and appId can be retrieved from https://dashboard.particle.network/\n        projectId: process.env.PARTICLE_PROJECT_ID,\n        clientKey: process.env.PARTICLE_CLIENT_KEY,\n        appId: process.env.PARTICLE_APP_ID,\n        chains: [Ethereum],\n        wallets: evmWallets({ showQrModal: true, projectId: process.env.WALLETCONNECT_PROJECT_ID }), // WalletConnect for Web3 wallet connections (non Particle Auth)\n      }}\n    >\n      <div>\n        <h3>Web3 Authentication</h3>\n        <ConnectButton />\n      </div>\n    </ModalProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Stream-Specific Usage Statistics - JSON\nDESCRIPTION: This snippet shows a sample JSON response from the /stats/{streamId} endpoint, which gives usage statistics for a specific stream. The output details metrics such as webhooks delivered/failed, logs, transactions, and internal transactions processed, as well as stream creation and update timestamps. The input is a GET request using a stream ID; output is a JSON object suitable for per-stream billing and monitoring. The snippet assumes access to the API and a valid stream identifier. There are no major constraints besides API availability and authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/getting-started/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"totalWebhooksDelivered\": 0,\\n  \"totalWebhooksFailed\": 0,\\n  \"totalLogsProcessed\": 0,\\n  \"totalTxsProcessed\": 0,\\n  \"totalTxsInternalProcessed\": 0,\\n  \"createdAt\": \"2022-10-25T08:21:00.877Z\",\\n  \"updatedAt\": \"2022-10-25T08:21:00.877Z\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Emulator URL for Moralis Streams - URL Format\nDESCRIPTION: This template shows the format of the webhook URL generated by the Firebase emulator for Moralis Streams. You will need to obtain your specific values for <project_id> and <location> by inspecting the emulator logs. This URL is required when configuring a test blockchain stream from the Moralis admin UI to your local environment. Limitations: Valid only while the emulator is running locally; cannot be used for external webhooks unless tunneled (e.g., via ngrok).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/firebase.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:5001/<project_id>/<location>/ext-moralis-streams-webhook\n```\n\n----------------------------------------\n\nTITLE: Setting Stream Settings\nDESCRIPTION: Example of initializing Moralis and setting stream settings including region configuration for optimal performance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/stream-management.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n});\n\nawait Moralis.Streams.setSettings({\n  region: \"eu-central-1\", // 'us-east-1' | 'us-west-2' | 'eu-central-1'\n});\n```\n\n----------------------------------------\n\nTITLE: Example Pancakeswap V1 Pair Reserve JSON Output\nDESCRIPTION: This code block shows a sample JSON response produced by the Moralis DeFi API's getPairReserves endpoint, displaying the reserve balances (reserve0 and reserve1) for a liquidity pair. No dependencies or execution are required; this block is intended for illustrative purposes to set user expectations for output format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-reserves.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"reserve0\": \"54905537425359452861\",\n  \"reserve1\": \"2165856852288790099409\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFT Collections with Moralis SDK in Python\nDESCRIPTION: This Python snippet illustrates fetching NFT collections using the `moralis` Python SDK. It imports the `evm_api`, sets the API key, defines parameters including the address, chain, limit, and cursor, and calls the `evm_api.nft.get_wallet_nft_collections` function. The script then prints the resulting collection data. Requires the `moralis` package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/04-NFT Collections/how-to-get-all-nft-collections-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"limit\": 100,\n    \"cursor\": \"\",\n}\n\nresult = evm_api.nft.get_wallet_nft_collections(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Sushiswap V2 Pair Reserves with Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch the reserves of a specific Sushiswap V2 pair using the Moralis SDK. It initializes Moralis with an API key, specifies the pair address and chain (Ethereum), calls the `Moralis.EvmApi.defi.getPairReserves` method, and logs the JSON response. Requires the `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-reserves.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xc40d16476380e4037e6b1a2594caf6a6cc8da967\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Based Agent\nDESCRIPTION: Configuration for the .env file that stores API keys needed by the Based Agent. Includes CDP credentials, OpenAI API key, and Moralis API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCDP_API_KEY_NAME=your_cdp_key_name\nCDP_PRIVATE_KEY=your_cdp_private_key\nOPENAI_API_KEY=your_openai_key\nMORALIS_API_KEY=your_moralis_key\n```\n\n----------------------------------------\n\nTITLE: Querying SPL NFT Balance with Moralis Solana API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize Moralis in a JavaScript environment to fetch the SPL NFT balance of a Solana address using the getNFTs endpoint. It requires installation of the 'moralis' and '@moralisweb3/common-sol-utils' NPM packages, and an API key from Moralis. The two key parameters are 'address' (the Solana wallet address to query) and 'network' (e.g., SolNetwork.MAINNET). The script outputs the response as a JSON object, listing NFT balances associated with the provided address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/nft-api/how-to-get-spl-nft-balance-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getNFTs({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi and Session Providers in NextJS (_app.jsx) - JavaScript\nDESCRIPTION: Wraps all application pages with WagmiConfig for EVM wallet connections and SessionProvider from NextAuth for session management. Place this as pages/_app.jsx in your project. Requires Wagmi, next-auth, and public and WS providers for mainnet. Expects Component and pageProps provided by NextJS. Ensures all child pages have access to authentication and provider context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createConfig, configureChains, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { SessionProvider } from \"next-auth/react\";\nimport { mainnet } from \"wagmi/chains\";\n\nconst { publicClient, webSocketPublicClient } = configureChains(\n  [mainnet],\n  [publicProvider()]\n);\n\nconst config = createConfig({\n  autoConnect: true,\n  publicClient,\n  webSocketPublicClient,\n});\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <WagmiConfig config={config}>\n      <SessionProvider session={pageProps.session} refetchInterval={0}>\n        <Component {...pageProps} />\n      </SessionProvider>\n    </WagmiConfig>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Decoding NFT Transfer Event Streams with Metadata - Moralis Streams (JSON)\nDESCRIPTION: This snippet represents the JSON payload for decoded NFT transfers, including ERC721 and ERC1155 events as output by Moralis Streams. It enumerates transfer metadata such as token name, type, symbol (for ERC721), sender, receiver, token ID, and contract address. To use, configure Streams for NFT topics; expects transaction logs as input and outputs detailed NFT transfer data, suitable for confirmed and unconfirmed events, with support for single or multi-token standards.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/response-body.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": false,\n  \"chainId\": \"0x13881\",\n  \"abi\": [],\n  \"streamId\": \"c4cf9b1a-0cb3-4c79-9ca3-04f11856c555\",\n  \"tag\": \"ChrisWallet\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"29381772\",\n    \"hash\": \"0xdd64099df718e2a439a9805d25a3ab88e943a8c713f2259d9777460d7051572c\",\n    \"timestamp\": \"1669640635\"\n  },\n  \"logs\": [\n    {\n      \"logIndex\": \"72\",\n      \"transactionHash\": \"0x5ecd6b57593ab2f4f3e39fbb3318a3933e2cf9fdcf5b7ca671fb0fc2ce9dc4b5\",\n      \"address\": \"0x26b4e79bca1a550ab26a8e533be97c40973b2671\",\n      \"data\": \"0x\",\n      \"topic0\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n      \"topic1\": \"0x00000000000000000000000074f64bebb1a9615fc7c2ead9c894b6ffd1803582\",\n      \"topic2\": \"0x000000000000000000000000e496601436da37a045d8e88bbd6b2c2e17d8fe33\",\n      \"topic3\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  ],\n  \"txs\": [],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": [\n    {\n      \"operator\": null,\n      \"from\": \"0x74f64bebb1a9615fc7c2ead9c894b6ffd1803582\",\n      \"to\": \"0xe496601436da37a045d8e88bbd6b2c2e17d8fe33\",\n      \"tokenId\": \"0\",\n      \"amount\": \"1\",\n      \"transactionHash\": \"0x5ecd6b57593ab2f4f3e39fbb3318a3933e2cf9fdcf5b7ca671fb0fc2ce9dc4b5\",\n      \"logIndex\": \"72\",\n      \"contract\": \"0x26b4e79bca1a550ab26a8e533be97c40973b2671\",\n      \"tokenName\": \"Test\",\n      \"tokenSymbol\": \"SYMBOL\",\n      \"tokenContractType\": \"ERC721\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating getWalletNfts Express Endpoint with Moralis (JavaScript)\nDESCRIPTION: Adds an asynchronous GET endpoint `/getWalletNfts` to the Express application in `handler.js`. This endpoint utilizes the Moralis SDK's `EvmApi.nft.getWalletNFTs` method to retrieve a list of NFTs owned by a specific wallet address on a given chain. The `address` and `chain` parameters are read from the request body, and the result limit is set to 10. It returns the NFT data as a JSON response or a 500 error with a message upon failure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/getWalletNfts\", async (req, res, next) => {\n  try {\n    // Get wallet NFTs\n    const nfts = await Moralis.EvmApi.nft.getWalletNFTs({\n      address: req.body.address,\n      chain: req.body.chain,\n      limit: 10,\n    });\n\n    res.status(200);\n    res.json(nfts);\n  } catch (error) {\n    // Handle errors\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Top NFT Collections with Moralis SDK (Python)\nDESCRIPTION: This Python snippet demonstrates using the `moralis` SDK to fetch the top NFT collections by trading volume. It imports the `evm_api` module, sets the API key, and calls the `get_hottest_nft_collections_by_trading_volume` function from `evm_api.market_data`. The resulting collection data is then printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-trading-volume.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\n\nresult = evm_api.market_data.get_hottest_nft_collections_by_trading_volume(\n  api_key=api_key,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Transfers by Wallet with Moralis API - Python\nDESCRIPTION: This Python script utilizes the 'moralis' package to fetch all NFT transfers associated with a specified wallet address on a selected blockchain (e.g., 'eth' for Ethereum) using the Wallet API. You supply the API key, and pass both the address and chain in the 'params' dictionary. The method returns and prints a result object, and depends on having the Moralis package installed via pip.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-NFT-transfers-by-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.nft.get_wallet_nft_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Name using TypeScript\nDESCRIPTION: TypeScript implementation for reverse resolving an ENS name from an Ethereum address using Moralis API. Requires Moralis and common-evm-utils packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-name.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const response = await Moralis.EvmApi.resolve.resolveAddress({\n    address,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis and Express with API Key - JavaScript\nDESCRIPTION: Imports Moralis and initializes it with a Web3 API key. Sets up the Express server and configures settings for API key, address, and EVM chain. Contains a 'startServer' async function to ensure Moralis is started before Express begins listening. This forms the base for authenticated blockchain API calls.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\n// Import Moralis\nconst Moralis = require(\"moralis\").default;\n// Import the EvmChain dataType\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst app = express();\nconst port = 3000;\n\n// Add a variable for the api key, address and chain\nconst MORALIS_API_KEY = \"replace_me\";\nconst address = \"replace_me\";\nconst chain = EvmChain.ETHEREUM;\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World!\");\n});\n\n// Add this a startServer function that initialises Moralis\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: \"xxx\",\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\n// Call startServer()\nstartServer();\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Profit and Loss (PnL) with Moralis API in Python\nDESCRIPTION: This function, `get_wallet_pnl`, fetches profitability (PnL) statistics for the agent's wallet assets using the Moralis API and the Base blockchain. It returns structured profit, investment, and token details for assets held, or an error message if retrieval fails. It relies on the Moralis API key, the agent wallet context, and the `requests` module.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef get_wallet_pnl() -> str:\\n    \"\"\"\\n    Retrieve PnL information for the agent's wallet assets.\\n\\n    Returns:\\n        str: Wallet PnL data or an error message if unsuccessful\\n    \"\"\"\\n    # Get the agent's wallet address\\n    address_id = agent_wallet.default_address.address_id\\n\\n    url = f\"https://deep-index.moralis.io/api/v2.2/wallets/{address_id}/profitability\"\\n    headers = {\\n        \"accept\": \"application/json\",\\n        \"X-API-Key\": MORALIS_API_KEY\\n    }\\n    params = {\\n        \"chain\": \"base\"\\n    }\\n\\n    try:\\n        response = requests.get(url, headers=headers, params=params)\\n        response.raise_for_status()\\n        pnl_data = response.json().get(\"result\", [])\\n\\n        # Format the output\\n        if pnl_data:\\n            pnl_info = \"\\n\".join(\\n                [\\n                    f\"Token: {entry['name']} ({entry['symbol']})\\\\n\"\\n                    f\"Total Invested: ${entry['total_usd_invested']}\\\\n\"\\n                    f\"Realized Profit: ${entry['realized_profit_usd']}\\\\n\"\\n                    f\"Avg Buy Price: ${entry['avg_buy_price_usd']}\\\\n\"\\n                    f\"Total Tokens Bought: {entry['total_tokens_bought']}\\\\n\"\\n                    f\"Logo: {entry['logo']}\\\\n\"\\n                    for entry in pnl_data\\n                ]\\n            )\\n            return f\"Wallet PnL for {address_id}:\\n{pnl_info}\"\\n        else:\\n            return \"No PnL data found for the wallet.\"\\n\\n    except requests.exceptions.RequestException as e:\\n        return f\"Error fetching wallet PnL: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with WagmiConfig and SessionProvider - NextJS - JavaScript\nDESCRIPTION: Wraps the main NextJS App component with WagmiConfig and SessionProvider to provide wallet connectivity and authentication context throughout the app. Dependencies include wagmi, next-auth, and proper chain/provider setup. The WagmiConfig injects EVM support, while SessionProvider manages Next-Auth user session state.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createConfig, configureChains, WagmiConfig } from \"wagmi\";\\nimport { publicProvider } from \"wagmi/providers/public\";\\nimport { SessionProvider } from \"next-auth/react\";\\nimport { mainnet } from \"wagmi/chains\";\\n\\nconst { publicClient, webSocketPublicClient } = configureChains(\\n  [mainnet],\\n  [publicProvider()]\\n);\\n\\nconst config = createConfig({\\n  autoConnect: true,\\n  publicClient,\\n  webSocketPublicClient,\\n});\\n\\nfunction MyApp({ Component, pageProps }) {\\n  return (\\n    <WagmiConfig config={config}>\\n      <SessionProvider session={pageProps.session} refetchInterval={0}>\\n        <Component {...pageProps} />\\n      </SessionProvider>\\n    </WagmiConfig>\\n  );\\n}\\n\\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Lowest Price with Moralis API in JavaScript\nDESCRIPTION: This snippet shows how to use the Moralis EvmApi to get the lowest price of an NFT from a specific marketplace. It requires the NFT address, blockchain, and marketplace name as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/06-NFT Marketdata/how-to-get-lowest-price-of-nft-by-marketplace.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const marketplace = \"opensea\";\n\n  const response = await Moralis.EvmApi.nft.getNFTLowestPrice({\n    address,\n    chain,\n    marketplace,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference using the ApiReference Component in React\nDESCRIPTION: Utilizes the imported `ApiReference` React component to display API documentation for getting a specific EVM stream. It passes configuration details for the 'GetStream' endpoint (located within `config.streams`) as props to the component using the spread syntax, enabling dynamic rendering of the specific API reference section.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/get-stream.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.streams.GetStream} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverless Project for Express API\nDESCRIPTION: Command to start a new Serverless project with an Express API template.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nserverless\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance with Moralis SDK (JavaScript)\nDESCRIPTION: Uses the Moralis JavaScript SDK to fetch the native balance of an EVM address. Requires `moralis` and `@moralisweb3/common-evm-utils` packages, Moralis initialization with an API key, the target wallet `address`, and the `chain` identifier (e.g., `EvmChain.ETHEREUM`). Outputs the balance information as a JSON object to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-balance-of-a-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async() => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = '0x26fcbd3afebbe28d0a8684f790c48368d21665b5';\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n\tconsole.log(response.toJSON());\n}\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Uniswap V3 Pair Address using Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to retrieve a Uniswap V3 pair address using the Moralis SDK. It starts by initializing Moralis with an API key. It then defines the chain (Ethereum), specifies the addresses for WETH (token0) and LINK (token1), and invokes `Moralis.EvmApi.defi.getPairAddress`, passing the token addresses, chain, and 'uniswapv3' as the exchange. The response containing the pair details is logged in JSON format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-uniswap-v3-pair-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"uniswapv3\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Logic with Wagmi and Moralis\nDESCRIPTION: Defines the `handleAuth` function within a `useEffect` hook in `pages/signin.jsx`. This logic triggers when a user's wallet is connected via RainbowKit (`isConnected` from `useAccount`) but the user is not yet authenticated (`status === \"unauthenticated\"` from `useSession`). It uses `@moralisweb3/next`'s `useAuthRequestChallengeEvm` hook to request an authentication challenge based on the connected address and chain ID, `wagmi`'s `useSignMessage` hook to prompt the user to sign the challenge, and `next-auth`'s `signIn` function to authenticate the user with the Moralis backend using the signed message. Upon successful authentication, it redirects the user to the '/user' page without a full page refresh using NextJS router's `push` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n...\n  useEffect(() => {\n    const handleAuth = async () => {\n      const { message } = await requestChallengeAsync({\n        address: address,\n        chainId: chain.id,\n      });\n\n      const signature = await signMessageAsync({ message });\n\n      // redirect user after success authentication to '/user' page\n      const { url } = await signIn(\"moralis-auth\", {\n        message,\n        signature,\n        redirect: false,\n        callbackUrl: \"/user\",\n      });\n      /**\n       * instead of using signIn(..., redirect: \"/user\")\n       * we get the url from callback and push it to the router to avoid page refreshing\n       */\n      push(url);\n    };\n    if (status === \"unauthenticated\" && isConnected) {\n      handleAuth();\n    }\n  }, [status, isConnected]);\n...\n```\n\n----------------------------------------\n\nTITLE: Fetching Uniswap V2 Pair Reserves using Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to fetch the reserves for a specific Uniswap V2 pair address on the Ethereum network using the Moralis SDK. It imports necessary modules, initializes the Moralis SDK with an API key, defines the `pairAddress` and `chain` (Ethereum), calls the asynchronous `Moralis.EvmApi.defi.getPairReserves` function, and logs the JSON response containing the reserves.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-reserves.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Minting NFT on Solana Blockchain using Metaplex\nDESCRIPTION: TypeScript code to mint an NFT on the Solana blockchain using the Metaplex SDK with the uploaded metadata URI.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-minter.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await metaplex\n  .nfts()\n  .create({\n    uri,\n    name,\n    sellerFeeBasisPoints: 500, // represents the royality fee for the NFT\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express App with Moralis in Lambda Handler\nDESCRIPTION: JavaScript code to set up an Express app with Moralis integration in the Lambda handler file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst bodyParser = require(\"body-parser\");\nconst Moralis = require(\"moralis\").default;\n\napp.use(bodyParser.json());\napp.use(bodyParser.raw());\napp.use(bodyParser.text());\napp.use(bodyParser.urlencoded({ extended: true }));\n\nconst startMoralis = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n};\n\nstartMoralis();\n```\n\n----------------------------------------\n\nTITLE: Creating getNativeBalance Express Endpoint with Moralis (JavaScript)\nDESCRIPTION: Implements an asynchronous GET endpoint `/getNativeBalance` for the Express application in `handler.js`. It uses the Moralis SDK's `EvmApi.balance.getNativeBalance` method to fetch the native token balance for a specified wallet address and chain, which are expected in the request body (`req.body.address`, `req.body.chain`). The endpoint returns the balance formatted in Ether or a 500 error with a message if an exception occurs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/getNativeBalance\", async (req, res, next) => {\n  try {\n    // Get native balance\n    const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n      address: req.body.address,\n      chain: req.body.chain,\n    });\n\n    // Format the native balance formatted in ether via the .ether getter\n    const nativeBalanceEther = nativeBalance.result.balance.ether;\n\n    res.status(200);\n    res.send(nativeBalanceEther);\n  } catch (error) {\n    // Handle errors\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming ABI Output Parameter for ERC20 Triggers - JavaScript\nDESCRIPTION: Shows how to rename the ABI output of the 'balanceOf' function to 'fromBalance' in JavaScript. Ensures that webhook trigger results will use 'fromBalance' as the key, making outputs more descriptive. No external dependencies, just standard JavaScript object syntax for ABI definitions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    name: \"fromBalance\",\n    type: \"uint256\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Internal Transactions of an Address with TypeScript\nDESCRIPTION: TypeScript code example showing how to initialize Moralis and retrieve internal transactions for a specific wallet address using the getWalletTransactions endpoint with proper type definitions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-internal-transactions-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\n// Replace \"YOUR_API_KEY\" with your actual Moralis API key\nconst apiKey = \"YOUR_API_KEY\";\n\n// Specify the wallet address for which transactions are to be retrieved\nconst walletAddress = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n// Specify the blockchain (e.g., Ethereum)\nconst chain: EvmChain = EvmChain.ETHEREUM;\n\n// Define parameters, including the \"internal_transactions\" option\nconst params = {\n  address: walletAddress,\n  chain,\n  include: \"internal_transactions\",\n};\n\n// Initialize Moralis with your API key\nawait Moralis.start({\n  apiKey,\n  // ...and any other configuration\n});\n\n// Use the Moralis EvmApi to get wallet transactions with internal transactions included\nconst response = await Moralis.EvmApi.transaction.getWalletTransactions(params);\n\n// Print the response in JSON format\nconsole.log(response.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet ERC-20 Tokens with Moralis API in Python\nDESCRIPTION: The `get_wallet_tokens` function queries the Moralis API for all ERC-20 tokens held by the agent's wallet, dynamically selecting the correct network. It returns a formatted string with token names, balances, contract addresses, verification status, and USD prices, or an error message. Requires the Moralis API key and `agent_wallet` context, and is dependent on the `requests` library.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_wallet_tokens() -> str:\\n    \"\"\"\\n    Fetch the list of ERC-20 tokens held by the agent's wallet using the Moralis API.\\n\\n    Returns:\\n        str: A message with the list of tokens and balances or an error message if unsuccessful\\n    \"\"\"\\n    # Get the agent's wallet address\\n    address_id = agent_wallet.default_address.address_id\\n\\n    # Determine the network dynamically based on the agent's current network ID\\n    is_mainnet = agent_wallet.network_id in [\"base\", \"base-mainnet\"]\\n    chain = \"base\" if is_mainnet else \"base sepolia\"\\n\\n    # API endpoint and headers\\n    url = f\"https://deep-index.moralis.io/api/v2.2/wallets/{address_id}/tokens\"\\n    headers = {\\n        \"accept\": \"application/json\",\\n        \"X-API-Key\": MORALIS_API_KEY\\n    }\\n    params = {\\n        \"chain\": chain\\n    }\\n\\n    # Fetch wallet token balances\\n    try:\\n        response = requests.get(url, headers=headers, params=params)\\n        response.raise_for_status()\\n        tokens = response.json().get(\"result\", [])\\n\\n        # Format the output\\n        if tokens:\\n            token_list = \"\\n\".join(\\n                [\\n                    f\"Token: {token['name']} ({token['symbol']})\\\\n\"\\n                    f\"Balance: {token['balance_formatted']} {token['symbol']}\\\\n\"\\n                    f\"Contract Address: {token['token_address']}\\\\n\"\\n                    f\"Verified: {'Yes' if token['verified_contract'] else 'No'}\\\\n\"\\n                    f\"Price (USD): {token['usd_price'] or 'N/A'}\\\\n\"\\n                    for token in tokens\\n                ]\\n            )\\n            return f\"Tokens held by {address_id}:\\n{token_list}\"\\n        else:\\n            return f\"No tokens found for wallet {address_id}.\"\\n\\n    except requests.exceptions.RequestException as e:\\n        return f\"Error fetching wallet tokens: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Moralis using Custom EVM Provider (TypeScript, EVM)\nDESCRIPTION: Shows how to use a custom EVM provider (other than the default MetaMask) by passing a provider to signInWithMoralis. Requires @moralisweb3/client-firebase-evm-auth and @ethersproject/providers. Input: moralisAuth and custom provider instance. Output: authenticates with the specified provider.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signInWithMoralis } from '@moralisweb3/client-firebase-evm-auth';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\nconst provider: JsonRpcProvider = /* ... */\n\nawait signInWithMoralis(moralisAuth, {\n  provider\n});\n```\n\n----------------------------------------\n\nTITLE: Protecting User Profile Route and Displaying Authenticated Session with Next-Auth (JavaScript)\nDESCRIPTION: This snippet defines a Next.js page component that displays the currently-authenticated user\\'s session data or redirects unauthenticated users to the sign-in page. It uses next-auth\\'s getSession on the server-side for access control and supports user sign-out with redirection. The main dependencies are next-auth/react; props include the user session object, and the route is protected via getServerSideProps-based authentication flow.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getSession, signOut } from \\\"next-auth/react\\\";\n\n// gets a prop from getServerSideProps\nfunction User({ user }) {\n  return (\n    <div>\n      <h4>User session:</h4>\n      <pre>{JSON.stringify(user, null, 2)}</pre>\n      <button onClick={() => signOut({ redirect: \\\"/signin\\\" })}>Sign out</button>\n    </div>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  const session = await getSession(context);\n\n  // redirect if not authenticated\n  if (!session) {\n    return {\n      redirect: {\n        destination: \\\"/signin\\\",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: { user: session.user },\n  };\n}\n\nexport default User;\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Collection Transfers using Moralis NFT API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize Moralis with an API key and use the EvmApi.nft.getNFTContractTransfers endpoint to retrieve all transfer events for a given NFT collection address on Ethereum. Dependencies include the 'moralis' npm package and '@moralisweb3/common-evm-utils'. Parameters required are the API key, NFT contract address, and blockchain chain. The script runs asynchronously, fetches the transfer data, and logs it as JSON. The output is a structured list of transfer events, with the possibility of paginated results based on large collections.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTContractTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs with Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve all NFTs owned by a specific Ethereum address using the Moralis SDK. It requires initializing the SDK with an API key, specifying the target wallet address and the blockchain chain (Ethereum). The `getWalletNFTs` function is called asynchronously, and the result is logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Token Metadata with Moralis Token API (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to import and start Moralis, set up required parameters, and fetch ERC20 token metadata for multiple addresses on Ethereum. It leverages the 'moralis' library and the '@moralisweb3/common-evm-utils' package, requiring a Moralis API key. Addresses and chain parameters are provided explicitly, with responses logged as JSON. TypeScript compilation and Moralis setup are prerequisites.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-token-metadata-by-token-addresses.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const addresses = [\n    \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n  ];\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenMetadata({\n    addresses,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing React Hooks for State Management - JavaScript\nDESCRIPTION: Imports useState, useEffect, and useRef from the React library, enabling functional components to manage state, side effects, and mutable references. This is a standard import pattern in React projects and is necessary for the other snippets that utilize these hooks. No parameters or outputs are present; simply enables access to React hooks in the file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Balance for Wallet Address using Moralis SDK\nDESCRIPTION: This snippet demonstrates how to use the Moralis SDK to fetch the NFT balance for a given wallet address on a specified blockchain. It requires the user's wallet address and the target blockchain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"USER_WALLET_ADDRESS\",\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Approvals with cURL\nDESCRIPTION: This cURL command demonstrates how to query the Token Approvals API for a specific wallet address on the Ethereum chain. It requires an API key to be included in the request header for authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2024-09-13 token-approvals-api.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url 'https://deep-index.moralis.io/api/v2.2/wallets/0xcB1C1FdE09f811B294172696404e88E658659905/approvals?chain=eth' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: your-api-key-here'\n```\n\n----------------------------------------\n\nTITLE: Returning Only Required Block Data from a Firebase Function in TypeScript\nDESCRIPTION: This snippet defines a Firebase Cloud Function that only returns the timestamp of a specific block by extracting it from the API response and converting it to ISO format, instead of sending the complete block object. It expects blockNumberOrHash as input, returns a string timestamp. It uses Moralis.EvmApi.block.getBlock and is designed for tighter data minimization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetBlockTimestampData {\n  blockNumberOrHash: string;\n}\n\nexport const getBlockTimestamp = functions.https.onCall(\n  async (data: GetBlockTimestampData) => {\n    const response = await Moralis.EvmApi.block.getBlock({\n      chain: \\\"0x1\\\",\n      blockNumberOrHash: data.blockNumberOrHash,\n    });\n    return response.result.result.timestamp.toISOString();\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor Pagination for NFT Owners with Python and Moralis API\nDESCRIPTION: This Python script demonstrates how to use cursor pagination to retrieve NFT owners from the Polygon blockchain using the Moralis API. It makes multiple API calls, using the cursor to fetch subsequent pages of results.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/03-pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport time\n\ndef get_nft_owners(offset, cursor):\n    print(\"offset\", offset)\n    url = 'https://deep-index.moralis.io/api/v2/nft/<address_here>/owners?chain=polygon&format=decimal'\n    if cursor:\n      url = url + \"&cursor=%s\" % cursor\n\n    print(\"api_url\", url)\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-API-Key\": \"API_KEY_HERE\"\n    }\n    statusResponse = requests.request(\"GET\", url, headers=headers)\n    data = statusResponse.json()\n    print(\"HTTP headers:\", statusResponse.headers)\n    try:\n        print(\"nr results\", len(data['result']))\n    except:\n        print(repr(data))\n        print(\"exiting\")\n        raise SystemExit\n\n    cursor = data['cursor']\n    print(data['page'], data['total'])\n    return cursor\n\n\ncursor = None\nfor j in range(0, 10):\n    cursor = get_nft_owners(j*500, cursor)\n    print()\n    time.sleep(1.1)\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL NFT Metadata using Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the Moralis SDK to retrieve metadata for an SPL NFT. It imports Moralis and `SolNetwork`, initializes the SDK using an API key, specifies the NFT's address and the Solana network (MAINNET), and calls `Moralis.SolApi.nft.getNFTMetadata`. The fetched metadata is then printed to the console as JSON. It requires the 'moralis' and '@moralisweb3/common-sol-utils' packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/nft-api/how-to-get-spl-nft-metadata.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"FVW9KoJxXzP2cCfhLfFC7hQKBZKnaoPkyZJQgvM9moWV\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.nft.getNFTMetadata({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Getting ERC20 Token Metadata in TypeScript\nDESCRIPTION: TypeScript implementation for fetching ERC20 token metadata using Moralis SDK. Uses type-safe code with the same functionality as the JavaScript version.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-token-metadata-by-token-addresses.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const addresses = [\n    \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n  ];\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenMetadata({\n    addresses,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: WAGMI Imports for Contract Interaction\nDESCRIPTION: Import statements for WAGMI hooks and contract ABI to enable blockchain interactions\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNetwork, usePrepareContractWrite, useContractWrite } from 'wagmi';\nimport abi from '../../../../../contract/abi.json';\n```\n\n----------------------------------------\n\nTITLE: Fetching Current NFT Floor Price by Contract using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch the current floor price for a specific NFT collection using the Moralis SDK. It initializes Moralis with an API key and calls `Moralis.EvmApi.nft.getNFTFloorPriceByContract`, passing the chain ID ('0x1' for Ethereum) and the NFT contract address. The response, containing floor price details, is logged to the console. Requires Moralis SDK and a valid API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/07-NFT Floor Prices/how-to-get-nft-floor-prices.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport Moralis from \"moralis\";\n\ntry {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const response = await Moralis.EvmApi.nft.getNFTFloorPriceByContract({\n    chain: \"0x1\", // Ethereum Mainnet\n    address: \"0x524cab2ec69124574082676e6f654a18df49a048\", // NFT Worlds Contract\n  });\n\n  console.log(response.raw);\n} catch (e) {\n  console.error(e);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection NFTs with Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to retrieve all NFTs from a specific contract using the Moralis SDK. It initializes Moralis, defines the target contract address and chain, uses `Moralis.EvmApi.nft.getContractNFTs` to fetch the data, and logs the result as JSON. Type safety is provided by TypeScript. Requires `moralis` and `@moralisweb3/common-evm-utils` packages and a valid Moralis API Key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getContractNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream to Monitor All NFT Transfers with Moralis Streams API\nDESCRIPTION: This code demonstrates how to create a stream that listens to all NFT transfers across a blockchain. It defines the NFT transfer ABI with the transfer event signature, configures stream options including the Ethereum chain, and creates the stream using Moralis.Streams.add(). This implementation requires a Business or Enterprise plan as it uses the 'allAddresses' feature.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-listen-all-nft-transfers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst NFT_transfer_ABI = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"tokenId\", \"type\": \"uint256\" },\n  ],\n  \"name\": \"transfer\",\n  \"type\": \"event\",\n}]; // valid abi of the event\n\nconst options = {\n  chains: [EvmChain.ETHEREUM], // list of blockchains to monitor\n  description: \"monitor all NFT transfers\", // your description\n  tag: \"NFT_transfers\", // give it a tag\n  abi: NFT_transfer_ABI,\n  includeContractLogs: true,\n  allAddresses: true,\n  topic0: [\"transfer(address,address,uint256)\"], // topic of the event\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\", // webhook url to receive events,\n};\n\nconst stream = await Moralis.Streams.add(options);\n```\n\n----------------------------------------\n\nTITLE: Configuring React App API Endpoint - Shell\nDESCRIPTION: This shell snippet provides an example environment variable to be set in a .env file for your React project. The REACT_APP_SERVER_URL variable should point to your backend server that manages authentication endpoints. The file must be located at the project root for Create React App or similar frameworks to pick it up.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nREACT_APP_SERVER_URL=http://localhost:4000\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK with a Custom Default EVM Chain in TypeScript\nDESCRIPTION: Shows how to initialize the Moralis SDK and set a custom default EVM chain (Polygon) via the 'defaultEvmApiChain' configuration option. Requires Moralis and @moralisweb3/common-evm-utils packages. 'apiKey' is required for authentication. After setting, API methods use the specified default chain unless overridden. The snippet also includes querying block information using the current default chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/cross-chain-requests.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  defaultEvmApiChain: EvmChain.POLYGON,\n});\n\nMoralis.EvmApi.block.getBlock({\n  blockNumberOrHash: \"33000000\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Balance with Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to retrieve the SPL token balance for a specified Solana wallet address ('BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen') on the MAINNET. It requires initializing the Moralis SDK with an API key and uses the `Moralis.SolApi.account.getSPL` method, logging the JSON response containing token details. Dependencies include `moralis` and `@moralisweb3/common-sol-utils`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/how-to-get-spl-token-balance-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getSPL({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Event Stream for Contract Factory with Moralis\nDESCRIPTION: Sets up a stream to monitor factory events across all addresses on the Ethereum blockchain. Configures webhook notifications for contract events using Moralis Streams API. Requires a valid ABI and webhook URL for implementation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-listen-all-events-from-a-contract-factory.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Contract_Factory_ABI = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"contract\", \"type\": \"address\" },\n  ],\n  \"name\": \"factoryEvent\",\n  \"type\": \"event\",\n}];\n\nconst options = {\n  chains: [EvmChain.ETHEREUM],\n  description: \"monitor a contract factory\",\n  tag: \"contract_Factory\",\n  abi: Contract_Factory_ABI,\n  includeContractLogs: true,\n  allAddresses: true,\n  topic0: [\"factoryEvent(address,address,address)\"],\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n};\n\nconst stream = await Moralis.Streams.add(options);\n```\n\n----------------------------------------\n\nTITLE: Listening to Smart Contract Events with Moralis Streams API (Python)\nDESCRIPTION: This Python code utilizes the Moralis SDK (`moralis.streams`) to configure a stream for monitoring ERC20 'Transfer' events from the USDT contract (`0xdA...`) on Ethereum (`0x1`). It defines the event ABI (`ERC20_transfer_ABI`), sets up the stream parameters in a dictionary (`create_stream_body`) including the ABI and `topic0`, creates the stream using `streams.evm_streams.create_stream`, gets the stream ID (`result.id`), and adds the USDT contract address using `streams.evm_streams.add_address_to_stream`. A Moralis API key (`YOUR_API_KEY`) and a webhook URL (`YOUR_WEBHOOK_URL`) are required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\nERC20_transfer_ABI = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" },\n  ],\n  \"name\": \"Transfer\",\n  \"type\": \"event\",\n}]\n\ncreate_stream_body = {\n  \"description\": \"monitor USDT transfers\",\n  \"tag\": \"USDT\",\n  \"webhook_url\": \"https://YOUR_WEBHOOK_URL\",\n  \"include_contract_logs\": True,\n  \"chain_ids\": [\n    \"0x1\"\n  ],\n  \"abi\": ERC20_transfer_ABI,\n  \"topic0\": [\"Transfer(address,address,uint256)\"]\n}\n\nresult = streams.evm_streams.create_stream(\n  api_key=api_key,\n  body=create_stream_body,\n)\n\nadd_address_body = {\n  \"address\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"\n}\n\nparams = {\n  \"id\": result.id\n}\n\n# Now we attach USDT address to the stream\nstreams.evm_streams.add_address_to_stream(\n  api_key=api_key,\n  body=add_address_body,\n  params=params,\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering an Interactive Moralis API Reference Block in React (JavaScript/JSX)\nDESCRIPTION: This snippet renders the ApiReference React component, providing interactive documentation for the 'getWalletTokenBalancesPrice' endpoint from the config object. This pattern allows embedding live API reference blocks within a documentation page. The key parameter is 'config.token.getWalletTokenBalancesPrice', which supplies endpoint-specific metadata and example requests. The output is a fully interactive API reference widget, and correct rendering requires all module dependencies be resolvable in the project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/01-Get Token Balances/get-wallet-token-balances-price.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.token.getWalletTokenBalancesPrice} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Verbose Wallet Transactions with Moralis SDK (JavaScript)\nDESCRIPTION: This script initializes the Moralis SDK for Node.js, sets the target wallet address and Ethereum chain, and uses `Moralis.EvmApi.transaction.getWalletTransactionsVerbose` to retrieve detailed transaction history. It requires the `moralis` and `@moralisweb3/common-evm-utils` packages and a valid Moralis API key. The result is logged as a JSON object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-transaction-verbose.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response =\n    await Moralis.EvmApi.transaction.getWalletTransactionsVerbose({\n      address,\n      chain,\n    });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Interchain Token Deployment using Wagmi\nDESCRIPTION: This snippet showcases the implementation of remote Interchain Token deployment within a React component (`DeployTokenRemotely`). It utilizes the `useContractWrite` hook (likely from wagmi) to prepare a transaction targeting the `deployRemoteInterchainToken` function on the `InterchainTokenFactory` contract. It passes necessary arguments like `sourceChain`, `saltValue`, `address`, `destinationChain`, and the estimated `gasAmount` (converted to `ethers.BigNumber`) as both an argument and transaction value override. The `useWaitForTransaction` hook monitors the transaction status based on the hash returned by `useContractWrite`. A `handleDeployToken` function triggers the transaction (`write()`) and provides user feedback using a `toast` notification system.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst DeployTokenRemotely = () = >{\n  //...\n  // Deploy a token remotely\n  const {\n    data: deployTokenRemotely,\n    write\n  } = useContractWrite({\n    address: interchainTokenFactoryContractAddress,\n    abi: interchainTokenFactoryContractABI,\n    functionName: 'deployRemoteInterchainToken',\n    args: [sourceChain, saltValue, address, destinationChain, ethers.BigNumber.from(gasAmount.toString())],\n    overrides: {\n      value: ethers.BigNumber.from(gasAmount.toString()),\n    },\n    mode: 'recklesslyUnprepared',\n  });\n  const {\n    data: useWaitForDeployTokenRemotelyTransactionData,\n    isSuccess,\n    isError,\n    isLoading,\n  } = useWaitForTransaction({\n    // Calling a hook to wait for the transaction to be mined\n    hash: deployTokenRemotely ? .hash,\n  });\n  const handleDeployToken = async() = >{\n    if (write) {\n      write();\n      toast({\n        title: 'Transaction Submitted',\n        description: 'Please confirm the transaction in MetaMask.',\n        status: 'info',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isError) {\n      toast({\n        title: 'Transaction Error',\n        description: 'There was an error submitting your transaction.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n  return (\n  //..\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating CryptoPunk Monitor Stream in JavaScript\nDESCRIPTION: JavaScript implementation for creating a Moralis stream to monitor specific CryptoPunk NFT transfers. It sets up event monitoring for token IDs 1000-1002 using the PunkTransfer event and includes configuration for webhook notifications.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-monitor-specific-nfts.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst punkTransferAbi = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"from\", type: \"address\" },\n      { indexed: true, name: \"to\", type: \"address\" },\n      { indexed: false, name: \"punkIndex\", type: \"uint256\" },\n    ],\n    name: \"PunkTransfer\",\n    type: \"event\",\n  },\n];\n\nconst options = {\n  chains: [EvmChain.ETHEREUM],\n  description: \"1000 to 1002 cryptopunks\",\n  tag: \"cryptoPunks\",\n  abi: punkTransferAbi,\n  includeContractLogs: true,\n  topic0: [\"PunkTransfer(address,address,uint256)\"],\n  advancedOptions: [\n    {\n      topic0: \"PunkTransfer(address,address,uint256)\",\n      filter: { in: [\"punkIndex\", [\"1000\", \"1001\", \"1002\"]] },\n      includeNativeTxs: true,\n    },\n  ],\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n};\n\nconst stream = await Moralis.Streams.add(options);\n\nconst { id } = stream.toJSON();\n\nawait Moralis.Streams.addAddress({\n  id,\n  address: \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n});\n```\n\n----------------------------------------\n\nTITLE: Get ERC20 Transfers using JavaScript\nDESCRIPTION: JavaScript implementation to fetch ERC20 token transfers for a specific wallet address using Moralis API. Requires Moralis SDK and common-evm-utils package. Takes wallet address and chain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-erc20-transfers-by-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Smart Account NFT Transfers in JavaScript using Moralis SDK\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to fetch NFT transfer history for a specified smart contract address on the Ethereum network. It initializes the Moralis SDK with an API key, specifies the target address and chain, calls the `Moralis.EvmApi.nft.getWalletNFTTransfers` method, and logs the resulting JSON response. Requires `moralis` and `@moralisweb3/common-evm-utils` libraries.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-NFT-transfers-of-smart-account.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import necessary libraries and modules\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n// Define an asynchronous function to run the application\nconst runApp = async () => {\n  // Initialize Moralis with your API key and configuration\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...other configuration options\n  });\n\n  // Define the Ethereum address you want to query NFT transfers for\n  const address = \"0x350845DD3f03F1355233a3A7CEBC24b5aAD05eC5\";\n\n  // Specify the Ethereum chain (in this case, ETHEREUM)\n  const chain = EvmChain.ETHEREUM;\n\n  // Retrieve NFT transfer data using Moralis' EvmApi\n  const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n    address,\n    chain,\n  });\n\n  // Output the JSON response to the console\n  console.log(response.toJSON());\n};\n\n// Execute the runApp function\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Metadata by Symbols using Moralis SDK in Python\nDESCRIPTION: This Python script demonstrates fetching ERC20 metadata by symbols using the Moralis EVM API client. It sets the API key, defines parameters including a list of symbols (`['UNI', 'AAVE', 'LINK']`) and the chain (`'eth'`). It then calls `evm_api.token.get_token_metadata_by_symbol` with the API key and parameters, and prints the resulting metadata. Requires the `moralis` Python package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-symbols.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"symbols\": ['UNI', 'AAVE', 'LINK'],\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_token_metadata_by_symbol(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Getting All Streams in Moralis\nDESCRIPTION: Method to retrieve a list of all streams with optional limit parameter to control the number of results returned.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/stream-management.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst streams = await Moralis.Streams.getAll({\n  limit: 100, // limit the number of streams to return\n});\n```\n\n----------------------------------------\n\nTITLE: Example Full Solana NFT Metadata Response Structure in JSON\nDESCRIPTION: Provides a comprehensive example of a JSON response containing full metadata for a Solana NFT. It includes top-level fields like address, mint, standard, name, symbol, description, image URLs, metadata URL, supply, along with nested objects for Metaplex details, attributes, contract, collection, creation info, creators, and properties. This structure is typical when requesting full metadata.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/nft-api-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"FVzM6rUA1SigPxh6e3iQ8dAPjQNf2guap3Xcdj8Q6R2H\",\n  \"mint\": \"FVzM6rUA1SigPxh6e3iQ8dAPjQNf2guap3Xcdj8Q6R2H\",\n  \"standard\": \"metaplex\",\n  \"name\": \"Mad Lads #7256\",\n  \"symbol\": \"MAD\",\n  \"description\": \"Fock it.\",\n  \"imageOriginalUrl\": \"https://madlads.s3.us-west-2.amazonaws.com/images/7256.png\",\n  \"externalUrl\": \"https://madlads.com\",\n  \"metadataOriginalUrl\": \"https://madlads.s3.us-west-2.amazonaws.com/json/7256.json\",\n  \"totalSupply\": \"1\",\n  \"metaplex\": {\n    \"metadataUri\": \"https://madlads.s3.us-west-2.amazonaws.com/json/7256.json\",\n    \"updateAuthority\": \"2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW\",\n    \"sellerFeeBasisPoints\": 420,\n    \"primarySaleHappened\": 1,\n    \"isMutable\": true,\n    \"masterEdition\": false\n  },\n  \"attributes\": [...],\n  \"contract\": {...},\n  \"collection\": {...},\n  \"firstCreated\": {...},\n  \"creators\": [...],\n  \"properties\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Transactions using JavaScript/Node.js\nDESCRIPTION: Example showing how to use Moralis API to get all transactions for a specific wallet address on Ethereum chain using JavaScript. Requires Moralis API key and @moralisweb3/common-evm-utils package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance with JavaScript\nDESCRIPTION: JavaScript implementation using Moralis SDK to get native balance of an Ethereum address. Requires Moralis and common-evm-utils packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-balance-of-a-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = '0x26fcbd3afebbe28d0a8684f790c48368d21665b5';\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n\tconsole.log(response.toJSON());\n}\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Frontend Firebase Integration\nDESCRIPTION: JavaScript code for frontend implementation to initialize Firebase and call Cloud Functions\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = firebase.functions();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getBalance() {\n  const response = await functions.httpsCallable(\"getBalance\")({\n    address: \"0xf977814e90da44bfa03b6295a0616a897441acec\",\n  });\n  alert(JSON.stringify(response.data));\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"load\", function () {\n  getBalance();\n});\n```\n\n----------------------------------------\n\nTITLE: Reverse ENS Resolution in JavaScript\nDESCRIPTION: JavaScript implementation for resolving ENS names from Ethereum addresses using Moralis API. Requires Moralis and common-evm-utils packages. Returns the ENS name associated with the provided address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-name.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const response = await Moralis.EvmApi.resolve.resolveAddress({\n    address,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Options for Moralis Stream via WebUI (JSON)\nDESCRIPTION: Provides the JSON configuration for the 'Advanced Options' field when creating a Moralis Stream via the WebUI. This configuration filters incoming 'NameRegistered' events based on the event topic hash, a specific owner address, and a minimum cost of 1 ETH (1e18 wei). This JSON snippet is intended to be pasted directly into the corresponding field in the Moralis WebUI.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-monitor-ens-domain-registrations.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"topic0\": \"NameRegistered(string,bytes32,address,uint256,uint256)\",\n    \"filter\": {\n      \"and\": [\n        { \"eq\": [\"owner\", \"0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5\"] },\n        { \"gt\": [\"cost\", \"1000000000000000000\"] }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Content by Number using Moralis SDK in Python\nDESCRIPTION: This Python script demonstrates fetching block data by number using the Moralis Python SDK. It sets the Moralis API key and defines a dictionary `params` containing the `block_number_or_hash` ('15863321') and `chain` ('eth'). The `evm_api.block.get_block` function is called with the API key and parameters, and the returned block information is printed. Requires the `moralis` Python package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-content-by-block-number.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"block_number_or_hash\": \"15863321\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.block.get_block(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Backend API Route for Fetching Solana NFTs (TypeScript)\nDESCRIPTION: This Next.js API route uses the Moralis SDK to fetch NFTs for a given Solana wallet address. It handles the request from the frontend and returns the NFT data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-explorer.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from 'moralis';\n\nexport default async function handler(req, res) {\n  const { address, network } = req.body;\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const data = await Moralis.SolApi.account.getNFTs({\n      network,\n      address,\n    });\n    res.status(200).json(data);\n  } catch (error) {\n    res.status(400).json(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using .raw Method for Token Balances\nDESCRIPTION: Shows how to use the .raw method to get unformatted token balance data directly from the API. Useful for v1 SDK compatibility but lacks additional utilities and validations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/query-from-evm-or-solana.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst balances = await Moralis.EvmApi.token.getWalletTokenBalances({\n  chain: EvmChain.ETHEREUM,\n  address: \"0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe\",\n});\nconsole.log(balances.raw)[\n  //console output:\n  {\n    token_address: \"0x01be23585060835e02b77ef475b0cc51aa1e0709\",\n    name: \"ChainLink Token\",\n    symbol: \"LINK\",\n    logo: null,\n    thumbnail: null,\n    decimals: 18,\n    balance: \"20000000000000000000\",\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component (JSX)\nDESCRIPTION: Renders the imported `DocCardList` component within the documentation page. This component dynamically generates and displays a list of document cards, typically representing the child pages or related documents within the 'Integrations' section, serving as an index.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/integrations.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Available Chains Configuration in TypeScript\nDESCRIPTION: Definition of blockchain networks available for token transfers, including chain names, IDs and contract addresses\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst availableChains = [\n    { chainName: 'ethereum-2', chainId: 5, distributionContractAddr: 'YOUR_DEPLOYED_CONTRACT_ADDRESS' },\n    { chainName: 'Polygon', chainId: 80001,\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Sushiswap V2 Pair Address using TypeScript\nDESCRIPTION: TypeScript implementation for retrieving a Sushiswap V2 pair address using Moralis DeFi API. Requires Moralis API key and token addresses for both tokens in the pair. Returns pair address and token details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"sushiswapv2\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Native Balance with Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to get the native SOL balance of a specific Solana wallet address. It initializes the Moralis SDK with an API key, specifies the target wallet address and the Solana network (MAINNET), and then calls the `Moralis.SolApi.account.getBalance` method. The response, containing the balance in lamports and SOL, is logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/balance-api/how-to-get-native-solana-balance-by-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getBalance({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Web3 Authentication with a Custom Backend in Unity C#\nDESCRIPTION: This C# script (`MoralisWeb3AuthService`) manages the user authentication process within a Unity application using the Moralis AuthenticationKit and a custom backend. It listens for wallet connection events, requests a challenge message from the custom backend's `/request` endpoint, prompts the user to sign the message using WalletConnect or Web3GL depending on the platform, and verifies the signature against the custom backend's `/verify` endpoint using UnityWebRequest. Success or failure triggers corresponding UnityEvents (`OnSuccess`, `OnFailed`). It depends on `UnityEngine`, `UnityEngine.Networking`, `WalletConnectSharp.Unity`, `Cysharp.Threading.Tasks`, `MoralisUnity.Kits.AuthenticationKit`, and a `ServerConfiguration` class (not shown) for backend URLs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing UnityEngine;\nusing UnityEngine.Networking;\nusing System.Collections;\nusing UnityEngine.Events;\nusing WalletConnectSharp.Unity;\nusing Cysharp.Threading.Tasks;\n\nusing MoralisUnity.Kits.AuthenticationKit;\n\npublic class MoralisWeb3AuthService : MonoBehaviour\n{\n    [Serializable]\n    public class RequestData\n    {\n        public string id;\n        public string message;\n        public string profileId;\n    }\n\n    private RequestData requestData;\n\n    [Header(\"Events\")]\n    public UnityEvent OnSuccess = new UnityEvent();\n    public UnityEvent OnFailed = new UnityEvent();\n\n    // Main Components\n    private AuthenticationKit authenticationKit;\n    \n    public void Awake()\n    {\n        authenticationKit = FindObjectOfType<AuthenticationKit>(true);\n    }\n\n    public void StateObservable_OnValueChanged(AuthenticationKitState authenticationKitState)\n    {\n        switch (authenticationKitState)\n        {\n            case AuthenticationKitState.WalletConnected:\n\n#if !UNITY_WEBGL\n                // Get the address and chainid with WalletConnect \n                string address = WalletConnect.ActiveSession.Accounts[0];\n                int chainId = WalletConnect.ActiveSession.ChainId;\n#else\n                // Get the address and chainid with Web3 \n                string address = Web3GL.Account().ToLower();\n                int chainId = Web3GL.ChainId();\n#endif\n                // Create sign message \n                StartCoroutine(CreateMessage(address, chainId));\n                break;\n        }\n    }\n\n    IEnumerator CreateMessage(string address, int chainId)\n    {\n        var hexChainId = $\"0x{chainId:X}\";\n\n        WWWForm form = new WWWForm();\n        form.AddField(\"address\", address);\n        form.AddField(\"chain\", hexChainId);\n         \n        using (UnityWebRequest webRequest = UnityWebRequest.Post(\n            ServerConfiguration.URL + ServerConfiguration.RequestEndpoint, form))\n        {\n            yield return webRequest.SendWebRequest();\n\n            switch (webRequest.result)\n            {\n                case UnityWebRequest.Result.ConnectionError:\n                    Debug.LogError(\"Connection Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.DataProcessingError:\n                    Debug.LogError(\"Data Processing Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.ProtocolError:\n                    Debug.LogError(\"Protocol Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.Success:\n                    requestData = JsonUtility.FromJson<RequestData>(webRequest.downloadHandler.text);\n                    Debug.Log(requestData.message);\n\n                    SignMessage(requestData.message);\n                    break;\n            }\n        }\n    }\n\n    private async void SignMessage(string message)\n    {\n        authenticationKit.State = AuthenticationKitState.WalletSigning;\n\n#if !UNITY_WEBGL\n        // Sign the message with WalletConnect\n        string address = WalletConnect.ActiveSession.Accounts[0];\n        string signature = await WalletConnect.ActiveSession.EthPersonalSign(address, message);\n#else\n        // Sign the message with Web3\n        string signature = await Web3GL.Sign(message);\n#endif\n        if (!String.IsNullOrEmpty(signature))\n        {\n            StartCoroutine(Authenticate(message, signature));\n        }\n        else\n        {\n            // If there is no signature fire the OnFailed event\n            OnFailed.Invoke();\n        }\n    }\n\n    IEnumerator Authenticate(string message, string signature)\n    {\n        WWWForm form = new WWWForm();\n        form.AddField(\"message\", message);\n        form.AddField(\"signature\", signature);\n\n        using (UnityWebRequest webRequest = UnityWebRequest.Post(\n            ServerConfiguration.URL + ServerConfiguration.VerifyEndpoint, form))\n        {\n            yield return webRequest.SendWebRequest();\n\n            switch (webRequest.result)\n            {\n                case UnityWebRequest.Result.ConnectionError:\n                    Debug.LogError(\"Connection Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.DataProcessingError:\n                    Debug.LogError(\"Data Processing Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.ProtocolError:\n                    Debug.LogError(\"Protocol Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.Success:\n\n                    // If the authentication succeeded the user profile is update and we get the UpdateUserDataAsync return values a response\n                    // If it failed it returns empty\n                    if (!String.IsNullOrEmpty(webRequest.downloadHandler.text))\n                    {\n                        authenticationKit.State = AuthenticationKitState.WalletSigned;\n\n                        // On success fire the OnSuccess event\n                        OnSuccess.Invoke();\n                        Debug.Log(webRequest.downloadHandler.text);\n                    }\n                    else\n                    {\n                        // If the response is empty fire the OnFailed event\n                        OnFailed.Invoke();\n                    }\n\n                    break;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Transfer Stream with Moralis API\nDESCRIPTION: Implementation of a Moralis stream configuration to monitor all NFT transfers on the Ethereum blockchain. The code sets up an event listener for the Transfer event with specific parameters including the sender, receiver, and tokenId. This implementation requires a Business or Enterprise plan for the 'listen to all addresses' feature.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-listen-all-nft-transfers.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst NFT_transfer_ABI = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"tokenId\", \"type\": \"uint256\" },\n  ],\n  \"name\": \"transfer\",\n  \"type\": \"event\",\n}];\n\nconst options = {\n  chains: [EvmChain.ETHEREUM],\n  description: \"monitor all NFT transfers\",\n  tag: \"NFT_transfers\",\n  abi: NFT_transfer_ABI,\n  includeContractLogs: true,\n  allAddresses: true,\n  topic0: [\"Transfer(address,address,uint256)\"],\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n};\n\nconst stream = await Moralis.Streams.add(options);\n```\n\n----------------------------------------\n\nTITLE: Updating a Stream's Webhook URL via Moralis SDK - JavaScript\nDESCRIPTION: Updates the webhook URL for an existing stream using Moralis SDK. Initializes the SDK with your API key, then calls the Streams.update method with the required id of the target stream and the new webhook URL. Ensure that the 'id' corresponds to the stream you wish to modify, and that the new webhook URL is valid.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/stream-management.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n});\n\nawait Moralis.Streams.update({\n  id: \"STREAM_ID\",\n  webhook: \"<https://YOUR_NEW_WEBHOOK_URL>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet ERC20 Balances using Moralis TypeScript SDK\nDESCRIPTION: This TypeScript snippet illustrates retrieving ERC20 token balances for a wallet address using the Moralis SDK with TypeScript typings. It initializes Moralis, specifies the target `address` and `chain` (using `EvmChain` enum), and calls `Moralis.EvmApi.token.getWalletTokenBalances`. The resulting token balance information is then logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands to install required npm packages for the project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nnpm install moralis body-parser\nnpm install --save-dev serverless-offline\n```\n\n----------------------------------------\n\nTITLE: Reporting Spam NFT Contracts with Moralis in TypeScript\nDESCRIPTION: This code demonstrates how to report spam NFT contracts using the Moralis API in TypeScript. It initializes the Moralis SDK with your API key, specifies the contract address to report as spam on the Ethereum chain, and provides a reason for the report.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/spam-detection/report-nft-spam.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\nimport abi from \"abi.json\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  const contractAddress = \"0x06012c8cf97bead5deae237070f9587f8e7a266d\";\n\n  const reason = \"My Reason\";\n\n  const response = await Moralis.EvmApi.utils.reviewContracts(\n    {\n      chain,\n    },\n    {\n      contracts: [\n        {\n          reason,\n          contractAddress,\n          reportType: \"spam\",\n          contractType: \"NFT\",\n        },\n      ],\n    }\n  );\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Wallet Token Balances using EvmApi and `.raw` in JavaScript\nDESCRIPTION: This example retrieves ERC20 token balances for an Ethereum address using `Moralis.EvmApi.token.getWalletTokenBalances`. It accesses the raw, unformatted JSON data directly from the API response using the `.raw` property. This method is suitable for compatibility with v1 SDK behavior or when raw data is preferred, but lacks the type safety and utilities of the `.result` method. Requires `@moralisweb3/common-evm-utils` for `EvmChain` enum.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/query-from-evm-or-solana.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\\n\\nconst balances = await Moralis.EvmApi.token.getWalletTokenBalances({\\n  chain: EvmChain.ETHEREUM,\\n  address: \"0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe\",\\n});\\nconsole.log(balances.raw)[\\n  //console output:\\n  {\\n    token_address: \"0x01be23585060835e02b77ef475b0cc51aa1e0709\",\\n    name: \"ChainLink Token\",\\n    symbol: \"LINK\",\\n    logo: null,\\n    thumbnail: null,\\n    decimals: 18,\\n    balance: \"20000000000000000000\",\\n  }\\n];\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for SPL NFT Metadata\nDESCRIPTION: This JSON object represents an example response received from the Moralis `getNFTMetadata` endpoint for an SPL NFT. It includes details like the mint address, standard (metaplex), name, symbol, and metaplex-specific information such as the metadata URI, update authority, seller fees, ownership details, and mutability status.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/nft-api/how-to-get-spl-nft-metadata.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"mint\": \"FVW9KoJxXzP2cCfhLfFC7hQKBZKnaoPkyZJQgvM9moWV\",\n  \"standard\": \"metaplex\",\n  \"name\": \"\",\n  \"symbol\": \"WASHERE\",\n  \"metaplex\": {\n    \"metadataUri\": \"https://nftstorage.link/ipfs/bafybeifa4kbkyzvxx2uedsnqespxdhdgn4bs3bw7mkrhdtxi2y44dahcxm/6.json\",\n    \"updateAuthority\": \"14BRquDqnVXCVmQEAaZkiKCCruz2nbZNJrb5nB4GiewW\",\n    \"sellerFeeBasisPoints\": 0,\n    \"primarySaleHappened\": 1,\n    \"owners\": [\n      {\n        \"address\": \"6ULhukKTw1U3NgpwV319eUC5eQYRSYUFi1iNpdTqUMBf\",\n        \"verified\": 1,\n        \"share\": 0\n      },\n      {\n        \"address\": \"14BRquDqnVXCVmQEAaZkiKCCruz2nbZNJrb5nB4GiewW\",\n        \"verified\": 0,\n        \"share\": 100\n      }\n    ],\n    \"isMutable\": true,\n    \"masterEdition\": false\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Tracking Interchain Token Deployment Transaction Status in React (JavaScript)\nDESCRIPTION: This React useEffect snippet listens for updates from the wagmi contract transaction hooks to provide real-time UI feedback about the Interchain Token deployment process. It updates the UI on transaction success (display hash, clear inputs, proceed to next steps), error (show error toast), or pending status (show pending toast). It operates within the token creation form, ensuring users are informed throughout the process.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst[displayTransactionHash, setDisplayTransactionHash] = useState < string > ('');\nconst NewInterchainToken: React.FC = () = >{\n  //...\n  useEffect(() = >{\n    if (isSuccess) {\n      setDisplayTransactionHash(createNewToken ? .hash ? ?'');\n      toast({\n        title: 'New Interchain Token Created',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n      // Clear only the input fields\n      setTokenName('');\n      setTokenSymbol('');\n      setTokenDecimals(18);\n      setInitialSupply(0);\n      setShowNextStep(true);\n    }\n    if (isError) {\n      toast({\n        title: 'Transaction Error',\n        description: 'There was an error submitting your transaction.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isLoading) {\n      toast({\n        title: 'Transaction Pending',\n        description: 'Your transaction is pending.',\n        status: 'info',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  },\n  [createNewToken, isSuccess, isError, isLoading, useWaitForDeployTokenTransactionData]);\n  return (\n  //...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Native Balance of Multi-Signature Wallet with Moralis Wallet API (Python)\nDESCRIPTION: This Python snippet uses the 'moralis' SDK to call the evm_api.balance.get_native_balance method, obtaining the native balance for a given Ethereum address and chain. The user must set a valid Moralis API key, and the chain is defined as 'eth'. Dependencies include the Moralis Python SDK. The method prints the resulting balance dictionary to stdout. Suitable for any Python environment where the moralis package is installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x849D52316331967b6fF1198e5E32A0eB168D039d\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.balance.get_native_balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Flow with MetaMask and Backend in JavaScript\nDESCRIPTION: This JavaScript async function orchestrates the full client-side authentication workflow with MetaMask and the backend. It connects to the wallet, checks for valid account and chain, fetches a backend-generated message, signs it with the user's wallet, then verifies the signature on the server. Upon success, it renders the authenticated user. Dependencies include the previously defined 'connectToMetamask', a function to request the message ('requestMessage'), signature verification via the backend ('verifyMessage'), and a rendering function ('renderUser'). Error states are handled if account or chain information is missing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleAuth = async () => {\\n  // Connect to Metamask\\n  const { signer, chain, account } = await connectToMetamask();\\n\\n  if (!account) {\\n    throw new Error('No account found');\\n  }\\n  if (!chain) {\\n    throw new Error('No chain found');\\n  }\\n\\n  const { message } = await requestMessage(account, chain);\\n\\n  const signature = await signer.signMessage(message);\\n\\n  const { user } = await verifyMessage(message, signature);\\n\\n  renderUser(user);\\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL NFT Metadata using Moralis SDK in Python\nDESCRIPTION: This Python snippet shows how to fetch SPL NFT metadata using the Moralis Python SDK. It imports the `sol_api` module, sets the API key, defines parameters including the NFT address and network ('mainnet'), and then calls the `sol_api.nft.get_nft_metadata` function. The result, containing the NFT metadata, is printed to the console. It requires the 'moralis' package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/nft-api/how-to-get-spl-nft-metadata.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"FVW9KoJxXzP2cCfhLfFC7hQKBZKnaoPkyZJQgvM9moWV\",\n    \"network\": \"mainnet\",\n}\n\nresult = sol_api.nft.get_nft_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical NFT Transfers using Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet fetches the NFT transfer history of a specified wallet address using the Moralis SDK and static type checking. The example depends on both 'moralis' and '@moralisweb3/common-evm-utils', and outputs the response in raw format. Substitute proper credentials and parameters prior to deployment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Declaring Ethereum Smart Contract ABI Snippet - JSON\nDESCRIPTION: This snippet defines several function entries from an Ethereum smart contract Solidity ABI in JSON format. It includes view, nonpayable, and state mutability function definitions such as tokenOfOwnerByIndex, tokenURI, totalSupply, transferFrom, transferOwnership, and withdraw. These are used for smart contract interaction on platforms like Moralis or web3 libraries, requiring the full ABI context; the input and output parameter objects specify types and names as expected by web3 libraries.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" },\n      { \"internalType\": \"uint256\", \"name\": \"index\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"tokenOfOwnerByIndex\",\n    \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"tokenURI\",\n    \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" },\n      { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" },\n      { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"newOwner\", \"type\": \"address\" }\n    ],\n    \"name\": \"transferOwnership\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"withdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for SPL Token Balance API\nDESCRIPTION: This JSON structure illustrates the expected output format from the Moralis Solana API when querying for SPL token balances. It's an array where each object represents a token, including its associated address, mint address, raw and formatted amounts ('amountRaw', 'amount'), and the number of decimals.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/how-to-get-spl-token-balance-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\n  {\n    \"associatedTokenAddress\": \"Dpmpwm93Amvj4uEFpYhjv8ZzfpgARq6zxKTi6mrj97gW\",\n    \"mint\": \"BXWuzb3jEuGsGUe29xdApu8Z3jVgrFbr3wWdsZmLWYk9\",\n    \"amountRaw\": \"100000000000\",\n    \"amount\": \"100\",\n    \"decimals\": \"9\"\n  }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Listening to Smart Contract Events with Moralis Streams API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates setting up a Moralis Stream to listen for specific smart contract events, specifically ERC20 'Transfer' events from the USDT contract (`0xdA...`) on Ethereum. It defines the event ABI (`ERC20_transfer_ABI`), initializes Moralis, configures the stream with the chain, description, tag, webhook URL, the ABI, `includeContractLogs: true`, and the event topic (`topic0`), creates the stream using `Moralis.Streams.add`, and attaches the USDT contract address using `Moralis.Streams.addAddress`. Requires a Moralis API key (`YOUR_API_KEY`) and webhook URL (`YOUR_WEBHOOK_URL`).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst ERC20_transfer_ABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"from\", type: \"address\" },\n      { indexed: true, name: \"to\", type: \"address\" },\n      { indexed: false, name: \"value\", type: \"uint256\" },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const stream = {\n    chains: [EvmChain.ETHEREUM],\n    description: \"monitor USDT transfers\",\n    tag: \"USDT\",\n    webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n    abi: ERC20_transfer_ABI,\n    includeContractLogs: true,\n    topic0: [\"Transfer(address,address,uint256)\"],\n  };\n\n  const newStream = await Moralis.Streams.add(stream);\n  const { id } = newStream.toJSON();\n\n  // Now we attach USDT address to the stream\n  const address = \"0xdAC17F958D2ee523a2206206994597C13D831ec7\";\n\n  await Moralis.Streams.addAddress({ address, id });\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical ERC20 Prices using Moralis Web3 Token API in Python\nDESCRIPTION: This Python snippet illustrates fetching historical price data for an ERC20 token using Moralis's Python SDK. It iterates over a specified block range, calling the get_token_price endpoint of the evm_api.token module for each block. The required dependency is the 'moralis' Python package. Configure with your API key, set the token contract address and chain, and specify block intervals. Each iteration's result is appended to and printed from a list. Ensure you replace 'YOUR_API_KEY' before running, and install the 'moralis' package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-historical-erc20-token-price.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nhistoricalPrice = []\n\nfor to_block in range(16323500, 16323550, 10):\n  params = {\n    \"address\": \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\n    \"chain\": \"eth\",\n    \"to_block\": to_block\n  }\n  result = evm_api.token.get_token_price(\n    api_key=api_key,\n    params=params,\n  )\n\n  historicalPrice.append(result)\n\nprint(historicalPrice)\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Collection Owners with Moralis SDK in Python\nDESCRIPTION: This Python script utilizes the Moralis SDK to retrieve the owners of an NFT collection. It sets up the necessary parameters including the API key, contract address, chain ('eth'), and optional parameters like limit and metadata normalization. The `evm_api.nft.get_nft_owners` function is called with these parameters, and the resulting data is printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owners-of-an-nft-collection.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xa186d739ca2b3022b966194004c6b01855d59571\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_nft_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Solana TicTacToe Game via Next.js API (TypeScript)\nDESCRIPTION: This Next.js API route handler (`newGame.ts`) creates a new TicTacToe game instance on the Solana blockchain. It receives player addresses, derives the game account public key using `createWithSeed`, and checks if the account exists. If not, it creates the account using `SystemProgram.createAccountWithSeed`. Finally, it sends a transaction containing an instruction (data: `[0, 0, 0]`) to initialize the game state on the program, signing the transaction with the owner's private key stored server-side. It depends on `@solana/web3.js`, `bs58` for key decoding, and `borsh` for data serialization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  Connection,\n  clusterApiUrl,\n  Keypair,\n  PublicKey,\n  Transaction,\n  SystemProgram,\n  sendAndConfirmTransaction,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport base58 from 'bs58';\nimport * as borsh from 'borsh';\nimport { GameAccount, GameAccountSchema } from 'components/templates/TicTacToe/types';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { OWNER_PRIVATE_KEY } = process.env;\n  const { player1, player2 } = req.body;\n\n  if (!OWNER_PRIVATE_KEY) {\n    throw new Error('Add Owner private key in env file.');\n  }\n  const key = Uint8Array.from(base58.decode(OWNER_PRIVATE_KEY));\n  const keypair = Keypair.fromSecretKey(key);\n  const { publicKey } = keypair;\n\n  const Player1 = player1;\n  const Player2 = player2;\n  const programId = process.env.NEXT_PUBLIC_PROGRAM_ID;\n  if (!programId) {\n    throw new Error('Add Program Id in env file.');\n  }\n  const connection = new Connection(clusterApiUrl('devnet'));\n\n  // Account Creation --- Start\n  const GAME_ACCOUNT_SECRET = `${player1.substring(0, 5)}${player2.substring(0, 5)}`;\n\n  const DATA_SIZE = borsh.serialize(GameAccountSchema, new GameAccount()).length;\n  console.log(DATA_SIZE);\n\n  const GameDataAccountPubkey = await PublicKey.createWithSeed(\n    publicKey,\n    GAME_ACCOUNT_SECRET,\n    new PublicKey(programId),\n  );\n\n  const GameDataAccount = await connection.getAccountInfo(GameDataAccountPubkey);\n\n  if (GameDataAccount === null) {\n    console.log('Creating account', GameDataAccountPubkey.toBase58(), 'to play Tic-Tac-Toe');\n\n    const lamports = await connection.getMinimumBalanceForRentExemption(DATA_SIZE);\n\n    const AccountCreation = new Transaction();\n    AccountCreation.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: publicKey,\n        basePubkey: publicKey,\n        seed: GAME_ACCOUNT_SECRET,\n        newAccountPubkey: GameDataAccountPubkey,\n        lamports,\n        space: DATA_SIZE,\n        programId: new PublicKey(programId),\n      }),\n    );\n    console.log('created AccountWithSeed', AccountCreation);\n    const {\n      context: { slot: minContextSlot },\n      value: { blockhash, lastValidBlockHeight },\n    } = await connection.getLatestBlockhashAndContext();\n\n    const signature = await sendAndConfirmTransaction(connection, AccountCreation, [keypair], {\n      minContextSlot,\n      skipPreflight: true,\n      preflightCommitment: 'processed',\n    });\n    const confirmtx = await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n    console.log({ signature, confirmtx });\n  }\n  // Account Creation --- END\n\n  const transaction = new Transaction();\n  transaction.add(\n    new TransactionInstruction({\n      keys: [\n        {\n          pubkey: GameDataAccountPubkey,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: new PublicKey(Player1),\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: new PublicKey(Player2),\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: publicKey,\n          isSigner: true,\n          isWritable: false,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      ],\n      programId: new PublicKey(programId),\n      data: Buffer.from([0, 0, 0]),\n    }),\n  );\n\n  const {\n    context: { slot: minContextSlot },\n    value: { blockhash, lastValidBlockHeight },\n  } = await connection.getLatestBlockhashAndContext();\n\n  try {\n    const signature = await sendAndConfirmTransaction(connection, transaction, [keypair], {\n      minContextSlot,\n      skipPreflight: true,\n      preflightCommitment: 'processed',\n    });\n\n    const confirmtx = await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n    console.log({ signature, confirmtx });\n    const data = await connection.getParsedTransaction(signature);\n\n    res.status(200).json(data);\n  } catch (error) {\n    if (error instanceof Error) {\n      res.status(400).send(error.message);\n      console.error(error.message);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining React UI for Remote Interchain Token Deployment in JavaScript\nDESCRIPTION: This React functional component renders a form using Chakra UI components to collect user input for deploying an Interchain Token remotely. It captures the source chain, deployed token address, and destination chain, and includes a button that triggers the `handleDeployToken` function. State variables like `sourceChain`, `tokenAddress`, `destinationChain`, and `isLoading` manage the form's data and button state.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n  <Box\n    padding=\"7\"\n    maxW=\"xxl\"\n    borderWidth=\"1px\"\n    borderRadius=\"lg\"\n    overflow=\"hidden\"\n    margin=\"auto\"\n    marginTop=\"-20\"\n  >\n    {/* ... */}\n    <VStack spacing={5} align=\"stretch\">\n      <FormControl>\n        <FormLabel>Source chain</FormLabel>\n        <Stack spacing={3}>\n          <Select\n            placeholder=\"Select source chain\"\n            size=\"md\"\n            onChange={(e) => {\n              setSourceChain(e.target.value);\n            }}\n            value={sourceChain}\n          >\n            {/* ... */}\n          </Select>\n        </Stack>\n        <FormHelperText>\n          Source chain for your token e.g., Fantom, Binance, Polygon, etc.\n        </FormHelperText>\n      </FormControl>\n\n      <FormControl>\n        <FormLabel>Token Address</FormLabel>\n        <Input\n          placeholder=\"Enter your token address\"\n          value={tokenAddress}\n          onChange={(e) => setTokenAddress(e.target.value)}\n        />\n        <FormHelperText>\n          Enter the token address you already deployed\n        </FormHelperText>\n      </FormControl>\n\n      <FormControl>\n        <FormLabel>Destination chain</FormLabel>\n        <Stack spacing={3}>\n          <Select\n            placeholder=\"Select Destination chain\"\n            size=\"md\"\n            onChange={(e) => {\n              setDestinationChain(e.target.value);\n            }}\n            value={destinationChain}\n          >\n            {/* ... */}\n          </Select>\n        </Stack>\n        <FormHelperText>\n          Destination chain for your token e.g., Fantom, Binance, Polygon, etc.\n        </FormHelperText>\n      </FormControl>\n\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <Button\n          colorScheme=\"cyan\"\n          loadingText=\"Deploying Token Remotely...\"\n          w=\"sm\"\n          variant=\"solid\"\n          onClick={handleDeployToken}\n          isLoading={isLoading}\n          disabled={isLoading}\n        >\n          Deploy Token\n        </Button>\n        {/* ... */}\n      </div>\n      {/* ... */}\n    </VStack>\n  </Box>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Moralis Authentication (text)\nDESCRIPTION: Defines necessary environment variables for Moralis, NextAuth, and deployment config. This example should be placed in the .env.local file at your project root. Values like APP_DOMAIN, MORALIS_API_KEY, NEXTAUTH_URL, and NEXTAUTH_SECRET must be set for secure and functional authentication integration. Ensure each parameter is correctly set to avoid authentication or connection failures.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAPP_DOMAIN=amazing.finance\\nMORALIS_API_KEY=xxxx\\nNEXTAUTH_URL=http://localhost:3000\\nNEXTAUTH_SECRET=7197b3e8dbee5ea6274cab37245eec212\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Server for Webhook\nDESCRIPTION: Creates an Express server with a POST endpoint for receiving webhook data from Moralis Streams API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.post(\"/webhook\", async (req, res) => {\n  const { body, headers } = req;\n\n  console.log(body);\n\n  res.status(200).json();\n});\n\napp.listen(port, () => {\n  console.log(`Listening to streams`);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Top ERC20 Tokens Using Moralis SDK - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Moralis JavaScript SDK to retrieve the top ERC20 tokens by market cap. The script sets up the Moralis instance with the required API key, then calls the EvmApi.marketData.getTopERC20TokensByMarketCap function and logs the raw response. Required dependencies include the 'moralis' package and '@moralisweb3/common-evm-utils'. An API key is needed for authentication. Inputs are provided via configuration, and the output is printed JSON of the top tokens. The code runs asynchronously and must be executed in a Node.js environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-erc20-tokens-by-market-cap.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getTopERC20TokensByMarketCap();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating POST Route for Authentication Request in Express.js\nDESCRIPTION: Implements a POST endpoint that calls the requestMessage function to generate an authentication message for a blockchain wallet address. The endpoint expects address and chain parameters in the request body.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/request\", async (req, res) => {\n    try {\n        const data = await requestMessage(req.body.address, req.body.chain)\n        res.status(200)\n        res.json(data)\n\n    } catch (error) {\n        // Handle errors\n        console.error(error)\n        res.status(500)\n        res.json({ error: error.message })\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs Across Chains with Moralis SDK (TypeScript)\nDESCRIPTION: Initializes the Moralis SDK with TypeScript types, using an API key. It defines a target wallet address and an array of `EvmChain` enums (Ethereum, BSC, Polygon). It iterates through the chains, calling `Moralis.EvmApi.nft.getWalletNFTs` for each, collects responses in an array, and logs the result. Requires the `moralis` and `@moralisweb3/common-evm-utils` npm packages and TypeScript environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching and Filtering NFTs with Moralis API (JavaScript)\nDESCRIPTION: Inside `getServerSideProps` in `pages/index.js`, this code uses the Moralis SDK (`Moralis.EvmApi.account.getNFTs`) to fetch NFTs owned by the profile's address (`response?.data.profile.ownedBy`) on the Polygon chain (`0x89`). It then filters these NFTs to find those associated with Lens profiles (checking `animation_url` in metadata) and stores their animation URLs in `nftArray`, which is passed as props to the component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst balances = await Moralis.EvmApi.account.getNFTs({\n    address: response?.data.profile.ownedBy,\n    chain: 0x89,\n  });\n\n  let nftArray = [];\n  let nfts = balances?.data.result;\n\n  for (let i = 0; i < nfts.length; i++) {\n    if (nfts[i].metadata !== null) {\n      if (\n        'animation_url' in JSON.parse(nfts[i].metadata) &&\n        JSON.parse(nfts[i].metadata).animation_url !== null &&\n        JSON.parse(nfts[i].metadata).animation_url.includes('.lens')\n      ) {\n        nftArray.push(JSON.parse(nfts[i].metadata).animation_url);\n      }\n    }\n  }\n\n  return {\n    props: { profile: response?.data.profile, nftArray: nftArray },\n  };\n```\n\n----------------------------------------\n\nTITLE: Filtering High-Value USDT Transfers using Moralis Streams - TypeScript\nDESCRIPTION: This TypeScript snippet mirrors the JavaScript example, showing how to use the Moralis SDK to create a filtered stream for USDT transfers above $1M from a specific sender. It defines a filter_ERC20 object and includes advanced options in the created stream. Moralis.Streams.add and Moralis.Streams.addAddress APIs are called for creation and address attachment, respectively. Prerequisites are the Moralis SDK configured for TypeScript and a valid API key. Takes filter conditions as input; the output is the stream id and address association.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Above code is same as prior\\n\\nconst filter_ERC20 = {\\n  \\\"and\\\": \\[\\n    { \\\"eq\\\": [\\\"from\\\", \\\"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\\\"] },\\n    { \\\"gt\\\": [\\\"value\\\", \\\"1000000000\\\"] }, // Example of USDT (6 Decimals)\\n  ],\\n};\\n\\nconst runApp = async () => {\\n  const stream = {\\n    // same parameters as prior\\n    advancedOptions: [\\n      {\\n        topic0: \\\"Transfer(address,address,uint256)\\\",\\n        filter: filter_ERC20\\n      },\\n    ]\\n  };\\n\\n  const newStream = await Moralis.Streams.add(stream);\\n  const { id } = newStream.toJSON();\\n\\n  // Now we attach USDT address to the stream\\n  const address = \\\"0xdAC17F958D2ee523a2206206994597C13D831ec7\\\";\\n\\n  await Moralis.Streams.addAddress({ address, id });\\n};\\n\\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Updating a Stream with ERC20 Transfer Logs - Python\nDESCRIPTION: This Python snippet uses the Moralis SDK to update an existing stream, adding support for ERC20 transfer event monitoring with a custom ABI and topic. Requires the moralis Python package and prior stream creation. The function sends the update and prints the result. Key parameters include ABI, contract log inclusion, and topic signature.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\nerc20_transfer_abi = [\n    {\n        \"anonymous\": False,\n        \"inputs\": [\n            {\"indexed\": True, \"name\": \"from\", \"type\": \"address\"},\n            {\"indexed\": True, \"name\": \"to\", \"type\": \"address\"},\n            {\"indexed\": True, \"name\": \"value\", \"type\": \"uint256\"},\n        ],\n        \"name\": \"Transfer\",\n        \"type\": \"event\",\n    }\n]\ntopic = \"Transfer(address,address,uint256)\"\n\nparams = {\n    \"id\": \"4f7dbfb3-42c9-4d8d-bbba-975ea2d2b1a1\", # stream ID from the previous snippet\n}\n\nstream_body = {\n    \"abi\": erc20_transfer_abi,\n    \"includeContractLogs\": True,\n    \"topic0\": [topic],\n    \"description\": \"my first stream updated\",\n}\n\nresults = streams.evm_streams.update_stream(\n    api_key=api_key, body=stream_body, params=params\n)\nprint(results)\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Message Endpoint in Express\nDESCRIPTION: POST endpoint that handles message request authentication using Moralis Auth. Takes address and chain parameters from request body to generate a signed message.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/request\", async (req, res) => {\n    try {\n        const data = await requestMessage(req.body.address, req.body.chain)\n        res.status(200)\n        res.json(data)\n\n    } catch (error) {\n        // Handle errors\n        console.error(error)\n        res.status(500)\n        res.json({ error: error.message })\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: MetaMask Authentication Implementation\nDESCRIPTION: Code for implementing MetaMask wallet authentication, including custom provider configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signInWithMoralis } from '@moralisweb3/client-firebase-evm-auth';\n\nawait signInWithMoralis(moralisAuth);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signInWithMoralis } from '@moralisweb3/client-firebase-evm-auth';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\nconst provider: JsonRpcProvider = /* ... */\n\nawait signInWithMoralis(moralisAuth, {\n  provider\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Blockchain Balance using Moralis - JavaScript\nDESCRIPTION: Defines an async function 'getDemoData' that fetches the native balance of a specified address and chain using Moralis.EvmApi.balance.getNativeBalance. Returns formatted balance in Ether. This sets up the minimal logic for blockchain data retrieval and supports extension for more data types.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getDemoData() {\n  // Get native balance\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  // Format the native balance formatted in ether via the .ether getter\n  const native = nativeBalance.result.balance.ether;\n\n  return { native };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Burning Selected Solana NFTs\nDESCRIPTION: TypeScript function to burn the NFTs selected by the user using Metaplex SDK.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-burner.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst burnNFT = async () => {\n  // ...\n  const totalTxs = await Promise.all(\n    nftsToDelete.map(async (nft) => {\n      const tx = await metaplex\n        .nfts()\n        .delete({\n          mintAddress: new PublicKey(nft),\n        })\n        .run();\n      return tx;\n    })\n  );\n  setNftsToDelete(() => []);\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Installing CORS Package\nDESCRIPTION: Command to install the CORS npm package required for handling cross-origin requests.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cors\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for /logout Clearing JWT Cookie - JavaScript\nDESCRIPTION: This endpoint clears the user's JWT by removing the cookie and returns a 200 status on success. Should be used to log users out of their authenticated session. Depends on express and cookie-parser middleware. No inputs necessary beyond the request with a jwt cookie, and output is a status code response.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/logout\", async (req, res) => {\n  try {\n    res.clearCookie(\"jwt\");\n    return res.sendStatus(200);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Estimating Cross-Chain Gas Fees with Axelar SDK in JavaScript/React\nDESCRIPTION: This snippet demonstrates how to estimate the gas fee for an Axelar-powered cross-chain operation within a React component. It initializes an `AxelarQueryAPI` instance for the testnet environment and uses the `estimateGasFee` method inside an async function (`gasEstimator`). The estimated gas amount is stored in the `gasAmount` state variable. Requires `sourceChain` and `destinationChain` state variables to be set.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// transfer-token.js\n* ***\n//...\nconst TransferToken = () = >{\n  //...\n  const api: AxelarQueryAPI = new AxelarQueryAPI({\n    environment: Environment.TESTNET\n  });\n  const[gasAmount, setGasAmount] = useState < number > (0);\n  // Estimate Gas\n  const gasEstimator = async() = >{\n    try {\n      const gas = await api.estimateGasFee(sourceChain, destinationChain, GasToken.FTM, 700000, 2);\n      setGasAmount(Number(gas));\n    } catch(error) {\n      console.error('Error estimating gas fee: ', error);\n    }\n  };\n  return (\n  //..\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Block Information on a Specific EVM Chain with Moralis SDK in TypeScript\nDESCRIPTION: Demonstrates how to query block information on a specific EVM chain (Polygon) using Moralis SDK in TypeScript. Requires the Moralis SDK and @moralisweb3/common-evm-utils packages. The key parameter is 'chain', which specifies the target blockchain, and 'blockNumberOrHash', which identifies the queried block. This read-only operation returns block data for the specified chain. Limitation: 'chain' must be a supported EVM chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/cross-chain-requests.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nevmApi.block.getBlock({\n  blockNumberOrHash: \"33000000\",\n  chain: EvmChain.POLYGON,\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFT Collections with Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to fetch NFT collections owned by a specific EVM address. It initializes the Moralis SDK with an API key, defines the target address and chain (Ethereum), calls the `Moralis.EvmApi.nft.getWalletNFTCollections` method, and logs the JSON response. Requires the `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/04-NFT Collections/how-to-get-all-nft-collections-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTCollections({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Information by Unix Timestamp in JavaScript\nDESCRIPTION: JavaScript code example that demonstrates how to use Moralis EvmApi to get the closest block by a unix timestamp. The code initializes Moralis with an API key, specifies the timestamp and blockchain, and then calls the getDateToBlock endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-by-unix-timestamp.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const date = \"1667823435\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getDateToBlock({\n    date,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Example Moralis Webhook Payload with Trigger Results in JavaScript\nDESCRIPTION: Presents an example snippet of the `erc20Transfers` array within a Moralis webhook payload after a trigger has been configured and executed. Each transfer object now includes a nested `triggers` array containing the results (output name and value) of the corresponding smart contract function calls executed by the trigger mechanism, such as the sender's balance obtained via `balanceOf`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst erc20Transfers: [\n  {\n    transactionHash: \"0xf0c7542c73e2d26cc0b249da63426643263463463646345\",\n    logIndex: \"0\",\n    contract: \"0x34b6a28edbbaf0c7542c73e2d26cc0b249da69a6\",\n    from: \"0xbb6a28edbbaf0c7542c73212d26cc0b249da47a5\",\n    to: \"0xbdc7237c3b3bfcfeca7ed8108d01854589c91d65\",\n    value: \"100000000000000000\",\n    tokenName: \"Moralis\",\n    tokenSymbol: \"MOR\",\n    tokenDecimals: \"18\",\n    valueWithDecimals: \"0.1\",\n    triggers: [\n      { name: \"output1\", value: \"200000000000000000\" },\n    ],\n  },\n  {\n    transactionHash: \"0xc3sdg442c73e2d26cc0b249da2426643263vm646345\",\n    logIndex: \"0\",\n    contract: \"0x34b6a28edbbaf0c7542c73e2d26cc0b249da69a6\",\n    from: \"0xdd6a28edbbaf2c7542c73212d26cc0b249da3ta5\",\n    to: \"0xbdc7237c3b3bfcfeca7ed8108d01854589cf1g66\",\n    value: \"100000000000000000\",\n    tokenName: \"Moralis\",\n    tokenSymbol: \"MOR\",\n    tokenDecimals: \"18\",\n    valueWithDecimals: \"0.1\",\n    triggers: [\n      { name: \"output1\", value: \"51390023141500000\" },\n    ],\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Querying All Wallet NFTs via Moralis NFT API in Python\nDESCRIPTION: This Python script demonstrates how to retrieve all NFTs owned by a specific address across multiple EVM chains (eth, bsc, polygon) using Moralis's Python SDK. It sets up the `params` dictionary, updates the `chain` key within a loop, and calls `evm_api.nft.get_wallet_nfts` for each chain. The results are aggregated and printed as pretty JSON to handle possible unicode characters. Dependencies include the `moralis` (Python SDK) and `json` modules, and you need a valid Moralis API key. Adjust `params` as needed for pagination or filtering; certain API limits may apply.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 1,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = []\nfor chain in ('eth', 'bsc', 'polygon'):\n\tparams['chain'] = chain\n\tresult += [evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n\t)]\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Price with Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates retrieving the current price of an ERC20 token via the Moralis SDK. It needs the Moralis SDK initialized with an API key, the contract address of the token, and the identifier for the blockchain chain. The raw API response with pricing information is logged.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"ERC20_TOKEN_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getTokenPrice({\n    chain,\n    address,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering NFT Lists with Query Input in React (TypeScript)\nDESCRIPTION: This snippet provides the logic for filtering NFT search results based on user input. It maintains a query state (setQuery) and uses queryHandler to update this state with the lowercased input value from an Input UI component. The query is then propagated as a prop (filterQuery) to each NFTCard for further filtering at the card level. Dependencies include React's useState, event handling, and input UI components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `pages/index.jsx`\n\n// State variable to store the filter query entered in the UI\nconst [query, setQuery] = useState('');\n\n// 2\\u20e3\n// `queryHandler` function updated the `query` state variable with the input data.\nconst queryHandler = (e) => {\n  const Text = e.target.value.toLowerCase();\n  setQuery(Text);\n};\n\nreturn (\n  //...\n  // 1\\u20e3\n  // Input component to enter the filter query and it triggers\n  // `queryHandler` function on input change\n    <Input variant=\"filled\" placeholder=\"Filter..\" width={200} onInput={queryHandler} />\n  //...\n\n  //...\n  // 3\\u20e3\n  // NFTCard Component uses the query stae as on of its property.\n  <NFTCard key={i} nftAddress={e.mint} filterQuery={query} />;\n\n  //...\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Pancakeswap V1 Pair Reserves in JavaScript\nDESCRIPTION: JavaScript implementation to retrieve pair reserves from a Pancakeswap V1 liquidity pool using Moralis DeFi API. Requires Moralis and @moralisweb3/common-evm-utils dependencies. Returns reserve values for both tokens in the pair.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-reserves.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xaebe45e3a03b734c68e5557ae04bfc76917b4686\";\n\n  const chain = EvmChain.BSC;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Price using Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to fetch the price of an SPL token on Solana using the Moralis SDK with type safety. It starts the Moralis client, defines the token address and network, and invokes `Moralis.SolApi.token.getTokenPrice`. The resulting price information is printed. Dependencies include `moralis` and `@moralisweb3/common-sol-utils`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/token-api/how-to-get-spl-token-price.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.token.getTokenPrice({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uniswap V2 Pair Address using Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to initialize the Moralis SDK and call `Moralis.EvmApi.defi.getPairAddress` to retrieve the Uniswap V2 pair address for specified token addresses (WETH and LINK) on the Ethereum chain (`EvmChain.ETHEREUM`). It depends on the Moralis SDK (`moralis`, `@moralisweb3/common-evm-utils`) and requires a valid API key. The resulting pair information is printed to the console as a JSON object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-address-of-a-liquidity-pool.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installs required packages including Moralis, Next.js and React\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install moralis @moralisweb3/next next-auth next@12.3.4 react react-dom\n```\n\n----------------------------------------\n\nTITLE: Fetching Follow NFT Metadata with Moralis\nDESCRIPTION: Retrieves NFT metadata for the profile's follow token using Moralis EvmApi. The function gets token metadata and parses it to extract the animation URL.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst followNFT = await Moralis.EvmApi.token.getTokenIdMetadata({\n  address: response?.data.profile.followNftAddress,\n  chain: 0x89,\n  tokenId: 1,\n});\n\nconst myNFT = JSON.parse(followNFT.data.metadata).animation_url;\n\nreturn {\n  props: {\n    profile: response?.data.profile,\n    nftArray: nftArray,\n    myNFT: myNFT,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies (Bash/NPM)\nDESCRIPTION: Installs the necessary Node.js packages for the backend application using npm. Dependencies include 'moralis' for Web3 API interaction, 'express' for the web server framework, 'cors' for enabling Cross-Origin Resource Sharing, 'dotenv' for environment variable management, and 'nodemon' for development server auto-restarts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis express cors dotenv nodemon\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Traits by Collection via Moralis API\nDESCRIPTION: Moralis API endpoint URL for retrieving the traits associated with NFTs within a specific collection, identified by its contract `:address`. This is the Moralis equivalent to the SimpleHash 'Traits by Collection' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/nft/:address/traits\n```\n\n----------------------------------------\n\nTITLE: Express.js Server for Proxying Moralis Balance Queries - JavaScript\nDESCRIPTION: Sets up an Express.js server to proxy Moralis Web3 API calls for fetching native and token balances for a specific address. Incorporates CORS to permit cross-origin requests from the Angular front-end, and uses Moralis SDK with EVM utilities to interact with blockchain data. Expects a valid Moralis API key. Returns JSON-formatted results for native and ERC20 token balances on GET /balances endpoint; logs and handles errors with HTTP status 500 if requests fail.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nconst express = require(\"express\");\nconst cors = require(\"cors\");\n\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst app = express();\nconst port = 3000;\n\n// allow access to Angular app domain\napp.use(\n  cors({\n    origin: \"http://localhost:4200\",\n    credentials: true,\n  })\n);\n\nconst MORALIS_API_KEY = \"replace_me\";\nconst address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\napp.get(\"/balances\", async (req, res) => {\n  try {\n    // Promise.all() for receiving data async from two endpoints\n    const [nativeBalance, tokenBalances] = await Promise.all([\n      Moralis.EvmApi.balance.getNativeBalance({\n        chain: EvmChain.ETHEREUM,\n        address,\n      }),\n      Moralis.EvmApi.token.getWalletTokenBalances({\n        chain: EvmChain.ETHEREUM,\n        address,\n      }),\n    ]);\n    res.status(200).json({\n      // formatting the output\n      address,\n      nativeBalance: nativeBalance.result.balance.ether,\n      tokenBalances: tokenBalances.result.map((token) => token.display()),\n    });\n  } catch (error) {\n    // Handle errors\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: MORALIS_API_KEY,\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\nstartServer();\n```\n\n----------------------------------------\n\nTITLE: Configuring Next-Auth with MoralisNextAuthProvider in JavaScript\nDESCRIPTION: Shows the JavaScript equivalent for setting up Next-Auth configuration in `pages/api/auth/[...nextauth].js`. It utilizes `MoralisNextAuthProvider` and configures callbacks (`jwt`, `session`) to persist user data within the session, similar to the TypeScript version.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\n\nexport default NextAuth({\n  providers: [MoralisNextAuthProvider()],\n  // adding user info to the user session object\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      session.user = token.user;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Native Balance with Moralis Wallet API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates fetching a smart contract account's native blockchain balance using the Moralis SDK. It requires the 'moralis' library, '@moralisweb3/common-evm-utils', and TypeScript setup. Essential parameters are 'address' (the account) and 'chain'. The output is logged as a JSON object showing the account's native balance. Ensure all dependencies are installed and properly typed, and replace 'YOUR_API_KEY' with a valid Moralis API key before running the script.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-account.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the Moralis library and necessary modules\\nimport Moralis from \\\"moralis\\\";\\nimport { EvmChain } from \\\"@moralisweb3/common-evm-utils\\\";\\n\\n// Define an asynchronous function runApp to retrieve the native balance of a smart contract account\\nconst runApp = async () => {\\n  // Initialize the Moralis SDK with your API key and other configurations\\n  await Moralis.start({\\n    apiKey: \\\"YOUR_API_KEY\\\",\\n    // ...and any other configuration options\\n  });\\n\\n  // Define the address of a smart contract account for which you want to fetch the native balance\\n  const address = \\\"0x350845DD3f03F1355233a3A7CEBC24b5aAD05eC5\\\";\\n\\n  // Specify the blockchain that you are working with (e.g., Ethereum)\\n  const chain = EvmChain.ETHEREUM;\\n\\n  // Use the Moralis getNativeBalance method to request the native balance\\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\\n    address,\\n    chain,\\n  });\\n\\n  // Log the response as a JSON object, which contains the native balance information\\n  console.log(response.toJSON());\\n};\\n\\n// Execute the runApp function to start the process\\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Routing for Protected View in Django (Python)\nDESCRIPTION: This Python code snippet demonstrates how to configure URL routing in a Django application's 'urls.py' file. It uses the 'path' function to map the URL path 'protected' to the 'protected' view function located in the 'views.py' module. It also assigns the name 'protected' to this URL pattern, allowing it to be easily referenced elsewhere in the Django project, such as in template URL tags.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-gating-django.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python urls.py\npath('protected', views.protected, name='protected'),\n```\n```\n\n----------------------------------------\n\nTITLE: Frontend Function Call Implementation\nDESCRIPTION: Example of how to call the Firebase Cloud Function from a frontend application without exposing the API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = firebase.functions();\n\nconst result = await functions.httpsCallable(\"getBlock\")({\n  chain: \"0x1\",\n  blockNumberOrHash: \"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171\",\n});\n```\n\n----------------------------------------\n\nTITLE: Lambda Request Handler for Fetching Native Balance in GameSparks (JavaScript)\nDESCRIPTION: This JavaScript (ES5) cloud code handler for Amazon GameSparks invokes the AWS Lambda function 'aws-node-project-dev-getNativeBalance' using player-provided 'address' and 'chain' parameters. It logs the result from the Lambda payload and returns a structured response with a parsed numeric result, following the expected schema for GameSparks request/response handlers. Dependencies include proper GameSparks Lambda integration and existing Lambda functions as described in the project setup. Input parameters must include a valid wallet address and blockchain chain identifier; the handler returns a decimal balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/aws-gamesparks-integration-with-unity.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = GameSparks().Lambda(\"aws-node-project-dev-getNativeBalance\").Invoke(\n    {\n      // Example of how you would send a parameter to Lambda\n      \"address\": message.address,\n      \"chain\": message.chain\n    }\n);\n\nGameSparks().Logging().Debug(\"Result from Lambda is:\");\nGameSparks().Logging().Debug(JSON.stringify(response.Payload));\n\nreturn GameSparks().Messaging().Response({\"result\": parseFloat(response.Payload.result)});\n```\n\n----------------------------------------\n\nTITLE: Describing Native Transaction Stream Response Structure - Moralis Streams - JSON\nDESCRIPTION: This JSON code block shows a typical response body for a webhook event that reports native transactions (txs) from Moralis Streams. It includes details like confirmation status, blockchain identifiers, block information, and a transaction array with all major transaction fields. This payload is returned when native transaction notifications are enabled for a stream. Inputs and outputs are both JSON objects with structure as depicted. Dependencies: none, but understanding blockchain and Moralis Streams context is required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/response-body.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": false,\n  \"chainId\": \"0x1\",\n  \"abi\": [],\n  \"streamId\": \"c28d9e2e-ae9d-4fe6-9fc0-5fcde2dcdd17\",\n  \"tag\": \"native_transactions\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"15988759\",\n    \"hash\": \"0x3aa07bd98e328db97ec273ce06b3a15fc645931fbd26337fe20c48b274277f76\",\n    \"timestamp\": \"1668676247\"\n  },\n  \"logs\": [],\n  \"txs\": [\n    {\n      \"hash\": \"0xd68700a0e2abd9c041eb236812e4194bf91c8182a2b03065887ab0f33d5c2958\",\n      \"gas\": \"149200\",\n      \"gasPrice\": \"13670412399\",\n      \"nonce\": \"57995\",\n      \"input\": \"0xf78dc253000000000000000000000000d9408f29026e32852aff8c5c9c8ea834b44b4e1c000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000109fad200000000000000000000000000000000000000000000009ab31572a589a72a11900000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000180000000000000003b6d0340a5c475167f03b1556c054e0da78192cd2779087fcfee7c08\",\n      \"transactionIndex\": \"52\",\n      \"fromAddress\": \"0x839d4641f97153b0ff26ab837860c479e2bd0242\",\n      \"toAddress\": \"0x1111111254eeb25477b68fb85ed929f73a960582\",\n      \"value\": \"0\",\n      \"type\": \"2\",\n      \"v\": \"1\",\n      \"r\": \"46904304245026065492026869531757792493071866863221741878090753056388581469881\",\n      \"s\": \"17075445080437932806356212399757328600893345374993510540712828450455909549452\",\n      \"receiptCumulativeGasUsed\": \"3131649\",\n      \"receiptGasUsed\": \"113816\",\n      \"receiptContractAddress\": null,\n      \"receiptRoot\": null,\n      \"receiptStatus\": \"1\"\n    }\n  ],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Swaps by Wallet Address via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve token swap data performed by a specific wallet address using the Moralis Web3 API v2.2. The ':address' parameter should be replaced with the wallet address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/wallets/:address/swaps\n```\n\n----------------------------------------\n\nTITLE: Creating and Formatting EvmAddress Instances - Moralis SDK - JavaScript\nDESCRIPTION: Covers creation of EvmAddress objects using both lowercase and checksum Ethereum addresses. Demonstrates usage of the EvmAddress.create() method and how to use the resulting instance in further operations. '@moralisweb3/common-evm-utils' needs to be installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmAddress } from \"@moralisweb3/common-evm-utils\";\n\n// by lowercase address\nconst address = EvmAddress.create(\"0xa9c4c85dd0495e32d08ef64d51fdeb35d200edfe\");\n// or by checksum\nconst address = EvmAddress.create(\"0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe\");\n```\n\n----------------------------------------\n\nTITLE: Verifying Message and Creating JWT\nDESCRIPTION: TypeScript function to verify signed message and create JWT token\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function verifyMessage({ network, signature, message }: VerifyMessage) {\n  const result = await Moralis.Auth.verify({\n    network,\n    signature,\n    message,\n  });\n\n  const authData = result.toJSON();\n\n  let { data: user } = await supabase.from('users').select('*').eq('moralis_provider_id', authData.profileId).single();\n\n  if (!user) {\n    const response = await supabase\n      .from('users')\n      .insert({ moralis_provider_id: authData.profileId, metadata: authData })\n      .single();\n    user = response.data;\n  }\n\n  const token = jwt.sign(\n    {\n      ...user,\n      aud: 'authenticated',\n      role: 'authenticated',\n      exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7,\n    },\n    config.SUPABASE_JWT,\n  );\n\n  return { user, token };\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Web3 Authentication Button with wagmi - React (JavaScript)\nDESCRIPTION: Adds wallet connection functionality to the sign-in page by using wagmi's useConnect hook and MetaMaskConnector. When the button is clicked, it initiates MetaMask connection and logs the user's account and chain ID. This snippet demonstrates wallet onboarding; the user's info is logged for test purposes. Dependencies: wagmi, pages/signin.jsx.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useConnect } from \"wagmi\";\\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\\n\\nfunction SignIn() {\\n  const { connectAsync } = useConnect();\\n\\n  const handleAuth = async () => {\\n    const { account, chain } = await connectAsync({\\n      connector: new MetaMaskConnector(),\\n    });\\n\\n    const userData = { address: account, chainId: chain.id };\\n\\n    console.log(userData);\\n  };\\n\\n  return (\\n    <div>\\n      <h3>Web3 Authentication</h3>\\n      <button onClick={handleAuth}>Authenticate via Metamask</button>\\n    </div>\\n  );\\n}\\n\\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction by Hash using Moralis SDK in TypeScript\nDESCRIPTION: Initializes the Moralis SDK with an API key and fetches transaction details using `Moralis.EvmApi.transaction.getTransaction` in a TypeScript environment. Requires `moralis` and `@moralisweb3/common-evm-utils` dependencies. Key parameters are `transactionHash` (the hash of the transaction) and `chain` (the blockchain identifier, e.g., `EvmChain.ETHEREUM`). Outputs the transaction details as a JSON object to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-a-transaction-by-transaction-hash.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const transactionHash =\n    \"0xaae93882e8a9fe9ff30151853db20e4cd161940757a01744465ab83b751c5875\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getTransaction({\n    transactionHash,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Server Endpoint for Logging Out (Node.js)\nDESCRIPTION: Defines a GET endpoint `/logout` in the Node.js/Express server. This endpoint clears the `jwt` cookie from the user's browser using `res.clearCookie('jwt')`. It sends a 200 OK status on success or a 403 Forbidden status if an error occurs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/logout\", async (req, res) => {\n  try {\n    res.clearCookie(\"jwt\");\n    return res.sendStatus(200);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC-20 Token Balances with Moralis - JavaScript\nDESCRIPTION: Expands getDemoData to also fetch ERC-20 token balances using Moralis.EvmApi.token.getWalletTokenBalances. Maps and formats token balances for readability, returning both native and token balances in the output. This demonstrates how to build multi-asset responses with the Moralis API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getDemoData() {\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n  const native = nativeBalance.result.balance.ether;\n\n  // Get token balances\n  const tokenBalances = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  // Format the balances to a readable output with the .display() method\n  const tokens = tokenBalances.result.map((token) => token.display());\n\n  // Add tokens to the output\n  return { native, tokens };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Project URL Patterns in Django (Python)\nDESCRIPTION: This code configures the main URL routing for the Django project in `urls.py`. It includes URL patterns for the Django admin interface, the custom `web3_auth` application (prefixing its routes with `/web3_auth/`), and the built-in Django authentication URLs (like logout) under the `/auth/` prefix. Dependencies include `django.urls` and `django.contrib.admin`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('web3_auth/', include('web3_auth.urls')),\n    path('auth/', include('django.contrib.auth.urls')),\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC-20 Token Metadata with Moralis API in Python\nDESCRIPTION: This function, `get_token_metadata`, retrieves metadata for a specified ERC-20 token by querying the Moralis API. It dynamically determines the network (mainnet or testnet) using the agent's wallet context and outputs formatted information about the token or an error message. Dependencies include an environment variable for the Moralis API key and external modules such as `requests` and access to an `agent_wallet` object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_token_metadata(token_address: str) -> str:\\n    \"\"\"\\n    Fetch metadata for an ERC-20 token using the Moralis API.\\n    Automatically determines if the network is mainnet or testnet.\\n\\n    Args:\\n        token_address (str): The address of the ERC-20 token\\n\\n    Returns:\\n        str: A message with the token metadata or an error message if unsuccessful\\n    \"\"\"\\n    # Read the Moralis API key from the environment\\n    if not MORALIS_API_KEY:\\n        return \"Error: Moralis API key is missing. Please set the MORALIS_API_KEY environment variable.\"\\n\\n    # Determine the network dynamically based on the agent's current network ID\\n    is_mainnet = agent_wallet.network_id in [\"base\", \"base-mainnet\"]\\n    chain = \"base\" if is_mainnet else \"base sepolia\"\\n\\n    # API endpoint and headers\\n    url = \"https://deep-index.moralis.io/api/v2.2/erc20/metadata\"\\n    headers = {\\n        \"accept\": \"application/json\",\\n        \"X-API-Key\": MORALIS_API_KEY\\n    }\\n    params = {\\n        \"chain\": chain,\\n        \"addresses[0]\": token_address\\n    }\\n\\n    # Fetch token metadata\\n    try:\\n        response = requests.get(url, headers=headers, params=params)\\n        response.raise_for_status()\\n        metadata = response.json()\\n\\n        if metadata:\\n            token_data = metadata[0]\\n            return (\\n                f\"Token Name: {token_data.get('name')}\\\\n\"\\n                f\"Symbol: {token_data.get('symbol')}\\\\n\"\\n                f\"Decimals: {token_data.get('decimals')}\\\\n\"\\n                f\"Total Supply: {token_data.get('total_supply_formatted')}\\\\n\"\\n                f\"Contract Address: {token_data.get('address')}\\\\n\"\\n                f\"Verified: {token_data.get('verified_contract')}\\\\n\"\\n                f\"Logo URL: {token_data.get('logo')}\\\\n\"\\n            )\\n        else:\\n            return \"No metadata found for the provided token address.\"\\n\\n    except requests.exceptions.RequestException as e:\\n        return f\"Error fetching token metadata: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Routes\nDESCRIPTION: TypeScript code for setting up routing to the balances component\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BalancesComponent } from \"./balances/balances.component\";\n\nconst routes: Routes = [{ path: \"balances\", component: BalancesComponent }];\n```\n\n----------------------------------------\n\nTITLE: Querying All Streams via Moralis SDK - JavaScript\nDESCRIPTION: Retrieves a list of all Moralis streams using the SDK's getAll method. Optionally limits the returned streams through the limit parameter. Requires Moralis SDK to be initialized and proper API key authentication. Returns an array of stream objects with their details, or an empty array if no streams exist.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/stream-management.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst streams = await Moralis.Streams.getAll({\n  limit: 100, // limit the number of streams to return\n});\nOr you can see all streams in the Admin Panel\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Data with Entity Enrichment in JSON\nDESCRIPTION: Example response showing a blockchain transaction enriched with entity data, including address labels, entity names, and logos for both sender and receiver addresses. The response includes detailed transaction information like hash, gas usage, timestamps and block details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/00-General FAQs/04-entities-and-labelling.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"0x70c30285a9a4cc1c147cc94e5d0cefebe693fffd5fd5cbf727e2f86b6829d71b\",\n  \"nonce\": \"6810858\",\n  \"transaction_index\": \"72\",\n  \"from_address\": \"Oxa9d1e08c7793af67e9d92fe308d5697fb81d3e43\",\n  \"from_address_label\": \"Coinbase: Hot Wallet\",\n  \"from_address_entity\": \"Coinbase\",\n  \"from_address_entity_logo\": \"https://entities-logos.s3.us-east-1.amazonaws.com/coinbase.png\",\n  \"to_address\": \"Oxa9d1e08c7793af67e9d92fe308d5697fb81d3e43\",\n  \"to_address_label\": \"Blackrock Wallet\",\n  \"to_address_entity\": \"Blackrock, Inc\",\n  \"to_address_entity_logo\": \"https://entities-logos.s3.us-east-1.amazonaws.com/blackrock.png\",\n  \"value\": \"0\",\n  \"gas\": \"207128\",\n  \"gas_price\": \"32393720336\",\n  \"input\": \"0xa9059cbb000000000000000000000000c476723407b737c173bdfd87c7abc80f6856e6320000000000000000000000000000000000000000000000008533e3870aec3000\",\n  \"receipt_cumulative_gas_used\": \"8535588\",\n  \"receipt_gas_used\": \"52089\",\n  \"receipt_contract_address\": null,\n  \"receipt_root\": null,\n  \"receipt_status\": \"1\",\n  \"block_timestamp\": \"2023-06-26T16:48:23.000Z\",\n  \"block_number\": \"17564884\",\n  \"block_hash\": \"0x4e61fbb792a84c419a22ffcc590cbcb2f5a1b88d8e864d608e3544a3594c0e69\",\n  \"transfer_index\": [17564884, 72]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Package.json Configuration\nDESCRIPTION: Initial package.json file with basic project metadata and configuration\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"simple-nextjs-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Bonding Pump.fun Tokens via Moralis Solana API (Shell)\nDESCRIPTION: Demonstrates fetching a list of bonding tokens on Pump.fun using the Moralis Solana REST API through a cURL GET request. Requires a valid Moralis API key, which must be supplied in the 'X-API-Key' header. The example fetches the first 100 tokens with details on address, pricing, progress, and more. The endpoint responds with JSON containing the token data for further processing. This request must be executed in a shell environment with cURL installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/07-get-bonding-tokens.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/token/mainnet/exchange/pumpfun/bonding?limit=100' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Fetching Top ERC20 Tokens by Price Change using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch the top ERC20 tokens based on price movers using the Moralis SDK. It initializes the Moralis SDK with an API key and then calls the `getTopERC20TokensByPriceMovers` method from the `EvmApi.marketData` module. The raw response containing gainers and losers is printed to the console. Requires `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-ERC20-tokens-by-price-change.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getTopERC20TokensByPriceMovers();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Wallet NFTs via Moralis API in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to use the Moralis SDK to retrieve all NFTs owned by a specific wallet across multiple EVM-compatible chains (Ethereum, BSC, Polygon). Dependencies include the 'moralis' package and '@moralisweb3/common-evm-utils'. The script initializes Moralis with an API key, defines the target address and desired chains, then iterates over the chains to fetch NFTs using 'getWalletNFTs'. The final aggregated result is logged to the console. The parameters to customize are your API key and the list of chains.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying Endpoint Weights Using Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to initialize the Moralis SDK with your API key and query the API for endpoint weights, which includes the compute unit price and rate limit cost for each endpoint. It requires installing the 'moralis' npm package. Replace 'YOUR_API_KEY' with your actual Moralis API key. The expected output is a JSON object listing each endpoint's path, CU price, and rate limit cost.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/02-compute-units-cu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.utils.endpointWeights();\n\nconsole.log(response?.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Pair Statistics via Moralis API\nDESCRIPTION: Fetches statistics for a specific token pair identified by its address using the Moralis Deep Index API v2.2. Requires the pair `:address` path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2//pairs/:address/stats\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Transfers with JavaScript\nDESCRIPTION: JavaScript implementation to retrieve NFT transfers for a wallet using Moralis EvmApi. Requires Moralis and common-evm-utils dependencies. Takes wallet address and chain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-NFT-transfers-by-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth and Moralis Authentication Provider - JavaScript\nDESCRIPTION: Implements NextAuth on the backend API route using Moralis as a custom authentication provider. The code defines callbacks to enhance the JWT and session objects with user info. Place this in pages/api/auth/[...nextauth].js. Requires @moralisweb3/next for MoralisNextAuthProvider and next-auth for NextAuth. Handles JWT token and session shaping for Web3 user sessions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\n\nexport default NextAuth({\n  providers: [MoralisNextAuthProvider()],\n  // adding user info to the user session object\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      session.user = token.user;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance with Moralis SDK (Python)\nDESCRIPTION: Uses the Moralis Python SDK (`moralis.evm_api`) to fetch the native balance of an EVM address. Requires the `moralis` package, a Moralis `api_key`, and parameters including the target `address` and `chain` identifier (e.g., 'eth'). Outputs the balance result to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-balance-of-a-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.balance.get_native_balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Token Price with Moralis API in Python\nDESCRIPTION: This Python example demonstrates how to retrieve the price of a specific ERC20 token using the Moralis API. It requires the 'moralis' Python library (install via pip). Key parameters include 'address' (ERC20 contract address) and 'chain' (blockchain, e.g., 'eth'). The returned result is printed in standard output. Ensure your API key is set and dependencies are installed prior to running.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-the-price-of-an-erc20-token.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_token_price(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Token Price with Moralis API in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to obtain the price of an ERC20 token using Moralis. Dependencies include 'moralis' and '@moralisweb3/common-evm-utils'. The 'address' and 'chain' parameters identify the ERC20 token and network. The result is logged as JSON. Be sure to provide your own Moralis API key, and run the code in a TypeScript-compatible environment after installing the required packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-the-price-of-an-erc20-token.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenPrice({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating an NFT Transfer Monitoring Stream with Moralis JavaScript SDK\nDESCRIPTION: This snippet shows how to programmatically create a stream that monitors all NFT transfers from a specific sender address using Moralis Streams API. It defines the NFT transfer ABI, specifies the Ethereum chain, and uses advanced filtering to track transfers from a particular address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-listen-to-all-nft-transfers-sent-from-a-specific-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst NFT_transfer_ABI = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"tokenId\", \"type\": \"uint256\" },\n  ],\n  \"name\": \"transfer\",\n  \"type\": \"event\",\n}]; // valid abi of the event\n\nconst options = {\n  chains: [EvmChain.ETHEREUM], // list of blockchains to monitor\n  description: \"monitor all NFT transfers\", // your description\n  tag: \"NFT_transfers\", // give it a tag\n  abi: NFT_transfer_ABI,\n  includeContractLogs: true,\n  allAddresses: true,\n  topic0: [\"transfer(address,address,uint256)\"], // topic of the event\n  advancedOptions: [\n    {\n      topic0: \"transfer(address,address,uint256)\",\n      filter: { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] }, // only receive NFT transfer events from this address\n    },\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\", // webhook url to receive events,\n};\n\nconst stream = await Moralis.Streams.add(options);\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with MoralisNextAuthProvider (JavaScript)\nDESCRIPTION: Set up NextAuth with MoralisNextAuthProvider and configure callbacks for JWT and session management in JavaScript.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\n\nexport default NextAuth({\n  providers: [MoralisNextAuthProvider()],\n  // adding user info to the user session object\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      session.user = token.user;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Multi-Chain Wallet Activity using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to fetch the active chains for a specific wallet address. It initializes the Moralis SDK with an API key, defines the target wallet address and the chains to query (Ethereum, BSC, Polygon), then calls `Moralis.EvmApi.wallets.getWalletActiveChains`. The response, containing details about the first and last transactions on each active chain, is logged to the console. Requires `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/01-Wallet Details/how-to-get-multichain-activity-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  const response = await Moralis.EvmApi.wallets.getWalletActiveChains({\n    address,\n    chains,\n  });\n  \n  console.log(response.toJSON());\n}\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Balance Fetching with ethers.js\nDESCRIPTION: JavaScript implementation using ethers.js to fetch NFT balances from a specified wallet address using Moralis RPC nodes. The code initializes a provider and makes an eth_getNFTBalances RPC call.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-nft-balances.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Load environment variables\nrequire(\"dotenv\").config();\n\n// Import ethers.js\nconst { ethers } = require(\"ethers\");\n\nasync function getAllNFTs() {\n  // Initialize the provider using the Moralis RPC URL from the .env file\n  const provider = new ethers.providers.JsonRpcProvider(\n    process.env.MORALIS_NODE_URL\n  );\n\n  // Send the eth_getNFTBalances request with the wallet address\n  const response = await provider.send(\"eth_getNFTBalances\", [\n    {\n      address: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\", // Replace this with the wallet address you want to query\n      chain: \"eth\", // Specify the chain, e.g., Ethereum Mainnet\n    },\n  ]);\n\n  // Log the response to the console\n  console.log(response);\n}\n\n// Call the function to fetch NFTs\ngetAllNFTs();\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless YAML for AWS Lambda with Moralis\nDESCRIPTION: YAML configuration for the Serverless project, including environment variables and function settings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nservice: aws-node-express-api-project\nframeworkVersion: '3'\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  environment:\n    MORALIS_API_KEY: 'replace_me'\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  api:\n    handler: handler.handler\n    events:\n      - httpApi: '*'\n```\n\n----------------------------------------\n\nTITLE: Creating Moralis Stream for ENS Registrations in Python\nDESCRIPTION: Demonstrates creating a Moralis Stream using the Python SDK to monitor ENS 'NameRegistered' events. The script defines the event ABI, sets up advanced filtering options based on owner and cost (>1 ETH), configures stream parameters (webhook, description, tag, topic, chain ID), creates the stream, and adds the ENS Registry address. Requires the Moralis Python SDK (`pip install moralis`), a webhook URL, and an API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-monitor-ens-domain-registrations.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nrequiremets: moralis python sdk\nyou can run this command to install it:\npip install moralis\n\"\"\"\n\nfrom moralis import streams\n\n\nwebhook_url = 'WEB_HOOK_URL_HERE'\napi_key = 'API_KEY_HERE'\n\nabi = [{\n  \"anonymous\": False,\n  \"inputs\": [\n    {\n      \"indexed\": False,\n      \"internalType\": \"string\",\n      \"name\": \"name\",\n      \"type\": \"string\",\n    },\n    {\n      \"indexed\": True,\n      \"internalType\": \"bytes32\",\n      \"name\": \"label\",\n      \"type\": \"bytes32\",\n    },\n    {\n      \"indexed\": True,\n      \"internalType\": \"address\",\n      \"name\": \"owner\",\n      \"type\": \"address\",\n    },\n    {\n      \"indexed\": False,\n      \"internalType\": \"uint256\",\n      \"name\": \"cost\",\n      \"type\": \"uint256\",\n    },\n    {\n      \"indexed\": False,\n      \"internalType\": \"uint256\",\n      \"name\": \"expires\",\n      \"type\": \"uint256\",\n    },\n  ],\n  \"name\": \"NameRegistered\",\n  \"type\": \"event\",\n}]\n\nadvanced_options = [\n  {\n    \"topic0\": \"NameRegistered(string,bytes32,address,uint256,uint256)\",\n    \"filter\": {\n      \"and\": [\n        { \"eq\": [\"owner\", \"0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5\"] },\n        { \"gt\": [\"cost\", \"1000000000000000000\"] }\n      ]\n    }\n  }\n]\n\nbody = {\n    \"webhookUrl\": webhook_url,\n    \"description\": \"ENS Name Registrations\",\n    \"tag\": \"ensRegistrationByBob\",\n    \"topic0\": [\"NameRegistered(string,bytes32,address,uint256,uint256)\"],\n    \"allAddresses\": False,\n    \"includeNativeTxs\": True,\n    \"includeContractLogs\": True,\n    \"includeInternalTxs\": False,\n    \"abi\": abi,\n    \"advancedOptions\": advanced_options,\n    \"chainIds\": [\"0x1\"],\n}\n\nresult = streams.evm.create_stream(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n\n# Attach the contract address to the stream\nparams = {\n    \"id\": result[\"id\"],\n}\nbody = {\n    \"address\": \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n}\n\nresult = streams.evm.add_address_to_stream(\n    api_key=api_key,\n    params=params,\n    body=body,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Authentication with Express and Moralis\nDESCRIPTION: JavaScript code for the server-side implementation of Web3 authentication using Express.js and Moralis, including endpoints for requesting messages, verifying signatures, and handling user sessions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nconst cookieParser = require(\"cookie-parser\");\nconst jwt = require(\"jsonwebtoken\");\n\nrequire(\"dotenv\").config();\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\napp.use(cookieParser());\n\napp.use(\n  cors({\n    origin: process.env.ANGULAR_URL,\n    credentials: true,\n  })\n);\n\nconst config = {\n  domain: process.env.APP_DOMAIN,\n  statement: \"Please sign this message to confirm your identity.\",\n  uri: process.env.ANGULAR_URL,\n  timeout: 60,\n};\n\napp.post(\"/request-message\", async (req, res) => {\n  const { address, chain } = req.body;\n\n  try {\n    const message = await Moralis.Auth.requestMessage({\n      address,\n      chain,\n      ...config,\n    });\n\n    res.status(200).json(message);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n\napp.post(\"/verify\", async (req, res) => {\n  try {\n    const { message, signature } = req.body;\n\n    const { address, profileId } = (\n      await Moralis.Auth.verify({\n        message,\n        signature,\n        networkType: \"evm\",\n      })\n    ).raw;\n\n    const user = { address, profileId, signature };\n\n    const token = jwt.sign(user, process.env.AUTH_SECRET);\n\n    res.cookie(\"jwt\", token, {\n      httpOnly: true,\n    });\n\n    res.status(200).json(user);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n\napp.get(\"/authenticate\", async (req, res) => {\n  const token = req.cookies.jwt;\n  if (!token) return res.sendStatus(403);\n\n  try {\n    const data = jwt.verify(token, process.env.AUTH_SECRET);\n    res.json(data);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n\napp.get(\"/logout\", async (req, res) => {\n  try {\n    res.clearCookie(\"jwt\");\n    return res.sendStatus(200);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\nstartServer();\n```\n\n----------------------------------------\n\nTITLE: IP Rate Limiting Middleware Implementation\nDESCRIPTION: Complete implementation of IP-based rate limiting middleware for Firebase Cloud Functions using firebase-functions-rate-limiter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as admin from \"firebase-admin\";\nimport * as functions from \"firebase-functions\";\nimport { FirebaseFunctionsRateLimiter } from \"firebase-functions-rate-limiter\";\nimport { CallableContext } from \"firebase-functions/v1/https\";\nimport { OnCallHandler } from \"./OnCallHandler\";\n\nexport type OnCallHandler<T> = (\n  data: T,\n  context: CallableContext\n) => Promise<unknown>;\n\nexport class IpRateLimiter {\n  public constructor(private readonly limiter: FirebaseFunctionsRateLimiter) {}\n\n  public readonly wrap = <T>(handler: OnCallHandler<T>) => {\n    return async (data: T, context: CallableContext) => {\n      const qualifier = \"ip-\" + this.readNormalizedIp(context.rawRequest);\n\n      await this.limiter.rejectOnQuotaExceededOrRecordUsage(qualifier);\n\n      return await handler(data, context);\n    };\n  };\n\n  private readNormalizedIp(request: functions.https.Request): string {\n    return request.ip ? request.ip.replace(/\\.|:/g, \"-\") : \"unknown\";\n  }\n}\n\nexport function ipRateLimiterMiddleware(firestore: admin.firestore.Firestore) {\n  const limiter = FirebaseFunctionsRateLimiter.withFirestoreBackend(\n    {\n      name: \"rateLimiter\",\n      maxCalls: 10,\n      periodSeconds: 5,\n    },\n    firestore\n  );\n  return new IpRateLimiter(limiter).wrap;\n}\n```\n\n----------------------------------------\n\nTITLE: Example NFT Metadata Response\nDESCRIPTION: Shows the JSON response structure returned by the getNFTMetadata endpoint, including token details, metadata, and ownership information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/02-NFT Metadata/how-to-get-the-metadata-of-an-nft.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n  \"token_id\": \"3931\",\n  \"transfer_index\": [13868997, 30, 36, 0],\n  \"owner_of\": \"0x1cf2b8c64aed32bff2ae80e701681316d3212afd\",\n  \"block_number\": \"13868997\",\n  \"block_number_minted\": \"5754322\",\n  \"token_hash\": \"3c86855c82470edd82df190019e83f16\",\n  \"amount\": \"1\",\n  \"contract_type\": null,\n  \"name\": \"CRYPTOPUNKS\",\n  \"symbol\": \"Ͼ\",\n  \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/3931\",\n  \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk3931.webp\\\",\\\"name\\\":\\\"CryptoPunk 3931\\\",\\\"attributes\\\":[\\\"Vampire Hair\\\",\\\"Goat\\\"],\\\"description\\\":\\\"Male\\\"}\",\n  \"last_token_uri_sync\": null,\n  \"last_metadata_sync\": \"2022-05-12T18:00:22.340Z\",\n  \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Block Number in Python\nDESCRIPTION: This Python snippet uses Moralis SDK to retrieve the closest block to a specific date using the get_date_to_block endpoint. It accepts a date in any format supported by moment.js and optionally specifies the blockchain to query.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"date\": \"2023-07-05\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.block.get_date_to_block(\n    api_key=api_key,\n    params=params,\n)\n\n# Converting it to JSON because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Transfers in Python\nDESCRIPTION: Python implementation to fetch ERC20 token transfers for a specific wallet address using Moralis SDK. Requires Moralis API key and uses the 'eth' chain parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-erc20-transfers-by-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_wallet_token_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Stream Options with Topic0 and Filters in JSON\nDESCRIPTION: Example configuration showing how to set up advanced stream options to filter ERC20 transfers. The configuration includes topic0 for Transfer events, custom filters for sender address and amount, and native transaction settings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/useful-streams-options.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic0\": \"Transfer(address,address,uint256)\",\n  \"filter\": {\n    \"and\": [\n      { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] },\n      { \"gt\": [\"amount\", \"100000000000000000000\"] }\n    ]\n  },\n  \"includeNativeTxs\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Axelar Cross-Chain Token Distribution Contract\nDESCRIPTION: The complete implementation of the GMPDistribution contract with both sendToMany and _executeWithToken functions, enabling cross-chain token transfers and distribution to multiple recipients. This contract integrates with Axelar's GMP protocol to handle the interchain messaging.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.19;\n\nimport { AxelarExecutable } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\";\nimport { IAxelarGateway } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\";\nimport { IAxelarGasService } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract GMPDistribution is AxelarExecutable {\n\n    IAxelarGasService public immutable gasService;\n\n    constructor(\n        address _gateway,\n        address _gasService\n    ) AxelarExecutable(_gateway) {\n        gasService = IAxelarGasService(_gasService);\n    }\n\n    function sendToMany(\n    string memory _destChain,\n    string memory _destContractAddr,\n    address[] calldata _destinationAddrs,\n    string memory _symbol,\n    uint256 _amount\n    ) external payable {\n\n        require(msg.value > 0, \"Gas payment required\");\n\n        address tokenAddress = gateway.tokenAddresses(_symbol);\n\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), _amount);\n\n        IERC20(tokenAddress).approve(address(gateway), _amount);\n\n        bytes memory recipientAddressesEncoded = abi.encode(_destinationAddrs);\n\n        gasService.payNativeGasForContractCallWithToken{value: msg.value}(\n            address(this),\n            _destChain,\n            _destContractAddr,\n            recipientAddressesEncoded,\n            _symbol,\n            _amount,\n            msg.sender\n        );\n\n        gateway.callContractWithToken(\n            _destChain,\n            _destContractAddr,\n            recipientAddressesEncoded,\n            _symbol,\n            _amount\n        );\n    }\n\n    function _executeWithToken(\n    string calldata,\n    string calldata,\n    bytes calldata _payload,\n    string calldata _tokenSymbol,\n    uint256 _amount\n    ) internal override {\n        address[] memory recipients = abi.decode(_payload, (address[]));\n\n        address tokenAddress = gateway.tokenAddresses(_tokenSymbol);\n\n        uint256 sentAmount = _amount / recipients.length;\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n            IERC20(tokenAddress).transfer(recipients[i], sentAmount);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Sushiswap V2 Pair Address in JavaScript\nDESCRIPTION: JavaScript implementation for retrieving a Sushiswap V2 pair address using Moralis DeFi API. Requires Moralis SDK and common-evm-utils. Takes token0 (WETH) and token1 (LINK) addresses as inputs and returns pair address details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"sushiswapv2\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying Closest Block by Unix Timestamp with Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates setting up the Moralis SDK and calling the getDateToBlock endpoint to retrieve the closest Ethereum block for a specified unix timestamp. Dependencies include the moralis SDK and @moralisweb3/common-evm-utils; ensure you have a valid Moralis API key. The parameters date (as a string unix timestamp) and chain (from EvmChain) must be specified, and the returned block data is logged in JSON format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-by-unix-timestamp.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const date = \"1667823435\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getDateToBlock({\n    date,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing Moralis SDK (JavaScript)\nDESCRIPTION: Imports the Moralis SDK into the `pages/index.js` file. This makes the Moralis functionality available for use within the component, specifically within `getServerSideProps`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from 'moralis';\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Owners with Pagination using Moralis NodeJS SDK\nDESCRIPTION: This NodeJS snippet demonstrates how to retrieve all NFT owners for a specific contract address using the Moralis SDK's cursor pagination. It initializes the Moralis SDK, sets the target address and chain, and then iteratively fetches pages of NFT owners using `Moralis.EvmApi.nft.getNFTOwners`. A `do...while` loop continues fetching pages as long as a valid cursor is returned, accumulating owner data into an object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/03-pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\nconst init = async () => {\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\"; //Cryptopunks contract address\n  const chain = EvmChain.ETHEREUM;\n  await Moralis.start({\n    apiKey: \"MORALIS_API_KEY\",\n    // ...and any other configuration\n  });\n  let cursor = null;\n  let owners = {};\n  do {\n    const response = await Moralis.EvmApi.nft.getNFTOwners({\n      address,\n      chain,\n      limit: 100,\n      cursor: cursor,\n      disableTotal: false,\n    });\n    console.log(\n      `Got page ${response.pagination.page} of ${Math.ceil(\n        response.pagination.total / response.pagination.pageSize\n      )}, ${response.pagination.total} total`\n    );\n    for (const NFT of response.result) {\n      if (NFT.ownerOf.checksum in owners) {\n        owners[NFT.ownerOf.checksum].push({\n          amount: NFT.amount,\n          owner: NFT.ownerOf,\n          tokenId: NFT.tokenId,\n          tokenAddress: NFT.tokenAddress,\n        });\n      } else {\n        owners[NFT.ownerOf.checksum] = [\n          {\n            amount: NFT.amount,\n            owner: NFT.ownerOf,\n            tokenId: NFT.tokenId,\n            tokenAddress: NFT.tokenAddress,\n          },\n        ];\n      }\n    }\n    cursor = response.pagination.cursor;\n  } while (cursor != \"\" && cursor != null);\n  console.log(\"owners:\", owners, \"total owners:\", Object.keys(owners).length);\n};\ninit();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Stream with Moralis Streams SDK - Python\nDESCRIPTION: This Python snippet deletes a stream by its unique ID using the Moralis SDK. It requires the moralis Python package and a valid API key. The script sends a delete request and prints the resulting status or data from the operation. Only the stream ID is required as parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"id\": \"4f7dbfb3-42c9-4d8d-bbba-975ea2d2b1a1\",\n}\n\nresults = streams.evm_streams.delete_stream(api_key=api_key, params=params)\nprint(results)\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs Across Chains with Moralis SDK (Python)\nDESCRIPTION: Uses the `moralis` Python SDK to fetch NFTs for a specific wallet address across multiple chains (ETH, BSC, Polygon). It initializes parameters including the API key, address, and other options like `normalizeMetadata`. It iterates through the specified chains, calls `evm_api.nft.get_wallet_nfts` for each, appends the results to a list, and finally prints the aggregated results as a JSON string. Requires the `moralis` Python package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 1,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = []\nfor chain in ('eth', 'bsc', 'polygon'):\n\tparams['chain'] = chain\n\tresult += [evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n\t)]\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Balances in TypeScript\nDESCRIPTION: TypeScript implementation to get all ERC20 tokens owned by an address using Moralis SDK. Requires Moralis and @moralisweb3/common-evm-utils packages. Returns token balances including address, name, symbol, logo, and balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Firebase Authentication\nDESCRIPTION: Command to login to Firebase CLI\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfirebase login\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Metadata with Moralis SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to fetch metadata (name, symbol, decimals) for one or more ERC20 tokens using the Moralis TypeScript SDK. It involves initializing the Moralis SDK with an API key, providing an array of token contract addresses, and specifying the blockchain chain (e.g., EvmChain.ETHEREUM). The raw API response is logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const addresses = [\"ERC20_TOKEN_ADDRESS\"];\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getTokenMetadata({\n    chain,\n    addresses,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs with JavaScript\nDESCRIPTION: JavaScript implementation to fetch NFTs owned by a wallet address across multiple chains using Moralis API. Uses the EvmApi.nft.getWalletNFTs endpoint to query NFTs on Ethereum, BSC, and Polygon networks.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet ERC20 Balances using Moralis JavaScript SDK\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch all ERC20 token balances for a specified wallet address on a given EVM chain using the Moralis SDK. It requires initializing the Moralis SDK with an API key and then calls `Moralis.EvmApi.token.getWalletTokenBalances` with the target address and chain. The response containing the token balances is logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Wallet Analysis Endpoints\nDESCRIPTION: HTTP GET endpoints for retrieving wallet-related data including history, approvals, and net worth calculations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/09-reservoir-migration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/wallets/:address/history\nGET https://deep-index.moralis.io/api/v2.2/wallets/:address/approvals\nGET https://deep-index.moralis.io/api/v2.2/wallets/:address/net-worth\n```\n\n----------------------------------------\n\nTITLE: Fetching EVM Native Balance with useEvmNativeBalance Hook\nDESCRIPTION: Demonstrates using the `useEvmNativeBalance` hook from `@moralisweb3/next` within the `HomePage` component. It fetches the native balance (e.g., ETH) for a specified wallet `address` and displays the address and balance. The hook handles data fetching and state management.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEvmNativeBalance } from \"@moralisweb3/next\";\n\nfunction HomePage() {\n  const address = \"0x1...\";\n  const { data: nativeBalance } = useEvmNativeBalance({ address });\n  return (\n    <div>\n      <h3>Wallet: {address}</h3>\n      <h3>Native Balance: {nativeBalance?.balance.ether} ETH</h3>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n----------------------------------------\n\nTITLE: Complete handler.js for Express API with Moralis Endpoints (JavaScript)\nDESCRIPTION: Presents the final, complete code for the `handler.js` file. This file sets up an Express server configured for AWS Lambda using `serverless-http`, includes `body-parser` middleware, initializes the Moralis SDK using an environment variable, and defines three endpoints: a root endpoint ('/'), `/getNativeBalance` to fetch native balances via Moralis, and `/getWalletNfts` to fetch wallet NFTs via Moralis. Error handling is included for the Moralis API calls.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst serverless = require(\"serverless-http\");\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst Moralis = require(\"moralis\").default;\n\nconst app = express();\n\n// Accept all type of request body format\napp.use(bodyParser.json());\napp.use(bodyParser.raw());\napp.use(bodyParser.text());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Start Moralis\nconst startMoralis = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n};\n\nstartMoralis();\n\napp.get(\"/\", (req, res, next) => {\n  return res.status(200).json({\n    message: \"Hello from root!\",\n  });\n});\n\napp.get(\"/getNativeBalance\", async (req, res, next) => {\n  try {\n    // Get native balance\n    const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n      address: req.body.address,\n      chain: req.body.chain,\n    });\n\n    // Format the native balance formatted in ether via the .ether getter\n    const nativeBalanceEther = nativeBalance.result.balance.ether;\n\n    res.status(200);\n    res.send(nativeBalanceEther);\n  } catch (error) {\n    // Handle errors\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\napp.get(\"/getWalletNfts\", async (req, res, next) => {\n  try {\n    // Get wallet NFTs\n    const nfts = await Moralis.EvmApi.nft.getWalletNFTs({\n      address: req.body.address,\n      chain: req.body.chain,\n      limit: 10,\n    });\n\n    res.status(200);\n    res.json(nfts);\n  } catch (error) {\n    // Handle errors\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\nmodule.exports.handler = serverless(app);\n```\n\n----------------------------------------\n\nTITLE: Updating package.json with Start Script\nDESCRIPTION: Adds a start script to package.json for running the Express server with nodemon for auto-reloading.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"blockchainbot\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"nodemon index.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"discord.js\": \"^14.6.0\",\n    \"dotenv\": \"^16.0.3\",\n    \"express\": \"^4.18.2\",\n    \"moralis\": \"^2.6.7\",\n    \"nodemon\": \"^2.0.20\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Moralis Auth Adapter for Parse Server\nDESCRIPTION: Implementation of a custom authentication adapter for Parse Server that uses Moralis Auth API to verify Web3 authentication requests and process the authentication data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nfunction validateAuthData(authData: any) {\n  const { message, signature, network, id, authId } = authData;\n\n  return Moralis.Auth.verify({\n    message,\n    signature,\n    network,\n  })\n    .then((result) => {\n      const data = result.toJSON();\n\n      if (id === data.profileId && authId === data.id) {\n        authData.chainId = result.result.chain.decimal;\n        authData.nonce = data.nonce;\n        authData.address = result.result.address.checksum;\n        authData.version = data.version;\n        authData.domain = data.domain;\n        authData.expirationTime = data.expirationTime;\n        authData.notBefore = data.notBefore;\n        authData.resources = data.resources;\n        authData.statement = data.statement;\n        authData.uri = data.uri;\n        return;\n      }\n\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Moralis auth failed, invalid data');\n    })\n    .catch(() => {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Moralis auth failed, invalid data');\n    });\n}\n\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\nexport default {\n  validateAuthData,\n  validateAppId,\n};\n```\n\n----------------------------------------\n\nTITLE: Get Solana Wallet Balance Using JavaScript\nDESCRIPTION: JavaScript implementation to fetch native Solana balance using Moralis API. Requires Moralis and @moralisweb3/common-sol-utils packages. Returns balance in both lamports and SOL.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/balance-api/how-to-get-native-solana-balance-by-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getBalance({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC-20 Token Balances using Moralis SDK in C#\nDESCRIPTION: Uses the Moralis .NET SDK to retrieve a list of ERC-20 token balances associated with the specified wallet address and chain ID. It calls the `GetTokenBalances` method from the `MoralisClient.Web3Api.Account` endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Load ERC-20 Token List for address\nList<Erc20TokenBalance> erc20Balnaces = await MoralisClient.Web3Api.Account.GetTokenBalances(address, chainId);\n```\n\n----------------------------------------\n\nTITLE: Setting Moralis API Key Environment Variable (TypeScript/.env)\nDESCRIPTION: Creates a '.env' file in the backend directory to store sensitive information like the Moralis API Key. The key should replace 'YOUR_KEY_HERE'. This file is typically ignored by version control.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nMORALIS_API_KEY = YOUR_KEY_HERE\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Post Creation and Transaction Handling\nDESCRIPTION: TypeScript code for creating a new PDA account, initiating a transaction to create a new blog post, and handling the transaction confirmation in the frontend application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `src/components/templates/microBlog/MicroBlog.tsx`\n\n// `createBlog` function is triggered with a button click from frontend.\n  const createBlog = async () => {\n    // Account Creation --- Start\n    const SEED = 'secret_phrase_to_recover_account_address';\n    class BlogCount {\n      total_blogs = 0;\n      constructor(fields: { total_blogs: number } | undefined = undefined) {\n        if (fields) {\n          this.total_blogs = fields.total_blogs;\n        }\n      }\n    }\n    const BlogSchema = new Map([\n      [\n        BlogCount,\n        {\n          kind: 'struct',\n          fields: [['total_blogs', 'u32']],\n        },\n      ],\n    ]);\n    const DATA_SIZE = borsh.serialize(BlogSchema, new BlogCount()).length;\n    const accountPubkey = await PublicKey.createWithSeed(publicKey, SEED, new PublicKey(programId));\n    const blogAccount = await connection.getAccountInfo(accountPubkey);\n\n    if (blogAccount === null) {\n      const lamports = await connection.getMinimumBalanceForRentExemption(DATA_SIZE);\n      // Transaction for account creation\n      const AccountCreation = new Transaction();\n      AccountCreation.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: publicKey,\n          basePubkey: publicKey,\n          seed: SEED,\n          newAccountPubkey: accountPubkey,\n          lamports,\n          space: DATA_SIZE,\n          programId: new PublicKey(programId),\n        }),\n      );\n      const {\n        context: { slot: minContextSlot },\n        value: { blockhash, lastValidBlockHeight },\n      } = await connection.getLatestBlockhashAndContext();\n\n      const signature = await sendTransaction(AccountCreation, connection, {\n        minContextSlot,\n        skipPreflight: true,\n        signers: [],\n        preflightCommitment: 'processed',\n      });\n      const confirmtx = await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n    }\n    // Account Creation --- END\n\n    // Transaction to post a new blog\n    const transaction = new Transaction();\n    setStatus('Processing Transaction');\n    transaction.add(\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: accountPubkey,\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: publicKey,\n            isSigner: true,\n            isWritable: false,\n          },\n          {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: new PublicKey(programId),\n        data: Buffer.from(blogInupt),\n      }),\n    );\n\n    const {\n      context: { slot: minContextSlot },\n      value: { blockhash, lastValidBlockHeight },\n    } = await connection.getLatestBlockhashAndContext();\n\n    try {\n      const signature = await sendTransaction(transaction, connection, {\n        minContextSlot,\n        skipPreflight: true,\n        signers: [],\n        preflightCommitment: 'processed',\n      });\n\n      const confirmtx = await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n      await connection.getParsedTransaction(signature);\n      getAllTransactions();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n// `getAllTransactions` function is invoked after a new blog is created,\n// and the new data processed and updated in the UI\n  const getAllTransactions = async () => {\n    const data = await connection.getSignaturesForAddress(new PublicKey(programId));\n  };\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK with Yarn\nDESCRIPTION: Command to install Moralis SDK and EVM utilities using Yarn package manager.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/get-your-api-key.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add moralis @moralisweb3/common-evm-utils\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction by Block Hash and Index with eth_getTransactionByBlockHashAndIndex\nDESCRIPTION: This snippet demonstrates the request format for the eth_getTransactionByBlockHashAndIndex method. It includes parameters for the block hash and transaction index.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n[\"0xe9de65582d5a210f3f5703e0d7dc1daf9fbb5a0670937f5d92283a41ea1bcb2b\", \"0x0\"]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Native Balance Query\nDESCRIPTION: This JSON snippet illustrates the typical response format received from the Moralis `getNativeBalance` API endpoint. It contains an array with a single object, where the `balance` key holds the native balance of the queried address as a string value, representing the amount in the smallest unit (e.g., wei for Ethereum).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-vault.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\n  {\n    \"balance\": \"3989233490541891348056490\"\n  }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Complete Moralis AuthenticationController Implementation in ASP.NET Core (C#)\nDESCRIPTION: Presents the fully integrated AuthenticationController class, combining both the 'RequestMessage' and 'VerifySignature' endpoints for a production-ready Moralis Auth endpoint. Designed for easy extension, database integration, or custom token issuance. Inputs and outputs reflect the previous two endpoints, ensuring full EIP-4361 Web3 authentication support in ASP.NET Core.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Mvc;\nusing Moralis;\nusing Moralis.AuthApi.Models;\nusing Moralis.Network;\nusing Moralis.Web3Api.Models;\n\nnamespace MoralisDemo.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class AuthenticationController : ControllerBase\n    {\n\n        [HttpPost, Route(\"{address}/{network}/{chainId}\")]\n        public async Task<IActionResult> RequestMessage(string address, ChainNetworkType network, ChainList chainId)\n        {\n            try\n            { \n                ChallengeRequestDto req = new ChallengeRequestDto()\n                {\n                    // The Ethereum address performing the signing conformant to capitalization encoded\n                    // checksum specified in EIP-55 where applicable.\n                    Address = address,\n                    // The EIP-155 Chain ID to which the session is bound, and the network where Contract\n                    // Accounts MUST be resolved.\n                    ChainId = (long)chainId,\n                    // The RFC 3986 authority that is requesting the signing\n                    Domain = \"defi.finance\",\n                    // The ISO 8601 datetime string that, if present, indicates when the signed\n                    // authentication message is no longer valid.\n                    ExpirationTime = DateTime.UtcNow.AddMinutes(60),\n                    // The ISO 8601 datetime string that, if present, indicates when the signed\n                    // authentication message will become valid.\n                    NotBefore = DateTime.UtcNow,\n                    // A list of information or references to information the user wishes to have resolved\n                    // as part of authentication by the relying party. They are expressed as RFC 3986 URIs\n                    // separated by \"\\n- \" where \\n is the byte 0x0a.\n                    Resources = new string[] { \"https://www.1155project.com\" },\n                    // Time is seconds at which point this request becomes invalid.\n                    Timeout = 120,\n                    // A human-readable ASCII assertion that the user will sign, and it must not\n                    // contain '\\n' (the byte 0x0a).\n                    Statement = \"Please confirm\",\n                    // An RFC 3986 URI referring to the resource that is the subject of the signing\n                    // (as in the subject of a claim).\n                    Uri = \"https://defi.finance\"\n                };\n\n                ChallengeResponseDto resp = await MoralisClient.AuthenticationApi.AuthEndpoint.Challenge(req, network);\n\n                return new CreatedAtRouteResult(nameof(RequestMessage), resp);\n            }\n            catch (ApiException ex)\n            {\n                return new BadRequestResult();\n            }\n            catch (Exception ex)\n            {\n                return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n            }\n        }\n\n        [HttpPost, Route(\"verify/{network}\")]\n        public async Task<IActionResult> VerifySignature(ChainNetworkType network, [FromBody] CompleteChallengeRequestDto req)\n        {\n            try\n            { \n                CompleteChallengeResponseDto completeResp = await MoralisClient.AuthenticationApi.AuthEndpoint.CompleteChallenge(req, network);\n\n                // ---------------------------------------------------------------------------------\n                // Here is where you would save authentication information to the database.\n                // ---------------------------------------------------------------------------------\n\n                // ---------------------------------------------------------------------------------\n                // Here is where you would generate a JWT or other authentication response object.\n                // ---------------------------------------------------------------------------------\n\n                // Return custom authentication response here.\n                string token =  $\"{{\\\"token\\\":\\\"{completeResp.Address}:{completeResp.ProfileId}\\\"}}\";\n\n                return new CreatedAtRouteResult(nameof(VerifySignature), token);\n            }\n            catch (ApiException ex)\n            {\n                return new BadRequestResult();\n            }\n            catch (Exception ex)\n            {\n                return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for getNFTOwners Endpoint\nDESCRIPTION: This JSON object represents a sample response returned by the Moralis `getNFTOwners` API endpoint. It includes metadata about the request pagination (total items, page number, page size, cursor for next page) and an array 'result' containing details for each NFT owned within the specified collection, such as token address, token ID, owner address, and metadata.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owners-of-an-nft-collection.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"total\": 692,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsidG9rZW5BZGRyZXNzIjoiMHhhMTg2ZDczOWNhMmIzMDIyYjk2NjE5NDAwNGM2YjAxODU1ZDU5NTcxIn0sImtleXMiOlsiMTY2NjgzNjU3OS43NyJdLCJ3aGVyZSI6eyJ0b2tlbl9hZGRyZXNzIjoiMHhhMTg2ZDczOWNhMmIzMDIyYjk2NjE5NDAwNGM2YjAxODU1ZDU5NTcxIn0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6NjkyLCJwYWdlIjoxLCJ0YWlsT2Zmc2V0IjoxLCJpYXQiOjE2NjY5NjMxNTl9.DsjX8vrr2P0lIJlWgkAEA2wIPdZricLUw7TR6WmeovU\",\n  \"result\": [\n    {\n      \"token_address\": \"0xa186d739ca2b3022b966194004c6b01855d59571\",\n      \"token_id\": \"692\",\n      \"owner_of\": \"0xd1fa414bbd0b71292e097d18a9d5ccbb04806c31\",\n      \"block_number\": \"15846571\",\n      \"block_number_minted\": \"15846571\",\n      \"token_hash\": \"22c43a90364cd3639c565470effc46db\",\n      \"amount\": \"1\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"NFTPass\",\n      \"symbol\": \"ATTPASS\",\n      \"token_uri\": \"https://metadata.atticc.xyz/692\",\n      \"metadata\": \"{\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Name\\\",\\\"value\\\":\\\"Atticc Early Adopter Pass\\\"},{\\\"trait_type\\\":\\\"Category\\\",\\\"value\\\":\\\"Early Adopter Pass\\\"},{\\\"trait_type\\\":\\\"Number of Seats\\\",\\\"value\\\":\\\"5555\\\",\\\"display_type\\\":\\\"number\\\"},{\\\"trait_type\\\":\\\"Royalty\\\",\\\"value\\\":\\\"0\\\",\\\"display_type\\\":\\\"number\\\"}],\\\"image\\\":\\\"https://media.atticc.xyz/Pass692.webp\\\"}\",\n      \"last_token_uri_sync\": \"2022-10-28T12:30:53.470Z\",\n      \"last_metadata_sync\": \"2022-10-28T12:31:12.113Z\",\n      \"minter_address\": \"0xd1fa414bbd0b71292e097d18a9d5ccbb04806c31\"\n    },\n    {\n      \"token_address\": \"0xa186d739ca2b3022b966194004c6b01855d59571\",\n      \"token_id\": \"691\",\n      \"owner_of\": \"0x5e899294aa47ff846ca1f1bb096692deb0636ec0\",\n      \"block_number\": \"15845243\",\n      \"block_number_minted\": \"15845243\",\n      \"token_hash\": \"37341fba448ccb6bcd2776aef50a69d2\",\n      \"amount\": \"1\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"NFTPass\",\n      \"symbol\": \"ATTPASS\",\n      \"token_uri\": \"https://metadata.atticc.xyz/691\",\n      \"metadata\": \"{\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Name\\\",\\\"value\\\":\\\"Atticc Early Adopter Pass\\\"},{\\\"trait_type\\\":\\\"Category\\\",\\\"value\\\":\\\"Early Adopter Pass\\\"},{\\\"trait_type\\\":\\\"Number of Seats\\\",\\\"value\\\":\\\"5555\\\",\\\"display_type\\\":\\\"number\\\"},{\\\"trait_type\\\":\\\"Royalty\\\",\\\"value\\\":\\\"0\\\",\\\"display_type\\\":\\\"number\\\"}],\\\"image\\\":\\\"https://media.atticc.xyz/Pass691.webp\\\"}\",\n      \"last_token_uri_sync\": \"2022-10-28T08:04:34.923Z\",\n      \"last_metadata_sync\": \"2022-10-28T08:04:49.994Z\",\n      \"minter_address\": \"0x42678905eb6fb9f0f3a1334cb23b9d393b53c138\"\n    },\n    {\n      \"token_address\": \"0xa186d739ca2b3022b966194004c6b01855d59571\",\n      \"token_id\": \"65\",\n      \"owner_of\": \"0xd4847d79c41d3bdfa3c1f294f38550ed12ab22aa\",\n      \"block_number\": \"15845141\",\n      \"block_number_minted\": \"15821875\",\n      \"token_hash\": \"72e0a7ebf64f5e2ccfe5fb8c4245f3ed\",\n      \"amount\": \"1\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"NFTPass\",\n      \"symbol\": \"ATTPASS\",\n      \"token_uri\": \"https://metadata.atticc.xyz/65\",\n      \"metadata\": \"{\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Name\\\",\\\"value\\\":\\\"Atticc Early Adopter Pass\\\"},{\\\"trait_type\\\":\\\"Category\\\",\\\"value\\\":\\\"Early Adopter Pass\\\"},{\\\"trait_type\\\":\\\"Number of Seats\\\",\\\"value\\\":\\\"5555\\\",\\\"display_type\\\":\\\"number\\\"},{\\\"trait_type\\\":\\\"Royalty\\\",\\\"value\\\":\\\"0\\\",\\\"display_type\\\":\\\"number\\\"}],\\\"image\\\":\\\"https://media.atticc.xyz/Pass65.webp\\\"}\",\n      \"last_token_uri_sync\": \"2022-10-25T01:41:57.317Z\",\n      \"last_metadata_sync\": \"2022-10-25T01:42:22.549Z\",\n      \"minter_address\": \"0x4bcdd74a35e028dae62cb1d48528e71843e2ac7d\"\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Token Holder Statistics - HTTP Endpoint\nDESCRIPTION: Provides the latest statistics on holders for a given token address in the Solana mainnet. Outputs aggregated data such as current holders, concentration, and distribution. A valid Moralis API key must be used for authenticated access.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/token/mainnet/holders/:address\n```\n\n----------------------------------------\n\nTITLE: Example JSON-RPC Server Response for Ethereum Block Data\nDESCRIPTION: This snippet demonstrates a typical JSON-RPC 2.0 response containing blockchain data. It returns the requested block information with the same identifier as the original request.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/fundamentals/how-json-rpc-works.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"jsonrpc\": \"2.0\",\n\"result\": {\n \"number\": \"0x10d4f\",\n \"hash\": \"0xabc123...\",\n \"transactions\": [...]\n},\n\"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Spam NFT Contracts with Moralis in JavaScript\nDESCRIPTION: This code demonstrates how to report spam NFT contracts using the Moralis API in JavaScript. It initializes the Moralis SDK with your API key, specifies the contract address to report as spam on the Ethereum chain, and provides a reason for the report.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/spam-detection/report-nft-spam.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\nconst abi = require(\"abi.json\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  const contractAddress = \"0x06012c8cf97bead5deae237070f9587f8e7a266d\";\n\n  const reason = \"My Reason\";\n\n  const response = await Moralis.EvmApi.utils.reviewContracts(\n    {\n      chain,\n    },\n    {\n      contracts: [\n        {\n          reason,\n          contractAddress,\n          reportType: \"spam\",\n          contractType: \"NFT\",\n        },\n      ],\n    }\n  );\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating a Crypto Punks Monitoring Stream in JavaScript\nDESCRIPTION: This JavaScript code creates a Moralis stream to monitor transfers of specific CryptoPunk NFTs (IDs 1000-1002) on the Ethereum chain. It defines the ABI for the PunkTransfer event, configures stream options with filters, and attaches the CryptoPunks contract address to the stream.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-monitor-specific-nfts.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst punkTransferAbi = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"from\", type: \"address\" },\n      { indexed: true, name: \"to\", type: \"address\" },\n      { indexed: false, name: \"punkIndex\", type: \"uint256\" },\n    ],\n    name: \"PunkTransfer\",\n    type: \"event\",\n  },\n]; // valid abi of the event\n\nconst options = {\n  chains: [EvmChain.ETHEREUM], // list of blockchains to monitor\n  description: \"1000 to 1002 cryptopunks\", // your description\n  tag: \"cryptoPunks\", // give it a tag\n  abi: punkTransferAbi,\n  includeContractLogs: true,\n  topic0: [\"PunkTransfer(address,address,uint256)\"], // topic of the event\n  advancedOptions: [\n    {\n      topic0: \"PunkTransfer(address,address,uint256)\",\n      filter: { in: [\"punkIndex\", [\"1000\", \"1001\", \"1002\"]] }, // only receive transfer events if the token id is 1000/1001/1002\n      includeNativeTxs: true,\n    },\n  ],\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\", // webhook url to receive events,\n};\n\nconst stream = await Moralis.Streams.add(options);\n\nconst { id } = stream.toJSON(); // { id: 'YOUR_STREAM_ID', ...stream }\n\n// Attach the contract address to the stream\nawait Moralis.Streams.addAddress({\n  id,\n  address: \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", // crypto punks address\n});\n```\n\n----------------------------------------\n\nTITLE: Handling MetaMask Authentication Flow in Angular - TypeScript\nDESCRIPTION: This async function manages the entire MetaMask authentication process: disconnecting any existing web3 provider, connecting to MetaMask via InjectedConnector, sending the user address and chain to the backend, signing a server-generated message, then verifying the signature via another backend call. On success, the user is redirected to the '/user' page. Required dependencies are wagmi/core (for account, sign, and connect/disconnect functionality), axios, Router, and the environment configuration. Inputs are handled internally; outputs are navigation actions and server responses. Assumes axios defaults are properly configured for cookies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nasync handleAuth() {\\n    const { isConnected } = getAccount();\\n\\n    if (isConnected) await disconnect(); //disconnects the web3 provider if it's already active\\n\\n    const provider = await connect({ connector: new InjectedConnector() }); // enabling the web3 provider metamask\\n\\n    const userData = {\\n      address: provider.account,\\n      chain: provider.chain.id,\\n      network: 'evm',\\n    };\\n\\n    const { data } = await axios.post(\\n      `${environment.SERVER_URL}/request-message`,\\n      userData\\n    );\\n\\n    const message = data.message;\\n\\n    const signature = await signMessage({ message });\\n\\n    await axios.post(\\n      `${environment.SERVER_URL}/verify`,\\n      {\\n        message,\\n        signature,\\n      },\\n      { withCredentials: true } // set cookie from Express server\\n    );\\n\\n    // redirect to /user\\n    this.router.navigateByUrl('/user');\\n  }\n```\n\n----------------------------------------\n\nTITLE: Querying Top ERC20 Tokens Price Movers using Moralis Market Data API (Python)\nDESCRIPTION: This Python example uses the Moralis SDK to fetch a list of the top ERC20 tokens ranked by price movement. After importing and configuring the SDK with an API key, it calls the get_top_erc20_tokens_by_price_movers method and prints the result. Dependency: moralis Python SDK (install via pip). Input needed: your Moralis API key. Output: a result object containing ERC20 token gainers and losers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-ERC20-tokens-by-price-change.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\n\nresult = evm_api.market_data.get_top_erc20_tokens_by_price_movers(\n  api_key=api_key,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Native Balance with Moralis Wallet API in JavaScript\nDESCRIPTION: This JavaScript example illustrates how to use the Moralis SDK to fetch a smart contract account's native blockchain balance. The script requires the 'moralis' and '@moralisweb3/common-evm-utils' NPM packages, and an active API key. Key parameters include 'address' (the target account) and 'chain' (the blockchain, such as Ethereum). Input is provided within the script; output is a JSON object representing the balance, printed in the console. Ensure all dependencies are installed and a valid API key is used before execution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-account.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the Moralis library and necessary modules\\nconst Moralis = require(\\\"moralis\\\").default;\\nconst { EvmChain } = require(\\\"@moralisweb3/common-evm-utils\\\");\\n\\n// Define an asynchronous function runApp to retrieve the native balance of a smart contract account\\nconst runApp = async() => {\\n  // Initialize the Moralis SDK with your API key and other configurations\\n  await Moralis.start({\\n    apiKey: \\\"YOUR_API_KEY\\\",\\n    // ...add any other relevant configuration options\\n  });\\n\\n  // Define the address of a smart contract account for which you want to fetch the native balance\\n  const address = \\\"0x350845DD3f03F1355233a3A7CEBC24b5aAD05eC5\\\";\\n\\n  // Specify the blockchain that you are working with (e.g., Ethereum)\\n  const chain = EvmChain.ETHEREUM;\\n\\n  // Use the Moralis getNativeBalance method to request the native balance\\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\\n    address,\\n    chain,\\n  });\\n\\n  // Log the JSON response containing the native balance to the console\\n  console.log(response.toJSON());\\n}\\n\\n// Invoke the runApp function to start the process\\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers in JavaScript\nDESCRIPTION: JavaScript implementation to get ERC20 token transfers for a specific wallet address using Moralis API. Requires Moralis SDK and common-evm-utils package. Returns transfer details including transaction hashes, addresses, timestamps, and values.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Top NFT Collections with Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the Moralis SDK and use the `getHottestNFTCollectionsByTradingVolume` method from the EvmApi.marketData module to retrieve the top NFT collections ranked by trading volume. It requires the `moralis` and `@moralisweb3/common-evm-utils` packages and an API key for authentication. The raw response containing the collection data is printed to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-trading-volume.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getHottestNFTCollectionsByTradingVolume();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Sample ERC20 Token Historical Price Result (JSON Output)\nDESCRIPTION: This JSON snippet represents the typical output structure returned after running any of the scripts to fetch ERC20 price history. The array's objects contain the token's price relative to Ethereum's native currency and USD, along with metadata on the exchange used. Outputs match the queried block intervals. This response format is intended for inspection, processing, or further application logic.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-historical-erc20-token-price.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"nativePrice\": {\n      \"value\": \"642828540698243\",\n      \"decimals\": 18,\n      \"name\": \"Ether\",\n      \"symbol\": \"ETH\"\n    },\n    \"usdPrice\": 0.7811524052648599,\n    \"exchangeAddress\": \"0x1f98431c8ad98523631ae4a59f267346ea31f984\",\n    \"exchangeName\": \"Uniswap v3\"\n  },\n  {\n    \"nativePrice\": {\n      \"value\": \"642828540698243\",\n      \"decimals\": 18,\n      \"name\": \"Ether\",\n      \"symbol\": \"ETH\"\n    },\n    \"usdPrice\": 0.7811524052648599,\n    \"exchangeAddress\": \"0x1f98431c8ad98523631ae4a59f267346ea31f984\",\n    \"exchangeName\": \"Uniswap v3\"\n  },\n  {\n    \"nativePrice\": {\n      \"value\": \"642892823552313\",\n      \"decimals\": 18,\n      \"name\": \"Ether\",\n      \"symbol\": \"ETH\"\n    },\n    \"usdPrice\": 0.7812305205053863,\n    \"exchangeAddress\": \"0x1f98431c8ad98523631ae4a59f267346ea31f984\",\n    \"exchangeName\": \"Uniswap v3\"\n  },\n  {\n    \"nativePrice\": {\n      \"value\": \"642892823552313\",\n      \"decimals\": 18,\n      \"name\": \"Ether\",\n      \"symbol\": \"ETH\"\n    },\n    \"usdPrice\": 0.7812305205053863,\n    \"exchangeAddress\": \"0x1f98431c8ad98523631ae4a59f267346ea31f984\",\n    \"exchangeName\": \"Uniswap v3\"\n  },\n  {\n    \"nativePrice\": {\n      \"value\": \"642892823552313\",\n      \"decimals\": 18,\n      \"name\": \"Ether\",\n      \"symbol\": \"ETH\"\n    },\n    \"usdPrice\": 0.7812305205053863,\n    \"exchangeAddress\": \"0x1f98431c8ad98523631ae4a59f267346ea31f984\",\n    \"exchangeName\": \"Uniswap v3\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet ERC20 Token Balances with Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates fetching the balance of specific ERC20 tokens held by a user's wallet address using the Moralis SDK. It requires initializing Moralis, providing the user's wallet address, an array of token addresses to check, and the blockchain chain. The raw API response containing the balances is logged.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const tokenAddresses = [\"ERC20_TOKEN_ADDRESS\"];\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    chain,\n    tokenAddresses,\n    address,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Login Template with Moralis Web3 Authentication in HTML and JavaScript\nDESCRIPTION: This HTML template includes JavaScript for handling Moralis Web3 authentication, including connecting to MetaMask, requesting and verifying messages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Moralis Auth Django Demo</title>\n</head>\n<body>\n    <div>\n\n    {% if user.is_authenticated %}\n        <h1>Welcome Moralis Web3 User, {{ user.username }} !</h1>\n        <a href=\"{% url 'logout' %}?next={% url 'moralis_auth' %}\">Logout</a>\n        <br/>\n        <a href=\"{% url 'my_profile' %}\"> My profile </a>\n    {% else %}\n        <h1>Moralis Web3 Login Django demo</h1>\n        <button class=\"btn\" id=\"auth-metamask\">Login with Moralis Web3 API</button>\n    {% endif %}\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n    <script src=\"https://cdn.ethers.io/lib/ethers-5.2.umd.min.js\" type=\"application/javascript\"></script>\n\n    {% if user.is_authenticated %}\n    {% else %}\n    <script>\n    const elBtnMetamask = document.getElementById('auth-metamask');\n\n    const handleApiPost = async (endpoint, params) => {\n      const result = await axios.post(`${endpoint}`, params, {\n        headers: {\n          'Content-Type': 'application/json',\n          \"X-CSRFToken\": '{{ csrf_token }}'\n        },\n      });\n    \n      return result.data;\n    };\n\n    const requestMessage = (account, chain) =>\n      handleApiPost('{% url 'request_message' %}', {\n        address: account,\n        chain: chain,\n        network: 'evm',\n      });\n\n    const verifyMessage = (message, signature) =>\n      handleApiPost('{% url 'verify_message' %}', {\n        message,\n        signature,\n        network: 'evm',\n      });\n\n    const connectToMetamask = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n    \n      const [accounts, chainId] = await Promise.all([\n        provider.send('eth_requestAccounts', []),\n        provider.send('eth_chainId', []),\n      ]);\n\n      const signer = provider.getSigner();\n      return { signer, chain: chainId, account: accounts[0] };\n    };\n\n    const handleAuth = async () => {\n      // Connect to Metamask\n      const { signer, chain, account } = await connectToMetamask();\n      console.log(\"account\", account, \"chain\", chain)\n\n      if (!account) {\n        throw new Error('No account found');\n      }\n      if (!chain) {\n        throw new Error('No chain found');\n      }\n\n      const { message } = await requestMessage(account, chain);\n      const signature = await signer.signMessage(message);\n      const { user } = await verifyMessage(message, signature);\n      console.log(user)\n      if (user) {\n        location.reload();\n      }\n      else{\n        alert(\"authentication error\")\n      }\n    };\n\n\n    function init() {\n      elBtnMetamask.addEventListener('click', async () => {\n        handleAuth().catch((error) => console.log(error));\n      });\n    }\n\n    window.addEventListener('load', () => {\n      init();\n    });\n\n    </script>\n    {% endif %}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Getting NFT Transfers in TypeScript with Moralis API\nDESCRIPTION: TypeScript implementation to fetch all transfers of a specific NFT using Moralis EvmApi.nft.getNFTTransfers method. Requires the NFT contract address, token ID, and chain parameter (Ethereum in this example).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const tokenId = \"1\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTTransfers({\n    address,\n    tokenId,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Shell)\nDESCRIPTION: This shell command uses the Yarn package manager to install all the necessary dependencies defined in the project's `package.json` file. An alternative like `npm install` could also be used if preferred.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component with NFT Token ID Owners Config in JSX\nDESCRIPTION: Renders the ApiReference React component, spreading configuration for the 'getNFTTokenIdOwners' endpoint from a nested config object. This pattern supports dynamic generation of API documentation or interactive UI sections. The component expects a pre-defined config object structure and passes in parameters and data relevant to querying NFT token owners by ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/05-Get NFT Owners/get-nft-token-id-owners.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.nft.getNFTTokenIdOwners} />\n```\n\n----------------------------------------\n\nTITLE: Signature Verification Method\nDESCRIPTION: Implementation of the verify method for validating authentication signatures.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function verify(message, signature) {\n\n    const verifiedData = Moralis.Auth.verify({\n        message: message,\n        signature: signature,\n        network: NETWORK,\n    })\n\n    return verifiedData\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Service for Moralis\nDESCRIPTION: Authentication service that handles requesting authentication messages and verifying signed messages using Moralis Auth API and integrates with Parse Server authentication system.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport Moralis from 'moralis';\nimport { authRequests } from '../store';\nimport { ParseServerRequest } from '../utils/ParseServerRequest';\n\nexport async function requestMessage({ address, chain, network }: { address: string; chain: string; network: 'evm' }) {\n  const result = await Moralis.Auth.requestMessage({\n    address,\n    chain,\n    network,\n    domain: 'defi.finance',\n    statement: 'Please sign this message to confirm your identity.',\n    uri: 'https://defi.finance',\n    expirationTime: '2023-01-01T00:00:00.000Z',\n    timeout: 15,\n  });\n\n  const { message, id, profileId } = result.toJSON();\n  authRequests.set(message, { id, profileId });\n\n  return message;\n}\n\nexport async function verifyMessage({ network, signature, message }) {\n  const storedData = authRequests.get(message);\n\n  if (!storedData) {\n    throw new Error('Invalid message');\n  }\n\n  const { id: storedId, profileId: storedProfileId } = storedData;\n\n  const authData = {\n    id: storedProfileId,\n    authId: storedId,\n    message,\n    signature,\n    network,\n  };\n\n  // Authenticate\n  const user = await serverRequest.post({\n    endpoint: `/users`,\n    params: {\n      authData: {\n        moralis: authData,\n      },\n    },\n    useMasterKey: true,\n  });\n\n  // Update user moralisProfile column\n  await serverRequest.put({\n    endpoint: `/users/${user.objectId}`,\n    params: {\n      moralisProfileId: storedProfileId,\n    },\n    useMasterKey: true,\n  });\n\n  // Get authenticated user\n  const updatedUser = await serverRequest.get({\n    endpoint: `/users/${user.objectId}`,\n    useMasterKey: true,\n  });\n\n  return updatedUser;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Token Balances using EvmApi and `.result` in JavaScript\nDESCRIPTION: This example shows how to fetch ERC20 token balances for a specific Ethereum address using `Moralis.EvmApi.token.getWalletTokenBalances`. It accesses the structured and typed data via the `.result` property of the response, which returns an array of `Erc20Value` objects, allowing for type-safe operations and access to helper methods like `.equals()` and properties like `.value` and `.amount` (as a BigNumber). Requires `@moralisweb3/common-evm-utils` for `EvmChain` enum.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/query-from-evm-or-solana.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmChain } from '@moralisweb3/common-evm-utils';\\n\\nconst response = await Moralis.EvmApi.token.getWalletTokenBalances({\\n  \tchain: EvmChain.ETHEREUM,\\n    address: '0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe',\\n})\\n\\n// An array of Erc20Value\\nconst balances = response.result\\n\\nconsole.log(balances[0].token.contractAddress.equals(\"0x01be23585060835e02b77ef475b0cc51aa1e0709\"))\\n//console output:\\ntrue\\n\\nconsole.log(balances[0].value)\\n//console output:\\n\"20.0\"\\n\\nconsole.log(balances[0].amount)\\n//console output:\\nBigNumber<20000000000000000000>\n```\n\n----------------------------------------\n\nTITLE: Installing Axios Dependency\nDESCRIPTION: Command to install axios for making HTTP requests\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install axios\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Trades by Marketplace using Moralis API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Moralis EvmApi to retrieve NFT trades for a specific marketplace. It requires the Moralis SDK and common-evm-utils package. The script initializes Moralis, sets up parameters for the API call, and logs the response.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/06-NFT Marketdata/how-to-get-nft-trades-by-marketplace.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const marketplace = \"opensea\";\n\n  const response = await Moralis.EvmApi.nft.getNFTTrades({\n    address,\n    chain,\n    marketplace,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Internal Transactions of an Address with Python\nDESCRIPTION: Python code example demonstrating how to use the Moralis EVM API to retrieve internal transactions for a specific wallet address by setting the appropriate parameters including internal_transactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-internal-transactions-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\n# Replace \"YOUR_API_KEY\" with your actual Moralis API key\napi_key = \"YOUR_API_KEY\"\n\n# Specify the wallet address for which transactions are to be retrieved\nwallet_address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\"\n\n# Specify the blockchain (e.g., Ethereum)\nchain = \"eth\"\n\n# Define parameters, including the \"internal_transactions\" option\nparams = {\n    \"address\": wallet_address,\n    \"chain\": chain,\n    \"include\": \"internal_transactions\"\n}\n\n# Use the Moralis EvmApi to get wallet transactions with internal transactions included\nresult = evm_api.transaction.get_wallet_transactions(api_key=api_key, params=params)\n\n# Print the result\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Composing a JSON-RPC Request in JSON\nDESCRIPTION: This snippet shows an example of a JSON-RPC request payload that requests the balance for a specific wallet address. It includes the JSON-RPC version (\"2.0\"), the method (\"getBalance\"), the parameters array (with the wallet address), and an identifier (id) to correlate requests and responses. No additional dependencies are needed for constructing this JSON object, but understanding the proper use of the JSON-RPC fields is necessary; the method and params can be changed depending on the operation you wish to perform.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/fundamentals/json-rpc-basics.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"method\\\": \\\"getBalance\\\",\\n  \\\"params\\\": [\\\"0x123456...\\\"],\\n  \\\"id\\\": 1\\n}\n```\n\n----------------------------------------\n\nTITLE: Token Balance Query Sample Response (JSON)\nDESCRIPTION: This JSON snippet provides a sample response from Moralis's getWalletTokenBalances endpoint. Each entry in the array represents a token owned by the queried address, including fields such as 'token_address', 'name', 'symbol', 'logo', 'decimals', and 'balance'. It is useful for understanding the data shape returned by the API in practical implementations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"token_address\": \"0xefd6c64533602ac55ab64442307f6fe2c9307305\",\n    \"name\": \"APE\",\n    \"symbol\": \"APE\",\n    \"logo\": null,\n    \"thumbnail\": null,\n    \"decimals\": 18,\n    \"balance\": \"101715701444169451516503179\"\n  },\n  {\n    \"token_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"name\": \"Wrapped Ether\",\n    \"symbol\": \"WETH\",\n    \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.webp\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.webp\",\n    \"decimals\": 18,\n    \"balance\": \"85000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Addresses to a Stream with Moralis Streams SDK - Python\nDESCRIPTION: This Python snippet adds multiple wallet addresses to an existing Moralis EVM stream using the streams.evm_streams.add_address_to_stream API. Prerequisites include the moralis Python package and API key setup. The script assembles the body with addresses, supplies the stream ID, and prints the outcome. Supports adding single or batch addresses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"id\": \"4f7dbfb3-42c9-4d8d-bbba-975ea2d2b1a1\",\n}\n\nlist = [\n    \"0xf3d8d9f1f1ccbc8f7e313b7e7cdaa1d6e5b2c2f2\",\n    \"0x7a250d5630b4cf539739df2c5dacb4c659f2488d\",\n    \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n    \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n]\nstream_body = {\"address\": list}\n\nresults = streams.evm_streams.add_address_to_stream(\n    api_key=api_key, body=stream_body, params=params\n)\nprint(results)\n\n```\n\n----------------------------------------\n\nTITLE: Moralis Get Native Balance Lambda Function\nDESCRIPTION: AWS Lambda function that uses Moralis SDK to fetch native balance for a given wallet address and chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nconst Moralis = require(\"moralis\").default;\n\nconst startMoralis = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n};\n\nstartMoralis();\n\nmodule.exports.handler = async (event) => {\n  // Get native balance\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address: event.address,\n    chain: event.chain,\n  });\n\n  // Format the native balance formatted in ether via the .ether getter\n  const nativeBalanceEther = nativeBalance.result.balance.ether;\n\n  return {\n    result: nativeBalanceEther,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Phantom Wallet Login Button Component (TypeScript)\nDESCRIPTION: This TypeScript React component (`PhantomBtn`) provides a button that initiates the Phantom wallet authentication flow. It uses the `@moralisweb3/next` hook `useAuthRequestChallengeSolana` to get a challenge message, connects to the Phantom wallet provider (`window.phantom.solana`), prompts the user to sign the message, encodes the signature using `bs58`, and then uses `next-auth/react`'s `signIn` function with the 'moralis-auth' provider to authenticate the user. It relies on `@web3uikit/core` for the Button component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript phantomBtn.tsx\nimport React from \"react\";\nimport { Button } from \"@web3uikit/core\";\nimport { signIn } from \"next-auth/react\";\nimport base58 from \"bs58\";\nimport { useAuthRequestChallengeSolana } from \"@moralisweb3/next\";\n\nexport default function PhantomBtn() {\n  const { requestChallengeAsync, error } = useAuthRequestChallengeSolana();\n  const authenticate = async () => {\n    // @ts-ignore\n    const provider = window.phantom?.solana;\n    const resp = await provider.connect();\n    const address = resp.publicKey.toString();\n    const chain = \"devnet\";\n    const account = {\n      address: address,\n      chain: chain,\n      network: \"solana\",\n    };\n    // const message = \"Sign to provide access to app\";\n    const challenge = await requestChallengeAsync({\n      address,\n      network: \"devnet\",\n    });\n    const encodedMessage = new TextEncoder().encode(challenge?.message);\n    const signedMessage = await provider.signMessage(encodedMessage, \"utf8\");\n    const signature = base58.encode(signedMessage.signature);\n    try {\n      const authResponse = await signIn(\"moralis-auth\", {\n        message: challenge?.message,\n        signature,\n        network: \"Solana\",\n        redirect: false,\n      });\n      if (authResponse?.error) {\n        throw new Error(authResponse.error);\n      }\n    } catch (e) {\n      return;\n    }\n  };\n\n  return (\n    <Button\n      text=\"Phantom\"\n      theme=\"primary\"\n      onClick={() => {\n        authenticate();\n      }}\n    />\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Listening to Smart Contract Events with Moralis Streams (Python)\nDESCRIPTION: This Python snippet uses the Moralis SDK to create a stream for monitoring ERC20 'Transfer' events from the USDT contract (`0xdAC...`) on Ethereum (chain ID `0x1`). It defines the event ABI, sets up the stream configuration including the ABI and topic0, creates the stream using `streams.evm_streams.create_stream`, and then associates the USDT contract address with the stream using `streams.evm_streams.add_address_to_stream`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\nERC20_transfer_ABI = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" },\n  ],\n  \"name\": \"Transfer\",\n  \"type\": \"event\",\n}]\n\ncreate_stream_body = {\n  \"description\": \"monitor USDT transfers\",\n  \"tag\": \"USDT\",\n  \"webhook_url\": \"https://YOUR_WEBHOOK_URL\",\n  \"include_contract_logs\": True,\n  \"chain_ids\": [\n    \"0x1\"\n  ],\n  \"abi\": ERC20_transfer_ABI,\n  \"topic0\": [\"Transfer(address,address,uint256)\"]\n}\n\nresult = streams.evm_streams.create_stream(\n  api_key=api_key,\n  body=create_stream_body,\n)\n\nadd_address_body = {\n  \"address\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"\n}\n\nparams = {\n  \"id\": result.id\n}\n\n# Now we attach USDT address to the stream\nstreams.evm_streams.add_address_to_stream(\n  api_key=api_key,\n  body=add_address_body,\n  params=params,\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoint for NFT Balances (JavaScript)\nDESCRIPTION: Adds a GET endpoint '/nftBalance' to the Express app. This endpoint retrieves all NFTs owned by a given wallet address on a specific chain using 'Moralis.EvmApi.nft.getWalletNFTs'. It returns the raw response containing the list of NFTs. Requires 'address' and 'chain' as query parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n//GET Users NFT's\n\napp.get(\"/nftBalance\", async (req, res) => {\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const { address, chain } = req.query;\n\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address: address,\n      chain: chain,\n    });\n\n    const userNFTs = response.data;\n\n    res.send(userNFTs);\n  } catch (e) {\n    res.send(e);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature in JavaScript\nDESCRIPTION: This JavaScript function, `verifySignature`, validates the authenticity of an incoming Moralis webhook request. It extracts the signature from the `x-signature` request header and compares it against a locally generated signature. The local signature is created by computing the SHA3 hash (using `web3.utils.sha3`) of the request body concatenated with the provided secret (the web3api key). An error is thrown if the signature header is missing or if the provided signature does not match the generated one.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/webhook-security.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst verifySignature = (req, secret) => {\n  const providedSignature = req.headers[\"x-signature\"];\n  if (!providedSignature) throw new Error(\"Signature not provided\");\n  const generatedSignature = web3.utils.sha3(JSON.stringify(req.body) + secret);\n  if (generatedSignature !== providedSignature)\n    throw new Error(\"Invalid Signature\");\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing AI Prompt Engineering Instructions for Blockchain Data (plaintext)\nDESCRIPTION: This snippet illustrates how to instruct an AI assistant to interpret various blockchain user queries and map them to the appropriate Moralis API endpoints. No external code dependencies are required. The input is a list of guidelines and example mappings which the AI model should follow; there is no code execution or return value, but the snippet serves as a template for prompt engineering and chatbot workflow design.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-chatbots.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou are an AI assistant specialized in blockchain data. When users ask about wallets,\\ntokens, or NFTs, you should:\\n\\n1. Identify the type of blockchain data they're requesting and which blockchain (EVM chains or Solana)\\n2. Determine which Moralis API endpoint would provide this data\\n3. Format a clear response using the actual or sample data\\n\\nHere are examples of how to match queries to Moralis API endpoints:\\n- \\\"What's in wallet 0x123...?\\\" → Use the Moralis getWalletTokenBalancesPrices API for EVM chains\\n- \\\"Current price of ETH?\\\" → Use the Moralis getTokenPrice API for EVM\\n- \\\"Who are the most profitable traders of $ETH?\\\" → Use the Moralis getTopProfitableWalletPerToken API\\n- \\\"What NFTs do I own on Solana?\\\" → Use the Moralis getNFTs API for Solana\\n- \\\"Show my SOL balance\\\" → Use the Moralis balance API for Solana\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Collection Transfers in TypeScript\nDESCRIPTION: This code demonstrates how to get all transfers for an NFT collection using Moralis EvmApi with TypeScript. It imports the necessary Moralis packages, initializes the SDK, and calls the getNFTContractTransfers endpoint with the collection address and blockchain parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTContractTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Example Moralis Wallet NFT API Response - JSON\nDESCRIPTION: This JSON snippet represents the typical response structure received from the getWalletNFTs API when querying the Moralis service. It includes the total count, pagination details, cursor for next-page retrieval, an array of NFT objects with detailed fields, and the request status. No dependencies are required for viewing this data, and the snippet serves as a direct illustration of expected API output.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"total\": 1456,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsid2FsbGV0QWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSJ9LCJrZXlzIjpbIjE2NjMyMzgxNzUuMDc3Il0sIndoZXJlIjp7Im93bmVyX29mIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1In0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6MTQ1NiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2NjgyNTUyfQ.E5DkWYvRTaFnVhgedRuT3IW-rb2V-ikFKwP2cg2Qf78\",\n  \"result\": [\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"4765809967066625256798886812262830659450023020194524584471225959000376492819\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"ba6d44b5f16be94283cecffeb784b7ca\",\n      \"block_number_minted\": \"15572796\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:06:08.153Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"84453794918345416145331514647027903846664455083247396107154093349515123913389\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"7c0212cd3daf1b6b64f193c6dc102fb4\",\n      \"block_number_minted\": \"15572811\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:09:09.838Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"16476931145019337030786748713476010946621971075817308111460324192065814192354\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"627ffc76405a90ee940cb91f7e90b294\",\n      \"block_number_minted\": \"15572818\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:11:34.545Z\",\n      \"minter_address\": null\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv using npm\nDESCRIPTION: Installs the 'dotenv' package using the npm package manager. This package is used in Node.js projects to load environment variables from a '.env' file into 'process.env', facilitating secure handling of secrets like API keys.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Read more about Dotenv at https://www.npmjs.com/package/dotenv\nnpm install dotenv\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Details by Hash in TypeScript using Moralis API\nDESCRIPTION: This TypeScript code demonstrates how to fetch transaction details from the Ethereum blockchain using the Moralis API. It requires an API key and takes a transaction hash as input to return detailed transaction information in JSON format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-a-transaction-by-transaction-hash.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Moralis library and EvmChain module from the specified paths\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\n// Define the main function to run the application\nconst runApp = async (): Promise<void> => {\n  // Initialize Moralis with your API key and other configurations\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  // Specify the transaction hash to retrieve details\n  const transactionHash =\n    \"0xaae93882e8a9fe9ff30151853db20e4cd161940757a01744465ab83b751c5875\";\n\n  // Specify the blockchain (Ethereum in this case)\n  const chain = EvmChain.ETHEREUM;\n\n  // Fetch details of the specified transaction using the Moralis API\n  const response = await Moralis.EvmApi.transaction.getTransaction({\n    transactionHash,\n    chain,\n  });\n\n  // Log the response details to the console in JSON format\n  console.log(response.toJSON());\n};\n\n// Execute the application by calling the main function\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Portfolio Balance using Moralis SDK (Python)\nDESCRIPTION: This Python snippet illustrates fetching a Solana portfolio balance via the Moralis `sol_api`. It sets up the API key and parameters including the target address and network ('mainnet'), then calls the `sol_api.account.get_portfolio` function. The resulting portfolio data (tokens, NFTs, native balance) is printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/balance-api/how-to-get-solana-portfolio-balance-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\",\n    \"network\": \"mainnet\",\n}\n\nresult = sol_api.account.get_portfolio(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Domain with Moralis SDK - TypeScript\nDESCRIPTION: This TypeScript sample provides a type-safe way to resolve an ENS domain to an Ethereum address by importing Moralis and EvmChain modules. After starting Moralis with the user's API key, it calls the resolveENSDomain method, passing the 'domain' as an argument, and logs the resolved address. Dependencies include 'moralis' and '@moralisweb3/common-evm-utils' installed via npm/yarn and TypeScript configured. The key input is the ENS domain string, and the output is printed as JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-domain.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const domain = \"vitalik.eth\";\n\n  const response = await Moralis.EvmApi.resolve.resolveENSDomain({\n    domain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Uniswap V3 Pair Address using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to fetch the pair address for a Uniswap V3 liquidity pool. It initializes the Moralis SDK with an API key, specifies the Ethereum chain, defines the addresses for token0 (WETH) and token1 (LINK), and calls the `Moralis.EvmApi.defi.getPairAddress` method with these parameters and the exchange set to 'uniswapv3'. The resulting pair address and token information are logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-uniswap-v3-pair-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"uniswapv3\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for the Dapp\nDESCRIPTION: Defines essential environment variables in the `.env.local` file, created by renaming `.env.local.example`. These variables configure the application's connection target (devnet), domain, Moralis API key, authentication secrets, local development URL, and the private key for backend operations like metadata uploads.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-minter.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# devnet is used for chain Id as we will be testing the app on devnet chain\nAPP_CHAIN_ID=devnet\nAPP_DOMAIN=ethereum.boilerplate\n\n# Get your KEY https://admin.moralis.com/web3apis\nMORALIS_API_KEY= xxx\n\n# Linux: `openssl rand -hex 32` or go to https://generate-secret.now.sh/64\nNEXTAUTH_SECRET= xxx\n\n# Replace for production\nNEXTAUTH_URL=http://localhost:3000\n\n# Wallet private used to upload NFT metadata to arweave storage\nPRIVATE_KEY = xxx\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Owners with Moralis NFT API (Python)\nDESCRIPTION: This Python code snippet illustrates fetching all owners of NFTs for a specified contract address using the Moralis Python SDK. It sets up the API key and parameters such as contract address, chain, result format, result limit, pagination cursor, and metadata normalization. The core function call evm_api.nft.get_nft_owners returns a result object with NFT owner details, which is printed to the console. Required dependency is the 'moralis' package, and users must provide a valid API key; inputs are collected in the 'params' dictionary, while the output is the list of owners with customizable query options.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd4e4078ca3495DE5B1d4dB434BEbc5a986197782\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_nft_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Resolving Unstoppable Domain with Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to resolve an Unstoppable domain to a wallet address using the Moralis EVM API SDK with type safety. It involves initializing the Moralis SDK with an API key and calling `Moralis.EvmApi.resolve.resolveDomain`, passing the domain as a parameter. The result containing the address is logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-reverse-resolve-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const domain = \"brad.crypto\";\n\n  const response = await Moralis.EvmApi.resolve.resolveDomain({\n    domain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Router Outlet Template\nDESCRIPTION: Minimal HTML template with router outlet for Angular app\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<router-outlet></router-outlet>\n```\n\n----------------------------------------\n\nTITLE: Resolving Unstoppable Domain Using JavaScript\nDESCRIPTION: JavaScript implementation for resolving an Unstoppable domain to an ETH address using Moralis API. Requires Moralis and @moralisweb3/common-evm-utils packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-reverse-resolve-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const domain = \"brad.crypto\";\n\n  const response = await Moralis.EvmApi.resolve.resolveDomain({\n    domain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Combining Moralis SDK Modules for Custom Export - JavaScript\nDESCRIPTION: Demonstrates how to assemble and export custom Moralis SDK modules into a unified object for use in larger projects. It details initializing core and EvmApi modules, registering, and exporting them in one object. A sample use in another module shows querying block data. All modules should be installed and properly registered before use. Suitable for modular, scalable dapp architectures.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// moralis.ts\nimport { MoralisCore } from \"@moralisweb3/core\";\nimport EvmApi from \"@moralisweb3/evm-api\";\n\nconst core = MoralisCore.create();\nconst evmApi = EvmApi.create(core);\ncore.registerModules([evmApi]);\n\nexport const Moralis = {\n  EvmApi: evmApi,\n};\n\n// app.ts\nimport { Moralis } from \"./moralis/\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nMoralis.EvmApi.block.getBlock({\n  chain: EvmChain.ETHEREUM,\n  blockNumberOrHash: \"\",\n});\n```\n\n----------------------------------------\n\nTITLE: Response Format for Initial NFT Collection Request\nDESCRIPTION: Example JSON response when requesting floor price data for an NFT collection for the first time. The status code 202 indicates the collection is being processed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/02-NFT API/nft-floor-price-faqs.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"This contract is currently being processed. Floor price data will be available shortly. Please try again later.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Backend\nDESCRIPTION: TypeScript code to initialize Firebase admin app and Moralis SDK in Cloud Functions\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as functions from \"firebase-functions\";\nimport * as admin from \"firebase-admin\";\n\nconst app = admin.initializeApp(functions.config().firebase);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nMoralis.start({\n  apiKey: \"your_api_key_here\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project\nDESCRIPTION: Creates a new Node.js project by initializing a package.json file using npm.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK in NodeJS Lambda\nDESCRIPTION: Defines and immediately invokes an asynchronous function `startMoralis` to initialize the Moralis SDK. It uses the `Moralis.start` method, retrieving the necessary API key from the `MORALIS_API_KEY` environment variable set in `serverless.yml`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst startMoralis = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n};\n\nstartMoralis();\n```\n\n----------------------------------------\n\nTITLE: Querying Wallet NFTs with Moralis - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the Moralis SDK to fetch all NFTs owned by a wallet address on the Ethereum blockchain. It imports the necessary modules, starts the SDK with an API key, and calls the getWalletNFTs method, specifying address and chain parameters. The response (NFTs and metadata) is logged as JSON. Ensure the dependencies \\'moralis\\' and \\'@moralisweb3/common-evm-utils\\' are installed. Parameters: address (string), chain (EvmChain). Output: NFT collection as a JSON object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Configuring wagmi client and setting up routes in React\nDESCRIPTION: Configuration for the wagmi client with public provider and mainnet chain, along with route setup for the signin and user pages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { publicClient, webSocketPublicClient } = configureChains(\n  [mainnet],\n  [publicProvider()]\n);\n\nconst config = createConfig({\n  autoConnect: true,\n  publicClient,\n  webSocketPublicClient,\n});\n\nconst router = createBrowserRouter([\n  {\n    path: \"/signin\",\n    element: <Signin />,\n  },\n  {\n    path: \"/user\",\n    element: <User />,\n  },\n  {\n    path: \"/\",\n    element: <h1>Home Component</h1>,\n  },\n]);\n\nfunction App() {\n  return (\n    <WagmiConfig config={config}>\n      <RouterProvider router={router} />\n    </WagmiConfig>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Displaying Token Transfer History with Pagination - JavaScript\nDESCRIPTION: This component fetches the token transfer history for a given wallet and chain from a backend API using Axios, formats the data to parse addresses and timestamps, and displays it in a paginated Table from web3uikit. It depends on React, Axios, @web3uikit/core, and @web3uikit/icons. Inputs are 'chain', 'wallet', 'transfers', 'setTransfers'. Table displays columns for token, amount, sender, recipient, and date.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \\\"react\\\";\nimport axios from \\\"axios\\\";\nimport { Reload } from \\\"@web3uikit/icons\\\";\nimport { Table } from \\\"@web3uikit/core\\\";\n\nfunction TransferHistory({ chain, wallet, transfers, setTransfers }) {\n  async function getTokenTransfers() {\n    const response = await axios.get(\\\"http://localhost:8080/tokenTransfers\\\", {\n      params: {\n        address: wallet,\n        chain: chain,\n      },\n    });\n\n    if (response.data) {\n      setTransfers(response.data);\n      console.log(response.data);\n    }\n  }\n\n\n  return (\n    <>\n      <div className=\\\"tabHeading\\\">\\n        Transfer History <Reload onClick={getTokenTransfers} />\\n      </div>\\n      <div>\\n        {transfers.length > 0 && (\\n          <Table\\n            pageSize={8}\\n            noPagination={false}\\n            style={{ width: \\\"90vw\\\" }}\\n            columnsConfig=\\\"16vw 18vw 18vw 18vw 16vw\\\"\\n            data={transfers.map((e) => [\\n              e.symbol,\\n              (Number(e.value) / Number(`1e${e.decimals}`)).toFixed(3),\\n              `${e.from_address.slice(0, 4)}...${e.from_address.slice(38)}`,\\n              `${e.to_address.slice(0, 4)}...${e.to_address.slice(38)}`,\\n              e.block_timestamp.slice(0,10),\\n            ])}\\n            header={[\\n              <span>Token</span>,\\n              <span>Amount</span>,\\n              <span>From</span>,\\n              <span>To</span>,\\n              <span>Date</span>,\\n            ]}\\n          />\\n        )}\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default TransferHistory;\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical ERC20 Token Prices in TypeScript\nDESCRIPTION: TypeScript implementation to retrieve historical token prices using Moralis API. Makes multiple requests to get prices at different block heights using the getTokenPrice endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-historical-erc20-token-price.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const historicalPrice = [];\n\n  const address = \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  for (let toBlock = 16323500; toBlock < 16323550; toBlock += 10) {\n    const response = await Moralis.EvmApi.token.getTokenPrice({\n      address,\n      chain,\n      toBlock,\n    });\n\n    historicalPrice.push(response?.toJSON());\n  }\n\n  console.log(historicalPrice);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Frontend\nDESCRIPTION: Example of the .env.local file content for configuring the frontend application with necessary environment variables.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nAPP_CHAIN_ID=devnet\nAPP_DOMAIN=ethereum.boilerplate \nMORALIS_API_KEY= xxx\nNEXTAUTH_SECRET= # Linux: `openssl rand -hex 32` or go to https://generate-secret.now.sh/64\nNEXTAUTH_URL=http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Burning Functionality in Solana dApp\nDESCRIPTION: TypeScript code for burning selected NFTs using Metaplex SDK, including transaction creation and execution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-burner.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst burnNFT = async () => {\n  // ...\n  const totalTxs = await Promise.all(\n    nftsToDelete.map(async (nft) => {\n      const tx = await metaplex\n        .nfts()\n        .delete({\n          mintAddress: new PublicKey(nft),\n        })\n        .run();\n      return tx;\n    })\n  );\n  setNftsToDelete(() => []);\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (PowerShell)\nDESCRIPTION: Uses the `cd` (change directory) command in a PowerShell terminal to navigate into the specific project folder named `aws-node-express-api-project`. This action is required to ensure subsequent commands, like dependency installation, are executed within the correct project context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\ncd aws-node-express-api-project\n```\n\n----------------------------------------\n\nTITLE: Querying Pancakeswap V1 Pair Reserves with Moralis DeFi API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the Moralis SDK and call the getPairReserves endpoint to fetch reserve balances for a specified Pancakeswap V1 pair on Binance Smart Chain (BSC). Required dependencies include the Moralis SDK and @moralisweb3/common-evm-utils, both installable via npm or yarn. The key parameters are 'apiKey' for authentication, 'pairAddress' for the target liquidity pool, and 'chain' for the blockchain network. The output is logged as a JSON object representing the reserves. Make sure Node.js v14+ and all dependencies are installed before running.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-reserves.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xaebe45e3a03b734c68e5557ae04bfc76917b4686\";\n\n  const chain = EvmChain.BSC;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Available Solana Tic-Tac-Toe Games in TypeScript/React\nDESCRIPTION: This TypeScript/React code snippet defines a component responsible for fetching Tic-Tac-Toe game accounts from the Solana blockchain using `connection.getProgramAccounts`. It stores the deserialized game data in the `gameAccounts` state variable. The `getProgramAccounts` function is triggered by a 'Refresh Games' button, clearing the existing list and fetching updated data. The component then renders a list of available games using the `Games` component, allowing users to select and load a game.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `src/components/templates/TicTacToe/TicTacToe.tsx`\n\n// Data of available game accounts are stored in state variable\nconst [gameAccounts, setGameAccounts] = useState<Array<gameData['data']>>([]);\n\n// `getProgramAccounts` function is called when then Refresh games button is clicked\nconst getProgramAccounts = async () => {\n    setGameAccounts([]);\n    const data = await connection.getProgramAccounts(new PublicKey(programId));\n    if (data.length) {\n      data.forEach((e) => {\n        console.log(e);\n        const gameInput = deserializeUnchecked(GameAccountSchema, GameAccount, e.account.data);\n        const accountId = e.pubkey;\n        const game = { gameInput, accountId };\n        console.log(data);\n        setGameAccounts((existing) => [...existing, game]);\n      });\n  };\n\nreturn (\n  <Flex flexDirection={'column'} alignItems={'center'}>\n    <Heading size=\"sm\" marginBottom={6}>\n      {gameAccounts.length ? 'Available Games!!' : 'Click to refresh games'}\n    </Heading>\n    <Flex overflow={'scroll'} maxWidth={'800px'} gap={'4px'}>\n     // UI is rendered with the data from `gameAccounts` stae\n      {gameAccounts &&\n        gameAccounts.map((game, i) => {\n          return (\n            <Games\n              key={i}\n              data={{ gameInput: game.gameInput, accountId: game.accountId }}\n              loadGame={() => {\n                loadGame(game);\n              }}\n            />\n          );\n        })}\n    </Flex>\n    <Button\n      maxWidth={'200px'}\n      minWidth={'150px'}\n      mt={4}\n      colorScheme=\"gray\"\n      isLoading={status ? true : false}\n      onClick={getProgramAccounts}\n    >\n      Refresh Games\n    </Button>\n  </Flex>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Stream Filters with Logical Operators - Moralis Streams API - JavaScript\nDESCRIPTION: Demonstrates how to construct a nested filter object in JavaScript for use with Moralis Streams API. This filter selects data based on contract address and value, using combinations of 'or', 'and', 'eq', and 'gte' operators. The filter is intended for stream subscription setup and requires contract addresses and numerical value thresholds as parameters. Returns filtered events matching any of the logical groupings; relies on Moralis Streams supporting these filter objects.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/filter-streams.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst filter = {\n  or: [\n    {\n      and: [\n        {\n          eq: [\"moralis_streams_contract_address\", \"0x1\"],\n        },\n        {\n          gte: [\"value\", 1000000000], // Example of USDT (6 Decimals)\n        },\n      ],\n    },\n    {\n      and: [\n        {\n          eq: [\"moralis_streams_contract_address\", \"0x2\"],\n        },\n        {\n          gte: [\"value\", 1000000000000000000000], // Example of BUSD (18 Decimals)\n        },\n      ],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection NFTs with Moralis SDK in Python\nDESCRIPTION: This Python script illustrates fetching all NFTs from a specific contract using the Moralis Python SDK. It requires the `moralis` library and `json` for pretty-printing. The script sets up the API key and parameters including the contract `address`, `chain` ('eth'), `limit`, and `normalizeMetadata`. It then calls `evm_api.nft.get_contract_nfts` and prints the formatted JSON response. Optional parameters like `cursor` for pagination are included but commented out.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    # \"totalRanges\": 0,\n    # \"range\": 0,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_contract_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana API Navigation Card with SVG Icon in JSX\nDESCRIPTION: This code renders a navigation card for the Solana API documentation with a gradient-colored Solana logo SVG and a brief description of the API's functionality for fetching blockchain data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/index.md#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<a className=\"card padding--lg card--homepage\" href=\"/web3-data-api/solana/reference\">\n    <h3>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"37\" height=\"29\" viewBox=\"0 0 37 29\" fill=\"none\"><g id=\"Solana\"><g id=\"Vector\"><path d=\"M6.51468 21.866C6.7319 21.6489 7.03058 21.5222 7.34735 21.5222H36.0747C36.5996 21.5222 36.8621 22.1554 36.491 22.5263L30.8161 28.198C30.5989 28.4151 30.3002 28.5417 29.9835 28.5417H1.25615C0.731204 28.5417 0.46873 27.9085 0.839814 27.5376L6.51468 21.866Z\" fill=\"url(#paint0_linear_8357_1864)\"></path><path d=\"M6.51467 0.689929C6.74094 0.472832 7.03962 0.346191 7.34735 0.346191H36.0747C36.5996 0.346191 36.8621 0.979392 36.491 1.35027L30.8161 7.02194C30.5989 7.23903 30.3002 7.36567 29.9834 7.36567H1.25614C0.731196 7.36567 0.468722 6.73247 0.839806 6.3616L6.51467 0.689929Z\" fill=\"url(#paint1_linear_8357_1864)\"></path><path d=\"M30.8161 11.2101C30.5989 10.993 30.3002 10.8664 29.9835 10.8664H1.25615C0.731204 10.8664 0.46873 11.4996 0.839814 11.8705L6.51468 17.5421C6.7319 17.7592 7.03058 17.8859 7.34735 17.8859H36.0747C36.5996 17.8859 36.8621 17.2527 36.491 16.8818L30.8161 11.2101Z\" fill=\"url(#paint2_linear_8357_1864)\"></path></g></g><defs><linearGradient id=\"paint0_linear_8357_1864\" x1=\"18.6654\" y1=\"0.346191\" x2=\"18.6654\" y2=\"28.5417\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#33FFCC\"></stop><stop offset=\"1\" stop-color=\"#D625FD\"></stop></linearGradient><linearGradient id=\"paint1_linear_8357_1864\" x1=\"18.6654\" y1=\"0.346191\" x2=\"18.6654\" y2=\"28.5417\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#33FFCC\"></stop><stop offset=\"1\" stop-color=\"#D625FD\"></stop></linearGradient><linearGradient id=\"paint2_linear_8357_1864\" x1=\"18.6654\" y1=\"0.346191\" x2=\"18.6654\" y2=\"28.5417\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#33FFCC\"></stop><stop offset=\"1\" stop-color=\"#D625FD\"></stop></linearGradient></defs></svg>&nbsp;&nbsp;Solana API</h3>\n    <p>Fetch user and token data from the Solana blockchain.</p>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Querying Pump.fun Token Price via Moralis API using cURL - Shell\nDESCRIPTION: This snippet demonstrates how to send an HTTP GET request using cURL to the Moralis Solana API to fetch real-time price data for a specified Pump.fun token. It requires an active Moralis API key (provided in the 'X-API-Key' header), the token's Solana address, and supports JSON-formatted responses. The key parameters are the token address in the URL and the provided API key. Successful requests will return price data in both USD and native SOL units. Ensure network connectivity and valid key usage; rate limits may apply based on your subscription.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/02-get-pump-fun-token-prices.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/token/mainnet/9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump/price' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Verifying Moralis Webhook Signature in JavaScript\nDESCRIPTION: This JavaScript function verifies the signature of an incoming Moralis webhook request. It retrieves the signature from the `x-signature` header, calculates the expected signature using `web3.utils.sha3` on the request body concatenated with the secret key, and compares the two. An error is thrown if the signature is missing or invalid. Requires the `web3` library.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/stream-security/webhook-security.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst verifySignature = (req, secret) => {\n  const providedSignature = req.headers[\"x-signature\"];\n  if (!providedSignature) throw new Error(\"Signature not provided\");\n  const generatedSignature = web3.utils.sha3(JSON.stringify(req.body) + secret);\n  if (generatedSignature !== providedSignature)\n    throw new Error(\"Invalid Signature\");\n};\n```\n\n----------------------------------------\n\nTITLE: Generating a Base64 Secret Key in C#\nDESCRIPTION: This C# code snippet demonstrates how to convert a plain text phrase into a Base64 encoded string using `System.Text.Encoding.UTF8.GetBytes` and `System.Convert.ToBase64String`. This technique is useful for generating a secret key suitable for use in JWT signing, as shown in the `TokenManager` example. This code is intended as a utility, perhaps run in a separate console application, not as part of the main web application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nstring phrase = \"Morails Web3 APIs are the greatest thing since sliced bread!\";\n\nstring base64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(phrase));\n\nConsole.WriteLine(base64);\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK in Python\nDESCRIPTION: Initialize and test the Moralis SDK in Python by checking the Web3 API version using an API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/01-moralis-sdk.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport moralis\n\nprint(moralis.utils.web3_api_version(api_key='API_KEY_HERE'))\n\n# it prints {'version': '0.0.53'}\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs with Python\nDESCRIPTION: Python implementation to fetch NFTs owned by a wallet address across multiple chains using Moralis API. Uses the evm_api.nft module to query NFTs on Ethereum, BSC, and Polygon networks.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 1,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = []\nfor chain in ('eth', 'bsc', 'polygon'):\n\tparams['chain'] = chain\n\tresult += [evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n\t)]\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Building the Profile Page UI Component\nDESCRIPTION: Complete UI rendering code for the profile page. It uses the data from the Lens API to display profile information, stats, and NFTs in a tabbed interface with different sections.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n    <div className={styles.container}>\n      <img\n        className={styles.banner}\n        src={profile.coverPicture.original.url}\n        alt=\"cover\"\n      />\n      <div className={styles.profile}>\n        <div className={styles.profileLeft}>\n          <img\n            className={styles.profileImg}\n            src={profile.picture.original.url}\n            alt=\"profileImg\"\n          />\n          <div className={styles.info}>\n            <div className={styles.name}>{profile.name}</div>\n            <div className={styles.handle}>{profile.handle}</div>\n            <div className={styles.bio}>{profile.bio}</div>\n            <div className={styles.follow}>\n              <div>Followers</div>\n              <div>{profile.stats.totalFollowers}</div>\n            </div>\n            <div className={styles.follow}>\n              <div>Following</div>\n              <div>{profile.stats.totalFollowing}</div>\n            </div>\n          </div>\n        </div>\n        <div className={styles.profileRight}>\n          <Tabs defaultActiveKey=\"1\" centered>\n            <TabPane tab=\"I'm Following\" key=\"1\">\n              <div className={styles.followingNFTs}>\n                {nftArray?.map((e) => {\n                  return <iframe className={styles.animation} src={e}></iframe>;\n                })}\n              </div>\n            </TabPane>\n            <TabPane tab=\"Follow Me\" key=\"2\">\n              <div className={styles.followMe}>\n                <div>\n                  <div className={styles.promptOne}>Hey There 👋🏼</div>\n                  <div className={styles.promptTwo}>\n                    Give me a follow and receive this cool NFT!\n                  </div>\n                  <Button onClick={follow} type=\"primary\">\n                    Follow Me\n                  </Button>\n                </div>\n                {myNFT && (\n                  <iframe className={styles.myNFT} src={myNFT}></iframe>\n                )}\n              </div>\n            </TabPane>\n            <TabPane tab=\"Social Posts\" key=\"3\" disabled={true} />\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Transfer Filters for USDC Events in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define advanced filtering rules for USDC Transfer events within Moralis streams. The filter captures events where either the sender (‘from’) or receiver (‘to’) is the zero address, indicating a mint or burn, and the transfer value is at least 10,000 USDC (in 6 decimals, 10000000000). No external dependencies are required, and this logic is directly used in the admin panel's filter configuration UI. The input is applied to token event fields, while output selects matching transfers per the specified OR-AND logical conditions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/filter-streams.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"or\": [\n    {\n      \"and\": [\n        { \"eq\": [\"from\", \"0x0000000000000000000000000000000000000000\"] },\n        { \"gte\": [\"value\", \"10000000000\"] }\n      ]\n    },\n    {\n      \"and\": [\n        { \"eq\": [\"to\", \"0x0000000000000000000000000000000000000000\"] },\n        { \"gte\": [\"value\", \"10000000000\"] }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing State Variables for Interchain Token Transfer in React\nDESCRIPTION: Initializes state variables within the `TransferToken` React functional component using the `useState` hook. These variables (`sourceChain`, `destinationChain`, `receiverAddress`, `amountToTransfer`, `interchainTokenContractAddress`) are intended to store user input required for initiating a cross-chain token transfer.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst TransferToken = () = >{\n  //...\n  const[sourceChain, setSourceChain] = useState < string > ('');\n  const[destinationChain, setDestinationChain] = useState < string > ('');\n  const[receiverAddress, setReceiverAddress] = useState < string > ('');\n  const[amountToTransfer, setAmountToTransfer] = useState < number > (0);\n  const[interchainTokenContractAddress, setInterchainTokenContractAddress] = useState < string > ('');\n  return (\n  //...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Metaplex SDK for Solana NFT Burning\nDESCRIPTION: TypeScript code to initialize Metaplex SDK with the connected wallet and devnet cluster for creating and processing transactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-burner.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst wallet = useWallet();\nconst connection = new Connection(clusterApiUrl(\"devnet\"));\nconst metaplex = new Metaplex(connection);\nmetaplex.use(walletAdapterIdentity(wallet));\n```\n\n----------------------------------------\n\nTITLE: Main App Component Implementation\nDESCRIPTION: Core application component integrating all features including chart data fetching and display.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-tradingview-lightweight-charts-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ChainSelector from \"./components/ChainSelector\";\nimport TokenInput from \"./components/TokenInput\";\nimport CandlestickChart from \"./components/CandlestickChart\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nconst App = () => {\n  const [chain, setChain] = useState(\"\");\n  const [pairs, setPairs] = useState([]);\n  const [selectedPair, setSelectedPair] = useState(\"\");\n  const [candlestickData, setCandlestickData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchCandlestickData = async (pairAddress) => {\n    if (!pairAddress) return;\n\n    setLoading(true);\n    try {\n      const apiKey = process.env.REACT_APP_MORALIS_API_KEY;\n      const currentTime = Math.floor(Date.now() / 1000);\n      const fromDate = currentTime - 30 * 24 * 60 * 60;\n\n      const response = await axios.get(\n        `https://deep-index.moralis.io/api/v2.2/pairs/${pairAddress}/ohlcv`,\n        {\n          params: {\n            chain,\n            timeframe: \"1d\",\n            currency: \"usd\",\n            fromDate,\n            toDate: currentTime,\n            limit: 1000,\n          },\n          headers: { \"X-API-Key\": apiKey },\n        }\n      );\n\n      const formattedData = response.data.result.map((item) => ({\n        time: Math.floor(new Date(item.timestamp).getTime() / 1000),\n        open: item.open,\n        high: item.high,\n        low: item.low,\n        close: item.close,\n      }));\n\n      setCandlestickData(formattedData);\n    } catch (error) {\n      console.error(\"Error fetching candlestick data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedPair) {\n      fetchCandlestickData(selectedPair);\n    }\n  }, [selectedPair]);\n\n  return (\n    <div className=\"app-container\">\n      <h1>Crypto Trading Charts</h1>\n\n      <div className=\"controls-container\">\n        <ChainSelector onSelect={setChain} />\n\n        <TokenInput\n          chain={chain}\n          onPairsFetched={setPairs}\n          onReset={() => {\n            setPairs([]);\n            setSelectedPair(\"\");\n            setCandlestickData([]);\n          }}\n        />\n\n        {pairs.length > 0 && (\n          <select\n            value={selectedPair}\n            onChange={(e) => setSelectedPair(e.target.value)}\n          >\n            {pairs.map((pair) => (\n              <option key={pair.pairAddress} value={pair.pairAddress}>\n                {pair.pairLabel} (${Math.round(pair.liquidity).toLocaleString()})\n              </option>\n            ))}\n          </select>\n        )}\n      </div>\n\n      {loading ? (\n        <div className=\"loading-spinner\">\n          <ClipLoader color=\"#2196f3\" size={50} />\n        </div>\n      ) : (\n        candlestickData.length > 0 && (\n          <div className=\"chart-container\">\n            <CandlestickChart candlestickData={candlestickData} />\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Testing Event Payload for AWS Lambda (JSON)\nDESCRIPTION: This snippet defines the JSON event payload required for testing AWS Lambda functions such as getNativeBalance and getWalletNfts. It includes the 'address' parameter for the wallet address and the 'chain' parameter to specify the blockchain network, both of which are required by the Lambda handler. The payload is intended as sample input in the AWS Console's test tab and serves as the body for GET requests made via API testing tools like Postman.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"address\\\": \\\"0x99939EXAMPLEADDRESS\\\",\\n  \\\"chain\\\": \\\"0x1\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Complete App.js implementation with wagmi and React Router\nDESCRIPTION: The full implementation of App.js showing the integration of wagmi for Web3 connectivity and React Router for routing between the signin, user, and home pages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\n\nimport { createConfig, configureChains, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { mainnet } from \"wagmi/chains\";\n\nimport Signin from \"./signin\";\nimport User from \"./user\";\n\nconst { publicClient, webSocketPublicClient } = configureChains(\n  [mainnet],\n  [publicProvider()]\n);\n\nconst config = createConfig({\n  autoConnect: true,\n  publicClient,\n  webSocketPublicClient,\n});\n\nconst router = createBrowserRouter([\n  {\n    path: \"/signin\",\n    element: <Signin />,\n  },\n  {\n    path: \"/user\",\n    element: <User />,\n  },\n  {\n    path: \"/\",\n    element: <h1>Home Component</h1>,\n  },\n]);\n\nfunction App() {\n  return (\n    <WagmiConfig config={config}>\n      <RouterProvider router={router} />\n    </WagmiConfig>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical NFT Transfers using Moralis SDK (Python)\nDESCRIPTION: This Python snippet uses the moralis 'evm_api' library to retrieve all NFT transfer activity related to a specific wallet address and blockchain (such as Ethereum or Polygon). It requires specifying 'address', 'chain', and supplying an API key, with results printed directly. Install the 'moralis' package and handle your API key securely.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"USER_WALLET_ADDRESS\",\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.nft.get_wallet_nft_transfers(\n  api_key=api_key,\n  params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK for Solana API with a Custom Default Network in TypeScript\nDESCRIPTION: Illustrates configuring the Moralis SDK to use Solana's DEVNET as the default network using 'defaultSolNetwork' and then calls the 'account.getBalance' method. Requires the Moralis and @moralisweb3/common-sol-utils packages. 'apiKey' is required for authentication and 'address' specifies the Solana wallet to query. The default Solana network applies to API calls unless explicitly overridden.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/cross-chain-requests.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  defaultSolNetwork: SolNetwork.DEVNET,\n});\n\nMoralis.SolApi.account.getBalance({\n  address: \"ADDRESS\",\n});\n```\n\n----------------------------------------\n\nTITLE: Querying SPL NFT Balance with Moralis Solana API (TypeScript)\nDESCRIPTION: This TypeScript example shows how to use strongly-typed imports from the Moralis SDK and Solana utility package to retrieve NFTs owned by a specific wallet. Dependencies include 'moralis' and '@moralisweb3/common-sol-utils'. The code expects 'apiKey', 'address', and 'network' parameters, and prints out the NFT data in JSON format. Type safety is leveraged, making it suitable for TypeScript projects.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/nft-api/how-to-get-spl-nft-balance-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getNFTs({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Calling Moralis EvmApi Methods with Flexible Data Type Inputs - Moralis SDK - JavaScript\nDESCRIPTION: Demonstrates how to use the Moralis SDK's EvmApi methods, specifically nft.getWalletNFTs, by supplying the chain and address parameters in various input formats. Inputs can be provided as hex strings, decimal values, or wrapped in data type objects (EvmChain, EvmAddress). Requires the '@moralisweb3/common-evm-utils' library and a configured Moralis instance. Parameters include the blockchain network (chain) and wallet address (address), and the output is the result of the API call.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmChain, EvmAddress } from \"@moralisweb3/common-evm-utils\";\n\nMoralis.EvmApi.nft.getWalletNFTs({\n  chain: \"0x1\",\n  address: \"0xa74476443119A942dE498590Fe1f2454d7D4aC0d\",\n});\n\nMoralis.EvmApi.nft.getWalletNFTs({\n  chain: \"0x1\",\n  address: \"0xa74476443119a942de498590fe1f2454d7d4ac0d\",\n});\n\nMoralis.EvmApi.nft.getWalletNFTs({\n  chain: EvmChain.ETHEREUM,\n  address: EvmAddress.ZERO_ADDRESS,\n});\n\nMoralis.EvmApi.nft.getWalletNFTs({\n  chain: EvmChain.create(1),\n  address: EvmAddress.create(\"0xa74476443119A942dE498590Fe1f2454d7D4aC0d\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Representing Autoglyph NFT Data (ID 13) in JSON\nDESCRIPTION: This JSON object details the metadata and ownership information for Autoglyph NFT with token ID \"13\". It includes the contract address, owner's address, block numbers related to minting and current state, contract type (ERC721), and the unique 'token_uri' containing the ASCII art representation stored on-chain via a data URI. Note that 'metadata' is null, suggesting metadata might be derived directly from the 'token_uri' or fetched separately.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"token_address\": \"0xd4e4078ca3495de5b1d4db434bebc5a986197782\",\n      \"token_id\": \"13\",\n      \"owner_of\": \"0x8e232860171762f6ff2d22d1fcc45af78bd3fbb5\",\n      \"block_number\": \"15791513\",\n      \"block_number_minted\": \"7516991\",\n      \"token_hash\": \"0a38a6c7ed1a255a3431582f0282b625\",\n      \"amount\": \"1\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Autoglyphs\",\n      \"symbol\": \"☵\",\n      \"token_uri\": \"data:text/plain;charset=utf-8,..OO.......O........................................O.......OO..%0A...O......O....O......O..................O......O....O......O...%0AO.........O..........O......O..OO..O......O..........O.........O%0AOO....O..................................................O....OO%0A................................................................%0A......O....O....O....O....O..........O....O....O....O....O......%0A...O.OO........O.........O............O.........O........OO.O...%0A.......OO...O....O....O..................O....O....O...OO.......%0A.......O................................................O.......%0A................................................................%0A.OO........OO........OO........OO........OO........OO........OO.%0AO....O....O....O....O....O....O..O....O....O....O....O....O....O%0A.......O..O..O......O..O..O..........O..O..O......O..O..O.......%0A............O....O...OOO..OOO..OO..OOO..OOO...O....O............%0A..............................O..O..............................%0A.O....O....O.............O....O..O....O.............O....O....O.%0A.....O....................................................O.....%0A.......O.....O....O....OO....O....O....OO....O....O.....O.......%0A.................O............................O.................%0A......................O........OO........O......................%0A...........OO............OO..........OO............OO...........%0A..O..O....O..O...............O....O...............O..O....O..O..%0A.O.....O..O..O.....O........O..OO..O........O.....O..O..O.....O.%0A............OO...O............................O...OO............%0A.................O..........O......O..........O.................%0A......O....O...O....O........O....O........O....O...O....O......%0A.....O......OO......O......OO......OO......O......OO......O.....%0A.............O............O..........O............O.............%0A..O..........O........O.O.O..........O.O.O........O..........O..%0A.................O...O...O...O....O...O...O...O.................%0A...........O..OO...............OO...............OO..O...........%0A..O.......O..O.....O..O.......O..O.......O..O.....O..O.......O..%0A..........O..O.......O........O..O........O.......O..O..........%0A...........OOO..............O..OO..O..............OOO...........%0A.O...O...O............................................O...O...O.%0A..O.O..........O..........O...O..O...O..........O..........O.O..%0AO...........O......O.....O............O.....O......O...........O%0A......O......OO......O......O......O......O......OO......O......%0A....O......O.O....O........O........O........O....O.O......O....%0A.....O...O..........O...O..............O...O..........O...O.....%0A...............OOO.OO......................OO.OOO...............%0A.......O..O..........................................O..O.......%0A..........O..O....O.......O....OO....O.......O....O..O..........%0A...........OO..........OO..............OO..........OO...........%0AO........O........O....O...O........O...O....O........O........O%0AO................O.O.O...O............O...O.O.O................O%0A.......O....O....OO....O................O....OO....O....O.......%0A.....OO.......O........O................O........O.......OO.....%0A......O....O...........O....O......O....O...........O....O......%0A..O......O......O.........O..........O.........O......O......O..%0A.....................O...OO...OOOO...OO...O.....................%0A....O..O.........O..O......O..O..O..O......O..O.........O..O....%0A...............O....O....O....O..O....O....O....O...............%0AO........OO..........OO........OO........OO..........OO........O%0A....O....OO...O....O....O....O....O....O....O....O...OO....O....%0A................................................................%0A..O....O....O....O....O..................O....O....O....O....O..%0A....O.O........OO.........O..........O.........OO........O.O....%0A................O.......O....O....O....O.......O................%0A......O..O..O............O..O......O..O............O..O..O......%0AO..............................................................O%0A.......O......O.............O......O.............O......O.......%0A.............................O....O.............................%0A...O......O.......OO.......O........O.......OO.......O......O...%0A\",\n      \"metadata\": null,\n      \"last_token_uri_sync\": \"2022-08-04T16:49:04.958Z\",\n      \"last_metadata_sync\": \"2022-08-04T16:49:10.970Z\",\n      \"minter_address\": null\n    }\n```\n\n----------------------------------------\n\nTITLE: Verifying Signature, Managing User, and Signing Supabase JWT (TypeScript)\nDESCRIPTION: Defines an asynchronous backend function `verifyMessage` in TypeScript. This function receives the network type, the user's signature, and the original message. It uses `Moralis.Auth.verify` to validate the signature against the message. If valid, it queries the Supabase `users` table for an existing user matching the `moralis_provider_id` (derived from `authData.profileId`). If no user exists, it inserts a new user record. Finally, it generates a Supabase-compatible JWT using the `jsonwebtoken` library, embedding user details and role information, signed with the `SUPABASE_JWT` secret. The function returns the user data and the generated JWT.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function verifyMessage({ network, signature, message }: VerifyMessage) {\n  const result = await Moralis.Auth.verify({\n    network,\n    signature,\n    message,\n  });\n\n  const authData = result.toJSON();\n\n  let { data: user } = await supabase.from('users').select('*').eq('moralis_provider_id', authData.profileId).single();\n\n  if (!user) {\n    const response = await supabase\n      .from('users')\n      .insert({ moralis_provider_id: authData.profileId, metadata: authData })\n      .single();\n    user = response.data;\n  }\n\n  const token = jwt.sign(\n    {\n      ...user,\n      aud: 'authenticated',\n      role: 'authenticated',\n      exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7,\n    },\n    config.SUPABASE_JWT,\n  );\n\n  return { user, token };\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for SPL Token Price Query\nDESCRIPTION: This JSON object shows a sample response returned by the Moralis `getTokenPrice` endpoint. It includes the token's price in USD (`usdPrice`), the exchange name and address where the price was sourced, and the price relative to the native token (Wrapped Solana - WSOL), including its value, symbol, name, and decimals.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/token-api/how-to-get-spl-token-price.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"usdPrice\": 0.2435,\n  \"exchangeName\": \"Raydium\",\n  \"exchangeAddress\": \"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\",\n  \"nativePrice\": {\n    \"value\": \"20995847\",\n    \"symbol\": \"WSOL\",\n    \"name\": \"Wrapped Solana\",\n    \"decimals\": 9\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Uploading NFT Metadata to Arweave via Backend API in TypeScript\nDESCRIPTION: This Next.js API route (`pages/api/upload.ts`) handles metadata uploads. It initializes a Metaplex connection on the backend, uses a server-side keypair derived from the `PRIVATE_KEY` environment variable, and configures Bundlr storage for Arweave. It then calls `metaplex.nfts().uploadMetadata()` with the provided metadata and returns the resulting Arweave URI and other data to the frontend.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-minter.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Complete code can be found in `pages/api/upload.ts`\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  // Creating a new connection the backend\n  const connection = new Connection(clusterApiUrl(\"devnet\"));\n  const metaplex = new Metaplex(connection);\n\n  // Using private key in backend to sign the transaction for uploading the metadata.\n  const key = Uint8Array.from(base58.decode(process.env.PRIVATE_KEY));\n  const keypair = Keypair.fromSecretKey(key);\n\n  // Using bundlr storage for connecting to arweave storage\n  metaplex.use(walletAdapterIdentity(keypair));\n  metaplex.use(\n    bundlrStorage({\n      address: \"https://devnet.bundlr.network\",\n      providerUrl: \"https://api.devnet.solana.com\",\n      timeout: 60000,\n      identity: keypair,\n    })\n  );\n\n  // Uploading metadata\n  const data = await metaplex\n    .nfts()\n    .uploadMetadata({ name, description, image, symbol })\n    .run();\n\n  // Send the response to frontend\n  res.status(200).json(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Price using Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve the price of an SPL token on the Solana network using the Moralis SDK. It initializes the Moralis client with an API key, specifies the token contract address and the network (MAINNET), then calls `Moralis.SolApi.token.getTokenPrice`. The response containing price details is logged to the console. Requires `moralis` and `@moralisweb3/common-sol-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/token-api/how-to-get-spl-token-price.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.token.getTokenPrice({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Program Dependencies\nDESCRIPTION: Shell commands to add required Rust packages for Solana program development.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo add solana_program\ncargo add borsh\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Moralis Token Approvals API\nDESCRIPTION: This JSON snippet shows an example response structure from the Moralis `getWalletApprovals` API endpoint. It includes pagination details (`page`, `page_size`, `cursor`) and a `result` array. Each object in the `result` array represents a token approval, detailing the block information, transaction hash, approved value (raw and formatted), token details (address, name, symbol, logo, potential spam flag, balance, price, value at risk), and spender details (address, label, entity).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/001-Wallet Approvals/build-a-revoke-cash-clone.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"page\": 2,\n  \"page_size\": 100,\n  \"cursor\": \"\",\n  \"result\": [\n    {\n      \"block_number\": \"12526958\",\n      \"block_timestamp\": \"2021-04-02T10:07:54.000Z\",\n      \"transaction_hash\": \"0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09\",\n      \"value\": \"8409770570506626\",\n      \"value_formatted\": \"0.1\",\n      \"token\": {\n        \"address\": \"0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c\",\n        \"address_label\": \"\",\n        \"name\": \"Tether USD\",\n        \"symbol\": \"USDT\",\n        \"logo\": \"https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png\",\n        \"possible_spam\": \"\",\n        \"verified_contract\": \"\",\n        \"current_balance\": \"1000000000000000\",\n        \"current_balance_formatted\": \"0.1\",\n        \"usd_price\": \"1000000000000000\",\n        \"usd_at_risk\": \"1000000000000000\"\n      },\n      \"spender\": {\n        \"address\": \"0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c\",\n        \"address_label\": \"Binance 1\",\n        \"entity\": \"Opensea\",\n        \"entity_logo\": \"https://opensea.io/favicon.ico\"\n      }\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Metaplex SDK with Wallet Connection in TypeScript\nDESCRIPTION: Initializes the Metaplex SDK within a React component (likely using NextJS). It gets the connected wallet via the `useWallet` hook, establishes a connection to the Solana devnet using `Connection` and `clusterApiUrl`, and configures a `Metaplex` instance to use the connected wallet's identity for signing transactions via `walletAdapterIdentity`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-minter.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/*\n * We use the connected wallet and the cluster connection\n * with metaplex for creating and processing the transactions.\n */\nconst wallet = useWallet();\nconst connection = new Connection(clusterApiUrl(\"devnet\"));\nconst metaplex = new Metaplex(connection);\nmetaplex.use(walletAdapterIdentity(wallet));\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK and Configuring ASP.NET Core C# Application\nDESCRIPTION: This C# code snippet demonstrates the setup of an ASP.NET Core 6 Web API application. It configures Cross-Origin Resource Sharing (CORS) to allow requests from a specific origin, adds controllers and Swagger/OpenAPI services, builds the application pipeline including HTTPS redirection and authorization, and crucially initializes the Moralis SDK by setting the `MoralisClient.ConnectionData` with the required API key before running the application. This setup is essential for enabling Moralis authentication features within the .NET backend.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar AllowedOrigins = \"_allowedOrigins\";\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Define CORS policy\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(AllowedOrigins,\n                    policy =>\n                    {\n                        policy.WithOrigins(\"http://127.0.0.1:5500\")\n                                            .AllowAnyHeader()\n                                            .AllowAnyMethod();\n                    });\n});\n\n// Add services to the container.\nbuilder.Services.AddControllers();\n\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseCors(AllowedOrigins);\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\n// Setup Moralis\nMoralis.MoralisClient.ConnectionData = new Moralis.Models.ServerConnectionData()\n{\n    ApiKey = \"MY API KEY\"\n};\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Transfers with TypeScript\nDESCRIPTION: TypeScript implementation to retrieve NFT transfers for a wallet using Moralis EvmApi. Requires Moralis and common-evm-utils dependencies. Takes wallet address and chain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-NFT-transfers-by-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Create Token Input Component\nDESCRIPTION: Component for handling token address input and fetching trading pairs using Moralis API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-tradingview-lightweight-charts-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst TokenInput = ({ chain, onPairsFetched, onReset }) => {\n  const [tokenAddress, setTokenAddress] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const fetchPairs = async () => {\n    const apiKey = process.env.REACT_APP_MORALIS_API_KEY;\n    const url = `https://deep-index.moralis.io/api/v2.2/erc20/${tokenAddress}/pairs?chain=${chain}`;\n\n    setLoading(true);\n    try {\n      const response = await axios.get(url, {\n        headers: { \"X-API-Key\": apiKey, accept: \"application/json\" },\n      });\n\n      const sortedPairs = response.data.pairs\n        .map((pair) => ({\n          ...pair,\n          liquidity: pair.liquidity_usd || pair.liquidityUsd || 0,\n        }))\n        .sort((a, b) => b.liquidity - a.liquidity);\n\n      onPairsFetched(sortedPairs);\n    } catch (error) {\n      console.error(\"Error fetching token pairs:\", error);\n      onPairsFetched([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Enter Token Address\"\n        value={tokenAddress}\n        onChange={(e) => {\n          setTokenAddress(e.target.value);\n          onReset();\n        }}\n      />\n      <button onClick={fetchPairs} disabled={!tokenAddress || !chain}>\n        Fetch Pairs\n      </button>\n      {loading && <div>Loading pairs...</div>}\n    </div>\n  );\n};\n\nexport default TokenInput;\n```\n\n----------------------------------------\n\nTITLE: Installing ngrok Globally\nDESCRIPTION: Installs ngrok globally to create a tunnel to the local Express app for webhook setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g ngrok\n```\n\n----------------------------------------\n\nTITLE: Creating Moralis Stream for ENS Registrations in JavaScript\nDESCRIPTION: Uses the Moralis JavaScript SDK to define the ABI for the ENS `NameRegistered` event, create a filter for a specific owner and cost > 1 ETH, and configure options to create a new Moralis Stream. It then adds the ENS Registry contract address to the stream for monitoring.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-monitor-ens-domain-registrations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ensNameRegisteredAbi = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    {\n      \"indexed\": false,\n      \"internalType\": \"string\",\n      \"name\": \"name\",\n      \"type\": \"string\",\n    },\n    {\n      \"indexed\": true,\n      \"internalType\": \"bytes32\",\n      \"name\": \"label\",\n      \"type\": \"bytes32\",\n    },\n    {\n      \"indexed\": true,\n      \"internalType\": \"address\",\n      \"name\": \"owner\",\n      \"type\": \"address\",\n    },\n    {\n      \"indexed\": false,\n      \"internalType\": \"uint256\",\n      \"name\": \"cost\",\n      \"type\": \"uint256\",\n    },\n    {\n      \"indexed\": false,\n      \"internalType\": \"uint256\",\n      \"name\": \"expires\",\n      \"type\": \"uint256\",\n    },\n  ],\n  \"name\": \"NameRegistered\",\n  \"type\": \"event\",\n}]; // valid abi of the event\n\nconst filter = {\n  \"and\": [\n    { \"eq\": [\"owner\", \"0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5\"] },\n    { \"gt\": [\"cost\", \"1000000000000000000\"] },\n  ],\n}; // only receive registration events if the owner is the address and the cost is higher than 1 ETH\n\nconst options = {\n  chains: [EvmChain.ETHEREUM], // Ethereum Name Service so we only monitor Ethereum\n  description: \"ENS Name Registrations\", // your description\n  tag: \"ensRegistrationByBob\", // give it a tag\n  abi: ensNameRegisteredAbi,\n  topic0: [\"NameRegistered(string,bytes32,address,uint256,uint256)\"],\n  includeContractLogs: true,\n  advancedOptions: [\n    {\n      topic0: \"NameRegistered(string,bytes32,address,uint256,uint256)\",\n      filter,\n      includeNativeTxs: true,\n    },\n  ],\n  webhookUrl: \"<https://YOUR_WEBHOOK_URL>\", // webhook url to receive events,\n};\n\nconst stream = await Moralis.Streams.add(options);\n\nconst { id } = stream.toJSON(); // { id: 'YOUR_STREAM_ID', ...stream }\n\n// Attach the contract address to the stream\nawait Moralis.Streams.addAddress({\n  id,\n  address: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\", // ENS Registry address\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Pancakeswap V1 Pair Reserves with Moralis DeFi API (Python)\nDESCRIPTION: This Python snippet shows how to use the moralis Python package to retrieve reserve balances from a Pancakeswap V1 liquidity pool using the pair's address on Binance Smart Chain. Install the 'moralis' package using pip. The code requires an API key and pair address as parameters, with optional parameters commented for reference. The resulting reserves dictionary is printed to the console. Python 3.6+ and the 'moralis' package are prerequisites.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-reserves.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"pair_address\": \"0xaebe45e3a03b734c68e5557ae04bfc76917b4686\",\n    \"chain\": \"bsc\",\n    # \"to_block\": \"\",\n    # \"to_date\": \"\",\n}\n\nresult = evm_api.defi.get_pair_reserves(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReference Component in Markdown (MDX)\nDESCRIPTION: This snippet shows how to import the `ApiReference` React component and a configuration object from external files within a Markdown (MDX) document. It then uses the component, passing the specific configuration for the 'getWalletTransactions' endpoint to render the relevant API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/13-Blockchain API/02-Get Transactions/get-wallet-transactions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n# Get native transactions by wallet\n\n<ApiReference {...config.transaction.getWalletTransactions} />\n```\n\n----------------------------------------\n\nTITLE: Getting NFT Metadata with Python Using Moralis API\nDESCRIPTION: This code snippet demonstrates how to use the Moralis Python SDK to retrieve NFT metadata. It imports the evm_api module from Moralis, configures the API key and request parameters, and then calls the get_nft_metadata function.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/02-NFT Metadata/how-to-get-the-metadata-of-an-nft.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"token_id\": \"3931\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_nft_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Data Fetching with getServerSideProps\nDESCRIPTION: Implements getServerSideProps to fetch profile data from the Lens API on the server side and pass it to the page component as props. This ensures data is available when the page loads.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getServerSideProps() {\n  const response = await urqlClient.query(Profile).toPromise();\n\n  return {\n    props: { profile: response?.data.profile },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Cross-Chain Gas Fees using Axelar SDK in React\nDESCRIPTION: This code snippet demonstrates how to estimate gas fees for a cross-chain operation using the Axelar JS SDK within a React component (`DeployTokenRemotely`). It initializes `AxelarQueryAPI` for the testnet environment and defines an asynchronous function `gasEstimator` that calls `api.estimateGasFee` with source/destination chains, gas token (FTM), gas limit, and multiplier. The estimated gas amount is stored in the component's state using `setGasAmount`. Error handling is included for the estimation process.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n  //...\nconst DeployTokenRemotely = () = >{\n  //...\n  const api: AxelarQueryAPI = new AxelarQueryAPI({\n    environment: Environment.TESTNET\n  });\n  const[gasAmount, setGasAmount] = useState < number > (0);\n  // Estimate Gas\n  const gasEstimator = async() = >{\n    try {\n      const gas = await api.estimateGasFee(sourceChain, destinationChain, GasToken.FTM, 700000, 2);\n      setGasAmount(Number(gas));\n    } catch(error) {\n      console.error('Error estimating gas fee: ', error);\n    }\n  };\n  return (\n  //..\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Prices via Moralis API (SimpleHash Migration)\nDESCRIPTION: Provides Moralis API endpoint URLs to replace the deprecated SimpleHash `api.simplehash.com/api/v0/fungibles/assets` endpoint for fetching token prices. Includes Moralis endpoints for fetching single token prices on EVM and Solana, and multiple token prices on EVM. Moralis also supports historical price lookups.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/erc20/:address/price\n```\n\nLANGUAGE: URL\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/erc20/prices\n```\n\nLANGUAGE: URL\nCODE:\n```\nhttps://solana-gateway.moralis.io/token/:network/:address/price\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Token Holder Stats via Moralis API\nDESCRIPTION: Fetches statistical data about the holders of a specific ERC20 token using the Moralis Deep Index API v2.2. Requires the `:token_address` path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/erc20/:token_address/holders\n```\n\n----------------------------------------\n\nTITLE: Fetching User NFTs in a Django View (Python)\nDESCRIPTION: This Python code defines a Django view function named 'protected'. It retrieves the authenticated user's Ethereum address from the session, constructs a Moralis API request to fetch NFTs owned by that address for a specific contract ('0x2953399124f0cbb46d2cbacd8a89cf0599974963' on Polygon), sends the request using the 'requests' library, parses the JSON response, extracts the NFT data, and passes it to the 'protected.html' template for rendering. It requires the 'requests' and 'json' libraries, a configured Moralis API key (API_KEY), and expects user session data to be set.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-gating-django.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python views.py\ndef protected(request):\n    eth_address = request.session.get(\n        'verified_data', {}).get('address', None)\n    nfts = []\n    # this is the opensea contract address on polygon\n    CONTRACT_ADDRESS = \"0x2953399124f0cbb46d2cbacd8a89cf0599974963\"\n    WEB3_API_URL = 'https://deep-index.moralis.io/api/v2'\n    REQUEST_URL = '%s/%s/nft?chain=polygon&token_addresses=%s' % (\n        WEB3_API_URL,\n        eth_address,\n        CONTRACT_ADDRESS\n        )\n         \n    x = requests.get(\n        REQUEST_URL,\n        headers={'X-API-KEY': API_KEY})\n    print(json.loads(x.text))\n    nfts = json.loads(x.text)['result']\n    # show only 1 nft\n    if nfts:\n        nfts = json.dumps([nfts[0]], indent=4)\n    print(eth_address)\n    print(nfts)\n    return render(\n        request, 'protected.html',\n        {'nfts': nfts})\n```\n```\n\n----------------------------------------\n\nTITLE: Signing Out and Clearing Session in Angular - TypeScript\nDESCRIPTION: This asynchronous signOut function logs out the user by sending a GET request to the backend logout endpoint with credentials in cookies. Upon successful completion, the user is redirected to the '/signin' route. Dependencies include axios, Router, and environment configuration. No parameter inputs; outcome is session invalidation and navigation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nasync signOut() {\\n  await axios.get(`${environment.SERVER_URL}/logout`, {\\n    withCredentials: true,\\n  });\\n  this.router.navigateByUrl('/signin');\\n}\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Entry Point\nDESCRIPTION: Shell command to execute a JavaScript file named index.js using Node.js runtime.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/partials/_run-the-script.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Get Native Balance with TypeScript\nDESCRIPTION: TypeScript implementation to fetch native balance of an ERC20 token vault using Moralis API. Requires Moralis and common-evm-utils packages. Takes address and chain as parameters and returns the balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-vault.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async() => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  // address of ERC20 token vault, e.g. WETH token address\n  const address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from NFT Transfers API\nDESCRIPTION: This is an example JSON response from the Moralis getNFTContractTransfers API endpoint. It shows the structure of the returned data including pagination details and a result array containing transfer records with details like block information, transaction data, token IDs, and addresses involved.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft-collection.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 88322,\n  \"page\": 0,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmRlciI6IkRFU0MiLCJvZmZzZXQiOjAsImxpbWl0IjozLCJ0b2tlbl9hZGRyZXNzIjoiMHhiYzRjYTBlZGE3NjQ3YThhYjdjMjA2MWMyZTExOGExOGE5MzZmMTNkIiwid2hlcmUiOnt9LCJwYWdlIjoxLCJrZXkiOiIxNTgyNzAwNy44OS4yMzAuMCIsInRvdGFsIjo4ODMyMiwiaWF0IjoxNjY2NzI5NTI5fQ.f3u98Vp_H6hwWC8DpjozJ_BIWrLo8C51Uxob-4MbVzM\",\n  \"result\": [\n    {\n      \"block_number\": \"15827007\",\n      \"block_timestamp\": \"2022-10-25T18:53:59.000Z\",\n      \"block_hash\": \"0xfd5c0243a0fa0e84d1b488413ee4917646d156ed23246814ffe39ca28dc13f31\",\n      \"transaction_hash\": \"0x7a75ba4f74058c3c9a0d4a65554477c9c08e33695002682ca463a9d0f52eed6e\",\n      \"transaction_index\": 89,\n      \"log_index\": 235,\n      \"value\": \"0\",\n      \"contract_type\": \"ERC721\",\n      \"transaction_type\": \"Single\",\n      \"token_address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n      \"token_id\": \"2071\",\n      \"from_address\": \"0x5f6ac80cdb9e87f3cfa6a90e5140b9a16a361d5c\",\n      \"to_address\": \"0xdbfd76af2157dc15ee4e57f3f942bb45ba84af24\",\n      \"amount\": \"1\",\n      \"verified\": 1,\n      \"operator\": null\n    },\n    {\n      \"block_number\": \"15827007\",\n      \"block_timestamp\": \"2022-10-25T18:53:59.000Z\",\n      \"block_hash\": \"0xfd5c0243a0fa0e84d1b488413ee4917646d156ed23246814ffe39ca28dc13f31\",\n      \"transaction_hash\": \"0x7a75ba4f74058c3c9a0d4a65554477c9c08e33695002682ca463a9d0f52eed6e\",\n      \"transaction_index\": 89,\n      \"log_index\": 232,\n      \"value\": \"0\",\n      \"contract_type\": \"ERC721\",\n      \"transaction_type\": \"Single\",\n      \"token_address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n      \"token_id\": \"2071\",\n      \"from_address\": \"0x70b97a0da65c15dfb0ffa02aee6fa36e507c2762\",\n      \"to_address\": \"0x5f6ac80cdb9e87f3cfa6a90e5140b9a16a361d5c\",\n      \"amount\": \"1\",\n      \"verified\": 1,\n      \"operator\": null\n    },\n    {\n      \"block_number\": \"15827007\",\n      \"block_timestamp\": \"2022-10-25T18:53:59.000Z\",\n      \"block_hash\": \"0xfd5c0243a0fa0e84d1b488413ee4917646d156ed23246814ffe39ca28dc13f31\",\n      \"transaction_hash\": \"0x7a75ba4f74058c3c9a0d4a65554477c9c08e33695002682ca463a9d0f52eed6e\",\n      \"transaction_index\": 89,\n      \"log_index\": 230,\n      \"value\": \"0\",\n      \"contract_type\": \"ERC721\",\n      \"transaction_type\": \"Single\",\n      \"token_address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n      \"token_id\": \"2071\",\n      \"from_address\": \"0x3b968d2d299b895a5fcf3bba7a64ad0f566e6f88\",\n      \"to_address\": \"0x70b97a0da65c15dfb0ffa02aee6fa36e507c2762\",\n      \"amount\": \"1\",\n      \"verified\": 1,\n      \"operator\": null\n    }\n  ],\n  \"block_exists\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring ERC20 Token Burns and Mints using JavaScript and Moralis Streams API\nDESCRIPTION: This code creates a Moralis Stream to monitor USDC transfers where either the sender or receiver is the zero address (indicating burns or mints) and the amount is at least 10000 USDC. It defines the Transfer event ABI, configures filters for burn/mint operations, sets up stream options, creates the stream, and attaches the USDC contract address to it.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-monitor-for-er-c20-token-burns-or-mints.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst transferUsdcAbi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nconst filter = {\n  or: [\n    {\n      and: [\n        { eq: [\"sender\", \"0x00000...00000\"] },\n        { gte: [\"amount\", \"10000000000\"] },\n      ],\n    },\n    {\n      and: [\n        { eq: [\"receiver\", \"0x00000...00000\"] },\n        { gte: [\"amount\", \"10000000000\"] },\n      ],\n    },\n  ],\n}; // we will only receive events when the transfer recipent or the sender is the zero address meaning we are filtering mints and burn\n\nconst options = {\n  chains: [EvmChain.ETHEREUM], // Monitor USDC on ethereum\n  description: \"Token burns and mints\", // your description\n  tag: \"mintsAndBurns\", // give it a tag\n  abi: transferUsdcAbi,\n  includeContractLogs: true,\n  topic0: [\"Transfer(address,address,uint256)\"],\n  advancedOptions: [\n    {\n      topic0: \"Transfer(address,address,uint256)\",\n      filter,\n      includeNativeTxs: true,\n    },\n  ],\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\", // webhook url to receive events,\n};\n\nconst stream = await Moralis.Streams.add(options);\n\nconst { id } = stream.toJSON(); // { id: 'YOUR_STREAM_ID', ...stream }\n\n// Attach the contract address to the stream\nawait Moralis.Streams.addAddress({\n  id,\n  address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC address\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Uniswap V3 Pair Address using Moralis SDK in Python\nDESCRIPTION: Uses the Moralis Python SDK to get the Uniswap V3 pair address for WETH and LINK tokens on the Ethereum chain. Requires the `moralis` Python package and a Moralis API key. The `evm_api.defi.get_pair_address` function is called with the API key and a dictionary containing the exchange name, token addresses, and chain. Outputs the pair details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-uniswap-v3-pair-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"exchange\": \"uniswapv3\",\n    # token 0 address, e.g. WETH token address\n    \"token0_address\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    # token 1 address, e.g. LINK token address\n    \"token1_address\": \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.defi.get_pair_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Balances using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the Moralis SDK to retrieve all NFTs owned by a user wallet on a specified blockchain (chain), such as Ethereum or Polygon. Dependencies include the 'moralis' and '@moralisweb3/common-evm-utils' packages. The required parameters are 'address' (user wallet address) and 'chain' (blockchain identifier). The output is logged as raw data. Make sure to replace the placeholders ('YOUR_API_KEY', 'USER_WALLET_ADDRESS', 'CHAIN') with real values and securely store the API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Basic Moralis API Proxy Function in Firebase\nDESCRIPTION: Implementation of a basic Firebase Cloud Function that proxies Moralis API calls for getting block data. The function accepts chain and block parameters while keeping the API key secure on the backend.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as functions from \"firebase-functions\";\n\ninterface GetBlockData {\n  chain: string;\n  blockNumberOrHash: string;\n}\n\nexport const getBlock = functions.https.onCall(async (data: GetBlockData) => {\n  const response = await Moralis.EvmApi.block.getBlock({\n    chain: data.chain,\n    blockNumberOrHash: data.blockNumberOrHash,\n  });\n  return response.toJSON();\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Moralis Stream Events by Contract Address and Value using JavaScript\nDESCRIPTION: This JavaScript code defines a filter object for Moralis Streams. It uses nested `or` and `and` conditions to apply different 'greater than or equal to' (`gte`) checks on the `value` parameter based on the `moralis_streams_contract_address`. This allows filtering events from different contracts (e.g., USDT, BUSD) with appropriate value thresholds considering their respective decimals. The addresses must be in lowercase.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/filter-streams.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst filter = {\n  or: [\n    {\n      and: [\n        {\n          eq: [\"moralis_streams_contract_address\", \"0x1\"],\n        },\n        {\n          gte: [\"value\", 1000000000], // Example of USDT (6 Decimals)\n        },\n      ],\n    },\n    {\n      and: [\n        {\n          eq: [\"moralis_streams_contract_address\", \"0x2\"],\n        },\n        {\n          gte: [\"value\", 1000000000000000000000], // Example of BUSD (18 Decimals)\n        },\n      ],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Lambda Handler with Express and Moralis Integration\nDESCRIPTION: Full JavaScript code for the Lambda handler file, including all endpoints and Moralis initialization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst serverless = require(\"serverless-http\");\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst Moralis = require(\"moralis\").default;\n\nconst app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.raw());\napp.use(bodyParser.text());\napp.use(bodyParser.urlencoded({ extended: true }));\n\nconst startMoralis = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n};\n\nstartMoralis();\n\napp.get(\"/\", (req, res, next) => {\n  return res.status(200).json({\n    message: \"Hello from root!\",\n  });\n});\n\napp.get(\"/getNativeBalance\", async (req, res, next) => {\n  try {\n    const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n      address: req.body.address,\n      chain: req.body.chain,\n    });\n\n    const nativeBalanceEther = nativeBalance.result.balance.ether;\n\n    res.status(200);\n    res.send(nativeBalanceEther);\n  } catch (error) {\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\napp.get(\"/getWalletNfts\", async (req, res, next) => {\n  try {\n    const nfts = await Moralis.EvmApi.nft.getWalletNFTs({\n      address: req.body.address,\n      chain: req.body.chain,\n      limit: 10,\n    });\n\n    res.status(200);\n    res.json(nfts);\n  } catch (error) {\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\nmodule.exports.handler = serverless(app);\n```\n\n----------------------------------------\n\nTITLE: Sample Streams API Response - JSON\nDESCRIPTION: Represents the typical JSON response structure returned by the getAll streams API call. Each item in 'result' contains details such as webhookUrl, description, tag, topics, filter options, chain IDs, and stream status. The response includes pagination supporting 'cursor', and a total count. No sensitive information is present in this sample.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/stream-management.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": [\n    {\n      \"webhookUrl\": \"string\",\n      \"description\": \"string\",\n      \"tag\": \"string\",\n      \"topic0\": [],\n      \"includeNativeTxs\": true,\n      \"allAddresses\": false,\n      \"includeContractLogs\": true,\n      \"advancedOptions\": [{\n        \"topic0\": \"string\",\n        \"includeNativeTxs\": true,\n        \"filter\": {}\n      }],\n      \"abi\": [],\n      \"filter\": \"string\",\n      \"address\": \"string\",\n      \"chainIds\": [\n        \"string\"\n      ],\n      \"id\": \"3fa84f64-5717-4562-b3fc-2c963f66afa6\",\n      \"status\": \"active\",\n      \"statusMessage\": \"string\"\n    }\n  ],\n  \"cursor\": \"string\",\n  \"total\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Normalized NFT Metadata using Python\nDESCRIPTION: Example of retrieving normalized NFT metadata using Moralis Python SDK. Shows how to make API calls using the evm_api module.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/02-NFT API/02-NFT Metadata FAQs/metadata-normalization.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"chain\": \"ethereum\",\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"tokenId\": \"1\",\n}\n\nresult = aptos_api.coins.get_coins_by_coin_type_hashes(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Embedding API Reference and Admonition Components - Markdown/JSX\nDESCRIPTION: Renders the API reference UI for the 'Get the top NFT collections by market cap' endpoint using the ApiReference React component, passing in relevant configuration from the imported JSON file. Also embeds an Admonition component to inform users about the premium status of the API endpoint and API key requirements. The components provide users with contextual instructions and a way to interactively test the endpoint when available.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/12-Market Data API/get-top-nft-collections-by-market-cap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<ApiReference {...config[\"market-data\"].getTopNFTCollectionsByMarketCap}>\n  <Admonition type=\"info\" icon=\"💡\" title=\"PREMIUM ENDPOINT\">\n    <p>\n      To use this API, you will need an API key under a Moralis account with the\n      Pro or above plan. To upgrade your API plan, go to the{\" \"}\n      <Link href=\"https://admin.moralis.com/account/billing\">billing page</Link>{\" \"}\n      in the Moralis Dashboard.\n    </p>\n    <p>\n      This API has no parameter and you can simply use the <b>Try It</b> button\n      to test it out.\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Paginating Graduated Tokens with cURL and Cursor (Shell)\nDESCRIPTION: This shell command demonstrates how to paginate when querying graduated Pump.fun tokens using the Moralis Solana API via cURL. By passing a cursor value in the query string, you can retrieve the next page of results. Prerequisites: API access, cursor value from prior response, and cURL. Inputs: cursor query parameter. Outputs: JSON-formatted result set corresponding to current cursor.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/08-get-graduated-tokens.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/token/mainnet/exchange/pumpfun/graduated?limit=100&cursor=YOUR_CURSOR' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Decoding ERC20 Transfer Event Streams with Metadata - Moralis Streams (JSON)\nDESCRIPTION: This JSON snippet demonstrates the structure of a decoded ERC20 transfer event produced by Moralis Streams. It includes metadata such as token name, symbol, decimals, and transfer details (from, to, value), as well as transactional, log, and block details. Prerequisites include activating Moralis Streams and monitoring ERC20 transfer topics. Inputs are on-chain transfer events, while outputs are JSON with rich transfer context; works for both confirmed and unconfirmed transactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/response-body.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": false,\n  \"chainId\": \"0x5\",\n  \"abi\": [],\n  \"streamId\": \"c4cf9b1a-0cb3-4c79-9ca3-04f11856c555\",\n  \"tag\": \"ChrisWallet\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"8037952\",\n    \"hash\": \"0x607ff512f17f890bf9ee6206e2029cd8530819ab72b2b9161f9b90d18ece8e03\",\n    \"timestamp\": \"1669667244\"\n  },\n  \"logs\": [\n    {\n      \"logIndex\": \"132\",\n      \"transactionHash\": \"0x1642a3b9b39e63d7fe571e7c22b80a5b059d2647fe4866d3f7105630f822d833\",\n      \"address\": \"0x0041ebd11f598305d401cc1052df49219630ab79\",\n      \"data\": \"0x0000000000000000000000000000000000000000000069e10006afc3291c0000\",\n      \"topic0\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n      \"topic1\": \"0x0000000000000000000000000a46413965858a6ac4ed5184d7643dc055a4fea3\",\n      \"topic2\": \"0x000000000000000000000000e496601436da37a045d8e88bbd6b2c2e17d8fe33\",\n      \"topic3\": null\n    }\n  ],\n  \"txs\": [\n    {\n      \"hash\": \"0x1642a3b9b39e63d7fe571e7c22b80a5b059d2647fe4866d3f7105630f822d833\",\n      \"gas\": \"85359\",\n      \"gasPrice\": \"6129141152\",\n      \"nonce\": \"88\",\n      \"input\": \"0xa9059cbb000000000000000000000000e496601436da37a045d8e88bbd6b2c2e17d8fe330000000000000000000000000000000000000000000069e10006afc3291c0000\",\n      \"transactionIndex\": \"49\",\n      \"fromAddress\": \"0x0a46413965858a6ac4ed5184d7643dc055a4fea3\",\n      \"toAddress\": \"0x0041ebd11f598305d401cc1052df49219630ab79\",\n      \"value\": \"0\",\n      \"type\": \"2\",\n      \"v\": \"1\",\n      \"r\": \"86947778944630951418310264989677611886333891146913483133255814972120449355054\",\n      \"s\": \"7019311275916215306620036726907048105130260362064080269753410507440852031640\",\n      \"receiptCumulativeGasUsed\": \"11882265\",\n      \"receiptGasUsed\": \"56906\",\n      \"receiptContractAddress\": null,\n      \"receiptRoot\": null,\n      \"receiptStatus\": \"1\"\n    }\n  ],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [\n    {\n      \"transactionHash\": \"0x1642a3b9b39e63d7fe571e7c22b80a5b059d2647fe4866d3f7105630f822d833\",\n      \"logIndex\": \"132\",\n      \"contract\": \"0x0041ebd11f598305d401cc1052df49219630ab79\",\n      \"from\": \"0x0a46413965858a6ac4ed5184d7643dc055a4fea3\",\n      \"to\": \"0xe496601436da37a045d8e88bbd6b2c2e17d8fe33\",\n      \"value\": \"499999000000000000000000\",\n      \"tokenName\": \"Example Token\",\n      \"tokenSymbol\": \"Token\",\n      \"tokenDecimals\": \"18\",\n      \"valueWithDecimals\": \"499999\"\n    }\n  ],\n  \"erc20Approvals\": [],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Coinbase Wallet Authentication in NextJS with Moralis\nDESCRIPTION: This code snippet demonstrates how to set up Coinbase Wallet authentication in a NextJS application. It uses wagmi for wallet connection, next-auth for session management, and Moralis for web3 authentication. The implementation includes connecting to Coinbase Wallet, requesting a challenge, signing a message, and handling the authentication flow.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-coinbase-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CoinbaseWalletConnector } from 'wagmi/connectors/coinbaseWallet'\nimport { signIn } from 'next-auth/react'\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from 'wagmi'\nimport { useRouter } from 'next/router'\nimport { useAuthRequestChallengeEvm } from '@moralisweb3/next'\n\nfunction SignIn() {\n  const { connectAsync } = useConnect()\n  const { disconnectAsync } = useDisconnect()\n  const { isConnected } = useAccount()\n  const { signMessageAsync } = useSignMessage()\n  const { push } = useRouter()\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm()\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync()\n    }\n\n    const { account, chain } = await connectAsync({\n      connector: new CoinbaseWalletConnector({\n        options: {\n          appName: 'amazing.finance',\n        },\n      }),\n    })\n\n    const userData = { address: account, chain: chain.id, network: 'evm' }\n\n    const { message } = await requestChallengeAsync(userData)\n\n    const signature = await signMessageAsync({ message })\n\n    // redirect user after success authentication to '/user' page\n    const { url } = await signIn('moralis-auth', {\n      message,\n      signature,\n      redirect: false,\n      callbackUrl: '/user',\n    })\n    /**\n     * instead of using signIn(..., redirect: \"/user\")\n     * we get the url from callback and push it to the router to avoid page refreshing\n     */\n    push(url)\n  }\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={() => handleAuth()}>Authenticate via Coinbase Wallet</button>\n    </div>\n  )\n}\n\nexport default SignIn\n```\n\n----------------------------------------\n\nTITLE: Estimating Cross-Chain Gas Fees using Axelar JS SDK in React\nDESCRIPTION: Implements gas fee estimation for cross-chain transactions within a React component. It initializes the `AxelarQueryAPI` from the Axelar JS SDK for the testnet environment. An asynchronous function `gasEstimator` is defined to call the `api.estimateGasFee` method, using component state variables `sourceChain` and `destinationChain`, along with a specified gas token (FTM) and other parameters. The estimated fee is stored in the `gasAmount` state variable using `setGasAmount`. Basic error handling logs potential issues to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst TransferToken = () = >{\n  //...\n  const api: AxelarQueryAPI = new AxelarQueryAPI({\n    environment: Environment.TESTNET\n  });\n  const[gasAmount, setGasAmount] = useState < number > (0);\n  //  Estimate  Gas\n  const gasEstimator = async() = >{\n    try {\n      const gas = await api.estimateGasFee(sourceChain, destinationChain, GasToken.FTM, 700000, 2);\n      setGasAmount(Number(gas));\n    } catch(error) {\n      console.error('Error  estimating  gas  fee:  ', error);\n    }\n  };\n  return (\n  //..\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Express Server Implementation\nDESCRIPTION: Full Express.js server implementation with webhook endpoint and notification handling\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst notifier = require(\"node-notifier\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.post(\"/webhook\", (req, res) => {\n  const webhook = req.body;\n\n  for (const erc20Transfer of webhook.erc20Transfers) {\n    const addrs = `${erc20Transfer.from.slice(0, 4)}...${erc20Transfer.from.slice(38)}`;\n    const amount = Number(erc20Transfer.valueWithDecimals).toFixed(0);\n\n    notifier.notify({\n      title: \"NEW USDT Transfer\",\n      message: `${addrs} just sent \\n$${amount}`,\n    });\n  }\n\n  return res.status(200).json();\n});\n\napp.listen(port, () => {\n  console.log(`Listening to streams`);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Collection Trading Volume via Moralis SDK (Python)\nDESCRIPTION: This Python example shows how to fetch the hottest NFT collections by trading volume using the Moralis Python SDK's evm_api. The script initializes the API with a provided key and calls get_hottest_nft_collections_by_trading_volume, outputting the result as JSON. Requires the moralis Python package installed and a valid API key. Key parameter: api_key. No additional input required; prints the market data response to standard output.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-trading-volume.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\n\nresult = evm_api.market_data.get_hottest_nft_collections_by_trading_volume(\n  api_key=api_key,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Transactions with Moralis SDK in Python\nDESCRIPTION: Uses the `moralis` Python library to fetch wallet transactions. It sets up the API key and defines parameters including the target `address` and `chain` (e.g., 'eth'). The `evm_api.transaction.get_wallet_transactions` function is called with these parameters to retrieve the transaction data, which is then printed. Requires the `moralis` package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/05-Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.transaction.get_wallet_transactions(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Requiring Moralis SDK in NodeJS\nDESCRIPTION: Imports the Moralis NodeJS SDK using the `require` statement. This makes the Moralis library available for use within the Lambda function code.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Collections with JavaScript using Moralis API\nDESCRIPTION: JavaScript implementation to retrieve NFT collections owned by a specific wallet address. Uses the Moralis SDK with the getWalletNFTCollections endpoint, requiring an API key and wallet address parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/04-NFT Collections/how-to-get-all-nft-collections-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTCollections({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL NFT Balance using Python\nDESCRIPTION: Python implementation for getting SPL NFT balance of a Solana address using Moralis API. Requires the moralis package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/nft-api/how-to-get-spl-nft-balance-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"network\": \"mainnet\",\n    \"address\": \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\",\n}\n\nresult = sol_api.account.get_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating React Frontend App (Shell/NPX)\nDESCRIPTION: Uses npx (Node Package Execute) to run the 'create-react-app' package, scaffolding a new React application named 'frontend' in the current directory (project root).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-react-app frontend\n```\n\n----------------------------------------\n\nTITLE: Example Deployed Cloud Function Webhook URL for Moralis Streams - URL Format\nDESCRIPTION: This snippet provides the format of the deployed cloud function webhook URL for Moralis Streams. The <location> and <project_id> placeholders should be replaced with your Firebase project details; this URL is used in production to allow Moralis to send blockchain events to your functions backend. It is visible in your Firebase Console under Deployed Functions. Ensure that your public endpoints are secured per Firestore rules and Moralis admin configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/firebase.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://<location>-<project_id>.cloudfunctions.net/ext-moralis-streams-webhook\n```\n\n----------------------------------------\n\nTITLE: Configuring a Moralis Trigger to Get Sender Balance in JavaScript\nDESCRIPTION: Demonstrates creating a Moralis Trigger configuration object in JavaScript. This specific trigger is designed to call the `balanceOf` function (using `balanceOfSenderAbi`) on the relevant ERC20 contract (`contractAddress: '$contract'`) for the sender (`inputs: ['$from']`) of each `erc20transfer`. It utilizes Moralis selectors (`$contract`, `$from`) to dynamically populate the contract address and input parameter based on the event data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst trigger = {\n  contractAddress: \"$contract\",\n  functionAbi: balanceOfSenderAbi,\n  inputs: [\"$from\"],\n  type: \"erc20transfer\",\n};\n\nconst triggers = [trigger];\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for NextJS Phantom Authentication\nDESCRIPTION: Set up the necessary environment variables in the .env.local file for Moralis API key, app domain, NextAuth URL, and secret.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAPP_DOMAIN=amazing.finance\nMORALIS_API_KEY=xxxx\nNEXTAUTH_URL=http://localhost:3000\nNEXTAUTH_SECRET=7197b3e8dbee5ea6274cab37245eec212\n```\n\n----------------------------------------\n\nTITLE: Moralis Next API Setup\nDESCRIPTION: Creates API route handler for Moralis integration\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\n\nexport default MoralisNextApi({ apiKey: process.env.MORALIS_API_KEY });\n```\n\n----------------------------------------\n\nTITLE: Example Moralis Webhook Response with Native Balances (JSON)\nDESCRIPTION: This JSON snippet shows an example webhook payload received from a Moralis Stream that has been configured with the `getNativeBalances` trigger. It includes standard transaction data alongside a new field `nativeBalances`, which is an array containing objects, each specifying an `address` and its corresponding native token `balance` at the time the event was processed. The balances are uniquely ordered based on the trigger configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/addresses/get-native-balances.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": true,\n  \"chainId\": \"0x1\",\n  \"abi\": [],\n  \"streamId\": \"v900a834-a542-43f9-98f6-0f76caf65394\",\n  \"tag\": \"someString\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"16140655\",\n    \"hash\": \"0xfc0b1ae5d04b3c5a780f1f72658edc9e26a6340df4b1118a713652b6d043039a\",\n    \"timestamp\": \"1670510543\"\n  },\n  \"logs\": [],\n  \"txs\": [\n    {\n      \"hash\": \"0xd304ef0dd0df001d8f37de569af63585dbf7637247b17dc12224828960b4d830\",\n      \"gas\": \"120000\",\n      \"gasPrice\": \"17605149814\",\n      \"nonce\": \"43904\",\n      \"input\": \"0xa9059cbb00000000000000000000000072f54455fbdbff1b8975ab2df599ff9f9afb5310000000000000000000000000000000000000000000000000000000000606a9e0\",\n      \"transactionIndex\": \"16\",\n      \"fromAddress\": \"0x0b5c4a7fcda49e0a8661419bb55b86161a86db2a\",\n      \"toAddress\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n      \"value\": \"0\",\n      \"type\": \"2\",\n      \"v\": \"0\",\n      \"r\": \"52200684288032529078283440758240219132630446778024109656659293182067276426999\",\n      \"s\": \"25805856329951682196861199677610079726197925451457581628939426805653323455347\",\n      \"receiptCumulativeGasUsed\": \"1214527\",\n      \"receiptGasUsed\": \"63209\",\n      \"receiptContractAddress\": null,\n      \"receiptRoot\": null,\n      \"receiptStatus\": \"1\"\n    }\n  ],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [],\n  \"nftTokenApprovals\": [],\n  \"nftApprovals\": {\n    \"ERC721\": [],\n    \"ERC1155\": []\n  },\n  \"nftTransfers\": [],\n  \"nativeBalances\": [\n    {\n      \"address\": \"0x0b5c4a7fcda49e0a8661419bb55b86161a86db2a\",\n      \"balance\": \"3921415148849464186\"\n    },\n    {\n      \"address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n      \"balance\": \"2135786324\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Server and Telegram Bot Logic in JavaScript\nDESCRIPTION: Defines the main application logic in `index.js`. It sets up an Express server listening on port 5001, initializes a Telegram bot using `node-telegram-bot-api` and an environment variable `TELEGRAM_BOT_TOKEN`. A `/webhook` endpoint is created to receive POST requests containing NFT transfer data from Moralis Streams, process this data, format key details, and send a notification message to a specified Telegram chat ID. Requires a `.env` file for the Telegram token.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config();\nconst express = require(\"express\");\nconst TelegramBot = require(\"node-telegram-bot-api\");\nconst app = express();\nconst port = 5001;\n\nconst TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\n\nconst bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });\n\napp.use(express.json());\n\napp.post(\"/webhook\", async (req, res) => {\n  const webhook = req.body;\n\n  for (const nftTransfer of webhook.nftTransfers) {\n    const fromAddress = `From address: ${nftTransfer.from.slice(\n      0,\n      4\n    )}...${nftTransfer.from.slice(38)}`;\n    const toAddress = `To address: ${nftTransfer.to.slice(\n      0,\n      4\n    )}...${nftTransfer.to.slice(38)}`;\n    const tokenItem = `Token Item: ${nftTransfer.tokenName} #${nftTransfer.tokenId}`;\n    const transactionHash = `Transaction Hash: ${nftTransfer.transactionHash}`;\n\n    const chatId = \"ADD-CHAT-ID-FROM-LATER-STEPS\";\n    const text = `${fromAddress}, ${toAddress}, ${tokenItem}, ${transactionHash}`;\n\n    bot.sendMessage(chatId, text);\n  }\n\n  return res.status(200).json();\n});\n\napp.listen(port, () => {\n  console.log(`Listening for NFT Transfers`);\n});\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Solana Portfolio Balance\nDESCRIPTION: This JSON object represents an example response from the Moralis `getPortfolio` endpoint. It shows the structure containing arrays for `tokens` and `nfts` (each with details like mint address, amount, and decimals), and an object for `nativeBalance` (showing lamports and SOL amount).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/balance-api/how-to-get-solana-portfolio-balance-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"tokens\": [\n    {\n      \"associatedTokenAddress\": \"Dpmpwm93Amvj4uEFpYhjv8ZzfpgARq6zxKTi6mrj97gW\",\n      \"mint\": \"BXWuzb3jEuGsGUe29xdApu8Z3jVgrFbr3wWdsZmLWYk9\",\n      \"amountRaw\": \"100000000000\",\n      \"amount\": \"100\",\n      \"decimals\": \"9\"\n    }\n  ],\n  \"nfts\": [\n    {\n      \"associatedTokenAddress\": \"AUmHKB9srYgzHW2E5NuEWyG9wp5g4Cbewxurr1geV1iR\",\n      \"mint\": \"53kauHy6PJx9iykDV9BxpCBbXe2yPwA5tRcKcNDmfCxn\",\n      \"amountRaw\": \"1\",\n      \"amount\": \"1\",\n      \"decimals\": \"0\"\n    }\n  ],\n  \"nativeBalance\": {\n    \"lamports\": \"5999980000\",\n    \"solana\": \"5.99998\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Getting NFT Metadata with TypeScript Using Moralis API\nDESCRIPTION: This code snippet demonstrates how to use the Moralis TypeScript SDK to retrieve NFT metadata. It initializes the Moralis SDK with an API key, specifies the NFT contract address, blockchain, and token ID, and then calls the getNFTMetadata endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/02-NFT Metadata/how-to-get-the-metadata-of-an-nft.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const tokenId = \"3931\";\n\n  const response = await Moralis.EvmApi.nft.getNFTMetadata({\n    address,\n    chain,\n    tokenId,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying Token Search Endpoints\nDESCRIPTION: HTTP GET endpoints for searching tokens and retrieving trending token information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/09-reservoir-migration-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/tokens/search\nGET https://deep-index.moralis.io/api/v2.2/tokens/trending\n```\n\n----------------------------------------\n\nTITLE: Implementing Moralis Authentication Views in Django\nDESCRIPTION: This snippet defines Django views for Moralis authentication, including rendering login and profile pages, requesting authentication messages, and verifying signed messages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef moralis_auth(request):\n    return render(request, 'login.html', {})\n\ndef my_profile(request):\n    return render(request, 'profile.html', {})\n\ndef request_message(request):\n    data = json.loads(request.body)\n    print(data)\n\n    #setting request expiration time to 1 minute after the present->\n    present = datetime.now(timezone.utc)\n    present_plus_one_m = present + timedelta(minutes=1)\n    expirationTime = str(present_plus_one_m.isoformat())\n    expirationTime = str(expirationTime[:-6]) + 'Z'\n\n    REQUEST_URL = 'https://authapi.moralis.io/challenge/request/evm'\n    request_object = {\n      \"domain\": \"defi.finance\",\n      \"chainId\": 1,\n      \"address\": data['address'],\n      \"statement\": \"Please confirm\",\n      \"uri\": \"https://defi.finance/\",\n      \"expirationTime\": expirationTime,\n      \"notBefore\": \"2020-01-01T00:00:00.000Z\",\n      \"timeout\": 15\n    }\n    x = requests.post(\n        REQUEST_URL,\n        json=request_object,\n        headers={'X-API-KEY': API_KEY})\n\n    return JsonResponse(json.loads(x.text))\n\n\ndef verify_message(request):\n    data = json.loads(request.body)\n    print(data)\n\n    REQUEST_URL = 'https://authapi.moralis.io/challenge/verify/evm'\n    x = requests.post(\n        REQUEST_URL,\n        json=data,\n        headers={'X-API-KEY': API_KEY})\n    print(json.loads(x.text))\n    print(x.status_code)\n    if x.status_code == 201:\n        # user can authenticate\n        eth_address=json.loads(x.text).get('address')\n        print(\"eth address\", eth_address)\n        try:\n            user = User.objects.get(username=eth_address)\n        except User.DoesNotExist:\n            user = User(username=eth_address)\n            user.is_staff = False\n            user.is_superuser = False\n            user.save()\n        if user is not None:\n            if user.is_active:\n                login(request, user)\n                request.session['auth_info'] = data\n                request.session['verified_data'] = json.loads(x.text)\n                return JsonResponse({'user': user.username})\n            else:\n                return JsonResponse({'error': 'account disabled'})\n    else:\n        return JsonResponse(json.loads(x.text))\n```\n\n----------------------------------------\n\nTITLE: Fetching Top NFT Collections in TypeScript\nDESCRIPTION: TypeScript implementation using Moralis SDK to get top NFT collections by market cap. Includes type safety and requires Moralis API key configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-market-cap.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getTopNFTCollectionsByMarketCap();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Filtering High-Value USDT Transfers using Moralis Streams - Python\nDESCRIPTION: This Python snippet illustrates creating a Moralis stream with advanced filters for USDT transfers over $1M from a specific address, then attaches the monitored USDT contract address. It uses a Moralis Python SDK instance (streams.evm_streams), requiring api_key and parameter dictionaries. Inputs include a stream creation body with advanced_options and an add_address_body with target address. The outputs are the stream creation result and confirmation of address association. Limitations: the addresses and thresholds must be adjusted for production usage.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Above code is same as prior\\n\\nfilter_ERC20 = {\\n  \\\"and\\\": \\[\\n    { \\\"eq\\\": [\\\"from\\\", \\\"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\\\"] },\\n    { \\\"gt\\\": [\\\"value\\\", \\\"1000000000\\\"] }, // Example of USDT (6 Decimals)\\n  ],\\n}\\n\\ncreate_stream_body = {\\n  # same parameters as prior\\n  \\\"advanced_options\\\": [\\n    {\\n      \\\"topic0\\\": \\\"Transfer(address,address,uint256)\\\",\\n      \\\"filter\\\": filter_ERC20\\n    }\\n  ]\\n}\\n\\nresult = streams.evm_streams.create_stream(\\n  api_key=api_key,\\n  body=create_stream_body,\\n)\\n\\nadd_address_body = {\\n  \\\"address\\\": \\\"0xdAC17F958D2ee523a2206206994597C13D831ec7\\\"\\n}\\n\\nparams = {\\n  \\\"id\\\": result.id\\n}\\n\\n# Now we attach USDT address to the stream\\nstreams.evm_streams.add_address_to_stream(\\n  api_key=api_key,\\n  body=add_address_body,\\n  params=params,\\n)\n```\n\n----------------------------------------\n\nTITLE: Interacting with API-returned EvmNative Values - Moralis SDK - JavaScript\nDESCRIPTION: Examples of working with data types returned by Moralis API calls, specifically extracting and utilizing the EvmNative object from API responses. Demonstrates property access (wei and ether) and method invocation (equals) for comparing numeric string values. Assumes an existing async context and a properly configured Moralis instance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await Moralis.EvmApi.balance.getNativeBalance(params);\n\n// myBalance is an instance of the EvmNative data type\nconst myBalance = response.result.balance;\n\nmyBalance.wei; // 1000000000000000000\nmyBalance.ether; // 1.0\nmyBalance.equals(\"1000000000000000000\"); // true\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis Auth in Firebase\nDESCRIPTION: TypeScript code for initializing the Moralis authentication instance with Firebase configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initializeApp } from '@firebase/app';\nimport { getMoralisAuth } from '@moralisweb3/client-firebase-auth-utils';\n\nexport const app = initializeApp({\n  // your configuration here\n});\n\nconst moralisAuth = getMoralisAuth(app);\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Transfers with Moralis NFT API - Python\nDESCRIPTION: This Python example demonstrates retrieving all the transfer records of a specific NFT using the Moralis SDK. It uses the 'moralis' package and its 'evm_api.nft.get_nft_transfers' function, requiring an API key, contract address, token ID, and blockchain identifier (e.g., 'eth'). The script prints the result, which mirrors the JSON response structure with transfer metadata. Ensure 'moralis' is installed and configured in your Python environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n    \"token_id\": \"1\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n}\n\nresult = evm_api.nft.get_nft_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Handling Client-Side Web3 Authentication Flow (JavaScript)\nDESCRIPTION: Defines an asynchronous JavaScript function `handleAuth` that orchestrates the client-side authentication process. It first connects to MetaMask using `connectToMetamask`. Then, it calls a backend endpoint (via a client-side `requestMessage` function, not shown) to get the challenge message. It uses the Ethers `signer` to prompt the user to sign the message. The signature and message are sent to another backend endpoint (via a `verifyMessage` function, not shown) for verification, which returns user data including a JWT. Finally, it initializes an authenticated Supabase client (`_supabaseAuthenticated`) by passing the received JWT in the Authorization header and calls `renderUser` to update the UI.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleAuth = async () => {\n  // Connect to Metamask\n  const { signer, chain, account } = await connectToMetamask();\n\n  if (!account) {\n    throw new Error('No account found');\n  }\n  if (!chain) {\n    throw new Error('No chain found');\n  }\n\n  const { message } = await requestMessage(account, chain);\n\n  const signature = await signer.signMessage(message);\n\n  const { user } = await verifyMessage(message, signature);\n\n  _supabaseAuthenticated = supabase.createClient(SUPABASE_URL, SUPABASE_PUBLIC_ANON_KEY, {\n    global: {\n      headers: {\n        Authorization: `Bearer ${user.token}`,\n      },\n    },\n  });\n\n  renderUser(user);\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Native Balance with Moralis SDK (Python)\nDESCRIPTION: This Python snippet illustrates how to get the native SOL balance of a wallet address using the Moralis Python SDK. It imports the `sol_api`, sets the API key, defines the parameters including the target address and network ('mainnet'), and calls the `sol_api.account.balance` function. The script then prints the returned balance result.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/balance-api/how-to-get-native-solana-balance-by-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\",\n    \"network\": \"mainnet\",\n}\n\nresult = sol_api.account.balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Complete Function for Displaying Blockchain Data in C#\nDESCRIPTION: Shows the complete implementation of the `DisplayCryptoData` async function. It orchestrates fetching and displaying native balance, ERC-20 tokens, and the first 10 NFTs (including name, amount, and metadata) for a given address and chain ID using the Moralis SDK. It also includes basic error handling using a try-catch block to print exceptions to the error console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\ninternal static async Task DisplayCryptoData(string address, ChainList chainId)\n{\n    try\n    {\n        Console.WriteLine($\"For address: {address}...\\n\");\n\n        // Load native balance for address\n        NativeBalance bal = await MoralisClient.Web3Api.Account.GetNativeBalance(address, chainId);\n\n        double nativeBal = 0;\n\n        double.TryParse(bal.Balance, out nativeBal);\n\n        Console.WriteLine($\"Your native balance is {nativeBal / Math.Pow(10,18)}\");\n\n        // Load ERC-20 Token List for address\n        List<Erc20TokenBalance> erc20Balnaces = await MoralisClient.Web3Api.Account.GetTokenBalances(address, chainId);\n\n        Console.WriteLine(\"\\n\\nYour ERC 20 Tokens:\");\n\n        if (erc20Balnaces != null && erc20Balnaces.Count > 0)\n        {\n            // Print out each token with symbol and balance.\n            foreach (Erc20TokenBalance tb in erc20Balnaces)\n            {\n               Console.WriteLine($\"\\t{tb.Symbol} - {tb.Name}: {tb.NativeTokenBalance}\"); \n            }\n        }\n        else\n        {\n            Console.WriteLine(\"\\tNone\");\n        }\n\n        // Load first 10 NFTs for the address\n        NftOwnerCollection nfts = await MoralisClient.Web3Api.Account.GetNFTs(address, (ChainList)chainId, \"\", null, 10);\n\n        Console.WriteLine(\"\\n\\nYour NFTs:\");\n\n        if (nfts != null && nfts.Result.Count > 0)\n        {\n            // Print out each token with symbol and balance.\n            foreach (NftOwner nft in nfts.Result)\n            {\n                Console.WriteLine($\"\\t{nft.Name}: {nft.Amount}\\n\\tMetaData: {nft.Metadata}\\n\\n\");\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"\\tNone\");\n        }\n\n    }\n    catch (Exception ex)\n    {\n        Console.Error.WriteLine(ex);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Callable Function for EVM Balance via Moralis (TypeScript)\nDESCRIPTION: Defines a Firebase HTTPS Callable Function named `getBalance` using TypeScript. This function accepts a wallet address (`data.address`), uses the Moralis EVM API (`Moralis.EvmApi.balance.getNativeBalance`) to fetch the native balance for that address on the Ethereum chain, and returns the balance formatted in Ether. Requires prior initialization of Firebase Admin and Moralis SDKs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nexport interface GetBalanceData {\n  address: string;\n}\n\nexport const getBalance = functions.https.onCall(\n  async (data: GetBalanceData) => {\n    const result = await Moralis.EvmApi.balance.getNativeBalance({\n      chain: EvmChain.ETHEREUM,\n      address: data.address,\n    });\n    return {\n      balance: result.result.balance.ether,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Complete ASP.NET Core Program.cs with CORS and Moralis Setup in C#\nDESCRIPTION: This C# code shows the complete structure of a minimal ASP.NET Core `Program.cs` file after incorporating CORS configuration and basic Moralis client setup. It includes defining a variable for the policy name (`AllowedOrigins`), adding the CORS policy service, registering controllers and Swagger, configuring the HTTP request pipeline (including development-specific Swagger UI, HTTPS redirection, authorization), mapping controllers, setting up Moralis connection data, and finally running the web application. The CORS policy specifically allows requests from `http://127.0.0.1:5500`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar AllowedOrigins = \"_allowedOrigins\";\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Define CORS policy\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(AllowedOrigins,\n                    policy =>\n                    {\n                        policy.WithOrigins(\"http://127.0.0.1:5500\")\n                                            .AllowAnyHeader()\n                                            .AllowAnyMethod();\n                    });\n});\n\n// Add services to the container.\nbuilder.Services.AddControllers();\n\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\n// Setup Moralis\nMoralis.MoralisClient.ConnectionData = new Moralis.Models.ServerConnectionData();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Interpreting Report Submission Response - JSON\nDESCRIPTION: This JSON snippet shows the expected response when a report for a spam ERC20 contract is successfully submitted to the Moralis Utils API. No dependencies are needed for interpretation. The API returns a JSON object with a message confirming successful submission. This output should be used to verify that the request completed successfully.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/spam-detection/report-erc20-spam.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"message\": \"Submission successful\" }\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Owners with Python\nDESCRIPTION: This code snippet shows how to use the Moralis Python SDK to get the owners of an NFT collection. It sets up the necessary parameters and makes an API call to retrieve the NFT owners.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owners-of-an-nft-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xa186d739ca2b3022b966194004c6b01855d59571\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 100, \n    \"cursor\": \"\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_nft_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Getting ERC-20 Transfers in Python\nDESCRIPTION: Python implementation to retrieve ERC-20 token transfers for a smart contract account using Moralis evm_api. Requires Moralis API key and supports various EVM chains.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-erc-20-transfers-of-smart-contract-account.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x9b722B2aA4Cc119aCf8c95bBF5244092Be6880b9\",\n    \"chain\": \"polygon\"\n}\n\nresult = evm_api.token.get_wallet_token_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: EVM RPC Request: eth_call Parameters\nDESCRIPTION: Example parameters for eth_call RPC method including transaction object with from, to, gas, gasPrice, value and data fields.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"from\": \"0x0000000000000000000000000000000000000000\",\n    \"to\": \"0x0000000000000000000000000000000000000000\",\n    \"gas\": \"0x76c0\",\n    \"gasPrice\": \"0x9184e72a000\",\n    \"value\": \"0x9184e72a\",\n    \"data\": \"0x\"\n  },\n  \"latest\"\n]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Top ERC20 Tokens by Price Change API\nDESCRIPTION: This JSON object represents the expected response structure from the Moralis `getTopERC20TokensByPriceMovers` API endpoint. It contains two arrays: `gainers` and `losers`, each listing ERC20 tokens with details like rank, name, symbol, logo, decimals, contract address, price, percentage price change (24h and 7d), and market cap.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-ERC20-tokens-by-price-change.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"gainers\": [\n    {\n      \"rank\": \"1\",\n      \"token_name\": \"Wrapped Ether\",\n      \"token_symbol\": \"WETH\",\n      \"token_logo\": \"https://assets.coingecko.com/coins/images/2518/large/weth.png?1595348880\",\n      \"token_decimals\": \"18\",\n      \"contract_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n      \"price_usd\": \"0.0285\",\n      \"price_24h_percent_change\": \"0.0285\",\n      \"price_7d_percent_change\": \"0.0285\",\n      \"market_cap_usd\": \"0.0285\"\n    }\n  ],\n  \"losers\": [\n    {\n      \"rank\": \"1\",\n      \"token_name\": \"Wrapped Ether\",\n      \"token_symbol\": \"WETH\",\n      \"token_logo\": \"https://assets.coingecko.com/coins/images/2518/large/weth.png?1595348880\",\n      \"token_decimals\": \"18\",\n      \"contract_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n      \"price_usd\": \"0.0285\",\n      \"price_24h_percent_change\": \"0.0285\",\n      \"price_7d_percent_change\": \"0.0285\",\n      \"market_cap_usd\": \"0.0285\"\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature - Moralis Streams - JavaScript\nDESCRIPTION: This code snippet demonstrates how to verify the signature of a webhook request using Node.js and the Web3.js library. It computes an HMAC using the concatenated request body and secret, then compares it to the 'x-signature' header. Required dependencies include Web3.js. Key parameters: req (request object), secret (webhook secret key). Throws an error if verification fails. Inputs: HTTP request and secret string; Output: error thrown if not valid.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/response-body.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst verifySignature = (req, secret) => {\n  const providedSignature = req.headers[\"x-signature\"];\n  if (!providedSignature) throw new Error(\"Signature not provided\");\n  const generatedSignature = web3.utils.sha3(JSON.stringify(req.body) + secret);\n  if (generatedSignature !== providedSignature)\n    throw new Error(\"Invalid Signature\");\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Moralis getPairAddress API (JSON)\nDESCRIPTION: Provides an example JSON output from the 'getPairAddress' endpoint, detailing the two tokens' metadata (addresses, names, symbols, decimals, etc.) and the resulting Pancakeswap V1 pair address. This response shows the information expected from the JavaScript, TypeScript, or Python API call, serving as a template for consumption/parsing in applications.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token0\": {\n    \"address\": \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\",\n    \"name\": \"Wrapped BNB\",\n    \"symbol\": \"WBNB\",\n    \"logo\": null,\n    \"logo_hash\": null,\n    \"thumbnail\": null,\n    \"decimals\": \"18\",\n    \"block_number\": \"8242108\",\n    \"validated\": 1,\n    \"created_at\": \"2022-01-20T10:41:03.034Z\"\n  },\n  \"token1\": {\n    \"address\": \"0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd\",\n    \"name\": \"ChainLink Token\",\n    \"symbol\": \"LINK\",\n    \"logo\": null,\n    \"logo_hash\": null,\n    \"thumbnail\": null,\n    \"decimals\": \"18\",\n    \"block_number\": \"8242108\",\n    \"validated\": 1,\n    \"created_at\": \"2022-01-20T10:41:03.034Z\"\n  },\n  \"pairAddress\": \"0xaebe45e3a03b734c68e5557ae04bfc76917b4686\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Metadata with Moralis Token API in Python\nDESCRIPTION: This example illustrates how to fetch metadata for specified ERC20 tokens on a given chain using Moralis Token API in Python. It depends on the moralis Python SDK. Provide your API key, a list of addresses, and the chain identifier in the params dictionary. The function returns metadata such as name, symbol, and decimals, and prints the result to stdout.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"addresses\": [\"ERC20_TOKEN_ADDRESS\"],\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.token.get_token_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Deploying the Solana Program\nDESCRIPTION: Deploys the compiled Solana program to the Solana cluster and returns the Program ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsolana program deploy ./target/deploy/tic_tac_toe.so\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Lowest Price using Moralis SDK (Python)\nDESCRIPTION: This Python code snippet retrieves the lowest price of an NFT collection by its contract address and chain using Moralis SDK. Requires installation of the 'moralis' SDK and passing parameters for 'address' (NFT contract address) and 'chain' (blockchain network). The API key is mandatory and should be used securely. Result is printed to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"NFT_CONTRACT_ADDRESS\", # provided from `getWalletNFTs`\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.nft.get_nft_lowest_price(\n  api_key=api_key,\n  params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Authentication Controller in ASP.NET Core (C#)\nDESCRIPTION: Defines the initial skeleton of the AuthenticationController for Moralis authentication integration. It sets up ASP.NET Core API routing with [ApiController] and [Route] attributes and inherits from ControllerBase for RESTful API logic. Required dependencies include 'Microsoft.AspNetCore.Mvc' and Moralis SDK packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Mvc;\nusing Moralis;\nusing Moralis.AuthApi.Models;\nusing Moralis.Network;\nusing Moralis.Web3Api.Models;\n\nnamespace MoralisDemo.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class AuthenticationController : ControllerBase\n    {\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Top NFT Collections with Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to initialize the Moralis SDK and call the `getHottestNFTCollectionsByTradingVolume` method via `Moralis.EvmApi.marketData` to get the leading NFT collections based on trading volume. It depends on the `moralis` and `@moralisweb3/common-evm-utils` packages, requires a Moralis API key, and logs the raw API response.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-trading-volume.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getHottestNFTCollectionsByTradingVolume();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers in Python\nDESCRIPTION: Python implementation to get ERC20 token transfers for a specific wallet address using Moralis API. Uses the moralis package and requires API key authentication. Simpler implementation compared to JavaScript/TypeScript versions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_wallet_token_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Transfers by Wallet with Moralis API - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the Moralis SDK and call the EvmApi to retrieve all NFT transfers for a specified wallet address on a given chain (e.g., Ethereum). Dependencies include the 'moralis' package and '@moralisweb3/common-evm-utils'. Key parameters are the 'address' (wallet to query) and 'chain' (EvmChain). The script outputs the full NFT transfer history in JSON; an API key is required, and network connectivity is necessary.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-NFT-transfers-by-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Solana API Reference - React JavaScript\nDESCRIPTION: This snippet imports the ApiReference React component and Solana-specific configuration from a JSON file, then renders the reference for obtaining NFTs by wallet on the Solana blockchain. Dependencies include the React library, the ApiReference component, and a JSON configuration file located relatively in the project directory. The component expects a configuration object as a prop; on rendering, it displays API documentation or interactive UI for the Solana 'getNFTs' operation. Input is implicitly passed via JSX props, and output is rendered documentation or interface. The configuration file path and structure are constraints to correct operation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/nft-api/get-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.solana.getNFTs} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Token Balances - TypeScript/React/JSX\nDESCRIPTION: This JSX snippet renders the 'ApiReference' component, spreading the configuration for the 'getWalletTokenBalances' API endpoint as props. The context indicates that the component displays details for retrieving the ERC20 token balances associated with a particular wallet. Inputs would be provided by the component's props, taken from the imported config file, and the output is rendered documentation of that API endpoint for the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/02-Get Wallet Token Balances/get-wallet-token-balances.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<ApiReference {...config.token.getWalletTokenBalances}>\n\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Block via Registered SDK Module - JavaScript\nDESCRIPTION: Provides an example of using a registered MoralisEvmApi module to query blockchain data, specifically retrieving a block by number or hash. The snippet imports the necessary Ethereum chain identifier and demonstrates calling the getBlock method with appropriate parameters. This pattern requires prior setup and registration of modules and is useful for granular API calls. Expected inputs include the chain and blockNumberOrHash; output is returned by the underlying promise or callback.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport MoralisEvmApi from \"@moralisweb3/evm-api\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst evmApi = core.getModule < MoralisEvmApi > MoralisEvmApi.moduleName;\nevMApi.block.getBlock({\n  chain: EvmChain.ETHEREUM,\n  blockNumberOrHash: \"\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Particle Network Chains via npm (Optional)\nDESCRIPTION: Optionally installs the `@particle-network/chains` package using npm. This dependency is used for handling blockchain chain configurations within Particle Connect.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-particle.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @particle-network/chains\n```\n\n----------------------------------------\n\nTITLE: Response Format when Querying Failed Webhook History - JSON\nDESCRIPTION: This JSON example demonstrates the structure of the response returned by the getHistory API endpoint in Moralis Streams. The result is an array of failed webhook records, each containing identification, timestamps, error messages, webhook URL, and payload details including block info and chain ID. The response also includes total record count and a pagination cursor. Consumers should ensure proper parsing and handle potentially large payloads; sensitive fields are application-specific.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/error-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": [\n    {\n      \"id\": \"HISTORY_ID\",\n      \"date\": \"string\",\n      \"payload\": {\n        // the failed webhook\n      },\n      \"tinyPayload\": {\n        \"block\": {},\n        \"chainId\": \"\",\n        \"amount\": 0\n      },\n      \"streamId\": \"STREAM_ID\",\n      \"tag\": \"TAG\",\n      \"errorMessage\": \"string\",\n      \"webhookUrl\": \"string\"\n    }\n  ],\n  \"total\": \"number\",\n  \"cursor\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis SDK Connection in C#\nDESCRIPTION: Defines the basic structure of a C# console application (`ConsoleDemo.Program`) with a `Main` method. Inside `Main`, it initializes the `MoralisClient.ConnectionData` with a `ServerConnectionData` object, requiring the user's Moralis Web3 API key for authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nnamespace ConsoleDemo\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            // Setup Moralis\n            MoralisClient.ConnectionData = new Moralis.Models.ServerConnectionData()\n            {\n                ApiKey = \"YOUR MORALIS WEB3API KEY\"\n            };\n        }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example Output of NFT Transfers API - JSON\nDESCRIPTION: This JSON snippet shows the typical response returned by the Moralis getNFTTransfers endpoint. The structure includes pagination details (total, page, page_size, cursor), a boolean 'block_exists', and an array of transfer result objects, each with keys like block number, transaction hash, token address, and parties involved. The sample demonstrates the expected data payload for validating and testing API responses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 2,\n  \"page\": 0,\n  \"page_size\": 100,\n  \"cursor\": null,\n  \"result\": [\n    {\n      \"block_number\": \"12344148\",\n      \"block_timestamp\": \"2021-04-30T21:11:46.000Z\",\n      \"block_hash\": \"0xa367b094366bc68de295ae6167797afc55eeb8383869363a6d7eb143c31d8274\",\n      \"transaction_hash\": \"0xe93e858f9330afa4581e260198195623aa7f5cd2809012440ea291d317be9f2f\",\n      \"transaction_index\": 154,\n      \"log_index\": 328,\n      \"value\": \"0\",\n      \"contract_type\": \"ERC721\",\n      \"transaction_type\": \"Single\",\n      \"token_address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n      \"token_id\": \"1\",\n      \"from_address\": \"0xaba7161a7fb69c88e16ed9f455ce62b791ee4d03\",\n      \"to_address\": \"0x46efbaedc92067e6d60e84ed6395099723252496\",\n      \"amount\": \"1\",\n      \"verified\": 1,\n      \"operator\": null\n    },\n    {\n      \"block_number\": \"12292922\",\n      \"block_timestamp\": \"2021-04-22T23:13:40.000Z\",\n      \"block_hash\": \"0xe2d521d11856591b77506a383033cf85e1d46f1669321859154ab38643244293\",\n      \"transaction_hash\": \"0xcfb197f62ec5c7f0e71a11ec0c4a0e394a3aa41db5386e85526f86c84b3f2796\",\n      \"transaction_index\": 21,\n      \"log_index\": 86,\n      \"value\": \"0\",\n      \"contract_type\": \"ERC721\",\n      \"transaction_type\": \"Single\",\n      \"token_address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n      \"token_id\": \"1\",\n      \"from_address\": \"0x0000000000000000000000000000000000000000\",\n      \"to_address\": \"0xaba7161a7fb69c88e16ed9f455ce62b791ee4d03\",\n      \"amount\": \"1\",\n      \"verified\": 1,\n      \"operator\": null\n    }\n  ],\n  \"block_exists\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Multi-Chain Wallet Activity with Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch the active chains for a specific wallet address using the Moralis SDK. It initializes the SDK with an API key, defines the target wallet address, specifies the chains to query (Ethereum, BSC, Polygon), and calls `Moralis.EvmApi.wallets.getWalletActiveChains`. The response, containing chain activity details, is logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/01-Wallet Details/how-to-get-multichain-activity-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  const response = await Moralis.EvmApi.wallets.getWalletActiveChains({\n    address,\n    chains,\n  });\n\n  console.log(response.toJSON());\n}\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Block Receipts by Hash - Ethereum JSON-RPC - JSON\nDESCRIPTION: Provides sample request and response structures for the eth_getBlockReceipts method, which fetches an array of transaction receipts for all transactions in a given block hash. The request requires the block hash as a parameter, and the response returns an array in the 'result'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[\"0xbfddf451426ef49dc0b726480adfdbd660d64d45bfa49670834d67cf44c3f2e2\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": [\n    // Array of transaction receipt objects\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Native Transaction Response Structure\nDESCRIPTION: Example JSON structure for a native transaction webhook response showing transaction details, block information, and various transfer events.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/response-body.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": false,\n  \"chainId\": \"0x1\",\n  \"abi\": [],\n  \"streamId\": \"c28d9e2e-ae9d-4fe6-9fc0-5fcde2dcdd17\",\n  \"tag\": \"native_transactions\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"15988759\",\n    \"hash\": \"0x3aa07bd98e328db97ec273ce06b3a15fc645931fbd26337fe20c48b274277f76\",\n    \"timestamp\": \"1668676247\"\n  },\n  \"logs\": [],\n  \"txs\": [\n    {\n      \"hash\": \"0xd68700a0e2abd9c041eb236812e4194bf91c8182a2b03065887ab0f33d5c2958\",\n      \"gas\": \"149200\",\n      \"gasPrice\": \"13670412399\",\n      \"nonce\": \"57995\",\n      \"input\": \"0xf78dc253000000000000000000000000d9408f29026e32852aff8c5c9c8ea834b44b4e1c000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000109fad200000000000000000000000000000000000000000000009ab31572a589a72a11900000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000180000000000000003b6d0340a5c475167f03b1556c054e0da78192cd2779087fcfee7c08\",\n      \"transactionIndex\": \"52\",\n      \"fromAddress\": \"0x839d4641f97153b0ff26ab837860c479e2bd0242\",\n      \"toAddress\": \"0x1111111254eeb25477b68fb85ed929f73a960582\",\n      \"value\": \"0\",\n      \"type\": \"2\",\n      \"v\": \"1\",\n      \"r\": \"46904304245026065492026869531757792493071866863221741878090753056388581469881\",\n      \"s\": \"17075445080437932806356212399757328600893345374993510540712828450455909549452\",\n      \"receiptCumulativeGasUsed\": \"3131649\",\n      \"receiptGasUsed\": \"113816\",\n      \"receiptContractAddress\": null,\n      \"receiptRoot\": null,\n      \"receiptStatus\": \"1\"\n    }\n  ],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: API Request with Explicit disable_total Parameter\nDESCRIPTION: Example of an API request URL with explicitly set disable_total=false parameter to continue receiving total count values after February 1st 2023.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2023-01-12-disable-total-for-faster-response-times.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2/0x0a46413965858A6AC4ED5184d7643DC055A4feA3?chain=eth&disable_total=false\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Wallet Token Balances\nDESCRIPTION: This JSON structure represents an example response from the `getWalletTokenBalances` endpoint. It's an array of objects, where each object details an ERC20 token owned by the address, including its `token_address`, `name`, `symbol`, `logo`, `thumbnail`, `decimals`, and the `balance` held by the wallet.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"token_address\": \"0xefd6c64533602ac55ab64442307f6fe2c9307305\",\n    \"name\": \"APE\",\n    \"symbol\": \"APE\",\n    \"logo\": null,\n    \"thumbnail\": null,\n    \"decimals\": 18,\n    \"balance\": \"101715701444169451516503179\"\n  },\n  {\n    \"token_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"name\": \"Wrapped Ether\",\n    \"symbol\": \"WETH\",\n    \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.webp\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.webp\",\n    \"decimals\": 18,\n    \"balance\": \"85000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Moralis Streams Webhook Headers Showing Charged Records in JSON\nDESCRIPTION: This JSON snippet shows example headers received with a Moralis Streams webhook payload. It highlights the `x-records-charged` header, which indicates the total number of records (sum of transactions, logs, and internal transactions) contained within the webhook for billing purposes. Each record costs 50 Compute Units, but charges only apply to confirmed webhooks (`confirmed:true`); unconfirmed webhooks will show `'x-records-charged': '0'`. The signature is provided for verifying webhook authenticity.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nheaders: {\n    'x-region': 'us-west-2',\n    'x-queue-size': '0',\n    'x-records-charged': '20',\n    'x-signature': '0xdf49163b5273b50a8da48e82b7254b45d81aeee9a02f1909a45d7aaea240e9c2',\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Number by Date with Moralis Block API in Python\nDESCRIPTION: This Python code snippet shows how to use the Moralis SDK to get the nearest block number for a given date on the Ethereum blockchain using the getDateToBlock endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"date\": \"2023-07-05\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.block.get_date_to_block(\n    api_key=api_key,\n    params=params,\n)\n\n# Converting it to JSON because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Using Data Types for API Calls in JavaScript\nDESCRIPTION: Demonstrates different ways to make API calls using EvmChain and EvmAddress data types with various input formats.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmChain, EvmAddress } from \"@moralisweb3/common-evm-utils\";\n\nMoralis.EvmApi.nft.getWalletNFTs({\n  chain: \"0x1\",\n  address: \"0xa74476443119A942dE498590Fe1f2454d7D4aC0d\",\n});\n\nMoralis.EvmApi.nft.getWalletNFTs({\n  chain: \"0x1\",\n  address: \"0xa74476443119a942de498590fe1f2454d7d4ac0d\",\n});\n\nMoralis.EvmApi.nft.getWalletNFTs({\n  chain: EvmChain.ETHEREUM,\n  address: EvmAddress.ZERO_ADDRESS,\n});\n\nMoralis.EvmApi.nft.getWalletNFTs({\n  chain: EvmChain.create(1),\n  address: EvmAddress.create(\"0xa74476443119A942dE498590Fe1f2454d7D4aC0d\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference and Badge Components in React (JavaScript)\nDESCRIPTION: These code lines import essential React components used to build the documentation UI, such as API reference viewers, informational admonitions, and custom endpoint badges. Dependencies include the Moralis documentation component library, configuration JSON, and badge UI modules. Inputs are component usage within the rendering logic; outputs are rendered documentation widgets. Requires a React (Docusaurus) environment and correct relative paths for all imports.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/03- Get Entities/get-entity-by-id.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport { PremiumEndpointBadge } from \"@site/src/components/PremiumEndpointBadge/PremiumEndpointBadge.js\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis Streams for All NFT Transfers (JSON)\nDESCRIPTION: This JSON snippet configures a Moralis Stream to listen for all NFT 'Transfer' events on the Ethereum mainnet by specifying the topic 'Transfer(address,address,uint256)' and enabling 'allAddresses'. The setup requires the correct ABI definition for the 'Transfer' event, with indexed 'from', 'to', and 'tokenId' fields, and should be used with the Streams API. The 'chainIds' field specifies which chain to listen to (here, Ethereum mainnet), and 'includeContractLogs' allows for contract log inclusion. Ensure your plan supports 'allAddresses: true' as it is not available on all tiers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/listen-to-all-addresses.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"tag\": \"anyEthNFTTransfer\",\n      \"topic0\": [ \"Transfer(address,address,uint256)\" ],\n      \"allAddresses\": true,\n      \"includeContractLogs\": true,\n      \"abi\": [\n        {\n          \"anonymous\": false,\n          \"inputs\": [\n            {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"from\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"to\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": true,\n              \"internalType\": \"uint256\",\n              \"name\": \"tokenId\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"name\": \"Transfer\",\n          \"type\": \"event\"\n        }\n      ],\n      \"chainIds\": [ \"0x1\" ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Balances using Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates retrieving NFTs owned by a user using the Moralis SDK. It utilizes type safety inherent in TypeScript and requires the 'moralis' and '@moralisweb3/common-evm-utils' packages. Parameters include 'address' (the user wallet) and 'chain' (target blockchain), with output printed in raw format. Replace placeholder values and configure TypeScript as needed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Collection Trading Volume via Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK and EVM utils to query NFT collections with the highest trading volume. It asynchronously initializes the Moralis API with a user-provided API key, then calls the getHottestNFTCollectionsByTradingVolume method. The snippet outputs the raw response to the console. Dependencies: moralis@latest and @moralisweb3/common-evm-utils. Key parameters: apiKey for authentication. Expects no input, prints an object containing NFT collection metadata as output. Requires a valid API key and Node.js environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-trading-volume.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getHottestNFTCollectionsByTradingVolume();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Calling sendToMany() for Cross-chain Transfer - Ethers.js - JavaScript\nDESCRIPTION: Invokes the 'sendToMany()' function on the GMPDistribution contract to send aUSDC tokens to multiple addresses across chains. Key parameters include the target chain ID ('ethereum-2'), the destination contract address, an array of recipient addresses, the token symbol, and the amount. The function call includes a transaction override specifying the 'value' sent for the operation. Execution requires prior token approval and sufficient balance and gas.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait contract.sendToMany(\n  \"ethereum-2\", // Destination chain\n  \"0x1aa5E49bF5eC550Bccb72764731a60a9203aFD69\", // Goerli contract address\n  [\"0x03555aA97c7Ece30Afe93DAb67224f3adA79A60f\", \"0xC165CbEc276C26c57F1b1Cbc499109AbeCbA4474\", \"0x23f5536D2C7a8ffE66C385F9f7e53a5C86F53bD1\"], // Receiving addresses\n  \"aUSDC\", // Token symbol\n  6000000,\n  {value: \"1000000000000000000\"} // Amount of tokens to be sent\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Number by Date with Moralis Block API in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the Moralis SDK to fetch the nearest block number for a given date on the Ethereum blockchain using the getDateToBlock endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from\"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const date = \"2023-07-05\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getDateToBlock({\n    date,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Embedding Moralis TradingView Candlestick Chart Widget (HTML & JavaScript)\nDESCRIPTION: This snippet embeds a real-time TradingView-style candlestick chart on a website using HTML and an inline JavaScript script. It dynamically loads the Moralis Price Chart Widget script and initializes the widget with parameters such as chainId, tokenAddress, dimensions, color scheme, default time interval, and more. The chart is rendered inside a container div, and the script ensures that the widget script is not redundantly loaded; if present, it only initializes the widget. Key customization options include theme, candle colors, background, time intervals, and localization. Requires an internet connection to https://moralis.com/static/embed/chart.js. Input the target token address and adjust customization options as needed. Outputs a fully functional, interactive and embeddable candlestick chart; the snippet is tailored for Pump.fun tokens on the Solana chain but is adaptable via properties. Limitations: relies on the Moralis widget and correct configuration of the target address; only works in browser environments.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/01-embed-tradingview-widget-for-pump-fun.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\\\"price-chart-widget-container\\\" style=\\\"width: 100%; height:100%\\\">\\n  <script type=\\\"text/javascript\\\">\\n    (function () {\\n      function loadWidget() {\\n        if (typeof window.createMyWidget === \\\"function\\\") {\\n          window.createMyWidget(\\\"price-chart-widget-container\\\", {\\n            width: \\\"980px\\\",\\n            height: \\\"620px\\\",\\n            chainId: \\\"solana\\\",\\n            tokenAddress: \\\"9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump\\\",\\n            defaultInterval: \\\"1D\\\",\\n            timeZone:\\n              Intl.DateTimeFormat().resolvedOptions().timeZone ?? \\\"Etc/UTC\\\",\\n            theme: \\\"moralis\\\",\\n            locale: \\\"en\\\",\\n            backgroundColor: \\\"#071321\\\",\\n            gridColor: \\\"#0d2035\\\",\\n            textColor: \\\"#68738D\\\",\\n            candleUpColor: \\\"#4CE666\\\",\\n            candleDownColor: \\\"#E64C4C\\\",\\n            hideLeftToolbar: false,\\n            hideTopToolbar: false,\\n            hideBottomToolbar: false,\\n          });\\n        } else {\\n          console.error(\\\"createMyWidget function is not defined.\\\");\\n        }\\n      }\\n\\n      if (!document.getElementById(\\\"moralis-chart-widget\\\")) {\\n        var script = document.createElement(\\\"script\\\");\\n        script.id = \\\"moralis-chart-widget\\\";\\n        script.src = \\\"https://moralis.com/static/embed/chart.js\\\";\\n        script.type = \\\"text/javascript\\\";\\n        script.async = true;\\n        script.onload = loadWidget;\\n        document.body.appendChild(script);\\n      } else {\\n        loadWidget();\\n      }\\n    })();\\n  </script>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs for a Wallet with ethers.js and Moralis - JavaScript\nDESCRIPTION: This standalone Node.js script connects to the Ethereum blockchain via Moralis's RPC endpoint using ethers.js, and fetches all NFTs belonging to the provided Ethereum wallet address with the custom \"eth_getNFTBalances\" JSON-RPC method. It securely loads the RPC endpoint from a .env file, and prints out the results. Prerequisites: ethers and dotenv npm packages and a valid Moralis RPC URL. The script takes no direct input except for the target address and chain, which can be modified in the script. Output is the response object containing the wallet's NFT balances.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/getting-started/02-making-your-first-request.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Load environment variables\\nrequire(\\\"dotenv\\\").config();\\n\\n// Import ethers.js\\nconst { ethers } = require(\\\"ethers\\\");\\n\\nasync function getAllNFTs() {\\n  // Initialize the provider using the Moralis RPC URL from the .env file\\n  const provider = new ethers.providers.JsonRpcProvider(\\n    process.env.MORALIS_NODE_URL\\n  );\\n\\n  // Send the eth_getNFTBalances request with the wallet address\\n  const response = await provider.send(\\\"eth_getNFTBalances\\\", [\\n    {\\n      address: \\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\", // Replace this with the wallet address you want to query\\n      chain: \\\"eth\\\", // Specify the chain, e.g., Ethereum Mainnet\\n    },\\n  ]);\\n\\n  // Log the response to the console\\n  console.log(response);\\n}\\n\\n// Call the function to fetch NFTs\\ngetAllNFTs();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReference in React for Solana SPL Token Query - JavaScript\nDESCRIPTION: This snippet imports the ApiReference React component and a configuration file, then uses the component to render documentation for the Moralis Solana getSPL API. Dependencies include React, the custom ApiReference component, and a JSON configuration file. The main parameter is the API method configuration (config.solana.getSPL), and the output is a rendered API reference section in the documentation site. This setup expects that the consumer uses a React-based documentation framework (such as Docusaurus) and has the required components and config files correctly structured.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/09-Balance API/get-spl.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.solana.getSPL} />\n```\n\n----------------------------------------\n\nTITLE: Defining URL Patterns for Web3 Authentication in Django\nDESCRIPTION: This snippet shows the URL patterns for the web3_auth app, including routes for authentication, message requests, profile viewing, and message verification.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('moralis_auth', views.moralis_auth, name='moralis_auth'),\n    path('request_message', views.request_message, name='request_message'),\n    path('my_profile', views.my_profile, name='my_profile'),\n    path('verify_message', views.verify_message, name='verify_message')\n]\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Batch Request for Multiple Blockchain Operations\nDESCRIPTION: This example illustrates how to send multiple JSON-RPC requests in a single batch to improve performance. It combines block retrieval and balance checking operations in one network call, reducing latency.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/fundamentals/how-json-rpc-works.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByNumber\",\n    \"params\": [\"0x10d4f\", true],\n    \"id\": 1\n  },\n  {\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBalance\",\n    \"params\": [\"0x123456...\"],\n    \"id\": 2\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Usage Statistics via Moralis Streams /status Endpoint (JSON)\nDESCRIPTION: This JSON object represents a sample response from the Moralis Streams API's `/status` (getStats) endpoint. It provides key metrics for monitoring usage within a billing period, including `totalLogsProcessed`, `totalTxsProcessed`, and `totalTxsInternalProcessed`. The sum of these three fields represents the total records consumed and charged.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/records-and-pricing.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"totalWebhooksDelivered\": 1288,\n  \"totalWebhooksFailed\": 17,\n  \"totalLogsProcessed\": 4257,\n  \"totalTxsProcessed\": 0,\n  \"totalTxsInternalProcessed\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Collection Owners with Moralis SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve a list of owners for a given NFT collection contract address on a specific EVM chain (Ethereum) using the Moralis JavaScript SDK. It requires initializing the Moralis SDK with an API key and then calling the `getNFTOwners` method with the contract address and chain identifier. The resulting list of owners is logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owners-of-an-nft-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xa186d739ca2b3022b966194004c6b01855d59571\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTOwners({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Wallet NFTs with Moralis - Python\nDESCRIPTION: In this Python code sample, the Moralis Python SDK is used to retrieve all NFTs owned by a specific Ethereum address via the evm_api.nft.get_wallet_nfts function. Inputs (address, chain, and format) are provided in a dictionary, along with optional parameters such as limit, token_addresses, cursor, and metadata normalization. Prerequisites: \\'moralis\\' and \\'json\\' modules. Set api_key with your Moralis API key. The returned Python object is printed as pretty-formatted JSON to handle Unicode characters. Outputs include a list of NFTs and associated metadata for the address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Token Deployment UI in React\nDESCRIPTION: Defines a React functional component `DeployTokenRemotely` using Chakra UI elements (`Box`, `VStack`, `FormControl`, `Input`, `Select`, `Button`, etc.) to create a form for deploying an interchain token remotely. It captures user input for a unique salt value, source chain, and destination chain using state variables (`saltValue`, `sourceChain`, `destinationChain`) updated via `onChange` handlers. A button triggers the `handleDeployToken` function (implementation not shown) and displays a loading state (`isLoading`) during the deployment process.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n//...\n\nconst DeployTokenRemotely = () => {\n  //...\n\n  return (\n    <Box\n      padding=\"7\"\n      maxW=\"xxl\"\n      borderWidth=\"1px\"\n      borderRadius=\"lg\"\n      overflow=\"hidden\"\n      margin=\"auto\"\n      marginTop=\"-20\"\n    >\n      {/*  ...  */}\n\n      <VStack spacing={5} align=\"stretch\">\n        <FormControl>\n          <FormLabel>Your unique salt value</FormLabel>\n\n          <Input\n            placeholder=\"Enter Salt Value\"\n            value={saltValue}\n            onChange={(e) => setSaltValue(e.target.value)}\n          />\n\n          <FormHelperText>Unique salt value for your token.</FormHelperText>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Source chain</FormLabel>\n\n          <Stack spacing={3}>\n            <Select\n              placeholder=\"Select source chain\"\n              value={sourceChain}\n              onChange={(e) => setSourceChain(e.target.value)}\n              size=\"md\"\n            >\n              {/*  ...  */}\n            </Select>\n          </Stack>\n\n          <FormHelperText>\n            Source chain for your token eg. Fantom, binance, Polygon etc.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Destination chain</FormLabel>\n\n          <Stack spacing={3}>\n            <Select\n              placeholder=\"Select Destination chain\"\n              value={destinationChain}\n              onChange={(e) => setDestinationChain(e.target.value)}\n              size=\"md\"\n            >\n              {/*  ...  */}\n            </Select>\n          </Stack>\n\n          <FormHelperText>\n            Destination chain for your token eg. Fantom, binance, Polygon etc.\n          </FormHelperText>\n        </FormControl>\n\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <Button\n            colorScheme=\"cyan\"\n            onClick={handleDeployToken}\n            isLoading={isLoading}\n            loadingText=\"Deploying Token Remotely...\"\n            w=\"sm\"\n            variant=\"solid\"\n            disabled={isLoading}\n          >\n            Deploy Token Remotely\n          </Button>\n\n          {/*  ...  */}\n        </div>\n\n        {/*  ...  */}\n      </VStack>\n    </Box>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Smart Contract Event Webhook Data Using Moralis Streams - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to decode and extract structured data from a smart contract event webhook using Moralis Streams. It defines a URI interface representing the event schema, constructs a sample webhookData payload matching Moralis stream event structure, and invokes Moralis.Streams.parsedLogs to decode the logs. Dependencies include the 'moralis' SDK and '@moralisweb3/core' for BigNumber. The key parameters are the webhookData object (representing streamed event metadata and log entries) and the generic interface URI for type safety. The decoded logs are then accessed and printed, delivering the 'value' and 'id' fields extracted from the event. Expected input is webhookData conforming to Moralis Stream webhook format; output is an array of typed event objects. Limitations: the code assumes event ABI matches the data structure and ignores error handling or asynchronous stream sources.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/parse-data.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from 'moralis';\nimport { BigNumber } from '@moralisweb3/core';\n\nconst test = async () => {\n\n  interface URI{\n    value: string;\n    id: BigNumber;\n  }\n\n  const webhookData = {\n    confirmed: true,\n    chainId: '0x1',\n    abi: [\n      {\n        anonymous: false,\n        inputs: [\n          {\n            indexed: false,\n            internalType: 'string',\n            name: 'value',\n            type: 'string',\n          },\n          {\n            indexed: true,\n            internalType: 'uint256',\n            name: 'id',\n            type: 'uint256',\n          },\n        ],\n        name: 'URI',\n        type: 'event',\n      },\n    ],\n    streamId: 'b4dbc80e-8161-43d8-9c5a-05a8a4bba988',\n    tag: 'URI-listener',\n    retries: 0,\n    block: {\n      number: '15933519',\n      hash: '0x192357541e97093ebdf99b4a04e7e33726b6eb01f88f7ab3df3ab2dc5242147c',\n      timestamp: '1668009611',\n    },\n    logs: [\n      {\n        logIndex: '475',\n        transactionHash:\n          '0x55125fa34ce16c295c222d48fc3efe210864dc2fb017f5965b4e3743d72342d5',\n        address: '0x495f947276749ce646f68ac8c248420045cb7b5e',\n        data: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042697066733a2f2f6261666b726569687366326568636c78796d793467366836697163627361346c6961637a6f716b7373666b6e70787535796a356f67696a6f667175000000000000000000000000000000000000000000000000000000000000',\n        topic0:\n          '0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b',\n        topic1:\n          '0xab6953e647a36018fc48d6223583597b84c755a0000000000000010000000001',\n        topic2: null,\n        topic3: null,\n      },\n    ],\n    txs: [],\n    txsInternal: [],\n    erc20Transfers: [],\n    erc20Approvals: [],\n    nftApprovals: { ERC1155: [], ERC721: [] },\n    nftTransfers: [],\n  };\n\n  const decodedLogs = Moralis.Streams.parsedLogs<URI>(webhookData);\n\n  console.log(decodedLogs[0].value);\n  console.log(decodedLogs[0].id.toString());\n};\n\ntest();\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from Moralis NFT Owner Lookup\nDESCRIPTION: This JSON snippet shows a typical response from the Moralis getNFTTokenIdOwners endpoint. It includes details about pagination, the NFT token address, token ID, current owner address, block information, contract type, metadata, and minter address for a specific NFT.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owner-of-an-nft.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 1,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": null,\n  \"result\": [\n    {\n      \"token_address\": \"0xa186d739ca2b3022b966194004c6b01855d59571\",\n      \"token_id\": \"1\",\n      \"owner_of\": \"0xc81082690edc8cde6d83a7549aa6a74534305372\",\n      \"block_number\": \"15821471\",\n      \"block_number_minted\": \"15821471\",\n      \"token_hash\": \"c4940b74fa9c9e1605316dc98f4a3eb3\",\n      \"amount\": \"1\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"NFTPass\",\n      \"symbol\": \"ATTPASS\",\n      \"token_uri\": \"https://metadata.atticc.xyz/1\",\n      \"metadata\": \"{\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Name\\\",\\\"value\\\":\\\"Atticc Early Adopter Pass\\\"},{\\\"trait_type\\\":\\\"Category\\\",\\\"value\\\":\\\"Early Adopter Pass\\\"},{\\\"trait_type\\\":\\\"Number of Seats\\\",\\\"value\\\":\\\"5555\\\",\\\"display_type\\\":\\\"number\\\"},{\\\"trait_type\\\":\\\"Royalty\\\",\\\"value\\\":\\\"0\\\",\\\"display_type\\\":\\\"number\\\"}],\\\"image\\\":\\\"https://media.atticc.xyz/Pass1.webp\\\"}\",\n      \"last_token_uri_sync\": \"2022-10-25T00:21:22.266Z\",\n      \"last_metadata_sync\": \"2022-10-25T00:21:26.139Z\",\n      \"minter_address\": \"0xc81082690edc8cde6d83a7549aa6a74534305372\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeseries Token Analytics via Moralis API\nDESCRIPTION: Fetches timeseries analytics data for a token (address likely specified via query parameters or request body, though not shown in the example URL) using the Moralis Deep Index API v2.2. This endpoint provides historical analytics data over time.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/tokens//analytics/timeseries\n```\n\n----------------------------------------\n\nTITLE: Processing Image and Preparing NFT Metadata in TypeScript\nDESCRIPTION: This frontend code snippet defines an async function `convertBase64` using `FileReader` to convert an image file to a base64 string. It then calls this function, prepares an `options` object containing NFT metadata (name, description, base64 image, symbol), and sends this object to a backend API route (`/upload`) using a custom `apiPost` function. It anticipates receiving the metadata URI from the backend.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-minter.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// full code in `src/components/templates/nftMinter/NFTMinter.tsx`\n\n//Function to process image to base64\nconst convertBase64 = (inputFile: any) => {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.readAsDataURL(inputFile);\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = (error) => {\n      reject(error);\n    };\n  });\n};\n\n// NFT metadata\nconst base64Data = await convertBase64(file[0]);\nconst options = {\n  name,\n  description,\n  image: base64Data,\n  symbol: \"M-NFT\",\n};\n\n// Sending the metdata to the backend NextJs API route for uploading to arweave\nconst uri = await apiPost(\"/upload\", options)\n  .then((data: UploadMetadataOutput) => {\n    console.log(data);\n    return data.uri;\n  })\n  .catch((e) => {\n    console.log(e);\n  });\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Owners with Moralis NFT API (TypeScript)\nDESCRIPTION: This TypeScript example shows how to interact with the Moralis NFT API to fetch all NFT owners tied to a specific contract on Ethereum. It imports the relevant Moralis SDK components, initializes with an API key, specifies both address and chain, and calls EvmApi.nft.getNFTOwners for data retrieval. Required dependencies are 'moralis' and '@moralisweb3/common-evm-utils', and a valid API key. Parameters are the contract address and chain identifier, returning NFT owners as a JSON object; static typing provides additional type safety over JavaScript.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xd4e4078ca3495DE5B1d4dB434BEbc5a986197782\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTOwners({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sushiswap V2 Pair Reserves with Moralis SDK - TypeScript\nDESCRIPTION: This snippet details usage of the Moralis TypeScript SDK to obtain reserve data from a Sushiswap V2 liquidity pool. It imports Moralis and EvmChain, initializes with an API key, defines the target pair address and chain, and retrieves the reserves with 'EvmApi.defi.getPairReserves'. The script prints the response as JSON. Requires Node.js, Moralis SDK, and TypeScript setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-reserves.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xc40d16476380e4037e6b1a2594caf6a6cc8da967\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching EVM NFTs by Traits using Moralis API\nDESCRIPTION: Moralis API endpoint (v2.2) for retrieving NFTs within a specific EVM contract address, filtered by their traits. Requires the contract `address` as a path parameter and trait filters potentially as query parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/nft/:address/nfts-by-traits\n```\n\n----------------------------------------\n\nTITLE: Example Solana NFT Creation Information Structure in JSON\nDESCRIPTION: Illustrates the JSON structure for the 'firstCreated' object, which provides details about the NFT's minting event when available. It includes the 'mintTimestamp' (Unix epoch seconds), the 'mintBlockNumber' on the Solana chain, and the 'mintTransaction' hash associated with the creation event.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/nft-api-faq.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"firstCreated\": {\n  \"mintTimestamp\": 1682119190,\n  \"mintBlockNumber\": 189744752,\n  \"mintTransaction\": \"2yZw1LEKuFydmg6bQd3jWoeZGYytyrmC1dBkdhco8kbkmtBi2FiuW1TfBvToRqougfcogrqQvD5c2Kk25auw4wXA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MetaMask Connect Button for Web3 Authentication - JavaScript\nDESCRIPTION: Enhances the SignIn page with a button that invokes MetaMask wallet authentication using Wagmi's useConnect and MetaMaskConnector. On click, retrieves user's account and chainId, then logs the result. Requires installation of wagmi and connecting to a supported Ethereum provider. This is foundational for interacting with MetaMask in React.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useConnect } from \"wagmi\";\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\n\nfunction SignIn() {\n  const { connectAsync } = useConnect();\n\n  const handleAuth = async () => {\n    const { account, chain } = await connectAsync({\n      connector: new MetaMaskConnector(),\n    });\n\n    const userData = { address: account, chainId: chain.id };\n\n    console.log(userData);\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={handleAuth}>Authenticate via Metamask</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Implementing Balances Component to Fetch and Display Wallet Balances (JavaScript)\nDESCRIPTION: Defines a React functional component for the /balances route, fetching wallet balances from a backend API using axios and displaying the results. Depends on 'react', 'axios', and a running server endpoint at 'http://localhost:4000/balances'. Uses useEffect for data fetching and useState for state management. Inputs: none directly; fetches from API. Outputs: renders wallet address and balances. Limitation: no error handling in UI.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from 'react';\n\nimport axios from 'axios';\n\nexport default function Balances() {\n  const [balances, setBalances] = useState({});\n\n  useEffect(() => {\n    axios('http://localhost:4000/balances').then(({ data }) => {\n      setBalances(data);\n    });\n  }, []);\n\n  return (\n    <div>\n      <h3>Wallet: {balances.address}</h3>\n      <h3>Native Balance: {balances.nativeBalance} ETH</h3>\n      <h3>Token Balances: {balances.tokenBalances}</h3>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Error Code Table in Markdown\nDESCRIPTION: Table containing Stream module error codes with identifiers and descriptions for stream-related operations\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/error-handling.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Code | Error | Description |\n| --- | --- | --- |\n| `S0001` | GENERIC_STREAM_ERROR | An unspecified error occurred with the stream request |\n| `S0002` | INCORRECT_NETWORK | The specified network is incorrect for the stream request |\n| `S0003` | INCORRECT_PARAMETER | The supplied parameters for the stream request are incorrect |\n| `S0004` | INVALID_SIGNATURE | The signature for the stream data is invalid |\n| `S9000` | NOT_IMPLEMENTED | The requested stream method or feature isn't implemented |\n```\n\n----------------------------------------\n\nTITLE: Get Wallet Transactions in Python\nDESCRIPTION: Python implementation for retrieving wallet transactions using Moralis API. Uses the evm_api module from moralis package with simplified parameter structure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/05-Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.transaction.get_wallet_transactions(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Wallet NFT Collections\nDESCRIPTION: This JSON object shows a sample response structure returned by the `getWalletNFTCollections` endpoint. It includes pagination details (`status`, `page`, `cursor`, `page_size`) and a `result` array containing objects for each NFT collection, detailing properties like `token_address`, `contract_type`, `name`, `symbol`, and collection imagery URLs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/04-NFT Collections/how-to-get-all-nft-collections-owned-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"status\": \"SYNCED\",\n  \"page\": 1,\n  \"cursor\": null,\n  \"page_size\": 100,\n  \"result\": [\n    {\n      \"token_address\": \"0xfbc6f43c1d382da5f4dda34ae542bdd460423be5\",\n      \"possible_spam\": true,\n      \"contract_type\": \"ERC1155\",\n      \"name\": \"Toy Booger NFT\",\n      \"symbol\": \"Toy Booger NFT\",\n      \"verified_collection\": false,\n      \"collection_logo\": \"https://i.seadn.io/gae/eQ_ObnigEZr8aalXL71GO_3Cs6xGrIiNKRKtbvPS9d-OAIgQeBkqGyjtKZMcu4DuVaknkuk0_E4TtIpjs0UIe3cFBJmHXV5-mitjrw?w=500&auto=format\",\n      \"collection_banner_image\": \"https://i.seadn.io/gae/YjIHBPaMmBU1m-CHjZwcLNGhxhgDoJrSrXZCZi3xvBaGJKM-FQISrKzsWHdFoLifl-IzEWuVZ8uJLelUSE6oOjoxaizyswbI5wmkjFg?w=500&auto=format\"\n    },\n    {\n      \"token_address\": \"0xedc79f027bba6cfac31e21dc8b4c2c0b20866e31\",\n      \"possible_spam\": true,\n      \"contract_type\": \"ERC1155\",\n      \"name\": \"Bulls on Block\",\n      \"symbol\": \"Bulls on Block\",\n      \"verified_collection\": false,\n      \"collection_logo\": \"https://i.seadn.io/gae/WD6FfHhFGcmBlLsXlzFgq4Za8TlC5065GRUJwXjnRgUpkMrLLr8-SMcVgRzUnuxtKZ8mXcwvG_iydceIDJ2_NGxMTil0uWnB8i4IFg?w=500&auto=format\",\n      \"collection_banner_image\": \"https://i.seadn.io/gae/-zlLbVdkSG_IA9p_fJxajDyBA6SyzQ1_Q4lwFkpan_NM51rk7NsEM6Drs6sMaCkZP7QEfVNRYOLl7o-GLQzd4ShDWNZiTf6BHx-m?w=500&auto=format\"\n    },\n    {\n      \"token_address\": \"0xe786b5596a792d7beafcf08eaf9de711c7b7b14b\",\n      \"possible_spam\": true,\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Gutter Punks - Otherside\",\n      \"symbol\": \"GPO\",\n      \"verified_collection\": false,\n      \"collection_logo\": \"https://i.seadn.io/gae/gqgi2DFDHPBBjsshtyPe2cN019JZmML8gBfy1Hg5LhOEckX-BRPLqWfQf_xqGyWB9YtFefq5jh35JIp-YSadq8fN9rlZKS-N6TK8?w=500&auto=format\",\n      \"collection_banner_image\": null\n    },\n    {\n      \"token_address\": \"0xe7198926b9f9b4ca0c7b2cc0cfb25b36f0dc7e45\",\n      \"possible_spam\": true,\n      \"contract_type\": \"ERC1155\",\n      \"name\": \"ZED RUN\",\n      \"symbol\": \"ZED RUN\",\n      \"verified_collection\": false,\n      \"collection_logo\": \"https://i.seadn.io/gae/jLDu2mpSekG6RxJI_XgVi4Uhf3NFZ5thkJrNwVXkbL3c7fKwQoxJSGiiolCjIijUPBf8_QtoDMLPla6PyDEo4mcDIysTp1LVp5s3tlU?w=500&auto=format\",\n      \"collection_banner_image\": \"https://i.seadn.io/gae/zSwvUVqzZpMjyOTiAQCtkb9Uw-G3O-j4Iilmb_QfcMSMMS4V9rNUjBs4icxxDzEfk1kMiwijCiT3tDxWBXDs-gI1TFyT6I6KaG20P70?w=500&auto=format\"\n    },\n    ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs Owned by an Address using Moralis API - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to query all NFTs owned by a given Ethereum address using Moralis and its EVM utilities. It imports the necessary Moralis SDK packages and requires an API key for authorization. The main function initializes Moralis, defines the target address and blockchain (EvmChain.ETHEREUM), and fetches NFTs using getWalletNFTs, logging the results as JSON. Ensure you have the appropriate type definitions and environment for TypeScript execution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Initializing State Variables for Interchain Token Transfer in JavaScript/React\nDESCRIPTION: This snippet initializes necessary state variables using React's `useState` hook within the `TransferToken` component. It sets up state for source/destination chains, receiver address, transfer amount, the interchain token contract address, and boolean flags to control the visibility of the approval button and the form itself.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n  //...\nconst TransferToken = () = >{\n  //...\n  const[sourceChain, setSourceChain] = useState < string > ('');\n  const[destinationChain, setDestinationChain] = useState < string > ('');\n  const[receiverAddress, setReceiverAddress] = useState < string > ('');\n  const[amountToTransfer, setAmountToTransfer] = useState < number > (0);\n  const[interchainTokenContractAddress, setInterchainTokenContractAddress] = useState < string > ('');\n  const[approveButonVisibility, setApproveButtonVisibility] = useState < boolean > (true);\n  const[formVisibility, setFormVisibility] = useState < boolean > (false);\n  return (\n  //...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference using ApiReference Component in JSX\nDESCRIPTION: Uses the imported `ApiReference` React component within JSX syntax to render the specific API documentation for the 'resolveENSDomain' endpoint. It passes configuration properties dynamically fetched from the imported `config` object using the spread syntax (`{...}`).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-ens-domain.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.resolve.resolveENSDomain} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Smart Account Transactions with TypeScript\nDESCRIPTION: TypeScript implementation of getWalletTransactions endpoint using Moralis SDK. Provides type safety while fetching transaction history for smart contract accounts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/05-Transactions/how-to-get-transactions-of-smart-contract-account.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const address = \"0x350845DD3f03F1355233a3A7CEBC24b5aAD05eC5\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Endpoint Weights API Response in JSON\nDESCRIPTION: This JSON code block provides a sample response from the endpointWeights API, showing a list of endpoints and their corresponding compute unit price and rate limit cost. Each object includes the endpoint name, path, price (for billing), and rateLimitCost (for rate limiting). This output assists developers in understanding the expected structure of data when querying endpoint weights with the Moralis SDK.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/02-compute-units-cu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"endpoint\": \"getBlock\",\n    \"path\": \"/block/{block_number_or_hash}\",\n    \"price\": 100,\n    \"rateLimitCost\": 20\n  },\n  {\n    \"endpoint\": \"getContractEvents\",\n    \"path\": \"/{address}/events\",\n    \"price\": 20,\n    \"rateLimitCost\": 20\n  },\n  {\n    \"endpoint\": \"getTransaction\",\n    \"path\": \"/transaction/{transaction_hash}\",\n    \"price\": 10,\n    \"rateLimitCost\": 10\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample Moralis ENS Resolver API Response - JSON\nDESCRIPTION: This is a sample JSON response from the Moralis Resolve API after resolving a given ENS domain. The main parameter present is 'address', representing the Ethereum address associated with the queried ENS domain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-domain.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Metadata with Total Supply and FDV in JSON Response\nDESCRIPTION: This example shows the JSON response structure for the Pepe token, demonstrating the new total_supply, total_supply_formatted, and fully_diluted_valuation fields. The endpoint returns comprehensive token metadata including address information, decimals, logos, validation status, and category information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2024-05-03-total-supply-and-fdv.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"address\": \"0x6982508145454ce325ddbe47a25d4ec3d2311933\",\n    \"address_label\": \"Pepe (PEPE)\",\n    \"name\": \"Pepe\",\n    \"symbol\": \"PEPE\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://logo.moralis.io/0x1_0x6982508145454ce325ddbe47a25d4ec3d2311933_26fdbd9bd7014ce9b72656a59ba47626\",\n    \"logo_hash\": null,\n    \"thumbnail\": \"https://logo.moralis.io/0x1_0x6982508145454ce325ddbe47a25d4ec3d2311933_26fdbd9bd7014ce9b72656a59ba47626\",\n    \"total_supply\": \"420689899999994793099999999997400\",\n    \"total_supply_formatted\": \"420689899999994.7930999999999974\",\n    \"fully_diluted_valuation\": \"3399713297.76\",\n    \"block_number\": \"19754261\",\n    \"validated\": 1,\n    \"created_at\": \"2023-04-14T14:51:35.000Z\",\n    \"possible_spam\": false,\n    \"verified_contract\": true,\n    \"categories\": [\n        \"Meme\"\n    ],\n    \"links\": {\n        \"twitter\": \"https://twitter.com/pepecoineth\",\n        \"website\": \"https://www.pepe.vip/\",\n        \"telegram\": \"https://t.me/pepecoineth\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers in JavaScript\nDESCRIPTION: JavaScript implementation to get ERC20 token transfers for a specific wallet address using Moralis Token API. Requires Moralis SDK and common-evm-utils package. Returns transfer details including transaction hashes, addresses, timestamps, and values.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Sushiswap V2 Pair Reserves with Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to retrieve the reserves for a specific Sushiswap V2 pair using the Moralis SDK with type safety. It initializes Moralis, defines the pair address and chain (using `EvmChain.ETHEREUM`), calls the asynchronous `Moralis.EvmApi.defi.getPairReserves` method, and logs the resulting reserves in JSON format. Requires the `moralis` and `@moralisweb3/common-evm-utils` packages and a Moralis API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-reserves.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xc40d16476380e4037e6b1a2594caf6a6cc8da967\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying Uniswap V2 Pair Reserves in Python\nDESCRIPTION: Python implementation to fetch pair reserves from a Uniswap V2 liquidity pool using Moralis DeFi API. Uses the evm_api module and requires API key and parameters configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-reserves.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"pair_address\": \"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974\",\n    \"chain\": \"eth\",\n    # \"to_block\": \"\",\n    # \"to_date\": \"\",\n}\n\nresult = evm_api.defi.get_pair_reserves(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching EVM Historical NFT Floor Price by Contract using Moralis API\nDESCRIPTION: Moralis API endpoint (v2.2) for retrieving historical floor prices for a specific EVM contract address. Requires the contract `address` as a path parameter. Currently supported on Ethereum & Base.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/nft/:address/floor-price/historical\n```\n\n----------------------------------------\n\nTITLE: Defining a Separate Receiver ABI with Output Naming - JavaScript\nDESCRIPTION: Defines a new ABI object for querying the recipient's balance in a transfer using the name 'toBalance' for the output. Uses standard ABI structure and read-only function definition. This is important for distinguishing between sender and receiver balance outputs in trigger results. Requires the balanceOfSenderAbi to also be defined elsewhere in the code context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst balanceOfReceiverAbi = {\n  constant: true,\n  inputs: [\n    {\n      name: \"owner\",\n      type: \"address\",\n    },\n  ],\n  name: \"balanceOf\",\n  outputs: [\n    {\n      name: \"toBalance\",\n      type: \"uint256\",\n    },\n  ],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\",\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Token Metadata by Address - HTTP Endpoint\nDESCRIPTION: Fetches metadata and contract details for a specified Solana token address and network. Used to retrieve token name, symbol, decimals, supply, and other metadata; the endpoint requires Moralis credentials. Results are JSON-formatted and meant for integration in dashboards or analytics.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/token/:network/:address/metadata\n```\n\n----------------------------------------\n\nTITLE: Rendering Market Data API Reference UI (Markdown/JSX)\nDESCRIPTION: This snippet uses JSX/Markdown syntax to render the API reference for fetching top ERC20 tokens with additional UI elements for premium endpoint notice. It embeds the ApiReference React component configured for the market data endpoint and includes an Admonition component that provides information about API access requirements and usage. No direct parameters are required to call the API; UI elements assist in onboarding and informing the user.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/12-Market Data API/get-top-erc20-tokens-by-market-cap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Get the top ERC20 tokens by market cap\n\n<ApiReference {...config[\"market-data\"].getTopERC20TokensByMarketCap}>\n  <Admonition type=\"info\" icon=\"💡\" title=\"PREMIUM ENDPOINT\">\n    <p>\n      To use this API, you will need an API key under a Moralis account with the\n      Pro or above plan. To upgrade your API plan, go to the{\" \"}\n      <Link href=\"https://admin.moralis.com/account/billing\">billing page</Link>{\" \"}\n      in the Moralis Dashboard.\n    </p>\n    <p>\n      This API has no parameter and you can simply use the <b>Try It</b> button\n      to test it out.\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Fetching Multi-Chain Wallet Activity using Moralis SDK (Python)\nDESCRIPTION: This Python snippet shows how to retrieve multi-chain wallet activity using the Moralis Python SDK. It imports the `evm_api`, sets the API key, defines parameters including the wallet `address` and a list of `chains` (as strings: 'eth', 'bsc', 'polygon'), and calls `evm_api.transaction.get_wallet_active_chains`. The result containing chain activity details is then printed. Requires the `moralis` Python package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/01-Wallet Details/how-to-get-multichain-activity-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chains\": [\"eth\", \"bsc\", \"polygon\"],\n}\n\nresult = evm_api.transaction.get_wallet_active_chains(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Transfers with Moralis NFT API - TypeScript\nDESCRIPTION: This snippet details how to use Moralis in a TypeScript project to list all NFT transfers for a given contract address and token ID via the getNFTTransfers endpoint. It imports the necessary types and functions from 'moralis' and '@moralisweb3/common-evm-utils'. You must insert your Moralis API key and specify the target NFT and blockchain network. The script logs the response (paginated transfer list) as JSON. Prior TypeScript environment setup and package installations are needed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const tokenId = \"1\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTTransfers({\n    address,\n    tokenId,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Transfers with Python\nDESCRIPTION: Python implementation to retrieve NFT transfers for a wallet using Moralis evm_api. Requires moralis package. Takes wallet address and chain as parameters in a dictionary.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-NFT-transfers-by-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.nft.get_wallet_nft_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC-20 Token Balance History using Moralis Wallet API (Python)\nDESCRIPTION: This Python script retrieves ERC-20 token balances for a given Ethereum wallet at a specified block number utilizing the Moralis Wallet API. It depends on the 'moralis' Python SDK, which must be installed before running. The script requires setting your Moralis API key, address, chain, and block number, and fetches the balances through 'evm_api.token.get_wallet_token_balances'. The function inputs: API key, address, chain ('eth'), block. The result is printed directly, providing historical balance data. Replace 'YOUR_API_KEY' prior to execution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-erc-20-token-balance-history.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\\n\\n# Initialize with your Moralis API key\\napi_key = \\\"YOUR_API_KEY\\\"\\n\\n# Define the wallet address, blockchain, and block number\\naddress = \\\"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\\\"\\nchain = \\\"eth\\\"  # Ethereum mainnet\\nto_block = \\\"16310000\\\"  # Block number for historical data\\n\\n# Fetch token balances at the specified block\\nresult = evm_api.token.get_wallet_token_balances(\\n    api_key=api_key,\\n    params={\\n        \\\"address\\\": address,\\n        \\\"chain\\\": chain,\\n        \\\"toBlock\\\": to_block\\n    },\\n)\\n\\n# Print the result\\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Metadata with Python\nDESCRIPTION: Python implementation for fetching ERC20 token metadata using the Moralis SDK. This version uses the evm_api module to make the API call with the required parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-symbols.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"symbols\": ['UNI', 'AAVE', 'LINK'],\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_token_metadata_by_symbol(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Updating Stream Status\nDESCRIPTION: Method to update the status of a stream, allowing for pausing or activating streams programmatically.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/stream-management.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait Moralis.Streams.updateStatus({\n  id: \"YOUR_STREAM_ID\",\n  status: \"paused\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Banner Component for Information Display - TypeScript\nDESCRIPTION: This code snippet imports a TypeScript React component ('ApiBanner') used to display informational banners within the documentation page. The import assumes a '.tsx' file extension, indicating usage of TypeScript and JSX syntax. This component is intended to provide contextual alerts or notifications, improving user awareness about API access or restrictions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/09-Search Tokens/token-search-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Unstoppable Domain Resolution\nDESCRIPTION: This JSON object illustrates the expected output format when successfully resolving an Unstoppable domain using the Moralis API. It contains a single key-value pair where the key is 'address' and the value is the resolved wallet address as a string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-reverse-resolve-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"address\": \"0x8aaD44321A86b170879d7A244c1e8d360c99DdA8\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Connecting to MetaMask and Retrieving Wallet Info using Ether.js\nDESCRIPTION: This JavaScript function `connectToMetamask` uses Ether.js to interact with the MetaMask browser extension. It initializes a Web3 provider using `window.ethereum`, requests access to the user's accounts and fetches the current chain ID, then retrieves the signer object needed for signing transactions or messages. It returns an object containing the signer, chain ID, and the user's primary account address. Requires Ether.js (v5) and the presence of the MetaMask provider (`window.ethereum`).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst connectToMetamask = async () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n\n  const [accounts, chainId] = await Promise.all([\n    provider.send('eth_requestAccounts', []),\n    provider.send('eth_chainId', []),\n  ]);\n\n  const signer = provider.getSigner();\n  return { signer, chain: chainId, account: accounts[0] };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing server dependencies for authentication\nDESCRIPTION: Command to install server-side dependencies required for handling authentication, including cookie-parser for managing cookies, jsonwebtoken for JWT operations, and dotenv for environment variables.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cookie-parser jsonwebtoken dotenv\n```\n\n----------------------------------------\n\nTITLE: Querying Wallet NFTs with Moralis - JavaScript\nDESCRIPTION: This JavaScript snippet initializes the Moralis SDK, configures it with an API key, and queries the Moralis Wallet API for all NFTs owned by the specified Ethereum address using the getWalletNFTs endpoint. The EvmChain.ETHEREUM enum specifies the chain. Dependencies required: \\'moralis\\' (npm module) and \\'@moralisweb3/common-evm-utils\\'. The response is output as a JSON object. Key parameters: address (wallet address string), chain (Moralis EvmChain enum). Output is the full NFT list and metadata for the address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginated NFT Results (TypeScript/JSX)\nDESCRIPTION: This React component snippet (from `pages/index.jsx`) manages the display of fetched NFTs with pagination. It uses a `useEffect` hook to update the `pageResult` state (a slice of the full `searchResult`) whenever the search results or the current page number changes. The component then maps over `pageResult` to render an `NFTCard` component for each NFT on the current page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `pages/index.jsx`\n\n// The data stored in nftsToDelete state variable is used to\n// delete the selected NFTs\nconst [pageResult, setPageResult] = useState([]);\n\n// 2️⃣\n// Load pages function updates the `pageResult` state variable with\n// the first 10 items of the `searchResult` data.\n// This is because we only want to show 10 NFTs per page.\nconst loadPage = () => {\n  setPageResult(searchResult?.slice((page - 1) * 10, page * 10));\n};\n\n// 1️⃣\n// When the `searchResult` state is updated with the data from getNFTs endpoint,\n// this useEffect will be triggered and it invokes the `loadPage` function.\nuseEffect(() => {\n  loadPage();\n}, [searchResult, page]);\n\nreturn (\n  //...\n  // 3️⃣\n  // Whenever the `pageResult` state is updated this part of the UI is\n  // re-rendered with the NFT data from the `pageResult`.\n  <VStack\n    w={\"full\"}\n    h={\"650\"}\n    scrollBehavior={\"auto\"}\n    borderWidth={\"thin\"}\n    boxShadow={\"inherit\"}\n    padding={\"1\"}\n  >\n    {pageResult?.length > 0 ? (\n      <Grid templateColumns=\"repeat(5, 1fr)\" gap={6} overflow=\"auto\">\n        {pageResult?.map((e, i) => {\n          // 4️⃣\n          // `NFTCard` component is responsible for fetching the NFT metadata.\n          // Refer next step for more details.\n          return <NFTCard key={i} nftAddress={e.mint} filterQuery={query} />;\n        })}\n      </Grid>\n    ) : (\n      <Center height={500} color=\"GrayText\">\n        <i>No Data</i>\n      </Center>\n    )}\n  </VStack>\n\n  //...\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Sushiswap V2 Pair Address using Python\nDESCRIPTION: Python implementation for retrieving a Sushiswap V2 pair address using Moralis DeFi API. Requires Moralis API key and token addresses for both tokens in the pair. Returns pair address and token details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"exchange\": \"sushiswapv2\",\n    # token 0 address, e.g. WETH token address\n    \"token0_address\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    # token 1 address, e.g. LINK token address\n    \"token1_address\": \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.defi.get_pair_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Method with Argument Handling and Async Call in C#\nDESCRIPTION: Implements the `Main` method to handle command-line arguments (address and chain ID), perform basic validation, configure the Moralis client connection data using an API key, and asynchronously execute the `DisplayCryptoData` function within a `Task.Run` block, waiting for its completion.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n        static void Main(string[] args)\n        {\n            if (args.Length < 2)\n            {\n                Console.Write(\"Usage: ConsoleDemo.exe ADDRESS CLIENT_ID\");\n                return;\n            }\n\n            string address = args[0];\n            int chainId = 1;\n\n            if (!int.TryParse(args[1], out chainId))\n            {\n                Console.Error.WriteLine(\"CHAIN_ID must be a number.\");\n            }\n\n            // Setup Moralis\n            MoralisClient.ConnectionData = new Moralis.Models.ServerConnectionData()\n            {\n                ApiKey = \"YOUR MORALIS WEB3API KEY\"\n            };\n            \n            Task.Run(async () =>\n            {\n                await DisplayCryptoData(address, (ChainList)chainId);\n            }).Wait();\n        }\n```\n```\n\n----------------------------------------\n\nTITLE: Reading Moralis API Key in JavaScript using dotenv\nDESCRIPTION: Demonstrates how to use the 'dotenv' package in a JavaScript file (index.js) to load environment variables from a '.env' file and access the Moralis API key stored in `process.env.MORALIS_API_KEY`. Requires 'dotenv' package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst dotenv = require(\"dotenv\");\n\n// inject environment variables\ndotenv.config();\n\nconst apiKey: string = process.env.MORALIS_API_KEY;\n```\n\n----------------------------------------\n\nTITLE: Advanced Filter Configuration for WebUI Stream Setup\nDESCRIPTION: JSON configuration for setting up advanced filtering options in the Moralis WebUI. Defines filters for tracking transfers with zero address and minimum amount threshold of 10000 USDC.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-monitor-for-er-c20-token-burns-or-mints.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"topic0\": \"Transfer(address,address,uint256)\",\n    \"filter\": {\n      \"or\": [\n        {\n          \"and\": [\n            { \"eq\": [\"sender\", \"0x00000...00000\"] },\n            { \"gte\": [\"amount\", \"10000000000\"] }\n          ]\n        },\n        {\n          \"and\": [\n            { \"eq\": [\"receiver\", \"0x00000...00000\"] },\n            { \"gte\": [\"amount\", \"10000000000\"] }\n          ]\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Pancakeswap V1 Pair Address Using Moralis SDK (TypeScript)\nDESCRIPTION: Demonstrates how to use the Moralis TypeScript SDK to obtain the pair address for two tokens on Pancakeswap V1, on the Binance Smart Chain. Requires installation of 'moralis' and '@moralisweb3/common-evm-utils', and TypeScript configuration; also needs a valid Moralis API key. Receives token addresses and chain as parameters, initializes Moralis, and calls the 'getPairAddress' DeFi API endpoint, returning detailed token and pair address info as JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.BSC;\n\n  // token 0 address, e.g. WBNB token address\n  const token0Address = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"pancakeswapv1\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Transactions with ethers.js\nDESCRIPTION: JavaScript implementation using ethers.js to fetch wallet transactions via Moralis RPC node.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-wallet-transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Load environment variables from the .env file\nrequire(\"dotenv\").config();\n\n// Import ethers.js\nconst { ethers } = require(\"ethers\");\n\nasync function getWalletTransactions() {\n  // Initialize the provider using the Moralis RPC URL from the .env file\n  const provider = new ethers.providers.JsonRpcProvider(\n    process.env.MORALIS_NODE_URL\n  );\n\n  // Send the eth_getTransactions request with the wallet address\n  const response = await provider.send(\"eth_getTransactions\", [\n    {\n      address: \"0xE6D5514b8De7ef9e5F5c4cc2E8cA0207129DEB65\", // Replace with the wallet address to query\n    },\n  ]);\n\n  // Log the transaction details to the console\n  console.log(response);\n}\n\n// Call the function to fetch wallet transactions\ngetWalletTransactions();\n```\n\n----------------------------------------\n\nTITLE: Defining Event ABI for Ethereum Contract Stream - JSON\nDESCRIPTION: This snippet provides the ABI (Application Binary Interface) for the ERC-20 Transfer event, enabling Moralis to listen for USDC transfer events. It is required to configure the stream for monitoring contract activity related to USDC. The ABI includes indexed parameters for filtering by sender and recipient addresses as well as the value transferred.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/filter-streams.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Resolving ENS Address (JavaScript/JSX)\nDESCRIPTION: This snippet renders the ApiReference component with props sourced from the resolveAddress configuration object. It displays endpoint-specific documentation for resolving ENS domains by Ethereum address, relying on correct configuration from the imported JSON and the React environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-address.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.resolve.resolveAddress} />\n```\n\n----------------------------------------\n\nTITLE: SPL NFT Balance API JSON Response Example\nDESCRIPTION: This JSON snippet represents an example response from the Moralis Solana getNFTs API call. Each object in the array corresponds to an SPL NFT, including the associated token address and the mint. The values provided are for demonstration and may differ on actual API queries. Useful for understanding the structure and mapping outputs in application logic.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/nft-api/how-to-get-spl-nft-balance-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"associatedTokenAddress\": \"AUmHKB9srYgzHW2E5NuEWyG9wp5g4Cbewxurr1geV1iR\",\n    \"mint\": \"53kauHy6PJx9iykDV9BxpCBbXe2yPwA5tRcKcNDmfCxn\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs Backend API Route (JavaScript)\nDESCRIPTION: This Node.js backend API route (from `pages/api/SolApi/account/getNFTs.js`) handles requests to fetch NFTs for a given Solana wallet address. It uses the Moralis SDK, initializes it with the API key, and calls `Moralis.SolApi.account.getNFTs` with the provided network and address. It returns the fetched NFT data or an error.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// This is the code for backend API route using which\n// we fetch the wallet NFTs in `nftSearch` function.\n\n// Refer below code in `pages/api/SolApi/account/getNFTs.js`\n\n// 5️⃣\n// This API route uses `getNFTs` function from Moralis sdk to get the NFTs and\n// send the response to frontend\nimport Moralis from 'moralis';\n\nexport default async function handler(req, res) {\n  const { address, network } = req.body;\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const data = await Moralis.SolApi.account.getNFTs({\n      network,\n      address,\n    });\n    res.status(200).json(data);\n  } catch (error) {\n    res.status(400).json(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying eth_getUncleByBlockHashAndIndex Response - JSON\nDESCRIPTION: Shows a sample JSON-RPC response for eth_getUncleByBlockHashAndIndex, including standard JSON-RPC fields and a 'result' object for the uncle block. The response depends on the request structure and returns data if the uncle exists, or null otherwise.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    // Uncle block object\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Balance for Wallet with Moralis Token API in Python\nDESCRIPTION: This Python snippet retrieves the balance of one or more ERC20 tokens in a given user's wallet for a specific chain, using Moralis Token API. It utilizes the moralis Python SDK, requiring an API key, wallet address, token addresses, and chain as parameters. The result is printed as a dictionary of balances for each token.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"USER_WALLET_ADDRESS\",\n    \"token_addresses\": [\"ERC20_TOKEN_ADDRESS\"],\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.token.get_wallet_token_balances(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Token Holders via Moralis API\nDESCRIPTION: Fetches the list of current holders for a specific ERC20 token using the Moralis Deep Index API v2.2. Requires the `:token_address` path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/erc20/:token_address/owners\n```\n\n----------------------------------------\n\nTITLE: Adding Server-Side Authentication Check with `getServerSideProps` in NextJS\nDESCRIPTION: This snippet enhances the `Protected` page by adding the `getServerSideProps` function. It uses `getSession` from `next-auth/react` to check if a user is authenticated on the server side. If the user is not logged in, it redirects them to the '/signin' page. A placeholder message indicating NFT ownership status is passed as a prop (the actual check is added later). Requires `next-auth/react` and `moralis` dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/nft-gating-nextjs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSession } from 'next-auth/react';\nimport Moralis from 'moralis';\n\nfunction Protected({ message }) {\n    return (\n        <div>\n            <h3>Protected content</h3>\n            <p>{message}</p>\n        </div>\n    );\n}\n\nexport async function getServerSideProps(context) {\n    const session = await getSession(context);\n\n    if (!session) {\n        return {\n            redirect: {\n                destination: '/signin',\n                permanent: false,\n            },\n        };\n    }\n\n\n    return {\n        props: {\n            message:\n                // if user has at least one NFT he will get congrats message\n                nftList.raw.total > 0 ? 'Nice! You have our NFT' : \"Sorry, you don't have our NFT\",\n        },\n    };\n}\nexport default Protected;\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for NFT Contract Sale Prices - JavaScript/TSX\nDESCRIPTION: Renders the ApiReference component, passing the specific configuration for the 'getNFTContractSalePrices' endpoint from the loaded JSON config. This drives the display of endpoint details, expected request/response structure, and relevant parameters for users querying NFT sale price data. Requires the config to have a nested property at config.nft.getNFTContractSalePrices.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-contract-sale-prices.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.nft.getNFTContractSalePrices} />\n```\n\n----------------------------------------\n\nTITLE: Handling Moralis Stream Updates on Frontend using Firebase SDK (JavaScript)\nDESCRIPTION: This JavaScript code shows how to use the Firebase Web SDK (`firestore`) in a frontend application to listen for real-time updates in a designated Moralis stream collection (`moralis/txs/{collectionName}`). The `onSnapshot` listener activates the `doSomeOperation` function whenever modifications occur in the collection, providing the updated documents.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/integrations/firebase.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = firebase.firestore();\nconst collectionName = \"LoremIpsum\";\n\ndb.collection(`moralis/txs/${collectionName}`).onSnapshot((change) => {\n  doSomeOperation(change.docs);\n});\n```\n\n----------------------------------------\n\nTITLE: Approving ERC-20 Token Allowance for Contract - Ethers.js - JavaScript\nDESCRIPTION: Calls the 'approve' function on the aUSDC ERC-20 token contract, granting the GMPDistribution contract permission to transfer up to '1234567895' tokens on behalf of the connected wallet. Requires the ERC-20 contract interface to be set up as 'aUSDCToken' and the GMPDistribution contract address available as 'gmpDistribution.address'. The allowance must be set before invoking functions that transfer tokens from the wallet.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait aUSDCToken.approve(gmpDistribution.address, \"1234567895\");\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Moralis getNFTMetadata API\nDESCRIPTION: This JSON snippet shows the expected response format from the Moralis getNFTMetadata API. It includes token details such as address, ID, owner, contract information, and the NFT's metadata including images, attributes, and description.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/02-NFT Metadata/how-to-get-the-metadata-of-an-nft.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n  \"token_id\": \"3931\",\n  \"transfer_index\": [13868997, 30, 36, 0],\n  \"owner_of\": \"0x1cf2b8c64aed32bff2ae80e701681316d3212afd\",\n  \"block_number\": \"13868997\",\n  \"block_number_minted\": \"5754322\",\n  \"token_hash\": \"3c86855c82470edd82df190019e83f16\",\n  \"amount\": \"1\",\n  \"contract_type\": null,\n  \"name\": \"CRYPTOPUNKS\",\n  \"symbol\": \"Ͼ\",\n  \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/3931\",\n  \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk3931.webp\\\",\\\"name\\\":\\\"CryptoPunk 3931\\\",\\\"attributes\\\":[\\\"Vampire Hair\\\",\\\"Goat\\\"],\\\"description\\\":\\\"Male\\\"}\",\n  \"last_token_uri_sync\": null,\n  \"last_metadata_sync\": \"2022-05-12T18:00:22.340Z\",\n  \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WalletConnect Authentication in NextJS with Moralis\nDESCRIPTION: This code snippet demonstrates how to set up WalletConnect authentication in a NextJS application using Moralis. It includes the necessary imports, connector configuration, and authentication flow implementation. The code handles connecting to WalletConnect, requesting a challenge, signing the message, and authenticating with Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-walletconnect.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WalletConnectConnector } from \"wagmi/connectors/walletConnect\";\nimport { signIn } from \"next-auth/react\";\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { useRouter } from \"next/router\";\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\n\nfunction SignIn() {\n  const { connectAsync } = useConnect({\n    connector: new WalletConnectConnector({\n      options: { projectId: \"xxx\", showQrModal: true },\n    }),\n  });\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\n  const { push } = useRouter();\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n\n    const { account, chain } = await connectAsync();\n\n    const { message } = await requestChallengeAsync({\n      address: account,\n      chainId: chain.id,\n    });\n\n    const signature = await signMessageAsync({ message });\n\n    // redirect user after success authentication to '/user' page\n    const { url } = await signIn(\"moralis-auth\", {\n      message,\n      signature,\n      redirect: false,\n      callbackUrl: \"/user\",\n    });\n    /**\n     * instead of using signIn(..., redirect: \"/user\")\n     * we get the url from callback and push it to the router to avoid page refreshing\n     */\n    push(url);\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={handleAuth}>Authenticate via WalletConnect</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Testing Telegram Bot Webhook with ngrok and npm - Shell\nDESCRIPTION: This shell snippet demonstrates the sequence to start a local development Express server on port 5001 using ngrok for public webhook exposure, followed by running the Node.js backend server using npm. This workflow is essential for testing webhook integrations with external services such as Telegram and Moralis. Dependencies are ngrok and npm; port 5001 must be available and backend start scripts configured in package.json.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nngrok http 5001\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregated Token Pair Statistics via Moralis API\nDESCRIPTION: Fetches aggregated statistics for all pairs involving a specific token address using the Moralis Deep Index API v2.2. Requires the `:token_address` path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:token_address/pairs/stats\n```\n\n----------------------------------------\n\nTITLE: Creating Server Endpoint for Requesting Authentication Message (Node.js)\nDESCRIPTION: Defines a POST endpoint `/request-message` in the Node.js/Express server (`index.js`). This endpoint receives the user's address, chain, and network from the request body. It then uses `Moralis.Auth.requestMessage` to generate a unique message for the user to sign, configured with domain, statement, URI, and timeout. The generated message is sent back to the client.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// to use our .env variables\nrequire(\"dotenv\").config();\n\n// for our server's method of setting a user session\nconst cookieParser = require(\"cookie-parser\");\nconst jwt = require(\"jsonwebtoken\");\n\nconst config = {\n  domain: process.env.APP_DOMAIN,\n  statement: \"Please sign this message to confirm your identity.\",\n  uri: process.env.ANGULAR_URL,\n  timeout: 60,\n};\n\napp.post(\"/request-message\", async (req, res) => {\n  const { address, chain, network } = req.body;\n\n  try {\n    const message = await Moralis.Auth.requestMessage({\n      address,\n      chain,\n      network,\n      ...config,\n    });\n\n    res.status(200).json(message);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for NextJS DApp\nDESCRIPTION: Configuration of environment variables for Moralis API key and NextAuth URL in a .env.local file\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMORALIS_API_KEY = \"<your API key here>\"\nNEXTAUTH_URL='http://localhost:3000'\n```\n\n----------------------------------------\n\nTITLE: Displaying Authenticated User Profile Information (TypeScript/JavaScript & React)\nDESCRIPTION: This React component uses NextAuth's session hook to display authenticated user profile data, including profile ID, account address (copyable), network, and expiration time. It lays out the details in styled cells and expects styles from a User.module.css file. This component depends on a user session being present and should be protected or used inside authenticated views only. Outputs a styled user data panel and assumes session.user contains the appropriate fields.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// File path\n// app/components/logoutBtn/userData.js\n\nimport React from \\\"react\\\";\nimport styles from \\\"../../../styles/User.module.css\\\";\nimport { Typography } from \\\"@web3uikit/core\\\";\nimport { useSession } from \\\"next-auth/react\\\";\n\nexport default function UserData() {\n  const { data: session, status } = useSession();\n\n  if (session) {\n    return (\n      <div className={styles.data}>\n        <div className={styles.dataCell}>\n          <Typography variant=\\\"subtitle2\\\">Profile Id:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\\\"body16\\\">{session?.user.profileId}</Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\\\"subtitle2\\\">Account:</Typography>\n          <div className={styles.address}>\n            {/* account address */}\n            <Typography copyable variant=\\\"body16\\\">\n              {session?.user.address}\n            </Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\\\"subtitle2\\\">Network:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\\\"body16\\\">{session?.user.network}</Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\\\"subtitle2\\\">ExpTime:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\\\"body16\\\">\n              {session?.user.expirationTime}\n            </Typography>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Unified Transaction Stream with Events - Moralis Streams - JSON\nDESCRIPTION: This JSON snippet provides an example of a webhook payload containing both native transactions and various blockchain events (logs, ERC20 approvals, etc.) as emitted by Moralis Streams when contract interaction logging is enabled. It includes arrays for logs and various event types, alongside full transaction data. Useful for integrating both value and contract interaction tracking. Dependencies: requires setup of streams with relevant event types. Inputs/outputs are JSON-structured as shown.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/response-body.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": true,\n  \"chainId\": \"0x1\",\n  \"abi\": [],\n  \"streamId\": \"c28d9e2e-ae9d-4fe6-9fc0-5fcde2dcdd17\",\n  \"tag\": \"native_transactions_with_logs\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"15988780\",\n    \"hash\": \"0xf40d623518fa16c20614278656e426721820031913fd9c670330d4b2b751d50e\",\n    \"timestamp\": \"1668676499\"\n  },\n  \"logs\": [\n    {\n      \"logIndex\": \"135\",\n      \"transactionHash\": \"0x59cd370a41c699bdb77a020b3a27735bb7442ace68ec8313040b8b9ee2672244\",\n      \"address\": \"0x96beaa1316f85fd679ec49e5a63dacc293b044be\",\n      \"data\": \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n      \"topic0\": \"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\",\n      \"topic1\": \"0x0000000000000000000000001748789703159580520cc2ce6d1ba01e7359c44c\",\n      \"topic2\": \"0x0000000000000000000000001111111254eeb25477b68fb85ed929f73a960582\",\n      \"topic3\": null\n    }\n  ],\n  \"txs\": [\n    {\n      \"hash\": \"0x0bd4d05cfee0107ac69f7add8e21d66c3e4fd014b7aad595d6336910a6bfee39\",\n      \"gas\": \"109803\",\n      \"gasPrice\": \"13481860832\",\n      \"nonce\": \"291\",\n      \"input\": \"0x12aa3caf00000000000000000000000053222470cdcfb8081c0e3a50fd106f0d69e63f20000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000053222470cdcfb8081c0e3a50fd106f0d69e63f200000000000000000000000003ec92c9d09403a76bda445ffdfaf6de59717219f00000000000000000000000000000000000000000000000e56d1e2316582742700000000000000000000000000000000000000000000000e53262757bf439a6f0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000006200003c4121c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000e0201111111254eeb25477b68fb85ed929f73a960582000000000000000e56d1e23165827427e26b9977\",\n      \"transactionIndex\": \"92\",\n      \"fromAddress\": \"0x3ec92c9d09403a76bda445ffdfaf6de59717219f\",\n      \"toAddress\": \"0x1111111254eeb25477b68fb85ed929f73a960582\",\n      \"value\": \"0\",\n      \"type\": \"2\",\n      \"v\": \"0\",\n      \"r\": \"5776335037912114053229884461119750189570811705028494471955321961511802532800\",\n      \"s\": \"50481622078880425443801093626517935308993319586804232237135731552994210947860\",\n      \"receiptCumulativeGasUsed\": \"7225224\",\n      \"receiptGasUsed\": \"70168\",\n      \"receiptContractAddress\": null,\n      \"receiptRoot\": null,\n      \"receiptStatus\": \"1\"\n    }\n  ],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [\n    {\n      \"transactionHash\": \"0x59cd370a41c699bdb77a020b3a27735bb7442ace68ec8313040b8b9ee2672244\",\n      \"logIndex\": \"135\",\n      \"contract\": \"0x96beaa1316f85fd679ec49e5a63dacc293b044be\",\n      \"owner\": \"0x1748789703159580520cc2ce6d1ba01e7359c44c\",\n      \"spender\": \"0x1111111254eeb25477b68fb85ed929f73a960582\",\n      \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n      \"tokenName\": \"This Is Not Alpha\",\n      \"tokenSymbol\": \"TINA\",\n      \"tokenDecimals\": \"18\",\n      \"valueWithDecimals\": \"1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+59\"\n    }\n  ],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Component Template (HTML)\nDESCRIPTION: Defines the HTML structure for the `user` component (`src/app/user/user.component.html`). It uses `*ngIf=\"session\"` to conditionally display the user's session data (pre-formatted) and a 'Sign out' button only when the `session` variable holds data. The button triggers the `signOut()` method on click.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<div *ngIf=\"session\">\n  <h3>User session:</h3>\n  <pre>{{ session }}</pre>\n  <button type=\"button\" (click)=\"signOut()\">Sign out</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Token OHLCV Candlestick Data - HTTP Endpoint\nDESCRIPTION: Returns OHLCV candlestick data for a specific Solana token trading pair. Requires the pairAddress and network as URL path parameters. Output includes open, high, low, close, and volume for charting and analysis; authentication via Moralis API key is required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/token/:network/pairs/:pairAddress/ohlcv\n```\n\n----------------------------------------\n\nTITLE: Retrieving Smart Account Transactions with Python\nDESCRIPTION: Python implementation of getWalletTransactions endpoint using Moralis SDK. Demonstrates how to fetch transaction history using Python with minimal configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/05-Transactions/how-to-get-transactions-of-smart-contract-account.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x350845DD3f03F1355233a3A7CEBC24b5aAD05eC5\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.transaction.get_wallet_transactions(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Token Information from Moralis API in Python\nDESCRIPTION: This function retrieves comprehensive details about a specific ERC-20 token on the Base blockchain using the Moralis API. It automatically determines whether to use mainnet or testnet based on the agent's current network ID and formats the response with key token metrics including price, market cap, security score, and holder statistics.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef get_token_details(token_address: str) -> str:\n    \"\"\"\n    Fetch detailed information about a specific ERC-20 token on the Base blockchain.\n    Automatically determines if the network is mainnet or testnet.\n\n    Args:\n        token_address (str): The address of the ERC-20 token.\n\n    Returns:\n        str: Information about the token or an error message if unsuccessful.\n    \"\"\"\n    # Determine the network dynamically based on the agent's current network ID\n    is_mainnet = agent_wallet.network_id in [\"base\", \"base-mainnet\"]\n    chain = \"base\" if is_mainnet else \"base sepolia\"\n\n    # API endpoint and headers\n    url = f\"https://deep-index.moralis.io/api/v2.2/discovery/token\"\n    headers = {\n        \"accept\": \"application/json\",\n        \"X-API-Key\": MORALIS_API_KEY\n    }\n    params = {\n        \"chain\": chain,\n        \"token_address\": token_address\n    }\n\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()\n        token_data = response.json()\n\n        # Format the output\n        token_info = (\n            f\"Token Name: {token_data.get('token_name')}\\n\"\n            f\"Symbol: {token_data.get('token_symbol')}\\n\"\n            f\"Price (USD): {token_data.get('price_usd')}\\n\"\n            f\"Market Cap: {token_data.get('market_cap')}\\n\"\n            f\"Security Score: {token_data.get('security_score')}\\n\"\n            f\"Token Age (days): {token_data.get('token_age_in_days')}\\n\"\n            f\"On-Chain Strength Index: {token_data.get('on_chain_strength_index')}\\n\"\n            f\"1-Day Holders Change: {token_data['holders_change'].get('1d')}\\n\"\n            f\"1-Day Volume Change (USD): {token_data['volume_change_usd'].get('1d')}\\n\"\n            f\"1-Month Price Change (%): {token_data['price_percent_change_usd'].get('1M')}\\n\"\n            f\"Logo: {token_data.get('token_logo')}\\n\"\n        )\n        return token_info\n\n    except requests.exceptions.RequestException as e:\n        return f\"Error fetching token details: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Web3Data API Support Table with React/JSX\nDESCRIPTION: This React/JSX code dynamically generates an HTML table displaying the support status of various Moralis Web3Data APIs for different EVM-compatible blockchain protocols. It filters an imported `chainData` array to include only chains with supported EVM APIs (`chain.evmApi.supported`). It then maps over this filtered array, creating a table row (`<tr>`) for each chain. Each row displays the chain's logo and name, followed by columns representing different API categories (Wallet, NFT, Token, DeFi, etc.). Conditional rendering logic using ternary operators checks boolean flags within the `chain.evmApi` object (e.g., `chain.evmApi.walletApi`) to display either a `SupportedIcon` or an `UnsupportedIcon` component for each API type, indicating its availability for that specific chain. Requires `chainData`, `SupportedIcon`, and `UnsupportedIcon` to be imported and available in the scope.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/supported-chains.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"supported-web3data-apis-table\">\n  <table>\n    <thead>\n      <tr>\n        <th className=\"protocol-column\">Protocol</th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>Wallet</span>\n            <span>API</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>NFT</span>\n            <span>API</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>Token</span>\n            <span>API</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>DeFi</span>\n            <span>API</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>Entity</span>\n            <span>API</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>Blockchain</span>\n            <span>API</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>Profitability</span>\n            <span>API</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>Token</span>\n            <span>Prices</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>NFT</span>\n            <span>Trades</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>NFT Trade</span>\n            <span>Prices</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>NFT Floor</span>\n            <span>Prices</span>\n          </div>\n        </th>\n        <th>\n          <div className=\"stacked-header\">\n            <span>Internal</span>\n            <span>Transactions</span>\n          </div>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {chainData\n        .filter((chain) => chain.evmApi.supported)\n        .map((chain, index) => (\n          <tr key={index}>\n            <td>\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                <img\n                  src={chain.logo}\n                  alt={`${chain.name} logo`}\n                  style={{ width: \"20px\", height: \"20px\", marginRight: \"8px\" }}\n                />\n                {chain.name}\n              </div>\n            </td>\n            <td>\n              {chain.evmApi.walletApi ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"Wallet API not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.nftApi ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"NFT API not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.tokenApi ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"Token API not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.defiApi ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"DeFi API not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.entityApi ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"Entity API not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.blockchainApi ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"Blockchain API not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.pnlApi ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"Profitability API not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.tokenPrices ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"Token Prices not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.nftTrades ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"NFT Trades not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.nftPrices ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"NFT Trade Prices not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.nftFloorPrices ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"NFT Floor Prices not supported\" />\n              )}\n            </td>\n            <td>\n              {chain.evmApi.internalTxs ? (\n                <SupportedIcon />\n              ) : (\n                <UnsupportedIcon reason=\"Internal transactions not supported\" />\n              )}\n            </td>\n          </tr>\n        ))}\n    </tbody>\n  </table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Managing Paginated NFT Lists and Navigation in React (TypeScript)\nDESCRIPTION: This snippet implements client-side pagination for a list of NFTs using React hooks. useState stores the current page and the NFT subset (pageResult), while useEffect ensures that data updates dynamically as the page or NFT collection (searchResult) changes. prevPage and nextPage facilitate navigation via buttons, and loadPage slices the main result set to display only 10 records per page. Component UI includes inputs and buttons for navigation, and paginated NFT results are rendered in a grid. Requires dependencies: React, stateful logic (useState, useEffect), and UI components such as Button, Input, Grid, and Center.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `pages/index.jsx`\n\n// State variable to store the page result and page number data.\nconst [pageResult, setPageResult] = useState([]);\nconst [page, setPage] = useState(1);\n\nconst prevPage = () => {\n  setPageResult([]);\n  if (page !== 1) {\n    setPage(page - 1);\n  }\n};\n\n// 2\\u20e3\n// Next page function updates the page state with next page number.\nconst nextPage = () => {\n  setPageResult([]);\n  if (page < Math.ceil(searchResult.length / 10)) {\n    setPage(page + 1);\n  }\n};\n\n// 4\\u20e3\n// loadPage function updates the data in page result state with next 10 NFT data.\nconst loadPage = () => {\n  setPageResult(searchResult?.slice((page - 1) * 10, page * 10));\n};\n\n// 3\\u20e3\n// Change in page number triggers the useState and invokes the `loadPage` function\nuseEffect(() => {\n  loadPage();\n}, [searchResult, page]);\n\nreturn (\n  //...\n  // 6\\u20e3\n  // The same process is repeated when we click on the previous page button.\n    <Button colorScheme=\"teal\" variant=\"ghost\" onClick={prevPage} disabled={page === 1}>\n      <ArrowLeftIcon />\n    </Button>\n    <Input\n      textAlign={'right'}\n      placeholder={page}\n      htmlSize={2}\n      width=\"auto\"\n      onInput={pageInputHandler}\n      variant=\"flushed\"\n      value={page}\n    />\n    /{searchResult && Math.ceil(searchResult.length / 10)}\n    // 1\\u20e3\n    // Clicking on the next page button calls the `nextPage` function\n    <Button\n      colorScheme=\"teal\"\n      variant=\"ghost\"\n      onClick={nextPage}\n      disabled={page >= Math.ceil(searchResult.length / 10)}\n    >\n      <ArrowRightIcon />\n    </Button>\n  //...\n\n  //...\n  // 5\\u20e3\n  // Whenever the `pageResult` state is update this part of the UI is\n  // re-rendered with the NFT data from the `pageResult`.\n  <VStack w={'full'} h={'650'} scrollBehavior={'auto'} borderWidth={'thin'} boxShadow={'inherit'} padding={'1'}>\n    {pageResult?.length > 0 ? (\n      <Grid templateColumns=\"repeat(5, 1fr)\" gap={6} overflow=\"auto\">\n        {pageResult?.map((e, i) => {\n          return <NFTCard key={i} nftAddress={e.mint} filterQuery={query} />;\n        })}\n      </Grid>\n    ) : (\n      <Center height={500} color=\"GrayText\">\n        <i>No Data</i>\n      </Center>\n    )}\n  </VStack>\n\n  //...\n);\n```\n\n----------------------------------------\n\nTITLE: Example Output of ERC20 Transfer Trigger with Named Output - JavaScript\nDESCRIPTION: An illustrative JavaScript variable showing an array of ERC20 transfer results with detailed trigger output, including a trigger named 'fromBalance'. Shows expected structure of the response when ABI outputs are named accordingly. No dependencies; represents a sample output for developers to anticipate integration with Moralis Streams webhooks.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst erc20Transfers: [\n  {\n    transactionHash: \"0xf0c7542c73e2d26cc0b249da63426643263463463646345\",\n    logIndex: \"0\",\n    contract: \"0x34b6a28edbbaf0c7542c73e2d26cc0b249da69a6\",\n    from: \"0xbb6a28edbbaf0c7542c73212d26cc0b249da47a5\",\n    to: \"0xbdc7237c3b3bfcfeca7ed8108d01854589c91d65\",\n    value: \"100000000000000000\",\n    tokenName: \"Moralis\",\n    tokenSymbol: \"MOR\",\n    tokenDecimals: \"18\",\n    valueWithDecimals: \"0.1\",\n    triggers: [\n      { name: \"fromBalance\", value: \"200000000000000000\" },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Token Transfer History - JavaScript\nDESCRIPTION: Defines the '/tokenTransfers' GET endpoint to fetch a user's ERC20 token transfer history on a given chain and address, augmenting each transfer with token symbol and decimals via metadata lookup. Uses Moralis.EvmApi. Expects 'address' and 'chain' as query params. Returns an array of transfers with enriched metadata. Logs errors but continues processing. Limitations: sequential metadata calls may be slow for large histories.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n//GET USERS TOKEN TRANSFERS\n\napp.get(\"/tokenTransfers\", async (req, res) => {\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const { address, chain } = req.query;\n\n    const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n      address: address,\n      chain: chain,\n    });\n    \n    const userTrans = response.data.result;\n\n    let userTransDetails = [];\n    \n    for (let i = 0; i < userTrans.length; i++) {\n      \n      try {\n        const metaResponse = await Moralis.EvmApi.token.getTokenMetadata({\n          addresses: [userTrans[i].address],\n          chain: chain,\n        });\n        if (metaResponse.data) {\n          userTrans[i].decimals = metaResponse.data[0].decimals;\n          userTrans[i].symbol = metaResponse.data[0].symbol;\n          userTransDetails.push(userTrans[i]);\n        } else {\n          console.log(\"no details for coin\");\n        }\n      } catch (e) {\n        console.log(e);\n      }\n\n    }\n\n\n\n    res.send(userTransDetails);\n  } catch (e) {\n    res.send(e);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for User Session Management - TypeScript\nDESCRIPTION: This snippet imports Router, axios, and environment configuration for use in the user components of the Angular app. These imports are critical for session management, including verification, display, and logout processes. There are no outputs; this snippet is a prerequisite for subsequent functions that manipulate session state and routing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Router } from \\\"@angular/router\\\";\\n\\nimport axios from \\\"axios\\\";\\n\\nimport { environment } from \\\"../../environments/environment\\\";\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Balance for Wallet with Moralis Token API in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates retrieving the balance of a specific ERC20 token for a user's wallet by address using the Moralis Token API. It accepts an API key, wallet address, an array of token contract addresses, and the chain information. Results include token balance and are logged in raw format. Ensure proper handling of sensitive information in production.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const tokenAddresses = [\"ERC20_TOKEN_ADDRESS\"];\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    chain,\n    tokenAddresses,\n    address,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Internal Transactions\nDESCRIPTION: This JSON snippet shows an example response from the Moralis API when fetching internal transactions by hash. The response is an array of objects, where each object represents an internal transaction and contains details like `transaction_hash`, `block_number`, `type`, `from` and `to` addresses, `value`, `gas`, `gas_used`, `input`, and `output`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-internal-transactions-by-hash.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\n  {\n    \"transaction_hash\": \"0xae5f9a43f424624376ea7479ce7b0ab25e9eba11f1c4791ec4e68f0206b5e071\",\n    \"block_number\": 16768916,\n    \"block_hash\": \"0xc4d8920e33578f4f0d0341738e5fb1d744b0d6bfdc78fc24ce4d4cb593011959\",\n    \"type\": \"STATICCALL\",\n    \"from\": \"0x7becef300c5873ba138d29e0d5e5bf2db1d5e983\",\n    \"to\": \"0x0000000000000000000000000000000000000001\",\n    \"value\": \"0\",\n    \"gas\": \"36019\",\n    \"gas_used\": \"3000\",\n    \"input\": \"0x5ac2dc77eb0e3a92a62f7fd96f9bd6aaa8a2d4b5755300687d252fe3ed94a842000000000000000000000000000000000000000000000000000000000000001beee44e8fea3feec053e41bb2e1300f960f5fccb46e0592fa81ad2e778725b84c4237c475a8354bfa465d1a72e59fb4ea88943d10d6d35bc24f3a55627fb0c325\",\n    \"output\": \"0x00000000000000000000000003ce74eb2e0e1f4ef6b079fe54112f52bfa34be6\"\n  },\n  {\n    \"transaction_hash\": \"0xae5f9a43f424624376ea7479ce7b0ab25e9eba11f1c4791ec4e68f0206b5e071\",\n    \"block_number\": 16768916,\n    \"block_hash\": \"0xc4d8920e33578f4f0d0341738e5fb1d744b0d6bfdc78fc24ce4d4cb593011959\",\n    \"type\": \"STATICCALL\",\n    \"from\": \"0x7becef300c5873ba138d29e0d5e5bf2db1d5e983\",\n    \"to\": \"0x0000000000000000000000000000000000000001\",\n    \"value\": \"0\",\n    \"gas\": \"32177\",\n    \"gas_used\": \"3000\",\n    \"input\": \"0x5ac2dc77eb0e3a92a62f7fd96f9bd6aaa8a2d4b5755300687d252fe3ed94a842000000000000000000000000000000000000000000000000000000000000001b6281037b7de24db835d162860a4f7ba9517ff4ded3372f253713d690c3cea2f124e3ad1299ef0f7d4899ac2d9e5f074592f093fbcd6f7d567e7cf25d820b3ade\",\n    \"output\": \"0x000000000000000000000000c9e9d6ce434c4c853ccc65bf705801e2d051ba15\"\n  }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Page Title in Documentation - HTML\nDESCRIPTION: This snippet adds a head element with a custom title to the documentation page, which improves SEO and ensures that the browser displays an appropriate title tab. There are no dependencies, but it should be placed in a context that supports raw HTML blocks in documentation (such as MDX). The main parameter is the <title> tag's content, and the output is the browser tab/document title.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getTransactionByBlockHashAndIndex.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <title>eth_getTransactionByBlockHashAndIndex RPC Method - Moralis Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ethereum Block Data with Moralis Block API\nDESCRIPTION: This JSON object contains detailed information about an Ethereum block, including transaction details, receipt information, and event logs. It demonstrates the structure and depth of data available through the Moralis Block API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-content-by-block-number.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"0x0559064f1d2a665fd8e69eccf9d81c8276d77bfab4dd256e761fd74aa49d33c2\",\n  \"number\": \"15863321\",\n  \"timestamp\": \"2022-10-30T20:39:11.000Z\",\n  \"from_address\": \"0x23d7013e59e2bc06e29fef6168c7aa4005f30e1f\",\n  \"to_address\": null,\n  \"value\": \"0\",\n  \"gas\": \"4528426\",\n  \"gas_price\": \"12000000000\",\n  \"input\": \"0x60806040...\",\n  \"receipt_cumulative_gas_used\": \"6580599\",\n  \"receipt_gas_used\": \"4528426\",\n  \"receipt_contract_address\": \"0x60bb1e2aa1c9acafb4d34f71585d7e959f387769\",\n  \"receipt_root\": null,\n  \"receipt_status\": \"1\",\n  \"block_timestamp\": \"2022-10-30T20:39:11.000Z\",\n  \"block_number\": \"15863321\",\n  \"block_hash\": \"0x4f5d3bb78f0311301ef282b281d23e178ced236a7ae465820fe6edeba609954a\",\n  \"transfer_index\": [15863321, 22],\n  \"logs\": [\n    {\n      \"log_index\": \"52\",\n      \"transaction_hash\": \"0x0559064f1d2a665fd8e69eccf9d81c8276d77bfab4dd256e761fd74aa49d33c2\",\n      \"transaction_index\": \"22\",\n      \"address\": \"0x60bb1e2aa1c9acafb4d34f71585d7e959f387769\",\n      \"data\": \"0x\",\n      \"topic0\": \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\",\n      \"topic1\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n      \"topic2\": \"0x00000000000000000000000023d7013e59e2bc06e29fef6168c7aa4005f30e1f\",\n      \"topic3\": null,\n      \"block_timestamp\": \"2022-10-30T20:39:11.000Z\",\n      \"block_number\": \"15863321\",\n      \"block_hash\": \"0x4f5d3bb78f0311301ef282b281d23e178ced236a7ae465820fe6edeba609954a\",\n      \"transfer_index\": [15863321, 22, 52],\n      \"transaction_value\": \"0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Cross-Chain Gas Fees using Axelar SDK in React\nDESCRIPTION: This code snippet shows how to estimate the gas fee required for a cross-chain operation within a React component (`DeployTokenRemotely`). It utilizes the Axelar JS SDK's `AxelarQueryAPI` to call the `estimateGasFee` method with parameters like source chain, destination chain, gas token, and estimated gas limit. The estimated fee is stored in the `gasAmount` state variable.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst DeployTokenRemotely = () = >{\n  //...\n  const api: AxelarQueryAPI = new AxelarQueryAPI({\n    environment: Environment.TESTNET\n  });\n  const[gasAmount, setGasAmount] = useState < number > (0);\n  // Estimate Gas\n  const gasEstimator = async() = >{\n    try {\n      const gas = await api.estimateGasFee(sourceChain, destinationChain, GasToken.FTM, 700000, 2);\n      setGasAmount(Number(gas));\n    } catch(error) {\n      console.error('Error estimating gas fee: ', error);\n    }\n  };\n  return (\n  //..\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component - TypeScript/JSX\nDESCRIPTION: This snippet imports the ApiBanner component, which provides a visual banner for API documentation pages. It is a TypeScript and JSX component sourced from the components directory. The banner helps standardize branding and notification sections across documentation pages and relies on TypeScript/React as a runtime.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-historical-floor-price-by-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Magic.Link Connector in NextJS Component\nDESCRIPTION: Configures and implements the Magic.Link authentication flow within a NextJS sign-in page component (`pages/signin.jsx`). It utilizes the '@everipedia/wagmi-magic-connector' along with WAGMI hooks (`useConnect`, `useSignMessage`, etc.), Moralis' `useAuthRequestChallengeEvm` for challenge requests, and `next-auth/react` for session management. The `handleAuth` function orchestrates the connection, challenge signing, and authentication process, redirecting the user upon successful login.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-magiclink.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MagicAuthConnector } from \"@everipedia/wagmi-magic-connector\";\nimport { signIn } from \"next-auth/react\";\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { useRouter } from \"next/router\";\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\n\nfunction SignIn() {\n  const { connectAsync } = useConnect({\n    connector: new MagicAuthConnector({\n      options: {\n        apiKey: \"YOUR_MAGIC_LINK_API_KEY\", //required\n      },\n    }),\n  });\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\n  const { push } = useRouter();\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n\n    const { account } = await connectAsync();\n\n    const { message } = await requestChallengeAsync({\n      address: account,\n      chainId: \"0x1\",\n    });\n\n    const signature = await signMessageAsync({ message });\n\n    // redirect user after success authentication to '/user' page\n    const { url } = await signIn(\"moralis-auth\", {\n      message,\n      signature,\n      redirect: false,\n      callbackUrl: \"/user\",\n    });\n    /**\n     * instead of using signIn(..., redirect: \"/user\")\n     * we get the url from callback and push it to the router to avoid page refreshing\n     */\n    push(url);\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={() => handleAuth()}>Authenticate via Magic.Link</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Displaying NFT Owner API Response Structure - JSON\nDESCRIPTION: This snippet shows a sample JSON response representing an NFT with its properties as returned by the Moralis NFT API, such as token hash, contract type, name, symbol, token URI, and sync timestamps. No dependencies are required to read this data, but to produce it, the Moralis Web3 or NFT API service must be called. Key fields include unique identifiers for the token and its on-chain metadata, expected as outputs from the API endpoint for retrieving NFT owners.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hash\": \"31e44730d35dcd4512aaf7992a78512d\",\n  \"amount\": \"1\",\n  \"contract_type\": \"ERC721\",\n  \"name\": \"Autoglyphs\",\n  \"symbol\": \"\\u2685\",\n  \"token_uri\": \"data:text/plain;charset=utf-8,.........................||||-||||-||||.........................%0A.O-.....-...|.....|...O.-...O.-..-.O...-.O...|.....|...-.....-O.%0A.-.|-O|.O.....-.|..........-.O....O.-..........|.-.....O.|O-|.-.%0A..|....O..O...|.-..|..O...-....||....-...O..|..-.|...O..O....|..%0A..-............O...|O..-O...|O....O|...O-..O|...O............-..%0A..O....O....OO..O.O...O|...O|......|O...|O...O.O..OO....O....O..%0A..|....|....-..|....|....-..O.-..-.O..-....|....|..-....|....|..%0A...O.O|.|.O...........O..-.|.|-..-|.|.-..O...........O.|.|O.O...%0A.-O....|.-...O.|....-O....|.-......-.|....O-....|.O...-.|....O-.%0A........-|O......O.........--|O..O|--.........O......O|-........%0A...O...O.O|.|-..............O.O||O.O..............-|.|O.O...O...%0A.....................O...O...O....O...O...O.....................%0A.|...O-...|.|...O-...|.-...O-......-O...-.|...-O...|.|...-O...|.%0A.....O..O.-..|.........O.-..-O.||.O-..-.O.........|..-.O..O.....%0A..-|...............|O....-|-|......|-|-....O|...............|-..%0A....O.|.|........O.O.|-.......O..O.......-|.O.O........|.|.O....%0A..|-.O......O......O|......-.O|..|O.-......|O......O......O.-|..%0A.........O..-..O..-..O.........OO.........O..-..O..-..O.........%0A.|...O...........-...|..-O..|O....O|..O-..|...-...........O...|.%0A...||.........|OO.....-...O|........|O...-.....OO|.........||...%0A....O.|.-.....O.|....O.|..-....OO....-..|.O....|.O.....-.|.O....%0A........O..O|..|.O|.O|.O--.|-.|..|.-|.--O.|O.|O.|..|O..O........%0A.O.O.O.O.......-...-......|.-.|..|.-.|......-...-.......O.O.O.O.%0A....-|......-O......|O.....-|......|-.....O|......O-......|-....%0A.-..O.............-..-..|..O........O..|..-..-.............O..-.%0A|.....--...O.--...O..-...|............|...-..O...--.O...--.....|%0A|..-....|.....|....O-.|....O-......-O....|.-O....|.....|....-..|%0A|.-..O.|.-..O.-.-..|.|.-O.O.|..OO..|.O.O-.|.|..-.-.O..-.|.O..-.|%0A|O..||O.--O.--|...|..--|..-|...--...|-..|--..|...|--.O--.O||..O|%0A-.O.O..|.|.O.O..O.O..........................O.O..O.O.|.|..O.O.-%0A|-....--.OO....O|....||.......OOOO.......||....|O....OO.--....-|%0A|..|......|..|...O..O......O-.O--O.-O......O..O...|..|......|..|%0A|..|......|..|...O..O......O-.O--O.-O......O..O...|..|......|..|%0A|-....--.OO....O|....||.......OOOO.......||....|O....OO.--....-|%0A-.O.O..|.|.O.O..O.O..........................O.O..O.O.|.|..O.O.-%0A|O..||O.--O.--|...|..--|..-|...--...|-..|--..|...|--.O--.O||..O|%0A|.-..O.|.-..O.-.-..|.|.-O.O.|..OO..|.O.O-.|.|..-.-.O..-.|.O..-.|%0A|..-....|.....|....O-.|....O-......-O....|.-O....|.....|....-..|%0A|.....--...O.--...O..-...|............|...-..O...--.O...--.....|%0A.-..O.............-..-..|..O........O..|..-..-.............O..-.%0A....-|......-O......|O.....-|......|-.....O|......O-......|-....%0A.O.O.O.O.......-...-......|.-.|..|.-.|......-...-.......O.O.O.O.%0A........O..O|..|.O|.O|.O--.|-.|..|.-|.--O.|O.|O.|..|O..O........%0A....O.|.-.....O.|....O.|..-....OO....-..|.O....|.O.....-.|.O....%0A...||.........|OO.....-...O|........|O...-.....OO|.........||...%0A.|...O...........-...|..-O..|O....O|..O-..|...-...........O...|.%0A.........O..-..O..-..O.........OO.........O..-..O..-..O.........%0A..|-.O......O......O|......-.O|..|O.-......|O......O......O.-|..%0A....O.|.|........O.O.|-.......O..O.......-|.O.O........|.|.O....%0A..-|...............|O....-|-|......|-|-....O|...............|-..%0A.....O..O.-..|.........O.-..-O.||.O-..-.O.........|..-.O..O.....%0A.|...O-...|.|...O-...|.-...O-......-O...-.|...-O...|.|...-O...|.%0A.....................O...O...O....O...O...O.....................%0A...O...O.O|.|-..............O.O||O.O..............-|.|O.O...O...%0A........-|O......O.........--|O..O|--.........O......O|-........%0A.-O....|.-...O.|....-O....|.-......-.|....O-....|.O...-.|....O-.%0A...O.O|.|.O...........O..-.|.|-..-|.|.-..O...........O.|.|O.O...%0A..|....|....-..|....|....-..O.-..-.O..-....|....|..-....|....|..%0A..O....O....OO..O.O...O|...O|......|O...|O...O.O..OO....O....O..%0A..-............O...|O..-O...|O....O|...O-..O|...O............-..%0A..|....O..O...|.-..|..O...-....||....-...O..|..-.|...O..O....|..%0A.-.|-O|.O.....-.|..........-.O....O.-..........|.-.....O.|O-|.-.%0A.O-.....-...|.....|...O.-...O.-..-.O...-.O...|.....|...-.....-O.%0A.........................||||-||||-||||.........................%0A\",\n  \"metadata\": null,\n  \"last_token_uri_sync\": \"2022-08-04T16:48:39.222Z\",\n  \"last_metadata_sync\": \"2022-08-04T16:49:08.301Z\",\n  \"minter_address\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying NFT Metadata from Moralis NFT API Response in JSON\nDESCRIPTION: This JSON snippet shows the structure of NFT metadata returned by the Moralis NFT API. It includes details about an Autoglyphs NFT, such as token hash, amount, contract type, name, symbol, and a complex token URI containing ASCII art.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_hash\": \"31e44730d35dcd4512aaf7992a78512d\",\n  \"amount\": \"1\",\n  \"contract_type\": \"ERC721\",\n  \"name\": \"Autoglyphs\",\n  \"symbol\": \"☵\",\n  \"token_uri\": \"data:text/plain;charset=utf-8,.........................||||-||||-||||.........................\n.O-.....-...|.....|...O.-...O.-..-.O...-.O...|.....|...-.....-O.\n.-.|-O|.O.....-.|..........-.O....O.-..........|.-.....O.|O-|.-.\n..|....O..O...|.-..|..O...-....||....-...O..|..-.|...O..O....|..\n..-............O...|O..-O...|O....O|...O-..O|...O............-..\n..O....O....OO..O.O...O|...O|......|O...|O...O.O..OO....O....O..\n..|....|....-..|....|....-..O.-..-.O..-....|....|..-....|....|..\n...O.O|.|.O...........O..-.|.|-..-|.|.-..O...........O.|.|O.O...\n.-O....|.-...O.|....-O....|.-......-.|....O-....|.O...-.|....O-.\n........-|O......O.........--|O..O|--.........O......O|-........\n...O...O.O|.|-..............O.O||O.O..............-|.|O.O...O...\n.....................O...O...O....O...O...O.....................\n.|...O-...|.|...O-...|.-...O-......-O...-.|...-O...|.|...-O...|.\n.....O..O.-..|.........O.-..-O.||.O-..-.O.........|..-.O..O.....\n..-|...............|O....-|-|......|-|-....O|...............|-..%0A....O.|.|........O.O.|-.......O..O.......-|.O.O........|.|.O....\n..|-.O......O......O|......-.O|..|O.-......|O......O......O.-|..\n.........O..-..O..-..O.........OO.........O..-..O..-..O.........\n.|...O...........-...|..-O..|O....O|..O-..|...-...........O...|.\n...||.........|OO.....-...O|........|O...-.....OO|.........||...\n....O.|.-.....O.|....O.|..-....OO....-..|.O....|.O.....-.|.O....\n........O..O|..|.O|.O|.O--.|-.|..|.-|.--O.|O.|O.|..|O..O........\n.O.O.O.O.......-...-......|.-.|..|.-.|......-...-.......O.O.O.O.\n....-|......-O......|O.....-|......|-.....O|......O-......|-....\n.-..O.............-..-..|..O........O..|..-..-.............O..-.\n|.....--...O.--...O..-...|............|...-..O...--.O...--.....|%0A|..-....|.....|....O-.|....O-......-O....|.-O....|.....|....-..|%0A|.-..O.|.-..O.-.-..|.|.-O.O.|..OO..|.O.O-.|.|..-.-.O..-.|.O..-.|%0A|O..||O.--O.--|...|..--|..-|...--...|-..|--..|...|--.O--.O||..O|%0A-.O.O..|.|.O.O..O.O..........................O.O..O.O.|.|..O.O.-%0A|-....--.OO....O|....||.......OOOO.......||....|O....OO.--....-|%0A|..|......|..|...O..O......O-.O--O.-O......O..O...|..|......|..|%0A|..|......|..|...O..O......O-.O--O.-O......O..O...|..|......|..|%0A|-....--.OO....O|....||.......OOOO.......||....|O....OO.--....-|%0A-.O.O..|.|.O.O..O.O..........................O.O..O.O.|.|..O.O.-%0A|O..||O.--O.--|...|..--|..-|...--...|-..|--..|...|--.O--.O||..O|%0A|.-..O.|.-..O.-.-..|.|.-O.O.|..OO..|.O.O-.|.|..-.-.O..-.|.O..-.|%0A|..-....|.....|....O-.|....O-......-O....|.-O....|.....|....-..|%0A|.....--...O.--...O..-...|............|...-..O...--.O...--.....|%0A.-..O.............-..-..|..O........O..|..-..-.............O..-.%0A....-|......-O......|O.....-|......|-.....O|......O-......|-....%0A.O.O.O.O.......-...-......|.-.|..|.-.|......-...-.......O.O.O.O.%0A........O..O|..|.O|.O|.O--.|-.|..|.-|.--O.|O.|O.|..|O..O........%0A....O.|.-.....O.|....O.|..-....OO....-..|.O....|.O.....-.|.O....%0A...||.........|OO.....-...O|........|O...-.....OO|.........||...%0A.|...O...........-...|..-O..|O....O|..O-..|...-...........O...|.%0A.........O..-..O..-..O.........OO.........O..-..O..-..O.........%0A..|-.O......O......O|......-.O|..|O.-......|O......O......O.-|..%0A....O.|.|........O.O.|-.......O..O.......-|.O.O........|.|.O....%0A..-|...............|O....-|-|......|-|-....O|...............|-..%0A.....O..O.-..|.........O.-..-O.||.O-..-.O.........|..-.O..O.....%0A.|...O-...|.|...O-...|.-...O-......-O...-.|...-O...|.|...-O...|.%0A.....................O...O...O....O...O...O.....................%0A...O...O.O|.|-..............O.O||O.O..............-|.|O.O...O...%0A........-|O......O.........--|O..O|--.........O......O|-........%0A.-O....|.-...O.|....-O....|.-......-.|....O-....|.O...-.|....O-.%0A...O.O|.|.O...........O..-.|.|-..-|.|.-..O...........O.|.|O.O...%0A..|....|....-..|....|....-..O.-..-.O..-....|....|..-....|....|..%0A..O....O....OO..O.O...O|...O|......|O...|O...O.O..OO....O....O..%0A..-............O...|O..-O...|O....O|...O-..O|...O............-..%0A..|....O..O...|.-..|..O...-....||....-...O..|..-.|...O..O....|..%0A.-.|-O|.O.....-.|..........-.O....O.-..........|.-.....O.|O-|.-.%0A.O-.....-...|.....|...O.-...O.-..-.O...-.O...|.....|...-.....-O.%0A.........................||||-||||-||||.........................%0A\",\n  \"metadata\": null,\n  \"last_token_uri_sync\": \"2022-08-04T16:48:39.222Z\",\n  \"last_metadata_sync\": \"2022-08-04T16:49:08.301Z\",\n  \"minter_address\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance using Moralis SDK in C#\nDESCRIPTION: Uses the Moralis .NET SDK's `Web3Api.Account.GetNativeBalance` method to asynchronously retrieve the native cryptocurrency balance for a specified address and chain ID. Requires the `MoralisClient` to be initialized with valid connection data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Load native balance for address\nNativeBalance bal = await MoralisClient.Web3Api.Account.GetNativeBalance(address, chainId);\n\n```\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for Axelar's payNativeGasForContractCallWithToken\nDESCRIPTION: Shows the function signature for `payNativeGasForContractCallWithToken` from the `IAxelarGasService` interface. This function is used on the source chain to pay gas fees using the native token (`msg.value`) for executing a contract call on a destination chain that also involves sending tokens.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction payNativeGasForContractCallWithToken(\n    address sender,\n    string calldata destinationChain,\n    string calldata destinationAddress,\n    bytes calldata payload,\n    string calldata symbol,\n    uint256 amount,\n    address refundAddress\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Chart.js Candlestick Plugin\nDESCRIPTION: Defines a custom Chart.js plugin named `candlestickPlugin`. This plugin hooks into the `beforeDatasetsDraw` lifecycle event to manually draw candlestick shapes (wicks and bodies) onto the chart canvas using the 2D context (`ctx`). It accesses the chart's data (High, Low, Open, Close values from different datasets) and scales (`x`, `y`) to calculate pixel positions for drawing. The body color is determined by comparing the open and close prices.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-chartsjs-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst candlestickPlugin = {\n  id: \"candlestick\",\n  beforeDatasetsDraw(chart, args, options) {\n    const {\n      ctx,\n      data,\n      scales: { x, y },\n    } = chart;\n\n    ctx.strokeStyle = options.borderColor || \"rgba(0, 0, 0, 0.8)\";\n    ctx.lineWidth = options.borderWidth || 1;\n\n    const candleWidth = x.getPixelForValue(1) - x.getPixelForValue(0);\n    const wickWidth = candleWidth / 10;\n\n    data.datasets[0].data.forEach((point, i) => {\n      const open = y.getPixelForValue(data.datasets[2].data[i]);\n      const close = y.getPixelForValue(data.datasets[3].data[i]);\n      const high = y.getPixelForValue(point);\n      const low = y.getPixelForValue(data.datasets[1].data[i]);\n      const x1 = x.getPixelForValue(i);\n\n      // Draw the wicks\n      ctx.beginPath();\n      ctx.moveTo(x1, high);\n      ctx.lineTo(x1, Math.min(open, close));\n      ctx.moveTo(x1, Math.max(open, close));\n      ctx.lineTo(x1, low);\n      ctx.stroke();\n\n      // Draw the candle body\n      ctx.fillStyle = close > open ? \"#26a69a\" : \"#ef5350\";\n      ctx.fillRect(\n        x1 - candleWidth / 3,\n        Math.min(open, close),\n        (candleWidth * 2) / 3,\n        Math.abs(close - open)\n      );\n    });\n  },\n};\n\nexport default candlestickPlugin;\n```\n\n----------------------------------------\n\nTITLE: Implementing Solana Micro Blogger Smart Contract\nDESCRIPTION: Rust code for the Solana program that handles blog post creation and tracking. It uses Borsh for serialization and implements the program's entrypoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse borsh::{BorshDeserialize, BorshSerialize};\nuse std::str;\n\nuse solana_program:{\n    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, msg,\n    program_error::ProgramError, pubkey::Pubkey,\n};\n\n// Create a struct to store Blog count\n#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct BlogCount {\n    pub total_blogs: u32,\n}\n\n// Function to convert buffer array back to string\npub fn buffer_to_string(buffer: &[u8]) -> &str {\n    let s = match str::from_utf8(buffer) {\n        Ok(v) => v,\n        Err(e) => panic!(\"Invalid UTF-8 sequence: {}\", e),\n    };\n    return s;\n}\n\nentrypoint!(micro_blog);\n\npub fn micro_blog(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    instruction_data: &[u8],\n) -> ProgramResult {\n    let data = buffer_to_string(&instruction_data);\n\n    let account = &accounts[0];\n\n    // Check if the account is owned by this program, else throw an error.\n    if account.owner != program_id {\n        msg!(\n            \"Account {:?} does not have the program id {} as owner\",\n            account,\n            program_id\n        );\n        return Err(ProgramError::IncorrectProgramId);\n    }\n\n    // Increment and store the number of times user created a new blog.\n    let mut blog_counter = BlogCount::try_from_slice(&account.data.borrow())?;\n    blog_counter.total_blogs += 1;\n    blog_counter.serialize(&mut &mut account.data.borrow_mut()[..])?\n\n    // Save the data to the transaction logs\n    msg!(\"Author: {}\", accounts[1].key);\n    msg!(\"Blog No: {}\", blog_counter.total_blogs);\n    msg!(\"Blog: {}\", data);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up wagmi Providers and Routing in React - JavaScript\nDESCRIPTION: This code demonstrates how to configure wagmi's providers and the application's routes in a React project. Dependencies include react-router-dom for routing and wagmi for Web3 interactions. The code sets up public blockchain client providers, configures the mainnet, and establishes three routes: \"/signin\", \"/user\", and \"/\" (home). The WagmiConfig component provides context to children, and RouterProvider injects the defined routes throughout the app. Inputs include the user's navigation actions, outputs are the rendered components according to route.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { publicClient, webSocketPublicClient } = configureChains(\n  [mainnet],\n  [publicProvider()]\n);\n\nconst config = createConfig({\n  autoConnect: true,\n  publicClient,\n  webSocketPublicClient,\n});\n\nconst router = createBrowserRouter([\n  {\n    path: \"/signin\",\n    element: <Signin />,\n  },\n  {\n    path: \"/user\",\n    element: <User />,\n  },\n  {\n    path: \"/\",\n    element: <h1>Home Component</h1>,\n  },\n]);\n\nfunction App() {\n  return (\n    <WagmiConfig config={config}>\n      <RouterProvider router={router} />\n    </WagmiConfig>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Solana API Reference Components in TypeScript/JavaScript\nDESCRIPTION: These import statements include custom React components and a JSON configuration required for assembling the API documentation page. Imported modules enable the rendering of the Solana swaps-by-token-address reference, specialized UI banners, admonition messages, and badges. Dependencies include React, the Moralis documentation codebase, and specific file paths for referenced components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Token Swaps/get-swaps-by-token-address.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport EthereumApiBanner from \"@site/src/components/EthBanner/EthApiBanner.tsx\";\nimport Admonition from \"@theme/Admonition\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Parsing Moralis Solana Token Metadata API Response (JSON)\nDESCRIPTION: Shows a representative JSON response returned by the Moralis Solana token metadata endpoint. Contains fields for token identity (mint, name, symbol), UI metadata (logo, decimals), tokenomics (totalSupply, fullyDilutedValue), and Metaplex-specific data (metadata URI, update authority, sale status). This example helps developers understand the expected structure, available properties, and necessary type conversions for downstream usage. No dependencies are required, but correct parsing should account for numeric fields represented as strings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/03-get-pump-fun-token-metadata.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mint\": \"9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump\",\n  \"standard\": \"metaplex\",\n  \"name\": \"Fartcoin \",\n  \"symbol\": \"Fartcoin \",\n  \"logo\": \"https://d23exngyjlavgo.cloudfront.net/solana_9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump\",\n  \"decimals\": \"6\",\n  \"metaplex\": {\n    \"metadataUri\": \"https://ipfs.io/ipfs/QmYfe8zVGHA1heej47AkBX3Nnetg2h2kqj5yymz1xyKeHb\",\n    \"masterEdition\": false,\n    \"isMutable\": false,\n    \"sellerFeeBasisPoints\": 0,\n    \"updateAuthority\": \"TSLvdd1pWpHVjahSpsvCXUbgwsL3JAcvokwaKt1eokM\",\n    \"primarySaleHappened\": 0\n  },\n  \"fullyDilutedValue\": \"1147224812.01\",\n  \"totalSupply\": \"999995434231329\",\n  \"totalSupplyFormatted\": \"999995434.231329\",\n  \"links\": null,\n  \"description\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Native Balance Retrieval Implementation\nDESCRIPTION: Method and endpoint for retrieving native token balance using Moralis EvmApi. Includes both the function implementation and POST endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// getNativeBalance method\nasync function getNativeBalance(address, chain) {\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  })\n\n  const native = nativeBalance.result.balance.ether\n  return native\n}\n\n// POST operation for getNativeBalance()\napp.post(\"/nativeBalance\", async (req, res) => {\n  try {\n    // Get and return the native balance\n    const nativeBalance = await getNativeBalance(req.body.address, req.body.chain)\n    res.status(200)\n    res.send(nativeBalance)\n\n  } catch (error) {\n    // Handle errors\n    console.error(error)\n    res.status(500)\n    res.json({ error: error.message })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component - TypeScript/React\nDESCRIPTION: This snippet imports the ApiBanner component, implemented in TypeScript (as denoted by the .tsx extension). Its purpose is to potentially render an informational banner about the API, although it is only imported, not used, in the provided code. The dependency is the module located at \"@site/src/components/ApiBanner/ApiBanner.tsx\".\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/04-Get NFT Collections/get-nft-contract-metadata.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in React/JSX\nDESCRIPTION: Imports the `ApiReference` component from a relative path within the project structure. This component is likely designed to display structured API documentation based on configuration props.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/04-Get Wallet Token Approvals/get-wallet-token-approvals.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical ERC-20 Token Balances with Moralis API\nDESCRIPTION: A JSON response showing token balances at block 16310000 for a specific Ethereum address. The response includes detailed information for each token including address, name, symbol, logo URLs, decimal places, balance, and a spam indicator flag.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-erc-20-token-balance-history.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nToken Balances at Block: 16310000\n{\n   \"token_address\": \"0x7d5a90346fad353750e5c5e3af3bb7302efba35d\",\n   \"name\": \"FuckSBF\",\n   \"symbol\": \"FuckSBF\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 9,\n   \"balance\": \"169000000000\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce\",\n   \"name\": \"SHIBA INU\",\n   \"symbol\": \"SHIB\",\n   \"logo\": \"https://cdn.moralis.io/eth/0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce.png\",\n   \"thumbnail\": \"https://cdn.moralis.io/eth/0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce_thumb.png\",\n   \"decimals\": 18,\n   \"balance\": \"1090512540894220000000000\",\n   \"possible_spam\": false\n },\n {\n   \"token_address\": \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n   \"name\": \"USD Coin\",\n   \"symbol\": \"USDC\",\n   \"logo\": \"https://cdn.moralis.io/eth/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.png\",\n   \"thumbnail\": \"https://cdn.moralis.io/eth/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48_thumb.png\",\n   \"decimals\": 6,\n   \"balance\": \"50000000\",\n   \"possible_spam\": false\n },\n {\n   \"token_address\": \"0xe0a189c975e4928222978a74517442239a0b86ff\",\n   \"name\": \"Keys\",\n   \"symbol\": \"KEYS\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 9,\n   \"balance\": \"101850000000\",\n   \"possible_spam\": false\n },\n {\n   \"token_address\": \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\",\n   \"name\": \"Matic Token\",\n   \"symbol\": \"MATIC\",\n   \"logo\": \"https://cdn.moralis.io/eth/0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0.png\",\n   \"thumbnail\": \"https://cdn.moralis.io/eth/0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0_thumb.png\",\n   \"decimals\": 18,\n   \"balance\": \"29909485670000000000\",\n   \"possible_spam\": false\n },\n {\n   \"token_address\": \"0xc1ab5157309d0ab5ee9588de50b09f5028c15fcb\",\n   \"name\": \"FLOKI SUPER SAIYAN\",\n   \"symbol\": \"FLOKISUPER\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 9,\n   \"balance\": \"3357237141806264396\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0x5ae3e46c7012f55ab37c48df95fd491f73a688f0\",\n   \"name\": \"FTTCash\",\n   \"symbol\": \"FTTCash.com\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 9,\n   \"balance\": \"1000000000\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0xf168d4f47a973a65f61bfb46f924fe7489c74576\",\n   \"name\": \"APEBORG\",\n   \"symbol\": \"APEBORG\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 9,\n   \"balance\": \"89721403782255930\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0x9da458800bb0fea8e0734ecf4ba9d0e13dde7118\",\n   \"name\": \"APE.claims\",\n   \"symbol\": \"Wrapped ApeCoin (ape.claims)\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 18,\n   \"balance\": \"10000000000000000000000\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0xd6716b294d13b0f2536590154f4d323bbe716c6b\",\n   \"name\": \"CRO Next\",\n   \"symbol\": \"CRO Next\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 9,\n   \"balance\": \"1601688615252862\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0x8eca24ed7e36cf4ba3a7a01bc51bcd086b2c6597\",\n   \"name\": \"Otherdeed\",\n   \"symbol\": \"OTHR\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 18,\n   \"balance\": \"6001422153884096219100404\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0xe1e49f82cc3427e058be0fda0d1fcae8ddf3f504\",\n   \"name\": \"Fuck SBF\",\n   \"symbol\": \"Fuck SBF\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 9,\n   \"balance\": \"2668000000000\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0x913e4e33f8b7c03042b8451f825030c850c61324\",\n   \"name\": \"ApeCoin\",\n   \"symbol\": \"APE\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 9,\n   \"balance\": \"15051173991571342\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0x2292776fdb71e1188e20b8338114a27440fd804f\",\n   \"name\": \"Stephen Curry\",\n   \"symbol\": \"CURRY\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 18,\n   \"balance\": \"23554219102136232741196079\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0x4d224452801aced8b2f0aebe155379bb5d594381\",\n   \"name\": \"ApeCoin\",\n   \"symbol\": \"APE\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 18,\n   \"balance\": \"36760986138747428417\",\n   \"possible_spam\": false\n },\n {\n   \"token_address\": \"0x23f53515befb57b67b31eccee08dbdd47dfe794f\",\n   \"name\": \"FTX Sucks\",\n   \"symbol\": \"FTX Sucks\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 9,\n   \"balance\": \"6000000000\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0xdacd69347de42babfaecd09dc88958378780fb62\",\n   \"name\": \"AtariToken\",\n   \"symbol\": \"ATRI\",\n   \"logo\": \"https://cdn.moralis.io/eth/0xdacd69347de42babfaecd09dc88958378780fb62.png\",\n   \"thumbnail\": \"https://cdn.moralis.io/eth/0xdacd69347de42babfaecd09dc88958378780fb62_thumb.png\",\n   \"decimals\": 0,\n   \"balance\": \"88\",\n   \"possible_spam\": false\n },\n {\n   \"token_address\": \"0xefd6c64533602ac55ab64442307f6fe2c9307305\",\n   \"name\": \"APE\",\n   \"symbol\": \"APE\",\n   \"logo\": null,\n   \"thumbnail\": null,\n   \"decimals\": 18,\n   \"balance\": \"101715701444169451516503179\",\n   \"possible_spam\": true\n },\n {\n   \"token_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n   \"name\": \"Wrapped Ether\",\n   \"symbol\": \"WETH\",\n   \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.png\",\n   \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.png\",\n   \"decimals\": 18,\n   \"balance\": \"85000000000000000\",\n   \"possible_spam\": false\n }\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Metadata with JavaScript\nDESCRIPTION: Demonstrates how to fetch ERC20 token metadata using token symbols with the Moralis SDK in JavaScript. The code initializes Moralis, sets up the required parameters (symbols and chain), and makes an API call to retrieve token metadata.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-symbols.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const symbols = [\"UNI\", \"AAVE\", \"LINK\"];\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenMetadataBySymbol({\n    symbols,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Using .result Method for Token Balances\nDESCRIPTION: Demonstrates using the .result method to get formatted token balances with additional utilities and type support. Returns data with internal data types for running logic on returned data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/query-from-evm-or-solana.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmChain } from '@moralisweb3/common-evm-utils';\n\nconst response = await Moralis.EvmApi.token.getWalletTokenBalances({\n  \tchain: EvmChain.ETHEREUM,\n    address: '0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe',\n})\n\n// An array of Erc20Value\nconst balances = response.result\n\nconsole.log(balances[0].token.contractAddress.equals(\"0x01be23585060835e02b77ef475b0cc51aa1e0709\"))\n//console output:\ntrue\n\nconsole.log(balances[0].value)\n//console output:\n\"20.0\"\n\nconsole.log(balances[0].amount)\n//console output:\nBigNumber<20000000000000000000>\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation Rendering\nDESCRIPTION: This snippet imports necessary React components (ApiReference, MainnetBadge, ApiBanner) and a configuration file (configs.json) used to build the documentation page dynamically. ApiReference likely renders the main API specification.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Pump Fun Tokens/02-get-bonding-tokens-by-exchange.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifySignature Method for Moralis Auth in C#\nDESCRIPTION: Creates an HTTP POST endpoint to verify the signed challenge message using Moralis Auth API. It processes the verification and returns a custom authentication response.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost, Route(\"verify/{network}\")]\npublic async Task<IActionResult> VerifySignature(ChainNetworkType network, [FromBody] CompleteChallengeRequestDto req)\n{\n    try\n    { \n        CompleteChallengeResponseDto completeResp = await MoralisClient.AuthenticationApi.AuthEndpoint.CompleteChallenge(req, network);\n\n        // Here is where you would save authentication information to the database.\n        // Here is where you would generate a JWT or other authentication response object.\n\n        // Return custom authentication response here.\n        string token =  $\"{{\\\"token\\\":\\\"{completeResp.Address}:{completeResp.ProfileId}\\\"}}\";\n\n        return new CreatedAtRouteResult(nameof(VerifySignature), token);\n    }\n    catch (ApiException ex)\n    {\n        return new BadRequestResult();\n    }\n    catch (Exception ex)\n    {\n        return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Normalized NFT Metadata using JavaScript\nDESCRIPTION: Example of retrieving normalized NFT metadata using Moralis JavaScript SDK. Uses the getNFTMetadata endpoint with normalizeMetadata parameter set to true.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/02-NFT API/02-NFT Metadata FAQs/metadata-normalization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\nconst tokenId = \"1\";\n\nawait Moralis.start({\n  apiKey: \"<YOUR_API_KEY>\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.nft.getNFTMetadata({\n  address,\n  chain,\n  tokenId,\n  normalizeMetadata: true,\n});\n\nconsole.log(response.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Initializing a Firebase Cloud Function with Restricted Parameters in TypeScript\nDESCRIPTION: This TypeScript example illustrates a variant of the proxy function with stricter parameters: the chain is hardcoded to Ethereum using EvmChain.ETHEREUM, minimizing provider-configurable input and reducing attack surface. It uses TypeScript, the Moralis JS SDK, @moralisweb3/common-evm-utils, and firebase-functions. Input is only blockNumberOrHash; output is the block data as JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EvmChain } from \\\"@moralisweb3/common-evm-utils\\\";\n\ninterface GetBlockData {\n  blockNumberOrHash: string;\n}\n\nexport const getBlock = functions.https.onCall(async (data: GetBlockData) => {\n  const response = await Moralis.EvmApi.block.getBlock({\n    chain: EvmChain.ETHEREUM,\n    blockNumberOrHash: data.blockNumberOrHash,\n  });\n  return response.toJSON();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing python-decouple using pip\nDESCRIPTION: Installs the 'python-decouple' package using the pip package manager for Python. This library helps separate parameters from source code, enabling the reading of variables from '.env' files or environment variables.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Read more about Python Decouple at https://pypi.org/project/python-decouple/\npip install python-decouple\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Receipt Function with Axelar in Solidity\nDESCRIPTION: Implementation of the _executeWithToken function that handles incoming cross-chain token transfers through Axelar. This function decodes recipient addresses from the payload and distributes the received tokens evenly among all recipients.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npragma solidity ^0.8.19;\n\n// Imports\n\ncontract GMPDistribution is AxelarExecutable {\n\n    constructor() AxelarExecutable(_gateway) {}\n\n    function sendToMany() external payable {}\n\n    function _executeWithToken(\n    string calldata,\n    string calldata,\n    bytes calldata _payload,\n    string calldata _tokenSymbol,\n    uint256 _amount\n    ) internal override {\n        // Decode the payload into a list of recipient addresses.\n        address[] memory recipients = abi.decode(_payload, (address[]));\n\n        // Get each token address.\n        address tokenAddress = gateway.tokenAddresses(_tokenSymbol);\n\n        // Divide up the tokens between each recipient\n        // on the list. Here, it's divided evenly.\n        uint256 sentAmount = _amount / recipients.length;\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n            // Transfer the tokens to each recipient.\n            IERC20(tokenAddress).transfer(recipients[i], sentAmount);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Solidity Smart Contract Functions\nDESCRIPTION: Collection of smart contract functions including token transfers, access controls, and state management. Contains complex bitwise operations, authorization checks, and event emissions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-content-by-block-number.md#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n0100000000000000000297909716941693909317949094178281048516869003851690920280851685841617919091019093167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009093167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009091161791909117905561197683613308565b73ffffffffffffffffffffffffffffffffffffffff808516600081815260036020526040808220805463ffffffff64010000000067ffffffffffffffff42811678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff9b909b1668010000000000000000029a909a16931692909217979097178181048816909801871602808716878916176001019096167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009096167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909716969096179490941790945591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611b24576040517fd86ad9cf000000000000000000000000000000000000000000000000000000008152336004820152602401610f28565b611b308282600161392d565b5050565b6005600a611b466107d06127106148b1565b611b5091906148b1565b611b5a91906149c1565b81565b6005600a611b6f6107d06127106148b1565b611b7991906148b1565b611b8391906149c1565b600a611b936107d06127106148b1565b611b9d91906148b1565b611b5a91906148b1565b611bb28383836115bb565b73ffffffffffffffffffffffffffffffffffffffff82163b1580611ca657506040517f150b7a020000000000000000000000000000000000000000000000000000000080825233600483015273ffffffffffffffffffffffffffffffffffffffff858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015611c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8291906149fc565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b611d0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e534146455f524543495049454e54000000000000000000000000000000006044820152606401610f28565b505050565b60088054610de29061482f565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1680611daa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f4d494e544544000000000000000000000000000000000000000000006044820152606401610f28565b919050565b600c8054600283020190819055600b54600091906005906fffffffffffffffffffffffffffffffff16820104811115611e14576040517f1852d2df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600b54611e6b907f000000000000000000000000000000000000000000000000000000000000000090849070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16613af6565b9050611e987f00000000000000000000000000000000000000000000000000000000000000008383613af6565b600b80546fffffffffffffffffffffffffffffffff80841670010000000000000000000000000000000002911617905560405190915033907f21b25c9888af4b88b39d68ccd24ddcf61072b85f93e20a5fb3fa46ad2a33450690611f089084908690918252602082015260400190565b60405180910390a2919050565b60008481526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16338114611f8b576040517f70e6839e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610f28565b3073ffffffffffffffffffffffffffffffffffffffff851603611fda576040517ff92dd0b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858152600f6020908152604080832073ffffffffffffffffffffffffffffffffffffffff88168085529083528184208785528352928190208054600101905551858152879133917ff25152c170527324170b6f0178c2d156783b65724dc2df809428faffb6e4df49910160405180910390a4816120e4576040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff8516906323b872dd90606401600060405180830381600087803b1580156120c757600080fd5b505af11580156120db573d6000803e3d6000fd5b50505050612186565b6040517ff242432a000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001606482015260a06084820152600060a482015273ffffffffffffffffffffffffffffffffffffffff85169063f242432a9060c401600060405180830381600087803b15801561216d57600080fd5b505af1158015612181573d6000803e3d6000fd5b505050505b5050505050565b60065473ffffffffffffffffffffffffffffffffffffffff16331461220e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610f28565b600e547f0100000000000000000000000000000000000000000000000000000000000000900460ff16156122ae57600e805477ffffffffffffffffffffffffffffffffffffffffffffffff1680825562015180919060089061228790849068010000000000000000900467ffffffffffffffff16614a19565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907fb935ae081db04fbe2c80c7b2d69b4b8396f38acee91ddeb9f5edfe89044bf2ab90600090a350565b60006123ad61237b670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000085017f00000000000000000000000000000000000000000000000000000000000000000503613bed565b7f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000919091020590565b60000392915050565b600073ffffffffffffffffffffffffffffffffffffffff8216612435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610f28565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205463ffffffff1690565b600e5467ffffffffffffffff808216917001000000000000000000000000000000008104909116907801000000000000000000000000000000000000000000000000810466ffffffffffffff16907f0100000000000000000000000000000000000000000000000000000000000000900460ff161561250f576040517faacbcaa500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8084111561254c576040517fe6bdccb500000000000000000000000000000000000000000000000000000000815260048101829052602401610f28565b60005b84811015612887577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6127078490030160008186816125905761259061490f565b06858101600190810160008181526002602052604081205492909801979293508792909167ffffffffffffffff7401000000000000000000000000000000000000000090910416156126125760008281526002602052604090205474010000000000000000000000000000000000000000900467ffffffffffffffff16612614565b815b60008481526002602052604081205491925073ffffffffffffffffffffffffffffffffffffffff82169174010000000000000000000000000000000000000000900467ffffffffffffffff161561269b5760008581526002602052604090205474010000000000000000000000000000000000000000900467ffffffffffffffff1661269d565b845b600086815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000067ffffffffffffffff808a1682027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16929092177c0100000000000000000000000000000000000000000000000000000000610bef8b106116298c10611f1c8d10010160090363ffffffff811691909102919091179093558985529290932080547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1693851690920292909217905590915061279183613308565b73ffffffffffffffffffffffffffffffffffffffff90931660009081526003602090815260408220805463ffffffff64010000000067ffffffffffffffff42811678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff9b909b1668010000000000000000029a909a1693811693909317989098178881048216909601169096027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff909416939093179092559b8c52909a201698505050600193909301925061254f915050565b50600e805467ffffffffffffffff8581167fffffffffffffffff0000000000000000ffffffffffffffff00000000000000009092169190911770010000000000000000000000000000000091851691909102177fff00000000000000ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000086840366ffffffffffffff1602179055604080518581526020810184905233917f29b3d7b055ea49418c154824fb1c7e9d0b2ade54028bdf2bb86ec2c152d5050891015b60405180910390a250505050565b60018054610de29061482f565b6129813382600161392d565b6040517f73a98eb8000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906373a98eb890604401600060405180830381600087803b158015612a0f57600080fd5b505af1158015612186573d6000803e3d6000fd5b33600081815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000427f00000000000000000000000000000000000000000000000000000000000000001115612b16576040517fdc0847d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600a602052604090205460ff1615612b60576040517f646cf55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b166020820152612bd690849084907f00000000000000000000000000000000000000000000000000000000000000009060340160405160208183030381529060405280519060200120613eab565b612c0c576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50336000818152600a602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155600b80546fffffffffffffffffffffffffffffffff700100000000000000000000000000000000808304\n```\n\n----------------------------------------\n\nTITLE: Defining CORS Policy in ASP.NET Core (C#)\nDESCRIPTION: This snippet defines a CORS policy named \"_allowedOrigins\" that permits requests from a specified origin (e.g., http://127.0.0.1:5500). It enables any header and method for that origin, ensuring the client application hosted on a different port can communicate with the backend API. This setup requires the ASP.NET Core CORS middleware and should be called after initializing the WebApplicationBuilder in Program.cs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Define CORS policy\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(AllowedOrigins,\n                    policy =>\n                    {\n                        policy.WithOrigins(\"http://127.0.0.1:5500\")\n                                            .AllowAnyHeader()\n                                            .AllowAnyMethod();\n                    });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana Token Pairs API Reference and UI Components in JSX\nDESCRIPTION: This code snippet demonstrates the rendering of the main components for the Solana token pairs documentation page. It includes the page title with a Mainnet badge, an Ethereum API banner for cross-referencing, and the API reference component for the 'Get Token Pairs by Address' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Pairs & Liquidity/get-token-pairs.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# Get Token Pairs by Address <MainnetBadge />\n\n<EthereumApiBanner\n  customTitle=\"Looking for token pairs by address on EVM?\"\n  customText=\"Access token pairs data on EVM using our API.\"\n  customButtonText=\"Explore EVM API\"\n  customButtonLink=\"/web3-data-api/evm/reference/get-token-pairs\"\n/>\n\n<ApiReference {...config.solana.getTokenPairs} />\n```\n\n----------------------------------------\n\nTITLE: Streaming Smart Contract Events via Logs with Custom ABI - Moralis Streams (JSON)\nDESCRIPTION: This JSON example details the output from streaming direct smart contract events (logs) based on ABI and topics specified in Moralis admin or SDK. It shows how logs are represented when emitting contract events, including event input types, indexed status, and ABI details. Requires specifying ABI and interested topics; outputs are event logs with all decoded fields and metadata for integration or automation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/response-body.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": false,\n  \"chainId\": \"0x1\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"name\": \"reserve0\",\n          \"type\": \"uint112\"\n        },\n        {\n          \"indexed\": false,\n          \"name\": \"reserve1\",\n          \"type\": \"uint112\"\n        }\n      ],\n      \"name\": \"Sync\",\n      \"type\": \"event\"\n    }\n  ],\n  \"streamId\": \"6378fe38-54c7-4816-8d61-fca8e128e260\",\n  \"tag\": \"test_events\",\n  \"retries\": 1,\n  \"block\": {\n    \"number\": \"15984246\",\n    \"hash\": \"0x7f8d8285b572a60f6a14d5f1dcbd40e487ccffd9ec78f8dfbccb49aa191fbb95\",\n    \"timestamp\": \"1668621827\"\n  },\n  \"logs\": [\n    {\n      \"logIndex\": \"320\",\n      \"transactionHash\": \"0xf1682fa49b83689093b467ac6937785102895fc3ba418624c28d04f9af6e5e2b\",\n      \"address\": \"0x4cd36d6f32586177e36179a810595a33163a20bf\",\n      \"data\": \"0x00000000000000000000000000000000000000000000944ad388817e590ab6070000000000000000000000000000000000000000000000000000008a602de18e\",\n      \"topic0\": \"0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1\",\n      \"topic1\": null,\n      \"topic2\": null,\n      \"topic3\": null\n    }\n  ],\n  \"txs\": [],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Status Tracking\nDESCRIPTION: useEffect hook for monitoring and responding to transaction status changes\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  if (isSuccess) {\n    setDisplayTransactionHash(registerToken?.hash ?? '');\n    toast({\n      title: 'Token Registration Successful',\n      status: 'success',\n      duration: 5000,\n      isClosable: true,\n    });\n    setTokenAddress('');\n    setShowNextStep(true);\n  }\n  if (isError) {\n    toast({\n      title: 'Transaction Error',\n      description: 'There was an error submitting your transaction.',\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n    });\n  }\n  if (isLoading) {\n    toast({\n      title: 'Transaction Pending',\n      description: 'Your transaction is pending.',\n      status: 'info',\n      duration: 5000,\n      isClosable: true,\n    });\n  }\n}, [registerToken, isSuccess, isError, isLoading, useWaitForDeployTokenTransactionData]);\n```\n\n----------------------------------------\n\nTITLE: Using ApiReference Component with Configuration in JSX\nDESCRIPTION: Renders the `ApiReference` React component within a Markdown file (likely processed by MDX or similar). It uses the spread syntax (`{...}`) to pass configuration details for the 'CreateStream' endpoint (sourced from the imported `config` object) as props to the component. This dynamically displays the relevant API reference documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/create-stream.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.streams.CreateStream} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Transactions with Moralis SDK in JavaScript\nDESCRIPTION: Initializes the Moralis SDK with an API key, specifies a target wallet address and the Ethereum chain using `EvmChain`. It then calls `Moralis.EvmApi.transaction.getWalletTransactions` to retrieve the transaction history and prints the JSON response. Requires the `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/05-Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Implementing Phantom Wallet Authentication Button\nDESCRIPTION: React component that handles Phantom wallet connection and authentication flow using Moralis and NextAuth. Includes wallet connection, message signing, and authentication verification.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport { Button } from \"@web3uikit/core\";\nimport { signIn } from \"next-auth/react\";\nimport base58 from \"bs58\";\nimport { useAuthRequestChallengeSolana } from \"@moralisweb3/next\";\n\nexport default function PhantomBtn() {\n  const { requestChallengeAsync, error } = useAuthRequestChallengeSolana();\n  const authenticate = async () => {\n    // @ts-ignore\n    const provider = window.phantom?.solana;\n    const resp = await provider.connect();\n    const address = resp.publicKey.toString();\n    const chain = \"devnet\";\n    const account = {\n      address: address,\n      chain: chain,\n      network: \"solana\",\n    };\n    const challenge = await requestChallengeAsync({\n      address,\n      network: \"devnet\",\n    });\n    const encodedMessage = new TextEncoder().encode(challenge?.message);\n    const signedMessage = await provider.signMessage(encodedMessage, \"utf8\");\n    const signature = base58.encode(signedMessage.signature);\n    try {\n      const authResponse = await signIn(\"moralis-auth\", {\n        message: challenge?.message,\n        signature,\n        network: \"Solana\",\n        redirect: false,\n      });\n      if (authResponse?.error) {\n        throw new Error(authResponse.error);\n      }\n    } catch (e) {\n      return;\n    }\n  };\n\n  return (\n    <Button\n      text=\"Phantom\"\n      theme=\"primary\"\n      onClick={() => {\n        authenticate();\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Uniswap V2 Pair Address Query\nDESCRIPTION: This JSON object illustrates the typical response structure returned by the Moralis `getPairAddress` endpoint. It includes detailed information for both `token0` and `token1` (address, name, symbol, decimals, logo URLs, etc.) and the calculated `pairAddress` for the Uniswap V2 liquidity pool.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-address-of-a-liquidity-pool.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"token0\": {\n    \"address\": \"0x514910771af9ca656af840dff83e8264ecf986ca\",\n    \"name\": \"Chain Link\",\n    \"symbol\": \"LINK\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca.webp\",\n    \"logo_hash\": \"fd74ea1227adb458733847c09aab05d89c35c14b640c5ee1e0a8bffa79193eb4\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  \"token1\": {\n    \"address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"name\": \"Wrapped Ether\",\n    \"symbol\": \"WETH\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.webp\",\n    \"logo_hash\": \"0a7fc292596820fe066ce8ce3fd6e2ad9d479c2993f905e410ef74f2062a83ec\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  \"pairAddress\": \"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Moralis via WalletConnect (TypeScript, EVM)\nDESCRIPTION: Authenticates users through WalletConnect by constructing a WalletConnectProvider, enabling it, and passing it wrapped in Web3Provider to signInWithMoralis. Dependencies include @walletconnect/web3-provider, @ethersproject/providers, and @moralisweb3/client-firebase-evm-auth. Input: moralisAuth and WalletConnectProvider instance; Output: user authentication session. RPC URLs must be configured for your chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signInWithMoralis } from '@moralisweb3/client-firebase-evm-auth';\nimport { Web3Provider } from '@ethersproject/providers';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nconst provider = new WalletConnectProvider({\n  rpc: {\n    1: 'https://your_rpc_url_here/',\n    // ...\n  }\n});\n\nawait provider.enable();\n\nawait signInWithMoralis(moralisAuth, {\n  provider: new Web3Provider(provider)\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Interchain Token Form UI in React\nDESCRIPTION: This React functional component (`NewInterchainToken`) defines a form using Chakra UI components (`Box`, `Heading`, `VStack`, `FormControl`, `FormLabel`, `Input`, `FormHelperText`, `Button`, `Text`) to collect user input for creating a new Interchain Token. It uses React's `useState` hook (implied by `tokenName`, `setTokenName`, etc.) to manage form field values (Token Name, Symbol, Decimals, Initial Supply). A button triggers the `handleCreateToken` function (not fully shown) to initiate the token creation process, showing loading state via `isLoading`. It also displays a unique `saltValue`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n//...\n\nconst NewInterchainToken: React.FC = () => {\n  //...\n\n  return (\n    <Box\n      padding=\"7\"\n      maxW=\"xxl\"\n      borderWidth=\"1px\"\n      borderRadius=\"lg\"\n      overflow=\"hidden\"\n      margin=\"auto\"\n      marginTop=\"-20\"\n    >\n      <Heading size=\"lg\" marginBottom=\"6\" textAlign=\"center\">\n        Create a New Interchain Token\n      </Heading>\n\n      <VStack spacing={5} align=\"stretch\">\n        <FormControl>\n          <FormLabel>Token Name</FormLabel>\n\n          <Input\n            placeholder=\"Enter token name\"\n            value={tokenName}\n            onChange={(e) => setTokenName(e.target.value)}\n          />\n\n          <FormHelperText>Unique name for your token.</FormHelperText>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Token Symbol</FormLabel>\n\n          <Input\n            placeholder=\"Enter token symbol\"\n            value={tokenSymbol}\n            onChange={(e) => setTokenSymbol(e.target.value)}\n          />\n\n          <FormHelperText>\n            Short symbol for your token, like ETH or BTC.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Token Decimals</FormLabel>\n\n          <Input\n            type=\"number\"\n            placeholder=\"Enter token decimals\"\n            value={tokenDecimals.toString()}\n            onChange={(e) => setTokenDecimals(Number(e.target.value))}\n          />\n\n          <FormHelperText>\n            Number of decimal places for your token.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Initial Supply</FormLabel>\n\n          <Input\n            type=\"number\"\n            placeholder=\"Enter initial supply\"\n            value={initialSupply.toString()}\n            onChange={(e) => setInitialSupply(Number(e.target.value))}\n          />\n\n          <FormHelperText>Total initial supply of tokens.</FormHelperText>\n        </FormControl>\n\n        <Text fontSize=\"sm\" color=\"gray.500\">\n          Unique Salt: {saltValue}\n        </Text>\n\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <Button\n            colorScheme=\"cyan\"\n            onClick={handleCreateToken}\n            isLoading={isLoading}\n            loadingText=\"Creating Token\"\n            w=\"sm\"\n            variant=\"solid\"\n            disabled={isLoading}\n          >\n            Create Token\n          </Button>\n\n          {/*  ...  */}\n        </div>\n\n        {/*  ...  */}\n      </VStack>\n    </Box>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Listening to Firestore Blockchain Event Streams on the Frontend - Firebase (JavaScript)\nDESCRIPTION: This JavaScript snippet subscribes to changes in a Firestore collection holding blockchain transaction events using the 'onSnapshot' listener. It is intended to be used in a frontend dapp to react to real-time updates from Moralis Streams via Firestore. Required: Firebase JS SDK initialized, database instance, and correct collection naming per the configured stream tag. The callback function processes all documents supplied in the 'change.docs' parameter. Note: On initial subscription, all existing documents are returned, not only the updates.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/firebase.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = firebase.firestore();\nconst collectionName = \"LoremIpsum\";\n\ndb.collection(`moralis/txs/${collectionName}`).onSnapshot((change) => {\n  doSomeOperation(change.docs);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance of an ERC20 Vault in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to retrieve the native balance for an ERC20 token vault address using the Moralis SDK. It imports necessary modules, initializes Moralis, specifies the vault address and the blockchain (Ethereum via `EvmChain`), calls the `getNativeBalance` method from `Moralis.EvmApi.balance`, and prints the resulting balance information in JSON format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-vault.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  // address of ERC20 token vault, e.g. WETH token address\n  const address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Configurations - JavaScript/TypeScript\nDESCRIPTION: This snippet demonstrates how to import reusable React components and configuration JSON for an API reference page. Dependencies include React, local project component paths, and a JSON config file for the API reference. The imported components (`ApiReference`, `EthereumApiBanner`) are utilized further below for documentation and cross-linking purposes. Inputs are the exported objects and files; outputs are the imported symbols ready for use within the page; requires a project structure that matches the import paths.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Token Holders/get-historical-token-holders.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport EthereumApiBanner from \"@site/src/components/EthBanner/EthApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Transactions in Python\nDESCRIPTION: This snippet demonstrates how to use Moralis SDK in Python to fetch all transactions of a specific block using the get_block endpoint. It requires the block number or hash and optionally specifies the chain and whether to include internal transactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"block_number_or_hash\": \"15863321\",\n    \"chain\": \"eth\", \n    \"include\": \"internal_transactions\", \n}\n\nresult = evm_api.block.get_block(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Tracking Transaction Status and Updating UI using useEffect in React\nDESCRIPTION: Utilizes the React `useEffect` hook within the `TransferToken` component to monitor and react to the status of the interchain token transfer transaction. The effect depends on the `tokenTransfer` object (containing the transaction hash) and the status flags (`isSuccess`, `isError`, `isLoading`) returned by the `useWaitForTransaction` hook. It calls the `gasEstimator` function on mount/dependency change. Based on the transaction status flags, it displays informative Chakra UI toasts to the user (success, error, pending) and updates the displayed transaction hash state (`setDisplayTransactionHash` - function assumed to exist) upon successful completion.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst TransferToken = () = >{\n  //...\n  useEffect(() = >{\n    gasEstimator();\n    if (isSuccess) {\n      setDisplayTransactionHash(tokenTransfer ? .hash ? ?'');\n      toast({\n        title: 'Token  Transfer  Initiated',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isError) {\n      toast({\n        title: 'Transaction  Error',\n        description: 'There  was  an  error  submitting  your  transaction.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isLoading) {\n      toast({\n        title: 'Transaction  Pending',\n        description: 'Your  transaction  is  pending.',\n        status: 'info',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  },\n  [tokenTransfer, isSuccess, isError, isLoading, useWaitForTokenTransferTransactionData]);\n  return (\n  //..\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Solana Program\nDESCRIPTION: Commands to build the Solana Rust program and deploy it to the Solana cluster, generating a program ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo build-bpf\n\nsolana program deploy ./target/deploy/tic_tac_toe.so\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in React/JSX\nDESCRIPTION: Code showing the import statements and component usage for rendering API documentation reference.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/02-Get Transactions/get-transaction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.transaction.getTransaction} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for ERC20 Price Movers - React/MDX - JavaScript\nDESCRIPTION: This snippet imports and utilizes the React component <ApiReference>, passing it the endpoint configuration for fetching the top ERC20 tokens by price movers from the Moralis API configuration object. It also leverages the <Admonition> component to showcase a premium endpoint notice with further instructions for users regarding API key requirements and links to relevant dashboard pages. Dependencies include React, Docusaurus MDX components, and a specific JSON config file. The main input is the 'config' object containing endpoint definitions, and the output is a rendered API documentation block with admonitions in the browser.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/12-Market Data API/get-top-erc20-tokens-by-price-movers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config[\"market-data\"].getTopERC20TokensByPriceMovers}>\n  <Admonition type=\"info\" icon=\"💡\" title=\"PREMIUM ENDPOINT\">\n    <p>\n      To use this API, you will need an API key under a Moralis account with the\n      Pro or above plan. To upgrade your API plan, go to the{\" \"}\n      <Link href=\"https://admin.moralis.com/account/billing\">billing page</Link>{\" \"}\n      in the Moralis Dashboard.\n    </p>\n    <p>\n      This API has no parameter and you can simply use the <b>Try It</b> button\n      to test it out.\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in JSX/Markdown\nDESCRIPTION: Import statement for the ApiBanner component used in the API reference documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/03-Get Token Prices/get-multiple-token-price.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK and Creating a Stream in NodeJS\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the Moralis SDK using an API key, define the parameters for a new stream (including target chains, description, tag, webhook URL, and whether to include native transactions), create the stream using `Moralis.Streams.add`, and then attach a specific wallet address to this newly created stream using `Moralis.Streams.addAddress`. It requires the `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n});\n\nconst stream = {\n  chains: [EvmChain.ETHEREUM, EvmChain.POLYGON], // list of blockchains to monitor\n  description: \"monitor Bobs wallet\", // your description\n  tag: \"bob\", // give it a tag\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\", // webhook url to receive events,\n  includeNativeTxs: true,\n};\n\nconst newStream = await Moralis.Streams.add(stream);\nconst { id } = newStream.toJSON(); // { id: 'YOUR_STREAM_ID', ...newStream }\n\n// Now we attach bobs address to the stream\nconst address = \"0x68b3f12d6e8d85a8d3dbbc15bba9dc5103b888a4\";\n\nawait Moralis.Streams.addAddress({ address, id });\n```\n\n----------------------------------------\n\nTITLE: Representing Autoglyph NFT Data (ID 66, Partial) in JSON\nDESCRIPTION: This JSON object provides partial data for Autoglyph NFT with token ID \"66\". It includes the token address, ID, owner, block numbers, token hash, amount, contract type (ERC721), name, and symbol. The provided data seems truncated as fields like 'token_uri' and timestamps are missing compared to other examples.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"token_address\": \"0xd4e4078ca3495de5b1d4db434bebc5a986197782\",\n      \"token_id\": \"66\",\n      \"owner_of\": \"0x8e232860171762f6ff2d22d1fcc45af78bd3fbb5\",\n      \"block_number\": \"15791513\",\n      \"block_number_minted\": \"7517107\",\n      \"token_hash\": \"6f0447e9b75382f98f9d773890e393aa\",\n      \"amount\": \"1\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Autoglyphs\",\n      \"symbol\": \"☵\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Moralis Streams GetLogs API Reference in JavaScript\nDESCRIPTION: This MDX (Markdown for React) snippet inserts the ApiReference component into the documentation, configuring it to display the documentation for the Moralis Streams GetLogs endpoint. It relies on previously imported dependencies: the ApiReference React component and a configuration object specifying endpoint details. The main parameter is 'streams.GetLogs' from the config. Inputs and outputs are determined by the component's props; the result is a rendered API reference based on the configuration. This allows developers to view endpoint usage details directly in the docs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/01-History/get-logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.streams.GetLogs} />\n```\n\n----------------------------------------\n\nTITLE: Complete AuthenticationController Implementation for Moralis Auth in C#\nDESCRIPTION: The full implementation of the AuthenticationController class, including both RequestMessage and VerifySignature methods for handling Moralis authentication in an ASP.NET Core Web API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Mvc;\nusing Moralis;\nusing Moralis.AuthApi.Models;\nusing Moralis.Network;\nusing Moralis.Web3Api.Models;\n\nnamespace MoralisDemo.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class AuthenticationController : ControllerBase\n    {\n\n        [HttpPost, Route(\"{address}/{network}/{chainId}\")]\n        public async Task<IActionResult> RequestMessage(string address, ChainNetworkType network, ChainList chainId)\n        {\n            try\n            { \n                ChallengeRequestDto req = new ChallengeRequestDto()\n                {\n                    Address = address,\n                    ChainId = (long)chainId,\n                    Domain = \"defi.finance\",\n                    ExpirationTime = DateTime.UtcNow.AddMinutes(60),\n                    NotBefore = DateTime.UtcNow,\n                    Resources = new string[] { \"https://www.1155project.com\" },\n                    Timeout = 120,\n                    Statement = \"Please confirm\",\n                    Uri = \"https://defi.finance\"\n                };\n\n                ChallengeResponseDto resp = await MoralisClient.AuthenticationApi.AuthEndpoint.Challenge(req, network);\n\n                return new CreatedAtRouteResult(nameof(RequestMessage), resp);\n            }\n            catch (ApiException ex)\n            {\n                return new BadRequestResult();\n            }\n            catch (Exception ex)\n            {\n                return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n            }\n        }\n\n        [HttpPost, Route(\"verify/{network}\")]\n        public async Task<IActionResult> VerifySignature(ChainNetworkType network, [FromBody] CompleteChallengeRequestDto req)\n        {\n            try\n            { \n                CompleteChallengeResponseDto completeResp = await MoralisClient.AuthenticationApi.AuthEndpoint.CompleteChallenge(req, network);\n\n                // Here is where you would save authentication information to the database.\n                // Here is where you would generate a JWT or other authentication response object.\n\n                // Return custom authentication response here.\n                string token =  $\"{{\\\"token\\\":\\\"{completeResp.Address}:{completeResp.ProfileId}\\\"}}\";\n\n                return new CreatedAtRouteResult(nameof(VerifySignature), token);\n            }\n            catch (ApiException ex)\n            {\n                return new BadRequestResult();\n            }\n            catch (Exception ex)\n            {\n                return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Server for Webhook Endpoint\nDESCRIPTION: Creates an Express server with a POST endpoint for receiving webhook data from Moralis Streams.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.post(\"/webhook\", async (req, res) => {\n  const { body, headers } = req;\n\n  console.log(body);\n\n  res.status(200).json();\n});\n\napp.listen(port, () => {\n  console.log(`Listening to streams`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase Wallet Connector in NextJS for Moralis Authentication\nDESCRIPTION: This JavaScript snippet demonstrates how to integrate Coinbase Wallet authentication into a NextJS sign-in page using `wagmi` hooks and Moralis. It imports `CoinbaseWalletConnector`, uses hooks like `useConnect`, `useSignMessage`, and `useAuthRequestChallengeEvm` to handle the authentication flow. The `handleAuth` function connects the Coinbase Wallet, requests a challenge message from the Moralis backend, prompts the user to sign the message, and then uses `next-auth/react`'s `signIn` function with the 'moralis-auth' provider to establish a session and redirect the user. Dependencies include `wagmi`, `next-auth/react`, `next/router`, and `@moralisweb3/next`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-coinbase-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { CoinbaseWalletConnector } from 'wagmi/connectors/coinbaseWallet'\nimport { signIn } from 'next-auth/react'\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from 'wagmi'\nimport { useRouter } from 'next/router'\nimport { useAuthRequestChallengeEvm } from '@moralisweb3/next'\n\nfunction SignIn() {\n  const { connectAsync } = useConnect()\n  const { disconnectAsync } = useDisconnect()\n  const { isConnected } = useAccount()\n  const { signMessageAsync } = useSignMessage()\n  const { push } = useRouter()\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm()\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync()\n    }\n\n    const { account, chain } = await connectAsync({\n      connector: new CoinbaseWalletConnector({\n        options: {\n          appName: 'amazing.finance',\n        },\n      }),\n    })\n\n    const userData = { address: account, chain: chain.id, network: 'evm' }\n\n    const { message } = await requestChallengeAsync(userData)\n\n    const signature = await signMessageAsync({ message })\n\n    // redirect user after success authentication to '/user' page\n    const { url } = await signIn('moralis-auth', {\n      message,\n      signature,\n      redirect: false,\n      callbackUrl: '/user',\n    })\n    /**\n     * instead of using signIn(..., redirect: \"/user\")\n     * we get the url from callback and push it to the router to avoid page refreshing\n     */\n    push(url)\n  }\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={() => handleAuth()}>Authenticate via Coinbase Wallet</button>\n    </div>\n  )\n}\n\nexport default SignIn\n```\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Transfer Notification Handler in JavaScript\nDESCRIPTION: JavaScript code to process webhook data and display desktop notifications for ERC-20 token transfers. Formats sender address and token amount for notification display.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const erc20Transfer of webhook.erc20Transfers) {\n  const addrs = `${erc20Transfer.from.slice(0, 4)}...${erc20Transfer.from.slice(\n    38\n  )}`;\n  const amount = Number(erc20Transfer.valueWithDecimals).toFixed(0);\n\n  notifier.notify({\n    title: \"NEW USDT Transfer\",\n    message: `${addrs} just sent \\n$${amount}`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana API Reference Component in JSX\nDESCRIPTION: This JSX snippet renders the 'ApiReference' React component, dynamically displaying documentation for the Solana 'getTokenBondingStatus' API endpoint. Configuration details are passed to the component via the spread attributes `...config.solana.getTokenBondingStatus`, likely sourced from a separate JSON configuration file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Pump Fun Tokens/04-get-bonding-status.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getTokenBondingStatus} />\n```\n\n----------------------------------------\n\nTITLE: Requesting Pump.fun Token Metadata with Moralis Solana API (Shell)\nDESCRIPTION: Issues a GET request via cURL to the Moralis Solana API endpoint to retrieve detailed metadata for a given Pump.fun token. Requires a valid Moralis API Key for authentication, and the Solana token mint address to specify the target asset. Accepts responses in JSON format, returns all token metadata fields if successful. This snippet demonstrates HTTP header and endpoint structure for integrating metadata queries into scripts, dashboards, or backend services.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/03-get-pump-fun-token-metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/token/mainnet/9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump/metadata' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component for Solana Address Unbinding\nDESCRIPTION: This JSX code renders the ApiReference component, passing the configuration for the removeBind API endpoint from the imported config object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/reference/03-Profiles/remove-bind.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.auth.removeBind} />\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component for Moralis Web3 Docs - TypeScript\nDESCRIPTION: Imports the ApiBanner React component written in TypeScript for displaying banners on documentation pages within the Moralis Web3 docs system. This component enhances documentation visuals and can be conditionally rendered based on context. Requires correct TypeScript support and access to the documentation component directory.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/03- Get Entities/get-entities-by-category.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Balance with Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates retrieving the SPL token balance for a Solana address ('BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen') using the Moralis SDK. It involves initializing Moralis with an API key, specifying the target address and network (MAINNET), and calling `Moralis.SolApi.account.getSPL`. The response, containing token information, is logged to the console. Dependencies include `moralis` and `@moralisweb3/common-sol-utils`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/how-to-get-spl-token-balance-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getSPL({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Balance Using JSON-RPC in Ethereum\nDESCRIPTION: This code snippet demonstrates how to create a JSON-RPC request to fetch a user's wallet balance on an Ethereum network. The request uses the eth_getBalance method, which takes the wallet address and block parameter as inputs and returns the account balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/fundamentals/json-rpc-in-blockchain-networks.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_getBalance\",\n  \"params\": [\"0x123456...\", \"latest\"],\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Price with Moralis Token API in Python\nDESCRIPTION: This Python code enables fetching current price information for a specified ERC20 token on a supported chain using Moralis Token API. Using the moralis SDK, set the API key, address, and chain in the params dictionary. The response is printed and includes token price details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"ERC20_TOKEN_ADDRESS\",\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.token.get_token_price(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Basic API Query Structure for EVM and Solana\nDESCRIPTION: Shows the basic structure for querying Moralis EvmApi and SolApi endpoints.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/query-from-evm-or-solana.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from 'moralis'\n\nconst result1 = await Moralis.EvmApi.'<DOMAIN>'.'<METHOD>'\nconst result2 = await Moralis.SolApi.'<DOMAIN>'.'<METHOD>'\n```\n\n----------------------------------------\n\nTITLE: Defining Trigger Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of a Moralis Trigger, including type, contractAddress, functionAbi, and optional parameters for customizing the trigger behavior.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/triggers.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Trigger {\n  type: \"tx\" | \"log\" | \"erc20transfer\" | \"erc20approval\" | \"nfttransfer\";\n  contractAddress: string;\n  functionAbi: AbiItem;\n  inputs?: (string | string[])[];\n  topic0?: string;\n  callFrom?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference Documentation in React\nDESCRIPTION: This code imports the ApiReference component from the site's components directory and a configuration file for the API reference. The imported configuration is then used to render the Solana getNFTs API reference documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/wallet-api/get-wallet-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs on Base Blockchain Using Moralis API in Python\nDESCRIPTION: The `get_wallet_nfts` function retrieves the raw JSON response of all NFTs owned by the agent's wallet on the Base mainnet or testnet using the Moralis API. The function auto-selects network context from `agent_wallet` and returns the raw API response or an error message. Requirements include the Moralis API key, agent wallet context, and the `requests` library.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_wallet_nfts() -> str:\\n    \"\"\"\\n    Fetch the raw response of NFTs held by the agent's wallet on the Base blockchain.\\n    Automatically determines if the network is mainnet or testnet.\\n\\n    Returns:\\n        str: Raw JSON response of NFTs or an error message if unsuccessful.\\n    \"\"\"\\n    # Get the agent's wallet address\\n    wallet_address = agent_wallet.default_address.address_id\\n\\n    # Determine the network dynamically based on the agent's current network ID\\n    is_mainnet = agent_wallet.network_id in [\"base\", \"base-mainnet\"]\\n    chain = \"base\" if is_mainnet else \"base sepolia\"\\n\\n    # API endpoint and headers\\n    url = f\"https://deep-index.moralis.io/api/v2.2/{wallet_address}/nft\"\\n    headers = {\\n        \"accept\": \"application/json\",\\n        \"X-API-Key\": MORALIS_API_KEY\\n    }\\n    params = {\\n        \"chain\": chain,\\n        \"format\": \"decimal\",\\n        \"media_items\": \"false\"\\n    }\\n\\n    try:\\n        response = requests.get(url, headers=headers, params=params)\\n        response.raise_for_status()\\n        return response.text  # Return the raw JSON response as text\\n\\n    except requests.exceptions.RequestException as e:\\n        return f\"Error fetching wallet NFTs: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Tracking Transaction Status and Updating UI with useEffect in React\nDESCRIPTION: This snippet shows how to use the `useEffect` hook in a React component (`DeployTokenRemotely`) to track the status of a remote token deployment transaction initiated by `useContractWrite` and monitored by `useWaitForTransaction`. It listens for changes in the transaction hash (`deployTokenRemotely`), success (`isSuccess`), error (`isError`), and loading (`isLoading`) states. Based on these states, it displays appropriate toast notifications (Success, Error, Pending), updates the UI to show the transaction hash (`setDisplayTransactionHash`), and potentially enables further steps (`setShowNextStep`) upon successful completion. It also calls the `gasEstimator` function, likely on component mount or when dependencies change.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst DeployTokenRemotely = () = >{\n  //...\n  useEffect(() = >{\n    gasEstimator();\n    if (isSuccess) {\n      setDisplayTransactionHash(deployTokenRemotely ? .hash ? ?'');\n      toast({\n        title: 'Token Deployed Remotely',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n      setShowNextStep(true);\n    }\n    if (isError) {\n      toast({\n        title: 'Transaction Error',\n        description: 'There was an error submitting your transaction.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isLoading) {\n      toast({\n        title: 'Transaction Pending',\n        description: 'Your transaction is pending.',\n        status: 'info',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  },\n  [deployTokenRemotely, isSuccess, isError, isLoading, useWaitForDeployTokenRemotelyTransactionData]);\n  return (\n  //..\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating User Data Display Component (JavaScript)\nDESCRIPTION: This JavaScript React component (`UserData`) displays authenticated user information retrieved from the NextAuth.js session. It uses the `useSession` hook and renders details like Profile ID, Account Address (with copy functionality), Network, and Session Expiration Time using `@web3uikit/core` Typography components. It only renders if a valid session exists.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript userData.js\n// File path\n// app/components/logoutBtn/userData.js\n\nimport React from \"react\";\nimport styles from \"../../../styles/User.module.css\";\nimport { Typography } from \"@web3uikit/core\";\nimport { useSession } from \"next-auth/react\";\n\nexport default function UserData() {\n  const { data: session, status } = useSession();\n\n  if (session) {\n    return (\n      <div className={styles.data}>\n        <div className={styles.dataCell}>\n          <Typography variant=\"subtitle2\">Profile Id:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\"body16\">{session?.user.profileId}</Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\"subtitle2\">Account:</Typography>\n          <div className={styles.address}>\n            {/* account address */}\n            <Typography copyable variant=\"body16\">\n              {session?.user.address}\n            </Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\"subtitle2\">Network:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\"body16\">{session?.user.network}</Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\"subtitle2\">ExpTime:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\"body16\">\n              {session?.user.expirationTime}\n            </Typography>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-In Landing Page\nDESCRIPTION: Next.js page component that serves as the authentication landing page, featuring wallet connection options and session management\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useTransition } from \"react\";\nimport styles from \"../styles/Home.module.css\";\nimport { useRouter } from \"next/router\";\nimport { Typography } from \"@web3uikit/core\";\nimport { useSession } from \"next-auth/react\";\nimport PhantomBtn from \"../app/components/loginBtn/phantomBtn\";\n\nexport default function Home() {\n  const router = useRouter();\n  const { data: session, status } = useSession();\n  const [isPending, startTransition] = useTransition();\n\n  useEffect(() => {\n    startTransition(() => {\n      session && status === \"authenticated\" && router.push(\"./user\");\n    });\n  }, [session, status]);\n\n  useEffect(() => {\n    startTransition(() => {\n      session && console.log(session);\n    });\n  }, [session]);\n\n  return (\n    <div className={styles.body}>\n      {!isPending && (\n        <div className={styles.card}>\n          <>\n            {!session ? (\n              <>\n                <Typography variant=\"body18\">\n                  Select Wallet for Authentication\n                </Typography>\n                <br />\n                <PhantomBtn />\n              </>\n            ) : (\n              <Typography variant=\"caption14\">Loading...</Typography>\n            )}\n          </>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis API for Authentication (TypeScript)\nDESCRIPTION: Set up the Moralis API endpoint with authentication configuration, including timeout, domain, and expiration time in TypeScript.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\n\nconst DATE = new Date();\nconst FUTUREDATE = new Date(DATE);\nFUTUREDATE.setDate(FUTUREDATE.getDate() + 1);\n\nconst { MORALIS_API_KEY, APP_DOMAIN, NEXTAUTH_URL } = process.env;\n\nif (!MORALIS_API_KEY || !APP_DOMAIN || !NEXTAUTH_URL) {\n  throw new Error(\n    \"Missing env variables. Please add the required env variables.\"\n  );\n}\n\nexport default MoralisNextApi({\n  apiKey: MORALIS_API_KEY,\n  authentication: {\n    timeout: 120,\n    domain: APP_DOMAIN,\n    uri: NEXTAUTH_URL,\n    expirationTime: FUTUREDATE.toISOString(),\n    statement: \"Sign message to authenticate.\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example Payload for NFT Transfers in Moralis Streams (JSON)\nDESCRIPTION: Illustrates the JSON payload structure for NFT (ERC721/ERC1155) transfers detected by a Moralis Web3 Stream. It includes decoded NFT transfer data within the `nftTransfers` array, detailing metadata like `tokenName`, `tokenSymbol` (ERC721), `tokenContractType`, transfer specifics (`from`, `to`, `tokenId`, `amount`), the `operator` (if applicable), and transaction context (`transactionHash`, `logIndex`, `contract`). This data is provided for both confirmed and unconfirmed transfers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/response-body.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": false,\n  \"chainId\": \"0x13881\",\n  \"abi\": [],\n  \"streamId\": \"c4cf9b1a-0cb3-4c79-9ca3-04f11856c555\",\n  \"tag\": \"ChrisWallet\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"29381772\",\n    \"hash\": \"0xdd64099df718e2a439a9805d25a3ab88e943a8c713f2259d9777460d7051572c\",\n    \"timestamp\": \"1669640635\"\n  },\n  \"logs\": [\n    {\n      \"logIndex\": \"72\",\n      \"transactionHash\": \"0x5ecd6b57593ab2f4f3e39fbb3318a3933e2cf9fdcf5b7ca671fb0fc2ce9dc4b5\",\n      \"address\": \"0x26b4e79bca1a550ab26a8e533be97c40973b2671\",\n      \"data\": \"0x\",\n      \"topic0\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n      \"topic1\": \"0x00000000000000000000000074f64bebb1a9615fc7c2ead9c894b6ffd1803582\",\n      \"topic2\": \"0x000000000000000000000000e496601436da37a045d8e88bbd6b2c2e17d8fe33\",\n      \"topic3\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  ],\n  \"txs\": [],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": [\n    {\n      \"operator\": null,\n      \"from\": \"0x74f64bebb1a9615fc7c2ead9c894b6ffd1803582\",\n      \"to\": \"0xe496601436da37a045d8e88bbd6b2c2e17d8fe33\",\n      \"tokenId\": \"0\",\n      \"amount\": \"1\",\n      \"transactionHash\": \"0x5ecd6b57593ab2f4f3e39fbb3318a3933e2cf9fdcf5b7ca671fb0fc2ce9dc4b5\",\n      \"logIndex\": \"72\",\n      \"contract\": \"0x26b4e79bca1a550ab26a8e533be97c40973b2671\",\n      \"tokenName\": \"Test\",\n      \"tokenSymbol\": \"SYMBOL\",\n      \"tokenContractType\": \"ERC721\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Environment variable setup for storing the Moralis Node URL securely.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-wallet-transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMORALIS_NODE_URL=YOUR_NODE_URL\n# Replace YOUR_NODE_URL with the actual node URL from your Moralis dashboard.\n```\n\n----------------------------------------\n\nTITLE: Initializing Solana Program and Connection in Frontend\nDESCRIPTION: TypeScript code to set up the Solana program ID and establish a connection to the devnet cluster for the frontend application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst programId = 'xxx';\nconst connection = new Connection(clusterApiUrl('devnet'));\n```\n\n----------------------------------------\n\nTITLE: Interpreting Moralis Token API Response Format in JSON\nDESCRIPTION: This JSON snippet illustrates the typical API response structure returned by the Moralis Token Pairs API when querying for token pairs and liquidity data. It contains fields such as 'cursor' for pagination, page information, and an array of 'pairs' with detailed info about the exchange, pair label, pricing, and each token in the pair including liquidity in USD. Inputs are the API query parameters; output is a structured JSON object as described. This is for demonstration purposes only and does not require dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-token-pairs-and-liquidity-data.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \\\"cursor\\\": \\\"eyJhbGciOiJIUzI1NiJ9.IjEi.sFnyj-BnyhcH3SQSzsLZZLfxNst7s7LO2BtW70G2ggk\\\",\\n  \\\"page_size\\\": 50,\\n  \\\"page\\\": 1,\\n  \\\"pairs\\\": [\\n    {\\n      \\\"exchange_address\\\": \\\"0x1f98431c8ad98523631ae4a59f267346ea31f984\\\",\\n      \\\"exchange_name\\\": \\\"Uniswap v3\\\",\\n      \\\"exchange_logo\\\": \\\"https://entities-logos.s3.us-east-1.amazonaws.com/uniswap.png\\\",\\n      \\\"pair_label\\\": \\\"USDC/WETH\\\",\\n      \\\"pair_address\\\": \\\"0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640\\\",\\n      \\\"usd_price\\\": 0.9990729133416532,\\n      \\\"usd_price_24hr_percent_change\\\": -0.11184241399839524,\\n      \\\"usd_price_24hr_usd_change\\\": -0.001118638376049086,\\n      \\\"liquidity_usd\\\": 151579536.54,\\n      \\\"base_token\\\": \\\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\\\",\\n      \\\"quote_token\\\": \\\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\\\",\\n      \\\"pair\\\": [\\n        {\\n          \\\"token_address\\\": \\\"0xa0b86991c6218b36c1d19D4a2e9eb0cE3606eB48\\\",\\n          \\\"token_name\\\": \\\"USD Coin\\\",\\n          \\\"token_symbol\\\": \\\"USDC\\\",\\n          \\\"token_logo\\\": \\\"https://logo.moralis.io/0x1_0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48_d021d841dc113e213b32a0cb11ec2f86\\\",\\n          \\\"token_decimals\\\": \\\"6\\\",\\n          \\\"pair_token_type\\\": \\\"token0\\\",\\n          \\\"liquidity_usd\\\": 99513339.77\\n        },\\n        {\\n          \\\"token_address\\\": \\\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\\\",\\n          \\\"token_name\\\": \\\"Wrapped Ether\\\",\\n          \\\"token_symbol\\\": \\\"WETH\\\",\\n          \\\"token_logo\\\": \\\"https://logo.moralis.io/0x1_0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_894ddd91dd6b3f3f3c278629a4e481d6\\\",\\n          \\\"token_decimals\\\": \\\"18\\\",\\n          \\\"pair_token_type\\\": \\\"token1\\\",\\n          \\\"liquidity_usd\\\": 52066196.77\\n        }\\n      ]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sushiswap V2 Pair Reserves with Moralis SDK - JavaScript\nDESCRIPTION: This code demonstrates how to use the Moralis JavaScript SDK to fetch the reserve balances for a specified Sushiswap V2 liquidity pair. It initializes Moralis with your API key, configures the target chain using EvmChain, and queries the reserves via 'EvmApi.defi.getPairReserves'. The pair address and chain are required parameters. Outputs the reserves as JSON. Requires Node.js (v14+), npm, and the Moralis SDK.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-reserves.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xc40d16476380e4037e6b1a2594caf6a6cc8da967\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Transactions using Moralis Transaction API (TypeScript)\nDESCRIPTION: This TypeScript example shows how to obtain all transactions for a wallet address on Ethereum using Moralis Transaction API. Dependencies include 'moralis' and '@moralisweb3/common-evm-utils', and an API key is required. The script initializes Moralis, sets the address and chain, calls 'getWalletTransactions', and logs the JSON results; be sure to install corresponding type definitions for strict typing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing Custom API Banner Component in React (JavaScript/TypeScript)\nDESCRIPTION: This snippet imports a custom API banner React component written in TypeScript for use within a Docusaurus documentation page. The import path is specified for the local project structure. To use this, ensure '@site/src/components/ApiBanner/ApiBanner.tsx' exists and is implemented. It facilitates the inclusion of styled notification or information banners relevant to API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/balance-api/balance-api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis Stream for All NFT Transfers (JSON)\nDESCRIPTION: This JSON object configures a Moralis Stream to monitor all NFT `Transfer(address,address,uint256)` events on the Ethereum mainnet (chainId `0x1`). By setting `allAddresses` to `true` and providing the standard ERC721 Transfer event ABI (with indexed `tokenId`), the stream captures transfers from any contract emitting this event signature. `includeContractLogs` is set to true to include log details. This configuration requires specifying the topic (`topic0`) and the corresponding `abi`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/addresses/listen-to-all-addresses.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"tag\": \"anyEthNFTTransfer\",\n      \"topic0\": [ \"Transfer(address,address,uint256)\" ],\n      \"allAddresses\": true,\n      \"includeContractLogs\": true,\n      \"abi\": [\n        {\n          \"anonymous\": false,\n          \"inputs\": [\n            {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"from\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"to\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": true,\n              \"internalType\": \"uint256\",\n              \"name\": \"tokenId\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"name\": \"Transfer\",\n          \"type\": \"event\"\n        }\n      ],\n      \"chainIds\": [ \"0x1\" ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enhanced ERC20 Token Metadata with Categories and Links (JSON Example)\nDESCRIPTION: This JSON example demonstrates the enriched ERC20 token metadata response format for Uniswap (UNI), featuring the new 'categories' array and 'links' object. The categories provide token classification information, while links contain various social media and web presence URLs for the token project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2024-04-30-token-categories-and-links.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"address\": \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n        \"address_label\": \"Uniswap (UNI)\",\n        \"name\": \"Uniswap\",\n        \"symbol\": \"UNI\",\n        \"decimals\": \"18\",\n        \"logo\": \"https://logo.moralis.io/0x1_0x1f9840a85d5af5bf1d1762f925bdaddc4201f984_fb68fa4a10b54fb793f61fc46a2b04b9\",\n        \"logo_hash\": \"064ee9557deba73c1a31014a60f4c081284636b785373d4ccdd1b3440df11f43\",\n        \"thumbnail\": \"https://logo.moralis.io/0x1_0x1f9840a85d5af5bf1d1762f925bdaddc4201f984_fb68fa4a10b54fb793f61fc46a2b04b9\",\n        \"total_supply\": \"1000000000000000000000000000\",\n        \"total_supply_formatted\": \"1000000000\",\n        \"block_number\": \"10861674\",\n        \"validated\": 1,\n        \"created_at\": \"2020-09-14T18:11:26.000Z\",\n        \"possible_spam\": false,\n        \"verified_contract\": true,\n        \"categories\": [\n            \"Automated Market Maker (AMM)\",\n            \"Decentralized Exchange (DEX)\",\n            \"Decentralized Finance (DeFi)\"\n        ],\n        \"links\": {\n            \"twitter\": \"https://twitter.com/Uniswap\",\n            \"website\": \"https://uniswap.org/\",\n            \"reddit\": \"https://www.reddit.com/r/Uniswap\",\n            \"discord\": \"https://discord.gg/FCfyBSbCU5\",\n            \"github\": \"https://github.com/Uniswap/\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies (Bash)\nDESCRIPTION: This command uses npm to install all required dependencies defined in the project's package.json. npm (Node Package Manager) must be installed, and this must be run from the root project directory after cloning. The installation prepares all JavaScript and build tools needed for a typical React app.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/dexscreener-clone.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component (React/JSX)\nDESCRIPTION: Uses the `ApiReference` React component to dynamically render the documentation for the `getWalletNFTTransfers` API endpoint. The specific content displayed by the component (like parameters, responses, code examples) is determined by the `config.nft.getWalletNFTTransfers` object passed as props.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-wallet-nft-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getWalletNFTTransfers}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Querying Uniswap V2 Pair Reserves in TypeScript\nDESCRIPTION: TypeScript implementation to fetch pair reserves from a Uniswap V2 liquidity pool using Moralis DeFi API. Includes type safety and requires Moralis API key and pair address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-reserves.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Authentication with Solana Adapter - JavaScript\nDESCRIPTION: This JavaScript/JSX component provides Solana wallet authentication in a structure nearly identical to the TypeScript version. It imports and uses @solana/wallet-adapter-react, @moralisweb3/next, bs58, next-auth, and React to manage authentication flow. Dependencies and logic are mostly the same, but typed constructs are avoided, and it is tailored for projects or files using JavaScript instead of TypeScript.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from \\\"react\\\";\nimport { useWallet } from \\\"@solana/wallet-adapter-react\\\";\nimport { WalletMultiButton } from \\\"@solana/wallet-adapter-react-ui\\\";\nrequire(\\\"@solana/wallet-adapter-react-ui/styles.css\\\");\nimport base58 from \\\"bs58\\\";\nimport { signIn, signOut } from \\\"next-auth/react\\\";\nimport { useAuthRequestChallengeSolana } from \\\"@moralisweb3/next\\\";\nimport React from \\\"react\\\";\nexport default function WalletAdaptor() {\n  const { publicKey, signMessage, disconnecting, disconnect, connected } =\n    useWallet();\n  const { requestChallengeAsync, error } = useAuthRequestChallengeSolana();\n  const signCustomMessage = async () => {\n    if (!publicKey) {\n      throw new Error(\\\"Wallet not avaiable to process request.\\\");\n    }\n    const address = publicKey.toBase58();\n    const challenge = await requestChallengeAsync({\n      address,\n      network: \\\"devnet\\\",\n    });\n    const encodedMessage = new TextEncoder().encode(challenge?.message);\n    if (!encodedMessage) {\n      throw new Error(\\\"Failed to get encoded message.\\\");\n    }\n\n    const signedMessage = await signMessage?.(encodedMessage);\n    const signature = base58.encode(signedMessage);\n    try {\n      const authResponse = await signIn(\\\"moralis-auth\\\", {\n        message: challenge?.message,\n        signature,\n        network: \\\"Solana\\\",\n        redirect: false,\n      });\n      if (authResponse?.error) {\n        throw new Error(authResponse.error);\n      }\n    } catch (e) {\n      disconnect();\n      console.log(e);\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      disconnect();\n      console.log(error);\n    }\n  }, [disconnect, error]);\n\n  useEffect(() => {\n    if (disconnecting) {\n      signOut({ redirect: false });\n    }\n  }, [disconnecting]);\n\n  useEffect(() => {\n    connected && signCustomMessage();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connected]);\n\n  return <WalletMultiButton />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Reading EvmAddress\nDESCRIPTION: Shows how to create and read properties from an EvmAddress instance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmAddress } from \"@moralisweb3/common-evm-utils\";\n\n// by lowercase address\nconst address = EvmAddress.create(\"0xa9c4c85dd0495e32d08ef64d51fdeb35d200edfe\");\n// or by checksum\nconst address = EvmAddress.create(\"0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe\");\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana SPL Token Balance API Reference\nDESCRIPTION: This JSX snippet utilizes the imported `ApiReference` component to display the documentation for the Solana `getSPL` API endpoint. It passes the specific configuration for this endpoint (`config.solana.getSPL`) as props.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/02-Get Token Balances/get-spl-token-balance.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getSPL} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Normalized NFT Metadata with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Moralis EvmApi to retrieve normalized NFT metadata for a specific token on the Ethereum chain. It requires the Moralis library and API key for authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/02-NFT Metadata/metadata-normalization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\nconst tokenId = \"1\";\n\nawait Moralis.start({\n  apiKey: \"<YOUR_API_KEY>\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.nft.getNFTMetadata({\n  address,\n  chain,\n  tokenId,\n  normalizeMetadata: true,\n});\n\nconsole.log(response.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Attaching to Deployed Contract Instance - Ethers.js - JavaScript\nDESCRIPTION: Uses the previously obtained ContractFactory to attach to an already deployed contract by providing the contract's address. Assumes the contract address ('0x5974f055DE2dDEcc2f07F0dE999c72DD21738a04') is correct and that the network connection is properly configured. The returned contract object enables interaction with on-chain contract functions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst contract = await Contract.attach(\"0x5974f055DE2dDEcc2f07F0dE999c72DD21738a04\")\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for getContractNFTs Endpoint\nDESCRIPTION: This JSON object exemplifies the structure of the response returned by the Moralis `getContractNFTs` endpoint (or its SDK equivalents). It includes pagination information (`total`, `page`, `page_size`, `cursor`), a `status` indicating sync state, and a `result` array. Each element in the `result` array represents an NFT and contains details like `token_address`, `token_id`, `amount`, `name`, `symbol`, `token_uri`, and parsed `metadata`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"total\": 9991,\n  \"page\": 0,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3aGVyZSI6eyJ0b2tlbl9hZGRyZXNzIjoiMHhiNDdlM2NkODM3ZGRmOGU0YzU3ZjA1ZDcwYWI4NjVkZTZlMTkzYmJiIn0sInRva2VuX2FkZHJlc3MiOiIweGI0N2UzY2Q4MzdkZGY4ZTRjNTdmMDVkNzBhYjg2NWRlNmUxOTNiYmIiLCJsaW1pdCI6MTAwLCJvZmZzZXQiOjAsIm9yZGVyIjpbXSwicGFnZSI6MSwia2V5IjoiZmQ5MmE0ODg3MmE4NjIwZTFlNmU0NTk3ODZkMTExYWYiLCJ0b3RhbCI6OTk5MSwiaWF0IjoxNjY3ODA4NzcxfQ.9qXwHyyUKJkzrub-ze-q2gm8dC0dy-jvgF0CJrm5piY\",\n  \"result\": [\n    {\n      \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n      \"token_id\": \"9082\",\n      \"amount\": \"1\",\n      \"token_hash\": \"fffdaced3ddfb220d9124289a518bb97\",\n      \"block_number_minted\": \"12021693\",\n      \"updated_at\": null,\n      \"contract_type\": null,\n      \"name\": \"CRYPTOPUNKS\",\n      \"symbol\": \"Ͼ\",\n      \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/9082\",\n      \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk9082.webp\\\",\\\"name\\\":\\\"CryptoPunk 9082\\\",\\\"attributes\\\":[\\\"Bandana\\\",\\\"Big Shades\\\",\\\"Shadow Beard\\\"],\\\"description\\\":\\\"Male\\\"}\",\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-10-05T17:55:52.262Z\",\n      \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n    },\n    {\n      \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n      \"token_id\": \"4799\",\n      \"amount\": \"1\",\n      \"token_hash\": \"fff8ff007820e85a75c545389d5a88d4\",\n      \"block_number_minted\": \"11637283\",\n      \"updated_at\": null,\n      \"contract_type\": null,\n      \"name\": \"CRYPTOPUNKS\",\n      \"symbol\": \"Ͼ\",\n      \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/4799\",\n      \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk4799.webp\\\",\\\"name\\\":\\\"CryptoPunk 4799\\\",\\\"attributes\\\":[\\\"Blue Eye Shadow\\\",\\\"Black Lipstick\\\",\\\"Straight Hair Blonde\\\",\\\"Earring\\\"],\\\"description\\\":\\\"Female\\\"}\",\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-07-17T17:25:24.644Z\",\n      \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n    },\n    {\n      \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n      \"token_id\": \"47\",\n      \"amount\": \"1\",\n      \"token_hash\": \"fff3657368693f145d0ad29453f6cd4d\",\n      \"block_number_minted\": \"3918216\",\n      \"updated_at\": null,\n      \"contract_type\": null,\n      \"name\": \"CRYPTOPUNKS\",\n      \"symbol\": \"Ͼ\",\n      \"token_uri\": \"https://www.larvalabs.com/cryptopunks/details/47\",\n      \"metadata\": \"{\\\"image\\\":\\\"https://www.larvalabs.com/cryptopunks/cryptopunk047.webp\\\",\\\"name\\\":\\\"CryptoPunk 047\\\",\\\"attributes\\\":[\\\"Knitted Cap\\\"],\\\"description\\\":\\\"Male\\\"}\",\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-07-24T12:12:11.930Z\",\n      \"minter_address\": \"0xc352b534e8b987e036a93539fd6897f53488e56a\"\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Web3 Authentication Sign-in Component in React\nDESCRIPTION: React component that handles Web3 authentication using MetaMask wallet. Implements connection to Web3 provider, message signing, and server verification flow using wagmi hooks and axios for API calls.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNavigate } from \"react-router-dom\";\n\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\nimport axios from \"axios\";\n\nexport default function SignIn() {\n  const navigate = useNavigate();\n\n  const { connectAsync } = useConnect();\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n\n  const handleAuth = async () => {\n    //disconnects the web3 provider if it's already active\n    if (isConnected) {\n      await disconnectAsync();\n    }\n    // enabling the web3 provider metamask\n    const { account } = await connectAsync({\n      connector: new InjectedConnector(),\n    });\n\n    const userData = { address: account, chain: 1 };\n    // making a post request to our 'request-message' endpoint\n    const { data } = await axios.post(\n      `${process.env.REACT_APP_SERVER_URL}/request-message`,\n      userData,\n      {\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n      }\n    );\n    const message = data.message;\n    // signing the received message via metamask\n    const signature = await signMessageAsync({ message });\n\n    await axios.post(\n      `${process.env.REACT_APP_SERVER_URL}/verify`,\n      {\n        message,\n        signature,\n      },\n      { withCredentials: true } // set cookie from Express server\n    );\n\n    // redirect to /user\n    navigate(\"/user\");\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={() => handleAuth()}>Authenticate via MetaMask</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Filtering Lens NFTs with Moralis API\nDESCRIPTION: Enhanced getServerSideProps function that uses Moralis API to fetch NFTs owned by the profile, filters for Lens-specific NFTs, and passes them to the component. This code identifies NFTs that represent Lens follows.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst balances = await Moralis.EvmApi.account.getNFTs({\n    address: response?.data.profile.ownedBy,\n    chain: 0x89,\n  });\n\n  let nftArray = [];\n  let nfts = balances?.data.result;\n\n  for (let i = 0; i < nfts.length; i++) {\n    if (nfts[i].metadata !== null) {\n      if (\n        'animation_url' in JSON.parse(nfts[i].metadata) &&\n        JSON.parse(nfts[i].metadata).animation_url !== null &&\n        JSON.parse(nfts[i].metadata).animation_url.includes('.lens')\n      ) {\n        nftArray.push(JSON.parse(nfts[i].metadata).animation_url);\n      }\n    }\n  }\n\n  return {\n    props: { profile: response?.data.profile, nftArray: nftArray },\n  };\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Portfolio Balance with Python\nDESCRIPTION: Python implementation using Moralis SDK to retrieve Solana portfolio balance. Uses the sol_api module and requires an API key for authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/balance-api/how-to-get-solana-portfolio-balance-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\",\n    \"network\": \"mainnet\",\n}\n\nresult = sol_api.account.get_portfolio(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Domain using TypeScript\nDESCRIPTION: TypeScript implementation for resolving an ENS domain to an Ethereum address using Moralis API. Includes type safety and requires Moralis package and API key configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-domain.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const domain = \"vitalik.eth\";\n\n  const response = await Moralis.EvmApi.resolve.resolveENSDomain({\n    domain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Python Implementation for ENS Domain Registration Monitoring\nDESCRIPTION: Python implementation for monitoring ENS domain registrations using Moralis Python SDK. Configures stream settings, ABI, and advanced filtering options for high-value registrations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-monitor-ens-domain-registrations.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import streams\n\nwebhook_url = 'WEB_HOOK_URL_HERE'\napi_key = 'API_KEY_HERE'\n\nabi = [{\n  \"anonymous\": False,\n  \"inputs\": [\n    {\n      \"indexed\": False,\n      \"internalType\": \"string\",\n      \"name\": \"name\",\n      \"type\": \"string\",\n    },\n    {\n      \"indexed\": True,\n      \"internalType\": \"bytes32\",\n      \"name\": \"label\",\n      \"type\": \"bytes32\",\n    },\n    {\n      \"indexed\": True,\n      \"internalType\": \"address\",\n      \"name\": \"owner\",\n      \"type\": \"address\",\n    },\n    {\n      \"indexed\": False,\n      \"internalType\": \"uint256\",\n      \"name\": \"cost\",\n      \"type\": \"uint256\",\n    },\n    {\n      \"indexed\": False,\n      \"internalType\": \"uint256\",\n      \"name\": \"expires\",\n      \"type\": \"uint256\",\n    },\n  ],\n  \"name\": \"NameRegistered\",\n  \"type\": \"event\",\n}]\n\nadvanced_options = [\n  {\n    \"topic0\": \"NameRegistered(string,bytes32,address,uint256,uint256)\",\n    \"filter\": {\n      \"and\": [\n        { \"eq\": [\"owner\", \"0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5\"] },\n        { \"gt\": [\"cost\", \"1000000000000000000\"] }\n      ]\n    }\n  }\n]\n\nbody = {\n    \"webhookUrl\": webhook_url,\n    \"description\": \"ENS Name Registrations\",\n    \"tag\": \"ensRegistrationByBob\",\n    \"topic0\": [\"NameRegistered(string,bytes32,address,uint256,uint256)\"],\n    \"allAddresses\": False,\n    \"includeNativeTxs\": True,\n    \"includeContractLogs\": True,\n    \"includeInternalTxs\": False,\n    \"abi\": abi,\n    \"advancedOptions\": advanced_options,\n    \"chainIds\": [\"0x1\"],\n}\n\nresult = streams.evm.create_stream(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n\nparams = {\n    \"id\": result[\"id\"],\n}\nbody = {\n    \"address\": \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n}\n\nresult = streams.evm.add_address_to_stream(\n    api_key=api_key,\n    params=params,\n    body=body,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature - Moralis Streams - Python\nDESCRIPTION: This Python function verifies the signature of a webhook request by concatenating the request data and secret, then computing the Keccak hash using Web3.py. It checks the computed signature against the 'x-signature' header value. Dependencies: Web3.py. Key parameters: req (request object), secret (secret key). Expects bytes-like body and string secret; raises TypeError if signature missing, ValueError if not matched.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/response-body.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef verify_Signature(req, secret):\n    provided_signature = req.headers.get(\"x-signature\")\n    if not provided_signature:\n        raise TypeError(\"Signature not provided\")\n\n    data = req.data+secret.encode()\n    signature = Web3.keccak(text=data.decode()).hex()\n\n    if provided_signature != signature:\n        raise ValueError(\"Invalid Signature\")\n```\n\n----------------------------------------\n\nTITLE: Native Transaction with Contract Logs Response\nDESCRIPTION: Extended JSON structure for native transactions including contract interaction logs, NFT transfers, and ERC20 approvals.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/response-body.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": true,\n  \"chainId\": \"0x1\",\n  \"abi\": [],\n  \"streamId\": \"c28d9e2e-ae9d-4fe6-9fc0-5fcde2dcdd17\",\n  \"tag\": \"native_transactions_with_logs\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"15988780\",\n    \"hash\": \"0xf40d623518fa16c20614278656e426721820031913fd9c670330d4b2b751d50e\",\n    \"timestamp\": \"1668676499\"\n  },\n  \"logs\": [\n    {\n      \"logIndex\": \"135\",\n      \"transactionHash\": \"0x59cd370a41c699bdb77a020b3a27735bb7442ace68ec8313040b8b9ee2672244\",\n      \"address\": \"0x96beaa1316f85fd679ec49e5a63dacc293b044be\",\n      \"data\": \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n      \"topic0\": \"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\",\n      \"topic1\": \"0x0000000000000000000000001748789703159580520cc2ce6d1ba01e7359c44c\",\n      \"topic2\": \"0x0000000000000000000000001111111254eeb25477b68fb85ed929f73a960582\",\n      \"topic3\": null\n    }\n  ],\n  \"txs\": [\n    {\n      \"hash\": \"0x0bd4d05cfee0107ac69f7add8e21d66c3e4fd014b7aad595d6336910a6bfee39\",\n      \"gas\": \"109803\",\n      \"gasPrice\": \"13481860832\",\n      \"nonce\": \"291\",\n      \"input\": \"0x12aa3caf00000000000000000000000053222470cdcfb8081c0e3a50fd106f0d69e63f20000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000053222470cdcfb8081c0e3a50fd106f0d69e63f200000000000000000000000003ec92c9d09403a76bda445ffdfaf6de59717219f00000000000000000000000000000000000000000000000e56d1e2316582742700000000000000000000000000000000000000000000000e53262757bf439a6f0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000006200003c4121c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000e0201111111254eeb25477b68fb85ed929f73a960582000000000000000e56d1e23165827427e26b9977\",\n      \"transactionIndex\": \"92\",\n      \"fromAddress\": \"0x3ec92c9d09403a76bda445ffdfaf6de59717219f\",\n      \"toAddress\": \"0x1111111254eeb25477b68fb85ed929f73a960582\",\n      \"value\": \"0\",\n      \"type\": \"2\",\n      \"v\": \"0\",\n      \"r\": \"5776335037912114053229884461119750189570811705028494471955321961511802532800\",\n      \"s\": \"50481622078880425443801093626517935308993319586804232237135731552994210947860\",\n      \"receiptCumulativeGasUsed\": \"7225224\",\n      \"receiptGasUsed\": \"70168\",\n      \"receiptContractAddress\": null,\n      \"receiptRoot\": null,\n      \"receiptStatus\": \"1\"\n    }\n  ],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [\n    {\n      \"transactionHash\": \"0x59cd370a41c699bdb77a020b3a27735bb7442ace68ec8313040b8b9ee2672244\",\n      \"logIndex\": \"135\",\n      \"contract\": \"0x96beaa1316f85fd679ec49e5a63dacc293b044be\",\n      \"owner\": \"0x1748789703159580520cc2ce6d1ba01e7359c44c\",\n      \"spender\": \"0x1111111254eeb25477b68fb85ed929f73a960582\",\n      \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n      \"tokenName\": \"This Is Not Alpha\",\n      \"tokenSymbol\": \"TINA\",\n      \"tokenDecimals\": \"18\",\n      \"valueWithDecimals\": \"1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+59\"\n    }\n  ],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining sendToMany Function Signature in Solidity\nDESCRIPTION: Declares the `sendToMany` function signature within the `GMPDistribution` contract. This function is designed to initiate an interchain transaction, taking parameters for the destination chain name (`_destChain`), destination contract address (`_destContractAddr`), an array of recipient addresses on the destination chain (`_destinationAddrs`), the token symbol (`_symbol`), and the token amount (`_amount`). It's marked `external payable` to accept native currency for gas fees.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sendToMany(\n\nstring memory _destChain,\n\nstring memory _destContractAddr, address[] calldata _destinationAddrs, string memory _symbol,\n\nuint256 _amount\n\n) external payable {}\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs with Moralis Python SDK\nDESCRIPTION: This Python script utilizes the Moralis Python SDK (`moralis.evm_api`) to get NFTs owned by a wallet address. It sets up parameters including the API key, target address, chain ('eth'), and other optional settings like format, limit, and metadata normalization. The `get_wallet_nfts` function is called, and the resulting dictionary is converted to a JSON string for printing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Snipers by Pair Address via Moralis API\nDESCRIPTION: Fetches addresses identified as 'snipers' for a specific token pair using the Moralis Deep Index API v2.2. Requires the pair `:address` path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/pairs/:address/snipers\n```\n\n----------------------------------------\n\nTITLE: Understanding API Response for Bonding Status (JSON, Example)\nDESCRIPTION: This JSON example illustrates the response structure returned by the Moralis Solana API when querying for a token's bonding status. The response provides 'mint', which is the Solana token address, and 'bondingProgress', a number (percentage between 0-100) indicating how far the token is along the bonding curve. No dependencies are required beyond making a successful API call. This format is intended for easy programmatic use when building token trackers or dashboards.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/09-get-bonding-status.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mint\": \"H2p8S7Ssd3mrBft1bcDGnzW8KNRAGtPTtJLv1tnupump\",\n  \"bondingProgress\": 96.788763272986\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Pump.fun Token Pairs API (JSON)\nDESCRIPTION: Illustrates the JSON structure returned by the Moralis Solana API endpoint for token pairs. The response contains a `pairs` array, where each object represents a trading pair and includes details like exchange information (name, logo, address), pair address, label, USD price, 24-hour price change, volume, liquidity, and details about the base and quote tokens involved (address, name, symbol, logo, decimals, liquidity).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/05-get-pairs-and-liquidity-data-for-pump-fun.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pairs\": [\n    {\n      \"exchangeAddress\": \"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\",\n      \"exchangeName\": \"Raydium AMM v4\",\n      \"exchangeLogo\": \"https://entities-logos.s3.amazonaws.com/raydium.png\",\n      \"pairAddress\": \"Bzc9NZfMqkXR6fz1DBph7BDf9BroyEf6pnzESP7v5iiw\",\n      \"pairLabel\": \"Fartcoin /SOL\",\n      \"usdPrice\": 1.199318671,\n      \"usdPrice24hrPercentChange\": 22.664745257790372,\n      \"usdPrice24hrUsdChange\": 22.664745257790372,\n      \"volume24hrNative\": 273987.170173767,\n      \"volume24hrUsd\": 63991693.95772195,\n      \"liquidityUsd\": 25907004.26453429,\n      \"baseToken\": \"9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump\",\n      \"quoteToken\": \"So11111111111111111111111111111111111111112\",\n      \"inactivePair\": false,\n      \"pair\": [\n        {\n          \"tokenAddress\": \"9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump\",\n          \"tokenName\": \"Fartcoin \",\n          \"tokenSymbol\": \"Fartcoin \",\n          \"tokenLogo\": null,\n          \"tokenDecimals\": \"6\",\n          \"pairTokenType\": \"token0\",\n          \"liquidityUsd\": 12937540.20684488\n        },\n        {\n          \"tokenAddress\": \"So11111111111111111111111111111111111111112\",\n          \"tokenName\": \"Wrapped SOL\",\n          \"tokenSymbol\": \"SOL\",\n          \"tokenLogo\": null,\n          \"tokenDecimals\": \"9\",\n          \"pairTokenType\": \"token1\",\n          \"liquidityUsd\": 12969464.057689412\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Streams API Workflow with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the data flow for the Moralis Streams API. It shows how nodes from various blockchains (Ethereum, Polygon, BNB) report new blocks to the Streams API. The API then processes this information based on user-defined streams and sends webhook notifications to the configured user server when relevant events occur.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    A[ETH Node] -- New Block --> D(Streams API);\n    B[Polygon Node] -- New Block --> D;\n    C[BNB Node] -- New Block --> D;\n    D --> E{Your Stream};\n    E -- Webhook --> F[Your Server];\n```\n\n----------------------------------------\n\nTITLE: EVM RPC Response: eth_call\nDESCRIPTION: Example response format for eth_call RPC method showing the execution result.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Security Rules for Moralis Streams - Firebase Rules\nDESCRIPTION: This snippet configures strict Firestore security rules to allow read access but deny writes on any documents created by the Moralis Streams extension under the moralis path. These rules are intended to protect sensitive blockchain event data from external modification by only permitting reads and disallowing any write operation for all users. This should be placed in the project's 'firestore.rules' file and deployed via the Firebase console or CLI. No further configuration is needed unless customization for stricter constraints or specific users is required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/firebase.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /moralis/{collectionType}/{collectionName}/{id} {\n      allow read;\n      allow write: if false;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Metadata with Moralis Python Library\nDESCRIPTION: This Python snippet shows how to retrieve metadata for specified ERC20 token addresses using the Moralis EVM API Python library. It requires setting the Moralis API key and defining parameters including the list of token addresses and the target chain identifier (e.g., 'eth', 'polygon'). The resulting metadata is printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"addresses\": [\"ERC20_TOKEN_ADDRESS\"],\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.token.get_token_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Program Dependencies\nDESCRIPTION: Commands to add required dependencies (solana_program and borsh) to the Rust project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo add solana_program\ncargo add borsh\n```\n\n----------------------------------------\n\nTITLE: Displaying Mainnet Badge using JSX\nDESCRIPTION: Renders a simple `MainnetBadge` component alongside the main heading. This component likely indicates visually that the documented API feature is available and applicable to mainnet environments.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/06-Get Pairs & Liquidity/get-aggregated-token-pair-stats.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<MainnetBadge />\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC-20 Token Balances using Moralis SDK in C#\nDESCRIPTION: Utilizes the Moralis .NET SDK's `Web3Api.Account.GetTokenBalances` method to asynchronously fetch a list of ERC-20 token balances held by the specified address on the given chain ID. Requires prior `MoralisClient` initialization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Load ERC-20 Token List for address\nList<Erc20TokenBalance> erc20Balnaces = await MoralisClient.Web3Api.Account.GetTokenBalances(address, chainId);\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream-Specific Record Consumption in JSON\nDESCRIPTION: This example shows the response from the /stats/{streamId} API endpoint, providing statistics for a specific stream including logs, transactions, and internal transactions processed since creation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/records-and-pricing.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"totalWebhooksDelivered\": 0,\n  \"totalWebhooksFailed\": 0,\n  \"totalLogsProcessed\": 0,\n  \"totalTxsProcessed\": 0,\n  \"totalTxsInternalProcessed\": 0,\n  \"createdAt\": \"2022-10-25T08:21:00.877Z\",\n  \"updatedAt\": \"2022-10-25T08:21:00.877Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in JavaScript/JSX\nDESCRIPTION: Imports the ApiReference React component from a local path within the documentation site structure. This component is likely responsible for rendering standardized API documentation sections based on configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/delete-address-from-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Handling Firestore Blockchain Event Streams using Cloud Functions - Firebase (TypeScript)\nDESCRIPTION: This TypeScript code defines a Firebase Cloud Function triggered by writes to a specific Firestore collection ('moralis/txs/LoremIpsum'). The onWrite function reacts to all document changes, checks if the transaction is confirmed, and then performs a custom operation. Dependencies: 'firebase-functions' package and correct initialization in the Firebase backend. Inputs: Change events from the collection. Output: Execution of 'doSomeOperation' when a confirmed transaction is detected. Modify 'collectionName' as needed to target your stream's collection.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/firebase.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as functions from \"firebase-functions\";\n\nconst collectionName = \"LoremIpsum\";\n\nexport const onItemWrite = functions.firestore\n  .document(`moralis/txs/${collectionName}/{id}`)\n  .onWrite(async (change) => {\n    const transaction = change.after.data();\n\n    if (transaction && transaction.confirmed) {\n      doSomeOperation(/* ... */);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Balance Hook\nDESCRIPTION: Example of using Moralis hook to fetch native token balance\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEvmNativeBalance } from \"@moralisweb3/next\";\n\nfunction HomePage() {\n  const address = \"0x1...\";\n  const { data: nativeBalance } = useEvmNativeBalance({ address });\n  return (\n    <div>\n      <h3>Wallet: {address}</h3>\n      <h3>Native Balance: {nativeBalance?.balance.ether} ETH</h3>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Token Pair Statistics by Pair Address - HTTP Endpoint\nDESCRIPTION: Returns real-time statistics (e.g., liquidity, volume) for a specific token pair by using its pairAddress and network. Outputs JSON and supports analytics dashboards; requires authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/token/:network/pairs/:pairAddress/stats\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Components in JSX\nDESCRIPTION: Imports necessary components for rendering API documentation and configuration data. The page uses ApiReference and ApiBanner components along with configuration data to generate the documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/02-Get Token Metadata/get-token-metadata-by-symbol.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for NextJS Phantom Wallet Authentication\nDESCRIPTION: Install the required packages including Moralis Next, NextAuth, and Web3UIKit for implementing Phantom wallet authentication in a NextJS application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @moralisweb3/next next-auth @web3uikit/core\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Owners with Moralis NFT API in TypeScript\nDESCRIPTION: This snippet shows how to fetch NFT owner information using Moralis NFT API in a TypeScript project. The script imports the required modules, starts Moralis with an API key, sets the NFT contract address, token ID, and chain, and queries the owner list with getNFTTokenIdOwners. TypeScript's type safety is leveraged for EvmChain and the API functions. Prerequisites include installing 'moralis' and '@moralisweb3/common-evm-utils'. Inputs are the API key, contract address, chain, and token id; the output is owner details as JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owner-of-an-nft.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xa186d739ca2b3022b966194004c6b01855d59571\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const tokenId = \"1\";\n\n  const response = await Moralis.EvmApi.nft.getNFTTokenIdOwners({\n    address,\n    chain,\n    tokenId,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Token Stats via Moralis API\nDESCRIPTION: Fetches statistical data for a specific ERC20 token identified by its address using the Moralis Deep Index API v2.2. Requires the `:address` path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/erc20/:address/stats\n```\n\n----------------------------------------\n\nTITLE: Displaying Mainnet Indicator Badge\nDESCRIPTION: This JSX snippet renders a `MainnetBadge` React component. It is used alongside the page title to visually indicate that the described API endpoint or feature operates on the Solana Mainnet.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/price-api/get-multiple-token-prices.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MainnetBadge />\n```\n\n----------------------------------------\n\nTITLE: BalanceOf ABI Definition for ERC20 Tokens\nDESCRIPTION: JavaScript object defining the ABI for the balanceOf function found in ERC20 contracts. This ABI is used in trigger configurations to fetch token balances.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/triggers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst balanceOfSenderAbi = {\n  constant: true,\n  inputs: [\n    {\n      name: \"owner\",\n      type: \"address\",\n    },\n  ],\n  name: \"balanceOf\",\n  outputs: [\n    {\n      name: \"\",\n      type: \"uint256\",\n    },\n  ],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\",\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component and Config\nDESCRIPTION: Import statements for the ApiReference React component and API configuration file used to display the documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/20-Utils/web3-api-version.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet Stats API Reference via React in JavaScript\nDESCRIPTION: This snippet renders the ApiReference React component for the 'Get wallet stats' endpoint, spreading properties from the imported wallet configuration object. It relies on the previously imported config object and ApiReference component. The main input is 'config.wallet.getWalletStats', which provides specification and options for the API reference. Output is a dynamic UI component rendering API documentation. The code assumes availability of required UI libraries and configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/08- Get Wallet Details/get-wallet-stats.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.wallet.getWalletStats}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install the node-fetch package required for making HTTP requests to the Moralis API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-aggregated-token-pair-stats.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install node-fetch --save\n```\n\n----------------------------------------\n\nTITLE: Creating a Moralis Stream for Filtered ERC20 Transfers in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to programmatically create a Moralis Stream to monitor ERC20 'transfer' events on the Ethereum blockchain. It defines the standard ERC20 transfer ABI, specifies filter conditions to only capture transfers from '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5' where the value is greater than 1000 units (adjusted for token decimals, e.g., 1000000000 for USDT with 6 decimals). The stream options configure the chain, description, tag, ABI, topic, advanced filtering, 'allAddresses' setting, and the webhook URL for receiving event notifications. The stream is created using `Moralis.Streams.add`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-listen-all-er-c20-token-transfers-over-certain-amount-sent-by-specific-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ERC20_transfer_ABI = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" },\n  ],\n  \"name\": \"transfer\",\n  \"type\": \"event\",\n}]; // valid abi of the event\n\nconst filter_ERC20 = {  \n  \"and\": [  \n    { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] },  \n    { \"gt\": [\"value\", \"1000000000\"] }, // Example of USDT (6 Decimals) \n  ],  \n}; // only receive ERC20 contract transfers where sender is a specific address and the number of coins transferred is over 1000\n\nconst options = {\n  chains: [EvmChain.ETHEREUM], // list of blockchains to monitor\n  description: \"monitor all ERC20 transfers\", // your description\n  tag: \"ERC20_transfers\", // give it a tag\n  abi: ERC20_transfer_ABI,\n  includeContractLogs: true,\n  allAddresses: true,\n  topic0: [\"transfer(address,address,uint256)\"], // topic of the event\n  advancedOptions: [\n    {\n      topic0: \"transfer(address,address,uint256)\",\n      filter: filter_ERC20\n    },\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\", // webhook url to receive events,\n];\n\nconst stream = await Moralis.Streams.add(options);\n\n```\n\n----------------------------------------\n\nTITLE: Reporting Spam ERC20 Contract - Moralis - Python\nDESCRIPTION: This snippet illustrates how to use the Moralis Python SDK to report a spam ERC20 contract. It requires the moralis package and Python 3.x. The code sets the API key, defines the contract info, reason, report type, and contract type in a request body, and specifies 'eth' as the target chain. It calls evm_api.utils.review_contracts and prints out the response. All inputs such as the contract address and reason must be set, and required dependencies installed via pip.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/spam-detection/report-erc20-spam.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nbody = {\n    \"contracts\": [\n        {\n            \"contract_address\": \"0x06012c8cf97bead5deae237070f9587f8e7a266d\",\n            \"reason\": \"My Reason\",\n            \"report_type\": \"spam\",\n            \"contract_type\": \"ERC20\"\n        }\n    ]\n}\n\nparams = {\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.utils.review_contracts(\n    api_key=api_key,\n    params=params,\n    body=body\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Token Balances via Moralis API (SimpleHash Migration)\nDESCRIPTION: Provides Moralis API endpoint URLs to replace the deprecated SimpleHash `api.simplehash.com/api/v0/fungibles/balances` endpoint for fetching token balances by wallet addresses across specified chains. Includes Moralis endpoints for EVM token balances, Solana wallet portfolio (including native and SPL tokens), and Solana SPL token balances.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/wallets/:address/tokens\n```\n\nLANGUAGE: URL\nCODE:\n```\nhttps://solana-gateway.moralis.io/account/:network/:address/portfolio\n```\n\nLANGUAGE: URL\nCODE:\n```\nhttps://solana-gateway.moralis.io/account/:network/:address/tokens\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component for Streams GetStats Endpoint\nDESCRIPTION: JSX code that renders the ApiReference component with configuration for the GetStats endpoint from the Streams API. The component displays the API reference documentation based on the provided configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/03-Stats/get-stats.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.streams.GetStats} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Configuration in JavaScript/JSX\nDESCRIPTION: Imports API configuration data from a JSON file located relatively within the project structure. This configuration object likely contains details for various API endpoints, used here to populate the ApiReference component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/delete-address-from-stream.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Capturing Internal Transactions with Moralis Streams (JSON)\nDESCRIPTION: This JSON sample displays internal (contract-to-contract) transaction details as reported by Moralis Streams when internal transfers are enabled. It lists the sender, receiver, value, gas, and associated hash, in addition to usual streaming fields. Activate 'Internal Transactions' in the stream configuration; expects on-chain internal calls as input; outputs decoded internal transaction events, with each entry providing sufficient detail for tracing contract value flows.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/response-body.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": false,\n  \"chainId\": \"0x1\",\n  \"abi\": [],\n  \"streamId\": \"c28d9e2e-ae9d-4fe6-9fc0-5fcde2dcdd17\",\n  \"tag\": \"internal transactions\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"15988462\",\n    \"hash\": \"0xa4520ca85758374d05c31f6e6869f081997daa6e6b18449d49cfac4558f9e7f8\",\n    \"timestamp\": \"1668672659\"\n  },\n  \"logs\": [],\n  \"txs\": [],\n  \"txsInternal\": [\n    {\n      \"from\": \"0x1111111254eeb25477b68fb85ed929f73a960582\",\n      \"to\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n      \"value\": \"11000000000000000\",\n      \"gas\": \"117885\",\n      \"transactionHash\": \"0x0e5c3114c0ee7d29cca17aa0b8e790c4d7d25b4789bd14150f113956b5ce94de\"\n    }\n  ],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance with Python\nDESCRIPTION: Python implementation using Moralis SDK to get native balance of an Ethereum address. Requires the moralis package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-balance-of-a-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.balance.get_native_balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Attaching Multiple Addresses to a Moralis Stream using JavaScript\nDESCRIPTION: This snippet demonstrates how to add one or more blockchain addresses to an existing Moralis stream using the `Moralis.Streams.addAddress` method. It requires the Moralis SDK, the target stream's `streamId`, and an array of addresses (or a single address string) to be attached. The operation is asynchronous.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/monitor-multiple-addresses.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Add addresses\nawait Moralis.Streams.addAddress({\n  id: streamId,\n  address: [\n    \"0xCFDF6Aaae9f6B927E3736FBD327853B622c5060E\",\n    \"0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B\",\n  ], // Can also be a single string\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for NFT Balance Fetcher\nDESCRIPTION: Commands to create a new Node.js project and install required dependencies ethers.js and dotenv.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-nft-balances.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new Node.js project\nmkdir nft-balance-fetcher\ncd nft-balance-fetcher\nnpm init -y\n\n# Install ethers.js and dotenv\nnpm install ethers dotenv\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response\nDESCRIPTION: Example JSON response from the Moralis API showing the NFT balance data structure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/nft-api/how-to-get-spl-nft-balance-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"associatedTokenAddress\": \"AUmHKB9srYgzHW2E5NuEWyG9wp5g4Cbewxurr1geV1iR\",\n    \"mint\": \"53kauHy6PJx9iykDV9BxpCBbXe2yPwA5tRcKcNDmfCxn\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Moralis API Query Syntax in JavaScript\nDESCRIPTION: This snippet demonstrates the fundamental structure for making API calls to Moralis EVM (`EvmApi`) and Solana (`SolApi`) endpoints using the JavaScript SDK. Replace `<DOMAIN>` and `<METHOD>` with specific API domain and method names as found in the Moralis API references.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/query-from-evm-or-solana.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from 'moralis'\\n\\nconst result1 = await Moralis.EvmApi.'<DOMAIN>'.'<METHOD>'\\nconst result2 = await Moralis.SolApi.'<DOMAIN>'.'<METHOD>'\n```\n\n----------------------------------------\n\nTITLE: Deleting an Address from a Stream in Moralis JavaScript\nDESCRIPTION: This code snippet removes a specified address from a Moralis stream using the Moralis.Streams.deleteAddress function. It expects the stream ID and the address to be deleted as parameters. You must have initialized the Moralis JavaScript SDK. Inputs: id (stream ID), address (Ethereum address as string); Output: a promise resolving to the SDK response.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/addresses/monitor-multiple-addresses.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Delete an address\\nawait Moralis.Streams.deleteAddress({\\n  id,\\n  address,\\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Top NFT Collections Endpoint in JSX\nDESCRIPTION: This code snippet renders an API reference component for the 'getHottestNFTCollectionsByTradingVolume' endpoint. It imports necessary components and configuration, and previously included an information admonition about premium access requirements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/10-Get Trending NFTs/get-top-nft-collections-by-trading-volume.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference\n  {...config[\"market-data\"].getHottestNFTCollectionsByTradingVolume}\n>\n  {/* <Admonition type=\"info\" icon=\"💡\" title=\"PREMIUM ENDPOINT\">\n    <p>\n      To use this API, you will need an API key under a Moralis account with the\n      Pro or above plan. To upgrade your API plan, go to the{\" \"}\n      <Link href=\"https://admin.moralis.com/account/billing\">billing page</Link>{\" \"}\n      in the Moralis Dashboard.\n    </p>\n    <p>\n    This API has no parameter and you can simply use the <b>Try It</b> button to test it out.\n    </p>\n  </Admonition> */}\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Token Price by Address - HTTP Endpoint\nDESCRIPTION: Returns the latest price for a given Solana token. The endpoint is part of Moralis Web3 Data API and requires a network and token address as URL parameters. Results are provided in JSON with price data, and the endpoint expects valid Moralis API authentication for access.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/token/:network/:address/price\n```\n\n----------------------------------------\n\nTITLE: Defining Lens Profile GraphQL Query (JavaScript)\nDESCRIPTION: Exports a GraphQL query string named `Profile`. This query fetches detailed information about a specific Lens profile (identified by `profileId: \"0x09\"`) including name, bio, attributes, pictures, stats, and follow module details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Profile = `\nquery Profile {\n  profile(request: { profileId: \"0x09\" }) {\n    id\n    name\n    bio\n    attributes {\n      displayType\n      traitType\n      key\n      value\n    }\n    followNftAddress\n    metadata\n    isDefault\n    picture {\n      ... on NftImage {\n        contractAddress\n        tokenId\n        uri\n        verified\n      }\n      ... on MediaSet {\n        original {\n          url\n          mimeType\n        }\n      }\n      __typename\n    }\n    handle\n    coverPicture {\n      ... on NftImage {\n        contractAddress\n        tokenId\n        uri\n        verified\n      }\n      ... on MediaSet {\n        original {\n          url\n          mimeType\n        }\n      }\n      __typename\n    }\n    ownedBy\n    dispatcher {\n      address\n      canUseRelay\n    }\n    stats {\n      totalFollowers\n      totalFollowing\n      totalPosts\n      totalComments\n      totalMirrors\n      totalPublications\n      totalCollects\n    }\n    followModule {\n      ... on FeeFollowModuleSettings {\n        type\n        amount {\n          asset {\n            symbol\n            name\n            decimals\n            address\n          }\n          value\n        }\n        recipient\n      }\n      ... on ProfileFollowModuleSettings {\n        type\n      }\n      ... on RevertFollowModuleSettings {\n        type\n      }\n    }\n  }\n}\n`\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference Documentation in React\nDESCRIPTION: This snippet imports necessary React components for displaying the API reference documentation, including the main ApiReference component, Admonition for important notes, and ReactMarkdown for rendering markdown content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/01-Get Token Balances/get-wallet-token-balances.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Token Analytics via Moralis API\nDESCRIPTION: Fetches analytics data for multiple token addresses simultaneously using the Moralis Deep Index API v2.2. This endpoint likely accepts multiple addresses, potentially via query parameters or request body, although the example URL format is similar to the single token analytics endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/tokens/:address/analytics\n```\n\n----------------------------------------\n\nTITLE: Deploying a New Interchain Token Using wagmi Contract Hooks (JavaScript)\nDESCRIPTION: This React code snippet uses wagmi's useContractWrite and useWaitForTransaction to deploy a new Interchain Token via the Axelar contract. It prepares the function call with user-supplied arguments and handles success, error, and transaction submission states using toast notifications. The handleCreateToken function validates input and initiates the smart contract call, providing UI feedback for each transaction stage. Dependencies include wagmi/react, ethers, and MetaMask for signing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst NewInterchainToken: React.FC = () = >{\n  //...\n  // Create a new token\n  const {\n    data: createNewToken,\n    write\n  } = useContractWrite({\n    address: interchainTokenFactoryContractAddress,\n    abi: interchainTokenFactoryContractABI,\n    functionName: 'deployInterchainToken',\n    args: [saltValue, // unique salt value\n    tokenName, // token name\n    tokenSymbol, // token symbol\n    tokenDecimals, ethers.utils.parseEther(initialSupply.toString()), // Initial token supply\n    address, // signer address\n    ],\n    mode: 'recklesslyUnprepared',\n  });\n  const {\n    data: useWaitForDeployTokenTransactionData,\n    isSuccess,\n    isError,\n    isLoading,\n  } = useWaitForTransaction({\n    hash: createNewToken ? .hash,\n  });\n  // Method to handle token creation to be used in the 'create' button\n  // onClick event\n  const handleCreateToken = async() = >{\n    if (!tokenName || !tokenSymbol || tokenDecimals < 0 || initialSupply <= 0) {\n      toast({\n        title: 'Invalid Input',\n        description: 'Please fill all the fields correctly.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n    write();\n    toast({\n      title: 'Transaction Submitted',\n      description: 'Please confirm the transaction in MetaMask.',\n      status: 'info',\n      duration: 5000,\n      isClosable: true,\n    });\n  };\n  return (\n  //...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Balance Fetching Implementation\nDESCRIPTION: JavaScript implementation using ethers.js to fetch ERC20 token balances for a specific wallet address through Moralis RPC nodes. Includes environment configuration, provider setup, and RPC call execution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-erc20-balances.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Load environment variables from the .env file\nrequire(\"dotenv\").config();\n\n// Import ethers.js\nconst { ethers } = require(\"ethers\");\n\nasync function getERC20TokenBalances() {\n  // Initialize the provider using the Moralis RPC URL from the .env file\n  const provider = new ethers.providers.JsonRpcProvider(\n    process.env.MORALIS_NODE_URL\n  );\n\n  // Prepare the request payload to fetch ERC20 token balances\n  const response = await provider.send(\"eth_getTokenBalances\", [\n    {\n      address: \"0xcB1C1FdE09f811B294172696404e88E658659905\", // Replace with the wallet address to query\n      excludeSpam: true, // Optionally exclude spam tokens\n      toBlock: \"latest\", // You can specify a block number, or use 'latest' for the most recent block\n    },\n  ]);\n\n  // Log the token balances to the console\n  console.log(response);\n}\n\n// Call the function to fetch ERC20 token balances\ngetERC20TokenBalances();\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 Authentication Views in Django\nDESCRIPTION: This snippet shows the initial setup for the views.py file, including necessary imports and the API key configuration for Moralis authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse, JsonResponse\nfrom django.contrib.auth import authenticate, login\nfrom django.contrib.auth.models import User\nfrom datetime import datetime, timedelta, timezone\n\nAPI_KEY = 'WEB3_API_KEY_HERE'\n# this is a check to make sure the API key was set\n# you have to set the API key only in line 9 above\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Response in VerifySignature (Initial)\nDESCRIPTION: This C# code snippet shows the end part of an ASP.NET Core controller action method `VerifySignature`. It includes comments indicating where database saving and JWT generation would occur. Currently, it returns a simple string containing the user's address and profile ID as a placeholder token within a CreatedAtRouteResult. It also includes basic error handling for ApiException and general Exceptions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Here is where you would save authentication information to the database.\n// ---------------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------------\n// Here is where you would generate a JWT or other authentication response object.\n// ---------------------------------------------------------------------------------\n\n// Return custom authentication response here.\nstring token =  ${\"{\\\"token\\\":\\\"{completeResp.Address}:{completeResp.ProfileId}\\\"}\"};\n\nreturn new CreatedAtRouteResult(nameof(VerifySignature), token);\n            }\n            catch (ApiException ex)\n            {\n                return new BadRequestResult();\n            }\n            catch (Exception ex)\n            {\n                return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n            }\n        }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ERC-721 Contract ABI Functions - Solidity/JSON\nDESCRIPTION: This snippet specifies essential ERC-721 smart contract ABI entries required for interaction with Ethereum contracts (e.g., reading owner tokens, querying metadata, transferring ownership or tokens, and withdrawing funds). It enables clients and event monitoring platforms to parse and call functions on the chain. Dependencies include a deployed ERC-721 contract and a web3-capable backend such as Moralis or web3.js; expected inputs are addresses and token identifiers, while outputs match Solidity native types. All fields and methods align with the ERC-721 standard.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" },\n      { \"internalType\": \"uint256\", \"name\": \"index\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"tokenOfOwnerByIndex\",\n    \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"tokenURI\",\n    \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" },\n      { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" },\n      { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"newOwner\", \"type\": \"address\" }\n    ],\n    \"name\": \"transferOwnership\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"withdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Function Calling for Blockchain Portfolio Retrieval - JSON\nDESCRIPTION: This JSON schema defines a function named getWalletPortfolio intended for AI function calling integrations. The schema specifies required parameters for retrieving a blockchain wallet's full portfolio, such as walletAddress (string) and chain (enumerated string for supported networks), and allows optional inclusion of NFTs and DeFi positions. Designed for use with tools like the OpenAI API function calling interface, it enables automated, structured API calls by conversational agents to Moralis Web3 APIs. Inputs are blockchain wallet details; output is intended to be a response with tokens, NFTs, and DeFi data. The schema requires correct parameter validation and is limited to predefined chain values.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-chatbots.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"getWalletPortfolio\\\",\\n  \\\"description\\\": \\\"Get complete portfolio data for a blockchain wallet including tokens, NFTs, and DeFi positions\\\",\\n  \\\"parameters\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"walletAddress\\\": {\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"description\\\": \\\"The blockchain wallet address (e.g., 0x123... for EVM or a Solana address)\\\"\\n      },\\n      \\\"chain\\\": {\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"description\\\": \\\"The blockchain network\\\",\\n        \\\"enum\\\": [\\n          \\\"eth\\\",\\n          \\\"bnb\\\",\\n          \\\"polygon\\\",\\n          \\\"arbitrum\\\",\\n          \\\"optimism\\\",\\n          \\\"base\\\",\\n          \\\"avalanche\\\",\\n          \\\"solana\\\"\\n        ]\\n      },\\n      \\\"includeNFTs\\\": {\\n        \\\"type\\\": \\\"boolean\\\",\\n        \\\"description\\\": \\\"Whether to include NFTs in the response\\\"\\n      },\\n      \\\"includeDeFi\\\": {\\n        \\\"type\\\": \\\"boolean\\\",\\n        \\\"description\\\": \\\"Whether to include DeFi positions in the response\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\\"walletAddress\\\", \\\"chain\\\"]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Moralis Auth Adapter\nDESCRIPTION: Custom authentication adapter for validating Web3 authentication requests using Moralis Auth API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction validateAuthData(authData: any) {\n  const { message, signature, network, id, authId } = authData;\n\n  return Moralis.Auth.verify({\n    message,\n    signature,\n    network,\n  })\n    .then((result) => {\n      const data = result.toJSON();\n\n      if (id === data.profileId && authId === data.id) {\n        authData.chainId = result.result.chain.decimal;\n        authData.nonce = data.nonce;\n        authData.address = result.result.address.checksum;\n        authData.version = data.version;\n        authData.domain = data.domain;\n        authData.expirationTime = data.expirationTime;\n        authData.notBefore = data.notBefore;\n        authData.resources = data.resources;\n        authData.statement = data.statement;\n        authData.uri = data.uri;\n        return;\n      }\n\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Moralis auth failed, invalid data');\n    })\n    .catch(() => {\n      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Moralis auth failed, invalid data');\n    });\n}\n\nfunction validateAppId() {\n  return Promise.resolve();\n}\n\nexport default {\n  validateAuthData,\n  validateAppId,\n};\n```\n\n----------------------------------------\n\nTITLE: Reverse ENS Resolution in TypeScript\nDESCRIPTION: TypeScript implementation for resolving ENS names from Ethereum addresses using Moralis API. Requires Moralis and common-evm-utils packages. Returns the ENS name associated with the provided address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-name.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const response = await Moralis.EvmApi.resolve.resolveAddress({\n    address,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Sample Solana Portfolio Balance Response\nDESCRIPTION: Example JSON response showing the structure of portfolio data including tokens, NFTs, and native balance information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/balance-api/how-to-get-solana-portfolio-balance-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tokens\": [\n    {\n      \"associatedTokenAddress\": \"Dpmpwm93Amvj4uEFpYhjv8ZzfpgARq6zxKTi6mrj97gW\",\n      \"mint\": \"BXWuzb3jEuGsGUe29xdApu8Z3jVgrFbr3wWdsZmLWYk9\",\n      \"amountRaw\": \"100000000000\",\n      \"amount\": \"100\",\n      \"decimals\": \"9\"\n    }\n  ],\n  \"nfts\": [\n    {\n      \"associatedTokenAddress\": \"AUmHKB9srYgzHW2E5NuEWyG9wp5g4Cbewxurr1geV1iR\",\n      \"mint\": \"53kauHy6PJx9iykDV9BxpCBbXe2yPwA5tRcKcNDmfCxn\",\n      \"amountRaw\": \"1\",\n      \"amount\": \"1\",\n      \"decimals\": \"0\"\n    }\n  ],\n  \"nativeBalance\": {\n    \"lamports\": \"5999980000\",\n    \"solana\": \"5.99998\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis Auth with Firebase App (TypeScript)\nDESCRIPTION: Initializes the MoralisAuth client in the front-end using the getMoralisAuth function and a configured Firebase app instance. Dependencies: @firebase/app and @moralisweb3/client-firebase-auth-utils. Inputs: Firebase app config; Outputs: moralisAuth instance for authentication operations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initializeApp } from '@firebase/app';\nimport { getMoralisAuth } from '@moralisweb3/client-firebase-auth-utils';\n\nexport const app = initializeApp({\n  // your configuration here\n});\n\nconst moralisAuth = getMoralisAuth(app);\n```\n\n----------------------------------------\n\nTITLE: Get Wallet Transactions in TypeScript\nDESCRIPTION: TypeScript implementation for fetching wallet transactions using Moralis API. Includes type safety and uses the same core functionality as the JavaScript version.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/05-Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Lambda Request Handler for Fetching Wallet NFTs in GameSparks (JavaScript)\nDESCRIPTION: This JavaScript (ES5) cloud code handler for Amazon GameSparks invokes the AWS Lambda function 'aws-node-project-dev-getWalletNfts' using specified 'address' and 'chain' parameters. It logs the Lambda call output and returns the NFT result payload directly. The handler requires the GameSparks Lambda invocation feature and the pre-deployed Lambda function as per project instructions. Players must provide the required wallet 'address' and blockchain 'chain' as input; the handler returns a string representing the NFT data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/aws-gamesparks-integration-with-unity.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = GameSparks().Lambda(\"aws-node-project-dev-getWalletNfts\").Invoke(\n    {\n      \"address\": message.address,\n      \"chain\": message.chain\n    }\n);\n\nGameSparks().Logging().Debug(\"Result from Lambda is:\");\n\nreturn GameSparks().Messaging().Response({\"result\": response.Payload.result});\n```\n\n----------------------------------------\n\nTITLE: Cloning ElizaOS Repository\nDESCRIPTION: Command to clone the ElizaOS repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/02-building-with-eliza-os.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaOS/eliza.git\ncd eliza\n```\n\n----------------------------------------\n\nTITLE: Complete C# Function to Display Blockchain Data\nDESCRIPTION: Provides the complete implementation of the `DisplayCryptoData` asynchronous function. It includes fetching and displaying the native balance, ERC-20 token balances, and the first 10 NFTs for a given address and chain ID using the Moralis SDK. It also includes basic formatting for console output and a try-catch block for error handling.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\ninternal static async Task DisplayCryptoData(string address, ChainList chainId)\n{\n    try\n    {\n        Console.WriteLine($\"For address: {address}...\\n\");\n\n        // Load native balance for address\n        NativeBalance bal = await MoralisClient.Web3Api.Account.GetNativeBalance(address, chainId);\n\n        double nativeBal = 0;\n\n        double.TryParse(bal.Balance, out nativeBal);\n\n        Console.WriteLine($\"Your native balance is {nativeBal / Math.Pow(10,18)}\");\n\n        // Load ERC-20 Token List for address\n        List<Erc20TokenBalance> erc20Balnaces = await MoralisClient.Web3Api.Account.GetTokenBalances(address, chainId);\n\n        Console.WriteLine(\"\\n\\nYour ERC 20 Tokens:\");\n\n        if (erc20Balnaces != null && erc20Balnaces.Count > 0)\n        {\n            // Print out each token with symbol and balance.\n            foreach (Erc20TokenBalance tb in erc20Balnaces)\n            {\n               Console.WriteLine($\"\\t{tb.Symbol} - {tb.Name}: {tb.NativeTokenBalance}\"); \n            }\n        }\n        else\n        {\n            Console.WriteLine(\"\\tNone\");\n        }\n\n        // Load first 10 NFTs for the address\n        NftOwnerCollection nfts = await MoralisClient.Web3Api.Account.GetNFTs(address, (ChainList)chainId, \"\", null, 10);\n\n        Console.WriteLine(\"\\n\\nYour NFTs:\");\n\n        if (nfts != null && nfts.Result.Count > 0)\n        {\n            // Print out each token with symbol and balance.\n            foreach (NftOwner nft in nfts.Result)\n            {\n                Console.WriteLine($\"\\t{nft.Name}: {nft.Amount}\\n\\tMetaData: {nft.Metadata}\\n\\n\");\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"\\tNone\");\n        }\n\n    }\n    catch (Exception ex)\n    {\n        Console.Error.WriteLine(ex);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Solana API Reference Documentation\nDESCRIPTION: Imports various React components used for API documentation, including ApiReference, configuration data, and UI elements like MainnetBadge and ApiBanner.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Volume Stats/get-volume-stats-by-chain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt\nDESCRIPTION: Basic robots.txt configuration that allows all user agents (*) to access all paths (/). This configuration places no restrictions on web crawlers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/static/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-Agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Getting Ethereum Native Balance with Moralis Python SDK\nDESCRIPTION: Fetches the native ETH balance for a specified Ethereum address using the Moralis EVM API (`evm_api.balance.get_native_balance`). Requires the `moralis` SDK, an API key, and parameters defining the target address and chain ('eth'). The result contains the balance in Wei.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.balance.get_native_balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n\n\n# prints {'balance': '319973658297093018740'}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Configuration for API Documentation (JSX)\nDESCRIPTION: This snippet imports necessary React components (`ApiReference`, `Admonition`, `Link`) from the Docusaurus framework/site structure and a JSON configuration file (`configs.json`). These imports are prerequisites for rendering the API documentation page dynamically.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/defi-api/01-Get Wallet DeFi Positions/get-defi-positions-by-protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Response with Trigger Results\nDESCRIPTION: JavaScript object showing the format of a webhook response that includes trigger results. Demonstrates how the balanceOf function results are included in each ERC20 transfer entry.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/triggers.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst erc20Transfers: [\n  {\n    transactionHash: \"0xf0c7542c73e2d26cc0b249da63426643263463463646345\",\n    logIndex: \"0\",\n    contract: \"0x34b6a28edbbaf0c7542c73e2d26cc0b249da69a6\",\n    from: \"0xbb6a28edbbaf0c7542c73212d26cc0b249da47a5\",\n    to: \"0xbdc7237c3b3bfcfeca7ed8108d01854589c91d65\",\n    value: \"100000000000000000\",\n    tokenName: \"Moralis\",\n    tokenSymbol: \"MOR\",\n    tokenDecimals: \"18\",\n    valueWithDecimals: \"0.1\",\n    triggers: [\n      { name: \"output1\", value: \"200000000000000000\" },\n    ],\n  },\n  {\n    transactionHash: \"0xc3sdg442c73e2d26cc0b249da2426643263vm646345\",\n    logIndex: \"0\",\n    contract: \"0x34b6a28edbbaf0c7542c73e2d26cc0b249da69a6\",\n    from: \"0xdd6a28edbbaf2c7542c73212d26cc0b249da3ta5\",\n    to: \"0xbdc7237c3b3bfcfeca7ed8108d01854589cf1g66\",\n    value: \"100000000000000000\",\n    tokenName: \"Moralis\",\n    tokenSymbol: \"MOR\",\n    tokenDecimals: \"18\",\n    valueWithDecimals: \"0.1\",\n    triggers: [\n      { name: \"output1\", value: \"51390023141500000\" },\n    ],\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component in JSX\nDESCRIPTION: Uses the custom `ApiReference` React component to display documentation for the `eth_getBlockTransactionCountByNumber` RPC method. It dynamically loads configuration data for this specific RPC method from the imported `config` object using the spread syntax (`{...}`). An `Admonition` component is nested within this component to provide additional context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getBlockTransactionCountByNumber.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.rpc.eth_getBlockTransactionCountByNumber} >\n  {/* Admonition component nested inside */}\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing React Component and Configuration\nDESCRIPTION: This snippet imports the `ApiReference` React component from a local path and a configuration object from a JSON file. These imports are necessary for rendering the API documentation dynamically on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/01-Get Token Metadata/get-token-metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Top ERC20 Tokens Data\nDESCRIPTION: This JSON snippet illustrates the expected API response containing an array of the top ERC20 tokens by market cap. Each object includes detailed information about a token, such as rank, name, symbol, logo URL, decimals, contract address, price in USD, percent changes, and market capitalization. This is the typical output from the above code samples when executed with valid credentials. No dependencies are required for this static output, but structure must be matched for downstream processing or display.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-erc20-tokens-by-market-cap.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"rank\": 1,\n    \"token_name\": \"Wrapped Ether\",\n    \"token_symbol\": \"WETH\",\n    \"token_logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.png\",\n    \"token_decimals\": \"18\",\n    \"contract_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"price_usd\": \"1803.89\",\n    \"price_24h_percent_change\": \"1.43\",\n    \"price_7d_percent_change\": \"0.01\",\n    \"market_cap_usd\": \"214188093967\"\n  },\n  {\n    \"rank\": 2,\n    \"token_name\": \"Tether USD\",\n    \"token_symbol\": \"USDT\",\n    \"token_logo\": \"https://cdn.moralis.io/eth/0xdac17f958d2ee523a2206206994597c13d831ec7.png\",\n    \"token_decimals\": \"6\",\n    \"contract_address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n    \"price_usd\": \"1\",\n    \"price_24h_percent_change\": \"0\",\n    \"price_7d_percent_change\": \"0.01\",\n    \"market_cap_usd\": \"83063097247\"\n  },\n  {\n    \"rank\": 3,\n    \"token_name\": \"BNB\",\n    \"token_symbol\": \"BNB\",\n    \"token_logo\": \"https://market-data-images.s3.us-east-1.amazonaws.com/tokenImages/0xe9950d9ad217dbd35c1f5790eb0d21bd461729c754928e550c1f497c3182bc75.png\",\n    \"token_decimals\": \"18\",\n    \"contract_address\": \"0xb8c77482e45f1f44de1745f52c74426c631bdd52\",\n    \"price_usd\": \"302.06\",\n    \"price_24h_percent_change\": \"-0.73\",\n    \"price_7d_percent_change\": \"-2.35\",\n    \"market_cap_usd\": \"48009547905\"\n  },\n  {\n    \"rank\": 4,\n    \"token_name\": \"USD Coin\",\n    \"token_symbol\": \"USDC\",\n    \"token_logo\": \"https://cdn.moralis.io/eth/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.png\",\n    \"token_decimals\": \"6\",\n    \"contract_address\": \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n    \"price_usd\": \"1\",\n    \"price_24h_percent_change\": \"0.02\",\n    \"price_7d_percent_change\": \"-0.1\",\n    \"market_cap_usd\": \"29140112792\"\n  },\n  {\n    \"rank\": 5,\n    \"token_name\": \"iearn USDC v2\",\n    \"token_symbol\": \"yUSDCv2\",\n    \"token_logo\": \"https://cdn.moralis.io/eth/0xd6ad7a6750a7593e092a9b218d66c0a814a3436e.png\",\n    \"token_decimals\": \"6\",\n    \"contract_address\": \"0xd6ad7a6750a7593e092a9b218d66c0a814a3436e\",\n    \"price_usd\": \"0.999891\",\n    \"price_24h_percent_change\": \"0.01\",\n    \"price_7d_percent_change\": \"-0.11\",\n    \"market_cap_usd\": \"29140112792\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for WebUI Stream Setup\nDESCRIPTION: JSON configuration for setting up ENS registration monitoring through the web interface. Includes filter settings for high-value registrations above 1 ETH.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-monitor-ens-domain-registrations.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"topic0\": \"NameRegistered(string,bytes32,address,uint256,uint256)\",\n    \"filter\": {\n      \"and\": [\n        { \"eq\": [\"owner\", \"0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5\"] },\n        { \"gt\": [\"cost\", \"1000000000000000000\"] }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Wallet NFTs (JSON)\nDESCRIPTION: Represents a sample response payload from Moralis NFT API for a wallet holding NFTs. Includes total number of NFTs, pagination information, and an array of NFT metadata objects with fields like 'token_address', 'token_id', 'name', 'symbol', and sync status. Used to illustrate the expected format and structure of API results when executing the retrieval snippets. Supports interpretation of the returned fields and demonstrates how NFT data is organized in responses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 1456,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsid2FsbGV0QWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSJ9LCJrZXlzIjpbIjE2NjMyMzgxNzUuMDc3Il0sIndoZXJlIjp7Im93bmVyX29mIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1In0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6MTQ1NiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2NjgyNTUyfQ.E5DkWYvRTaFnVhgedRuT3IW-rb2V-ikFKwP2cg2Qf78\",\n  \"result\": [\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"4765809967066625256798886812262830659450023020194524584471225959000376492819\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"ba6d44b5f16be94283cecffeb784b7ca\",\n      \"block_number_minted\": \"15572796\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:06:08.153Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"84453794918345416145331514647027903846664455083247396107154093349515123913389\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"7c0212cd3daf1b6b64f193c6dc102fb4\",\n      \"block_number_minted\": \"15572811\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:09:09.838Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"16476931145019337030786748713476010946621971075817308111460324192065814192354\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"627ffc76405a90ee940cb91f7e90b294\",\n      \"block_number_minted\": \"15572818\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:11:34.545Z\",\n      \"minter_address\": null\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Lowest Price with Moralis API in Python\nDESCRIPTION: This Python snippet shows how to use the Moralis evm_api to get the lowest price of an NFT from a specific marketplace. It requires the API key, NFT address, blockchain, and marketplace name as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/06-NFT Marketdata/how-to-get-lowest-price-of-nft-by-marketplace.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n  \"chain\": \"eth\",\n  \"marketplace\": \"opensea\",\n  \"address\": \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\"\n}\n\nresult = evm_api.nft.get_nft_lowest_price(\n  api_key=api_key,\n  params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Getting Solana Native Balance with Moralis Python SDK\nDESCRIPTION: Fetches the native SOL balance for a specified Solana address using the Moralis Solana API (`sol_api.account.balance`). Requires the `moralis` SDK, an API key, and parameters defining the target address and network ('mainnet'). The result provides the balance in both Lamports and SOL.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\",\n    \"network\": \"mainnet\",\n}\n\nresult = sol_api.account.balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n\n# prints {'lamports': '0', 'solana': '0'}\n```\n\n----------------------------------------\n\nTITLE: Querying Block by Hash - Ethereum JSON-RPC - JSON\nDESCRIPTION: Presents example request and response bodies for the eth_getBlockByHash method, which retrieves block information using the block hash. The method takes a block hash and a boolean flag indicating whether to include full transactions. The response includes block data in an object, wrapped in the standard JSON-RPC result format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\"0xbfddf451426ef49dc0b726480adfdbd660d64d45bfa49670834d67cf44c3f2e2\", true]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    // Block object\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana NFT Metadata API Reference (JSX/Markdown)\nDESCRIPTION: This snippet uses embedded JSX within Markdown to render the ApiReference component, passing configuration for the Solana NFT Metadata endpoint. This approach allows live, interactive API documentation within a markdown file, leveraging configuration from the imported JSON file and displaying documentation related to the 'getNFTMetadata' method for Solana. The snippet assumes integration with a static site generator capable of processing JSX/MDX.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/07-NFT API/get-nft-metadata.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getNFTMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Starting Hardhat Console for Testing\nDESCRIPTION: Command to start the Hardhat console connected to the Polygon network for interactive testing of the deployed contract. This allows developers to test the contract functionality directly from the command line.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhh console --network polygon\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component in JSX\nDESCRIPTION: This JSX code renders the ApiReference component, passing the configuration for the getTokenPrice API from the imported config object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/01-Token Prices/get-erc20-token-price.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getTokenPrice} />\n```\n\n----------------------------------------\n\nTITLE: Filtering Tokens with Security and Liquidity Criteria in JSON\nDESCRIPTION: Example showing how to filter tokens based on security score, holder count, and liquidity requirements. Uses multiple metric filters to ensure token quality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/03-Token API/filtered-token-api-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"metric\": \"securityScore\", \"gt\": 80 },\n  { \"metric\": \"holders\", \"timeFrame\": \"oneWeek\", \"gt\": 500 },\n  { \"metric\": \"liquidityChangeUSD\", \"gt\": 100000 }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Pancakeswap V1 Pair Reserves in TypeScript\nDESCRIPTION: TypeScript implementation to retrieve pair reserves from a Pancakeswap V1 liquidity pool using Moralis DeFi API. Includes type safety and requires Moralis and @moralisweb3/common-evm-utils dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-reserves.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xaebe45e3a03b734c68e5557ae04bfc76917b4686\";\n\n  const chain = EvmChain.BSC;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to Project Directory (Shell)\nDESCRIPTION: These shell commands clone the Solana NFT Explorer project repository from GitHub and change the current directory into the newly cloned project folder. This is the initial step for setting up the project locally.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/JohnVersus/solana-nft-explorer.git\n\ncd solana-nft-explorer\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project and Installing Dependencies - Bash\nDESCRIPTION: These commands initialize a new Node.js project directory, and install the necessary npm packages \"ethers\" for blockchain interaction and \"dotenv\" for loading environment variables. This is the foundational setup needed before writing JavaScript logic to fetch NFTs. The primary dependencies are Node.js, npm, ethers.js, and dotenv, with the expected use being executed via the terminal. The output will be a prepared directory with packages installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/getting-started/02-making-your-first-request.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new Node.js project\\nmkdir nft-fetcher\\ncd nft-fetcher\\nnpm init -y\\n\\n# Install ethers.js and dotenv for managing environment variables\\nnpm install ethers dotenv\n```\n\n----------------------------------------\n\nTITLE: Getting NFT Owners by Contract Address with Moralis in Python\nDESCRIPTION: This Python code demonstrates how to retrieve NFT owners from a specific contract address using the Moralis evm_api. It specifies parameters including the contract address, chain (Ethereum), data format, pagination limits, and metadata normalization options.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd4e4078ca3495DE5B1d4dB434BEbc5a986197782\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_nft_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Name using JavaScript\nDESCRIPTION: JavaScript implementation for reverse resolving an ENS name from an Ethereum address using Moralis API. Requires Moralis and common-evm-utils packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-name.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const response = await Moralis.EvmApi.resolve.resolveAddress({\n    address,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying Code at Address - Ethereum JSON-RPC - JSON\nDESCRIPTION: Demonstrates request and response examples for the eth_getCode method, which retrieves the smart contract code at a specified address and block tag. Parameters include the target address and an optional block tag. The response contains the code in hexadecimal string format in the 'result' field.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\"0x0000000000000000000000000000000000000000\", \"latest\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0xbfddf451426ef49dc0b726480adfdbd660d64d45bfa49670834d67cf44c3f2e2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in React\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration object for the requestBind API endpoint. It's used to render the API reference documentation on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/reference/03-Profiles/request-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Complete getNativeBalance Lambda Function Code (NodeJS)\nDESCRIPTION: The complete JavaScript code for the `getNativeBalance.js` Lambda function. It includes strict mode, requires and initializes the Moralis SDK using an environment variable for the API key, and defines the handler function to fetch and return the native balance for a given address and chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nconst Moralis = require(\"moralis\").default;\n\nconst startMoralis = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n};\n\nstartMoralis();\n\nmodule.exports.handler = async (event) => {\n  // Get native balance\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address: event.address,\n    chain: event.chain,\n  });\n\n  // Format the native balance formatted in ether via the .ether getter\n  const nativeBalanceEther = nativeBalance.result.balance.ether;\n\n  return {\n    result: nativeBalanceEther,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Price in TypeScript\nDESCRIPTION: TypeScript implementation to get ERC20 token price using Moralis API. Requires Moralis and @moralisweb3/common-evm-utils packages. Returns token price and related information for a specified token address on the Ethereum chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-the-price-of-an-erc20-token.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenPrice({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of View Transaction Button Based on State - React/JavaScript\nDESCRIPTION: Demonstrates how to conditionally display the View Transaction button if a transaction has been marked as successful for a specific token (pendingTx is true); otherwise, the regular menu is shown. This pattern is typical in React for showing alternate UI based on application state. Assumes selectedToken and key are available in scope. Inputs are current state and token key; output is either a Button component or Menu component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// Show the View Transaction button if a transaction\n// has been successful\nselectedToken[key]?.pendingTx ? ( <Button onClick={() => view()}>View Transaction</Button> ) : (<><Menu>.....</Menu></>)\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Swaps by Wallet Address - HTTP Endpoint\nDESCRIPTION: Lists historical and real-time token swap transactions for a specific wallet address on a chosen network. Outputs swap events as JSON and is meant for trading activity analytics with required API authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/account/:network/:walletAddress/swaps\n```\n\n----------------------------------------\n\nTITLE: Running the Transaction Fetcher Script\nDESCRIPTION: Command to execute the wallet transaction fetching script.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-wallet-transactions.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode fetchTransactions.js\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Balance using Moralis Python SDK\nDESCRIPTION: This Python script utilizes the Moralis Python SDK to get the SPL token balance for a specified Solana address. It sets the API key and parameters including the network ('mainnet') and address, then calls `sol_api.account.get_spl`. The fetched token balance information is printed. Requires the `moralis` Python package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/token-api/how-to-get-spl-token-balance-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"network\": \"mainnet\",\n    \"address\": \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\",\n}\n\nresult = sol_api.account.get_spl(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Holder Data Response Example\nDESCRIPTION: Example JSON response from the ERC20 Token Owners endpoint showing holder details including balance, formatted balance, contract status, owner address, label, USD value, and percentage of total supply.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2024-04-05-erc20-token-owners.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"balance\": \"10930056627204137678149589\",\n    \"balance_formatted\": \"10930056.627204137678149589\",\n    \"is_contract\": false,\n    \"owner_address\": \"0x6cc5f688a315f3dc28a7781717a9a798a59fda7b\",\n    \"owner_address_label\": \"OKX\",\n    \"usd_value\": \"116329685.478903487324714661\",\n    \"percentage_relative_to_total_supply\": 1.0930056627204137\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getNativeBalance Endpoint with Moralis\nDESCRIPTION: Express route handler for getting native balance using Moralis EvmApi.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/getNativeBalance\", async (req, res, next) => {\n  try {\n    const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n      address: req.body.address,\n      chain: req.body.chain,\n    });\n\n    const nativeBalanceEther = nativeBalance.result.balance.ether;\n\n    res.status(200);\n    res.send(nativeBalanceEther);\n  } catch (error) {\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Example Output of ERC20 Token Metadata API (JSON)\nDESCRIPTION: This code block illustrates a typical JSON response containing metadata for multiple ERC20 tokens as returned by the Moralis Token API. Each token object includes attributes such as address, name, symbol, decimals, logo URLs, and creation timestamp. The output format is JSON array and is representative, potentially varying depending on tokens requested.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-token-metadata-by-token-addresses.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"address\": \"0x514910771af9ca656af840dff83e8264ecf986ca\",\n    \"name\": \"Chain Link\",\n    \"symbol\": \"LINK\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca.webp\",\n    \"logo_hash\": \"fd74ea1227adb458733847c09aab05d89c35c14b640c5ee1e0a8bffa79193eb4\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  {\n    \"address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"name\": \"Wrapped Ether\",\n    \"symbol\": \"WETH\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.webp\",\n    \"logo_hash\": \"0a7fc292596820fe066ce8ce3fd6e2ad9d479c2993f905e410ef74f2062a83ec\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering the NFT Floor Price API Reference - JSX\nDESCRIPTION: This snippet demonstrates how to render the API reference documentation for the 'Get NFT Floor Price by Token' endpoint using the imported 'ApiReference' component and the corresponding configuration object. This integration produces a live documentation section within a React (JSX) environment and requires the 'ApiReference' component and the 'config.nft.getNFTFloorPriceByToken' JSON configuration to be properly defined. The main input is the configuration object, and the expected output is the rendered API documentation for users to interact with.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-floor-price-by-token.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTFloorPriceByToken} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and configuration data for the API reference documentation. It then renders the ApiReference component with the specific configuration for the 'getWalletNFTCollections' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/04-Get NFT Collections/get-wallet-nft-collections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.nft.getWalletNFTCollections} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Documentation in JavaScript\nDESCRIPTION: Renders the ApiReference React component, spreading in the configuration specific to the 'getWalletNFTTransfers' API endpoint. This code snippet is aimed at displaying the endpoint's details dynamically based on the transferred JavaScript configuration object. It assumes a React rendering environment and the presence of the config.nft.getWalletNFTTransfers definition.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-wallet-nft-transfers.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.nft.getWalletNFTTransfers}/>\n```\n\n----------------------------------------\n\nTITLE: Fetching EVM NFT Trades by Contract using Moralis API\nDESCRIPTION: Moralis API endpoint (v2.2) for retrieving NFT trades associated with a specific EVM contract address. Requires the contract `address` as a path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/nft/:address/trades\n```\n\n----------------------------------------\n\nTITLE: Complete Node.js/Express Server Code\nDESCRIPTION: Presents the final `index.js` file for the backend server. It includes all necessary requires (`moralis`, `express`, `cors`, `cookie-parser`, `jsonwebtoken`, `dotenv`), sets up Express middleware (JSON parsing, cookie parsing, CORS configured for the Angular app URL), defines the configuration for Moralis Auth, implements the four authentication endpoints (`/request-message`, `/verify`, `/authenticate`, `/logout`), and includes the server startup logic which initializes Moralis and starts the Express app listening on the specified port.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nconst cookieParser = require(\"cookie-parser\");\nconst jwt = require(\"jsonwebtoken\");\n\nrequire(\"dotenv\").config();\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\napp.use(cookieParser());\n\n// allow access to Angular app domain\napp.use(\n  cors({\n    origin: process.env.ANGULAR_URL,\n    credentials: true,\n  })\n);\n\nconst config = {\n  domain: process.env.APP_DOMAIN,\n  statement: \"Please sign this message to confirm your identity.\",\n  uri: process.env.ANGULAR_URL,\n  timeout: 60,\n};\n\n// request message to be signed by client\napp.post(\"/request-message\", async (req, res) => {\n  const { address, chain, network } = req.body;\n\n  try {\n    const message = await Moralis.Auth.requestMessage({\n      address,\n      chain,\n      network,\n      ...config,\n    });\n\n    res.status(200).json(message);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n\n// verify message signed by client\napp.post(\"/verify\", async (req, res) => {\n  try {\n    const { message, signature } = req.body;\n\n    const { address, profileId } = (\n      await Moralis.Auth.verify({\n        message,\n        signature,\n        networkType: \"evm\",\n      })\n    ).raw;\n\n    const user = { address, profileId, signature };\n\n    // create JWT token\n    const token = jwt.sign(user, process.env.AUTH_SECRET);\n\n    // set JWT cookie\n    res.cookie(\"jwt\", token, {\n      httpOnly: true,\n    });\n\n    res.status(200).json(user);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n\n// verify JWT cookie to allow access\napp.get(\"/authenticate\", async (req, res) => {\n  const token = req.cookies.jwt;\n  if (!token) return res.sendStatus(403); // if the user did not send a jwt token, they are unauthorized\n\n  try {\n    const data = jwt.verify(token, process.env.AUTH_SECRET);\n    res.json(data);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n\n// remove JWT cookie\napp.get(\"/logout\", async (req, res) => {\n  try {\n    res.clearCookie(\"jwt\");\n    return res.sendStatus(200);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\nstartServer();\n```\n\n----------------------------------------\n\nTITLE: Creating Phantom Wallet Login Button Component (JavaScript)\nDESCRIPTION: This JavaScript React component (`PhantomBtn`) provides a button for Phantom wallet authentication. It mirrors the TypeScript version's functionality: uses `@moralisweb3/next`'s `useAuthRequestChallengeSolana` hook, connects to Phantom wallet, requests a challenge, gets the user's signature, encodes it with `bs58`, and calls `next-auth/react`'s `signIn` with the 'credentials' provider (note the difference from the TS version which used 'moralis-auth'). It utilizes `@web3uikit/core` for the UI button.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript phantomBtn.jsx\nimport React from \"react\";\nimport { Button } from \"@web3uikit/core\";\nimport { signIn } from \"next-auth/react\";\nimport base58 from \"bs58\";\nimport { useAuthRequestChallengeSolana } from \"@moralisweb3/next\";\n\nexport default function PhantomBtn() {\n  const { requestChallengeAsync, error } = useAuthRequestChallengeSolana();\n  const authenticate = async () => {\n    // @ts-ignore\n    const provider = window.phantom?.solana;\n    const resp = await provider.connect();\n    const address = resp.publicKey.toString();\n    const chain = \"devnet\";\n    const account = {\n      address: address,\n      chain: chain,\n      network: \"solana\",\n    };\n    // const message = \"Sign to provide access to app\";\n    const challenge = await requestChallengeAsync({\n      address,\n      network: \"devnet\",\n    });\n    const encodedMessage = new TextEncoder().encode(challenge?.message);\n    const signedMessage = await provider.signMessage(encodedMessage, \"utf8\");\n    const signature = base58.encode(signedMessage.signature);\n    try {\n      const authResponse = await signIn(\"credentials\", {\n        message: challenge?.message,\n        signature,\n        network: \"Solana\",\n        redirect: false,\n      });\n      if (authResponse?.error) {\n        throw new Error(authResponse.error);\n      }\n    } catch (e) {\n      return;\n    }\n  };\n\n  return (\n    <Button\n      text=\"Phantom\"\n      theme=\"primary\"\n      onClick={() => {\n        authenticate();\n      }}\n    />\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList with Docusaurus in JavaScript\nDESCRIPTION: This snippet imports the DocCardList React component from Docusaurus and renders it within the documentation page. The import statement allows leveraging Docusaurus's dynamic card-listing capability, while <DocCardList /> displays a clickable list of documentation cards pertinent to the Developer Tools section. Dependencies include Docusaurus's @theme/DocCardList, and the output is a dynamic card list based on the configured structure. No custom props are passed by default.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/developer-tools.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button Component (TypeScript/JavaScript & React)\nDESCRIPTION: A simple reusable React component for logging out authenticated users by calling NextAuth's signOut function, styled with @web3uikit/core Button. It accepts no parameters and is typically used within authenticated UI contexts. The button outputs a logout event which results in user session termination and UI update, with minimal dependencies. This component should be used in conjunction with session handling logic elsewhere in the application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// File path\n// app/components/logoutBtn/logoutBtn.js\n\nimport React from \\\"react\\\";\nimport { Button } from \\\"@web3uikit/core\\\";\nimport { signOut } from \\\"next-auth/react\\\";\n\nexport default function LogoutBtn() {\n  return (\n    <Button text=\\\"Logout\\\" theme=\\\"outline\\\" onClick={() => signOut()}></Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting ContractFactory for GMPDistribution - Ethers.js - JavaScript\nDESCRIPTION: Obtains the Ethers.js ContractFactory instance for the deployed 'GMPDistribution' smart contract. Requires the Ethers.js library to be imported and properly configured with a provider or signer. The code should be executed in an async function or environment (e.g., Hardhat console). The resulting ContractFactory can be used to deploy, attach, or otherwise interact with the smart contract bytecode and ABI.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst Contract = await ethers.getContractFactory(\"GMPDistribution\")\n```\n\n----------------------------------------\n\nTITLE: NFT Trades Sample Output - JSON\nDESCRIPTION: This sample JSON object displays the data structure returned by the Moralis NFT API when fetching NFT trades. The result includes transaction hashes, token IDs, participant addresses, trade prices, and metadata such as block timestamps. This output helps understand the available fields and aids in post-processing or UI integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/06-NFT Marketdata/how-to-get-nft-trades-by-marketplace.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": null,\n  \"page\": 0,\n  \"page_size\": 100,\n  \"cursor\": null,\n  \"result\": [\n    {\n      \"transaction_hash\": \"0x5eba5d8d84c20a7f30b92d74afaee764d9476b62a1637b017319c721269245ed\",\n      \"transaction_index\": \"90\",\n      \"token_ids\": [\"1002\", \"7228\", \"1\", \"1\"],\n      \"seller_address\": \"0xe7f35f06a80a6a2a5edc823379fa147d9f9948a8\",\n      \"buyer_address\": \"0xd7c708080553068217a2fe6f44eccf9cac309915\",\n      \"token_address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\",\n      \"marketplace_address\": \"0x7be8076f4ea4a4ad08075c2508e481d6c946d12b\",\n      \"price\": \"18980000000000000000\",\n      \"price_token_address\": \"0x60e4d786628fea6478f785a6d7e704777c86a7c6\",\n      \"block_timestamp\": \"2022-03-18T22:21:07.000Z\",\n      \"block_number\": \"14413068\",\n      \"block_hash\": \"0x50e740dd733efc1e7252e3863e76368624d146e1a8447fab32c9697685cf581d\",\n      \"verified_collection\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Claims in C# Controller Action\nDESCRIPTION: This C# code snippet demonstrates how to generate a JWT within the `VerifySignature` controller action after successful authentication (`completeResp` obtained). It creates a dictionary of claims containing the user's wallet address, Moralis profile ID, and a custom 'SignatureValidated' flag. It then calls the static `TokenManager.GenerateToken` method, passing the claims dictionary to produce the JWT string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nDictionary<string, string> claims = new Dictionary<string, string>();\nclaims.Add(\"Address\", completeResp.Address);\nclaims.Add(\"AuthenticationProfileId\", completeResp.ProfileId);\nclaims.Add(\"SignatureValidated\", \"true\");\n\nstring token = TokenManager.GenerateToken(claims);\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Block Transaction Count by Number - Ethereum JSON-RPC - JSON\nDESCRIPTION: Illustrates request and response payload formats for the eth_getBlockTransactionCountByNumber method, which returns the number of transactions in a block identified by its block number or tag. The parameter is the block number; the response gives the transaction count as a hex string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\"0x1B4\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x15\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WalletConnect Web3 Authentication with Moralis in NextJS - JavaScript\nDESCRIPTION: This snippet defines a SignIn React component for authenticating users by integrating WalletConnect and Moralis authentication within a NextJS application. It sets up WalletConnectConnector with a projectId, utilizes several hooks from 'wagmi' and 'next-auth/react' to manage authentication flow, and handles the complete WalletConnect sign-in process including challenge requests and redirect handling. Dependencies include Moralis NextJS SDK, wagmi, next-auth, and a properly configured WalletConnect project. Inputs include user interactions (button click), and outputs are session state changes and navigation to user dashboard on success. Limitations include the requirement for a NextJS environment and correct project setup with WalletConnect and Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-walletconnect.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { WalletConnectConnector } from \"wagmi/connectors/walletConnect\";\nimport { signIn } from \"next-auth/react\";\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { useRouter } from \"next/router\";\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\n\nfunction SignIn() {\n  const { connectAsync } = useConnect({\n    connector: new WalletConnectConnector({\n      options: { projectId: \"xxx\", showQrModal: true },\n    }),\n  });\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\n  const { push } = useRouter();\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n\n    const { account, chain } = await connectAsync();\n\n    const { message } = await requestChallengeAsync({\n      address: account,\n      chainId: chain.id,\n    });\n\n    const signature = await signMessageAsync({ message });\n\n    // redirect user after success authentication to '/user' page\n    const { url } = await signIn(\"moralis-auth\", {\n      message,\n      signature,\n      redirect: false,\n      callbackUrl: \"/user\",\n    });\n    /**\n     * instead of using signIn(..., redirect: \"/user\")\n     * we get the url from callback and push it to the router to avoid page refreshing\n     */\n    push(url);\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={handleAuth}>Authenticate via WalletConnect</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Fetching Lens Profile Data Server-Side (JavaScript)\nDESCRIPTION: Implements the `getServerSideProps` function in Next.js. This function executes the imported `Profile` query using the `urqlClient` on the server-side, awaits the response, and passes the fetched profile data (`response?.data.profile`) as props to the `Home` component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getServerSideProps() {\n  const response = await urqlClient.query(Profile).toPromise();\n\n  return {\n    props: { profile: response?.data.profile },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Triggers for ERC20 Transfers in JavaScript\nDESCRIPTION: This snippet shows how to set up triggers for both sender and receiver balances in ERC20 transfers. It uses the previously defined ABIs and specifies the contract address and input parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/triggers.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst trigger = {\n  contractAddress: \"$contract\",\n  functionAbi: balanceOfSenderAbi,\n  inputs: [\"$from\"],\n  type: \"erc20transfer\",\n};\nconst trigger2 = {\n  contractAddress: \"$contract\",\n  functionAbi: balanceOfReceiverAbi,\n  inputs: [\"$to\"],\n  type: \"erc20transfer\",\n};\nconst triggers = [trigger, trigger2];\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs using Moralis SDK in C#\nDESCRIPTION: Employs the Moralis .NET SDK's `Web3Api.Account.GetNFTs` method to asynchronously retrieve a collection of NFTs owned by the specified address on the given chain ID. This example limits the result to the first 10 NFTs found by passing `10` as the limit parameter. Requires `MoralisClient` setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Load first 10 NFTs for the address\nNftOwnerCollection nfts = await MoralisClient.Web3Api.Account.GetNFTs(address, (ChainList)chainId, \"\", null, 10);\n\n```\n```\n\n----------------------------------------\n\nTITLE: Webhook Notification Handler\nDESCRIPTION: Code to process incoming webhooks and trigger desktop notifications for USDT transfers\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const erc20Transfer of webhook.erc20Transfers) {\n  const addrs = `${erc20Transfer.from.slice(0, 4)}...${erc20Transfer.from.slice(38)}`;\n  const amount = Number(erc20Transfer.valueWithDecimals).toFixed(0);\n\n  notifier.notify({\n    title: \"NEW USDT Transfer\",\n    message: `${addrs} just sent \\n$${amount}`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Webhook Payload from Moralis Streams API - JSON\nDESCRIPTION: This JSON block is a sample webhook payload sent by Moralis when a stream is created or updated. The body includes empty or placeholder fields for ABI, block, transactions, logs, and other event-related data. Applications monitoring streams must return a 200-series HTTP status to acknowledge test webhooks and handle both confirmed and unconfirmed events correctly.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"abi\": {},\n  \"block\": {\n    \"hash\": \"\",\n    \"number\": \"\",\n    \"timestamp\": \"\"\n  },\n  \"txs\": [],\n  \"txsInternal\": [],\n  \"logs\": [],\n  \"chainId\": \"\",\n  \"tag\": \"\",\n  \"streamId\": : \"\",\n  \"confirmed\": true,\n  \"retries\": 0,\n  \"erc20Approvals\": [],\n  \"erc20Transfers\": [],\n  \"nftApprovals\": [],\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Example of an Approve Transaction in Wallet History\nDESCRIPTION: A JSON snippet showing the structure of an 'approve' transaction in the Wallet History API response. It displays the category, summary, and detailed contract_interactions object with approvals array containing token details and spender information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2024-06-19-new-wallet-history-cateogires.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"category\": \"approve\",\n\"summary\": \"Approved 0.000123 USDT\",\n\"contract_interactions\": {\n    \"approvals\": [\n        {\n            \"value\": \"1230000000000000\",\n            \"value_formatted\": \"0.000123\",\n            \"token\": {\n                \"address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n                \"address_label\": \"Tether USD (USDT)\",\n                \"token_name\": \"Tether USD\",\n                \"token_logo\": \"https://cdn.moralis.io/eth/0xdac17f958d2ee523a2206206994597c13d831ec7.png\",\n                \"token_symbol\": \"USDT\"\n            },\n            \"spender\": {\n                \"address\": \"0x111111125421ca6dc452d289314280a0f8842a65\",\n                \"address_label\": null\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Normalized Metadata Schema Definition in JSON\nDESCRIPTION: The JSON schema definition for normalized metadata in Moralis NFT API. It includes the structure for both normalizedMetadataAttribute and normalizedMetadata with their respective properties and descriptions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/02-NFT Metadata/normalized-vs-non-normalized-metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n \"normalizedMetadataAttribute\": {\n        \"properties\": {\n          \"trait_type\": {\n            \"type\": \"string\",\n            \"description\": \"The trait title or descriptor\",\n            \"example\": \"Eye Color\"\n          },\n          \"value\": {\n            \"type\": \"object\",\n            \"description\": \"The value of the attribute\",\n            \"example\": \"hazel\"\n          },\n          \"display_type\": {\n            \"type\": \"string\",\n            \"description\": \"The type the attribute value should be displayed as\",\n            \"example\": \"string\"\n          },\n          \"max_value\": {\n            \"type\": \"number\",\n            \"description\": \"For numeric values, the upper range\",\n            \"example\": 100\n          },\n          \"trait_count\": {\n            \"type\": \"number\",\n            \"description\": \"The number of possible values for this trait\",\n            \"example\": 7\n          },\n          \"order\": {\n            \"type\": \"number\",\n            \"description\": \"Order the trait should appear in the attribute list.\",\n            \"example\": 1\n          }\n        }\n      },\n      \"normalizedMetadata\": {\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The name or title of the NFT\",\n            \"example\": \"Moralis Mug\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A detailed description of the NFT\",\n            \"example\": \"Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx.\"\n          },\n          \"image\": {\n            \"type\": \"string\",\n            \"description\": \"The URL of the NFT's image\",\n            \"example\": \"https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.webp\"\n          },\n          \"external_link\": {\n            \"type\": \"string\",\n            \"description\": \"A link to additional information\",\n            \"example\": \"https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI\"\n          },\n          \"animation_url\": {\n            \"type\": \"string\",\n            \"description\": \"An animated version of the NFT's image\",\n            \"example\": \"https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8\"\n          },\n          \"attributes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/normalizedMetadataAttribute\"\n            }\n          }\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Sample NFT Query API Response - JSON\nDESCRIPTION: This JSON object is a sample output from the Moralis Wallet API getWalletNFTs endpoint. It includes metadata such as total NFTs, pagination information, and a \\\"result\\\" array containing NFT objects with properties like token_address, token_id, amount, owner_of, contract_type, name, symbol, and sync timestamps. Use this structure to validate API responses and understand the expected schema. No code execution required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 1456,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsid2FsbGV0QWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSJ9LCJrZXlzIjpbIjE2NjMyMzgxNzUuMDc3Il0sIndoZXJlIjp7Im93bmVyX29mIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1In0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6MTQ1NiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2NjgyNTUyfQ.E5DkWYvRTaFnVhgedRuT3IW-rb2V-ikFKwP2cg2Qf78\",\n  \"result\": [\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"4765809967066625256798886812262830659450023020194524584471225959000376492819\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"ba6d44b5f16be94283cecffeb784b7ca\",\n      \"block_number_minted\": \"15572796\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:06:08.153Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"84453794918345416145331514647027903846664455083247396107154093349515123913389\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"7c0212cd3daf1b6b64f193c6dc102fb4\",\n      \"block_number_minted\": \"15572811\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:09:09.838Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"16476931145019337030786748713476010946621971075817308111460324192065814192354\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"627ffc76405a90ee940cb91f7e90b294\",\n      \"block_number_minted\": \"15572818\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:11:34.545Z\",\n      \"minter_address\": null\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enriched Blockchain Transaction Object with Address Labels - JSON\nDESCRIPTION: This snippet demonstrates the structure of a blockchain transaction response as returned by Moralis API endpoints, enhanced with user-friendly address labels. No external dependencies are required beyond the Moralis API itself. Key properties include original sender and receiver addresses (`from_address` and `to_address`) alongside additional label fields (`from_address_label` and `to_address_label`) that provide human-readable context. Inputs and outputs are handled via the API, with each key corresponding to transaction metadata, and some fields may be null if not relevant to the transaction type.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/address-labels.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"0x70c30285a9a4cc1c147cc94e5d0cefebe693fffd5fd5cbf727e2f86b6829d71b\",\n  \"nonce\": \"6810858\",\n  \"transaction_index\": \"72\",\n  \"from_address\": \"0x21a31ee1afc51d94c2efccaa2092ad1028285549\",\n  \"from_address_label\": \"Binance 15\",\n  \"to_address\": \"0x514910771af9ca656af840dff83e8264ecf986ca\",\n  \"to_address_label\": \"ChainLink Token\",\n  \"value\": \"0\",\n  \"gas\": \"207128\",\n  \"gas_price\": \"32393720336\",\n  \"input\": \"0xa9059cbb000000000000000000000000c476723407b737c173bdfd87c7abc80f6856e6320000000000000000000000000000000000000000000000008533e3870aec3000\",\n  \"receipt_cumulative_gas_used\": \"8535588\",\n  \"receipt_gas_used\": \"52089\",\n  \"receipt_contract_address\": null,\n  \"receipt_root\": null,\n  \"receipt_status\": \"1\",\n  \"block_timestamp\": \"2023-06-26T16:48:23.000Z\",\n  \"block_number\": \"17564884\",\n  \"block_hash\": \"0x4e61fbb792a84c419a22ffcc590cbcb2f5a1b88d8e864d608e3544a3594c0e69\",\n  \"transfer_index\": [\n    17564884,\n    72\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Default GET Route for Server Health Check\nDESCRIPTION: Implements a simple GET endpoint at the root path that returns a confirmation message when the server is running. This helps with testing server availability.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Default GET operation\napp.get(\"/\", (req, res) => {\n  res.send(\"Server running!\")\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction Responses with Moralis Transaction API - JSON\nDESCRIPTION: This JSON snippet provides a complete example of a blockchain transaction response as served by the Moralis Transaction API with transaction labeling enabled. The response includes key transaction details, decoded input calls (decoded_call), and logs with decoded events (decoded_event) mapped using contract ABIs. It demonstrates how the API attaches human-readable function and event information to raw transaction and log data, improving interpretability for developer applications. Input fields include addresses, transaction data, and block info, while outputs present both raw and decoded labeling parameters, with unresolved ABIs resulting in null decoded fields.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/transaction-labelling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"0x012b9b98e21664117ec0b499d726a39f492ac8bd402cca8bebcbd163b9f75760\",\n  \"nonce\": \"567407\",\n  \"transaction_index\": \"153\",\n  \"from_address\": \"0x48c04ed5691981c42154c6167398f95e8f38a7ff\",\n  \"to_address\": \"0x2b591e99afe9f32eaa6214f7b7629768c40eeb39\",\n  \"value\": \"0\",\n  \"gas\": \"180000\",\n  \"gas_price\": \"41000000000\",\n  \"input\": \"0xa9059cbb000000000000000000000000eafeba1882a066a4ecca2f9d596cd0c4e722bfda000000000000000000000000000000000000000000000000000000b4ec8a8e9a\",\n  \"receipt_cumulative_gas_used\": \"11843646\",\n  \"receipt_gas_used\": \"51617\",\n  \"receipt_contract_address\": null,\n  \"receipt_root\": null,\n  \"receipt_status\": \"1\",\n  \"block_timestamp\": \"2023-02-15T14:51:23.000Z\",\n  \"block_number\": \"16634851\",\n  \"block_hash\": \"0x83e09485f7dc9fdef520ae59bbc02ebbca2e2508fc6b7fa5fe6da93a21c71272\",\n  \"transfer_index\": [\n    16634851,\n    153\n  ],\n  \"logs\": [\n    {\n      \"log_index\": \"285\",\n      \"transaction_hash\": \"0x012b9b98e21664117ec0b499d726a39f492ac8bd402cca8bebcbd163b9f75760\",\n      \"transaction_index\": \"153\",\n      \"transaction_value\": \"0\",\n      \"address\": \"0x2b591e99afe9f32eaa6214f7b7629768c40eeb39\",\n      \"data\": \"0x000000000000000000000000000000000000000000000000000000b4ec8a8e9a\",\n      \"topic0\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n      \"topic1\": \"0x00000000000000000000000048c04ed5691981c42154c6167398f95e8f38a7ff\",\n      \"topic2\": \"0x000000000000000000000000eafeba1882a066a4ecca2f9d596cd0c4e722bfda\",\n      \"topic3\": null,\n      \"block_timestamp\": \"2023-02-15T14:51:23.000Z\",\n      \"block_number\": \"16634851\",\n      \"block_hash\": \"0x83e09485f7dc9fdef520ae59bbc02ebbca2e2508fc6b7fa5fe6da93a21c71272\",\n      \"transfer_index\": [\n        16634851,\n        153,\n        285\n      ],\n      \"decoded_event\": {\n        \"signature\": \"Transfer(address,address,uint256)\",\n        \"label\": \"Transfer\",\n        \"type\": \"event\",\n        \"params\": [\n          {\n            \"name\": \"from\",\n            \"value\": \"0x48c04ed5691981C42154C6167398f95e8f38a7fF\",\n            \"type\": \"address\"\n          },\n          {\n            \"name\": \"to\",\n            \"value\": \"0xeafebA1882a066A4eCcA2F9d596Cd0c4E722BfDa\",\n            \"type\": \"address\"\n          },\n          {\n            \"name\": \"value\",\n            \"value\": \"777062616730\",\n            \"type\": \"uint256\"\n          }\n        ]\n      }\n    }\n  ],\n  \"decoded_call\": {\n    \"signature\": \"transfer(address,uint256)\",\n    \"label\": \"transfer\",\n    \"type\": \"function\",\n    \"params\": [\n      {\n        \"name\": \"_to\",\n        \"value\": \"0xeafebA1882a066A4eCcA2F9d596Cd0c4E722BfDa\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"value\": \"777062616730\",\n        \"type\": \"uint256\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Bonding Token Progress with Moralis API and DOM Manipulation (JavaScript)\nDESCRIPTION: Implements a complete client-side JavaScript example for fetching bonding tokens from the Moralis Solana API and visualizing their bonding curve progress in the browser. The script uses the Fetch API with required authentication, processes and renders the returned token array as HTML elements, and dynamically colors progress bars based on completion percentage. Requires an API key and an HTML container with ID 'bonding-tokens'. Inputs are determined by API response, and outputs are visual token cards. Intended for browser usage and direct integration into dApps or dashboards.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/07-get-bonding-tokens.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchBondingTokens() {\n  const response = await fetch(\n    \"https://solana-gateway.moralis.io/token/mainnet/exchange/pumpfun/bonding?limit=10\",\n    {\n      headers: {\n        accept: \"application/json\",\n        \"X-API-Key\": \"YOUR_API_KEY\",\n      },\n    }\n  );\n\n  const data = await response.json();\n\n  // Display the tokens\n  const tokenList = document.getElementById(\"bonding-tokens\");\n\n  data.result.forEach((token) => {\n    const tokenElement = document.createElement(\"div\");\n    tokenElement.className = \"token-card\";\n\n    // Calculate progress bar color based on percentage\n    let progressColor = \"#ff9900\"; // Default orange\n    if (token.bondingCurveProgress > 90) {\n      progressColor = \"#00cc00\"; // Green for nearly complete\n    } else if (token.bondingCurveProgress < 30) {\n      progressColor = \"#ff3300\"; // Red for early phase\n    }\n\n    tokenElement.innerHTML = `\n      <h3>${token.name} (${token.symbol})</h3>\n      <p>Price: $${parseFloat(token.priceUsd).toFixed(8)}</p>\n      <p>Liquidity: $${parseInt(token.liquidity).toLocaleString()}</p>\n      <div class=\"progress-bar-container\">\n        <div class=\"progress-bar\" style=\"width: ${\n          token.bondingCurveProgress\n        }%; background-color: ${progressColor}\"></div>\n        <span>${token.bondingCurveProgress.toFixed(2)}%</span>\n      </div>\n      <a href=\"https://solscan.io/token/${\n        token.tokenAddress\n      }\" target=\"_blank\">View on Solscan</a>\n    `;\n\n    tokenList.appendChild(tokenElement);\n  });\n}\n\nfetchBondingTokens();\n```\n\n----------------------------------------\n\nTITLE: Example Solana NFT Creator Information Structure in JSON\nDESCRIPTION: Demonstrates the JSON structure for representing creator information associated with a Solana NFT. Creators are listed in an array, with each object containing the creator's Solana 'address', their 'share' percentage (often for royalty distribution, where total share is 100), and a boolean 'verified' status indicating if the creator has cryptographically signed to confirm association with the NFT.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/nft-api-faq.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"creators\": [\n  {\n    \"address\": \"5XvhfmRjwXkGp3jHGmaKpqeerNYjkuZZBYLVQYdeVcRv\",\n    \"share\": 0,\n    \"verified\": true\n  },\n  {\n    \"address\": \"2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW\",\n    \"share\": 100,\n    \"verified\": true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying the Axelar GMP Contract using Hardhat\nDESCRIPTION: Command for deploying the Axelar GMPDistribution contract using Hardhat. This script will deploy the contract to the specified networks, providing contract addresses for verification and frontend integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhh run scripts/deploy.ts\n```\n\n----------------------------------------\n\nTITLE: Creating CryptoPunk Monitor Stream in Python\nDESCRIPTION: Python implementation for creating a Moralis stream to monitor specific CryptoPunk NFT transfers. It configures the same functionality as the JavaScript version, monitoring token IDs 1000-1002 using the PunkTransfer event.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-monitor-specific-nfts.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\npunkTransferAbi = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": false, \"name\": \"punkIndex\", \"type\": \"uint256\" },\n  ],\n  \"name\": \"PunkTransfer\",\n  \"type\": \"event\",\n}];\n\nbody = {\n    \"webhookUrl\": \"https://YOUR_WEBHOOK_URL\",\n    \"description\": \"1000 to 1002 cryptopunks\",\n    \"tag\": \"cryptoPunks\",\n    \"topic0\": [\"PunkTransfer(address,address,uint256)\"],\n    \"includeContractLogs\": True,\n    \"abi\": punkTransferAbi,\n    \"advancedOptions\": [\n      {\n        topic0: \"PunkTransfer(address,address,uint256)\",\n        filter: { \"in\": [\"punkIndex\", [\"1000\", \"1001\", \"1002\"]] },\n        includeNativeTxs: True,\n      },\n    ],\n    \"chainIds\": [\"0x1\"],\n}\n\nresult = streams.evm.create_stream(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Game Creation Frontend Form Component\nDESCRIPTION: React component that handles user input for creating new game sessions. Collects player addresses and communicates with the backend API to initialize games.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst NewGameForm: FC = () => {\n  const [player2, setPlayer2] = useState('');\n\n  const handleInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setPlayer2(e.target.value);\n  };\n  const { publicKey } = useWallet();\n  const createGame = async () => {\n    if (!publicKey || !player2) {\n    }\n    if (publicKey?.toBase58() === player2) {\n    }\n    const players = {\n      player1: publicKey,\n      player2: new PublicKey(player2),\n    };\n    try {\n      const data = await apiPost('/TicTacToe/newGame', players);\n    } catch (e) {\n      if (e instanceof Error) {\n        console.log(e.message);\n      }\n    }\n  };\n\n  return (\n    <>\n      <FormControl>\n        <Flex height={'300px'} direction={'column'} alignItems={'center'} justifyContent={'space-around'}>\n          <Box width={'50%'}>\n            <FormLabel>Player 1</FormLabel>\n            <Input placeholder=\"Connect to Wallet\" value={`${publicKey ? publicKey : ''}`} disabled />\n          </Box>\n          <Box width={'50%'}>\n            <FormLabel>Player 2</FormLabel>\n            <Input placeholder=\"Player 2 Address\" onChange={handleInput} />\n          </Box>\n          <Button width={'50%'} mt={4} colorScheme=\"teal\" isLoading={status ? true : false} onClick={createGame}>\n            Create New Game\n          </Button>\n          <FormHelperText>{status && status}</FormHelperText>\n        </Flex>\n      </FormControl>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrying a Failed Webhook with Moralis Streams - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to programmatically retry (replay) a failed webhook via the Moralis SDK Streams API. The retry method is called with the required id of the failed history item and its streamId. This operation is dependent on an initialized and authenticated Moralis Streams context. The effect is to attempt resending the specific webhook delivery for recovery or audit.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/error-handling.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait Moralis.Streams.retry({ id: \"HISTORY_ID\", streamId: \"STREAM_ID\" });\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Configuration for API Reference in React\nDESCRIPTION: This code snippet imports necessary components and configuration for rendering the API reference documentation. It includes imports for ApiReference, Admonition, ReactMarkdown, and a configuration file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/03-Get Balance/get-wallet-token-balances.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration file for the API reference. It then renders the ApiReference component with the specific configuration for the getNFTOwners endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/05-Get NFT Owners/get-nft-owners.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.nft.getNFTOwners} />\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner React Component - TypeScript\nDESCRIPTION: This statement imports the 'ApiBanner' component written in TypeScript. It can be used to display informational banners within the API documentation. Dependency is the TypeScript file located at the specified path, and its props must comply with the component definition.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-domain.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Doc Components - Docusaurus - JavaScript/TypeScript\nDESCRIPTION: This snippet imports core and custom React components for use in a Docusaurus documentation page. Components such as 'ApiReference', 'Admonition', 'Link', and 'ApiBanner' are brought in to provide documentation structure, warnings/notes, and links. The 'config' variable provides configuration data loaded from a JSON file, which will be passed to the API reference component. This setup is foundational for rendering interactive API documentation related to Web3 and EVM wallet DeFi summaries. Prerequisites: Docusaurus installed and proper file paths for imports.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/06-Get Wallet Defi Positions/get-defi-summary.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK in Firebase Functions (Shell)\nDESCRIPTION: Navigates into the Firebase Cloud Functions directory (`functions`) and installs the Moralis SDK using npm. This makes the Moralis library available for use within the Cloud Functions code.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncd functions\nnpm install moralis\n```\n\n----------------------------------------\n\nTITLE: Retrieving Native Balance with Moralis Wallet API in Python\nDESCRIPTION: This Python example shows how to call the Moralis Wallet API to get a smart contract account's native balance using the 'moralis' library. Provide the API key, address, and chain in the script. The response is printed directly and contains the balance in a structured dictionary. Ensure 'moralis' is installed and your actual API key replaces the placeholder before executing this script.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-account.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Import the necessary modules from the Moralis library\\nfrom moralis import evm_api\\n\\n# Replace \\\"YOUR_API_KEY\\\" with your actual API key\\napi_key = \\\"YOUR_API_KEY\\\"\\n\\n# Define the parameters required for fetching the native balance\\nparams = {\\n    # Replace with the target address of smart contract account\\n    \\\"address\\\": \\\"0x350845DD3f03F1355233a3A7CEBC24b5aAD05eC5\\\",\\n\\n    # Specify the blockchain you are working with (e.g., Ethereum)\\n    \\\"chain\\\": \\\"eth\\\",\\n}\\n\\n# Use the Moralis get_native_balance method to retrieve the native balance\\nresult = evm_api.balance.get_native_balance(\\n    api_key=api_key,\\n    params=params,\\n)\\n\\n# Print the result, which contains the native balance information\\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Starting the Moralis SDK Core - JavaScript\nDESCRIPTION: Illustrates initializing the Moralis core instance with a configuration object, typically including an API key and optional settings. This initialization is required before leveraging any Moralis functionality. The apiKey parameter is necessary if utilizing API-based modules. Place any additional configuration within the object as needed by your modules.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncore.start({\n  apiKey: \"<YOUR_API_KEY>\",\n  // ...and any other configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for GetAddresses Endpoint\nDESCRIPTION: This JSX snippet renders the ApiReference component, passing configuration specific to the 'GetAddresses' endpoint within the 'streams' section of the imported config file. This dynamically displays the API documentation for retrieving addresses associated with a stream.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/get-addresses.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.streams.GetAddresses} />\n```\n\n----------------------------------------\n\nTITLE: Embedding API Reference Component in JSX (JavaScript/React)\nDESCRIPTION: This snippet demonstrates how to embed the ApiReference component within JSX, spreading config properties for the 'getPairAddress' API documentation. The component utilizes configuration-driven props to dynamically generate the relevant API reference section. Requirements: ApiReference component and a valid config with a defi.getPairAddress property. Input: configuration object. Output: rendered API reference UI for DEX pair address endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/06-Get Pairs & Liquidity/get-pair-address.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.defi.getPairAddress} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Live Crypto Notifications Project\nDESCRIPTION: This shell command installs the required npm packages: express for the API, nodemon for auto-restarting, and node-notifier for desktop notifications.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install express nodemon node-notifier\n```\n\n----------------------------------------\n\nTITLE: Rendering \"Remove Bind\" API Reference - JavaScript\nDESCRIPTION: This snippet renders the 'ApiReference' React component with spread configuration props for the 'removeBind' Auth API operation. It displays interactive or static API documentation for the endpoint that allows removal of an address via the Authentication API. The surrounding documentation page can then provide details, try-it-out tools, and other interactive documentation features. It depends on both 'ApiReference' and the config definitions being properly defined and imported.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/reference/03-Profiles/remove-bind.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.auth.removeBind} />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Managing State in React (App.js) - JavaScript\nDESCRIPTION: This snippet demonstrates how to set up and import various React components into the main App.js file for a Web3 portfolio application. It uses hooks (useState) to manage state for wallet address, chain, native balance, tokens, NFTs, and transfer history, and composes the UI with React components and the @web3uikit/core library. Inputs (WalletInputs), user portfolio data (PortfolioValue, NativeTokens, Tokens, Nfts, TransferHistory), and navigation (TabList, Tab) are wired together, handling state through props. Dependencies include React (with hooks), the various components under ./components, and @web3uikit/core. Inputs are provided via component props; outputs are rendered UI components. This file must be placed in the src directory and the referenced components should be properly implemented.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport NativeTokens from \"./components/NativeTokens\";\nimport Tokens from \"./components/Tokens\";\nimport TransferHistory from \"./components/TransferHistory\";\nimport Nfts from \"./components/Nfts\";\nimport WalletInputs from \"./components/WalletInputs\";\nimport PortfolioValue from \"./components/PortfolioValue\";\nimport { Avatar, TabList, Tab } from \"@web3uikit/core\";\n\nfunction App() {\n  const [wallet, setWallet] = useState(\"\");\n  const [chain, setChain] = useState(\"0x1\");\n  const [nativeBalance, setNativeBalance] = useState(0);\n  const [nativeValue, setNativeValue] = useState(0);\n  const [tokens, setTokens] = useState([]);\n  const [nfts, setNfts] = useState([]);\n  const [filteredNfts, setFilteredNfts] = useState([]);\n  const [transfers, setTransfers] = useState([]);\n\n\n  return (\n    <div className=\"App\">\n      <WalletInputs\n        chain={chain}\n        setChain={setChain}\n        wallet={wallet}\n        setWallet={setWallet}\n      />\n      <div className=\"content\">\n        <div className=\"walletInfo\">\n          {wallet.length === 42 && (\n            <>\n              <div>\n                <Avatar isRounded size={130} theme=\"image\" />\n                <h2>{`${wallet.slice(0, 6)}...${wallet.slice(36)}`}</h2>\n              </div>\n              <PortfolioValue\n                nativeValue={nativeValue}\n                tokens={tokens}\n              />\n            </>\n          )}\n        </div>\n\n        <TabList>\n          <Tab tabKey={1} tabName={\"Tokens\"}>\n            <NativeTokens\n              wallet={wallet}\n              chain={chain}\n              nativeBalance={nativeBalance}\n              setNativeBalance={setNativeBalance}\n              nativeValue={nativeValue}\n              setNativeValue={setNativeValue}\n            />\n            <Tokens\n              wallet={wallet}\n              chain={chain}\n              tokens={tokens}\n              setTokens={setTokens}\n            />\n          </Tab>\n          <Tab tabKey={2} tabName={\"Transfers\"}>\n            <TransferHistory \n              chain={chain} \n              wallet={wallet} \n              transfers={transfers}\n              setTransfers={setTransfers}\n            />\n          </Tab>\n          <Tab tabKey={3} tabName={\"NFT's\"}>\n            <Nfts \n              wallet={wallet} \n              chain={chain} \n              nfts={nfts}\n              setNfts={setNfts}\n              filteredNfts={filteredNfts}\n              setFilteredNfts={setFilteredNfts}  \n            />\n          </Tab>\n        </TabList>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Integrating Axelar Gas Payment into sendToMany Function in Solidity\nDESCRIPTION: Completes the `sendToMany` function by adding the call to the Axelar Gas Service. It calls `gasService.payNativeGasForContractCallWithToken` using the collected `msg.value` to cover gas costs on the destination chain. The parameters include the source contract address (`address(this)`), destination chain details, the encoded recipient addresses payload, token symbol, amount, and the original sender's address (`msg.sender`) for potential gas refunds.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.19;\n\n// Imports\n\ncontract GMPDistribution is AxelarExecutable {\n    IAxelarGasService public immutable gasService;\n\n    constructor() AxelarExecutable(_gateway) {}\n\n    function sendToMany(\n        string memory _destChain,\n        string memory _destContractAddr,\n        address[] calldata _destinationAddrs,\n        string memory _symbol,\n        uint256 _amount\n    ) external payable {\n\n        // Check that funds have been sent\n\n        // Obtain token address\n\n        // Transfer token\n\n        // Grant approval to gateway contract\n\n        // Encode GMP message\n\n        // Pay gas with the source chain's native token.\n        gasService.payNativeGasForContractCallWithToken{value: msg.value}(\n            address(this),\n            _destChain,\n            _destContractAddr,\n            recipientAddressesEncoded,\n            _symbol,\n            _amount,\n            msg.sender\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Submitting eth_sendRawTransaction Response - JSON\nDESCRIPTION: Shows a JSON-RPC response for eth_sendRawTransaction, where the 'result' field is the hash of the submitted transaction. The client must ensure the transaction data is signed and correctly formatted; the response follows JSON-RPC standards.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Parse Server with Yarn\nDESCRIPTION: Command to install the parse-server package using Yarn package manager.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add parse-server\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Data Display Function Signature in C#\nDESCRIPTION: Declares an asynchronous static function `DisplayCryptoData` that takes a wallet address (string) and a chain ID (`ChainList`) as input. It returns a `Task`, indicating it performs asynchronous operations, intended for fetching and displaying blockchain data using the Moralis SDK.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\ninternal static async Task DisplayCryptoData(string address, ChainList chainId)\n{\n    \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Service\nDESCRIPTION: Service for handling message requests and authentication verification with Parse Server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from 'moralis';\nimport { authRequests } from '../store';\nimport { ParseServerRequest } from '../utils/ParseServerRequest';\n\nexport async function requestMessage({ address, chain, network }: { address: string; chain: string; network: 'evm' }) {\n  const result = await Moralis.Auth.requestMessage({\n    address,\n    chain,\n    network,\n    domain: 'defi.finance',\n    statement: 'Please sign this message to confirm your identity.',\n    uri: 'https://defi.finance',\n    expirationTime: '2023-01-01T00:00:00.000Z',\n    timeout: 15,\n  });\n\n  const { message, id, profileId } = result.toJSON();\n  authRequests.set(message, { id, profileId });\n\n  return message;\n}\n\nexport async function verifyMessage({ network, signature, message }) {\n  const storedData = authRequests.get(message);\n\n  if (!storedData) {\n    throw new Error('Invalid message');\n  }\n\n  const { id: storedId, profileId: storedProfileId } = storedData;\n\n  const authData = {\n    id: storedProfileId,\n    authId: storedId,\n    message,\n    signature,\n    network,\n  };\n\n  const user = await serverRequest.post({\n    endpoint: `/users`,\n    params: {\n      authData: {\n        moralis: authData,\n      },\n    },\n    useMasterKey: true,\n  });\n\n  await serverRequest.put({\n    endpoint: `/users/${user.objectId}`,\n    params: {\n      moralisProfileId: storedProfileId,\n    },\n    useMasterKey: true,\n  });\n\n  const updatedUser = await serverRequest.get({\n    endpoint: `/users/${user.objectId}`,\n    useMasterKey: true,\n  });\n\n  return updatedUser;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Monitoring USDT Transfers with Moralis Streams - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to configure and deploy a Moralis Stream for monitoring USDT transfers on Ethereum that exceed $1 million, filtered by sender address and value amount. It uses an advanced filter definition and attaches the USDT contract address to the stream for real-time event delivery. Prerequisites: Node.js, moralis SDK installed, valid Moralis API credentials. Expected inputs are the stream's filter and target address; output is webhook notifications for qualifying transfers. Limitation: only processes ERC20 'Transfer' events where criteria match.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Above code is same as prior\n\nconst filter_ERC20 = {\n  \"and\": [\n    { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] },\n    { \"gt\": [\"value\", \"1000000000\"] }, // Example of USDT (6 Decimals)\n  ],\n};\n\nconst runApp = async () => {\n  const stream = {\n    // same parameters as prior\n    advancedOptions: [\n      {\n        topic0: \"Transfer(address,address,uint256)\",\n        filter: filter_ERC20\n      },\n    ]\n  };\n\n  const newStream = await Moralis.Streams.add(stream);\n  const { id } = newStream.toJSON();\n\n  // Now we attach USDT address to the stream\n  const address = \"0xdAC17F958D2ee523a2206206994597C13D831ec7\";\n\n  await Moralis.Streams.addAddress({ address, id });\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis Backend SDK (TypeScript)\nDESCRIPTION: Initializes the Moralis SDK on the backend. This snippet imports the `Moralis` object and calls the `start` method, passing the required Moralis API key. This setup configures the SDK to communicate with the Moralis backend services, specifically the Auth API used later in the flow.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from 'moralis';\n\nMoralis.start({\n  apiKey: 'your_api_key_here',\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Address to Moralis Stream - Python\nDESCRIPTION: This snippet attaches a USDT contract address to an existing Moralis EVM stream for real-time monitoring of transfers. It requires the Moralis SDK for Python, and relies on previously defined variables: api_key, add_address_body, and params. Once added, the stream begins sending webhook updates for transactions involving the specified address. Inputs include the USDT address encapsulated in add_address_body and the stream id in params. Output is a stream update result, and a valid API key is mandatory.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Now we attach USDT address to the stream\\nstreams.evm_streams.add_address_to_stream(\\n  api_key=api_key,\\n  body=add_address_body,\\n  params=params,\\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK and Calling Utility Function (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to initialize the Moralis SDK using TypeScript syntax. It then calls the `Moralis.EvmApi.utils.web3ApiVersion()` function and logs the response. Although the surrounding text discusses fetching endpoint weights, this specific example calls `web3ApiVersion`. Requires the `moralis` package and a valid Moralis API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/05-compute-units-cu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.utils.web3ApiVersion();\n\nconsole.log(response?.toJSON());\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Uniswap V2 Pair Address API Response (JSON)\nDESCRIPTION: This JSON object is an example response from the Moralis DeFi API, showing the detailed structure returned when requesting a Uniswap V2 pair address. It includes comprehensive information about each token (address, name, symbol, decimals, logos, etc.) and the corresponding pair address. This response structure can be useful for parsing or validating the expected output of the above code snippets and for integrating with downstream applications.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-address-of-a-liquidity-pool.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"token0\": {\n    \"address\": \"0x514910771af9ca656af840dff83e8264ecf986ca\",\n    \"name\": \"Chain Link\",\n    \"symbol\": \"LINK\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca.webp\",\n    \"logo_hash\": \"fd74ea1227adb458733847c09aab05d89c35c14b640c5ee1e0a8bffa79193eb4\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  \"token1\": {\n    \"address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"name\": \"Wrapped Ether\",\n    \"symbol\": \"WETH\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.webp\",\n    \"logo_hash\": \"0a7fc292596820fe066ce8ce3fd6e2ad9d479c2993f905e410ef74f2062a83ec\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  \"pairAddress\": \"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless Service with Environment Variable (YAML)\nDESCRIPTION: Initial `serverless.yml` configuration for an AWS NodeJS project. It defines the service name, framework version, AWS provider settings (runtime `nodejs14.x`), an environment variable `MORALIS_API_KEY` (with a placeholder value), and the initial `hello` function linked to its handler.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservice: aws-node-project\n\nframeworkVersion: '3'\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  environment:\n    MORALIS_API_KEY: 'replace_me'\n\nfunctions:\n  hello:\n    handler: functions/handler.hello\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Python SDK using Pip\nDESCRIPTION: Installs the Moralis Python SDK using the pip package manager. This command is required to utilize the Moralis API functions within a Python application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install moralis\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JavaScript\nDESCRIPTION: This snippet imports a React/MDX component named ApiReference from a local project path, making it available for use within the documentation file. This allows embedding detailed API documentation in the page. The snippet requires a configured React project and the relevant component available at the specified path.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-address-to-domain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration file for the API documentation. It then renders the ApiReference component with the specific configuration for the getTokenPrice endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/02-Get Price/get-token-prices.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.token.getTokenPrice} />\n```\n\n----------------------------------------\n\nTITLE: Fetching EVM NFT Trades by Token using Moralis API\nDESCRIPTION: Moralis API endpoint (v2.2) for retrieving NFT trades for a specific EVM token, identified by its contract address and token ID. Requires the contract `address` and `token_id` as path parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/nft/:address/:token_id/trades\n```\n\n----------------------------------------\n\nTITLE: Embedding Metadata in HTML Head (React JSX)\nDESCRIPTION: Defines an HTML <head> section with a specific page title for search engines and browser tabs. Assumes use within a React/JSX or MDX environment (such as Docusaurus). Outputs a <title> element; no parameters. Requires an environment that allows direct JSX or HTML meta-tag insertion.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_feeHistory.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<head>\n    <title>eth_feeHistory RPC Method - Moralis Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Filtering Firestore Blockchain Events by Timestamp on Frontend - Firebase (JavaScript)\nDESCRIPTION: This JavaScript example improves frontend event handling by filtering to only receive Firestore documents updated after the current application start time. By using 'where' with 'updatedAt' and a timestamp, it avoids the initial retrieval of all documents, reducing UI noise and bandwidth. Prerequisites: Firebase JS SDK in the browser and the Firestore collection populated by the Moralis Streams extension. Inputs: Real-time document changes matching the timestamp filter. Outputs: Callback invoked with only relevant, new updates.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/firebase.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = firebase.firestore.Timestamp.now();\n\ndb.collection(`moralis/txs/${collectionName}`)\n  .where(\"updatedAt\", \">\", now)\n  .onSnapshot((change) => {\n    doSomeOperation(change.docs);\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Connection and Contract Integration\nDESCRIPTION: Sets up wallet connection hooks and contract write configuration for the follow functionality using wagmi.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Home({ profile, nftArray, myNFT }) {\n  console.log(profile);\n\n  const { connectAsync } = useConnect();\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { config } = usePrepareContractWrite({\n    addressOrName: '0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d',\n    contractInterface: abi,\n    functionName: 'follow',\n    args: [[profile.id], [0x0]],\n  });\n\n  const { write } = useContractWrite(config);\n  \n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring MoralisNextApi for Authentication in TypeScript\nDESCRIPTION: Set up MoralisNextApi in a TypeScript file, configuring authentication settings and handling environment variables for Solana wallet integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\n\nconst DATE = new Date();\nconst FUTUREDATE = new Date(DATE);\nFUTUREDATE.setDate(FUTUREDATE.getDate() + 1);\n\nconst { MORALIS_API_KEY, APP_DOMAIN, NEXTAUTH_URL } = process.env;\n\nif (!MORALIS_API_KEY || !APP_DOMAIN || !NEXTAUTH_URL) {\n  throw new Error(\n    \"Missing env variables. Please add the required env variables.\"\n  );\n}\n\nexport default MoralisNextApi({\n  apiKey: MORALIS_API_KEY,\n  authentication: {\n    timeout: 120,\n    domain: APP_DOMAIN,\n    uri: NEXTAUTH_URL,\n    expirationTime: FUTUREDATE.toISOString(),\n    statement: \"Sign message to authenticate.\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Moralis Web3 Data API Reference Components - JavaScript\nDESCRIPTION: This snippet imports multiple UI components and configuration files to structure documentation pages for the Moralis Web3 Data API within a Docusaurus-powered site. Dependencies include React, Docusaurus theme addons, and custom components for badges and notifications. The imports enable the use of referenced API docs, banners for endpoint access requirements, and badges indicating premium/mainnet status, but do not themselves trigger endpoint calls.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/01-Search Entities/search-entities.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport { PremiumEndpointBadge } from \"@site/src/components/PremiumEndpointBadge/PremiumEndpointBadge.js\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Setting up Moralis Next API Auth Endpoint (pages/api/moralis/[...moralis].ts) - JavaScript\nDESCRIPTION: Configures MoralisNextApi to handle backend Moralis API authentication and challenge requests. Provides the MORALIS_API_KEY from env, specifies auth domain, callback URI, and timeout. Place as pages/api/moralis/[...moralis].ts. Critical for enabling secure communication between client and Moralis backend in the auth flow. Requires @moralisweb3/next.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\n\nexport default MoralisNextApi({\n  apiKey: process.env.MORALIS_API_KEY,\n  authentication: {\n    domain: \"amazing.dapp\",\n    uri: process.env.NEXTAUTH_URL,\n    timeout: 120,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating/Pausin Stream Status via Moralis SDK - JavaScript\nDESCRIPTION: Pauses (or updates) the status of a specified stream by calling the Streams.updateStatus method. Requires the stream id and target status ('active', 'paused', or 'error'). Can be called after initializing the SDK with the correct API key. Useful for pausing or resuming streams programmatically.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/stream-management.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait Moralis.Streams.updateStatus({\n  id: \"YOUR_STREAM_ID\",\n  status: \"paused\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in .env.local (text)\nDESCRIPTION: Provides an example `.env.local` file defining necessary environment variables: `APP_DOMAIN` (RFC 4501 DNS authority), `MORALIS_API_KEY` (from Moralis dashboard), `NEXTAUTH_URL` (application URL, e.g., `http://localhost:3000` for development), and `NEXTAUTH_SECRET` (a secret key for JWT encryption). These variables are crucial for Moralis API access and Next-Auth configuration. Remember to keep `NEXTAUTH_SECRET` private and restart the app after changes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAPP_DOMAIN=amazing.finance\nMORALIS_API_KEY=xxxx\nNEXTAUTH_URL=http://localhost:3000\nNEXTAUTH_SECRET=7197b3e8dbee5ea6274cab37245eec212\n```\n\n----------------------------------------\n\nTITLE: Cloning the Based Agent Repository\nDESCRIPTION: Instructions for cloning the Based Agent GitHub repository to your local machine. This is the first step in setting up the autonomous AI agent framework.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/murrlincoln/Based-Agent\ncd Based-Agent\n```\n\n----------------------------------------\n\nTITLE: Resolving Unstoppable Domain Using TypeScript\nDESCRIPTION: TypeScript implementation for resolving an Unstoppable domain to an ETH address using Moralis API. Requires Moralis and @moralisweb3/common-evm-utils packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-reverse-resolve-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const domain = \"brad.crypto\";\n\n  const response = await Moralis.EvmApi.resolve.resolveDomain({\n    domain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component with NFT Contract Sale Prices Configuration\nDESCRIPTION: Renders the ApiReference component with the specific configuration for the getNFTContractSalePrices API endpoint. This displays all the API documentation details including parameters, responses, and examples.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/02-NFT Prices/get-nft-contract-sale-prices.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTContractSalePrices} />\n```\n\n----------------------------------------\n\nTITLE: Illustrating Expected JSON Response for Solana Balance Query\nDESCRIPTION: This JSON object shows the expected structure of the response received after successfully querying the native Solana balance using the Moralis API. It includes the balance represented in both 'lamports' (the smallest unit of SOL) and 'solana' (standard SOL unit). In this example, the balance is zero.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/balance-api/how-to-get-native-solana-balance-by-wallet.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"lamports\": \"0\",\n  \"solana\": \"0\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Pair Stats with JavaScript\nDESCRIPTION: JavaScript code demonstrating how to fetch aggregated token pair statistics for USDC token on Ethereum network using the Moralis API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-aggregated-token-pair-stats.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from \"node-fetch\";\n\nconst options = {\n  method: \"GET\",\n  headers: {\n    accept: \"application/json\",\n    \"X-API-Key\": \"YOUR_API_KEY\", // Replace with your actual API key\n  },\n};\n\nfetch(\n  \"https://deep-index.moralis.io/api/v2.2/erc20/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/pairs/stats?chain=eth\",\n  options\n)\n  .then((response) => response.json())\n  .then((response) => console.log(response))\n  .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Complete Axelar GMP Token Distribution Contract in Solidity\nDESCRIPTION: The complete implementation of the GMPDistribution contract with fully implemented sendToMany function. This includes token transfers, gateway approval, gas payment, and initiating the cross-chain transaction through Axelar's gateway.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.19;\n\nimport { AxelarExecutable } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\";\nimport { IAxelarGateway } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\";\nimport { IAxelarGasService } from \"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract GMPDistribution is AxelarExecutable {\n\n    IAxelarGasService public immutable gasService;\n\n    constructor(\n        address _gateway,\n        address _gasService\n    ) AxelarExecutable(_gateway) {\n        gasService = IAxelarGasService(_gasService);\n    }\n\n    function sendToMany(\n    string memory _destChain,\n    string memory _destContractAddr,\n    address[] calldata _destinationAddrs,\n    string memory _symbol,\n    uint256 _amount\n    ) external payable {\n\n        require(msg.value > 0, \"Gas payment required\");\n\n        address tokenAddress = gateway.tokenAddresses(_symbol);\n\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), _amount);\n\n        IERC20(tokenAddress).approve(address(gateway), _amount);\n\n        bytes memory recipientAddressesEncoded = abi.encode(_destinationAddrs);\n\n        gasService.payNativeGasForContractCallWithToken{value: msg.value}(\n            address(this),\n            _destChain,\n            _destContractAddr,\n            recipientAddressesEncoded,\n            _symbol,\n            _amount,\n            msg.sender\n        );\n\n        gateway.callContractWithToken(\n            _destChain,\n            _destContractAddr,\n            recipientAddressesEncoded,\n            _symbol,\n            _amount\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DEX Token Pair Address Endpoint\nDESCRIPTION: API endpoint format for retrieving DEX token pair addresses. This endpoint allows querying pair addresses for any two tokens across the supported DEXs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/supported-dexs.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n/:token0_address/:token1_address/pairAddress\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in MDX/React\nDESCRIPTION: This snippet imports necessary React components (`ApiReference`, `Admonition`, `Link`) from the Docusaurus framework and site-specific locations, along with configuration data, to build the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/eth_getTokenPrice.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3Auth Authentication Flow - JavaScript\nDESCRIPTION: Implements a complete sign-in flow in a NextJS page component using Web3Auth, Wagmi, and Moralis for Web3 user authentication. Requires installing @web3auth/web3auth-wagmi-connector, wagmi, next-auth, @moralisweb3/next, and their peer dependencies. The code sets up connectors for authentication, handles secure signing of messages, manages redirects after login, and properly maintains session state; users must replace 'YOUR_CLIENT_ID' with their actual Web3Auth client ID. Inputs include user wallet interaction, outputs are session establishment and user redirection upon authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-web3authio.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Web3AuthConnector } from \"@web3auth/web3auth-wagmi-connector\";\nimport { signIn } from \"next-auth/react\";\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { useRouter } from \"next/router\";\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\n\nfunction SignIn() {\n  const { connectAsync } = useConnect({\n    connector: new Web3AuthConnector({\n      chains: [\"0x1\"],\n      options: {\n        clientId: \"YOUR_CLIENT_ID\", // Get your own client id from https://dashboard.web3auth.io\n      },\n    }),\n  });\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n  const { push } = useRouter();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm()\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n\n    const { account } = await connectAsync();\n\n    const { message } = await requestChallengeAsync({\n      address: account,\n      chainId: \"0x1\",\n    });\n\n    const signature = await signMessageAsync({ message });\n\n    // redirect user after success authentication to '/user' page\n    const { url } = await signIn(\"moralis-auth\", {\n      message,\n      signature,\n      redirect: false,\n      callbackUrl: \"/user\",\n    });\n    /**\n     * instead of using signIn(..., redirect: \"/user\")\n     * we get the url from callback and push it to the router to avoid page refreshing\n     */\n    push(url);\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={() => handleAuth()}>Authenticate via Web3Auth</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project and Installing Dependencies\nDESCRIPTION: Sets up a new Node.js project and installs required dependencies including express, nodemon, and node-notifier.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init -y\nnpm install express nodemon node-notifier\n```\n\n----------------------------------------\n\nTITLE: Parsing Moralis Solana API Token Price Response - JSON\nDESCRIPTION: This snippet illustrates the structure of the JSON response returned from the Moralis Solana API when querying a token's price data. It contains attributes such as the token address, pair (liquidity pool) address, DEX (exchange) name and address, native price details in WSOL (value, symbol, name, decimals), and USD price. The expected input is the API response, and the output is a JSON object suitable for parsing in various programming environments. No external dependencies are required beyond basic JSON parsing support; content types and object schema should be validated as part of integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/02-get-pump-fun-token-prices.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tokenAddress\": \"9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump\",\n  \"pairAddress\": \"6wJ7W3oHj7ex6MVFp2o26NSof3aey7U8Brs8E371WCXA\",\n  \"exchangeName\": \"Meteora DLMM\",\n  \"exchangeAddress\": \"LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo\",\n  \"nativePrice\": {\n    \"value\": \"4905814\",\n    \"symbol\": \"WSOL\",\n    \"name\": \"Wrapped Solana\",\n    \"decimals\": 9\n  },\n  \"usdPrice\": 1.178151922\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for getBlock Endpoint - JSX\nDESCRIPTION: This snippet renders a custom <ApiReference> component configured to display documentation and interaction UI for the 'block.getBlock' endpoint. The configuration is dynamically passed via the spread operator on the imported 'config.block.getBlock' object. Expected input is a React rendering context within a documentation page; output is an interactive API reference UI for querying blockchain blocks by hash. The component relies on both the previously imported React component and its configuration from JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/01-Get Blocks/get-block.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.block.getBlock} />\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Configuration files for storing Moralis API key as environment variable and git ignore settings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Get your Moralis API Key at https://admin.moralis.com/web3apis\nMORALIS_API_KEY=xxx\n```\n\nLANGUAGE: Text\nCODE:\n```\n.env\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Net Worth via Moralis API\nDESCRIPTION: Moralis API endpoint URL for calculating the net worth of a specific wallet, identified by its `:address`. This serves as the equivalent to SimpleHash's 'Wallet Valuation'. Note: Currently calculates based on fungible tokens.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/wallets/:address/net-worth\n```\n\n----------------------------------------\n\nTITLE: Replaying a Failed Webhook with Moralis JavaScript SDK\nDESCRIPTION: Demonstrates how to trigger a retry for a specific failed webhook using the Moralis JavaScript SDK. It requires the `id` of the failed history entry (replace `\"HISTORY_ID\"`) and the corresponding `streamId` (replace `\"STREAM_ID\"`). Requires the Moralis SDK to be initialized and authenticated.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/error-handling.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait Moralis.Streams.retry({ id: \"HISTORY_ID\", streamId: \"STREAM_ID\" });\n```\n\n----------------------------------------\n\nTITLE: Rendering the Streams API Reference Component - React - JavaScript\nDESCRIPTION: Renders the ApiReference React component, spreading the GetAddresses property from the config object to expose documentation for the 'get addresses by stream' endpoint. Requires a valid config object structure that contains streams.GetAddresses. Expects to be used within an MDX/React hybrid documentation site.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/get-addresses.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.streams.GetAddresses} />\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in React JSX\nDESCRIPTION: Imports the ApiBanner component that likely displays information about the API or provides navigation elements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/02-NFT Prices/get-nft-floor-price-by-token.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Stream Filter Configuration\nDESCRIPTION: JSON configuration for filtering Transfer events with value greater than 50000000000\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"topic0\": \"Transfer(address,address,uint256)\",\n    \"filter\": { \"gt\": [\"value\", 50000000000] }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Embedding API Reference and Admonition Components for RPC Documentation - React/JSX\nDESCRIPTION: Renders an API reference section for eth_feeHistory using the imported ApiReference React component with props from the loaded config object. An info Admonition with a custom title and inner HTML notifies users about further details on parameter and response schemas. Inputs: config object, literate JSX; outputs: structured documentation UI. Requires dependencies imported above and a compatible Docusaurus/React MDX page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_feeHistory.md#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference {...config.rpc.eth_feeHistory} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing Moralis Namespaces in C#\nDESCRIPTION: Imports the required namespaces (`Moralis` and `Moralis.Web3Api.Models`) to utilize the Moralis .NET SDK functionalities within a C# application. This includes base client features and specific models for Web3 API responses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nusing Moralis;\nusing Moralis.Web3Api.Models;\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Moralis Web3 API Version in Python\nDESCRIPTION: Illustrates using the Moralis Python SDK by importing the `moralis` package and calling `moralis.utils.web3_api_version()` with an API key. This function retrieves the current Web3 API version used by the SDK, serving as a basic check or informational call.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/01-moralis-sdk.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport moralis\n\nprint(moralis.utils.web3_api_version(api_key='API_KEY_HERE'))\n\n# it prints {'version': '0.0.53'}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function with Argument Parsing and Async Call in C#\nDESCRIPTION: Implements the `Main` function to handle command-line arguments for the wallet address and chain ID. It includes validation for the presence and type of arguments. After initializing the Moralis client, it executes the `DisplayCryptoData` function asynchronously using `Task.Run` and waits for its completion with `.Wait()`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n        static void Main(string[] args)\n        {\n            if (args.Length < 2)\n            {\n                Console.Write(\"Usage: ConsoleDemo.exe ADDRESS CLIENT_ID\");\n                return;\n            }\n\n            string address = args[0];\n            int chainId = 1;\n\n            if (!int.TryParse(args[1], out chainId))\n            {\n                Console.Error.WriteLine(\"CHAIN_ID must be a number.\");\n            }\n\n            // Setup Moralis\n            MoralisClient.ConnectionData = new Moralis.Models.ServerConnectionData()\n            {\n                ApiKey = \"YOUR MORALIS WEB3API KEY\"\n            };\n            \n            Task.Run(async () =>\n            {\n                await DisplayCryptoData(address, (ChainList)chainId);\n            }).Wait();\n        }\n```\n\n----------------------------------------\n\nTITLE: Calculating and Displaying Total Portfolio Value - JavaScript\nDESCRIPTION: This React component computes the total value of a user's portfolio by summing all ERC20 token values and the native asset value. It is purely presentational and relies on being passed processed token and native asset values. Dependencies are minimal: React and a CSS file. The key props are 'tokens' (array of objects, each with a 'val'), and 'nativeValue' (numeric). Outputs the total as a formatted string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \\\"react\\\";\nimport { useState, useEffect } from \\\"react\\\";\nimport \\\"../App.css\\\";\n\nfunction PortfolioValue({ tokens, nativeValue }) {\n  const [totalValue, setTotalValue] = useState(0);\n\n\n  useEffect(() => {\n    let val = 0;\n    for (let i = 0; i < tokens.length; i++) {\n      val = val + Number(tokens[i].val);\n    }\n    val = val + Number(nativeValue);\n\n    setTotalValue(val.toFixed(2));\n  }, [nativeValue, tokens]);\n\n  return (\n    <>\n    <div className=\\\"totalValue\\\">\\n      <h3>Portfolio Total Value</h3>\\n      <h2>\\n       ${totalValue}\\n      </h2>\\n    </div>\\n    </>\\n  );\\n}\\n\\nexport default PortfolioValue;\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Owners by Contract Address (EVM) with Moralis Python SDK\nDESCRIPTION: Retrieves a list of owners for NFTs within a specific contract address (NFT collection) on an EVM-compatible chain using `evm_api.nft.get_nft_owners`. Requires the `moralis` SDK, API key, and parameters like the contract address, chain, format, limit, cursor, and normalization options.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd4e4078ca3495DE5B1d4dB434BEbc5a986197782\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_nft_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Metadata\nDESCRIPTION: Example showing how to fetch NFT metadata for a specific token using Moralis evm_api.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"token_id\": \"3931\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_nft_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express.js Server for Webhook Handling\nDESCRIPTION: This JavaScript code sets up a basic Express.js server listening on port 3000 and defines a POST endpoint '/webhook' to handle incoming webhooks.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`Listening to streams`);\n});\n\napp.post(\"/webhook\", (req, res) => {\n  const webhook = req.body;\n\n  console.log(webhook);\n\n  return res.status(200).json();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis SDK Initialization in JavaScript\nDESCRIPTION: Provides an example of configuring the Moralis SDK during initialization using `Moralis.start()` in JavaScript. It demonstrates how to set optional parameters like `formatEvmAddress`, `formatEvmChainId`, and `logLevel` in addition to the required `apiKey`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/01-moralis-sdk.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  formatEvmAddress: 'checksum',\n  formatEvmChainId: 'decimal',\n  logLevel: 'verbose'\n})\n```\n\n----------------------------------------\n\nTITLE: Processing Game Moves API Handler\nDESCRIPTION: Backend API route handler that processes game moves by signing and sending transactions to the Solana blockchain. Takes player moves as input and updates the game state.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  Connection,\n  clusterApiUrl,\n  Keypair,\n  PublicKey,\n  Transaction,\n  SystemProgram,\n  sendAndConfirmTransaction,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport base58 from 'bs58';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { OWNER_PRIVATE_KEY } = process.env;\n  const { player1, player2, gamePlayer, move } = req.body;\n  if (!OWNER_PRIVATE_KEY) {\n    throw new Error('Add Owner private key in env file.');\n  }\n  const key = Uint8Array.from(base58.decode(OWNER_PRIVATE_KEY));\n  const keypair = Keypair.fromSecretKey(key);\n  const { publicKey } = keypair;\n\n  const Player1 = player1;\n  const Player2 = player2;\n  const programId = process.env.NEXT_PUBLIC_PROGRAM_ID;\n  if (!programId) {\n    throw new Error('Add Program Id in env file.');\n  }\n  const connection = new Connection(clusterApiUrl('devnet'));\n\n  const GAME_ACCOUNT_SECRET = `${player1.substring(0, 5)}${player2.substring(0, 5)}`;\n\n  const GameDataAccountPubkey = await PublicKey.createWithSeed(\n    publicKey,\n    GAME_ACCOUNT_SECRET,\n    new PublicKey(programId),\n  );\n\n  const transaction = new Transaction();\n  transaction.add(\n    new TransactionInstruction({\n      keys: [\n        {\n          pubkey: GameDataAccountPubkey,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: new PublicKey(Player1),\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: new PublicKey(Player2),\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: publicKey,\n          isSigner: true,\n          isWritable: false,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      ],\n      programId: new PublicKey(programId),\n      data: Buffer.from([1, gamePlayer, move]),\n    }),\n  );\n\n  const {\n    context: { slot: minContextSlot },\n    value: { blockhash, lastValidBlockHeight },\n  } = await connection.getLatestBlockhashAndContext();\n\n  try {\n    const signature = await sendAndConfirmTransaction(connection, transaction, [keypair], {\n      minContextSlot,\n      skipPreflight: true,\n      preflightCommitment: 'processed',\n    });\n    const confirmtx = await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n    const data = await connection.getParsedTransaction(signature);\n\n    res.status(200).json(data?.meta?.logMessages);\n  } catch (error) {\n    if (error instanceof Error) {\n      res.status(400).send(error.message);\n      console.error(error.message);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server Endpoint for Verifying Signature (Node.js)\nDESCRIPTION: Defines a POST endpoint `/verify` in the Node.js/Express server. This endpoint receives the original message and the user's signature. It uses `Moralis.Auth.verify` to validate the signature against the message. If verification is successful, it extracts the user's address and profile ID, creates a JWT containing this user data signed with `AUTH_SECRET`, sets this JWT as an HTTP-only cookie named `jwt`, and sends the user data back in the response.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/verify\", async (req, res) => {\n  try {\n    const { message, signature } = req.body;\n\n    const { address, profileId } = (\n      await Moralis.Auth.verify({\n        message,\n        signature,\n        networkType: \"evm\",\n      })\n    ).raw;\n\n    const user = { address, profileId, signature };\n\n    // create JWT token\n    const token = jwt.sign(user, process.env.AUTH_SECRET);\n\n    // set JWT cookie\n    res.cookie(\"jwt\", token, {\n      httpOnly: true,\n    });\n\n    res.status(200).json(user);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Organizing Project Structure in React - plaintext\nDESCRIPTION: This snippet presents the typical folder and file layout for a React-based DEX terminal application. It segments components by function (layout, token views, trending, portfolio, modals), distinguishes between pages and service logic, and indicates where bootstrapping occurs. There are no runtime dependencies as this is a structural outline; it is intended to help developers scaffold or navigate the project's source tree for scalable development. Inputs and outputs are conceptual, guiding project setup, and the limitation is that it serves purely as a reference rather than executable code.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/dexscreener-clone.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/\n├── components/ # Reusable UI components\n│ ├── layout/ # Layout components (sidebar, topbar)\n│ ├── token/ # Token-specific components\n│ ├── trending/ # Trending page components\n│ ├── portfolio/ # Portfolio tracking components\n│ └── modals/ # Modal components (search, filters)\n├── pages/ # Page components\n├── services/ # API services and utilities\n├── App.js # Main application component\n└── index.js # Application entry point\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers by Contract with Moralis SDK (TypeScript)\nDESCRIPTION: Shows how to retrieve ERC20 transfers for a contract address using the Moralis TypeScript SDK. Dependencies include `moralis`, `@moralisweb3/common-evm-utils`, and a Moralis API key. It initializes Moralis, specifies the contract `address` and `chain` (using `EvmChain`), and calls `Moralis.EvmApi.token.getTokenTransfers`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-contract.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Solana NFT Minter Project\nDESCRIPTION: Commands to clone the GitHub repository, install dependencies, and start the NextJS development server for the Solana NFT minter project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-minter.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/JohnVersus/solana-nft-minter.git\n\ncd solana-nft-minter\n\nyarn install\n\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signatures in JavaScript\nDESCRIPTION: Function to verify the authenticity of incoming webhook requests by comparing the provided signature with a generated signature using the secret key from Moralis settings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/response-body.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst verifySignature = (req, secret) => {\n  const providedSignature = req.headers[\"x-signature\"];\n  if (!providedSignature) throw new Error(\"Signature not provided\");\n  const generatedSignature = web3.utils.sha3(JSON.stringify(req.body) + secret);\n  if (generatedSignature !== providedSignature)\n    throw new Error(\"Invalid Signature\");\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Web3 API Version\nDESCRIPTION: Simple example demonstrating how to check the Web3 API version using Moralis SDK.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport moralis\n\nprint(moralis.utils.web3_api_version(api_key='API_KEY_HERE'))\n\n# it prints {'version': '0.0.53'}\n```\n\n----------------------------------------\n\nTITLE: Viewing Example ERC20 Token Price API Response in JSON\nDESCRIPTION: This snippet provides a sample JSON response following a successful request to the Moralis API for ERC20 token pricing. The response includes token metadata, fiat price, percent change, and exchange information. It serves as a reference for expected output when interacting with the getTokenPrice endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-the-price-of-an-erc20-token.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tokenName\": \"Wrapped BTC\",\n  \"tokenSymbol\": \"WBTC\",\n  \"tokenLogo\": \"https://cdn.moralis.io/eth/0x2260fac5e5542a773aa44fbcfedf7c193bc2c599.png\",\n  \"tokenDecimals\": \"8\",\n  \"nativePrice\": {\n    \"value\": \"15844922382819160000\",\n    \"decimals\": 18,\n    \"name\": \"Ether\",\n    \"symbol\": \"ETH\",\n    \"address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n  },\n  \"usdPrice\": 29012.967874240312,\n  \"usdPriceFormatted\": \"29012.967874240312\",\n  \"24hrPercentChange\": \"8.125434468247821\",\n  \"exchangeAddress\": \"0x1f98431c8ad98523631ae4a59f267346ea31f984\",\n  \"exchangeName\": \"Uniswap v3\",\n  \"tokenAddress\": \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration file for the API reference. It then renders the ApiReference component with the specific configuration for the getNFTContractMetadata endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/04-Get NFT Collections/get-nft-contract-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.nft.getNFTContractMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Importing MainnetBadge Component in JavaScript\nDESCRIPTION: This JavaScript code imports the `MainnetBadge` component using named import syntax from a local project path. This component is likely used to visually indicate that the described feature or API endpoint is available on the main blockchain network.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Volume Stats/04-get-timeseries-volume-by-category.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Streams API Reference in React MDX\nDESCRIPTION: This code renders the ApiReference component within an MDX file, spreading configuration properties for the Streams API into it. This approach allows the documentation to integrate dynamic API reference data and update automatically based on the configuration. Required dependencies are the ApiReference React component and the configuration object loaded in the parent scope. The output is rendered UI content for the 'Get streams' endpoint, targeting developers referencing the Streams API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/get-streams.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.streams.GetStreams} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component (React/JSX)\nDESCRIPTION: Imports the custom `ApiBanner` React component from its source file. This component is likely used to display a promotional or informational banner specific to the API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/07-Get Wallet Net-worth/get-wallet-net-worth.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK via NPM\nDESCRIPTION: This command installs the Moralis SDK and the common EVM utilities package using the Node Package Manager (NPM). It requires Node.js and NPM to be installed. This is typically used in JavaScript or TypeScript projects.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/getting-started/get-your-api-key.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis @moralisweb3/common-evm-utils\n```\n\n----------------------------------------\n\nTITLE: Launching Ngrok Tunnel and Starting Node Backend - Shell\nDESCRIPTION: These commands are used to establish a secure tunnel between your local backend (typically on port 5001) and the public internet using ngrok, and then run the Node.js backend server via npm. Dependencies include ngrok installed and an npm-configured Node.js/Express backend. Both commands should be run in parallel terminals from the 'backend' folder for webhook and API testing; inputs are standard CLI contexts, with outputs being active server and network endpoints.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nngrok http 5001\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Accessing Real-time Events via Moralis Streams API\nDESCRIPTION: Moralis provides real-time blockchain event data through its Streams API, configurable via the Moralis dashboard. This offers a powerful alternative to SimpleHash's webhook capabilities, featuring advanced filters and managed infrastructure. No direct API endpoint URL is used for setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_35\n\nLANGUAGE: plaintext\nCODE:\n```\nN/A - Setup through dashboard\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration\nDESCRIPTION: This snippet imports the `ApiReference` component from a local path and a configuration object (`config`) from a JSON file. These are used to display the API documentation dynamically.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/update-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Route for Balances Component - TypeScript\nDESCRIPTION: Updates the Angular routing module to map the '/balances' path to the 'BalancesComponent'. Facilitates navigation and route-based rendering for the balances page. Import statement and route definition must be added to 'app-routing.module.ts', and proper module imports are required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BalancesComponent } from \"./balances/balances.component\";\n\nconst routes: Routes = [{ path: \"balances\", component: BalancesComponent }];\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with MoralisNextAuthProvider (TypeScript)\nDESCRIPTION: Set up NextAuth with MoralisNextAuthProvider and configure callbacks for JWT and session management in TypeScript.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\n\nexport default NextAuth({\n  providers: [MoralisNextAuthProvider()],\n  // adding user info to the user session object\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      (session as { user: unknown }).user = token.user;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK in handler.js (JavaScript)\nDESCRIPTION: Defines and immediately invokes an asynchronous function `startMoralis` within `handler.js`. This function initializes the Moralis SDK using `Moralis.start()`, providing the API key retrieved from the `MORALIS_API_KEY` environment variable. This step is crucial for enabling Moralis functionality within the application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst startMoralis = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n};\n\nstartMoralis();\n```\n\n----------------------------------------\n\nTITLE: Processing and Uploading NFT Metadata for Solana\nDESCRIPTION: TypeScript functions to convert image to base64, prepare NFT metadata, and send it to a backend API for uploading to Arweave storage.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-minter.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst convertBase64 = (inputFile: any) => {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.readAsDataURL(inputFile);\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = (error) => {\n      reject(error);\n    };\n  });\n};\n\nconst base64Data = await convertBase64(file[0]);\nconst options = {\n  name,\n  description,\n  image: base64Data,\n  symbol: \"M-NFT\",\n};\n\nconst uri = await apiPost(\"/upload\", options)\n  .then((data: UploadMetadataOutput) => {\n    console.log(data);\n    return data.uri;\n  })\n  .catch((e) => {\n    console.log(e);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Installed Apps in Django Settings (Python)\nDESCRIPTION: This snippet updates the `INSTALLED_APPS` list within the Django project's `settings.py` file. It adds the newly created `web3_auth` application to ensure Django recognizes its models, views, templates, and other components. This is a standard step in integrating a new app into a Django project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsettings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'web3_auth'\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK via Yarn\nDESCRIPTION: This command installs the Moralis SDK and the common EVM utilities package using the Yarn package manager. It requires Node.js and Yarn to be installed. This is an alternative for JavaScript or TypeScript projects.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/getting-started/get-your-api-key.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add moralis @moralisweb3/common-evm-utils\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting: Workaround for Firebase SDK with Next.js (TypeScript)\nDESCRIPTION: Provides a workaround for Firebase SDK integration in Next.js by manually constructing Auth and Functions instances and explicitly providing them to getMoralisAuth. Dependencies include Firebase app, Auth, and Functions modules. Input: Firebase app instance; Output: correctly initialized MoralisAuth avoiding the known Firebase-Next.js bug.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst auth = getAuth(app);\nconst functions = getFunctions(app);\n\nconst moralisAuth = getMoralisAuth(app, {\n  auth,\n  functions\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Moralis API Key in TypeScript using dotenv\nDESCRIPTION: Shows how to use the 'dotenv' package in a TypeScript file (index.ts) to load environment variables and access the Moralis API key. Includes TypeScript type annotation for the API key. Requires 'dotenv' package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport dotenv from \"dotenv\";\n\n// inject environment variables\ndotenv.config();\n\nconst apiKey: string = process.env.MORALIS_API_KEY;\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Server and Telegram Bot\nDESCRIPTION: Creates an Express server and sets up a Telegram bot to listen for NFT transfer events and send notifications.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config();\nconst express = require(\"express\");\nconst TelegramBot = require(\"node-telegram-bot-api\");\nconst app = express();\nconst port = 5001;\n\nconst TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\n\nconst bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });\n\napp.use(express.json());\n\napp.post(\"/webhook\", async (req, res) => {\n  const webhook = req.body;\n\n  for (const nftTransfer of webhook.nftTransfers) {\n    const fromAddress = `From address: ${nftTransfer.from.slice(\n      0,\n      4\n    )}...${nftTransfer.from.slice(38)}`;\n    const toAddress = `To address: ${nftTransfer.to.slice(\n      0,\n      4\n    )}...${nftTransfer.to.slice(38)}`;\n    const tokenItem = `Token Item: ${nftTransfer.tokenName} #${nftTransfer.tokenId}`;\n    const transactionHash = `Transaction Hash: ${nftTransfer.transactionHash}`;\n\n    const chatId = \"ADD-CHAT-ID-FROM-LATER-STEPS\";\n    const text = `${fromAddress}, ${toAddress}, ${tokenItem}, ${transactionHash}`;\n\n    bot.sendMessage(chatId, text);\n  }\n\n  return res.status(200).json();\n});\n\napp.listen(port, () => {\n  console.log(`Listening for NFT Transfers`);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Closest Block by Unix Timestamp with Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet showcases the Moralis SDK integration for querying the getDateToBlock endpoint, requiring Moralis and @moralisweb3/common-evm-utils. The script initializes Moralis with an API key, defines the date (unix timestamp string) and EVM chain, and sends the request to fetch the closest block, logging the result as JSON. Type safety is ensured by TypeScript, and both Moralis and type dependencies should be installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-by-unix-timestamp.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const date = \"1667823435\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getDateToBlock({\n    date,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Optimizing Frontend Stream Listener for New Updates (JavaScript)\nDESCRIPTION: This JavaScript snippet enhances the frontend listener by filtering Firestore documents based on their update timestamp. It captures the current time using `firebase.firestore.Timestamp.now()` and incorporates a `.where(\"updatedAt\", \">\", now)` condition into the query. This ensures the `onSnapshot` listener only processes documents updated *after* the application started, avoiding the initial load of all pre-existing documents.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/integrations/firebase.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = firebase.firestore.Timestamp.now();\n\ndb.collection(`moralis/txs/${collectionName}`)\n  .where(\"updatedAt\", \">\", now)\n  .onSnapshot((change) => {\n    doSomeOperation(change.docs);\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Real-Time Pump.fun Bonding Progress Tracker (Moralis Solana API, JavaScript)\nDESCRIPTION: This JavaScript snippet implements a live bonding progress tracker for a Pump.fun token using the Moralis Solana API. It fetches bonding status and metadata via HTTP requests, updates UI components to reflect progress, and displays a graduation message when bonding reaches 100%. Dependencies include an API key and appropriate HTML elements with matching IDs. The tracker polls the API every minute to keep progress updated and handles errors gracefully. Outputs include real-time progress bars, token information, and a notification when the token graduates from bonding.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/09-get-bonding-status.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// The token address you want to track\nconst tokenAddress = \"H2p8S7Ssd3mrBft1bcDGnzW8KNRAGtPTtJLv1tnupump\";\n\nasync function trackBondingProgress() {\n  try {\n    const response = await fetch(\n      `https://solana-gateway.moralis.io/token/mainnet/${tokenAddress}/bonding-status`,\n      {\n        headers: {\n          accept: \"application/json\",\n          \"X-API-Key\": \"YOUR_API_KEY\",\n        },\n      }\n    );\n\n    const data = await response.json();\n\n    // Update the progress display\n    updateProgressUI(data.bondingProgress);\n\n    // Check if graduated\n    if (data.bondingProgress >= 100) {\n      showGraduationMessage();\n    }\n\n    // Schedule next update\n    setTimeout(trackBondingProgress, 60000); // Check every minute\n  } catch (error) {\n    console.error(\"Error fetching bonding status:\", error);\n  }\n}\n\nfunction updateProgressUI(progress) {\n  const progressBar = document.getElementById(\"progress-bar\");\n  const progressText = document.getElementById(\"progress-text\");\n  const remainingProgress = document.getElementById(\"remaining-progress\");\n\n  // Update the progress bar\n  progressBar.style.width = `${progress}%`;\n\n  // Update text display\n  progressText.textContent = `${progress.toFixed(2)}%`;\n\n  // Calculate remaining progress\n  const remaining = 100 - progress;\n  remainingProgress.textContent = `${remaining.toFixed(2)}% to graduation`;\n\n  // Change color based on progress\n  if (progress > 95) {\n    progressBar.classList.add(\"almost-complete\");\n  } else if (progress > 75) {\n    progressBar.classList.add(\"high-progress\");\n  }\n}\n\nfunction showGraduationMessage() {\n  const container = document.getElementById(\"progress-container\");\n  container.innerHTML = `\n    <div class=\"graduation-message\">\n      <h2>🎉 Congratulations! 🎉</h2>\n      <p>This token has graduated from the bonding curve!</p>\n      <a href=\"https://pump.fun/swap?in=sol&out=${tokenAddress}\" target=\"_blank\">\n        Trade on Pump.fun\n      </a>\n    </div>\n  `;\n}\n\n// Start tracking when the page loads\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  trackBondingProgress();\n\n  // Also fetch token metadata to display name and symbol\n  fetchTokenMetadata();\n});\n\nasync function fetchTokenMetadata() {\n  try {\n    const response = await fetch(\n      `https://solana-gateway.moralis.io/token/mainnet/${tokenAddress}/metadata`,\n      {\n        headers: {\n          accept: \"application/json\",\n          \"X-API-Key\": \"YOUR_API_KEY\",\n        },\n      }\n    );\n\n    const data = await response.json();\n\n    // Update token information\n    document.getElementById(\"token-name\").textContent = data.name;\n    document.getElementById(\"token-symbol\").textContent = data.symbol;\n\n    if (data.logo) {\n      document.getElementById(\"token-logo\").src = data.logo;\n      document.getElementById(\"token-logo\").style.display = \"block\";\n    }\n  } catch (error) {\n    console.error(\"Error fetching token metadata:\", error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for AddAddressToStream Endpoint (Markdown + JSX)\nDESCRIPTION: This snippet embeds a custom React component (ApiReference) within the Markdown file using JSX syntax, passing configuration specific to the 'AddAddressToStream' stream. This enables the documentation to display interactive API call details for adding addresses to streams in the EVM Streams API. The component expects a config with stream endpoint details and must be used within a Docusaurus or similar MDX environment supporting embedded React components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/add-address-to-stream.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<ApiReference {...config.streams.AddAddressToStream} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner React Component (TypeScript)\nDESCRIPTION: This snippet demonstrates importing a TypeScript React component responsible for rendering API banners. The input is the path to the TypeScript JSX file; output is access to the <ApiBanner> component for use within documentation pages. Requires a project supporting both React and TypeScript, and properly resolved module paths.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/03- Get Entities/get-entity-by-id.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for Solana Program\nDESCRIPTION: Updates to the Cargo.toml file to specify the library name and crate types for the Solana program.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\nname = \"tic_tac_toe\"\ncrate-type = [\"cdylib\", \"lib\"]\n```\n\n----------------------------------------\n\nTITLE: Resolving Unstoppable Domain with Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to resolve an Unstoppable domain name to a wallet address using the Moralis EVM API SDK. It requires initializing the Moralis SDK with an API key and then calling `Moralis.EvmApi.resolve.resolveDomain` with the target domain. The resolved address is returned in the response object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-reverse-resolve-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const domain = \"brad.crypto\";\n\n  const response = await Moralis.EvmApi.resolve.resolveDomain({\n    domain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Backend Client (TypeScript)\nDESCRIPTION: Initializes the Supabase client for backend usage in TypeScript. It imports `createClient` from the SDK and instantiates a client using the Supabase project URL and the Service Role Key. The Service Role Key grants elevated privileges, allowing the backend to bypass RLS policies when necessary, for tasks like user creation or administrative actions. These credentials should be securely managed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(config.SUPABASE_URL, config.SUPABASE_SERVICE_ROLE);\n```\n\n----------------------------------------\n\nTITLE: Calling a Firebase Callable Function from Frontend (JavaScript)\nDESCRIPTION: Defines an asynchronous JavaScript function `getBalance` in the frontend. It uses the initialized Firebase Functions client SDK (`functions`) to call the backend Cloud Function named \"getBalance\" via `httpsCallable`. It passes a hardcoded Ethereum address as data and displays the returned balance data in a browser alert.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getBalance() {\n  const response = await functions.httpsCallable(\"getBalance\")({\n    address: \"0xf977814e90da44bfa03b6295a0616a897441acec\",\n  });\n  alert(JSON.stringify(response.data));\n}\n```\n\n----------------------------------------\n\nTITLE: Getting an Entity by ID via API Endpoint (URI)\nDESCRIPTION: Provides the API endpoint URL template for retrieving a specific entity by its unique ID using the Moralis Entity API. The `:entityId` path parameter must be replaced with the actual ID of the desired entity. This endpoint corresponds to the `getEntity` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/entity-api.md#2025-04-23_snippet_3\n\nLANGUAGE: uri\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/entities/:entityId\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component (JSX)\nDESCRIPTION: This snippet imports the `ApiBanner` React component, presumably used to display a banner or promotional element related to the API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/05-Get NFT Owners/get-nft-owners.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Checking Moralis Web3 API Version in Python\nDESCRIPTION: Demonstrates a basic API call using the Moralis Python SDK to retrieve the current version of the Web3 API. Requires importing the `moralis` package and providing a valid Moralis API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport moralis\n\nprint(moralis.utils.web3_api_version(api_key='API_KEY_HERE'))\n\n# it prints {'version': '0.0.53'}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Express.js Server\nDESCRIPTION: Creates a basic Express.js server that listens on port 3000 and sets up a /webhook endpoint to receive POST requests.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`Listening to streams`);\n});\n\napp.post(\"/webhook\", (req, res) => {\n  const webhook = req.body;\n\n  console.log(webhook);\n\n  return res.status(200).json();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter NFT Application Structure\nDESCRIPTION: A structural overview of a Flutter application that interacts with Moralis API to fetch and display NFTs. The application consists of a Flask backend server, login page with WalletConnect integration, NFT list component for displaying NFT data, and a main application file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/flutter.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Backend server (Flask)\n- Login page (WalletConnect)\n- NFT list component\n- Main application file\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JavaScript\nDESCRIPTION: Imports the ApiReference React component from the local project components directory. This component is used to render API documentation and reference material within a Docusaurus page. No external dependencies other than React and the declared local module are required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-wallet-nft-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies (React/Web3uikit/Axios) - Bash\nDESCRIPTION: Installs the necessary packages for the React frontend (axios for HTTP requests, @web3uikit/core, @web3uikit/web3, and @web3uikit/icons for Web3 UI components). Requires Node.js and NPM/yarn. Outputs: updated node_modules with dependencies ready for import into React components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install axios @web3uikit/core @web3uikit/web3 @web3uikit/icons\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference and Configurations - JavaScript/React\nDESCRIPTION: This snippet imports the ApiReference React component and a configuration file (configs.json) required to provide dynamic API documentation rendering. Dependencies include the React library, the @site/src/components/ApiReference module, and a valid JSON configuration at the specified relative path. No input parameters are required; the modules are used to support API documentation injection on the page. The outputs are React component references for later usage; incorrect paths or missing modules will throw import errors.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/04-Get Token Transfers/get-wallet-token-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReference Component in MDX\nDESCRIPTION: This snippet shows the import of the ApiReference React component and its usage within an MDX file. It passes configuration data related to the 'getNFTMetadata' NFT endpoint (loaded from 'configsV2.json') as props to the component, which then renders the relevant API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/02-Get NFT Metadata/get-nft-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n# Get NFT metadata\n\n<ApiReference {...config.nft.getNFTMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client\nDESCRIPTION: TypeScript code to initialize Supabase client with credentials\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(config.SUPABASE_URL, config.SUPABASE_SERVICE_ROLE);\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with React Component (JSX)\nDESCRIPTION: This JSX snippet demonstrates the usage of the `ApiReference` React component. It dynamically renders the API documentation details by spreading properties from a specific configuration object (`config.nft.getNFTTradesByWallet`). This component likely handles the presentation of endpoint URL, parameters, request/response examples, etc., based on the provided configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-nft-trades-by-wallet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTTradesByWallet} />\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: Markdown frontmatter configuration defining the page's position in sidebar, label, and URL slug.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/02-Get Transactions/get-wallet-transactions-verbose.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 3\nsidebar_label: Get decoded transactions by wallet\nslug: /web3-data-api/evm/reference/get-decoded-wallet-transaction\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference and Admonition Components in JSX\nDESCRIPTION: This JSX snippet integrates the ApiReference component for the eth_getNFTCollections RPC method and a contextual Admonition (note) for helping users find more schema details. It references the loaded config to render the proper method documentation and offers contextual help with a clickable internal link. Key parameters are the config object spread into ApiReference and the title/type attributes for Admonition. Inputs are React component props and children, and outputs are interactive documentation blocks in the rendered site. Dependencies are the aforementioned React components and config; rendering outside a Docusaurus environment or without the right props may cause runtime issues.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/eth_getNFTCollections.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.rpc.eth_getNFTCollections} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with React Component (JSX)\nDESCRIPTION: This JSX snippet renders the imported `ApiReference` React component within the Markdown page. It uses the spread syntax (`{...}`) to pass properties related to the specific NFT metadata endpoint (`config.nft.getNFTContractMetadata`) from the imported JSON configuration. This dynamically displays the detailed API reference for getting NFT contract metadata.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/02-Get NFT Metadata/get-nft-contract-metadata.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTContractMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Defining Event ABI for Token Transfers in JSON\nDESCRIPTION: This snippet provides the ABI definition for the USDC Transfer event, necessary for configuring stream monitoring in the Moralis Admin Panel. The ABI describes fields for 'from', 'to', and 'value', enabling the backend to decode and filter blockchain events based on these parameters. It requires an understanding of Ethereum event ABIs and is used by the backend to recognize the relevant smart contract event topics; there are no code-level dependencies beyond stream integration supporting Ethereum ABIs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/filter-streams.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample Environment Variables for Moralis/Express Server - Shell\nDESCRIPTION: This code block provides a sample .env file necessary for server configuration, including app domain, Moralis API key, React frontend URL, and authentication secret for JWT signing. Place this in your server root directory to be read by dotenv. Do not commit this file to source control as it contains sensitive credentials.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nAPP_DOMAIN=amazing.finance\nMORALIS_API_KEY=xxxx\nREACT_URL=http://localhost:3000\nAUTH_SECRET=1234\n```\n\n----------------------------------------\n\nTITLE: Submitting eth_sendRawTransaction Parameters - JSON\nDESCRIPTION: Demonstrates the parameter array for eth_sendRawTransaction, taking one string argument with the signed transaction data in hexadecimal format. The transaction data must be already signed, and the output will be the transaction hash if successfully broadcast.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"0x...\"\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing RainbowKit Authentication Logic in `signin.jsx` (JavaScript)\nDESCRIPTION: Defines the `handleAuth` function within a `useEffect` hook in `pages/signin.jsx`. This logic triggers when a wallet is connected (`isConnected` is true) but the user is not yet authenticated (`status` is 'unauthenticated'). It uses `useAuthRequestChallengeEvm` from Moralis to get a challenge message, `useSignMessage` from wagmi to sign it, and `signIn` from `next-auth` to complete the authentication process using the 'moralis-auth' provider, finally redirecting the user to the '/user' page without a full page refresh using Next.js router (`push`).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n...\n  useEffect(() => {\n    const handleAuth = async () => {\n      const { message } = await requestChallengeAsync({\n        address: address,\n        chainId: chain.id,\n      });\n\n      const signature = await signMessageAsync({ message });\n\n      // redirect user after success authentication to '/user' page\n      const { url } = await signIn(\"moralis-auth\", {\n        message,\n        signature,\n        redirect: false,\n        callbackUrl: \"/user\",\n      });\n      /**\n       * instead of using signIn(..., redirect: \"/user\")\n       * we get the url from callback and push it to the router to avoid page refreshing\n       */\n      push(url);\n    };\n    if (status === \"unauthenticated\" && isConnected) {\n      handleAuth();\n    }\n  }, [status, isConnected]);\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Backend Directory Structure (Shell)\nDESCRIPTION: Creates a new directory named 'backend' in the current project root and navigates into it. This sets up the folder structure for the backend application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir backend\ncd backend\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Solana Tic-Tac-Toe Games in TypeScript\nDESCRIPTION: This snippet from TicTacToe.tsx handles fetching game accounts from the Solana blockchain, deserializing the data, and rendering available games. It uses the getProgramAccounts function to retrieve game data and updates the UI accordingly.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `src/components/templates/TicTacToe/TicTacToe.tsx`\n\n// Data of available game accounts are stored in state variable\nconst [gameAccounts, setGameAccounts] = useState<Array<gameData['data']>>([]);\n\n// `getProgramAccounts` function is called when then Refresh games button is clicked\nconst getProgramAccounts = async () => {\n    setGameAccounts([]);\n    const data = await connection.getProgramAccounts(new PublicKey(programId));\n    if (data.length) {\n      data.forEach((e) => {\n        console.log(e);\n        const gameInput = deserializeUnchecked(GameAccountSchema, GameAccount, e.account.data);\n        const accountId = e.pubkey;\n        const game = { gameInput, accountId };\n        console.log(data);\n        setGameAccounts((existing) => [...existing, game]);\n      });\n  };\n\nreturn (\n  <Flex flexDirection={'column'} alignItems={'center'}>\n    <Heading size=\"sm\" marginBottom={6}>\n      {gameAccounts.length ? 'Available Games!!' : 'Click to refresh games'}\n    </Heading>\n    <Flex overflow={'scroll'} maxWidth={'800px'} gap={'4px'}>\n     // UI is rendered with the data from `gameAccounts` stae\n      {gameAccounts &&\n        gameAccounts.map((game, i) => {\n          return (\n            <Games\n              key={i}\n              data={{ gameInput: game.gameInput, accountId: game.accountId }}\n              loadGame={() => {\n                loadGame(game);\n              }}\n            />\n          );\n        })}\n    </Flex>\n    <Button\n      maxWidth={'200px'}\n      minWidth={'150px'}\n      mt={4}\n      colorScheme=\"gray\"\n      isLoading={status ? true : false}\n      onClick={getProgramAccounts}\n    >\n      Refresh Games\n    </Button>\n  </Flex>\n);\n```\n\n----------------------------------------\n\nTITLE: EvmAddress Equality Comparison\nDESCRIPTION: Demonstrates how to compare EvmAddress instances with different formats.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  \"check 1: \",\n  address.equals(\"0xa9c4c85dd0495e32d08ef64d51fdeb35d200edfe\")\n);\n// check 1: true\nconsole.log(\n  \"check 2: \",\n  address.equals(\"0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe\")\n);\n// check 2: true\nconsole.log(\n  \"check 3: \",\n  address.equals(\n    EvmAddress.create(\"0xa9c4c85dd0495e32d08ef64d51fdeb35d200edfe\")\n  )\n);\n// check 3: true\nconsole.log(\n  \"check 4: \",\n  address.equals(\n    EvmAddress.create(\"0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe\")\n  )\n);\n// check 4: true\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection NFTs with Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch all NFTs from a specific contract address using the Moralis SDK. It initializes the SDK with an API key, specifies the contract address and chain (Ethereum), calls `Moralis.EvmApi.nft.getContractNFTs`, and prints the JSON response. Requires `moralis` and `@moralisweb3/common-evm-utils` packages and a valid Moralis API Key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getContractNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Endpoint Weights\nDESCRIPTION: This JSON structure illustrates the expected output format when querying for Moralis API endpoint weights. It contains an array of objects, where each object details an endpoint's name, its path, its `price` in compute units (for billing), and its `rateLimitCost` in compute units (for rate limiting).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/05-compute-units-cu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\n  {\n    \"endpoint\": \"getBlock\",\n    \"path\": \"/block/{block_number_or_hash}\",\n    \"price\": 5,\n    \"rateLimitCost\": 5\n  },\n  {\n    \"endpoint\": \"getContractEvents\",\n    \"path\": \"/{address}/events\",\n    \"price\": 2,\n    \"rateLimitCost\": 2\n  },\n  {\n    \"endpoint\": \"getTransactions\",\n    \"path\": \"/transaction/{transaction_hash}\",\n    \"price\": 1,\n    \"rateLimitCost\": 3\n  }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Identifying Webhook URL Format for Firebase Emulator\nDESCRIPTION: This URL pattern shows the local endpoint for the Moralis Streams webhook cloud function when using the Firebase Emulator Suite. Replace `<project_id>` and `<location>` with your specific project identifier and function location. This URL is typically found in the emulator logs and may necessitate a tool like ngrok for external access during development testing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/integrations/firebase.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:5001/<project_id>/<location>/ext-moralis-streams-webhook\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Portfolio Balance with JavaScript\nDESCRIPTION: JavaScript implementation using Moralis SDK to retrieve Solana portfolio balance. Requires Moralis API key and uses the SolNetwork enum for network specification.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/balance-api/how-to-get-solana-portfolio-balance-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getPortfolio({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance of an ERC20 Vault in Python\nDESCRIPTION: This Python script utilizes the `moralis` library to fetch the native balance of an ERC20 token vault. It sets up the API key and defines the parameters including the vault's address and the chain identifier ('eth'). It then calls the `evm_api.balance.get_native_balance` function with these details and prints the returned result which contains the native balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-vault.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    # address of ERC20 token vault, e.g. WETH token address\n    \"address\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.balance.get_native_balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Pending Transaction State with useEffect - React/JavaScript\nDESCRIPTION: A React useEffect hook that monitors the isSuccess variable, which reflects whether a transaction has succeeded. If isSuccess is true, it updates the selectedToken state: for the token key currently stored in keyRef, it sets pendingTx to true if it isn't already. This enables UI elements (like the View Transaction button) to reflect transaction progress. Assumes selectedToken is an array of token states, and setSelectedToken is a hook dispatcher.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n    if (isSuccess) {\n      setSelectedToken((prevSelectedTokens) => {\n        const updatedSelectedTokens = [...prevSelectedTokens];\n        const key = keyRef.current !== null ? keyRef.current : undefined;\n        if (key !== undefined) {\n          const { pendingTx } = updatedSelectedTokens[key];\n          if (!pendingTx) {\n            updatedSelectedTokens[key] = {\n              ...updatedSelectedTokens[key],\n              pendingTx: true,\n            };\n          }\n          return updatedSelectedTokens;\n        } else {\n          return prevSelectedTokens;\n        }\n      });\n    }\n  }, [isSuccess]);\n```\n\n----------------------------------------\n\nTITLE: Example JSON-RPC Client Request for Ethereum Block Retrieval\nDESCRIPTION: This snippet shows a basic JSON-RPC 2.0 request to retrieve a specific Ethereum block by its number. It includes the required protocol version, method name, parameters (block number in hex and a boolean for full transaction details), and a request identifier.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/fundamentals/how-json-rpc-works.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_getBlockByNumber\",\n  \"params\": [\"0x10d4f\", true],\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList in JSX\nDESCRIPTION: This snippet first imports the `DocCardList` component from the '@theme/DocCardList' module. It then renders this component. The `DocCardList` component is typically used within documentation frameworks like Docusaurus to automatically generate a list of cards linking to related documents or sub-pages based on the file structure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/integrations/integrations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component for Solana getPortfolio Endpoint\nDESCRIPTION: This code imports the ApiReference component and configuration data, then renders API documentation for the Solana getPortfolio endpoint. The component displays detailed API specifications based on the provided configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/wallet-api/get-portfolio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n\n# Get Wallet Portfolio\n\n<ApiReference {...config.solana.getPortfolio} />\n```\n\n----------------------------------------\n\nTITLE: Creating Frontend React Application (NPX) - Shell\nDESCRIPTION: Invokes the React app generator to create a new 'frontend' directory using NPX. Requires npx and Node.js installed. Outputs a fresh React scaffolding in './frontend'. No inputs. No custom configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-react-app frontend\n```\n\n----------------------------------------\n\nTITLE: Example Transaction Response Format\nDESCRIPTION: Sample JSON response showing the structure of retrieved wallet transactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-wallet-transactions.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"cursor\": null,\n    \"page_size\": 100,\n    \"page\": 0,\n    \"result\": [\n      {\n        \"hash\": \"0x18974227cd70d2806fc9ab0b4a5702fb0e0f301d9e70fa1a720accf0498b92d2\",\n        \"nonce\": \"80\",\n        \"transaction_index\": \"61\",\n        \"from_address\": \"0xe6d5514b8de7ef9e5f5c4cc2e8ca0207129deb65\",\n        \"to_address\": \"0xc026395860db2d07ee33e05fe50ed7bd583189c7\",\n        \"value\": \"21041290431188\",\n        \"gas\": \"346309\",\n        \"gas_price\": \"1785758179\",\n        \"block_timestamp\": \"2024-09-03T19:37:59.000Z\",\n        \"block_number\": \"20672192\",\n        \"transaction_fee\": \"0.000604293424740884\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Component and JSON Configuration in JavaScript\nDESCRIPTION: This JavaScript snippet imports the `ApiReference` React component from a relative path within the Docusaurus site structure (`@site/src/components/ApiReference`) and a JSON configuration object (`config`) from a specified file path. These imports are required to dynamically render the API documentation component using the specified configuration data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/02-Project/set-settings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Particle Connect Core via npm\nDESCRIPTION: Installs the core `@particle-network/connect` package using npm. This package is essential for the underlying functionality of Particle Connect integration within the Dapp.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-particle.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @particle-network/connect\n```\n\n----------------------------------------\n\nTITLE: Encapsulating IP Rate Limiting as Reusable Middleware in TypeScript\nDESCRIPTION: This TypeScript snippet implements an IpRateLimiter class that wraps a Firebase HTTPS function handler with per-IP rate limiting using firebase-functions-rate-limiter. It also provides a factory function to instantiate the middleware using Firestore. The middleware reads and normalizes client IPs, enforces usage quotas, and delegates to the original handler. Requires firebase-admin, firebase-functions, firebase-functions-rate-limiter, and TypeScript support for async/await.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as admin from \\\"firebase-admin\\\";\nimport * as functions from \\\"firebase-functions\\\";\nimport { FirebaseFunctionsRateLimiter } from \\\"firebase-functions-rate-limiter\\\";\nimport { CallableContext } from \\\"firebase-functions/v1/https\\\";\nimport { OnCallHandler } from \\\"./OnCallHandler\\\";\n\nexport type OnCallHandler<T> = (\n  data: T,\n  context: CallableContext\n) => Promise<unknown>;\n\nexport class IpRateLimiter {\n  public constructor(private readonly limiter: FirebaseFunctionsRateLimiter) {}\n\n  public readonly wrap = <T>(handler: OnCallHandler<T>) => {\n    return async (data: T, context: CallableContext) => {\n      const qualifier = \\\"ip-\\\" + this.readNormalizedIp(context.rawRequest);\n\n      await this.limiter.rejectOnQuotaExceededOrRecordUsage(qualifier);\n\n      return await handler(data, context);\n    };\n  };\n\n  private readNormalizedIp(request: functions.https.Request): string {\n    return request.ip ? request.ip.replace(/\\.|:/g, \\\"-\\\") : \\\"unknown\\\";\n  }\n}\n\nexport function ipRateLimiterMiddleware(firestore: admin.firestore.Firestore) {\n  const limiter = FirebaseFunctionsRateLimiter.withFirestoreBackend(\n    {\n      name: \\\"rateLimiter\\\",\n      maxCalls: 10,\n      periodSeconds: 5,\n    },\n    firestore\n  );\n  return new IpRateLimiter(limiter).wrap;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Signin Component Template (HTML)\nDESCRIPTION: Defines the basic HTML structure for the `signin` component (`src/app/signin/signin.component.html`). It includes a title and a button that triggers the `handleAuth()` method when clicked.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<h3>Web3 Authentication</h3>\n<button type=\"button\" (click)=\"handleAuth()\">Authenticate via MetaMask</button>\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC-20 Token Balance History using Moralis Wallet API (TypeScript)\nDESCRIPTION: This TypeScript example shows how to use the Moralis Wallet API to retrieve the historical ERC-20 token balances for an Ethereum address. It requires 'moralis' and '@moralisweb3/common-evm-utils' packages, and TypeScript setup. The code initializes Moralis with your API key, uses explicit typing for parameters, requests the address's balances at a specific block, and logs the response or errors. Inputs: API key, address, chain, and block. Output: Object representing the balances. Replace 'YOUR_API_KEY' before running.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-erc-20-token-balance-history.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \\\"moralis\\\";\\nimport { EvmChain } from \\\"@moralisweb3/common-evm-utils\\\";\\n\\n// The main function to run the script\\nconst runApp = async (): Promise<void> => {\\n  // Initialize Moralis with your API key\\n  await Moralis.start({ apiKey: \\\"YOUR_API_KEY\\\" });\\n\\n  // Define the wallet address and blockchain details\\n  const address: string = \\\"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\\\";\\n  const chain: EvmChain = EvmChain.ETHEREUM; // Ethereum mainnet\\n  const toBlock: string = \\\"16310000\\\"; // Block number for historical data\\n\\n  try {\\n    // Get token balances at the specified block\\n    const response = await Moralis.EvmApi.token.getWalletTokenBalances({ address, chain, toBlock });\\n\\n    // Output the history of token balances at the specified block\\n    console.log(\\\"Token Balances at Block:\\\", toBlock);\\n    console.log(JSON.stringify(response, null, 2)); // formatted JSON output\\n  } catch (error) {\\n    // Error handling\\n    console.error(\\\"Error fetching token balances:\\\", error);\\n  }\\n};\\n\\n// Execute the function\\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Initializing State Variables for Remote Token Deployment in React\nDESCRIPTION: This snippet demonstrates the initialization of state variables within a React functional component (`DeployTokenRemotely`) using the `useState` hook. These variables (`sourceChain`, `destinationChain`, `tokenAddress`) are intended to store information collected from the UI, which is necessary for deploying an Interchain Token to a remote chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst DeployTokenRemotely = () = >{\n  //...\n  const[sourceChain, setSourceChain] = useState < string > \"\";\n  const[destinationChain, setDestinationChain] = useState < string > \"\";\n  const[tokenAddress, setTokenAddress] = useState < string > \"\";\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok Tunnel for Express Server\nDESCRIPTION: Creates an ngrok tunnel to expose the local Express server on port 3000 to the internet.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Moralis Stream (EVM) with Python SDK\nDESCRIPTION: Demonstrates setting up a Moralis Stream using the Python SDK (`moralis.streams`) to monitor specific EVM events (e.g., ENS NameRegistered). It involves defining the webhook URL, API key, event ABI, filtering logic (`advanced_options`), and stream configuration (`body`). After creating the stream with `streams.evm.create_stream`, it adds a specific contract address to monitor using `streams.evm.add_address_to_stream`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nrequiremets: moralis python sdk\nyou can run this command to install it:\npip install moralis\n\"\"\"\n\nfrom moralis import streams\n\n\nwebhook_url = 'WEB_HOOK_URL_HERE'\napi_key = 'API_KEY_HERE'\n\nabi = [{\n  \"anonymous\": False,\n  \"inputs\": [\n    {\n      \"indexed\": False,\n      \"internalType\": \"string\",\n      \"name\": \"name\",\n      \"type\": \"string\",\n    },\n    {\n      \"indexed\": True,\n      \"internalType\": \"bytes32\",\n      \"name\": \"label\",\n      \"type\": \"bytes32\",\n    },\n    {\n      \"indexed\": True,\n      \"internalType\": \"address\",\n      \"name\": \"owner\",\n      \"type\": \"address\",\n    },\n    {\n      \"indexed\": False,\n      \"internalType\": \"uint256\",\n      \"name\": \"cost\",\n      \"type\": \"uint256\",\n    },\n    {\n      \"indexed\": False,\n      \"internalType\": \"uint256\",\n      \"name\": \"expires\",\n      \"type\": \"uint256\",\n    },\n  ],\n  \"name\": \"NameRegistered\",\n  \"type\": \"event\",\n}]\n\nadvanced_options = [\n  {\n    \"topic0\": \"NameRegistered(string,bytes32,address,uint256,uint256)\",\n    \"filter\": {\n      \"or\": [\n        { \"eq\": [\"owner\", \"0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5\"] },\n        { \"gt\": [\"cost\", \"1000000000000000000\"] }\n      ]\n    }\n  }\n]\n\n\nbody = {\n    \"webhookUrl\": webhook_url,\n    \"description\": \"ENS Name Registrations\",\n    \"tag\": \"ensRegistrationByBob\",\n    \"topic0\": [\"NameRegistered(string,bytes32,address,uint256,uint256)\"],\n    \"allAddresses\": False,\n    \"includeNativeTxs\": True,\n    \"includeContractLogs\": True,\n    \"includeInternalTxs\": False,\n    \"abi\": abi,\n    \"advancedOptions\": advanced_options,\n    \"chainIds\": [\"0x1\"],\n}\n\nresult = streams.evm.create_stream(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n\n# Attach the contract address to the stream\nparams = {\n    \"id\": result[\"id\"],\n}\nbody = {\n    \"address\": \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n}\n\nresult = streams.evm.add_address_to_stream(\n    api_key=api_key,\n    params=params,\n    body=body,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Multi-Chain Wallet Activity\nDESCRIPTION: This JSON object represents a sample response from the Moralis `getWalletActiveChains` endpoint. It shows the queried `address` and an array `active_chains`, where each object details the activity on a specific chain (Ethereum, BSC, Polygon in this example), including the `chain` identifier, `chain_id`, and details about the `first_transaction` and `last_transaction` (timestamp, block number, transaction hash).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/01-Wallet Details/how-to-get-multichain-activity-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n  \"active_chains\": [\n    {\n      \"chain\": \"eth\",\n      \"chain_id\": \"0x1\",\n      \"first_transaction\": {\n        \"block_timestamp\": \"2015-09-28T08:24:43.000Z\",\n        \"block_number\": \"302086\",\n        \"transaction_hash\": \"0x9b629147b75dc0b275d478fa34d97c5d4a26926457540b15a5ce871df36c23fd\"\n      },\n      \"last_transaction\": {\n        \"block_timestamp\": \"2023-07-18T22:00:59.000Z\",\n        \"block_number\": \"17722945\",\n        \"transaction_hash\": \"0xde35173f86138e2c0accd780b08cf986009c6ac577d441fe49050764666493e4\"\n      }\n    },\n    {\n      \"chain\": \"bsc\",\n      \"chain_id\": \"0x38\",\n      \"first_transaction\": {\n        \"block_timestamp\": \"2022-03-22T08:29:46.000Z\",\n        \"block_number\": \"16275630\",\n        \"transaction_hash\": \"0x144bf655f6ad276c42e6380997db73eff30725923a2c089fb7e57b3e3d07a32b\"\n      },\n      \"last_transaction\": {\n        \"block_timestamp\": \"2023-06-12T11:37:50.000Z\",\n        \"block_number\": \"29035694\",\n        \"transaction_hash\": \"0x18e5043a363ba33ad2320f7980efd50372bc021fb1b3041e7831db9058492551\"\n      }\n    },\n    {\n      \"chain\": \"polygon\",\n      \"chain_id\": \"0x89\",\n      \"first_transaction\": {\n        \"block_timestamp\": \"2021-07-20T02:38:06.000Z\",\n        \"block_number\": \"17055069\",\n        \"transaction_hash\": \"0x482328171e8549129acd9dde9408602410909adac2e4e46a9591592b2e0e1a24\"\n      },\n      \"last_transaction\": {\n        \"block_timestamp\": \"2023-07-14T08:55:47.000Z\",\n        \"block_number\": \"45062599\",\n        \"transaction_hash\": \"0x7dd9979c5d57ac74c2787f47e8ff9942d0eebf6375ab5262ac48d0455b9c3de3\"\n      }\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Block Transaction Count by Hash - Ethereum JSON-RPC - JSON\nDESCRIPTION: Shows an example input and output for the eth_getBlockTransactionCountByHash method, which retrieves the number of transactions in a block specified by its hash. The request only requires the block hash. The response returns the transaction count as a hexadecimal string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[\"0xbfddf451426ef49dc0b726480adfdbd660d64d45bfa49670834d67cf44c3f2e2\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x10\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Internal Transactions by Hash using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the Moralis SDK and use the `Moralis.EvmApi.transaction.getInternalTransactions` method to fetch internal transactions for a specific transaction hash on the Ethereum chain. It requires the `moralis` and `@moralisweb3/common-evm-utils` packages, an API key, the transaction hash, and the chain identifier.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-internal-transactions-by-hash.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const transactionHash =\n    \"0xae5f9a43f424624376ea7479ce7b0ab25e9eba11f1c4791ec4e68f0206b5e071\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getInternalTransactions({\n    transactionHash,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for getWalletNFTs Endpoint\nDESCRIPTION: Shows a sample JSON response structure returned by the Moralis `getWalletNFTs` API endpoint. It includes pagination details (`total`, `page`, `page_size`, `cursor`), a `result` array containing individual NFT objects with properties like `token_address`, `token_id`, `owner_of`, `metadata`, etc., and a `status` field.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"total\": 1456,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsid2FsbGV0QWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSJ9LCJrZXlzIjpbIjE2NjMyMzgxNzUuMDc3Il0sIndoZXJlIjp7Im93bmVyX29mIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1In0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6MTQ1NiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2NjgyNTUyfQ.E5DkWYvRTaFnVhgedRuT3IW-rb2V-ikFKwP2cg2Qf78\",\n  \"result\": [\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"4765809967066625256798886812262830659450023020194524584471225959000376492819\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"ba6d44b5f16be94283cecffeb784b7ca\",\n      \"block_number_minted\": \"15572796\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:06:08.153Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"84453794918345416145331514647027903846664455083247396107154093349515123913389\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"7c0212cd3daf1b6b64f193c6dc102fb4\",\n      \"block_number_minted\": \"15572811\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:09:09.838Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"16476931145019337030786748713476010946621971075817308111460324192065814192354\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"627ffc76405a90ee940cb91f7e90b294\",\n      \"block_number_minted\": \"15572818\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:11:34.545Z\",\n      \"minter_address\": null\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching EVM NFT Owners by Token ID using Moralis API\nDESCRIPTION: Moralis API endpoint (v2.2) for retrieving the owners of a specific EVM token, identified by its contract address and token ID. Requires the contract `address` and `token_id` as path parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/nft/:address/:token_id/owners\n```\n\n----------------------------------------\n\nTITLE: Formatting and Displaying Native Balance in C#\nDESCRIPTION: Takes the fetched native balance (returned as a string in the `NativeBalance` object), attempts to parse it into a double, converts it from the smallest unit (like wei for Ethereum) to the main unit by dividing by 10^18, and then prints the formatted balance to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ndouble nativeBal = 0;\n\ndouble.TryParse(bal.Balance, out nativeBal);\n\nConsole.WriteLine($\"Your native balance is {nativeBal / Math.Pow(10,18)}\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Express Server (JavaScript)\nDESCRIPTION: Sets up a minimal Express application in 'backend/index.js'. It imports 'express' and 'cors', initializes an app instance, enables CORS, defines a basic root route ('/') that sends 'Hello World!', and starts the server listening on port 8080.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express')\nconst cors = require('cors')\nconst app = express()\nconst port = 8080\n\napp.use(cors())\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`)\n})\n```\n\n----------------------------------------\n\nTITLE: VStack Component with Transaction State, Menus, and Inputs - React/JavaScript\nDESCRIPTION: Provides the complete React JSX for the VStack component. It shows the View Transaction button when a transaction for a given token key is pending, or renders a set of menu and input controls otherwise. Includes selections for blockchain chains, address input, transfer amount, and a conditional Transfer button that triggers transaction logic and updates refs. Dependencies include React, state variables and setters, and possibly UI component libraries. Inputs come from user interactions; outputs are UI changes and triggered state updates.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<VStack>\n{selectedToken[key]?.pendingTx ? (\n    <Button onClick={() => viewTx()}>View Transaction</Button>\n) : (\n    <>\n    <Menu>\n        {({ isOpen }) => (\n        <>\n            <MenuButton isActive={isOpen} as={Button} size=\"s\" rightIcon={<ChevronDownIcon />}>\n            {selectedDestChain[key]?.chainName == ''\n                ? 'Select Chain'\n                : selectedDestChain[key]?.chainName}\n            </MenuButton>\n            <MenuList>\n            <MenuItem onClick={() => updateDestChain(key, '', 0, '')}>Clear</MenuItem>\n            {availableChains.map((availableChain) =>\n                availableChain.chainId !== chain?.id ? (\n                <MenuItem\n                    key={availableChain.chainId}\n                    onClick={() =>\n                    updateDestChain(\n                        key,\n                        availableChain.chainName,\n                        availableChain.chainId,\n                        availableChain.distributionContractAddr,\n                    )\n                    }\n                >\n                    {availableChain.chainName}\n                </MenuItem>\n                ) : null,\n            )}\n            </MenuList>\n        </>\n        )}\n    </Menu>\n    <Input\n        placeholder=\"Receiving Address(es)\"\n        size=\"sm\"\n        value={receiverAddrs[key] || ''}\n        onChange={(e) => updateReceiverAddrs(key, e.target.value)}\n    />\n    <Input\n        placeholder=\"Transfer Amount\"\n        size=\"sm\"\n        value={selectedToken[key]?.transferAmount || ''}\n        onChange={(e) => {\n        const value = e.target.value;\n        if (key !== undefined && token?.symbol && token?.contractAddress) {\n            updateTransferAmount(\n            key,\n            token.symbol,\n            token.contractAddress.checksum,\n            parseFloat(value),\n            false,\n            );\n        }\n        }}\n    />\n    <Button\n        isDisabled={token?.symbol != 'aUSDC'}\n        onClick={() => {\n        write?.();\n        keyRef.current = key;\n        }}\n    >\n        Transfer\n    </Button>\n    </>\n)}\n</VStack>\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in React/JSX\nDESCRIPTION: Imports the `ApiBanner` component from a TypeScript React file (.tsx) located within the project's components directory. This component is likely used to display specific banners or informational messages on the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/04-Get Wallet Token Approvals/get-wallet-token-approvals.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Applying Global Styles (index.css) - CSS\nDESCRIPTION: This snippet sets global styles for the app by specifying body and code element styles in src/index.css. It normalizes typography, sets the background and text colors, applies font smoothing for better rendering, and sets a monospace font for code elements. This ensures a consistent look across browsers. This file must be saved as src/index.css and is typically imported once in the React entry point (e.g., src/index.js). No parameters are needed; styles apply globally.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_22\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: rgb(33, 33, 38);\n  color: white;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Block Stats Response Example\nDESCRIPTION: Example JSON response structure for the new /block/{block_number_or_hash}/stats endpoint showing transaction and transfer counts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-09-11-breaking-change.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"transactions\": {\n    \"total\": \"152\"\n  },\n  \"nft_transfers\": {\n    \"total\": \"51\"\n  },\n  \"token_transfers\": {\n    \"total\": \"22\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending Tokens via Moralis API\nDESCRIPTION: Exclusive Moralis API endpoint (GET request) for retrieving a list of currently trending tokens based on market activity or other metrics. Useful for identifying popular or rapidly moving tokens.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_42\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/tokens/trending\n```\n\n----------------------------------------\n\nTITLE: Examining Webhook Headers with Records Information in JSON\nDESCRIPTION: This snippet shows webhook header information containing the 'x-records-charged' field which indicates the total number of records (20) in the webhook that will be counted towards usage.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/records-and-pricing.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nheaders: {\n    'x-region': 'us-west-2',\n    'x-queue-size': '0',\n    'x-records-charged': '20'\n    'x-signature': '0xdf49163b5273b50a8da48e82b7254b45d81aeee9a02f1909a45d7aaea240e9c2',\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis, NextAuth, and Wagmi Dependencies (bash)\nDESCRIPTION: Installs the required packages using npm, including Moralis for backend Web3 features, @moralisweb3/next for NextJS integration, next-auth for authentication, and wagmi plus viem as the EVM wallet connection layer. Run these commands in your project root before implementing further code. Required for enabling backend API calls, session management, and wallet connectors.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis @moralisweb3/next next-auth\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install wagmi viem\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in React\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration object for use in the React-based documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/05-Get Transactions/get-wallet-transactions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button for Authenticated Users - JavaScript\nDESCRIPTION: This JavaScript/JSX snippet provides a reusable logout button using Web3uikit's Button and NextAuth's signOut method. It allows users to end their session from the authenticated state. The component requires @web3uikit/core and next-auth/react, and it outputs a styled button to the UI with logout functionality on click.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// File path\n// app/components/logoutBtn/logoutBtn.js\n\nimport React from \\\"react\\\";\nimport { Button } from \\\"@web3uikit/core\\\";\nimport { signOut } from \\\"next-auth/react\\\";\n\nexport default function LogoutBtn() {\n  return (\n    <Button text=\\\"Logout\\\" theme=\\\"outline\\\" onClick={() => signOut()}></Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Wallet NFT Transfers Query - JSON\nDESCRIPTION: This JSON snippet illustrates a sample response from the Moralis Wallet API's NFT transfer query, showing metadata such as block numbers, transaction hashes, contract types, token details, addresses involved, and verification status. The 'result' key contains an array of transfer objects. Fields such as 'total', 'page', and 'cursor' support pagination and result management. All keys and example values reflect the shape of real API responses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-NFT-transfers-by-wallet.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"total\": null,\n  \"page\": 0,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmRlciI6IkRFU0MiLCJvZmZzZXQiOjAsImxpbWl0IjoxMDAsImRpc2FibGVfdG90YWwiOnRydWUsIndoZXJlIjp7fSwiZnJvbV9hZGRyZXNzIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1IiwidG9fYWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSIsInBhZ2UiOjEsImtleSI6IjE3NDMzNDI5LjUzLjEzMy4wIiwidG90YWwiOm51bGwsImlhdCI6MTY4OTc1ODUzNH0.MIBO5T05EbJruMe_ywWXEs99WJZ4jabI5IciWQugpYE\",\n  \"result\": [\n    {\n      \"block_number\": \"17715655\",\n      \"block_timestamp\": \"2023-07-17T21:27:59.000Z\",\n      \"block_hash\": \"0x58f8652ecb7025849a740fe0d6d270c61f9d0d59b41ab6460f4d9d6bb292b80d\",\n      \"transaction_hash\": \"0xf5e701f9f16f66ec8cdd3fa9f5c52b15410188392a0ffc128777bb89b2c73243\",\n      \"transaction_index\": 80,\n      \"log_index\": 225,\n      \"value\": \"0\",\n      \"contract_type\": \"ERC1155\",\n      \"transaction_type\": \"Single\",\n      \"token_address\": \"0xd4416b13d2b3a9abae7acd5d6c2bbdbe25686401\",\n      \"token_id\": \"32861001645432232115677216693187330961962340035243999304845689030250465478890\",\n      \"from_address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"from_address_label\": null,\n      \"to_address\": \"0xea97bb00daa1880e0a575b38e723066a398595ea\",\n      \"to_address_label\": null,\n      \"amount\": \"1\",\n      \"verified\": 1,\n      \"operator\": \"0x11be6670e94c6862dcd92bd4c27753f4df50890d\",\n      \"possible_spam\": false,\n      \"verified_collection\": true\n    }\n    // ....\n  ]\n} \n```\n\n----------------------------------------\n\nTITLE: API Endpoints for Internal Transactions\nDESCRIPTION: List of API endpoints that support internal transactions functionality, including transaction queries by wallet address, transaction hash, and block number\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/04-Blockchain API/internal-transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/:address?include=internal_transactions\n/transaction/:transaction_hash?include=internal_transactions\n/block/:block_number_or_hash?include=internal_transactions\n/transaction/:transaction_hash/internal-transactions\n```\n\n----------------------------------------\n\nTITLE: Final SignIn Component Code with RainbowKit Integration\nDESCRIPTION: Presents the complete code for the `pages/signin.jsx` component after integrating RainbowKit authentication. It includes imports for necessary hooks (`useRouter`, `useAuthRequestChallengeEvm`, `ConnectButton`, `signIn`, `useSession`, `useAccount`, `useSignMessage`, `useNetwork`, `useEffect`), sets up state derived from these hooks, implements the `useEffect` hook to handle the authentication flow automatically upon wallet connection, and renders the `ConnectButton` for initiating the process.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRouter } from \"next/router\";\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\nimport { ConnectButton } from \"@rainbow-me/rainbowkit\";\nimport { signIn, useSession } from \"next-auth/react\";\nimport { useAccount, useSignMessage, useNetwork } from \"wagmi\";\nimport { useEffect } from \"react\";\n\nfunction SignIn() {\n  const { isConnected, address } = useAccount();\n  const { chain } = useNetwork();\n  const { status } = useSession();\n  const { signMessageAsync } = useSignMessage();\n  const { push } = useRouter();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\n\n  useEffect(() => {\n    const handleAuth = async () => {\n      const { message } = await requestChallengeAsync({\n        address: address,\n        chainId: chain.id,\n      });\n\n      const signature = await signMessageAsync({ message });\n\n      // redirect user after success authentication to '/user' page\n      const { url } = await signIn(\"moralis-auth\", {\n        message,\n        signature,\n        redirect: false,\n        callbackUrl: \"/user\",\n      });\n      /**\n       * instead of using signIn(..., redirect: \"/user\")\n       * we get the url from callback and push it to the router to avoid page refreshing\n       */\n      push(url);\n    };\n    if (status === \"unauthenticated\" && isConnected) {\n      handleAuth();\n    }\n  }, [status, isConnected]);\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <ConnectButton />\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Obtaining NFT Trades by Marketplace with Moralis API in Python\nDESCRIPTION: This Python script uses the Moralis evm_api to fetch NFT trades for a specific marketplace. It sets up the API key and parameters, then calls the get_nft_trades function. The result is printed to the console. This demonstrates the Python implementation of the Moralis NFT API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/06-NFT Marketdata/how-to-get-nft-trades-by-marketplace.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n  \"chain\": \"eth\",\n  \"marketplace\": \"opensea\",\n  \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\"\n}\n\nresult = evm_api.nft.get_nft_trades(\n  api_key=api_key,\n  params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Approvals via Moralis API\nDESCRIPTION: Exclusive Moralis API endpoint (GET request) for retrieving the token approvals (e.g., ERC20, ERC721) granted by a specific wallet, identified by its `:address`. This is useful for understanding permissions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_37\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/wallets/:address/approvals\n```\n\n----------------------------------------\n\nTITLE: Wrapping NextJS App with SessionProvider for Authentication\nDESCRIPTION: Create a custom App component to wrap the application with NextAuth's SessionProvider for managing authentication state.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../styles/globals.css\";\nimport { SessionProvider } from \"next-auth/react\";\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <SessionProvider session={pageProps.session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies (Node.js)\nDESCRIPTION: Installs necessary npm packages for the Node.js/Express backend server: `cookie-parser` for handling HTTP cookies, `jsonwebtoken` for creating and verifying JWTs (JSON Web Tokens), and `dotenv` for loading environment variables from a `.env` file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cookie-parser jsonwebtoken dotenv\n```\n\n----------------------------------------\n\nTITLE: Creating New TicTacToe Game with React Frontend Form (TypeScript/TSX)\nDESCRIPTION: This partial React functional component (`NewGameForm.tsx`) renders a form to create a new TicTacToe game. It uses the `useWallet` hook (likely from `@solana/wallet-adapter-react`) to get the connected wallet's public key (Player 1) and a state variable (`player2`) to capture the second player's address from an input field. The `createGame` function gathers the player public keys and makes an asynchronous POST request to the `/api/TicTacToe/newGame` backend endpoint to initiate game creation on the Solana blockchain. It uses UI components like `FormControl`, `Flex`, `Input`, and `Button`, suggesting a library like Chakra UI.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `src/components/templates/TicTacToe/NewGameForm.tsx`\n\nconst NewGameForm: FC = () => {\n  // Player data from frontend is stored in state variables\n  const [player2, setPlayer2] = useState('');\n\n  const handleInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setPlayer2(e.target.value);\n  };\n  const { publicKey } = useWallet();\n  const createGame = async () => {\n    if (!publicKey || !player2) {\n    }\n    if (publicKey?.toBase58() === player2) {\n    }\n    const players = {\n      player1: publicKey,\n      player2: new PublicKey(player2),\n    };\n    try {\n      // Callign the `newGame` api route to create a new game with players data\n      const data = await apiPost('/TicTacToe/newGame', players);\n    } catch (e) {\n      if (e instanceof Error) {\n        console.log(e.message);\n      }\n    }\n  };\n\n  return (\n    <>\n      <FormControl>\n        <Flex height={'300px'} direction={'column'} alignItems={'center'} justifyContent={'space-around'}>\n          <Box width={'50%'}>\n            <FormLabel>Player 1</FormLabel>\n            <Input placeholder=\"Connect to Wallet\" value={`${publicKey ? publicKey : ''}`} disabled />\n          </Box>\n          <Box width={'50%'}>\n            <FormLabel>Player 2</FormLabel>\n            <Input placeholder=\"Player 2 Address\" onChange={handleInput} />\n          </Box>\n          <Button width={'50%'} mt={4} colorScheme=\"teal\" isLoading={status ? true : false} onClick={createGame}>\n            Create New Game\n          </Button>\n          <FormHelperText>{status && status}</FormHelperText>\n        </Flex>\n      </FormControl>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Router for Authentication\nDESCRIPTION: Express router configuration that defines the API endpoints for authentication operations, including requesting messages and verifying signatures.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport { verify, request } from './authController';\n\nexport const authRouter = express.Router();\n\nauthRouter.route('/request-message').post(request);\nauthRouter.route('/sign-message').post(verify);\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Proof with eth_getProof\nDESCRIPTION: This snippet shows the request format for the eth_getProof method. It includes parameters for the account address, storage keys, and block tag.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"0x0000000000000000000000000000000000000000\",\n  [\"0x0000000000000000000000000000000000000000000000000000000000000000\"],\n  \"latest\"\n]\n```\n\n----------------------------------------\n\nTITLE: Stream Status Update via HTTP\nDESCRIPTION: CURL command example for updating stream status through direct HTTP API request.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/stream-management.md#2025-04-23_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X 'POST'\n  '<https://api.moralis-streams.com/streams/evm/STREAM_ID/status>'\n  -H 'accept: application/json'\n  -H 'x-api-key: YOUR_API_KEY'\n  -H 'Content-Type: application/json'\n  -d '{\"status\": \"paused\"}'\n```\n\n----------------------------------------\n\nTITLE: Example Response - Top NFT Collections API Output (JSON)\nDESCRIPTION: This code block provides a representative JSON response from the getHottestNFTCollectionsByTradingVolume API. It contains an array of objects, each describing an NFT collection's rank, name, image URL, current trading volume (USD), floor price, and percentage changes over the last 24 hours. No dependencies required; this is solely for illustrative purposes and demonstrates the output structure. Inputs: none. Outputs: sample array of collection objects.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-trading-volume.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"rank\": 1,\n    \"collection_title\": \"Bored Ape Yacht Club\",\n    \"collection_image\": \"https://market-data-images.s3.us-east-1.amazonaws.com/tokenImages/0x2f1ef58880d01489b8d2c9ba759cf7b14db4ee8a55fd6e6b222ad050e7e00fb0.png\",\n    \"volume_usd\": \"8261189.224011\",\n    \"volume_24hr_perecent_change\": \"17.09\",\n    \"floor_price_usd\": \"79591.5288\",\n    \"floor_price_24hr_percent_change\": \"0.05\",\n    \"average_price_usd\": \"39717.255884668266\"\n  },\n  {\n    \"rank\": 2,\n    \"collection_title\": \"Mutant Ape Yacht Club\",\n    \"collection_image\": \"https://market-data-images.s3.us-east-1.amazonaws.com/tokenImages/0xab57ba0f4ce4424e60c477627f6551790b8946d45720240a3d258956e436f2e5.png\",\n    \"volume_usd\": \"3374077.733755\",\n    \"volume_24hr_perecent_change\": \"6.29\",\n    \"floor_price_usd\": \"16028.433180000002\",\n    \"floor_price_24hr_percent_change\": \"-0.69\",\n    \"average_price_usd\": \"15915.461008278302\"\n  },\n  {\n    \"rank\": 3,\n    \"collection_title\": \"CryptoPunks\",\n    \"collection_image\": \"https://market-data-images.s3.us-east-1.amazonaws.com/tokenImages/0x8e4d149625faffbdb3b63eb36668a4b470714c0e6c765e66200095a4ccb0234e.png\",\n    \"volume_usd\": \"1835336.891\",\n    \"volume_24hr_perecent_change\": \"30.13\",\n    \"floor_price_usd\": \"90913.539\",\n    \"floor_price_24hr_percent_change\": \"3.43\",\n    \"average_price_usd\": \"101963.16061111112\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Owners with Cursor Pagination in Python\nDESCRIPTION: This Python example demonstrates cursor pagination with the Moralis REST API to retrieve NFT owners on the Polygon chain. It makes sequential API calls using the cursor from each response to fetch the next page of results, implementing a rate limit with sleep intervals between requests.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/resources/03-pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport time\n\ndef get_nft_owners(offset, cursor):\n    print(\"offset\", offset)\n    url = 'https://deep-index.moralis.io/api/v2.2/nft/<address_here>/owners?chain=polygon&format=decimal'\n    if cursor:\n      url = url + \"&cursor=%s\" % cursor\n\n    print(\"api_url\", url)\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-API-Key\": \"API_KEY_HERE\"\n    }\n    statusResponse = requests.request(\"GET\", url, headers=headers)\n    data = statusResponse.json()\n    print(\"HTTP headers:\", statusResponse.headers)\n    try:\n        print(\"nr results\", len(data['result']))\n    except:\n        print(repr(data))\n        print(\"exiting\")\n        raise SystemExit\n\n    cursor = data['cursor']\n    print(data['page'], data['total'])\n    return cursor\n\n\ncursor = None\nfor j in range(0, 10):\n    cursor = get_nft_owners(j*500, cursor)\n    print()\n    time.sleep(1.1)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList Component in JSX\nDESCRIPTION: Imports and implements the DocCardList component from Docusaurus theme to create a list of documentation cards.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/getting-started/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Sets up environment variables for API key, Discord bot token, and channel ID in a .env file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nAPIKEY = 'YOUR_API_KEY'\nPASS = 'YOUR_BOT_TOKEN'\nCHANNEL = 'CHANNEL_ID'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Frontend Environment\nDESCRIPTION: Shell commands to clone the project repository, install dependencies, and start the development server for the frontend application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/JohnVersus/solana-dapp-micro-blog.git\n\ncd solana-dapp-micro-blog\n\nyarn install\n\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Updating a Moralis Stream with Triggers\nDESCRIPTION: JavaScript code using the Moralis SDK to update an existing stream with the defined triggers. This connects the trigger configuration to the stream.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/triggers.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMoralis.Streams.update({\n  id: \"YOUR_STREAM_ID\",\n  triggers,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering the Solana NFTs API Reference (React, JavaScript)\nDESCRIPTION: This React JSX snippet renders the imported ApiReference component, spreading in properties from a deeply nested 'config' object that defines the Solana NFT retrieval endpoint. This usage drives an interactive API documentation display within the docs site. Required dependencies are the React framework, the ApiReference component, and the configuration JSON structure supporting a 'solana.getNFTs' key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/07-NFT API/get-nfts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.solana.getNFTs} />\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Domain using JavaScript\nDESCRIPTION: JavaScript implementation for resolving an ENS domain to an Ethereum address using Moralis API. Requires Moralis package and API key configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-domain.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const domain = \"vitalik.eth\";\n\n  const response = await Moralis.EvmApi.resolve.resolveENSDomain({\n    domain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Handling a JSON-RPC Response in JSON\nDESCRIPTION: This snippet demonstrates a typical JSON-RPC response object, returning the result of a previously sent request. It includes the JSON-RPC version (\"2.0\"), the resulting value (e.g., \"100 ETH\" as the balance), and the identifier correlating to the request. While constructing or parsing such responses, applications must handle the possibility of errors and match responses to requests using the id field. No external dependencies are necessary beyond JSON parsing and adherence to the JSON-RPC specification.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/fundamentals/json-rpc-basics.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"result\\\": \\\"100 ETH\\\",\\n  \\\"id\\\": 1\\n}\n```\n\n----------------------------------------\n\nTITLE: balanceOf ABI in JSON\nDESCRIPTION: This snippet provides the ABI for the balanceOf function of an ERC20 contract. It includes the function signature, input parameters, and output type.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/triggers.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"constant\": true,\n  \"inputs\": [\n    {\n      \"name\": \"owner\",\n      \"type\": \"address\"\n    }\n  ],\n  \"name\": \"balanceOf\",\n  \"outputs\": [\n    {\n      \"name\": \"\",\n      \"type\": \"uint256\"\n    }\n  ],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}\n```\n\n----------------------------------------\n\nTITLE: getTokenAllowance Response Structure\nDESCRIPTION: Example response from the new getTokenAllowance endpoint showing the simplified allowance value.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-09-11-breaking-change.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowance\": \"144999999999999999\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration file for the API reference. It then renders the component with the specific configuration for getting wallet token transfers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/06-Get Transfers/get-wallet-token-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.token.getWalletTokenTransfers} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Angular\nDESCRIPTION: TypeScript code to set up environment variables for the Angular application, including the server URL.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const environment = {\n  SERVER_URL: \"http://localhost:3000\",\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Balance for Wallet with Moralis Token API in TypeScript\nDESCRIPTION: This TypeScript code fetches the balance of a given ERC20 token held in a user's wallet using Moralis Token API, requiring an API key, an array of token addresses, the wallet address, and the chain identifier. It prints the balance information in the console as raw JSON. Remember to replace placeholder values appropriately.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const tokenAddresses = [\"ERC20_TOKEN_ADDRESS\"];\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    chain,\n    tokenAddresses,\n    address,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance using Moralis SDK in C#\nDESCRIPTION: Demonstrates how to use the Moralis .NET SDK to fetch the native balance of a given wallet address on a specific chain. It calls the `GetNativeBalance` method from the `MoralisClient.Web3Api.Account` endpoint, passing the address and chain ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Load native balance for address\nNativeBalance bal = await MoralisClient.Web3Api.Account.GetNativeBalance(address, chainId);\n\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Uses the Angular CLI (`ng generate component`) command to create two new components: `signin` (for the authentication page) and `user` (for displaying authenticated user information).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng generate component signin\nng generate component user\n```\n\n----------------------------------------\n\nTITLE: Retrieving Native Wallet Transactions via Moralis API URL\nDESCRIPTION: API endpoint URL for fetching native transactions associated with a specific wallet address. Corresponds to the `getWalletTransactions` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/blockchain-api.md#2025-04-23_snippet_5\n\nLANGUAGE: url\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:address\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Balances using Moralis SDK (Python)\nDESCRIPTION: This Python code snippet uses the moralis 'evm_api' SDK to fetch the NFTs held by a specific wallet on a chosen blockchain network (e.g., Ethereum or Polygon). The required dependencies are 'moralis' and 'json'. The 'params' dictionary takes 'address' and 'chain', and the API key is required for authentication. The result is pretty-printed as JSON. Use actual wallet addresses and chains in production.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"USER_WALLET_ADDRESS\",\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Creating a New React App via create-react-app (Shell)\nDESCRIPTION: Initializes a new React application template and navigates into the project directory using npx and shell commands. Requires Node.js/npm to be installed. The key parameters are the project name and directory path. No input/output beyond CLI execution; sets up the frontend environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-react-app your-first-dapp-react\ncd your-first-dapp-react\n```\n\n----------------------------------------\n\nTITLE: Retrieving All NFTs with Metadata for a Solana Address via cURL\nDESCRIPTION: Provides a sample cURL command to fetch all NFTs owned by a specific Solana wallet address ('kXB7FfzdrfZpAZEW3TZcp8a8CwQbsowa6BdfAHZ4gVs' in the example), including their full metadata. This is achieved by appending the 'nftMetadata=true' query parameter to the account NFT endpoint URL. Replace 'YOUR_API_KEY' with a valid API key. Requires 'accept: application/json' and 'X-API-Key' headers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/nft-api-faq.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/account/mainnet/kXB7FfzdrfZpAZEW3TZcp8a8CwQbsowa6BdfAHZ4gVs/nft?nftMetadata=true' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Auth Wagmi Connector using npm\nDESCRIPTION: This command installs the `@web3auth/web3auth-wagmi-connector` package version `1.0.0` using npm. This package is required to integrate Web3Auth authentication within a Wagmi-based NextJS application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-web3authio.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @web3auth/web3auth-wagmi-connector@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Fetching Graduated Tokens with Moralis API via cURL (Shell)\nDESCRIPTION: This shell snippet shows how to use cURL to make a GET request to the Moralis Solana API for retrieving up to 100 graduated Pump.fun tokens. It includes authentication via the X-API-Key header and specifies JSON response type. Requires: cURL command-line tool, a valid Moralis API Key. Inputs: limit parameter for result size. Outputs: JSON object with graduated token data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/08-get-graduated-tokens.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/token/mainnet/exchange/pumpfun/graduated?limit=100' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Native Balance API (JSON)\nDESCRIPTION: This snippet shows a typical JSON response from the Moralis getNativeBalance endpoint, depicting the balance of the queried address as a string. This response format is returned by running any of the provided scripts successfully. Key field is 'balance' which represents the raw amount in wei (for Ethereum).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-wallet.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"balance\": \"970315108126866256970\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for getWalletTokenBalances Endpoint\nDESCRIPTION: This code snippet renders the ApiReference component with configuration specific to the 'getWalletTokenBalances' endpoint. It uses the imported configuration object to pass the necessary props to the component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/03-Get Balance/get-wallet-token-balances.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getWalletTokenBalances}>\n\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component for Stream Stats Documentation\nDESCRIPTION: Imports the ApiReference component and configuration data for the GetStatsByStreamId endpoint documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/03-Stats/get-stats-by-stream-id.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Swaps by ERC20 Address via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve token swap data involving a specific ERC20 token address using the Moralis Web3 API v2.2. The ':address' parameter should be replaced with the ERC20 token contract address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/erc20/:address/swaps\n```\n\n----------------------------------------\n\nTITLE: Monitoring Wallet Transactions with Moralis Streams (Python)\nDESCRIPTION: This Python snippet uses the Moralis SDK to create a stream for monitoring native transactions of a specific wallet address (`0x68b...`) on Ethereum (chain ID `0x1`) and Polygon (chain ID `0x89`). It defines the stream configuration in `create_stream_body`, creates the stream using `streams.evm_streams.create_stream`, and then adds the target address to the newly created stream using `streams.evm_streams.add_address_to_stream`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import streams\n\napi_key = \"04u5XkBCRyoxrAM89MeOSV055R6QpRxTWGw431jWd8ydCJtq0TpY6jErerZ9FN3u\"\n\ncreate_stream_body = {\n  \"description\": \"monitor Bobs wallet\",\n  \"tag\": \"bob\",\n  \"webhook_url\": \"https://YOUR_WEBHOOK_URL\",\n  \"include_native_txs\": True,\n  \"chain_ids\": [\n    \"0x1\",\n    \"0x89\"\n  ]\n}\n\nresult = streams.evm_streams.create_stream(\n  api_key=api_key,\n  body=create_stream_body,\n)\n\nadd_address_body = {\n  \"address\": \"0x68b3f12d6e8d85a8d3dbbc15bba9dc5103b888a4\"\n}\n\nparams = {\n  \"id\": result.id\n}\n\n# Now we attach bobs address to the stream\nstreams.evm_streams.add_address_to_stream(\n  api_key=api_key,\n  body=add_address_body,\n  params=params,\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating User Profile Page (JavaScript)\nDESCRIPTION: This JavaScript code defines the user profile page (`pages/user.jsx`). It uses `getServerSideProps` to fetch the user's session server-side via `getSession` from `next-auth/react`. If no session exists, it redirects the user back to the home page ('/'). If a session is found, it passes the `userSession` object as props to the page component. The component then renders the `UserData` component to display user details and the `LogoutBtn` component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport React, { useEffect, useTransition } from \"react\";\nimport styles from \"../styles/User.module.css\";\nimport { getSession, signOut } from \"next-auth/react\";\nimport UserData from \"../app/components/userData/userData\";\nimport LogoutBtn from \"../app/components/logoutBtn/logoutBtn\";\n\nexport async function getServerSideProps(context) {\n  const session = await getSession(context);\n  if (!session) {\n    return { redirect: { destination: \"/\" } };\n  }\n  return {\n    props: { userSession: session },\n  };\n}\n\nexport default function Home({ userSession }) {\n  // NOTE: The original code snippet seems to have a missing 'isPending' state variable definition\n  //       in the functional component 'Home'. Assuming it might be intended to be used \n  //       similarly to the index page, but it's not defined here.\n  const [isPending, startTransition] = useTransition(); // Added for completeness, assuming intent\n\n  if (userSession) {\n    return (\n      <div className={styles.body}>\n        {!isPending && (\n          <div className={styles.card}>\n            <>\n              <UserData />\n              <div className={styles.buttonsRow}>\n                <LogoutBtn />\n              </div>\n            </>\n          </div>\n        )}\n      </div>\n    );\n  }\n  // Added fallback return for when userSession is somehow null despite getServerSideProps\n  return null; \n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Banner Component in React (JavaScript/JSX)\nDESCRIPTION: This snippet shows the import and usage of the ApiBanner React component, specifically for the Typescript version, and demonstrates how to include a configuration-driven API reference in a documentation page. It requires React and the respective ApiBanner and ApiReference components. The example uses the config.wallet.getWalletProfitabilitySummary as input to dynamically populate the reference interface, making it easier for developers to explore API functionality and responses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/10-Get Wallet PnL/get-wallet-profitability-summary.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.wallet.getWalletProfitabilitySummary}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Displaying User Session on Component Init - TypeScript\nDESCRIPTION: This async ngOnInit implementation fetches session authentication data from the backend upon component initialization. If the authenticated session exists, it formats the relevant user data for display (excluding the 'iat' field). If not, it redirects to the '/signin' route. It expects axios and Router dependencies, and uses environment configuration. Input is implicit (current user session cookie); output is either session display or navigation redirect.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nasync ngOnInit() {\\n  try {\\n    const { data } = await axios.get(\\n      `${environment.SERVER_URL}/authenticate`,\\n      {\\n        withCredentials: true,\\n      }\\n    );\\n\\n    const { iat, ...authData } = data; // remove unimportant iat value\\n\\n    this.session = JSON.stringify(authData, null, 2); // format to be displayed nicely\\n  } catch (err) {\\n    // if user does not have a \\\"session\\\" token, redirect to /signin\\n    this.router.navigateByUrl('/signin');\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Token Pairs by Address - HTTP Endpoint\nDESCRIPTION: Lists trading pairs for a given Solana token address on a specified network. Result includes liquidity pools and pair addresses in JSON format, requiring network and address parameters and authenticated API access.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/token/:network/:address/pairs\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Dapp\nDESCRIPTION: Installing required npm packages react-router-dom for routing and axios for API requests\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-router-dom axios\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verbose Transactions in Python\nDESCRIPTION: Python implementation for getting verbose transactions of an address using the Moralis Transaction API. This code imports the Moralis EVM API module, defines the API key, wallet address and blockchain parameters, then calls the get_wallet_transactions_verbose function to retrieve detailed transaction data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-transaction-verbose.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n  \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n  \"chain\": \"eth\"\n}\n\nresult = evm_api.transaction.get_wallet_transactions_verbose(\n  api_key=api_key,\n  params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Updated package.json with Start Script\nDESCRIPTION: Adds a start script to package.json for running the Express server with nodemon for auto-reloading.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"blockchainbot\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"nodemon index.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"discord.js\": \"^14.6.0\",\n    \"dotenv\": \"^16.0.3\",\n    \"express\": \"^4.18.2\",\n    \"moralis\": \"^2.6.7\",\n    \"nodemon\": \"^2.0.20\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Angular Project - Shell\nDESCRIPTION: Creates a new Angular project directory with all necessary configuration files and dependencies. You'll be prompted for project features, such as routing and stylesheet format. The command assumes Angular CLI is already installed globally.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng new your-first-dapp-angular\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference Documentation in React\nDESCRIPTION: This code imports the necessary React components to display the API reference documentation for the ERC20 token holders endpoint. It leverages components from the site's documentation framework.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/08-Get Token Holders/get-token-owners.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration object for use in the documentation page. The ApiReference component is likely used to render the API details in a standardized format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/reference/03-Profiles/verify-remove-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Sales & Transfers by Contract using SimpleHash API\nDESCRIPTION: SimpleHash API endpoint to retrieve sales and transfers for all NFTs within a specific contract on a given chain. Requires `chain` and `contract_address` as path parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/transfers/{chain}/{contract_address}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Decoded Wallet Transactions via Moralis API URL\nDESCRIPTION: API endpoint URL for fetching decoded transactions associated with a specific wallet address. Corresponds to the `getDecodedWalletTransaction` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/blockchain-api.md#2025-04-23_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:address/verbose\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for MetaMask Auth Integration in Angular - TypeScript\nDESCRIPTION: This snippet imports essential dependencies for enabling navigation, making HTTP requests, interacting with the wagmi web3 library, and accessing environment configurations in an Angular component. Required dependencies are Router (from @angular/router), axios, wagmi/core (with several utility functions and classes), ethers, and the local environment file. These imports are prerequisites for implementing authentication and route logic across the application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// for navigating to other routes\\nimport { Router } from \\\"@angular/router\\\";\\n\\n// for making HTTP requests\\nimport axios from \\\"axios\\\";\\n\\nimport { getDefaultProvider } from \\\"ethers\\\";\\nimport {\\n  createClient,\\n  connect,\\n  disconnect,\\n  getAccount,\\n  signMessage,\\n  InjectedConnector,\\n} from \\\"@wagmi/core\\\";\\n\\nimport { environment } from \\\"../../environments/environment\\\";\n```\n\n----------------------------------------\n\nTITLE: Formatting and Displaying ERC-20 Token Balances in C#\nDESCRIPTION: Iterates through the list of retrieved `Erc20TokenBalance` objects. If the list is not empty, it prints the symbol, name, and balance (using the `NativeTokenBalance` property from the SDK model) for each token to the console. If the list is empty or null, it prints 'None'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nConsole.WriteLine(\"\\n\\nYour ERC 20 Tokens:\");\n\nif (erc20Balnaces != null && erc20Balnaces.Count > 0)\n{\n    // Print out each token with symbol and balance.\n    foreach (Erc20TokenBalance tb in erc20Balnaces)\n    {\n        Console.WriteLine($\"\\t{tb.Symbol} - {tb.Name}: {tb.NativeTokenBalance}\"); \n    }\n}\nelse\n{\n    Console.WriteLine(\"\\tNone\");\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component using JSX\nDESCRIPTION: This JSX snippet renders the main content of the documentation page. It includes a Markdown heading (`# Set project settings`) followed by the `ApiReference` React component. The component is invoked using JSX spread attributes (`{...config.streams.SetSettings}`), passing properties defined within the `config.streams.SetSettings` object from the imported JSON configuration file as props to the component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/02-Project/set-settings.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# Set project settings\n\n<ApiReference {...config.streams.SetSettings} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Latest Block Number Endpoint (JavaScript/React)\nDESCRIPTION: This snippet shows how to render the API reference for retrieving the latest block number using a pre-configured ApiReference React component. It expects a configuration object as a prop, specifically configurations for the 'getLatestBlockNumber' endpoint from the Moralis API JSON file. The component outputs a dynamic API documentation section for users.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/05-Get Latest Block Number/get-latest-block-number.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.block.getLatestBlockNumber}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Environment Variables (.env)\nDESCRIPTION: Provides an example structure for the `.env` file in the server's root directory. It defines essential variables: `APP_DOMAIN` (application domain for Moralis Auth), `MORALIS_API_KEY` (Moralis API key), `ANGULAR_URL` (URL of the frontend Angular application for CORS and Moralis Auth), and `AUTH_SECRET` (a secret key for signing JWTs).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_9\n\nLANGUAGE: env\nCODE:\n```\nAPP_DOMAIN=amazing.finance\nMORALIS_API_KEY=xxxx\nANGULAR_URL=http://localhost:4200\nAUTH_SECRET=1234\n```\n\n----------------------------------------\n\nTITLE: Handling NFT Selection in Solana NFT Burner UI\nDESCRIPTION: TypeScript code for managing the state of selected NFTs in the user interface, including checkbox handling.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-burner.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst [nftsToDelete, setNftsToDelete] = useState<Array<string>>([]);\nconst handleCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\n  const { value, checked } = e.target;\n  if (!nftsToDelete?.includes(value) && checked) {\n    setNftsToDelete((existing: Array<string>) => [...existing, value]);\n  } else {\n    const temp = nftsToDelete;\n    if (temp.includes(value)) {\n      temp.splice(temp.indexOf(value), 1);\n      setNftsToDelete(() => [...temp]);\n    }\n  }\n};\n\n<StyledCheckBox\n  onChange={handleCheckbox}\n  value={`${balance.mint}`}\n  type={\"checkbox\"}\n  checked={nftsToDelete.includes(`${balance.mint}`)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example Metaplex-Specific NFT Data Structure in JSON\nDESCRIPTION: Illustrates the JSON structure of the 'metaplex' object returned for Metaplex-standard Solana NFTs. It contains fields specific to the Metaplex protocol, such as the 'metadataUri' (source URI), 'updateAuthority' address, 'sellerFeeBasisPoints' (royalty), 'primarySaleHappened' status, 'isMutable' flag, and 'masterEdition' status.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/nft-api-faq.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"metaplex\": {\n  \"metadataUri\": \"https://madlads.s3.us-west-2.amazonaws.com/json/7256.json\",\n  \"updateAuthority\": \"2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW\",\n  \"sellerFeeBasisPoints\": 420,\n  \"primarySaleHappened\": 1,\n  \"isMutable\": true,\n  \"masterEdition\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Transactions from an Address with eth_getTransactionCount\nDESCRIPTION: This snippet illustrates the request format for the eth_getTransactionCount method. It includes parameters for the address and block tag.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n[\"0x0000000000000000000000000000000000000000\", \"latest\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Access\nDESCRIPTION: Code examples showing how to securely access the Moralis API key from environment variables in different programming languages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst dotenv = require(\"dotenv\");\n\n// inject environment variables\ndotenv.config();\n\nconst apiKey: string = process.env.MORALIS_API_KEY;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport dotenv from \"dotenv\";\n\n// inject environment variables\ndotenv.config();\n\nconst apiKey: string = process.env.MORALIS_API_KEY;\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom decouple import config\n\napi_key = config('MORALIS_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL NFT Balance using JavaScript\nDESCRIPTION: JavaScript implementation for getting SPL NFT balance of a Solana address using Moralis API. Requires Moralis and @moralisweb3/common-sol-utils packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/nft-api/how-to-get-spl-nft-balance-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getNFTs({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Get Solana Wallet Balance Using TypeScript\nDESCRIPTION: TypeScript implementation to fetch native Solana balance using Moralis API. Requires Moralis and @moralisweb3/common-sol-utils packages. Returns balance in both lamports and SOL.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/balance-api/how-to-get-native-solana-balance-by-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getBalance({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Example Payload for Internal Transactions in Moralis Streams (JSON)\nDESCRIPTION: Presents an example JSON payload structure for internal transactions captured by a Moralis Web3 Stream when the 'Internal Transactions (txsInternal)' option is selected (or `includeInternalTxs` is set to true). Internal transactions (value transfers initiated by smart contracts) are listed in the `txsInternal` array, showing `from`, `to`, `value`, `gas`, and the parent `transactionHash`. Block details and stream information are also included.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/response-body.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": false,\n  \"chainId\": \"0x1\",\n  \"abi\": [],\n  \"streamId\": \"c28d9e2e-ae9d-4fe6-9fc0-5fcde2dcdd17\",\n  \"tag\": \"internal transactions\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"15988462\",\n    \"hash\": \"0xa4520ca85758374d05c31f6e6869f081997daa6e6b18449d49cfac4558f9e7f8\",\n    \"timestamp\": \"1668672659\"\n  },\n  \"logs\": [],\n  \"txs\": [],\n  \"txsInternal\": [\n    {\n      \"from\": \"0x1111111254eeb25477b68fb85ed929f73a960582\",\n      \"to\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n      \"value\": \"11000000000000000\",\n      \"gas\": \"117885\",\n      \"transactionHash\": \"0x0e5c3114c0ee7d29cca17aa0b8e790c4d7d25b4789bd14150f113956b5ce94de\"\n    }\n  ],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Price with Moralis Python Library\nDESCRIPTION: This Python code shows how to get the real-time price of a given ERC20 token using the Moralis EVM API Python library. Provide the Moralis API key, the token's contract address, and the chain identifier (e.g., 'eth', 'polygon') as parameters. The resulting price data is printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"ERC20_TOKEN_ADDRESS\",\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.token.get_token_price(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Running the NFT Fetch Script with Node.js - Bash\nDESCRIPTION: This command executes the previously written JavaScript script (fetchNFTs.js) using Node.js. It assumes all dependencies are installed and the script is present in the project directory. Output is logged to the terminal from the script, showing fetched NFTs. No command-line arguments are used.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/getting-started/02-making-your-first-request.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode fetchNFTs.js\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK via Pnpm\nDESCRIPTION: This command installs the Moralis SDK and the common EVM utilities package using the Pnpm package manager. It requires Node.js and Pnpm to be installed. Pnpm is another alternative package manager for JavaScript or TypeScript projects.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/getting-started/get-your-api-key.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add moralis @moralisweb3/common-evm-utils\n```\n\n----------------------------------------\n\nTITLE: Querying eth_getUncleCountByBlockHash Response - JSON\nDESCRIPTION: Shows a response structure for eth_getUncleCountByBlockHash, including the uncle count in hexadecimal format as the 'result'. The response includes standard JSON-RPC fields and outputs the count as a string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Authentication API Reference Component in React (JavaScript)\nDESCRIPTION: This snippet imports a React component called ApiReference and a configuration JSON file, then renders the API reference specific to the 'requestBind' authentication functionality. Dependencies required include React, the @site/src/components/ApiReference module, and a compatible JSON configuration file. The rendered component expects the 'config.auth.requestBind' object to contain endpoint description and parameter metadata, and will fail if the configuration is missing or improperly structured.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/reference/03-Profiles/request-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.auth.requestBind} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Pump.fun Token Swaps by Address using cURL (Shell)\nDESCRIPTION: Demonstrates making a GET request using cURL to the Moralis Solana API endpoint (`/token/{network}/{address}/swaps`) to retrieve swap transactions for a specific Pump.fun token. Requires replacing `YOUR_API_KEY` with a valid Moralis API key. The example fetches swaps for token `9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump` on `mainnet`, ordered descendingly.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/04-get-pump-fun-token-swaps.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/token/mainnet/9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump/swaps?order=DESC' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Moralis via Phantom (TypeScript, Solana)\nDESCRIPTION: Enables user authentication using Phantom wallet (Solana) by invoking signInWithMoralis with the moralisAuth instance. Dependencies: @moralisweb3/client-firebase-sol-auth. Input: moralisAuth client; Output: creates session with Phantom wallet. Only Phantom is supported by default.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signInWithMoralis } from '@moralisweb3/client-firebase-sol-auth';\n\nawait signInWithMoralis(moralisAuth);\n```\n\n----------------------------------------\n\nTITLE: Implementing authenticate endpoint for session validation\nDESCRIPTION: Express.js endpoint that checks the JWT cookie to authenticate the user. It verifies the token's validity and returns the user data if authenticated.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/authenticate\", async (req, res) => {\n  const token = req.cookies.jwt;\n  if (!token) return res.sendStatus(403); // if the user did not send a jwt token, they are unauthorized\n\n  try {\n    const data = jwt.verify(token, process.env.AUTH_SECRET);\n    res.json(data);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Example Solana NFT Additional Properties Structure in JSON\nDESCRIPTION: Demonstrates the JSON structure for the 'properties' object within Solana NFT metadata. This field often contains additional, potentially non-standardized data like 'files' (an array detailing associated media files with URIs and types), 'category' (e.g., 'image'), nested 'collection' details (name, family), and sometimes redundant 'creators' information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/nft-api-faq.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"properties\": {\n  \"files\": [\n    {\n      \"id\": \"portrait\",\n      \"uri\": \"https://madlads.s3.us-west-2.amazonaws.com/images/7256.png\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"id\": \"rug\",\n      \"uri\": \"https://arweave.net/qJ5B6fx5hEt4P7XbicbJQRyTcbyLaV-OQNA1KjzdqOQ/7256.png\",\n      \"type\": \"image/png\"\n    }\n  ],\n  \"category\": \"image\",\n  \"collection\": {\n    \"name\": \"Mad Lads\",\n    \"family\": \"MAD\"\n  },\n  \"creators\": [\n    {\n      \"address\": \"2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW\",\n      \"share\": 100\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Angular Application\nDESCRIPTION: TypeScript code to define routes for the signin and user components in the Angular application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SigninComponent } from \"./signin/signin.component\";\nimport { UserComponent } from \"./user/user.component\";\n\nconst routes: Routes = [\n  { path: \"signin\", component: SigninComponent },\n  { path: \"user\", component: UserComponent },\n];\n```\n\n----------------------------------------\n\nTITLE: Supported DEX Protocol Names by Chain\nDESCRIPTION: List of supported DEX protocol identifiers for each blockchain network. These identifiers are used when interacting with the Moralis DeFi API. If no exchange is specified, the API automatically evaluates each exchange until finding a price, avoiding low liquidity pairs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/supported-dexs.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nuniswapv2, uniswapv3, sushiswapv2   # Eth mainnet\nuniswapv2, uniswapv3, quickswapv2   # Polygon\nuniswapv2, uniswapv3, pancakeswapv1 # BSC\ntraderjoe, pangolin                 # Avalanche\nspookyswap                         # Fantom\nvvs                                # Cronos\nuniswapv3, camelotv2               # Arbitrum\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Express Server (Bash/NPM)\nDESCRIPTION: Executes the 'start' script defined in 'backend/package.json' using npm. This typically runs 'nodemon index.js', starting the Express server and enabling automatic restarts upon file changes during development.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Price using Moralis SDK in Python\nDESCRIPTION: This Python snippet illustrates fetching an SPL token's price via the Moralis Solana API. It sets up the API key and parameters dictionary containing the token address and network ('mainnet'). It then calls the `sol_api.token.get_token_price` function and prints the returned price data. Requires the `moralis` Python package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/token-api/how-to-get-spl-token-price.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\",\n    \"network\": \"mainnet\",\n}\n\nresult = sol_api.token.get_token_price(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying ABI Output for balanceOf Function in JavaScript\nDESCRIPTION: This snippet shows how to modify the ABI output for the balanceOf function by adding a name to the output parameter. This improves the readability of the trigger results.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/triggers.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    name: \"fromBalance\",\n    type: \"uint256\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet ERC20 Token Transfers via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve ERC20 token transfers associated with a specific wallet address using the Moralis Web3 API v2.2. The ':address' parameter should be replaced with the wallet address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:address/erc20/transfers\n```\n\n----------------------------------------\n\nTITLE: Updating Chart Component with Custom Candlestick Plugin\nDESCRIPTION: Updates the `CandlestickChart` component to integrate the custom `candlestickPlugin`. It imports the plugin and passes it to the `Line` component via the `plugins` prop. The chart options are adjusted to disable the default legend (as the plugin handles visual representation) and configure the candlestick plugin's border properties. The `formatData` function is simplified as the plugin now directly uses the datasets for high, low, open, and close.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-chartsjs-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport candlestickPlugin from \"../plugins/candlestickPlugin\";\n\n// ... previous imports ...\n\nconst CandlestickChart = ({ candlestickData }) => {\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      candlestick: {\n        borderColor: \"rgba(0, 0, 0, 0.8)\",\n        borderWidth: 1,\n      },\n    },\n    scales: {\n      y: {\n        type: \"linear\",\n        position: \"left\",\n      },\n    },\n  };\n\n  const formatData = () => {\n    const labels = candlestickData.map((data) =>\n      new Date(data.time * 1000).toLocaleDateString()\n    );\n\n    return {\n      labels,\n      datasets: [\n        {\n          data: candlestickData.map((data) => data.high),\n          yAxisID: \"y\",\n        },\n        {\n          data: candlestickData.map((data) => data.low),\n          yAxisID: \"y\",\n        },\n        {\n          data: candlestickData.map((data) => data.open),\n          yAxisID: \"y\",\n        },\n        {\n          data: candlestickData.map((data) => data.close),\n          yAxisID: \"y\",\n        },\n      ],\n    };\n  };\n\n  return (\n    <div className=\"chart-container\">\n      <Line\n        options={options}\n        data={formatData()}\n        plugins={[candlestickPlugin]}\n      />\n    </div>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Price with Moralis SDK in Python\nDESCRIPTION: This Python snippet shows how to retrieve the price of an SPL token using the Moralis Solana API wrapper. It sets up the API key and parameters including the token address and network ('mainnet'), then calls `sol_api.token.get_token_price` to fetch the data, printing the resulting dictionary. Requires the `moralis` Python package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/how-to-get-spl-token-price.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\",\n    \"network\": \"mainnet\",\n}\n\nresult = sol_api.token.get_token_price(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Normalized NFT Metadata Schema\nDESCRIPTION: JSON schema definition for normalized metadata attributes and structure, including properties like trait_type, value, display_type, and core NFT metadata fields like name, description, and image.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/02-NFT API/02-NFT Metadata FAQs/normalized-vs-non-normalized-metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"normalizedMetadataAttribute\": {\n        \"properties\": {\n          \"trait_type\": {\n            \"type\": \"string\",\n            \"description\": \"The trait title or descriptor\",\n            \"example\": \"Eye Color\"\n          },\n          \"value\": {\n            \"type\": \"object\",\n            \"description\": \"The value of the attribute\",\n            \"example\": \"hazel\"\n          },\n          \"display_type\": {\n            \"type\": \"string\",\n            \"description\": \"The type the attribute value should be displayed as\",\n            \"example\": \"string\"\n          },\n          \"max_value\": {\n            \"type\": \"number\",\n            \"description\": \"For numeric values, the upper range\",\n            \"example\": 100\n          },\n          \"trait_count\": {\n            \"type\": \"number\",\n            \"description\": \"The number of possible values for this trait\",\n            \"example\": 7\n          },\n          \"order\": {\n            \"type\": \"number\",\n            \"description\": \"Order the trait should appear in the attribute list.\",\n            \"example\": 1\n          }\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Docusaurus Documentation - JavaScript\nDESCRIPTION: This snippet imports required React and Docusaurus components, as well as JSON configuration files, to support rendering API references and admonitions on the documentation page. Dependencies include '@site/src/components/ApiReference', '@theme/Admonition', '@docusaurus/Link', and a local JSON configuration. These imports enable dynamic documentation features but do not directly interact with Ethereum or blockchain functions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getUncleByBlockNumberAndIndex.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Initializing a Node.js Project with npm\nDESCRIPTION: Initializes a new Node.js project in the current folder using the Node Package Manager (npm). This command prompts the user for project details and creates a `package.json` file to manage project metadata and dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Installing NextJS and Moralis Dependencies with npm\nDESCRIPTION: Installs the necessary dependencies for the NextJS Moralis dapp using npm. This includes the core Moralis SDK (`moralis`), the Moralis NextJS integration (`@moralisweb3/next`), NextJS authentication (`next-auth`), the NextJS framework itself (`next@12.3.4`), and React (`react`, `react-dom`).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis @moralisweb3/next next-auth next@12.3.4 react react-dom\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration\nDESCRIPTION: This snippet imports the necessary React component `ApiReference` and the configuration object `config` from local JSON file to render API documentation dynamically.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/02-Get Token Balances/get-spl-token-balance.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component in React\nDESCRIPTION: This code snippet renders the ApiReference component with the configuration for the 'getWalletActiveChains' endpoint from the wallet API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/01-Get Wallet Details/get-chain-activity-by-wallet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.wallet.getWalletActiveChains} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical NFT Transfers for Wallet Address using Moralis SDK\nDESCRIPTION: This snippet shows how to use the Moralis SDK to retrieve historical NFT transfers associated with a specific wallet address on a given blockchain. It requires the user's wallet address and the target blockchain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"USER_WALLET_ADDRESS\",\n    \"chain\": \"CHAIN\", # e.g. \"eth\", \"polygon\", etc.\n}\n\nresult = evm_api.nft.get_wallet_nft_transfers(\n  api_key=api_key,\n  params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating User Profile Template in HTML\nDESCRIPTION: This HTML template displays the authenticated user's Ethereum address and session information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Moralis Auth Django Profile Page Demo</title>\n</head>\n<body>\n    <div>\n\n    {% if user.is_authenticated %}\n        <h1>Eth address: {{ user.username }}</h1>\n        <h3>Session auth info</h3>\n        <table width=\"200px\" border=\"0px\" padding=\"5px\">\n        {% for key,value in request.session.auth_info.items %}\n            <tr><td>{{key}}</td><td><pre>{{ value }}</pre></td></tr>\n        {% endfor %}\n        </table>\n        <table width=\"200px\" border=\"0px\" padding=\"0px\">\n        <h3>Verified user info</h3>\n        {% for key,value in request.session.verified_data.items %}\n            <tr><td>{{key}}</td><td>{{ value }}</td></tr>\n        {% endfor %}\n\n        </table>\n        <br/>\n        <a href=\"{% url 'logout' %}?next={% url 'moralis_auth' %}\">Logout</a>\n    {% else %}\n        <a href=\"{% url 'moralis_auth' %}\"> Login page </a>\n    {% endif %}\n    </div>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cloning a Multichain Token Project Using Git (bash)\nDESCRIPTION: This snippet demonstrates how to clone the starter branch of a boilerplate project used for developing multichain token dapps with Axelar and Moralis. It uses git to fetch the codebase and is essential as the first step in the setup process. The cloned project serves as the foundation for subsequent JavaScript/React code installations and configurations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Olanetsoft/multichain-token-example-with-interchain-token-service.git\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering APIReference Component - JavaScript/React\nDESCRIPTION: This snippet imports the ApiReference React component and a configuration JSON object, then renders the ApiReference component with the configuration specific to getting NFT contract metadata. It relies on the \"@site/src/components/ApiReference\" module and a JSON configuration at \"../../../../../configs/api-reference/configs.json\". The expected output is a documented API reference section on the page for EVM NFT contract metadata retrieval; the config prop determines which endpoint's reference to show.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/04-Get NFT Collections/get-nft-contract-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.nft.getNFTContractMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Example Payload for ERC20 Transfers in Moralis Streams (JSON)\nDESCRIPTION: Provides an example JSON payload structure for ERC20 token transfers captured by a Moralis Web3 Stream. It shows decoded log data including token metadata (`tokenName`, `tokenSymbol`, `tokenDecimals`), transfer details (`from`, `to`, `value`), and transaction context (`transactionHash`, `logIndex`, `contract`, `block`, `chainId`). The `erc20Transfers` array contains the decoded transfer information, available for both confirmed and unconfirmed events.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/response-body.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": false,\n  \"chainId\": \"0x5\",\n  \"abi\": [],\n  \"streamId\": \"c4cf9b1a-0cb3-4c79-9ca3-04f11856c555\",\n  \"tag\": \"ChrisWallet\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"8037952\",\n    \"hash\": \"0x607ff512f17f890bf9ee6206e2029cd8530819ab72b2b9161f9b90d18ece8e03\",\n    \"timestamp\": \"1669667244\"\n  },\n  \"logs\": [\n    {\n      \"logIndex\": \"132\",\n      \"transactionHash\": \"0x1642a3b9b39e63d7fe571e7c22b80a5b059d2647fe4866d3f7105630f822d833\",\n      \"address\": \"0x0041ebd11f598305d401cc1052df49219630ab79\",\n      \"data\": \"0x0000000000000000000000000000000000000000000069e10006afc3291c0000\",\n      \"topic0\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n      \"topic1\": \"0x0000000000000000000000000a46413965858a6ac4ed5184d7643dc055a4fea3\",\n      \"topic2\": \"0x000000000000000000000000e496601436da37a045d8e88bbd6b2c2e17d8fe33\",\n      \"topic3\": null\n    }\n  ],\n  \"txs\": [\n    {\n      \"hash\": \"0x1642a3b9b39e63d7fe571e7c22b80a5b059d2647fe4866d3f7105630f822d833\",\n      \"gas\": \"85359\",\n      \"gasPrice\": \"6129141152\",\n      \"nonce\": \"88\",\n      \"input\": \"0xa9059cbb000000000000000000000000e496601436da37a045d8e88bbd6b2c2e17d8fe330000000000000000000000000000000000000000000069e10006afc3291c0000\",\n      \"transactionIndex\": \"49\",\n      \"fromAddress\": \"0x0a46413965858a6ac4ed5184d7643dc055a4fea3\",\n      \"toAddress\": \"0x0041ebd11f598305d401cc1052df49219630ab79\",\n      \"value\": \"0\",\n      \"type\": \"2\",\n      \"v\": \"1\",\n      \"r\": \"86947778944630951418310264989677611886333891146913483133255814972120449355054\",\n      \"s\": \"7019311275916215306620036726907048105130260362064080269753410507440852031640\",\n      \"receiptCumulativeGasUsed\": \"11882265\",\n      \"receiptGasUsed\": \"56906\",\n      \"receiptContractAddress\": null,\n      \"receiptRoot\": null,\n      \"receiptStatus\": \"1\"\n    }\n  ],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [\n    {\n      \"transactionHash\": \"0x1642a3b9b39e63d7fe571e7c22b80a5b059d2647fe4866d3f7105630f822d833\",\n      \"logIndex\": \"132\",\n      \"contract\": \"0x0041ebd11f598305d401cc1052df49219630ab79\",\n      \"from\": \"0x0a46413965858a6ac4ed5184d7643dc055a4fea3\",\n      \"to\": \"0xe496601436da37a045d8e88bbd6b2c2e17d8fe33\",\n      \"value\": \"499999000000000000000000\",\n      \"tokenName\": \"Example Token\",\n      \"tokenSymbol\": \"Token\",\n      \"tokenDecimals\": \"18\",\n      \"valueWithDecimals\": \"499999\"\n    }\n  ],\n  \"erc20Approvals\": [],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MoralisNextApi for Authentication in JavaScript\nDESCRIPTION: Set up MoralisNextApi in a JavaScript file, configuring authentication settings and handling environment variables for Solana wallet integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\n\nconst DATE = new Date();\nconst FUTUREDATE = new Date(DATE);\nFUTUREDATE.setDate(FUTUREDATE.getDate() + 1);\n\nconst { MORALIS_API_KEY, APP_DOMAIN, NEXTAUTH_URL } = process.env;\n\nif (!MORALIS_API_KEY || !APP_DOMAIN || !NEXTAUTH_URL) {\n  throw new Error(\n    \"Missing env variables. Please add the required env variables.\"\n  );\n}\n\nexport default MoralisNextApi({\n  apiKey: MORALIS_API_KEY,\n  authentication: {\n    timeout: 120,\n    domain: APP_DOMAIN,\n    uri: NEXTAUTH_URL,\n    expirationTime: FUTUREDATE.toISOString(),\n    statement: \"Sign message to authenticate.\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Non-Normalized NFT Metadata (Stringified JSON)\nDESCRIPTION: A sample of non-normalized NFT metadata that represents the same data as the normalized example but in a stringified format with escape characters. This is how metadata appears without normalization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/02-NFT Metadata/normalized-vs-non-normalized-metadata.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"description\\\": \\\"Friendly OpenSea Creature that enjoys long swims in the ocean.\\\", \n  \\\"external_url\\\": \\\"https://openseacreatures.io/3\\\", \n  \\\"image\\\": \\\"https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.webp\\\", \n  \\\"name\\\": \\\"Dave Starbelly\\\",\n  \\\"attributes\\\": [\n    {\n      \\\"trait_type\\\": \\\"Base\\\", \n      \\\"value\\\": \\\"Starfish\\\"\n    }, \n    {\n      \\\"trait_type\\\": \\\"Eyes\\\", \n      \\\"value\\\": \\\"Big\\\"\n    }, \n    {\n      \\\"trait_type\\\": \\\"Mouth\\\", \n      \\\"value\\\": \\\"Surprised\\\"\n    }, \n    {\n      \\\"trait_type\\\": \\\"Level\\\", \n      \\\"value\\\": 5\n    }, \n    {\n      \\\"trait_type\\\": \\\"Stamina\\\", \n      \\\"value\\\": 1.4\n    }, \n    {\n      \\\"trait_type\\\": \\\"Personality\\\", \n      \\\"value\\\": \\\"Sad\\\"\n    }, \n    {\n      \\\"display_type\\\": \\\"boost_number\\\", \n      \\\"trait_type\\\": \\\"Aqua Power\\\", \n      \\\"value\\\": 40\n    }, \n    {\n      \\\"display_type\\\": \\\"boost_percentage\\\", \n      \\\"trait_type\\\": \\\"Stamina Increase\\\", \n      \\\"value\\\": 10\n    }, \n    {\n      \\\"display_type\\\": \\\"number\\\", \n      \\\"trait_type\\\": \\\"Generation\\\", \n      \\\"value\\\": 2\n    }\n  ]\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis and CORS in ASP.NET Core Program\nDESCRIPTION: This code snippet demonstrates how to set up CORS policy, add necessary services, configure Swagger, and initialize Moralis client in an ASP.NET Core application. It includes setting up allowed origins, adding controllers, and configuring the Moralis connection data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar AllowedOrigins = \"_allowedOrigins\";\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Define CORS policy\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(AllowedOrigins,\n                    policy =>\n                    {\n                        policy.WithOrigins(\"http://127.0.0.1:5500\")\n                                            .AllowAnyHeader()\n                                            .AllowAnyMethod();\n                    });\n});\n\n// Add services to the container.\nbuilder.Services.AddControllers();\n\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseCors(AllowedOrigins);\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\n// Setup Moralis\nMoralis.MoralisClient.ConnectionData = new Moralis.Models.ServerConnectionData()\n{\n    ApiKey = \"MY API KEY\"\n};\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to import a custom API reference React component and a configuration JSON file into a documentation page. The component likely provides the UI for the API reference, while the configuration file specifies endpoints and rendering instructions. Dependencies include React, the \"@site/src/components/ApiReference\" component, and a JSON config file path. Both imports are prerequisites to rendering the dynamic API reference below.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/01-Get Blocks/get-block.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Creating Balances Component\nDESCRIPTION: React component that fetches and displays wallet balances using axios and useState hook\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from 'react';\n\nimport axios from 'axios';\n\nexport default function Balances() {\n  const [balances, setBalances] = useState({});\n\n  useEffect(() => {\n    axios('http://localhost:4000/balances').then(({ data }) => {\n      setBalances(data);\n    });\n  }, []);\n\n  return (\n    <div>\n      <h3>Wallet: {balances.address}</h3>\n      <h3>Native Balance: {balances.nativeBalance} ETH</h3>\n      <h3>Token Balances: {balances.tokenBalances}</h3>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Solana Wallet Provider and SessionProvider in NextJS\nDESCRIPTION: Setting up _app.jsx to wrap the application with Solana Wallet Provider and SessionProvider for handling wallet connections and user sessions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../styles/globals.css\";\nimport { SessionProvider } from \"next-auth/react\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { useMemo } from \"react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\n\nfunction MyApp({ Component, pageProps }) {\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n  const wallets = useMemo(\n    () => [new PhantomWalletAdapter(), new SolflareWalletAdapter({ network })],\n    [network]\n  );\n  return (\n    <SessionProvider session={pageProps.session}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletModalProvider>\n            <Component {...pageProps} />\n          </WalletModalProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </SessionProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Attaching Multiple Addresses to a Stream in Moralis JavaScript\nDESCRIPTION: This snippet demonstrates how to attach multiple wallet addresses to an existing Moralis stream using the Moralis.Streams.addAddress method. It uses an array of Ethereum addresses along with a target stream ID. The address parameter can be either a single string or an array of addresses. Requires the Moralis JavaScript SDK and proper initialization. Inputs: streamId (the stream identifier) and address list; Output: a promise resolving to the SDK response.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/addresses/monitor-multiple-addresses.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add addresses\\nawait Moralis.Streams.addAddress({\\n  id: streamId,\\n  address: [\\n    \\\"0xCFDF6Aaae9f6B927E3736FBD327853B622c5060E\\\",\\n    \\\"0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B\\\",\\n  ], // Can also be a single string\\n});\n```\n\n----------------------------------------\n\nTITLE: Querying eth_getUncleCountByBlockHash Parameters - JSON\nDESCRIPTION: This code snippet supplies parameters for eth_getUncleCountByBlockHash, consisting of a single block hash string in a JSON array. The block hash must be properly formatted; output is a count of uncle blocks as a hexadecimal string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"0xe9de65582d5a210f3f5703e0d7dc1daf9fbb5a0670937f5d92283a41ea1bcb2b\"\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Balance with Moralis SDK in Python\nDESCRIPTION: This Python snippet shows how to get the SPL token balance of a Solana wallet address ('BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen') using the Moralis Python SDK. It sets the API key, defines parameters including the network ('mainnet') and address, and calls the `sol_api.account.get_spl` function. The resulting token balance data is then printed. Requires the `moralis` library.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/how-to-get-spl-token-balance-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"network\": \"mainnet\",\n    \"address\": \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\",\n}\n\nresult = sol_api.account.get_spl(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing the Moralis Plugin in Character Configuration\nDESCRIPTION: TypeScript code to import and register the Moralis plugin in a character configuration file for ElizaOS.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/02-building-with-eliza-os.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MoralisPlugin } from \"@elizaos/plugin-moralis\";\nconst character = {\n  // ... other character config\n  plugins: [moralisPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Smart Account Transactions with JavaScript\nDESCRIPTION: Implementation of getWalletTransactions endpoint using JavaScript and Moralis SDK. Fetches complete transaction history for a smart contract account address on specified blockchain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/05-Transactions/how-to-get-transactions-of-smart-contract-account.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const address = \"0x350845DD3f03F1355233a3A7CEBC24b5aAD05eC5\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Authenticating Firebase CLI (Shell)\nDESCRIPTION: Logs the user into their Firebase account via the command line using the installed Firebase CLI. This authentication is necessary to manage Firebase projects associated with the account.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfirebase login\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Owner Information using Moralis API in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Moralis NFT API to retrieve the owner of a specific NFT by token ID. It requires initializing Moralis with an API key, and specifying the NFT contract address, chain, and token ID to query the ownership information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owner-of-an-nft.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xa186d739ca2b3022b966194004c6b01855d59571\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const tokenId = \"1\";\n\n  const response = await Moralis.EvmApi.nft.getNFTTokenIdOwners({\n    address,\n    chain,\n    tokenId,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating and Reading EvmChain Instance\nDESCRIPTION: Shows different ways to create an EvmChain instance and access its properties.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\n//by name\nconst chain = EvmChain.ETHEREUM;\n//or by hex string\nconst chain = EvmChain.create(\"0x1\");\n// or by decimal value\nconst chain = EvmChain.create(1);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Wallet Transactions Query\nDESCRIPTION: Shows the structure of the JSON response returned by the `getWalletTransactions` endpoint. It includes metadata like `total`, `page`, `page_size`, and a `result` array containing individual transaction objects with details like hash, addresses, value, gas, timestamp, and block information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/05-Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": \"2000\",\n  \"page\": \"2\",\n  \"page_size\": \"100\",\n  \"result\": [\n    {\n      \"hash\": \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\",\n      \"nonce\": 326595425,\n      \"transaction_index\": 25,\n      \"from_address\": \"0xd4a3BebD824189481FC45363602b83C9c7e9cbDf\",\n      \"to_address\": \"0xa71db868318f0a0bae9411347cd4a6fa23d8d4ef\",\n      \"value\": 650000000000000000,\n      \"gas\": 6721975,\n      \"gas_price\": 20000000000,\n      \"input\": \"string\",\n      \"receipt_cumulative_gas_used\": 1340925,\n      \"receipt_gas_used\": 1340925,\n      \"receipt_contract_address\": \"0x1d6a4cf64b52f6c73f201839aded7379ce58059c\",\n      \"receipt_root\": \"string\",\n      \"receipt_status\": 1,\n      \"block_timestamp\": \"2021-04-02T10:07:54.000Z\",\n      \"block_number\": 12526958,\n      \"block_hash\": \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Only Extensions to Firebase (NodeJS, Text CLI)\nDESCRIPTION: Deploys the installed Firebase extensions (such as Moralis Auth) to your Firebase project using the Firebase CLI. Needs prior installation of any desired extensions. Takes no parameters; it only deploys extensions and not other Firebase components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_1\n\nLANGUAGE: Text CLI\nCODE:\n```\nfirebase deploy --only extensions\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation and Banner using React Components\nDESCRIPTION: This JSX snippet renders two React components. `EthereumApiBanner` displays a customizable banner, here used to point users towards equivalent EVM API documentation. `ApiReference` is used to render the detailed documentation for a specific API endpoint, configured using data spread from the `config.solana.getTokenHolders` object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Token Holders/get-token-holder-stats.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EthereumApiBanner\n  customTitle=\"Looking for token holder stats on EVM?\"\n  customText=\"Access token holder statistics on EVM using our API.\"\n  customButtonText=\"Explore EVM API\"\n  customButtonLink=\"/web3-data-api/evm/reference/get-token-holder-stats\"\n/>\n\n<ApiReference {...config.solana.getTokenHolders} />\n```\n\n----------------------------------------\n\nTITLE: Specifying Event ABI for Stream Filtering - Ethereum ABI - JSON\nDESCRIPTION: Provides an example Ethereum event ABI in JSON format for filtering 'Transfer' events on a contract within the Moralis Streams UI. This ABI describes an event with indexed and non-indexed parameters as required for configuring topic-based stream filters. Dependencies include the smart contract address and the Moralis Streams system, and the ABI must be valid to ensure the stream functions. Inputs are event field definitions; output is used in the Streams API filter configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/filter-streams.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Selecting Emulators during Firebase Init (CLI Output)\nDESCRIPTION: Displays the prompt from `firebase init` where the user selects which Firebase services to emulate locally. This example shows selecting the Functions and Hosting emulators.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n? Which Firebase emulators do you want to set up?\n◉ Functions Emulator\n◉ Hosting Emulator\n```\n\n----------------------------------------\n\nTITLE: Querying Block by Number - Ethereum JSON-RPC - JSON\nDESCRIPTION: Provides example parameters and response for the eth_getBlockByNumber method, used to get block details by block number or tag. The request expects the block number (hexadecimal or tag) and a boolean for detailed transactions. The response contains block data, typically as an object in the 'result' field.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[\"0x1B4\", false]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    // Block object\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Moralis API Reference using a React Component\nDESCRIPTION: This JSX snippet renders the `ApiReference` React component within the MDX page. It passes configuration data specific to the 'getWalletNFTCollections' endpoint (accessed via `config.nft.getWalletNFTCollections`) as props. This component dynamically generates the detailed API documentation based on the provided configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/03-Get Wallet NFT Balances/get-wallet-nft-collections.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getWalletNFTCollections} />\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Block Number in TypeScript\nDESCRIPTION: This TypeScript snippet uses Moralis SDK to retrieve the closest block to a specific date using the getDateToBlock endpoint. It accepts a date in any format supported by moment.js and optionally specifies the blockchain to query.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from\"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const date = \"2023-07-05\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getDateToBlock({\n    date,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis Authentication API Route in TypeScript\nDESCRIPTION: Configures the Moralis Next.js API handler in `pages/api/moralis/[...moralis].ts`. It uses `MoralisNextApi` from `@moralisweb3/next`, retrieves environment variables (`MORALIS_API_KEY`, `APP_DOMAIN`, `NEXTAUTH_URL`), and sets authentication options like timeout, domain, URI, expiration time (set to 24 hours in the future), and the statement presented to the user during signing. It includes a check to ensure necessary environment variables are present.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\n\nconst DATE = new Date();\nconst FUTUREDATE = new Date(DATE);\nFUTUREDATE.setDate(FUTUREDATE.getDate() + 1);\n\nconst { MORALIS_API_KEY, APP_DOMAIN, NEXTAUTH_URL } = process.env;\n\nif (!MORALIS_API_KEY || !APP_DOMAIN || !NEXTAUTH_URL) {\n  throw new Error(\n    \"Missing env variables. Please add the required env variables.\"\n  );\n}\n\nexport default MoralisNextApi({\n  apiKey: MORALIS_API_KEY,\n  authentication: {\n    timeout: 120,\n    domain: APP_DOMAIN,\n    uri: NEXTAUTH_URL,\n    expirationTime: FUTUREDATE.toISOString(),\n    statement: \"Sign message to authenticate.\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Express Server with Moralis Integration\nDESCRIPTION: Express.js server setup with Moralis SDK integration to fetch blockchain data\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nconst express = require(\"express\");\nconst cors = require(\"cors\");\n\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst app = express();\nconst port = 4000;\n\napp.use(\n  cors({\n    origin: \"http://localhost:3000\",\n    credentials: true,\n  })\n);\n\nconst MORALIS_API_KEY = \"replace_me\";\nconst address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\napp.get(\"/balances\", async (req, res) => {\n  try {\n    const [nativeBalance, tokenBalances] = await Promise.all([\n      Moralis.EvmApi.balance.getNativeBalance({\n        chain: EvmChain.ETHEREUM,\n        address,\n      }),\n      Moralis.EvmApi.token.getWalletTokenBalances({\n        chain: EvmChain.ETHEREUM,\n        address,\n      }),\n    ]);\n    res.status(200).json({\n      address,\n      nativeBalance: nativeBalance.result.balance.ether,\n      tokenBalances: tokenBalances.result.map((token) => token.display()),\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: MORALIS_API_KEY,\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\nstartServer();\n```\n\n----------------------------------------\n\nTITLE: Creating Logout Button Component (JavaScript)\nDESCRIPTION: This JavaScript React component (`LogoutBtn`) renders a simple logout button using `@web3uikit/core`. When clicked, it calls the `signOut` function from `next-auth/react` to log the user out.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript logoutBtn.js\n// File path\n// app/components/logoutBtn/logoutBtn.js\n\nimport React from \"react\";\nimport { Button } from \"@web3uikit/core\";\nimport { signOut } from \"next-auth/react\";\n\nexport default function LogoutBtn() {\n  return (\n    <Button text=\"Logout\" theme=\"outline\" onClick={() => signOut()}></Button>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Authentication Message Constants - NodeJS\nDESCRIPTION: Declares constants required for constructing the message payload sent during the Moralis authentication flow. These constants specify the domain, statement text, URI, expiration time, and timeout value used in signing requests. They can be customized depending on the use case, and are required prerequisites for the requestMessage function.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'moralis.io';\nconst STATEMENT = 'Please sign this message to confirm your identity.';\nconst URI = 'https://moralis.io/';\nconst EXPIRATION_TIME = '2023-01-01T00:00:00.000Z';\nconst TIMEOUT = 15;\n```\n\n----------------------------------------\n\nTITLE: Requiring and Using CORS Middleware in Express - NodeJS\nDESCRIPTION: Adds cors middleware in index.js to enable Cross-Origin Resource Sharing for the backend. The first snippet requires the cors package, while the second applies it to all Express routes by calling app.use(cors()). The middleware ensures requests from Unity or web clients from different domains can access the API. The order of middleware setup is important: require/import before use.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cors = require('cors')\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(cors())\n```\n\n----------------------------------------\n\nTITLE: Initializing Metaplex SDK for Solana NFT Burning\nDESCRIPTION: TypeScript code to set up the Metaplex SDK with the connected wallet and devnet cluster for NFT transactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-burner.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst wallet = useWallet();\nconst connection = new Connection(clusterApiUrl(\"devnet\"));\nconst metaplex = new Metaplex(connection);\nmetaplex.use(walletAdapterIdentity(wallet));\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for React app configuration\nDESCRIPTION: Environment variable configuration in a .env file to set the server URL for API calls in the React application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nREACT_APP_SERVER_URL=http://localhost:4000\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Solana Wallet Authentication in NextJS\nDESCRIPTION: Install the required npm packages for implementing Solana wallet authentication in a NextJS application, including Moralis, next-auth, and Solana wallet adapter libraries.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @moralisweb3/next next-auth @web3uikit/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install bs58 tweetnacl \\\n    @solana/wallet-adapter-base \\\n    @solana/wallet-adapter-react \\\n    @solana/wallet-adapter-react-ui \\\n    @solana/wallet-adapter-wallets \\\n    @solana/web3.js\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component\nDESCRIPTION: This code imports the ApiBanner component from a relative path. This component likely provides a visual banner or notification specific to the API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/01-Get Token Balances/get-wallet-token-balances.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Trades - Moralis NFT API - Python\nDESCRIPTION: This Python snippet illustrates how to use the Moralis SDK to retrieve all NFT trades for a specified collection and marketplace. It utilizes 'moralis' Python package. Required inputs are 'api_key', 'address' (NFT contract address), 'chain' (e.g., 'eth'), and 'marketplace' (e.g., \"opensea\"). The script calls 'evm_api.nft.get_nft_trades' and prints the resulting data. Prerequisites include API key setup and Moralis library installation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/06-NFT Marketdata/how-to-get-nft-trades-by-marketplace.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n  \"chain\": \"eth\",\n  \"marketplace\": \"opensea\",\n  \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\"\n}\n\nresult = evm_api.nft.get_nft_trades(\n  api_key=api_key,\n  params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: API Response Format for Token Balances\nDESCRIPTION: Example JSON response showing the structure of token balance data returned by the Moralis API. Includes token details such as address, name, symbol, logo URLs, decimals, and balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"token_address\": \"0xefd6c64533602ac55ab64442307f6fe2c9307305\",\n    \"name\": \"APE\",\n    \"symbol\": \"APE\",\n    \"logo\": null,\n    \"thumbnail\": null,\n    \"decimals\": 18,\n    \"balance\": \"101715701444169451516503179\"\n  },\n  {\n    \"token_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"name\": \"Wrapped Ether\",\n    \"symbol\": \"WETH\",\n    \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.webp\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.webp\",\n    \"decimals\": 18,\n    \"balance\": \"85000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Lambda Function Invocation and Response in GameSparks Request Handler - JavaScript\nDESCRIPTION: This JavaScript ES5.1 code, defined as the value of the \"Script\" field in the GameSparks request handler JSON, demonstrates how to invoke a specific AWS Lambda function, pass player-supplied address and chain parameters, and handle the resulting payload. It logs the Lambda response and returns it to the GameSparks messaging system in the expected format. This script executes server-side as part of a GameSparks message (request) handler; it expects that the referenced Lambda functions are available and properly permissioned.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/aws-gamesparks-integration-with-unity.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = GameSparks().Lambda(\"aws-node-project-dev-getNativeBalance\").Invoke(\n    {\n      // Example of how you would send a parameter to Lambda\n      \"address\": message.address,\n      \"chain\": message.chain\n    }\n);\n\nGameSparks().Logging().Debug(\"Result from Lambda is:\");\nGameSparks().Logging().Debug(JSON.stringify(response.Payload));\n\nreturn GameSparks().Messaging().Response({\"result\": parseFloat(response.Payload.result)});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = GameSparks().Lambda(\"aws-node-project-dev-getWalletNfts\").Invoke(\n    {\n      \"address\": message.address,\n      \"chain\": message.chain\n    }\n);\n\nGameSparks().Logging().Debug(\"Result from Lambda is:\");\n\nreturn GameSparks().Messaging().Response({\"result\": response.Payload.result});\n```\n\n----------------------------------------\n\nTITLE: Getting ERC-20 Transfers in JavaScript\nDESCRIPTION: JavaScript implementation to retrieve ERC-20 token transfers for a smart contract account using Moralis EvmApi. Requires Moralis API key and supports various EVM chains.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-erc-20-transfers-of-smart-contract-account.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n  });\n\n  const address = \"0x9b722B2aA4Cc119aCf8c95bBF5244092Be6880b9\";\n  const chain = EvmChain.POLYGON;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Sign-In Page Component - React (JavaScript)\nDESCRIPTION: Defines a simple NextJS page component for user sign-in, rendering a static heading. Intended as a minimalist starting point for further authentication flow integration. No parameters or props required. Place in pages/signin.jsx.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction SignIn() {\\n  return (\\n    <div>\\n      <h3>Web3 Authentication</h3>\\n    </div>\\n  );\\n}\\n\\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Swaps by Pair Address - HTTP Endpoint\nDESCRIPTION: Fetches token swap transactions for a given pair by pairAddress and network, providing real-time swap and trading data in JSON. Useful for market monitoring and analytics; Moralis API access required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/token/:network/pairs/:pairAddress/swaps\n```\n\n----------------------------------------\n\nTITLE: Resolving Unstoppable Domain with Moralis SDK (Python)\nDESCRIPTION: This Python script utilizes the Moralis Python SDK to resolve an Unstoppable domain. It requires the `moralis` library and an API key. The script calls the `evm_api.resolve.resolve_domain` function, passing the API key and parameters including the domain name and optionally the currency (defaulting to 'eth'). The resulting dictionary containing the resolved address is printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-reverse-resolve-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"domain\": \"brad.crypto\",\n    \"currency\": \"eth\",\n}\n\nresult = evm_api.resolve.resolve_domain(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: JWT Token Generation in Authentication Controller\nDESCRIPTION: Implementation of JWT token generation in an authentication controller endpoint, including claims for wallet address, profile ID, and signature validation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\n[HttpPost, Route(\"verify/{network}\")]\npublic async Task<IActionResult> VerifySignature(ChainNetworkType network, [FromBody] CompleteChallengeRequestDto req)\n{\n    try\n    { \n        CompleteChallengeResponseDto completeResp = await MoralisClient.AuthenticationApi.AuthEndpoint.CompleteChallenge(req, network);\n\n        Dictionary<string, string> claims = new Dictionary<string, string>();\n        claims.Add(\"Address\", completeResp.Address);\n        claims.Add(\"AuthenticationProfileId\", completeResp.ProfileId);\n        claims.Add(\"SignatureValidated\", \"true\");\n\n        string token = TokenManager.GenerateToken(claims);\n\n        return new CreatedAtRouteResult(nameof(VerifySignature), token);\n    }\n    catch (ApiException ex)\n    {\n        return new BadRequestResult();\n    }\n    catch (Exception ex)\n    {\n        return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Moralis Streams API Reference in TypeScript/React\nDESCRIPTION: This code snippet initializes the API reference for the 'Delete stream' endpoint by importing a custom React component and a JSON configuration object. It requires dependencies on React, a documentation infrastructure (such as Docusaurus), and a configuration JSON containing OpenAPI or endpoint specs. Inputs are used via configuration properties, and the output is a documentation UI component; this approach centralizes API reference handling and requires that the configsV2.json file be up to date.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/delete-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Flow\nDESCRIPTION: JavaScript function implementing the complete authentication flow\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst handleAuth = async () => {\n  // Connect to Metamask\n  const { signer, chain, account } = await connectToMetamask();\n\n  if (!account) {\n    throw new Error('No account found');\n  }\n  if (!chain) {\n    throw new Error('No chain found');\n  }\n\n  const { message } = await requestMessage(account, chain);\n\n  const signature = await signer.signMessage(message);\n\n  const { user } = await verifyMessage(message, signature);\n\n  _supabaseAuthenticated = supabase.createClient(SUPABASE_URL, SUPABASE_PUBLIC_ANON_KEY, {\n    global: {\n      headers: {\n        Authorization: `Bearer ${user.token}`,\n      },\n    },\n  });\n\n  renderUser(user);\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data\nDESCRIPTION: JavaScript function to fetch user data using authenticated Supabase client\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst getUser = async (token) => {\n  const { data } = await _supabaseAuthenticated.from('users').select('*');\n  renderUser(data);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Ownership Check using Moralis EVM API in `getServerSideProps`\nDESCRIPTION: This snippet integrates the Moralis EVM API within `getServerSideProps` to perform the actual NFT ownership check. It initializes Moralis if not already started, retrieves the authenticated user's address from the session, and calls `Moralis.EvmApi.nft.getWalletNFTs` to check for NFTs from a specific contract address on the Ethereum chain. Based on the result (`nftList.raw.total`), it sets the appropriate message and passes the NFT list data as props to the component. Requires `next-auth/react`, `moralis`, and `@moralisweb3/common-evm-utils` dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/nft-gating-nextjs.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSession } from 'next-auth/react';\nimport Moralis from 'moralis';\nimport { EvmChain } from '@moralisweb3/common-evm-utils';\n\nfunction Protected({ message, nftList }) {\n    return (\n        <div>\n            <h3>Protected content</h3>\n            <p>{message}</p>\n            <pre>{JSON.stringify(nftList, null, 2)}</pre>\n        </div>\n    );\n}\n\nexport async function getServerSideProps(context) {\n    const session = await getSession(context);\n\n    if (!session) {\n        return {\n            redirect: {\n                destination: '/signin',\n                permanent: false,\n            },\n        };\n    }\n\n    if(!Moralis.Core.isStarted){\n        await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n    }\n\n    const nftList = await Moralis.EvmApi.nft.getWalletNFTs({\n      \tchain: EvmChain.ETHEREUM,\n        address: session.user.address,\n        // replace \"0x...\" with your NFT token address\n        tokenAddresses: [\"0x...\", ],\n    });\n\n    return {\n        props: {\n            message:\n                // if user has at least one NFT he will get protected content\n                nftList.raw.total > 0 ? 'Nice! You have our NFT' : \"Sorry, you don't have our NFT\",\n            nftList: nftList.raw.result,\n        },\n    };\n}\nexport default Protected;\n```\n\n----------------------------------------\n\nTITLE: Tracking Transaction Status with useEffect in JavaScript/React\nDESCRIPTION: This snippet uses a `useEffect` hook within a React component to track the status of a token transfer transaction initiated previously. It monitors the `isSuccess`, `isError`, and `isLoading` states returned by the `useWaitForTransaction` hook (and potentially an approval transaction state `isSpendSuccess`). Based on these states, it displays appropriate toast notifications to the user indicating success, error, pending status, or token approval.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst TransferToken = () => {\n  //...\n  useEffect(() => {\n    gasEstimator();\n    if (isSuccess) {\n      setDisplayTransactionHash(tokenTransfer?.hash ?? '');\n      toast({\n        title: 'Token Transfer Initiated',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isError) {\n      toast({\n        title: 'Transaction Error',\n        description: 'There was an error submitting your transaction.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isLoading) {\n      toast({\n        title: 'Transaction Pending',\n        description: 'Your transaction is pending.',\n        status: 'info',\n        duration: 5000,\n        isClosable: true,\n      });\n      if (isSpendSuccess) {\n        toast({\n          title: 'Token Approved',\n          status: 'success',\n          duration: 5000,\n          isClosable: true,\n        });\n        setApproveButtonVisibility(false);\n        setFormVisibility(true);\n      }\n    }\n  },\n  [tokenTransfer, isSuccess, isError, isLoading, useWaitForTokenTransferTransactionData, useWaitForTransactionSpendData, ]);\n  return (\n    //..\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ngrok for Tunnel Creation\nDESCRIPTION: Installs ngrok globally to create a public URL for the local Express server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g ngrok\n```\n\n----------------------------------------\n\nTITLE: Defining USDT Contract ABI in JSON for Moralis Stream\nDESCRIPTION: This JSON object represents the Application Binary Interface (ABI) for the Tether (USDT) contract (address `0xdAC17F958D2ee523a2206206994597C13D831ec7`) on Ethereum. It is required when setting up a Moralis Stream to monitor specific contract interactions (like transfers) and event emissions. The ABI defines all available functions (e.g., `transfer`, `approve`, `balanceOf`) and events (e.g., `Transfer`, `Approval`), enabling the stream service to decode and understand the data associated with the USDT contract.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"string\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"_upgradedAddress\", \"type\": \"address\" }],\n    \"name\": \"deprecate\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      { \"name\": \"_spender\", \"type\": \"address\" },\n      { \"name\": \"_value\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"deprecated\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"_evilUser\", \"type\": \"address\" }],\n    \"name\": \"addBlackList\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      { \"name\": \"_from\", \"type\": \"address\" },\n      { \"name\": \"_to\", \"type\": \"address\" },\n      { \"name\": \"_value\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"upgradedAddress\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [{ \"name\": \"\", \"type\": \"address\" }],\n    \"name\": \"balances\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"maximumFee\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"_totalSupply\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"unpause\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [{ \"name\": \"_maker\", \"type\": \"address\" }],\n    \"name\": \"getBlackListStatus\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      { \"name\": \"\", \"type\": \"address\" },\n      { \"name\": \"\", \"type\": \"address\" }\n    ],\n    \"name\": \"allowed\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"paused\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [{ \"name\": \"who\", \"type\": \"address\" }],\n    \"name\": \"balanceOf\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"pause\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"getOwner\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"string\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      { \"name\": \"_to\", \"type\": \"address\" },\n      { \"name\": \"_value\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      { \"name\": \"newBasisPoints\", \"type\": \"uint256\" },\n      { \"name\": \"newMaxFee\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"setParams\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"amount\", \"type\": \"uint256\" }],\n    \"name\": \"issue\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"amount\", \"type\": \"uint256\" }],\n    \"name\": \"redeem\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      { \"name\": \"_owner\", \"type\": \"address\" },\n      { \"name\": \"_spender\", \"type\": \"address\" }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [{ \"name\": \"remaining\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"basisPointsRate\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [{ \"name\": \"\", \"type\": \"address\" }],\n    \"name\": \"isBlackListed\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"_clearedUser\", \"type\": \"address\" }],\n    \"name\": \"removeBlackList\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"MAX_UINT\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"newOwner\", \"type\": \"address\" }],\n    \"name\": \"transferOwnership\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"_blackListedUser\", \"type\": \"address\" }],\n    \"name\": \"destroyBlackFunds\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"name\": \"_initialSupply\", \"type\": \"uint256\" },\n      { \"name\": \"_name\", \"type\": \"string\" },\n      { \"name\": \"_symbol\", \"type\": \"string\" },\n      { \"name\": \"_decimals\", \"type\": \"uint256\" }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [{ \"indexed\": false, \"name\": \"amount\", \"type\": \"uint256\" }],\n    \"name\": \"Issue\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [{ \"indexed\": false, \"name\": \"amount\", \"type\": \"uint256\" }],\n    \"name\": \"Redeem\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [{ \"indexed\": false, \"name\": \"newAddress\", \"type\": \"address\" }],\n    \"name\": \"Deprecate\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      { \"indexed\": false, \"name\": \"feeBasisPoints\", \"type\": \"uint256\" },\n      { \"indexed\": false, \"name\": \"maxFee\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"Params\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      { \"indexed\": false, \"name\": \"_blackListedUser\", \"type\": \"address\" },\n      { \"indexed\": false, \"name\": \"_balance\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"DestroyedBlackFunds\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [{ \"indexed\": false, \"name\": \"_user\", \"type\": \"address\" }],\n    \"name\": \"AddedBlackList\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [{ \"indexed\": false, \"name\": \"_user\", \"type\": \"address\" }],\n    \"name\": \"RemovedBlackList\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      { \"indexed\": true, \"name\": \"owner\", \"type\": \"address\" },\n      { \"indexed\": true, \"name\": \"spender\", \"type\": \"address\" },\n      { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and configuration file for the API reference documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/05-Get NFT Owners/get-nft-token-id-owners.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering NFT Transfers API Reference - React - TypeScript\nDESCRIPTION: This React JSX snippet invokes the ApiReference component, spreading the configuration object related to Moralis NFT transfer API into its props. This renders a structured reference endpoint for retrieving NFT transfers by token ID. It requires both the React component and configuration data imported earlier; the props provided must align with the expected schema for the ApiReference component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-nft-transfers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<ApiReference {...config.nft.getNFTTransfers} />\n```\n\n----------------------------------------\n\nTITLE: Wrapping Next.js App with SessionProvider in _app.jsx (javascript)\nDESCRIPTION: Shows how to modify the `pages/_app.jsx` file to wrap the main application component (`Component`) with the `SessionProvider` from `next-auth/react`. This provider makes session data available throughout the application, enabling client-side access to authentication status and user information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../styles/globals.css\";\nimport { SessionProvider } from \"next-auth/react\";\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <SessionProvider session={pageProps.session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Defining the ERC20 balanceOf Function ABI in JavaScript\nDESCRIPTION: Provides the JavaScript object representation of the Application Binary Interface (ABI) for the standard ERC20 `balanceOf` function. This ABI specifies the function's name, inputs (owner address), outputs (balance), state mutability (`view`), and type (`function`), required for configuring a Moralis Trigger to call this function.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst balanceOfSenderAbi = {\n  constant: true,\n  inputs: [\n    {\n      name: \"owner\",\n      type: \"address\",\n    },\n  ],\n  name: \"balanceOf\",\n  outputs: [\n    {\n      name: \"\",\n      type: \"uint256\",\n    },\n  ],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using API Reference Component with Configuration\nDESCRIPTION: Implementation of the API Reference component with configuration for the multiple token prices endpoint, including an admonition note about the endpoint only working on Mainnet chains.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/03-Get Token Prices/get-multiple-token-price.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getMultipleTokenPrices}>\n  <Admonition type=\"info\" title=\"Note\">\n    <p>Endpoint only works on the Mainnet chains.</p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Connecting to MetaMask and Getting Wallet Info (JavaScript)\nDESCRIPTION: Defines an asynchronous JavaScript function `connectToMetamask` for the client-side. This function uses Ethers.js to interact with the browser's Ethereum provider (typically MetaMask injected into `window.ethereum`). It requests the user's accounts (`eth_requestAccounts`) and the current chain ID (`eth_chainId`). It then returns an object containing the Ethers `signer` (for signing transactions/messages), the `chain` ID, and the user's primary `account` address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectToMetamask = async () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n\n  const [accounts, chainId] = await Promise.all([\n    provider.send('eth_requestAccounts', []),\n    provider.send('eth_chainId', []),\n  ]);\n\n  const signer = provider.getSigner();\n  return { signer, chain: chainId, account: accounts[0] };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies via npm/yarn (bash)\nDESCRIPTION: Installs the `@moralisweb3/next`, `next-auth`, and `@web3uikit/core` packages using either npm or yarn. These are essential for integrating Moralis Web3 functionality, handling authentication sessions, and using Web3 UI components in the Next.js application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @moralisweb3/next next-auth @web3uikit/core\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Balance Trigger in Moralis Streams (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `getNativeBalances` trigger within a Moralis Stream definition. It uses an array containing objects that specify which addresses' native balances to fetch using `selectors` (e.g., '$fromAddress', '$toAddress') and the context `type` (e.g., 'tx', 'internalTx'). This configuration results in native balances being included in the webhook response for the selected addresses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/addresses/get-native-balances.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"getNativeBalances\": [\n  {\n  \tselectors: [\"$fromAddress\", \"$toAddress\"],\n    type: 'tx'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Interchain Token Factory ABI and Contract Address in React (JavaScript)\nDESCRIPTION: This snippet shows how to import the InterchainTokenFactory ABI JSON and specify the target contract address within a React component. These imports are prerequisites for interacting with the Interchain Token Service from the frontend, using hooks like useContractWrite for contract calls. It relies on contract ABIs being present in the local contracts folder.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//...\n\nimport interchainTokenFactoryContractABI from \"../../../../../contracts/InterchainTokenFactoryABI.json\";\n\nconst interchainTokenFactoryContractAddress =\n  \"0x83a93500d23Fbc3e82B410aD07A6a9F7A0670D66\";\n\nconst NewInterchainToken: React.FC = () => {\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Moralis Node\nDESCRIPTION: Configuration for storing the Moralis Node URL in an environment file for secure access.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-nft-balances.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMORALIS_NODE_URL=YOUR_URL_OBTAINED_FROM_DASHBOARD\n```\n\n----------------------------------------\n\nTITLE: Generating an Angular Component - Shell\nDESCRIPTION: Utilizes Angular CLI to generate a new component called 'balances' in the project. This adds the necessary TypeScript, HTML, CSS, and test files for the component. The balances component will be used to display blockchain balance data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng generate component balances\n```\n\n----------------------------------------\n\nTITLE: Starting Express Server - Shell\nDESCRIPTION: Runs the application using npm's start script, typically executing 'node index.js' or an equivalent command defined in package.json. Starts the backend Express server to serve the /balances endpoint for client requests. Assumes all dependencies and setup are complete.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Next-Auth with MoralisNextAuthProvider - TypeScript\nDESCRIPTION: Same as the JavaScript version, with TypeScript-specific type assertions to ensure session object typing. To be placed in pages/api/auth/[...nextauth].ts or .js (with TS/JS interop), relies on same dependencies. Note the explicit cast for session as { user: unknown }.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\\n\\nexport default NextAuth({\\n  providers: [MoralisNextAuthProvider()],\\n  // adding user info to the user session object\\n  callbacks: {\\n    async jwt({ token, user }) {\\n      if (user) {\\n        token.user = user;\\n      }\\n      return token;\\n    },\\n    async session({ session, token }) {\\n      (session as { user: unknown }).user = token.user;\\n      return session;\\n    },\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Web3 Authentication Service in Unity with Custom Backend\nDESCRIPTION: This C# script handles Web3 authentication in Unity using a custom backend. It manages wallet connection states, creates authentication messages, sends them for signing, and verifies signatures through UnityWebRequests to custom backend endpoints. The class works with both WalletConnect and Web3GL (for WebGL builds).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing UnityEngine;\nusing UnityEngine.Networking;\nusing System.Collections;\nusing UnityEngine.Events;\nusing WalletConnectSharp.Unity;\nusing Cysharp.Threading.Tasks;\n\nusing MoralisUnity.Kits.AuthenticationKit;\n\npublic class MoralisWeb3AuthService : MonoBehaviour\n{\n    [Serializable]\n    public class RequestData\n    {\n        public string id;\n        public string message;\n        public string profileId;\n    }\n\n    private RequestData requestData;\n\n    [Header(\"Events\")]\n    public UnityEvent OnSuccess = new UnityEvent();\n    public UnityEvent OnFailed = new UnityEvent();\n\n    // Main Components\n    private AuthenticationKit authenticationKit;\n    \n    public void Awake()\n    {\n        authenticationKit = FindObjectOfType<AuthenticationKit>(true);\n    }\n\n    public void StateObservable_OnValueChanged(AuthenticationKitState authenticationKitState)\n    {\n        switch (authenticationKitState)\n        {\n            case AuthenticationKitState.WalletConnected:\n\n#if !UNITY_WEBGL\n                // Get the address and chainid with WalletConnect \n                string address = WalletConnect.ActiveSession.Accounts[0];\n                int chainId = WalletConnect.ActiveSession.ChainId;\n#else\n                // Get the address and chainid with Web3 \n                string address = Web3GL.Account().ToLower();\n                int chainId = Web3GL.ChainId();\n#endif\n                // Create sign message \n                StartCoroutine(CreateMessage(address, chainId));\n                break;\n        }\n    }\n\n    IEnumerator CreateMessage(string address, int chainId)\n    {\n        var hexChainId = $\"0x{chainId:X}\";\n\n        WWWForm form = new WWWForm();\n        form.AddField(\"address\", address);\n        form.AddField(\"chain\", hexChainId);\n         \n        using (UnityWebRequest webRequest = UnityWebRequest.Post(\n            ServerConfiguration.URL + ServerConfiguration.RequestEndpoint, form))\n        {\n            yield return webRequest.SendWebRequest();\n\n            switch (webRequest.result)\n            {\n                case UnityWebRequest.Result.ConnectionError:\n                    Debug.LogError(\"Connection Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.DataProcessingError:\n                    Debug.LogError(\"Data Processing Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.ProtocolError:\n                    Debug.LogError(\"Protocol Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.Success:\n                    requestData = JsonUtility.FromJson<RequestData>(webRequest.downloadHandler.text);\n                    Debug.Log(requestData.message);\n\n                    SignMessage(requestData.message);\n                    break;\n            }\n        }\n    }\n\n    private async void SignMessage(string message)\n    {\n        authenticationKit.State = AuthenticationKitState.WalletSigning;\n\n#if !UNITY_WEBGL\n        // Sign the message with WalletConnect\n        string address = WalletConnect.ActiveSession.Accounts[0];\n        string signature = await WalletConnect.ActiveSession.EthPersonalSign(address, message);\n#else\n        // Sign the message with Web3\n        string signature = await Web3GL.Sign(message);\n#endif\n        if (!String.IsNullOrEmpty(signature))\n        {\n            StartCoroutine(Authenticate(message, signature));\n        }\n        else\n        {\n            // If there is no signature fire the OnFailed event\n            OnFailed.Invoke();\n        }\n    }\n\n    IEnumerator Authenticate(string message, string signature)\n    {\n        WWWForm form = new WWWForm();\n        form.AddField(\"message\", message);\n        form.AddField(\"signature\", signature);\n\n        using (UnityWebRequest webRequest = UnityWebRequest.Post(\n            ServerConfiguration.URL + ServerConfiguration.VerifyEndpoint, form))\n        {\n            yield return webRequest.SendWebRequest();\n\n            switch (webRequest.result)\n            {\n                case UnityWebRequest.Result.ConnectionError:\n                    Debug.LogError(\"Connection Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.DataProcessingError:\n                    Debug.LogError(\"Data Processing Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.ProtocolError:\n                    Debug.LogError(\"Protocol Error: \" + webRequest.error);\n                    OnFailed?.Invoke();\n                    break;\n\n                case UnityWebRequest.Result.Success:\n\n                    // If the authentication succeeded the user profile is update and we get the UpdateUserDataAsync return values a response\n                    // If it failed it returns empty\n                    if (!String.IsNullOrEmpty(webRequest.downloadHandler.text))\n                    {\n                        authenticationKit.State = AuthenticationKitState.WalletSigned;\n\n                        // On success fire the OnSuccess event\n                        OnSuccess.Invoke();\n                        Debug.Log(webRequest.downloadHandler.text);\n                    }\n                    else\n                    {\n                        // If the response is empty fire the OnFailed event\n                        OnFailed.Invoke();\n                    }\n\n                    break;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with Access Notes - React (JSX) - JavaScript\nDESCRIPTION: This React snippet renders the ApiReference component, displaying documentation for the Moralis endpoint 'getHottestNFTCollectionsByTradingVolume'. An Admonition block, marked as 'PREMIUM ENDPOINT', warns users that this endpoint requires a Moralis Pro or higher API key, providing an upgrade link and noting the parameterless nature of the API. Key props are passed via config object spreads. Dependencies: Moralis API configuration. Outputs an interactive documentation block for users.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/12-Market Data API/get-top-nft-collections-by-trading-volume.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference\n  {...config[\"market-data\"].getHottestNFTCollectionsByTradingVolume}\n>\n  <Admonition type=\"info\" icon=\"💡\" title=\"PREMIUM ENDPOINT\">\n    <p>\n      To use this API, you will need an API key under a Moralis account with the\n      Pro or above plan. To upgrade your API plan, go to the{\" \"}\n      <Link href=\"https://admin.moralis.com/account/billing\">billing page</Link>{\" \"}\n      in the Moralis Dashboard.\n    </p>\n    <p>\n      This API has no parameter and you can simply use the <b>Try It</b> button\n      to test it out.\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Performing Reverse ENS Lookup via SimpleHash API\nDESCRIPTION: SimpleHash API endpoint URL for performing a reverse lookup, resolving a wallet address to its primary ENS (Ethereum Name Service) domain name.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_33\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/ens/reverse_lookup\n```\n\n----------------------------------------\n\nTITLE: Setting Up Frontend for Solana Tic Tac Toe Game\nDESCRIPTION: Steps to clone the project repository, install dependencies, and set up environment variables for the frontend application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/JohnVersus/solana-dapp-tic-tac-toe.git\n\ncd solana-dapp-tic-tac-toe\n\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Querying eth_maxPriorityFeePerGas Response - JSON\nDESCRIPTION: This snippet displays the JSON-RPC response for eth_maxPriorityFeePerGas with no parameters, providing the current max priority fee per gas in wei as a hexadecimal string. The client must not supply parameters in the request. All output strictly adheres to the JSON-RPC response structure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x3B9ACA00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Page App Routing during Firebase Init (CLI Output)\nDESCRIPTION: Shows the prompt during `firebase init` asking whether to configure Firebase Hosting for a single-page application by rewriting all URLs to `/index.html`. This example shows confirming ('Y') this option.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n? Configure as a single-page app (rewrite all URLs to /index.html)? Y\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering React Components in Docusaurus TypeScript\nDESCRIPTION: This snippet demonstrates how to import a site-specific API banner component written in TypeScript and a documentation card list component in a Docusaurus MDX file. The API banner component is not used directly in the shown code, while the DocCardList component is rendered to display a navigable card-based list in the documentation. Prerequisites include a properly configured Docusaurus environment with the referenced components available at the specified paths. There are no input parameters and no returned output other than rendered UI. The snippet assumes the presence of the custom components and appropriate sidebar configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/token-api/token-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Solana Dapp\nDESCRIPTION: Example of environment variables required for the Solana Dapp, including chain ID, domain, API keys, and authentication settings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nAPP_CHAIN_ID=devnet\nAPP_DOMAIN=ethereum.boilerplate \nMORALIS_API_KEY= xxx\nNEXTAUTH_SECRET= # Linux: `openssl rand -hex 32` or go to https://generate-secret.now.sh/64\nNEXTAUTH_URL=http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Generated package.json for Blockchain Bot Project\nDESCRIPTION: The initial package.json file created for the blockchain bot project, containing basic project metadata.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"blockchainbot\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"MIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation and UI Components in React (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates importing React documentation/layout components, configuration files, and UI utilities for building a web3 API reference documentation page. All imported modules—including ApiReference, Admonition, Link, and a JSON configuration—are leveraged for rendering structured API docs, custom banners, and interactive references. Dependencies required include React, Docusaurus Doc components, and relevant project config/assets.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/defi-api/01-Get Wallet DeFi Positions/get-defi-positions-summary.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv using Yarn\nDESCRIPTION: Installs the 'dotenv' package using the Yarn package manager. Similar to the npm command, this prepares a Node.js project to load environment variables from a '.env' file for secure configuration management.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n## Read more about Dotenv at https://www.npmjs.com/package/dotenv\nyarn add dotenv\n```\n\n----------------------------------------\n\nTITLE: Example Metaplex Collection Metadata Structure in JSON\nDESCRIPTION: Illustrates the typical JSON structure for the 'collection' object returned for a Metaplex-standard Solana NFT via endpoints like `getNFTMetadata`, `getPortfolio`, or `getNFTs` (with `nftMetadata=true`). It includes fields like collection address, name, description, image URL, external URL, Metaplex mint address, and seller fee basis points.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/nft-api-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"collection\": {\n  \"collectionAddress\": \"J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w\",\n  \"name\": \"Mad Lads\",\n  \"description\": \"Fock it.\",\n  \"imageOriginalUrl\": \"https://madlads.s3.us-west-2.amazonaws.com/images/7256.png\",\n  \"externalUrl\": \"https://madlads.com\",\n  \"metaplexMint\": \"J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w\",\n  \"sellerFeeBasisPoints\": 500\n}\n```\n\n----------------------------------------\n\nTITLE: Getting NFT Metadata with JavaScript Using Moralis API\nDESCRIPTION: This code snippet demonstrates how to use the Moralis JavaScript SDK to retrieve NFT metadata. It initializes the Moralis SDK with an API key, specifies the NFT contract address, blockchain, and token ID, and then calls the getNFTMetadata endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/02-NFT Metadata/how-to-get-the-metadata-of-an-nft.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const tokenId = \"3931\";\n\n  const response = await Moralis.EvmApi.nft.getNFTMetadata({\n    address,\n    chain,\n    tokenId,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Transactions with Moralis Block API in Python\nDESCRIPTION: This Python code snippet demonstrates how to use the Moralis SDK to fetch all transactions from a specific block on the Ethereum blockchain, including internal transactions, using the getBlock endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"block_number_or_hash\": \"15863321\",\n    \"chain\": \"eth\", \n    \"include\": \"internal_transactions\", \n}\n\nresult = evm_api.block.get_block(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Data with Moralis Web3 API Response\nDESCRIPTION: This JSON response represents the result of querying NFT data using the Moralis Web3 API. It includes pagination details and an array of NFT tokens with their associated metadata.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 512,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsidG9rZW5BZGRyZXNzIjoiMHhkNGU0MDc4Y2EzNDk1ZGU1YjFkNGRiNDM0YmViYzVhOTg2MTk3NzgyIn0sImtleXMiOlsiMTY1MzUxNDU1OS4yNDIiXSwid2hlcmUiOnsidG9rZW5fYWRkcmVzcyI6IjB4ZDRlNDA3OGNhMzQ5NWRlNWIxZDRkYjQzNGJlYmM1YTk4NjE5Nzc4MiJ9LCJsaW1pdCI6MTAwLCJvZmZzZXQiOjAsIm9yZGVyIjpbXSwidG90YWwiOjUxMiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2ODAzNDg2fQ.i2E2SDeatbnmmxe3Qbhh86jd_aWypQKs8Svpr5disZ4\",\n  \"result\": [\n    {\n      \"token_address\": \"0xd4e4078ca3495de5b1d4db434bebc5a986197782\",\n      \"token_id\": \"17\",\n      \"owner_of\": \"0x8e232860171762f6ff2d22d1fcc45af78bd3fbb5\",\n      \"block_number\": \"15791552\",\n      \"block_number_minted\": \"7516983\",\n      \"token_hash\": \"98e881f3d1052b7ca90fb91b898baa0f\",\n      \"amount\": \"1\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Autoglyphs\",\n      \"symbol\": \"☵\",\n      \"token_uri\": \"data:text/plain;charset=utfn      \"metadata\": null,\n      \"last_token_uri_sync\": \"2022-08-04T16:48:25.721Z\",\n      \"last_metadata_sync\": \"2022-08-04T16:48:58.389Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0xd4e4078ca3495de5b1d4db434bebc5a986197782\",\n      \"token_id\": \"23\",\n      \"owner_of\": \"0x8e232860171762f6ff2d22d1fcc45af78bd3fbb5\",\n      \"block_number\": \"15791549\",\n      \"block_number_minted\": \"7516996\",\n      \"token_hash\": \"3c1ad6384b0bea044ff67ca1b949f6d9\",\n      \"amount\": \"1\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Autoglyphs\",\n      \"symbol\": \"☵\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting TicTacToe Move via Solana Next.js API (TypeScript)\nDESCRIPTION: This Next.js API route handler (`playGame.ts`) facilitates submitting a player's move in the TicTacToe game on Solana. It takes player addresses, the player making the move (`gamePlayer`), and the move details (`move`) as input. It determines the game account public key using `createWithSeed` and sends a transaction with an instruction (data: `[1, gamePlayer, move]`) to update the game state. The transaction is signed server-side using the owner's private key. It depends on `@solana/web3.js` and `bs58`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  Connection,\n  clusterApiUrl,\n  Keypair,\n  PublicKey,\n  Transaction,\n  SystemProgram,\n  sendAndConfirmTransaction,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport base58 from 'bs58';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { OWNER_PRIVATE_KEY } = process.env;\n  const { player1, player2, gamePlayer, move } = req.body;\n  if (!OWNER_PRIVATE_KEY) {\n    throw new Error('Add Owner private key in env file.');\n  }\n  const key = Uint8Array.from(base58.decode(OWNER_PRIVATE_KEY));\n  const keypair = Keypair.fromSecretKey(key);\n  const { publicKey } = keypair;\n\n  const Player1 = player1;\n  const Player2 = player2;\n  const programId = process.env.NEXT_PUBLIC_PROGRAM_ID;\n  if (!programId) {\n    throw new Error('Add Program Id in env file.');\n  }\n  const connection = new Connection(clusterApiUrl('devnet'));\n\n  const GAME_ACCOUNT_SECRET = `${player1.substring(0, 5)}${player2.substring(0, 5)}`;\n\n  const GameDataAccountPubkey = await PublicKey.createWithSeed(\n    publicKey,\n    GAME_ACCOUNT_SECRET,\n    new PublicKey(programId),\n  );\n\n  const transaction = new Transaction();\n  transaction.add(\n    new TransactionInstruction({\n      keys: [\n        {\n          pubkey: GameDataAccountPubkey,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: new PublicKey(Player1),\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: new PublicKey(Player2),\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: publicKey,\n          isSigner: true,\n          isWritable: false,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      ],\n      programId: new PublicKey(programId),\n      data: Buffer.from([1, gamePlayer, move]),\n    }),\n  );\n\n  const {\n    context: { slot: minContextSlot },\n    value: { blockhash, lastValidBlockHeight },\n  } = await connection.getLatestBlockhashAndContext();\n\n  try {\n    const signature = await sendAndConfirmTransaction(connection, transaction, [keypair], {\n      minContextSlot,\n      skipPreflight: true,\n      preflightCommitment: 'processed',\n    });\n    const confirmtx = await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n    const data = await connection.getParsedTransaction(signature);\n\n    res.status(200).json(data?.meta?.logMessages);\n  } catch (error) {\n    if (error instanceof Error) {\n      res.status(400).send(error.message);\n      console.error(error.message);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get ERC20 Transfers using Python\nDESCRIPTION: Python implementation to fetch ERC20 token transfers for a specific wallet address using Moralis API. Requires moralis package. Takes wallet address and chain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-erc20-transfers-by-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_wallet_token_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Disable Totals with Moralis API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to implement the Disable Totals feature in JavaScript by setting the disableTotal parameter to true when making a getWalletNFTs API call to Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-02-01-breaking-change.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\ntry {\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = \"eth\";\n\n  const disableTotal = true;\n\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n    disableTotal,\n  });\n\n  console.log(response?.result);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Commands to create a new Node.js project and install required packages ethers.js and dotenv.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-erc20-balances.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new Node.js project\nmkdir erc20-balance-fetcher\ncd erc20-balance-fetcher\nnpm init -y\n\n# Install ethers.js and dotenv\nnpm install ethers dotenv\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component (JSX)\nDESCRIPTION: This JSX snippet demonstrates how the `ApiReference` component is used within the Markdown file. It passes configuration data (`config.nft.getNFTOwners`) to the component, which then renders the detailed documentation for the 'getNFTOwners' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/05-Get NFT Owners/get-nft-owners.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTOwners} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Normalized NFT Metadata using TypeScript\nDESCRIPTION: Example of retrieving normalized NFT metadata using Moralis TypeScript SDK. Demonstrates type-safe implementation using the getNFTMetadata endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/02-NFT API/02-NFT Metadata FAQs/metadata-normalization.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\nconst tokenId = \"1\";\n\nawait Moralis.start({\n  apiKey: \"<YOUR_API_KEY>\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.nft.getNFTMetadata({\n  address,\n  chain,\n  tokenId,\n  normalizeMetadata: true,\n});\n\nconsole.log(response.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Importing React Component and Configuration for API Reference in JavaScript\nDESCRIPTION: This JavaScript code imports necessary modules using ES6 import syntax. It imports the `ApiReference` React component from a local source, which is responsible for rendering API documentation UI. It also imports a `config` object from a JSON file (`configsV2.json`), containing the specific API definition data needed by the component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/20-Utils/contract-review.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Rust Library Project for Solana Micro Blogger\nDESCRIPTION: Commands to create a new Rust library project for the Solana Micro Blogger smart contract.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo init micro_blog --lib\n\ncd micro_blog\n```\n\n----------------------------------------\n\nTITLE: Handling Complex Struct Inputs in Solidity for Triggers\nDESCRIPTION: Shows a Solidity contract `ComplexContract` with a `Human` struct and a `getFriends` function that takes a `Human` struct as input. This example illustrates how to format trigger `inputs` when dealing with complex data types like structs in Solidity, requiring an array of strings for the struct's fields. Example input format: `inputs: [[\"Joe\", \"25\", \"$from\"]]`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ComplexContract {\n\n  struct Human {\n    string name;\n    int age;\n    address user;\n  }\n\n  mapping(address => Human[]) friends;\n\n\tfunction getFriends(Human memory human) public view returns(Human[] memory friend) {\n    return (friends[human.user]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Rate Limiting Middleware to a Proxy Function in TypeScript\nDESCRIPTION: This snippet shows how to apply the IP rate limiting middleware to the getBlock Firebase Cloud Function. The ipRateLimiter instance (created using ipRateLimiterMiddleware) wraps the async handler, ensuring that all incoming requests are subject to per-IP quota checks before executing the Moralis API logic. Dependencies and constraints as per prior context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst ipRateLimiter = ipRateLimiterMiddleware(firestore);\n\nexport const getBlock = functions.https.onCall(ipRateLimiter(async (data: GetBlockData) => {\n  const response = await Moralis.EvmApi.block.getBlock(...);\n  // ...\n}));\n```\n\n----------------------------------------\n\nTITLE: ERC20 \"balanceOf\" Function ABI Definition - JSON\nDESCRIPTION: Shows how to define the standard ERC20 'balanceOf' function ABI in JSON format, designed for use in the Moralis Admin Panel or similar tools. Specifies one address input named 'owner' and a single unnamed output of type 'uint256'. No dependencies required other than adhering to the Ethereum ABI specification for use with smart contract calls or APIs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"constant\": true,\n  \"inputs\": [\n    {\n      \"name\": \"owner\",\n      \"type\": \"address\"\n    }\n  ],\n  \"name\": \"balanceOf\",\n  \"outputs\": [\n    {\n      \"name\": \"\",\n      \"type\": \"uint256\"\n    }\n  ],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Addresses from a Moralis Stream using JavaScript\nDESCRIPTION: This snippet illustrates how to fetch all addresses currently associated with a specific Moralis stream using the `Moralis.Streams.getAddresses` method. It requires the Moralis SDK and the stream's `id`. An optional `limit` parameter can be provided to control the number of addresses returned per request. The operation is asynchronous.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/monitor-multiple-addresses.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Get all addresses\nawait Moralis.Streams.getAddresses({\n  id,\n  limit,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering the API Reference with Configuration and Admonition - React - JavaScript/JSX\nDESCRIPTION: This snippet renders an API reference for the wallet transactions endpoint, injecting configuration via props. It also displays an info Admonition highlighting a newer endpoint for enriched wallet history data, complete with a link. Prerequisites: Docusaurus site configuration, relevant React components, and the referenced configuration object. Inputs: config.transaction.getWalletTransactionsVerbose. Outputs: rendered documentation UI elements. Limitations: Assumes all imported modules exist and are compatible.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-wallet-transactions-verbose.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.transaction.getWalletTransactionsVerbose}>\n  <Admonition type=\"info\" title=\"New Endpoint Available 🤩\">\n    <p>\n      Check-out our newest transactions endpoint, <b><a href=\"/web3-data-api/evm/reference/wallet-api/get-wallet-history\">Wallet History</a></b>, to fetch decoded transactions by wallet, fully enriched with metadata, labels and categories (such as Mints, Burns, Swaps etc).\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Invoking GetNativeBalance Lambda from GameSparks Cloud Code\nDESCRIPTION: This GameSparks Cloud Code snippet defines the request handler for the `GetNativeBalance` message. It invokes an AWS Lambda function named `aws-node-project-dev-getNativeBalance`, passing the `address` and `chain` from the incoming message payload. It logs the Lambda response payload for debugging and returns the `result` field from the payload, parsed as a float, within the GameSparks message response. Requires the GameSparks environment and a configured Lambda function.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/aws-gamesparks-integration-with-unity.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = GameSparks().Lambda(\"aws-node-project-dev-getNativeBalance\").Invoke(\n    {\n      // Example of how you would send a parameter to Lambda\n      \"address\": message.address,\n      \"chain\": message.chain\n    }\n);\n\nGameSparks().Logging().Debug(\"Result from Lambda is:\");\nGameSparks().Logging().Debug(JSON.stringify(response.Payload));\n\nreturn GameSparks().Messaging().Response({\"result\": parseFloat(response.Payload.result)});\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Moralis API Resolver in NextJS\nDESCRIPTION: Creates the NextJS API route handler for Moralis. This code should be placed in `pages/api/moralis/[...moralis].ts` (or `.js`). It utilizes `MoralisNextApi` from `@moralisweb3/next`, passing the `MORALIS_API_KEY` from environment variables to securely handle Moralis API requests on the server-side.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\n\nexport default MoralisNextApi({ apiKey: process.env.MORALIS_API_KEY });\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Portfolio Balance with TypeScript\nDESCRIPTION: TypeScript implementation using Moralis SDK to retrieve Solana portfolio balance. Includes type safety and uses the same core functionality as the JavaScript version.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/balance-api/how-to-get-solana-portfolio-balance-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getPortfolio({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Phantom (Solana) Authentication Implementation\nDESCRIPTION: Code for implementing Phantom wallet authentication for Solana, including custom provider configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signInWithMoralis } from '@moralisweb3/client-firebase-sol-auth';\n\nawait signInWithMoralis(moralisAuth);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signInWithMoralis } from '@moralisweb3/client-firebase-sol-auth';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\nconst provider = /* ... */\n\nawait signInWithMoralis(moralisAuth, {\n  provider\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK for Node.js\nDESCRIPTION: Instructions for installing the Moralis SDK using npm for Node.js projects.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Block Number in JavaScript\nDESCRIPTION: This JavaScript snippet uses Moralis SDK to retrieve the closest block to a specific date using the getDateToBlock endpoint. It accepts a date in any format supported by moment.js and optionally specifies the blockchain to query.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const date = \"2023-07-05\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getDateToBlock({\n    date,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing Moralis SDK\nDESCRIPTION: Imports the Moralis SDK in the main page component. This provides access to Moralis API functionality for fetching blockchain data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from 'moralis';\n```\n\n----------------------------------------\n\nTITLE: Implementing Follow Function\nDESCRIPTION: Handles the follow action by connecting wallet and executing the follow contract function.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nasync function follow() {\n  if (isConnected) {\n    await disconnectAsync();\n  }\n  await connectAsync({\n    connector: new MetaMaskConnector({}),\n  });\n\n  write();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Sushiswap V2 Pair Address in Python\nDESCRIPTION: Python implementation for retrieving a Sushiswap V2 pair address using Moralis DeFi API. Requires Moralis evm_api. Takes token0 (WETH) and token1 (LINK) addresses as inputs and returns pair address details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"exchange\": \"sushiswapv2\",\n    # token 0 address, e.g. WETH token address\n    \"token0_address\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    # token 1 address, e.g. LINK token address\n    \"token1_address\": \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.defi.get_pair_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Reverse ENS Resolution in Python\nDESCRIPTION: Python implementation for resolving ENS names from Ethereum addresses using Moralis API. Requires the moralis package. Returns the ENS name associated with the provided address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-name.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n  \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n}\n\nresult = evm_api.resolve.resolve_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Endpoint in Express\nDESCRIPTION: POST endpoint that verifies signed messages using Moralis Auth. Takes message and signature parameters from request body.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/verify\", async (req, res) => {\n    try {\n      const data = await verify(req.body.message, req.body.signature)\n      res.status(200)\n      res.json(data)\n \n    } catch (error) {\n      // Handle errors\n      console.error(error)\n      res.status(500)\n      res.json({ error: error.message })\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for getNFTTokenIdOwners\nDESCRIPTION: This code snippet renders the ApiReference component with the configuration for the getNFTTokenIdOwners endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/05-Get NFT Owners/get-nft-token-id-owners.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTTokenIdOwners} />\n```\n\n----------------------------------------\n\nTITLE: Endpoints Table Structure - NFT Rarity Integration Endpoints\nDESCRIPTION: Table showing existing API endpoints that have been enhanced with NFT rarity data functionality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/02-NFT API/nft-rarity-faqs.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                         | Endpoint                         | API Reference                                                                |\n| ---------------------------- | -------------------------------- | ---------------------------------------------------------------------------- |\n| Get NFTs by Wallet           | `/:address/nfts`                 | [Method Documentation](/web3-data-api/evm/reference/get-wallet-nfts)         |\n| Get NFTs by Collection       | `/nft/:address`                  | [Method Documentation](/web3-data-api/evm/reference/get-contract-nfts)       |\n| Get NFT Owners by Collection | `/nft/:address/owners`           | [Method Documentation](/web3-data-api/evm/reference/get-nft-owners)          |\n| Get NFT Owners by Token Id   | `/nft/:address/:token_id/owners` | [Method Documentation](/web3-data-api/evm/reference/get-nft-token-id-owners) |\n| Get NFT Metadata             | `/nft/:address/:token_id`        | [Method Documentation](/web3-data-api/evm/reference/get-nft-metadata)        |\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project with NPM\nDESCRIPTION: Creates a new Node.js project by generating a package.json file with default values.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for Solana Program\nDESCRIPTION: TOML configuration for the Rust library, specifying the crate type for Solana program compilation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\nname = \"micro_blog\"\ncrate-type = [\"cdylib\", \"lib\"]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Documentation Components - React/JavaScript\nDESCRIPTION: This snippet imports several React components and a configuration JSON that are utilized to build out the API reference page for the eth_getLogs RPC endpoint. Dependencies include the Moralis documentation site's custom components (@site/src/components/ApiReference, @theme/Admonition), the Docusaurus Link component, and a local configuration JSON. These imports are foundational in composing the API documentation and are prerequisites for any customized rendering or routing associated with the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getLogs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI using npm (Shell)\nDESCRIPTION: Installs the Firebase command-line interface (CLI) globally using the Node Package Manager (npm). This tool is required for managing Firebase projects from the terminal. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Complete Express Server Setup\nDESCRIPTION: Full server setup including imports, middleware, and constants configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\")\nconst cors = require('cors')\nconst Moralis = require(\"moralis\").default\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\")\n\nconst app = express()\nconst port = 3000\n\n// Use CORS\napp.use(cors())\n\n// Using express.urlencoded middleware\napp.use(express.urlencoded({\n  extended: true\n}))\n\n// Values set in the backend\nconst MORALIS_API_KEY = \"Your Moralis API Key\"\nconst NETWORK = \"evm\";\n```\n\n----------------------------------------\n\nTITLE: Looking up an ENS domain using the Moralis Resolve API\nDESCRIPTION: This API call demonstrates how to resolve an ENS domain to its corresponding Ethereum address using the Moralis Resolve API. The endpoint requires appending the ENS domain name to the base URL path.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2023-04-03-ens-domain-lookup.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v2/resolve/ens/vitalik.eth\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm (Bash)\nDESCRIPTION: Installs routing and HTTP client dependencies required for the React dapp. Runs npm install to add 'react-router-dom' for routing and 'axios' for HTTP requests. Needs package.json present; output is installed modules in node_modules.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-router-dom axios\n```\n\n----------------------------------------\n\nTITLE: Fetching EVM NFT Trades by Wallet using Moralis API\nDESCRIPTION: Moralis API endpoint (v2.2) for retrieving NFT trades associated with a specific EVM wallet address. Requires the wallet `address` as a path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/wallets/:address/nfts/trades\n```\n\n----------------------------------------\n\nTITLE: Initializing Express Application - JavaScript\nDESCRIPTION: Initializes a basic Express application listening on port 8080 with CORS enabled. The root endpoint returns a 'Hello World!' response. Dependencies: express, cors. Main parameters: none. Outputs server log and basic HTTP response. No authentication or error handling present.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express')\nconst cors = require('cors')\nconst app = express()\nconst port = 8080\n\napp.use(cors())\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK via Pip\nDESCRIPTION: This command installs the Moralis SDK using Pip, the package installer for Python. It requires Python and Pip to be installed. This is used for Python-based projects interacting with Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/getting-started/get-your-api-key.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install moralis\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Solana NFT Burner\nDESCRIPTION: Example of the .env.local file content, including chain ID, Moralis API key, and other necessary configuration variables.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-burner.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# devnet is used for chain Id as we will be testing the app on devnet chain\nAPP_CHAIN_ID=devnet\nAPP_DOMAIN=ethereum.boilerplate\n\n# Get your KEY https://admin.moralis.com/web3api\nMORALIS_API_KEY= xxx\n\n# Linux: `openssl rand -hex 32` or go to https://generate-secret.now.sh/64\nNEXTAUTH_SECRET= xxx\n\n# Replace for production\nNEXTAUTH_URL=http://localhost:3000\n\n# Wallet private only if you want to use the NFT Minter page.\nPRIVATE_KEY = xxx\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Pair Statistics via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve statistics for a specific token pair address using the Moralis Web3 API v2.2. The ':address' parameter should be replaced with the pair's contract address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2//pairs/:address/stats\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Portfolio Balance using Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to utilize the Moralis SDK to retrieve the portfolio balance of a Solana wallet address. It starts the Moralis SDK with an API key, defines the wallet address and network (MAINNET), and then invokes `Moralis.SolApi.account.getPortfolio`. The response object, detailing token, NFT, and native balances, is printed to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/balance-api/how-to-get-solana-portfolio-balance-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getPortfolio({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Streams API Reference with GetStats Configuration in JSX\nDESCRIPTION: This snippet renders the ApiReference React component, passing in the Streams API 'GetStats' configuration as props. The main dependency is the correctly shaped config object with method details for 'GetStats'. The output is a UI section in the documentation displaying stats retrieval usage. Inputs are destructured props; no local state or additional processing is done.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/03-Stats/get-stats.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.streams.GetStats} />\n```\n\n----------------------------------------\n\nTITLE: Installing Parse Server Dependencies\nDESCRIPTION: Commands to install required packages for Parse Server and dashboard setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add parse-server\nyarn add parse-dashboard\nyarn add moralis\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Guides Component in JSX\nDESCRIPTION: This code snippet imports a Guides component from a specific path and renders it within the page. The component is likely responsible for displaying the actual development guide content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Guides from '@site/src/components/Guides';\n\n<Guides />\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for getPairAddress Endpoint\nDESCRIPTION: This JSON object illustrates the expected response structure when successfully calling the `getPairAddress` endpoint of the Moralis DeFi API for a Uniswap V3 pool (e.g., LINK/WETH). It includes detailed information about both `token0` and `token1` (address, name, symbol, decimals, logos, etc.) and the `pairAddress` which is the contract address of the liquidity pool.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-uniswap-v3-pair-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"token0\": {\n    \"address\": \"0x514910771af9ca656af840dff83e8264ecf986ca\",\n    \"name\": \"Chain Link\",\n    \"symbol\": \"LINK\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca.webp\",\n    \"logo_hash\": \"fd74ea1227adb458733847c09aab05d89c35c14b640c5ee1e0a8bffa79193eb4\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  \"token1\": {\n    \"address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"name\": \"Wrapped Ether\",\n    \"symbol\": \"WETH\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.webp\",\n    \"logo_hash\": \"0a7fc292596820fe066ce8ce3fd6e2ad9d479c2993f905e410ef74f2062a83ec\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  \"pairAddress\": \"0xa6cc3c2531fdaa6ae1a3ca84c2855806728693e8\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Rate Limit Cost for syncNFTContract Endpoint in JSON\nDESCRIPTION: This JSON snippet shows the rate limit details for the syncNFTContract API endpoint. It indicates that this endpoint costs 25 CUs (Cost Units) per call and has a price of 5.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/resources/04-rate-limits.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"syncNFTContract\",\n  \"path\": \"/nft/{address}/sync\",\n  \"price\": 5,\n  \"rateLimitCost\": 25\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Response Format\nDESCRIPTION: Sample JSON response from the Moralis API showing aggregated token pair statistics including total liquidity, active pairs, and active DEXes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-aggregated-token-pair-stats.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total_liquidity_usd\": 1184543489313.2297,\n  \"total_active_pairs\": 217,\n  \"total_active_dexes\": 163\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding API Reference in Markdown - JavaScript/JSX\nDESCRIPTION: Renders the ApiReference React component in the documentation, spreading the configuration object specific to the 'verifyChallengeSolana' API method. All endpoint details and parameters are derived dynamically from the imported config. This expects the configsV2.json schema to have an 'auth.verifyChallengeSolana' property. Inputs include the destructured configuration object; the output is an embedded, interactive API documentation component for Solana challenge verification.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/reference/02-Challenge/verify-challenge-solana.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.auth.verifyChallengeSolana} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component with Configuration\nDESCRIPTION: React/JSX code that imports and renders an API reference component with configuration for the getAddresses authentication endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/reference/03-Profiles/get-addresses.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.auth.getAddresses} />\n```\n\n----------------------------------------\n\nTITLE: Defining Lens Profile GraphQL Query\nDESCRIPTION: GraphQL query schema for fetching profile information from the Lens Protocol. It requests details like name, bio, profile picture, stats, and other attributes for a specific profile ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Profile = `\nquery Profile {\n  profile(request: { profileId: \"0x09\" }) {\n    id\n    name\n    bio\n    attributes {\n      displayType\n      traitType\n      key\n      value\n    }\n    followNftAddress\n    metadata\n    isDefault\n    picture {\n      ... on NftImage {\n        contractAddress\n        tokenId\n        uri\n        verified\n      }\n      ... on MediaSet {\n        original {\n          url\n          mimeType\n        }\n      }\n      __typename\n    }\n    handle\n    coverPicture {\n      ... on NftImage {\n        contractAddress\n        tokenId\n        uri\n        verified\n      }\n      ... on MediaSet {\n        original {\n          url\n          mimeType\n        }\n      }\n      __typename\n    }\n    ownedBy\n    dispatcher {\n      address\n      canUseRelay\n    }\n    stats {\n      totalFollowers\n      totalFollowing\n      totalPosts\n      totalComments\n      totalMirrors\n      totalPublications\n      totalCollects\n    }\n    followModule {\n      ... on FeeFollowModuleSettings {\n        type\n        amount {\n          asset {\n            symbol\n            name\n            decimals\n            address\n          }\n          value\n        }\n        recipient\n      }\n      ... on ProfileFollowModuleSettings {\n        type\n      }\n      ... on RevertFollowModuleSettings {\n        type\n      }\n    }\n  }\n}\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Axelarscan Transaction Link Button - React/JavaScript\nDESCRIPTION: This snippet shows how to add a \"View Transaction\" button to the frontend that triggers the viewTx() function when clicked. It uses a simple React Button element with an onClick handler. No external dependencies are required aside from React, and the button triggers UI logic defined elsewhere. The primary input is a click from the user; there are no output values other than the function's side effects.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Button onClick={() => viewTx()}>View Transaction</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Guides Component in JSX\nDESCRIPTION: This code snippet imports a custom 'Guides' component from a specific path and renders it within the page. The component is likely responsible for displaying a collection of development guides.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Guides from '@site/src/components/Guides';\n\n<Guides />\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Security Rules for Moralis Streams\nDESCRIPTION: These Firestore security rules are essential for safeguarding data written by the Moralis Streams extension. They permit read access to documents under the `moralis` path structure (`moralis/{collectionType}/{collectionName}/{id}`) but strictly forbid write access from external users, thereby maintaining data integrity.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/integrations/firebase.md#2025-04-23_snippet_1\n\nLANGUAGE: firestore\nCODE:\n```\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /moralis/{collectionType}/{collectionName}/{id} {\n      allow read;\n      allow write: if false;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component for EVM Streams API\nDESCRIPTION: This code imports the ApiReference component and configuration data to render the API documentation for the GetStreams endpoint in the Moralis Streams API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/get-streams.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n# Get streams\n\n<ApiReference {...config.streams.GetStreams} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component - React - TypeScript\nDESCRIPTION: This snippet shows how to import the ApiReference component from the documentation site's React source components, as well as a configuration object containing API reference details. The import statements set up access to the reference rendering utility and its configuration so the page can dynamically display API documentation. Both imports are prerequisites for rendering the NFT transfer endpoint reference.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-nft-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Owners for a Specific NFT using SimpleHash API\nDESCRIPTION: SimpleHash API endpoint to retrieve the owners of a specific NFT, identified by its chain, contract address, and token ID. Requires `chain`, `contract_address`, and `token_id` as path parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/owners/{chain}/{contract_address}/{token_id}\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration object for the getNFTTransfers API endpoint. It then renders the ApiReference component with the specific configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/03-Get NFT Transfers/get-nft-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.nft.getNFTTransfers} />\n```\n\n----------------------------------------\n\nTITLE: Sample Endpoint Weights JSON Response\nDESCRIPTION: Example JSON response from the endpointWeights API call showing the compute unit costs for different endpoints. It includes the endpoint name, path, price (billing cost), and rateLimitCost for rate limiting purposes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/resources/05-compute-units-cu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"endpoint\": \"getBlock\",\n    \"path\": \"/block/{block_number_or_hash}\",\n    \"price\": 5,\n    \"rateLimitCost\": 5\n  },\n  {\n    \"endpoint\": \"getContractEvents\",\n    \"path\": \"/{address}/events\",\n    \"price\": 2,\n    \"rateLimitCost\": 2\n  },\n  {\n    \"endpoint\": \"getTransactions\",\n    \"path\": \"/transaction/{transaction_hash}\",\n    \"price\": 1,\n    \"rateLimitCost\": 3\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Embedding API Reference Configuration - JSX JavaScript\nDESCRIPTION: This snippet embeds the ApiReference component, passing dynamically-loaded configuration referencing the EVM getEntityCategories API endpoint. Developers should ensure the config.entities.getEntityCategories field is populated in the imported JSON configuration. This component renders the interactive API reference documentation for consumers, aiding integration with the Moralis Web3 Data API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/02- Get Entity Categories/get-entity-categories.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.entities.getEntityCategories} />\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with MoralisNextAuthProvider in JavaScript\nDESCRIPTION: Set up NextAuth in a JavaScript file, integrating MoralisNextAuthProvider and configuring callbacks for JWT and session management.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\n\nexport default NextAuth({\n  providers: [MoralisNextAuthProvider()],\n  // adding user info to the user session object\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      session.user = token.user;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing State Variables for Remote Deployment in React\nDESCRIPTION: This snippet shows the initialization of state variables within a React functional component `DeployTokenRemotely` using the `useState` hook. It sets up state for `sourceChain`, `destinationChain`, and `saltValue`, which are needed to collect user input or configuration for deploying an Interchain Token to a remote chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst DeployTokenRemotely = () = >{\n  //...\n  const[sourceChain, setSourceChain] = useState < string > ('');\n  const[destinationChain, setDestinationChain] = useState < string > ('');\n  const[saltValue, setSaltValue] = useState < string > ('');\n  //...\n}\n\n```\n\n----------------------------------------\n\nTITLE: ERC20 Transfer Event ABI Definition\nDESCRIPTION: JSON ABI definition for ERC20 Transfer, Pause and Unpause events\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n      { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  { \"anonymous\": false, \"inputs\": [], \"name\": \"Pause\", \"type\": \"event\" },\n  { \"anonymous\": false, \"inputs\": [], \"name\": \"Unpause\", \"type\": \"event\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample NFT Owner Query Response in JSON\nDESCRIPTION: This snippet displays a sample JSON response from the Moralis NFT API when requesting owner data for a specific NFT. The response includes metadata such as total results, pagination, contract and token details, the current owner's address, and token metadata. This sample output is for demonstration purposes to show the structure and expected fields of a successful API result.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owner-of-an-nft.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 1,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": null,\n  \"result\": [\n    {\n      \"token_address\": \"0xa186d739ca2b3022b966194004c6b01855d59571\",\n      \"token_id\": \"1\",\n      \"owner_of\": \"0xc81082690edc8cde6d83a7549aa6a74534305372\",\n      \"block_number\": \"15821471\",\n      \"block_number_minted\": \"15821471\",\n      \"token_hash\": \"c4940b74fa9c9e1605316dc98f4a3eb3\",\n      \"amount\": \"1\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"NFTPass\",\n      \"symbol\": \"ATTPASS\",\n      \"token_uri\": \"https://metadata.atticc.xyz/1\",\n      \"metadata\": \"{\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Name\\\",\\\"value\\\":\\\"Atticc Early Adopter Pass\\\"},{\\\"trait_type\\\":\\\"Category\\\",\\\"value\\\":\\\"Early Adopter Pass\\\"},{\\\"trait_type\\\":\\\"Number of Seats\\\",\\\"value\\\":\\\"5555\\\",\\\"display_type\\\":\\\"number\\\"},{\\\"trait_type\\\":\\\"Royalty\\\",\\\"value\\\":\\\"0\\\",\\\"display_type\\\":\\\"number\\\"}],\\\"image\\\":\\\"https://media.atticc.xyz/Pass1.webp\\\"}\",\n      \"last_token_uri_sync\": \"2022-10-25T00:21:22.266Z\",\n      \"last_metadata_sync\": \"2022-10-25T00:21:26.139Z\",\n      \"minter_address\": \"0xc81082690edc8cde6d83a7549aa6a74534305372\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying EVM Block Data with Moralis API - JSON Response Example\nDESCRIPTION: This snippet presents the full response from the Moralis Web3 Block API after querying an Ethereum block by block number. The JSON object includes detailed information such as block hash, block number, timestamp, transaction receipts, logs, and transfer indexes. It demonstrates the API's output format, which is useful for developers integrating block data into their applications or for debugging purposes. Dependencies: Moralis Web3 Block API; Inputs: block number; Output: detailed JSON block data object; Limitation: The example shows a static response for block 15863321.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-content-by-block-number.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"receipt_cumulative_gas_used\": \"6580599\",\n      \"receipt_gas_used\": \"4528426\",\n      \"receipt_contract_address\": \"0x60bb1e2aa1c9acafb4d34f71585d7e959f387769\",\n      \"receipt_root\": null,\n      \"receipt_status\": \"1\",\n      \"block_timestamp\": \"2022-10-30T20:39:11.000Z\",\n      \"block_number\": \"15863321\",\n      \"block_hash\": \"0x4f5d3bb78f0311301ef282b281d23e178ced236a7ae465820fe6edeba609954a\",\n      \"transfer_index\": [15863321, 22],\n      \"logs\": [\n        {\n          \"log_index\": \"52\",\n          \"transaction_hash\": \"0x0559064f1d2a665fd8e69eccf9d81c8276d77bfab4dd256e761fd74aa49d33c2\",\n          \"transaction_index\": \"22\",\n          \"address\": \"0x60bb1e2aa1c9acafb4d34f71585d7e959f387769\",\n          \"data\": \"0x\",\n          \"topic0\": \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\",\n          \"topic1\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n          \"topic2\": \"0x00000000000000000000000023d7013e59e2bc06e29fef6168c7aa4005f30e1f\",\n          \"topic3\": null,\n          \"block_timestamp\": \"2022-10-30T20:39:11.000Z\",\n          \"block_number\": \"15863321\",\n          \"block_hash\": \"0x4f5d3bb78f0311301ef282b281d23e178ced236a7ae465820fe6edeba609954a\",\n          \"transfer_index\": [15863321, 22, 52],\n          \"transaction_value\": \"0\"\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Cloud Function for Balance Query\nDESCRIPTION: TypeScript code defining a Firebase Cloud Function that queries wallet balance using Moralis API\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nexport interface GetBalanceData {\n  address: string;\n}\n\nexport const getBalance = functions.https.onCall(\n  async (data: GetBalanceData) => {\n    const result = await Moralis.EvmApi.balance.getNativeBalance({\n      chain: EvmChain.ETHEREUM,\n      address: data.address,\n    });\n    return {\n      balance: result.result.balance.ether,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server (Bash)\nDESCRIPTION: This Bash command launches the React development server using npm. The server reads configuration from the .env file, builds the application, and serves it locally, typically on http://localhost:3000. The developer can preview, test, or debug the frontend with automatic reloads on file changes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/dexscreener-clone.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Example Solana NFT Attributes Structure in JSON\nDESCRIPTION: Demonstrates the JSON structure for representing NFT attributes (traits) within the metadata response. Attributes are provided as an array of objects, each containing a 'traitType' (the name of the trait, e.g., 'Gender') and its corresponding 'value' (e.g., 'Male').\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/nft-api-faq.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"attributes\": [\n  {\n    \"traitType\": \"Gender\",\n    \"value\": \"Male\"\n  },\n  {\n    \"traitType\": \"Type\",\n    \"value\": \"Dark\"\n  },\n  {\n    \"traitType\": \"Expression\",\n    \"value\": \"Smile\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Solana Tic Tac Toe Program\nDESCRIPTION: Rust code for the Solana program implementing the Tic Tac Toe game logic, including game creation, moves, and win conditions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse borsh::{BorshDeserialize, BorshSerialize};\nuse solana_program:{\n    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, msg, pubkey::Pubkey,\n};\n\npub fn win_check(moves: [u32; 9]) -> u32 {\n    // Player 1 move will be marked as 1 and player 2 as 2\n    let [m1, m2, m3, m4, m5, m6, m7, m8, m9] = moves;\n    if (m1 == 1 && m2 == 1 && m3 == 1)\n        || (m1 == 1 && m4 == 1 && m7 == 1)\n        || (m7 == 1 && m8 == 1 && m9 == 1)\n        || (m3 == 1 && m6 == 1 && m9 == 1)\n        || (m1 == 1 && m5 == 1 && m9 == 1)\n        || (m3 == 1 && m5 == 1 && m7 == 1)\n        || (m2 == 1 && m5 == 1 && m8 == 1)\n        || (m4 == 1 && m5 == 1 && m6 == 1)\n    {\n        // Condition for Player 1 Win\n        return 1;\n    } else if (m1 == 2 && m2 == 2 && m3 == 2)\n        || (m1 == 2 && m4 == 2 && m7 == 2)\n        || (m7 == 2 && m8 == 2 && m9 == 2)\n        || (m3 == 2 && m6 == 2 && m9 == 2)\n        || (m1 == 2 && m5 == 2 && m9 == 2)\n        || (m3 == 2 && m5 == 2 && m7 == 2)\n        || (m2 == 2 && m5 == 2 && m8 == 2)\n        || (m4 == 2 && m5 == 2 && m6 == 2)\n    {\n        // Condition for Player 2 Win\n        return 2;\n    } else if (m1 == 1 || m1 == 2)\n        && (m2 == 1 || m2 == 2)\n        && (m3 == 1 || m3 == 2)\n        && (m4 == 1 || m4 == 2)\n        && (m5 == 1 || m5 == 2)\n        && (m6 == 1 || m6 == 2)\n        && (m7 == 1 || m7 == 2)\n        && (m8 == 1 || m8 == 2)\n        && (m9 == 1 || m9 == 2)\n    {\n        // Condition for Draw\n        return 3;\n    } else {\n        return 0;\n    }\n}\n\n#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct GameAccount {\n    pub player1: String,\n    pub player2: String,\n    pub moves: [u32; 9],\n    pub game_status: u32,\n    pub next_move: u32,\n}\n\nentrypoint!(tic_tac_toe);\n\npub fn tic_tac_toe(\n    _program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    instruction_data: &[u8],\n) -> ProgramResult {\n    let game_account = &accounts[0];\n    let player1 = accounts[1].key.to_string();\n    let player2 = accounts[2].key.to_string();\n\n    let instruction: u32 = instruction_data[0].into();\n    let played_by: u32 = instruction_data[1].into();\n    let move_positon: usize = instruction_data[2].into();\n\n    match instruction {\n        // Create New Game or Reset the Game Data\n        0 => {\n            msg!(\"Instruction 0 Start\");\n            let game_data = GameAccount {\n                player1,\n                player2,\n                moves: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                game_status: 0,\n                next_move: 1,\n            };\n            msg!(\"Game Creation Successful!!\");\n            msg!(\"Player 1: {:?}\", game_data.player1);\n            msg!(\"Player 2: {:?}\", game_data.player2);\n            game_data.serialize(&mut &mut game_account.data.borrow_mut()[..])?;\n            msg!(\"Instruction 0 End\");\n        }\n        // Play game!!\n        1 => {\n            msg!(\"Instruction 1 Start\");\n            let mut game_data = GameAccount::try_from_slice(&game_account.data.borrow())?;\n            if game_data.game_status == 0 {\n                msg!(\"Player 1: {:?}\", game_data.player1);\n                msg!(\"Player 2: {:?}\", game_data.player2);\n\n                // Verify and updating moves in Game Account\n                if (game_data.moves[move_positon] == 0) && (game_data.next_move == played_by) {\n                    if game_data.next_move == 1 {\n                        game_data.moves[move_positon] = 1;\n                        game_data.next_move = 2\n                    } else if game_data.next_move == 2 {\n                        game_data.moves[move_positon] = 2;\n                        game_data.next_move = 1\n                    }\n                } else {\n                    msg!(\" Wrong Move\");\n                }\n\n                let game_status = win_check(game_data.moves);\n\n                match game_status {\n                    0 => {\n                        // Log the next player to move\n                        msg!(\"Next move: Player {}\", game_data.next_move);\n                    }\n                    1 => {\n                        game_data.game_status = 1;\n                        msg!(\"Player 1 won the game.\");\n                    }\n                    2 => {\n                        game_data.game_status = 2;\n                        msg!(\"Player 2 won the game.\");\n                    }\n                    3 => {\n                        game_data.game_status = 3;\n                        msg!(\"It's a Draw.\");\n                    }\n                    _ => {\n                        msg!(\"Game Error!!\");\n                    }\n                }\n                // Write the updated data to account.\n                game_data.serialize(&mut &mut game_account.data.borrow_mut()[..])?;\n                msg!(\"Instruction 1 End\");\n            } else {\n                msg!(\" Wrong Move.\");\n            }\n        }\n        // Invalid Instruction\n        _ => {\n            msg!(\"Invalid Instruction\");\n        }\n    }\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Basic package.json Configuration\nDESCRIPTION: Initial package.json file created by npm init command, containing basic project metadata.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"blockchainbot\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"MIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signature in Python\nDESCRIPTION: This Python function, `verify_Signature`, checks the validity of a Moralis webhook request signature. It retrieves the signature from the `x-signature` header. It then calculates the expected signature by computing the Keccak hash (using `Web3.keccak`) of the request body (bytes) concatenated with the secret key (encoded to bytes). If the `x-signature` header is missing, a `TypeError` is raised. If the provided signature doesn't match the calculated one, a `ValueError` is raised.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/webhook-security.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef verify_Signature(req, secret):\n    provided_signature = req.headers.get(\"x-signature\")\n    if not provided_signature:\n        raise TypeError(\"Signature not provided\")\n\n    data = req.data+secret.encode()\n    signature = Web3.keccak(text=data.decode()).hex()\n\n    if provided_signature != signature:\n        raise ValueError(\"Invalid Signature\")\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CLI via npm - Shell\nDESCRIPTION: Installs the Angular Command Line Interface (CLI) globally using npm, allowing you to scaffold, build, and manage Angular applications from the terminal. Requires Node.js and npm to be installed on your system. The command sets up the 'ng' executable to be used throughout your project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @angular/cli\n```\n\n----------------------------------------\n\nTITLE: Removing Placeholder Token Generation in C# Controller\nDESCRIPTION: This C# code snippet shows the lines of code to be deleted from the `VerifySignature` method within the `AuthenticationController`. It removes the placeholder comments and the simplistic token generation logic that concatenated the user's address and profile ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// ---------------------------------------------------------------------------------\n// Here is where you would generate a JWT or other authentication response object.\n// ---------------------------------------------------------------------------------\n\n// Return custom authentication response here.\nstring token =  ${\"{\\\"token\\\":\\\"{completeResp.Address}:{completeResp.ProfileId}\\\"}\"};\n```\n```\n\n----------------------------------------\n\nTITLE: Explaining API Response Fields with Code-Style Formatting - Markdown\nDESCRIPTION: Uses inline code formatting in Markdown to describe API response fields such as `pairTotalLiquidityUsd`, `amountLockedUsd`, and `oppositeAmountLockedUsd`. These code snippets clarify the structure of the API response and the role of each field. Inputs: none; Outputs: clear documentation for users parsing API data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/07-token-price-logic.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`pairTotalLiquidityUsd`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`amountLockedUsd`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`oppositeAmountLockedUsd`\n```\n\n----------------------------------------\n\nTITLE: Testing AWS Lambda Function Event Parameters\nDESCRIPTION: JSON structure for testing Lambda functions that shows the required parameters (address and chain) in the test event configuration. The address parameter expects a wallet address and chain parameter expects a chain ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x99939EXAMPLEADDRESS\",\n  \"chain\": \"0x1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing EVMChainData Component in MDX/JavaScript\nDESCRIPTION: Imports the `EVMChainData` component from a local source file (`@site/src/components/SupportedChains`) within the documentation site structure (likely Docusaurus). This component is intended to dynamically display a list or table of supported EVM chains on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/01-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EVMChainData } from '@site/src/components/SupportedChains';\n```\n\n----------------------------------------\n\nTITLE: Importing Admonition Component - TypeScript/React\nDESCRIPTION: This import statement includes the 'Admonition' component from the theme, used for rendering highlighted blocks of explanatory or warning text in the documentation. This is a dependency for pages that need to conditionally display alerts or important notes to users, ensuring clarity within the documentation interface.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/02-Get Wallet Token Balances/get-wallet-token-balances.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Admonition from \"@theme/Admonition\";\n```\n\n----------------------------------------\n\nTITLE: Invoking GetWalletNfts Lambda from GameSparks Cloud Code\nDESCRIPTION: This GameSparks Cloud Code snippet defines the request handler for the `GetWalletNfts` message. It calls the `aws-node-project-dev-getWalletNfts` AWS Lambda function, providing the `address` and `chain` parameters from the incoming message. It logs the Lambda response for debugging purposes and returns the `result` field from the Lambda payload directly as a String in the GameSparks message response. Assumes the GameSparks environment and a corresponding Lambda function are set up.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/aws-gamesparks-integration-with-unity.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = GameSparks().Lambda(\"aws-node-project-dev-getWalletNfts\").Invoke(\n    {\n      // Example of how you would send a parameter to Lambda\n      \"address\": message.address,\n      \"chain\": message.chain\n    }\n);\n\nGameSparks().Logging().Debug(\"Result from Lambda is:\");\n\nreturn GameSparks().Messaging().Response({\"result\": response.Payload.result});\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Components - React - JavaScript\nDESCRIPTION: Imports React components and configuration for referencing the Streams API endpoint used to retrieve addresses associated with a stream. Requires the @site/src/components/ApiReference component and a JSON configuration from the relative path. Inputs are file paths; outputs are imported module bindings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/get-addresses.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies for Telegram Bot\nDESCRIPTION: Installs the required Node.js packages (`express`, `node-telegram-bot-api`, `dotenv`, `nodemon`) using npm or yarn. These dependencies provide the web framework, Telegram API interaction, environment variable handling, and development server auto-reloading capabilities needed for the bot.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express node-telegram-bot-api dotenv nodemon\n```\n\n----------------------------------------\n\nTITLE: Server environment variables for authentication configuration\nDESCRIPTION: Environment variables setup for the server, including domain configuration, Moralis API key, React URL, and authentication secret for JWT token signing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nAPP_DOMAIN=amazing.finance\nMORALIS_API_KEY=xxxx\nREACT_URL=http://localhost:3000\nAUTH_SECRET=1234\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Metadata in Python\nDESCRIPTION: Python implementation for getting ERC20 token metadata using Moralis API. Requires moralis package. Takes token addresses and chain as parameters through a params dictionary.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-contract.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"addresses\": [\"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\"],\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_token_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana Balance API Reference\nDESCRIPTION: This JSX snippet renders the `ApiReference` React component. It passes the specific configuration for the Solana balance endpoint (`config.solana.balance`) as props, instructing the component to display the relevant API details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/02-Get Token Balances/get-native-balance.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.balance} />\n```\n\n----------------------------------------\n\nTITLE: Full Top Section of index.js for Moralis Backend with Express - NodeJS\nDESCRIPTION: Shows the complete top segment of index.js as it should appear after integrating Express, CORS, body parser, Moralis SDK, relevant constants, and authentication helper functions. This serves as a cohesive setup for an HTTP API backend that supports authentication requests and verification using Moralis on EVM chains, intended to be deployed on Google Cloud and accessed by Unity or web applications. Make sure to provide a valid Moralis API key and have all dependencies installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\")\nconst cors = require('cors')\nconst Moralis = require(\"moralis\").default\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\")\n\nconst app = express()\nconst port = 3000\n\n// Use CORS\napp.use(cors())\n\n// Using express.urlencoded middleware\napp.use(express.urlencoded({\n  extended: true\n}))\n\n// Values set in the backend\nconst MORALIS_API_KEY = \"Your Moralis API Key\"\nconst NETWORK = \"evm\";\n\n// Put your preferred message values here\nconst DOMAIN = 'moralis.io';\nconst STATEMENT = 'Please sign this message to confirm your identity.';\nconst URI = 'https://moralis.io/';\nconst EXPIRATION_TIME = '2023-01-01T00:00:00.000Z';\nconst TIMEOUT = 15;\n\n// requestMessage method\nasync function requestMessage(address, chain) {\n\n    const result = await Moralis.Auth.requestMessage({\n        address,\n        chain,\n        network: NETWORK,\n        domain: DOMAIN,\n        statement: STATEMENT,\n        uri: URI,\n        expirationTime: EXPIRATION_TIME,\n        timeout: TIMEOUT,\n    })\n\n    return result\n}\n\n// verify method\nasync function verify(message, signature) {\n\n    const verifiedData = Moralis.Auth.verify({\n        message: message,\n        signature: signature,\n        network: NETWORK,\n    })\n\n    return verifiedData\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Interface for Blockchain Ecosystems in JSX\nDESCRIPTION: Implements a tabbed navigation interface using Docusaurus Tabs component to display different blockchain ecosystems. The tabs include EVM and Solana chains, with each tab rendering a specialized component for that ecosystem.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/05-supported-chains/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs groupId=\"list\" queryString>\n  <TabItem value=\"evm\" label=\"EVM\" attributes={{ className: styles.parentTab }}>\n    <div>\n      <EVMChainsCombined />\n    </div>\n  </TabItem>\n  <TabItem\n    value=\"solana\"\n    label=\"Solana\"\n    attributes={{ className: styles.parentTab }}\n  >\n    <div>\n      <SolanaCombined />\n    </div>\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component in React\nDESCRIPTION: Renders the ApiReference component with configuration data for the Discovery Token endpoint, providing interactive API documentation for users.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/02-Get Token Metadata/get-token-details.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.discovery.getDiscoveryToken} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Generic API Banner using JSX\nDESCRIPTION: Renders a generic `ApiBanner` component within the documentation page. The specific content and appearance of this banner depend on the internal implementation of the `ApiBanner` component within the documentation site's framework.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/06-Get Pairs & Liquidity/get-aggregated-token-pair-stats.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiBanner />\n```\n\n----------------------------------------\n\nTITLE: Complete getWalletNfts Lambda Function Code (NodeJS)\nDESCRIPTION: The complete JavaScript code for the `getWalletNfts.js` Lambda function. It requires and initializes the Moralis SDK, then defines the handler function which calls `Moralis.EvmApi.nft.getWalletNFTs` using `address` and `chain` from the event parameters (with a limit of 10) and returns the stringified NFT data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nconst Moralis = require(\"moralis\").default;\n\nconst startMoralis = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n};\n\nstartMoralis();\n\nmodule.exports.handler = async (event) => {\n  // Get wallet NFTs\n  const nfts = await Moralis.EvmApi.nft.getWalletNFTs({\n    address: event.address,\n    chain: event.chain,\n    limit: 10,\n  });\n\n  return {\n    result: JSON.stringify(nfts),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing User Component Logic (TypeScript)\nDESCRIPTION: Adds an empty `session` string variable and an empty asynchronous `signOut` function to the `user` component's TypeScript file (`src/app/user/user.component.ts`). The `session` variable will hold user data, and the `signOut` function will handle the logout logic.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsession = '';\n\nngOnInit(): void {}\n\nasync signOut() {}\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configurations - JavaScript\nDESCRIPTION: This snippet imports a React component named ApiReference and a configuration object from specified paths. The ApiReference component is used for rendering API documentation, while the config object provides necessary configuration data for this documentation. Dependencies include React and a valid 'configs.json' file structured for use with the component. Inputs are statically defined import paths, and the output is the JavaScript module bindings for use in the page component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/03-Stats/get-stats-by-stream-id.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Sales & Transfers by Wallet using SimpleHash API\nDESCRIPTION: SimpleHash API endpoint to retrieve NFT sales and transfers associated with one or more wallet addresses across specified blockchain chains. Requires `chains` and `wallet_addresses` as query parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/transfers/wallets?chains={chains}&wallet_addresses={wallet_addresses}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Moralis Web3 Server\nDESCRIPTION: Terminal command to install the required Node.js packages for the Moralis server, including the Moralis SDK, Express.js for the HTTP server, and CORS middleware for cross-origin requests.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpm install moralis express cors\n```\n\n----------------------------------------\n\nTITLE: Creating a Mutable Ref for Token Key Tracking - React/JavaScript\nDESCRIPTION: Initializes a React ref named keyRef that can store either a number or null, which is used to remember the key of the token being interacted with during user actions. This ref preserves its value across rerenders, making it suitable for tracking state between UI updates (used primarily for transaction tracking). There are no parameters or outputs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst keyRef = useRef<number | null>(null);\n```\n\n----------------------------------------\n\nTITLE: Configure Environment Variables\nDESCRIPTION: Environment configuration for storing the Moralis API key securely.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-tradingview-lightweight-charts-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nREACT_APP_MORALIS_API_KEY=YOUR_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Implementing getNativeBalance Lambda Handler using Moralis SDK\nDESCRIPTION: Defines the asynchronous handler function for the `getNativeBalance` Lambda. It retrieves the `address` and `chain` from the incoming `event` object, calls the `Moralis.EvmApi.balance.getNativeBalance` method, extracts the balance in Ether using the `.ether` getter, and returns the result.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.handler = async (event) => {\n  // Get native balance\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address: event.address,\n    chain: event.chain,\n  });\n\n  // Format the native balance formatted in ether via the .ether getter\n  const nativeBalanceEther = nativeBalance.result.balance.ether;\n\n  return {\n    result: nativeBalanceEther,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for API Documentation in JSX\nDESCRIPTION: Imports the necessary React components for rendering the API reference documentation for the 'Get Timeseries Volume By Chain' endpoint. This includes the ApiReference component, configuration data, and a MainnetBadge component to indicate production status.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Volume Stats/get-timeseries-volume.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Creating Sign-in Component Template in Angular\nDESCRIPTION: HTML template for the sign-in component, displaying a button for MetaMask authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h3>Web3 Authentication</h3>\n<button type=\"button\" (click)=\"handleAuth()\">Authenticate via MetaMask</button>\n```\n\n----------------------------------------\n\nTITLE: Getting Entities by Category via API Endpoint (URI)\nDESCRIPTION: Provides the API endpoint URL template for retrieving entities belonging to a specific category using the Moralis Entity API. The `:categoryId` path parameter must be replaced with the actual ID of the desired category. This endpoint corresponds to the `getEntitiesByCategory` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/entity-api.md#2025-04-23_snippet_2\n\nLANGUAGE: uri\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/entities/categories/:categoryId\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Metadata in TypeScript\nDESCRIPTION: TypeScript implementation for getting ERC20 token metadata using Moralis API. Requires Moralis and @moralisweb3/common-evm-utils packages. Takes token addresses and chain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-contract.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = [\"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\"];\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenMetadata({\n    addresses,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Sample Response: ERC20 Top Price Movers (JSON Structure)\nDESCRIPTION: This snippet presents a typical JSON response from the getTopERC20TokensByPriceMovers endpoint. It displays two arrays, 'gainers' and 'losers', each containing token metadata (name, symbol, logo URL, decimals, contract address) and associated price figures (USD price, 24h and 7d percent change, market cap). The structure shows how response data is organized, which is useful for consuming the API results as shown in the provided JavaScript, TypeScript, and Python code.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-ERC20-tokens-by-price-change.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gainers\": [\n    {\n      \"rank\": \"1\",\n      \"token_name\": \"Wrapped Ether\",\n      \"token_symbol\": \"WETH\",\n      \"token_logo\": \"https://assets.coingecko.com/coins/images/2518/large/weth.png?1595348880\",\n      \"token_decimals\": \"18\",\n      \"contract_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n      \"price_usd\": \"0.0285\",\n      \"price_24h_percent_change\": \"0.0285\",\n      \"price_7d_percent_change\": \"0.0285\",\n      \"market_cap_usd\": \"0.0285\"\n    }\n  ],\n  \"losers\": [\n    {\n      \"rank\": \"1\",\n      \"token_name\": \"Wrapped Ether\",\n      \"token_symbol\": \"WETH\",\n      \"token_logo\": \"https://assets.coingecko.com/coins/images/2518/large/weth.png?1595348880\",\n      \"token_decimals\": \"18\",\n      \"contract_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n      \"price_usd\": \"0.0285\",\n      \"price_24h_percent_change\": \"0.0285\",\n      \"price_7d_percent_change\": \"0.0285\",\n      \"market_cap_usd\": \"0.0285\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Stream Configuration via Moralis SDK - JavaScript\nDESCRIPTION: Updates stream configuration settings, such as selecting the preferred region, using the Moralis SDK. Requires importing and starting the Moralis client with a valid API key. Only supported region values ('us-east-1', 'us-west-2', 'eu-central-1') are allowed, set through the region parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/stream-management.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n});\n\nawait Moralis.Streams.setSettings({\n  region: \"eu-central-1\", // 'us-east-1' | 'us-west-2' | 'eu-central-1'\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Pancakeswap V1 Pair Reserves in Python\nDESCRIPTION: Python implementation to retrieve pair reserves from a Pancakeswap V1 liquidity pool using Moralis DeFi API. Uses the moralis library and requires an API key for authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-reserves.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"pair_address\": \"0xaebe45e3a03b734c68e5557ae04bfc76917b4686\",\n    \"chain\": \"bsc\",\n    # \"to_block\": \"\",\n    # \"to_date\": \"\",\n}\n\nresult = evm_api.defi.get_pair_reserves(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Blockchain Data Flow with Streams API using Mermaid\nDESCRIPTION: A mermaid diagram illustrating how the Streams API processes data from different blockchain nodes (ETH, Polygon, BNB) and sends webhook notifications to your server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    A[ETH Node] -- New Block --> D(Streams API);\n    B[Polygon Node] -- New Block --> D;\n    C[BNB Node] -- New Block --> D;\n    D --> E{Your Stream};\n    E -- Webhook --> F[Your Server];\n```\n\n----------------------------------------\n\nTITLE: Handling NFT Search Input and Triggering API Call (TypeScript/JSX)\nDESCRIPTION: This React component snippet (from `pages/index.jsx`) manages the user input for a Solana wallet address and initiates the NFT search. It uses the `useState` hook to store the input and results. The `inputHandler` updates the state on input change, and `nftSearch` is triggered on button click to call the backend API endpoint (`/SolApi/account/getNFTs`) with the entered address, subsequently updating the `searchResult` state.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `pages/index.jsx`\n\n// State variable to store the search input and the search result.\nconst [searchInput, setSearchInput] = useState('');\nconst [searchResult, setSearchResult] = useState([]);\n\n// 2️⃣\n// `inputHandler` function handles the address entered in search bar\n// and stores in state variable.\nconst inputHandler = (e) => {\n  const Text = e.target.value;\n  setSearchInput(Text);\n};\n\n// 4️⃣\n// `nftSearch` function will be called with a search button click.\n// This function uses the state value in `setSearchInput` and\n// calls the backend api route to fetch the NFTs using `getNFTs` api endpoint.\nconst nftSearch = async () => {\n  setSearchResult(() => null);\n  setQuery('');\n  setPage(1);\n  if (searchInput) {\n    const options = {\n      network: 'mainnet',\n      address: searchInput,\n    };\n    const response = await apiPost('/SolApi/account/getNFTs', options);\n    // 6️⃣\n    // response from backend api route is saved in the state variable\n    setSearchResult(() => response);\n  }\n};\n\nreturn (\n  //...\n  // 1️⃣\n  // Input component takes user input from search bar\n  // and triggers `inputHandler`function on input change\n  <Input\n  variant=\"filled\"\n  placeholder=\"Enter Wallet Address..\"\n  width={500}\n  onInput={inputHandler} />\n\n  // 3️⃣\n  //Button to call the `nftSearch` function\n  <Button colorScheme=\"gray\" onClick={nftSearch}>\n    Search\n  </Button>\n   //...\n);\n```\n\n----------------------------------------\n\nTITLE: Build Candlestick Chart Component\nDESCRIPTION: Component for rendering interactive candlestick charts using TradingView's Lightweight Charts library.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-tradingview-lightweight-charts-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useRef } from \"react\";\nimport { createChart } from \"lightweight-charts\";\n\nconst CandlestickChart = ({ candlestickData }) => {\n  const chartContainerRef = useRef();\n  const chartRef = useRef();\n\n  useEffect(() => {\n    if (!chartRef.current) {\n      const chart = createChart(chartContainerRef.current, {\n        width: chartContainerRef.current.offsetWidth || 800,\n        height: 400,\n        layout: {\n          backgroundColor: \"#ffffff\",\n          textColor: \"#333\",\n        },\n        grid: {\n          vertLines: { color: \"#f0f3fa\" },\n          horzLines: { color: \"#f0f3fa\" },\n        },\n        timeScale: {\n          timeVisible: true,\n          borderVisible: true,\n        },\n      });\n\n      const candlestickSeries = chart.addCandlestickSeries({\n        upColor: \"#4caf50\",\n        downColor: \"#f44336\",\n        borderVisible: false,\n        wickUpColor: \"#4caf50\",\n        wickDownColor: \"#f44336\",\n      });\n\n      chartRef.current = { chart, candlestickSeries };\n    }\n\n    if (candlestickData.length > 0) {\n      chartRef.current.candlestickSeries.setData(candlestickData);\n    }\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.chart.remove();\n        chartRef.current = null;\n      }\n    };\n  }, [candlestickData]);\n\n  return (\n    <div\n      ref={chartContainerRef}\n      style={{ position: \"relative\", height: \"400px\" }}\n    />\n  );\n};\n\nexport default CandlestickChart;\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference Page in React\nDESCRIPTION: Imports necessary components to build the API reference documentation page including ApiReference, configuration data, and UI components like Admonition and ReactMarkdown.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/07-Get Token Stats/get-token-stats.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\n```\n\n----------------------------------------\n\nTITLE: Resolving Address (Reverse Lookup) via Moralis API\nDESCRIPTION: Moralis API endpoint URL for performing a reverse lookup, resolving a wallet address, specified by `:address`, to its primary domain name (e.g., ENS). This is the Moralis equivalent to SimpleHash's 'Reverse ENS Lookup'. Moralis also supports other reverse resolution services.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_34\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/resolve/:address/reverse\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with MDX Component\nDESCRIPTION: This MDX snippet uses the `ApiReference` React component to render detailed documentation for the `getAddresses` endpoint of the Moralis Authentication API. It dynamically passes configuration data (likely parameters, responses, examples) for this endpoint from the `config.auth.getAddresses` object, imported from `configsV2.json`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/reference/03-Profiles/get-addresses.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<ApiReference {...config.auth.getAddresses} />\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Contract Ownership Summary by Wallet using SimpleHash API\nDESCRIPTION: SimpleHash API endpoint to retrieve a summary of NFT contracts owned by specified wallet addresses across given chains. Requires `chains` and `wallet_addresses` as query parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/contracts?chains={chains}&wallet_addresses={wallet_addresses}\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Response with Native Balances in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of a webhook response that includes native balances. It shows an array of 'nativeBalances' with address and value pairs. Note that the values are not parsed into decimals.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2022-12-07-get-native-balances.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    ...\n    nativeBalances: [\n    {\n        address: \"0xd119b250d83893860159f8a7b7a751bc044655a1\",\n        value: \"100000\"\n    },\n    {\n      address: \"0x6887246668a3b87f54deb3b94ba47a6f63f32985\",\n      value: \"3528061000\",\n    }\n  ],\n ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component (TypeScript)\nDESCRIPTION: This snippet imports the ApiBanner React component written in TypeScript, which is likely used to show informational or promotional banners regarding the API. It depends on the TypeScript file located at the given path and is used in the documentation site's React context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-address.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Handling NFT Selection in Solana NFT Burner UI\nDESCRIPTION: TypeScript code for managing the selection of NFTs in the user interface, including state management and checkbox handling.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-burner.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst [nftsToDelete, setNftsToDelete] = useState<Array<string>>([]);\nconst handleCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\n  const { value, checked } = e.target;\n  if (!nftsToDelete?.includes(value) && checked) {\n    setNftsToDelete((existing: Array<string>) => [...existing, value]);\n  } else {\n    const temp = nftsToDelete;\n    if (temp.includes(value)) {\n      temp.splice(temp.indexOf(value), 1);\n      setNftsToDelete(() => [...temp]);\n    }\n  }\n};\n\n<StyledCheckBox\n  onChange={handleCheckbox}\n  value={`${balance.mint}`}\n  type={\"checkbox\"}\n  checked={nftsToDelete.includes(`${balance.mint}`)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating a Unique Salt for Interchain Token Deployment (JavaScript)\nDESCRIPTION: This snippet generates a cryptographically random, unique salt value once per component mount using crypto.randomBytes. The salt is required as part of the deployInterchainToken arguments to ensure token uniqueness across chains. The generated value is stored in React state and set as a 32-byte hex string. This logic must run only once per deployment form lifecycle.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst NewInterchainToken: React.FC = () = >{\n  //...\n  useEffect(() = >{\n    const localSaltValue = `0x$ {\n      crypto.randomBytes(32).toString('hex')\n    }`;\n    setSaltValue(localSaltValue);\n  },\n  []);\n  return (\n  //...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Function Locally with Serverless Framework\nDESCRIPTION: Tests the `getNativeBalance` Lambda function locally using the Serverless Framework's `invoke local` command. The `-f` flag specifies the function name (defined in `serverless.yml`), and the `--path` flag provides the path to a JSON file (`event.json`) containing the input event data (like address and chain).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nserverless invoke local -f getNativeBalance --path event.json\n```\n\n----------------------------------------\n\nTITLE: Example Response for Wallet Transactions Query (JSON)\nDESCRIPTION: This JSON snippet shows an example response structure from the Moralis Transaction API after querying for wallet transactions. It includes total transaction count, pagination details, and a list of transaction objects with standard Ethereum transaction attributes. This format serves as a reference for the expected output, helping developers parse and utilize data returned from the API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": \"2000\",\n  \"page\": \"2\",\n  \"page_size\": \"100\",\n  \"result\": [\n    {\n      \"hash\": \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\",\n      \"nonce\": 326595425,\n      \"transaction_index\": 25,\n      \"from_address\": \"0xd4a3BebD824189481FC45363602b83C9c7e9cbDf\",\n      \"to_address\": \"0xa71db868318f0a0bae9411347cd4a6fa23d8d4ef\",\n      \"value\": 650000000000000000,\n      \"gas\": 6721975,\n      \"gas_price\": 20000000000,\n      \"input\": \"string\",\n      \"receipt_cumulative_gas_used\": 1340925,\n      \"receipt_gas_used\": 1340925,\n      \"receipt_contract_address\": \"0x1d6a4cf64b52f6c73f201839aded7379ce58059c\",\n      \"receipt_root\": \"string\",\n      \"receipt_status\": 1,\n      \"block_timestamp\": \"2021-04-02T10:07:54.000Z\",\n      \"block_number\": 12526958,\n      \"block_hash\": \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Domain using Python\nDESCRIPTION: Python implementation for resolving an ENS domain to an Ethereum address using Moralis API. Requires the moralis package and API key configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-domain.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n  \"domain\": \"vitalik.eth\",\n}\n\nresult = evm_api.resolve.resolve_ens_domain(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical NFT Collection Floor Prices using SimpleHash API\nDESCRIPTION: SimpleHash API endpoint (v2) to retrieve historical floor prices for a specific collection ID with a defined granularity (e.g., daily, weekly). Requires `collection_id` and `granularity` as path parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/floor_prices_v2/collection/{collection_id}/{granularity}\n```\n\n----------------------------------------\n\nTITLE: Fetching Pump.fun Token Pairs via cURL (Shell)\nDESCRIPTION: This shell command uses cURL to send a GET request to the Moralis Solana API endpoint `/token/mainnet/{tokenAddress}/pairs`. It requires setting the `accept` header to `application/json` and providing a valid Moralis API key via the `X-API-Key` header. Replace `YOUR_API_KEY` with your actual key and `9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump` with the desired token address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/05-get-pairs-and-liquidity-data-for-pump-fun.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/token/mainnet/9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump/pairs' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Implementing getWalletNfts Endpoint with Moralis\nDESCRIPTION: Express route handler for getting wallet NFTs using Moralis EvmApi.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/getWalletNfts\", async (req, res, next) => {\n  try {\n    const nfts = await Moralis.EvmApi.nft.getWalletNFTs({\n      address: req.body.address,\n      chain: req.body.chain,\n      limit: 10,\n    });\n\n    res.status(200);\n    res.json(nfts);\n  } catch (error) {\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Next.js Workaround Implementation\nDESCRIPTION: Solution for Firebase SDK compatibility issues with Next.js framework by manually instantiating Auth and Functions services.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst auth = getAuth(app);\nconst functions = getFunctions(app);\n\nconst moralisAuth = getMoralisAuth(app, {\n  auth,\n  functions\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Moralis Transactions API Reference and Info Banner - JSX\nDESCRIPTION: This snippet renders the main API reference interface for retrieving wallet transactions using the Moralis API, enriched with an informational admonition. It utilizes the <ApiReference> component, passing in transaction endpoint configurations, and wraps an Admonition callout highlighting a newer \\\"Wallet History\\\" endpoint. This JSX is intended for Docusaurus or React-powered documentation sites, and requires all imported components to be available. Inputs are configuration objects; output is structured documentation and embedded alert for user guidance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-wallet-transactions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.transaction.getWalletTransactions}>\n    <Admonition type=\"info\" title=\"New Endpoint Available 🤩\">\n        <p>\n        Check-out our newest transactions endpoint, <b><a href=\"/web3-data-api/evm/reference/wallet-api/get-wallet-history\">Wallet History</a></b>, to fetch decoded transactions by wallet, fully enriched with metadata, labels and categories (such as Mints, Burns, Swaps etc).\n        </p>\n    </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying ERC20 Token Balances with Formatting - JavaScript\nDESCRIPTION: This React component queries a backend for ERC20 token balances, converts balances using token decimals, and computes USD values, displaying the result in a styled Table using web3uikit. It uses Axios for HTTP requests and React for state management. Requires @web3uikit/core, @web3uikit/icons, Axios, React. Inputs include 'wallet', 'chain', 'tokens', and 'setTokens'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \\\"react\\\";\nimport axios from \\\"axios\\\";\nimport { Table } from \\\"@web3uikit/core\\\";\nimport { Reload } from \\\"@web3uikit/icons\\\";\n\nfunction Tokens({ wallet, chain, tokens, setTokens }) {\n\n  async function getTokenBalances() {\n    const response = await axios.get(\\\"http://localhost:8080/tokenBalances\\\", {\n      params: {\n        address: wallet,\n        chain: chain,\n      },\n    });\n\n    if (response.data) {\n      tokenProcessing(response.data);\n    }\n  }\n\n  function tokenProcessing(t) {\n\n    \n    for (let i = 0; i < t.length; i++) {\n      t[i].bal = (Number(t[i].balance) / Number(`1E${t[i].decimals}`)).toFixed(3); //1E18\n      t[i].val = ((Number(t[i].balance) / Number(`1E${t[i].decimals}`)) *Number(t[i].usd)).toFixed(2);\n    }\n\n    setTokens(t);\n\n    \n  }\n\n  return (\n    <>\n      <div className=\\\"tabHeading\\\">ERC20 Tokens <Reload onClick={getTokenBalances}/></div>\n\n      {tokens.length > 0 && (\n        <Table\n          pageSize={6}\n          noPagination={true}\n          style={{ width: \\\"900px\\\" }}\n          columnsConfig=\\\"300px 300px 250px\\\"\n          data={tokens.map((e) => [e.symbol, e.bal, `$${e.val}`] )}\n          header={[\n            <span>Currency</span>,\n            <span>Balance</span>,\n            <span>Value</span>,\n          ]}\n        />\n      )}\n    </>\n  );\n}\n\nexport default Tokens;\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component - TypeScript\nDESCRIPTION: This snippet imports the \"ApiBanner\" React component, with TypeScript type checking, intended for display within the documentation interface. The import path includes a .tsx extension indicating usage with TypeScript files. The imported component is expected to be rendered somewhere in the documentation to show banners or alerts relevant to the API reference.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-sale-prices.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Verbose Wallet Transactions with Moralis SDK (Python)\nDESCRIPTION: This Python script utilizes the `moralis` library to fetch verbose transaction details for a specified Ethereum address. It defines the API key and parameters (address, chain), then calls `evm_api.transaction.get_wallet_transactions_verbose`. Requires the `moralis` pip package and a valid Moralis API key. The result dictionary is printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-transaction-verbose.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n  \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n  \"chain\": \"eth\"\n}\n\nresult = evm_api.transaction.get_wallet_transactions_verbose(\n  api_key=api_key,\n  params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating EvmNative Instances for Value Representations - Moralis SDK - JavaScript\nDESCRIPTION: Illustrates how to manually create an EvmNative instance in a dapp using the Moralis SDK. Utilizes the EvmNative.create() method, which requires a numeric value and a unit as parameters. The resulting instance provides access to standardized properties such as the wei string representation. '@moralisweb3/common-evm-utils' must be installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmNative } from \"@moralisweb3/common-evm-utils\";\n\nconst oneEth = EvmNative.create(1, \"ether\");\n\noneEth.wei; // 1000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Describing API Endpoint Rate Limits with JSON\nDESCRIPTION: This JSON snippet provides a configuration example detailing an API endpoint's path, associated cost, and rate limit. It shows the 'syncNFTContract' endpoint, specifying its URL path, the credit price per call, and a 'rateLimitCost' determining how many compute units (CUs) each call costs against your plan's throughput. No dependencies are required as it's representative documentation data. Inputs include endpoint metadata fields, while the output is informational for understanding rate limiting in API usage.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/03-rate-limits.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"endpoint\\\": \\\"syncNFTContract\\\",\\n  \\\"path\\\": \\\"/nft/{address}/sync\\\",\\n  \\\"price\\\": 5,\\n  \\\"rateLimitCost\\\": 25\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Routing\nDESCRIPTION: Updates the application's routing module (`src/app/app-routing.module.ts`) to define routes for the newly generated `SigninComponent` and `UserComponent`. It maps the `/signin` path to `SigninComponent` and the `/user` path to `UserComponent`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SigninComponent } from \"./signin/signin.component\";\nimport { UserComponent } from \"./user/user.component\";\n\nconst routes: Routes = [\n  { path: \"signin\", component: SigninComponent },\n  { path: \"user\", component: UserComponent },\n];\n```\n\n----------------------------------------\n\nTITLE: Default Health Check Endpoint\nDESCRIPTION: Simple GET endpoint to verify server status and health.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/\", (req, res) => {\n  res.send(\"Server running!\")\n})\n```\n\n----------------------------------------\n\nTITLE: Moralis Test Webhook Payload Structure\nDESCRIPTION: Sample JSON structure showing the test webhook payload sent by Moralis when creating or updating a stream. Contains fields for blockchain data including transactions, logs, and token transfers. The webhook requires a 20x response code to activate the stream.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/mandatory-test-webhook.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"abi\": {},  \n  \"block\": {  \n    \"hash\": \"\",  \n    \"number\": \"\",  \n    \"timestamp\": \"\"  \n  },  \n  \"txs\": [],  \n  \"txsInternal\": [],  \n  \"logs\": [],  \n  \"chainId\": \"\",  \n  \"tag\": \"\",  \n  \"streamId\": : \"\",  \n  \"confirmed\": true,  \n  \"retries\": 0,  \n  \"erc20Approvals\": [],  \n  \"erc20Transfers\": [],  \n  \"nftApprovals\": [ ERC721: [], ERC1155: [] ],  \n  \"nftTransfers\": []  \n}\n```\n\n----------------------------------------\n\nTITLE: Endpoints Table Structure - NFT Traits API Endpoints\nDESCRIPTION: Table showing the available API endpoints for NFT traits and rarity data, including endpoint paths and links to method documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/02-NFT API/nft-rarity-faqs.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                                    | Endpoint                        | API Reference                                                                              |\n| ----------------------------------------------------------------------- | ------------------------------- | ------------------------------------------------------------------------------------------ |\n| Get NFT Traits by Collection (single response, limited to 5,000 traits) | `/nft/:address/traits`          | [Method Documentation](/web3-data-api/evm/reference/get-nft-traits-by-collection)          |\n| Get NFT Traits by Collection (paginated, no limit)                      | `/nft/:address/traits/paginate` | [Method Documentation](/web3-data-api/evm/reference/get-nft-traits-by-collection-paginate) |\n| Get NFTs by Traits                                                      | `/nft/:address/nfts-by-traits`  | [Method Documentation](/web3-data-api/evm/reference/resync-nft-traits-by-collection)       |\n| Resync NFT Traits by Collection                                         | `/nft/:address/traits/resync`   | [Method Documentation](/web3-data-api/evm/reference/get-nfts-by-traits)                    |\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Transactions in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Moralis SDK in TypeScript to fetch all transactions of a specific block using the getBlock endpoint. It requires the block number or hash and optionally specifies the chain and whether to include internal transactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/block-api-full-guide-walkthrough.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const blockNumberOrHash = \"15863321\";\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getBlock({\n    blockNumberOrHash,\n    chain,\n    include: \"internal_transactions\",\n  });\n\n  console.log(response?.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana Multiple Token Price API Reference\nDESCRIPTION: This JSX snippet utilizes the `ApiReference` React component to dynamically render the technical documentation section for the Solana API endpoint responsible for fetching multiple token prices. It passes configuration properties for this specific endpoint (`config.solana.getMultipleTokenPrices`), likely loaded from an external JSON file (`configs.json`), to the component via the spread operator.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/price-api/get-multiple-token-prices.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getMultipleTokenPrices} />\n```\n\n----------------------------------------\n\nTITLE: Querying Pancakeswap V1 Pair Address Using Moralis SDK (JavaScript)\nDESCRIPTION: Uses the Moralis JavaScript SDK to query the pair address for a Pancakeswap V1 liquidity pool on Binance Smart Chain. Dependencies include 'moralis' and '@moralisweb3/common-evm-utils' NPM packages, and an API key. The main parameters are token0Address, token1Address, chain, and exchange name. The code initializes Moralis, sets up required parameters, performs the API query via 'getPairAddress', and outputs the result in JSON format. Input must be BEP20 token addresses (checksummed), and output is a JSON object containing token info and the pair address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.BSC;\n\n  // token 0 address, e.g. WBNB token address\n  const token0Address = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"pancakeswapv1\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command for installing necessary npm packages for the project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpm install moralis express cors\n```\n\n----------------------------------------\n\nTITLE: Implementing request-message endpoint for Moralis authentication\nDESCRIPTION: Express.js endpoint that uses Moralis Auth to generate a unique message for Web3 wallet signing. This is the first step in the authentication flow.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// to use our .env variables\nrequire(\"dotenv\").config();\n\napp.use(express.json());\n\n// for our server's method of setting a user session\nconst cookieParser = require(\"cookie-parser\");\nconst jwt = require(\"jsonwebtoken\");\n\nconst config = {\n  domain: process.env.APP_DOMAIN,\n  statement: \"Please sign this message to confirm your identity.\",\n  uri: process.env.REACT_URL,\n  timeout: 60,\n};\n\napp.post(\"/request-message\", async (req, res) => {\n  const { address, chain, network } = req.body;\n\n  try {\n    const message = await Moralis.Auth.requestMessage({\n      address,\n      chain,\n      ...config,\n    });\n\n    res.status(200).json(message);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: API Reference Component with Deprecation Notice\nDESCRIPTION: JSX component rendering the API reference with a deprecation warning indicating the endpoint will be deprecated on September 4th, 2023.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/20-Utils/run-contract-function.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.utils.runContractFunction}>\n  <Admonition type=\"caution\" title=\"DEPRECATED ENDPOINT\">\n    This API will be deprecated on 4th September 2023.  Please subscribe to the{\" \"}\n    <Link href=\"/changelog\">Changelog</Link> page for further announcements.\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeseries Volume Data by Category via Moralis API\nDESCRIPTION: Fetches timeseries volume data for a specific category (e.g., 'artificial-intelligence') on a given chain (e.g., 'eth') over a specified timeframe (e.g., '1d') using the Moralis Deep Index API v2.2. Requires the category in the path and `chain` and `timeframe` query parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/volume/timeseries/artificial-intelligence?chain=eth&timeframe=1d\n```\n\n----------------------------------------\n\nTITLE: Importing Moralis Streams API Reference Component in JavaScript\nDESCRIPTION: This snippet imports a custom React component for displaying the Moralis Streams API reference and pulls configuration data from a JSON file. It is intended to modularize API documentation within a React/MDX documentation site. Dependencies: React, the local ApiReference component, and the config JSON file. No parameters are used directly here; the imported config is later passed as a prop. This enables dynamic documentation rendering based on config files.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/01-History/get-logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Providing Example Stablecoin Addresses on Solana - Markdown\nDESCRIPTION: Lists supported Solana stablecoins by presenting their token mint addresses as inline code in Markdown. These addresses can be copy-pasted into API requests or code to identify USDC and USDT. These references guide developers in selecting supported stablecoins for pool matching or custom queries.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/07-token-price-logic.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB`\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration in JavaScript\nDESCRIPTION: This snippet imports the ApiReference component and the configuration object for the ENS domain resolution API. It's used to render the API reference documentation for the 'resolve ENS domain' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/07-Domains Lookups/resolve-ens-domain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Moralis Token Swap API\nDESCRIPTION: Illustrates the structure of a JSON response from the Moralis Solana API when fetching token swaps. Contains pagination details (`cursor`, `page`, `pageSize`) and an array (`result`) of swap objects, each detailing the transaction hash, type, timestamp, involved wallets/tokens, amounts, prices, and exchange information. This example shows details for a 'buy' transaction involving 'Fartcoin' and 'SOL'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/04-get-pump-fun-token-swaps.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cursor\": \"eyJhbGciOiJIUzI1NiJ9.IntcInBrVmFsdWVcIjpcImM5dTJrc2s2a2t3dmxlZW81eXVxN3h1NDZ4N256ZWJqdGQ5cGJmdXhhdXNtX1NXQVBcIixcImhhc2hWYWx1ZVwiOlwiOWJiNm5mZWNqYmN0bm5sZmtvMmZxdnFicThoaG0xM2tjeXljZHFiZ3B1bXBcIixcImJsb2NrTnVtYmVyXCI6XCIzMTczNDgzMTNcIixcImJsb2NrVGltZXN0YW1wXCI6XCIxNzM4MjQxNDI0XCIsXCJ0cmFuc2FjdGlvbkluZGV4XCI6XCI0NTFcIixcImxvZ0luZGV4XCI6XCIzXCIsXCJwYWdlXCI6MX0i...\",\n  \"page\": 1,\n  \"pageSize\": 100,\n  \"result\": [\n    {\n      \"transactionHash\": \"3S8wDKHkP9si7YajUuub8t7bKwGGc7umSo1bkwhwyT3yQpJJxmSfiGYjUVHD1s6EFt2tuDU1aT3zJdrcQu8xJKLy\",\n      \"transactionType\": \"buy\",\n      \"transactionIndex\": 93,\n      \"subCategory\": \"newPosition\",\n      \"blockTimestamp\": \"2025-01-30T12:51:16.000Z\",\n      \"blockNumber\": 317348443,\n      \"walletAddress\": \"9Mt5Z4k49NYa1va4i91nziJURWS1KmkVMxSd6BiLhESL\",\n      \"pairAddress\": \"AbCuhWFpcqspj4Cip3FEdJHqzouJqSa9PJLFd8TuvnPw\",\n      \"pairLabel\": \"Fartcoin /SOL\",\n      \"exchangeAddress\": \"LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo\",\n      \"exchangeName\": \"Meteora DLMM\",\n      \"exchangeLogo\": \"https://entities-logos.s3.amazonaws.com/meteora.png\",\n      \"baseToken\": \"9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump\",\n      \"quoteToken\": \"So11111111111111111111111111111111111111112\",\n      \"bought\": {\n        \"address\": \"9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump\",\n        \"name\": \"Fartcoin\",\n        \"symbol\": \"Fartcoin\",\n        \"logo\": null,\n        \"amount\": \"16.236165000\",\n        \"usdPrice\": 1.175495875,\n        \"usdAmount\": 19.085544983319373,\n        \"tokenType\": \"token0\"\n      },\n      \"sold\": {\n        \"address\": \"So11111111111111111111111111111111111111112\",\n        \"name\": \"Wrapped SOL\",\n        \"symbol\": \"SOL\",\n        \"logo\": null,\n        \"amount\": \"0.079320000\",\n        \"usdPrice\": 240.614535941,\n        \"usdAmount\": 19.08554499084012,\n        \"tokenType\": \"token1\"\n      },\n      \"baseQuotePrice\": \"0.004885390113289905\",\n      \"totalValueUsd\": 19.08554499\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Authentication with Solana Adapter - TypeScript\nDESCRIPTION: This TypeScript component manages Solana wallet authentication by requesting a challenge from Moralis, signing it using the connected wallet, and authenticating with NextAuth. It depends on @solana/wallet-adapter-react, @solana/wallet-adapter-react-ui, @moralisweb3/next, next-auth, bs58, and React. The component initializes authentication on wallet connection, manages error and disconnect scenarios, and renders a wallet UI button. Inputs include user wallet access, and outputs are session state changes and sign-in.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from \\\"react\\\";\nimport { useWallet } from \\\"@solana/wallet-adapter-react\\\";\nimport { WalletMultiButton } from \\\"@solana/wallet-adapter-react-ui\\\";\nrequire(\\\"@solana/wallet-adapter-react-ui/styles.css\\\");\nimport base58 from \\\"bs58\\\";\nimport { signIn, signOut } from \\\"next-auth/react\\\";\nimport { useAuthRequestChallengeSolana } from \\\"@moralisweb3/next\\\";\nimport React from \\\"react\\\";\nexport default function WalletAdaptor() {\n  const { publicKey, signMessage, disconnecting, disconnect, connected } =\n    useWallet();\n  const { requestChallengeAsync, error } = useAuthRequestChallengeSolana();\n  const signCustomMessage = async () => {\n    if (!publicKey) {\n      throw new Error(\\\"Wallet not avaiable to process request.\\\");\n    }\n    const address = publicKey.toBase58();\n    const challenge = await requestChallengeAsync({\n      address,\n      network: \\\"devnet\\\",\n    });\n    const encodedMessage = new TextEncoder().encode(challenge?.message);\n    if (!encodedMessage) {\n      throw new Error(\\\"Failed to get encoded message.\\\");\n    }\n\n    const signedMessage = await signMessage?.(encodedMessage);\n    const signature = base58.encode(signedMessage as Uint8Array);\n    try {\n      const authResponse = await signIn(\\\"moralis-auth\\\", {\n        message: challenge?.message,\n        signature,\n        network: \\\"Solana\\\",\n        redirect: false,\n      });\n      if (authResponse?.error) {\n        throw new Error(authResponse.error);\n      }\n    } catch (e) {\n      disconnect();\n      console.log(e);\n      return;\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      disconnect();\n      console.log(error);\n    }\n  }, [disconnect, error]);\n\n  useEffect(() => {\n    if (disconnecting) {\n      signOut({ redirect: false });\n    }\n  }, [disconnecting]);\n\n  useEffect(() => {\n    connected && signCustomMessage();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connected]);\n\n  return <WalletMultiButton />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rust Library Project for Solana Micro Blogger\nDESCRIPTION: Commands to create a new Rust library project for the Solana Micro Blogger smart contract.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo init micro_blog --lib\n\ncd micro_blog\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Data in JavaScript/JSX\nDESCRIPTION: Imports configuration settings from a local JSON file. This configuration object (`config`) likely contains parameters and details for various API endpoints, used here to configure the `ApiReference` component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Volume Stats/get-timeseries-volume.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Configuring NextJS Webpack for Node Polyfills\nDESCRIPTION: Modifies the `next.config.js` file to configure Webpack. It adds fallback resolutions for Node.js core modules (`fs`, `net`, `tls`) that are no longer automatically polyfilled in Webpack 5, which Next.js uses. This configuration is necessary to satisfy peer dependencies of RainbowKit v1 and wagmi v1 (built on viem), ensuring the application builds correctly.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  webpack: (config) => {\n    config.resolve.fallback = { fs: false, net: false, tls: false };\n    return config;\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Project Setup Commands (Shell)\nDESCRIPTION: These shell commands are used to set up the Solana NFT Explorer project, including cloning the repository, installing dependencies, and starting the development server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-explorer.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/JohnVersus/solana-nft-explorer.git\n\ncd solana-nft-explorer\n\nyarn install\n\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Example Response for Top NFT Collections API (JSON)\nDESCRIPTION: This JSON object shows an example response structure returned by the `getHottestNFTCollectionsByTradingVolume` Moralis API endpoint. It contains an array of NFT collections, each including details like rank, title, image URL, trading volume (USD), 24hr volume change percentage, floor price (USD), 24hr floor price change percentage, and average price (USD).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-trading-volume.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\n  {\n    \"rank\": 1,\n    \"collection_title\": \"Bored Ape Yacht Club\",\n    \"collection_image\": \"https://market-data-images.s3.us-east-1.amazonaws.com/tokenImages/0x2f1ef58880d01489b8d2c9ba759cf7b14db4ee8a55fd6e6b222ad050e7e00fb0.png\",\n    \"volume_usd\": \"8261189.224011\",\n    \"volume_24hr_perecent_change\": \"17.09\",\n    \"floor_price_usd\": \"79591.5288\",\n    \"floor_price_24hr_percent_change\": \"0.05\",\n    \"average_price_usd\": \"39717.255884668266\"\n  },\n  {\n    \"rank\": 2,\n    \"collection_title\": \"Mutant Ape Yacht Club\",\n    \"collection_image\": \"https://market-data-images.s3.us-east-1.amazonaws.com/tokenImages/0xab57ba0f4ce4424e60c477627f6551790b8946d45720240a3d258956e436f2e5.png\",\n    \"volume_usd\": \"3374077.733755\",\n    \"volume_24hr_perecent_change\": \"6.29\",\n    \"floor_price_usd\": \"16028.433180000002\",\n    \"floor_price_24hr_percent_change\": \"-0.69\",\n    \"average_price_usd\": \"15915.461008278302\"\n  },\n  {\n    \"rank\": 3,\n    \"collection_title\": \"CryptoPunks\",\n    \"collection_image\": \"https://market-data-images.s3.us-east-1.amazonaws.com/tokenImages/0x8e4d149625faffbdb3b63eb36668a4b470714c0e6c765e66200095a4ccb0234e.png\",\n    \"volume_usd\": \"1835336.891\",\n    \"volume_24hr_perecent_change\": \"30.13\",\n    \"floor_price_usd\": \"90913.539\",\n    \"floor_price_24hr_percent_change\": \"3.43\",\n    \"average_price_usd\": \"101963.16061111112\"\n  }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Getting ERC20 Token Metadata in Python\nDESCRIPTION: Python implementation for retrieving ERC20 token metadata using Moralis SDK. Uses the evm_api.token.get_token_metadata endpoint with the same functionality as the JavaScript/TypeScript versions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-token-metadata-by-token-addresses.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"addresses\": [\n        \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n        \"0x514910771AF9Ca656af840dff83E8264EcF986CA\"\n    ],\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.token.get_token_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for getWalletNFTs Endpoint\nDESCRIPTION: This JSON object illustrates the typical structure of a response from the Moralis `getWalletNFTs` endpoint. It includes pagination details (`total`, `page`, `page_size`, `cursor`), an array of NFT objects in the `result` field (each containing details like `token_address`, `token_id`, `owner_of`, `metadata`), and the synchronization `status`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json Response\n{\n  \"total\": 1456,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsid2FsbGV0QWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSJ9LCJrZXlzIjpbIjE2NjMyMzgxNzUuMDc3Il0sIndoZXJlIjp7Im93bmVyX29mIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1In0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6MTQ1NiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2NjgyNTUyfQ.E5DkWYvRTaFnVhgedRuT3IW-rb2V-ikFKwP2cg2Qf78\",\n  \"result\": [\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"4765809967066625256798886812262830659450023020194524584471225959000376492819\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"ba6d44b5f16be94283cecffeb784b7ca\",\n      \"block_number_minted\": \"15572796\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:06:08.153Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"84453794918345416145331514647027903846664455083247396107154093349515123913389\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"7c0212cd3daf1b6b64f193c6dc102fb4\",\n      \"block_number_minted\": \"15572811\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:09:09.838Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"16476931145019337030786748713476010946621971075817308111460324192065814192354\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"627ffc76405a90ee940cb91f7e90b294\",\n      \"block_number_minted\": \"15572818\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:11:34.545Z\",\n      \"minter_address\": null\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Initial Logic for sendToMany Function in Solidity\nDESCRIPTION: Adds initial logic to the `sendToMany` function. It requires that `msg.value` is greater than zero (for gas payment), retrieves the token address using `gateway.tokenAddresses`, transfers the specified ERC-20 tokens from the caller (`msg.sender`) to this contract, approves the Axelar gateway to spend these tokens, and encodes the destination recipient addresses into bytes for the GMP message payload.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.19;\n\n// Imports\n\ncontract GMPDistribution is AxelarExecutable {\n\n    IAxelarGasService public immutable gasService;\n\n    constructor() AxelarExecutable(_gateway) {}\n\n    function sendToMany(\n    string memory _destChain,\n    string memory _destContractAddr,\n    address[] calldata _destinationAddrs,\n    string memory _symbol,\n    uint256 _amount\n    ) external payable {\n        // Check that funds have been sent. If no\n        // funds have been sent, revert the transaction.\n        require(msg.value > 0, \"Gas payment required\");\n\n        // Use the gateway contract to obtain the address\n        // of the ERC-20 token you will be sending from\n        // chain A to chain B.\n        address tokenAddress = gateway.tokenAddresses(_symbol);\n\n        // Transfer the ERC-20 token from the sender's\n        // wallet to this contract.\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), _amount);\n\n        // Grant approval to the gateway contract to\n        // transfer funds on this contract's behalf.\n        IERC20(tokenAddress).approve(address(gateway), _amount);\n\n        // Encode and send a GMP message along with the\n        // token. _destinationAddrs is a list that contains\n        // the addresses of the ERC-2O token's final\n        // recipients once the transaction has arrived\n        // at the destination chain.\n        bytes memory recipientAddressesEncoded = abi.encode(_destinationAddrs);\n\n        // Output: a list of addresses in bytes\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EvmNative Instance\nDESCRIPTION: Shows how to create and use an EvmNative instance for handling native token amounts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmNative } from \"@moralisweb3/common-evm-utils\";\n\nconst oneEth = EvmNative.create(1, \"ether\");\n\noneEth.wei; // 1000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Configuring MoralisNextApi for Solana Authentication\nDESCRIPTION: Setting up MoralisNextApi in [...moralis].ts/js file to configure authentication settings, including timeout, domain, and expiration time for Solana wallet authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\n\nconst DATE = new Date();\nconst FUTUREDATE = new Date(DATE);\nFUTUREDATE.setDate(FUTUREDATE.getDate() + 1);\n\nconst { MORALIS_API_KEY, APP_DOMAIN, NEXTAUTH_URL } = process.env;\n\nif (!MORALIS_API_KEY || !APP_DOMAIN || !NEXTAUTH_URL) {\n  throw new Error(\n    \"Missing env variables. Please add the required env variables.\"\n  );\n}\n\nexport default MoralisNextApi({\n  apiKey: MORALIS_API_KEY,\n  authentication: {\n    timeout: 120,\n    domain: APP_DOMAIN,\n    uri: NEXTAUTH_URL,\n    expirationTime: FUTUREDATE.toISOString(),\n    statement: \"Sign message to authenticate.\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Owners for an NFT Contract using SimpleHash API\nDESCRIPTION: SimpleHash API endpoint to retrieve the owners of all NFTs within a specific contract on a given chain. Requires `chain` and `contract_address` as path parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/owners/{chain}/{contract_address}/\n```\n\n----------------------------------------\n\nTITLE: Rendering Premium Endpoint Badge Component in React\nDESCRIPTION: Renders the title of the page with a Premium Endpoint Badge component to indicate this API requires a Business plan or higher.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/02-Get Token Metadata/get-token-details.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# Get Token Details <PremiumEndpointBadge />\n```\n\n----------------------------------------\n\nTITLE: Selective Data Return Function\nDESCRIPTION: Implementation showing how to return only specific data (timestamp) from the block query to optimize data transfer.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetBlockTimestampData {\n  blockNumberOrHash: string;\n}\n\nexport const getBlockTimestamp = functions.https.onCall(\n  async (data: GetBlockTimestampData) => {\n    const response = await Moralis.EvmApi.block.getBlock({\n      chain: \"0x1\",\n      blockNumberOrHash: data.blockNumberOrHash,\n    });\n    return response.result.result.timestamp.toISOString();\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the Solana Tic Tac Toe Frontend\nDESCRIPTION: Command to start the frontend application in development mode on localhost port 3000.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying User Profile and Handling Session in Next.js with JavaScript\nDESCRIPTION: This React component (`User`) displays authenticated user information fetched server-side. It utilizes Next.js's `getServerSideProps` to retrieve the user session using `getSession` from `next-auth/react`. If no session exists (user is not authenticated), it redirects the user to the `/signin` page. Otherwise, it passes the `session.user` object as a prop to the component for display. A 'Sign out' button is provided, using `signOut` from `next-auth/react` to clear the session and redirect the user back to the sign-in page. The primary dependency is `next-auth/react`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSession, signOut } from \"next-auth/react\";\n\n// gets a prop from getServerSideProps\nfunction User({ user }) {\n  return (\n    <div>\n      <h4>User session:</h4>\n      <pre>{JSON.stringify(user, null, 2)}</pre>\n      <button onClick={() => signOut({ redirect: \"/signin\" })}>Sign out</button>\n    </div>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  const session = await getSession(context);\n\n  // redirect if not authenticated\n  if (!session) {\n    return {\n      redirect: {\n        destination: \"/signin\",\n        permanent: false,\n      },\n    };\n  }\n\n  return {\n    props: { user: session.user },\n  };\n}\n\nexport default User;\n\n```\n\n----------------------------------------\n\nTITLE: Example AWS CLI Configuration Interaction\nDESCRIPTION: Shows an example interaction when running `aws configure`. Users replace the example keys with their own IAM user credentials. The default region and output format can be left blank by pressing Enter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE\nAWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nDefault region name [None]: ENTER\nDefault output format [None]: ENTER\n```\n\n----------------------------------------\n\nTITLE: Defining Async Function Signature for Blockchain Data in C#\nDESCRIPTION: Defines the signature for an asynchronous static function `DisplayCryptoData`. This function is intended to handle the logic for fetching and displaying blockchain data, taking a wallet `address` (string) and a `chainId` (`ChainList` enum) as input parameters. It returns a `Task` because it performs asynchronous operations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ninternal static async Task DisplayCryptoData(string address, ChainList chainId)\n{\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana Network in Moralis\nDESCRIPTION: Demonstrates how to configure the default Solana network (mainnet or devnet) for Solana API calls.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/cross-chain-requests.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  defaultSolNetwork: SolNetwork.DEVNET,\n});\n\nMoralis.SolApi.account.getBalance({\n  address: \"ADDRESS\",\n});\n```\n\n----------------------------------------\n\nTITLE: Starting React Portfolio Dashboard Application\nDESCRIPTION: This bash command starts the React application, making it accessible at http://localhost:3000/. It's the final step in setting up the portfolio dashboard for development and testing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Implementing Solana Micro Blogger Smart Contract\nDESCRIPTION: Rust code for the Solana program that handles blog post creation and tracking. It includes structs, utility functions, and the main program logic.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse borsh::{BorshDeserialize, BorshSerialize};\nuse std::str;\n\nuse solana_program:{\n    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, msg,\n    program_error::ProgramError, pubkey::Pubkey,\n};\n\n// Create a struct to store Blog count\n#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct BlogCount {\n    pub total_blogs: u32,\n}\n\n// Function to convert buffer array back to string\npub fn buffer_to_string(buffer: &[u8]) -> &str {\n    let s = match str::from_utf8(buffer) {\n        Ok(v) => v,\n        Err(e) => panic!(\"Invalid UTF-8 sequence: {}\", e),\n    };\n    return s;\n}\n\nentrypoint!(micro_blog);\n\npub fn micro_blog(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    instruction_data: &[u8],\n) -> ProgramResult {\n    let data = buffer_to_string(&instruction_data);\n\n    let account = &accounts[0];\n\n    // Check if the account is owned by this program, else throw an error.\n    if account.owner != program_id {\n        msg!(\n            \"Account {:?} does not have the program id {} as owner\",\n            account,\n            program_id\n        );\n        return Err(ProgramError::IncorrectProgramId);\n    }\n\n    // Increment and store the number of times user created a new blog.\n    let mut blog_counter = BlogCount::try_from_slice(&account.data.borrow())?;\n    blog_counter.total_blogs += 1;\n    blog_counter.serialize(&mut &mut account.data.borrow_mut()[..])?\n\n    // Save the data to the transaction logs\n    msg!(\"Author: {}\", accounts[1].key);\n    msg!(\"Blog No: {}\", blog_counter.total_blogs);\n    msg!(\"Blog: {}\", data);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching DEX Token Pair Address via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve the DEX pair address for two given token addresses using the Moralis Web3 API v2.2. Replace ':token0_address' and ':token1_address' with the respective token contract addresses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:token0_address/:token1_address/pairAddres\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Policy in ASP.NET Core C#\nDESCRIPTION: This C# snippet demonstrates how to configure a Cross-Origin Resource Sharing (CORS) policy in an ASP.NET Core application using the `AddCors` extension method on `IServiceCollection`. It defines a policy named using the `AllowedOrigins` variable (expected to be defined earlier) that permits requests specifically from the origin `http://127.0.0.1:5500` and allows any HTTP header and method for requests from that origin. This configuration is typically added in `Program.cs` after creating the `WebApplicationBuilder`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Define CORS policy\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(AllowedOrigins,\n                    policy =>\n                    {\n                        policy.WithOrigins(\"http://127.0.0.1:5500\")\n                                            .AllowAnyHeader()\n                                            .AllowAnyMethod();\n                    });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing API and UI Components for Moralis Web3 Data API Integration - JavaScript\nDESCRIPTION: This snippet imports essential React UI components and configuration files needed to embed the Moralis Web3 Data API reference for searching tokens within a documentation site. Dependencies include prebuilt UI components like 'ApiReference', 'Admonition', and badge indicators, as well as a JSON configuration file required for properly rendering API details. The snippet prepares the environment for config-driven, interactive API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/09-Search Tokens/token-search-api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\nimport { PremiumEndpointBadge } from \"@site/src/components/PremiumEndpointBadge/PremiumEndpointBadge.js\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Axios in Angular - TypeScript\nDESCRIPTION: Imports the 'axios' HTTP client library to make asynchronous HTTP requests in Angular components. Placed at the top of the balances component TypeScript file. Required for performing API calls from the front-end to the backend server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from \"axios\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Tic Tac Toe Solana Program\nDESCRIPTION: Complete Solana smart contract code for the Tic Tac Toe game, including game logic, win checking, and state management functions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_3\n\nLANGUAGE: rs\nCODE:\n```\nuse borsh::{BorshDeserialize, BorshSerialize};\nuse solana_program:{\n    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, msg, pubkey::Pubkey,\n};\n\npub fn win_check(moves: [u32; 9]) -> u32 {\n    // Player 1 move will be marked as 1 and player 2 as 2\n    let [m1, m2, m3, m4, m5, m6, m7, m8, m9] = moves;\n    if (m1 == 1 && m2 == 1 && m3 == 1)\n        || (m1 == 1 && m4 == 1 && m7 == 1)\n        || (m7 == 1 && m8 == 1 && m9 == 1)\n        || (m3 == 1 && m6 == 1 && m9 == 1)\n        || (m1 == 1 && m5 == 1 && m9 == 1)\n        || (m3 == 1 && m5 == 1 && m7 == 1)\n        || (m2 == 1 && m5 == 1 && m8 == 1)\n        || (m4 == 1 && m5 == 1 && m6 == 1)\n    {\n        // Condition for Player 1 Win\n        return 1;\n    } else if (m1 == 2 && m2 == 2 && m3 == 2)\n        || (m1 == 2 && m4 == 2 && m7 == 2)\n        || (m7 == 2 && m8 == 2 && m9 == 2)\n        || (m3 == 2 && m6 == 2 && m9 == 2)\n        || (m1 == 2 && m5 == 2 && m9 == 2)\n        || (m3 == 2 && m5 == 2 && m7 == 2)\n        || (m2 == 2 && m5 == 2 && m8 == 2)\n        || (m4 == 2 && m5 == 2 && m6 == 2)\n    {\n        // Condition for Player 2 Win\n        return 2;\n    } else if (m1 == 1 || m1 == 2)\n        && (m2 == 1 || m2 == 2)\n        && (m3 == 1 || m3 == 2)\n        && (m4 == 1 || m4 == 2)\n        && (m5 == 1 || m5 == 2)\n        && (m6 == 1 || m6 == 2)\n        && (m7 == 1 || m7 == 2)\n        && (m8 == 1 || m8 == 2)\n        && (m9 == 1 || m9 == 2)\n    {\n        // Condition for Draw\n        return 3;\n    } else {\n        return 0;\n    }\n}\n\n#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct GameAccount {\n    pub player1: String,\n    pub player2: String,\n    pub moves: [u32; 9],\n    pub game_status: u32,\n    pub next_move: u32,\n}\n\nentrypoint!(tic_tac_toe);\n\npub fn tic_tac_toe(\n    _program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    instruction_data: &[u8],\n) -> ProgramResult {\n    let game_account = &accounts[0];\n    let player1 = accounts[1].key.to_string();\n    let player2 = accounts[2].key.to_string();\n\n    let instruction: u32 = instruction_data[0].into();\n    let played_by: u32 = instruction_data[1].into();\n    let move_positon: usize = instruction_data[2].into();\n\n    match instruction {\n        // Create New Game or Reset the Game Data\n        0 => {\n            msg!(\"Instruction 0 Start\");\n            let game_data = GameAccount {\n                player1,\n                player2,\n                moves: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                game_status: 0,\n                next_move: 1,\n            };\n            msg!(\"Game Creation Successful!!\");\n            msg!(\"Player 1: {:?}\", game_data.player1);\n            msg!(\"Player 2: {:?}\", game_data.player2);\n            game_data.serialize(&mut &mut game_account.data.borrow_mut()[..])?;\n            msg!(\"Instruction 0 End\");\n        }\n        // Play game!!\n        1 => {\n            msg!(\"Instruction 1 Start\");\n            let mut game_data = GameAccount::try_from_slice(&game_account.data.borrow())?;\n            if game_data.game_status == 0 {\n                msg!(\"Player 1: {:?}\", game_data.player1);\n                msg!(\"Player 2: {:?}\", game_data.player2);\n\n                // Verify and updating moves in Game Account\n                if (game_data.moves[move_positon] == 0) && (game_data.next_move == played_by) {\n                    if game_data.next_move == 1 {\n                        game_data.moves[move_positon] = 1;\n                        game_data.next_move = 2\n                    } else if game_data.next_move == 2 {\n                        game_data.moves[move_positon] = 2;\n                        game_data.next_move = 1\n                    }\n                } else {\n                    msg!(\" Wrong Move\");\n                }\n\n                let game_status = win_check(game_data.moves);\n\n                match game_status {\n                    0 => {\n                        // Log the next player to move\n                        msg!(\"Next move: Player {}\", game_data.next_move);\n                    }\n                    1 => {\n                        game_data.game_status = 1;\n                        msg!(\"Player 1 won the game.\");\n                    }\n                    2 => {\n                        game_data.game_status = 2;\n                        msg!(\"Player 2 won the game.\");\n                    }\n                    3 => {\n                        game_data.game_status = 3;\n                        msg!(\"It's a Draw.\");\n                    }\n                    _ => {\n                        msg!(\"Game Error!!\");\n                    }\n                }\n                // Write the updated data to account.\n                game_data.serialize(&mut &mut game_account.data.borrow_mut()[..])?;\n                msg!(\"Instruction 1 End\");\n            } else {\n                msg!(\" Wrong Move.\");\n            }\n        }\n        // Invalid Instruction\n        _ => {\n            msg!(\"Invalid Instruction\");\n        }\n    }\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component with Info Admonition\nDESCRIPTION: Renders the API reference component with configuration and includes an info admonition component with a note about RPC schema documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/_extended-rpc-methods.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.rpc.evmRpc} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the respective RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component and Configuration in JSX\nDESCRIPTION: This snippet imports the ApiReference component and the configuration object for the API reference. It then renders the ApiReference component with the specific configuration for the getAddresses endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/reference/03-Profiles/get-addresses.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.auth.getAddresses} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Pump.fun Token Bonding Status via Moralis API (cURL, Shell)\nDESCRIPTION: This cURL command demonstrates how to fetch the bonding status of a specific Pump.fun token by making an authenticated GET request to the Moralis Solana API endpoint. Requirements include a valid Moralis API key and the token address (mint). The request returns the bonding progress for the token as a JSON object. The endpoint and required headers must be provided correctly. Output will be a JSON response containing the token's mint address and its bonding progress percentage.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/09-get-bonding-status.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/token/mainnet/H2p8S7Ssd3mrBft1bcDGnzW8KNRAGtPTtJLv1tnupump/bonding-status' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components - React (JSX) - JavaScript\nDESCRIPTION: This snippet imports necessary React components used to compose the documentation page, including ApiReference for rendering API references, Admonition for callouts, Link for hyperlinks, and a JSON configuration object for API endpoint configuration. All components are dependencies from the Docusaurus documentation framework and project-specific directories. No parameters are processed at this step. This sets up the environment required for rendering subsequent API documentation blocks.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/05-Get Transactions/get-wallet-transactions-verbose.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Auth Utils Package\nDESCRIPTION: CLI command for installing the Moralis authentication utilities package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnpm install @moralisweb3/client-firebase-auth-utils\n```\n\n----------------------------------------\n\nTITLE: Initializing a Serverless Framework Project\nDESCRIPTION: This command starts the Serverless Framework's interactive project creation wizard. It guides the user through selecting a template (e.g., AWS NodeJS Starter), naming the project, and initial setup options.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nserverless\n```\n\n----------------------------------------\n\nTITLE: Sample Response from GET /balances Endpoint - JSON\nDESCRIPTION: Provides an example JSON response as returned by the Express backend when successfully querying wallet balances. Shows structure with address, native balance, and an array of token balances in user-friendly format. Useful for understanding expected shape of data consumed by the Angular client.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n  \"nativeBalance\": \"0.010201\",\n  \"tokenBalances\": [\"101715701.444169451516503179 APE\", \"0.085 WETH\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Authentication Message\nDESCRIPTION: TypeScript function to request authentication message from Moralis Auth API\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function requestMessage({ address, chain, network }: { address: string; chain: string; network: 'evm' }) {\n  const result = await Moralis.Auth.requestMessage({\n    address,\n    chain,\n    network,\n    domain: 'defi.finance',\n    statement: 'Please sign this message to confirm your identity.',\n    uri: 'https://defi.finance',\n    expirationTime: '2023-01-01T00:00:00.000Z',\n    timeout: 15,\n  });\n\n  const { message } = result.toJSON();\n\n  return message;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner UI Component - TypeScript/TSX\nDESCRIPTION: Imports the ApiBanner React component, which may provide notification or banner UI within the documentation. This component is written in TypeScript with TSX syntax, indicating typed React usage. Dependency on proper file paths and TSX compilation is required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-contract-sale-prices.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables (Shell/.env.local)\nDESCRIPTION: This snippet shows the content structure for the `.env.local` file. It requires setting the `MORALIS_API_KEY` environment variable, which is obtained from the Moralis admin panel and is necessary for authenticating requests to the Moralis Web3 APIs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Required - get from https://admin.moralis.com/web3apis\nMORALIS_API_KEY= xxx\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Configurations - TypeScript/React\nDESCRIPTION: This import brings in a JSON configuration file that likely contains details required for rendering the API reference, such as endpoint information or parameter metadata. It forms a necessary dependency for dynamic generation or rendering of API documentation content. The data is imported as a variable named config, used to populate the relevant API reference section.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/02-Get Wallet Token Balances/get-wallet-token-balances.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference and UI Components in React (JavaScript)\nDESCRIPTION: This snippet imports React components and JSON configuration used to construct the documentation page. The components provide API reference rendering, information callouts, and link elements within the Docusaurus documentation framework. Required dependencies include @site/src/components/ApiReference, @theme/Admonition, @docusaurus/Link, and a configuration JSON at @site/docs/configs/api-reference/configsV2.json.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/12-Market Data API/get-top-erc20-tokens-by-market-cap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Starting the Solana NFT Burner Application\nDESCRIPTION: Command to start the NextJS application on localhost port 3000.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-burner.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Balance Triggers with Moralis Streams (JSON)\nDESCRIPTION: This snippet shows the configuration for the 'getNativeBalances' parameter used when creating or editing a Moralis Stream. It specifies an array of objects where each object defines 'selectors' for extracting addresses from webhook data and a 'type' indicating which part of the webhook to target. All selectors must be valid and referenceable, and 'type' should match the webhook structure; returned balances correspond directly to the addresses extracted using the selectors. No external dependencies except for a working Moralis Streams setup are required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/get-native-balances.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"getNativeBalances\": [\n  {\n   \\tselectors: [\\\"$fromAddress\\\", \\\"$toAddress\\\"],\n    type: 'tx'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference and Configurations (JavaScript)\nDESCRIPTION: Imports the ApiReference React component and a JSON configuration required for the Moralis Web3 Data API reference display. This establishes the necessary dependencies to render API documentation components in the page. No parameters are taken at this stage, but it is dependent on a valid module resolution strategy and the correct config file path.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/02-Get NFT Metadata/get-nft-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Fallbacks in `next.config.js` (JavaScript)\nDESCRIPTION: Modifies the `next.config.js` file to add webpack fallbacks for Node.js core modules (`fs`, `net`, `tls`). This is necessary because Webpack 5 (used by Next.js) no longer provides polyfills for these modules automatically, and they are required by RainbowKit v1+ and its dependency `viem`. This configuration prevents build errors related to these missing modules.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  webpack: (config) => {\n    config.resolve.fallback = { fs: false, net: false, tls: false };\n    return config;\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Adding Solana Dependencies with Cargo\nDESCRIPTION: Installs the required Solana program and Borsh serialization packages for contract development.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo add solana_program\ncargo add borsh\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uniswap V2 Pair Address using Moralis Python SDK\nDESCRIPTION: This Python script utilizes the Moralis Python SDK (`moralis`) to fetch the Uniswap V2 pair address. It sets up parameters including the exchange ('uniswapv2'), the two token addresses (`token0_address`, `token1_address`), and the chain ('eth'). The `evm_api.defi.get_pair_address` function is called with the API key and parameters, and the result (containing token info and the pair address) is printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-address-of-a-liquidity-pool.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"exchange\": \"uniswapv2\",\n    \"token0_address\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    \"token1_address\": \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.defi.get_pair_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Volume Stats by Chain via Moralis API\nDESCRIPTION: Fetches overall volume statistics grouped by blockchain via the Moralis Deep Index API v2.2. This endpoint provides aggregated volume data across different chains supported by Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/volume/chains\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok Tunnel\nDESCRIPTION: Creates an ngrok tunnel to expose the local Express server on port 3000 to the internet.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Implementing Disable Totals with Moralis API in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement the Disable Totals feature in TypeScript by setting the disableTotal parameter to true when making a getWalletNFTs API call to Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-02-01-breaking-change.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\n\ntry {\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = \"eth\";\n\n  const disableTotal = true;\n\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n    disableTotal,\n  });\n\n  console.log(response?.result);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Normalized NFT Metadata with TypeScript\nDESCRIPTION: This snippet shows how to use the Moralis EvmApi to fetch normalized NFT metadata for a specific token on the Ethereum chain using TypeScript. It requires the Moralis library and API key for authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/02-NFT Metadata/metadata-normalization.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\nconst tokenId = \"1\";\n\nawait Moralis.start({\n  apiKey: \"<YOUR_API_KEY>\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.nft.getNFTMetadata({\n  address,\n  chain,\n  tokenId,\n  normalizeMetadata: true,\n});\n\nconsole.log(response.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration in JSX\nDESCRIPTION: This snippet imports the ApiReference component and the configuration object for the token metadata API. It then renders the ApiReference component with the specific configuration for the getTokenMetadata endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/01-Get Tokens/get-token-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.token.getTokenMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles in React Component (JavaScript)\nDESCRIPTION: Imports the `styles.css` file into the `App.js` component. This is a standard practice in React applications to apply CSS styling defined in an external file to the component and its children. Assumes `styles.css` exists in the same directory as `App.js`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-tradingview-lightweight-charts-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Filtering ERC20 Transfers Using Advanced Options in JSON\nDESCRIPTION: This JSON snippet demonstrates how to use the advancedOptions object to filter ERC20 'Transfer' events on Moralis Streams. It specifies a 'topic0' to match transfers, applies a 'filter' composed of multiple conditions (matching a specific 'from' address and a 'gt' comparison on the 'amount'), and sets 'includeNativeTxs' to false. To use this configuration, you must set these options in your Moralis Streams API request; no external dependencies other than Moralis Streams are needed. Inputs: 'topic0' is a string for the event signature, 'filter' is an object for custom logic, and 'includeNativeTxs' is a boolean specifying if native transactions should be included; expected output is that only the specified transfer events are delivered to your stream.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/useful-streams-options.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"topic0\\\": \\\"Transfer(address,address,uint256)\\\",\\n  \\\"filter\\\": {\\n    \\\"and\\\": [\\n      { \\\"eq\\\": [\\\"from\\\", \\\"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\\\"] },\\n      { \\\"gt\\\": [\\\"amount\\\", \\\"100000000000000000000\\\"] }\\n    ]\\n  },\\n  \\\"includeNativeTxs\\\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Net Worth via Moralis API (Exclusive Section)\nDESCRIPTION: Exclusive Moralis API endpoint (GET request) for calculating the net worth of a specific wallet, identified by its `:address`. This endpoint is listed again under exclusive capabilities, emphasizing its role in advanced wallet analysis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_38\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/wallets/:address/net-worth\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Controls in React TypeScript\nDESCRIPTION: Implementation of pagination logic including state management, page navigation functions, and UI rendering. Uses React hooks (useState, useEffect) to manage page state and render NFT data in grid format with next/previous navigation controls.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-explorer.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `pages/index.jsx`\n\n// State variable to store the page result and page number data.\nconst [pageResult, setPageResult] = useState([]);\nconst [page, setPage] = useState(1);\n\nconst prevPage = () => {\n  setPageResult([]);\n  if (page !== 1) {\n    setPage(page - 1);\n  }\n};\n\n// 2️⃣\n// Next page function updates the page state with next page number.\nconst nextPage = () => {\n  setPageResult([]);\n  if (page < Math.ceil(searchResult.length / 10)) {\n    setPage(page + 1);\n  }\n};\n\n// 4️⃣\n// loadPage function updates the data in page result state with next 10 NFT data.\nconst loadPage = () => {\n  setPageResult(searchResult?.slice((page - 1) * 10, page * 10));\n};\n\n// 3️⃣\n// Change in page number triggers the useState and invokes the `loadPage` function\nuseEffect(() => {\n  loadPage();\n}, [searchResult, page]);\n\nreturn (\n  //...\n  // 6️⃣\n  // The same process is repeated when we click on the previous page button.\n    <Button colorScheme=\"teal\" variant=\"ghost\" onClick={prevPage} disabled={page === 1}>\n      <ArrowLeftIcon />\n    </Button>\n    <Input\n      textAlign={'right'}\n      placeholder={page}\n      htmlSize={2}\n      width=\"auto\"\n      onInput={pageInputHandler}\n      variant=\"flushed\"\n      value={page}\n    />\n    /{searchResult && Math.ceil(searchResult.length / 10)}\n    // 1️⃣\n    // Clicking on the next page button calls the `nextPage` function\n    <Button\n      colorScheme=\"teal\"\n      variant=\"ghost\"\n      onClick={nextPage}\n      disabled={page >= Math.ceil(searchResult.length / 10)}\n    >\n      <ArrowRightIcon />\n    </Button>\n  //...\n\n  //...\n  // 5️⃣\n  // Whenever the `pageResult` state is update this part of the UI is\n  // re-rendered with the NFT data from the `pageResult`.\n  <VStack w={'full'} h={'650'} scrollBehavior={'auto'} borderWidth={'thin'} boxShadow={'inherit'} padding={'1'}>\n    {pageResult?.length > 0 ? (\n      <Grid templateColumns=\"repeat(5, 1fr)\" gap={6} overflow=\"auto\">\n        {pageResult?.map((e, i) => {\n          return <NFTCard key={i} nftAddress={e.mint} filterQuery={query} />;\n        })}\n      </Grid>\n    ) : (\n      <Center height={500} color=\"GrayText\">\n        <i>No Data</i>\n      </Center>\n    )}\n  </VStack>\n\n  //...\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Smart Account NFT Transfers in Python using Moralis SDK\nDESCRIPTION: This Python snippet shows how to retrieve NFT transfers for a specific smart contract address using the Moralis Python SDK. It imports the `evm_api` module, defines the API key and request parameters (including the address and chain 'eth'), calls the `evm_api.nft.get_wallet_nft_transfers` function, and prints the resulting dictionary. Requires the `moralis` Python package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-NFT-transfers-of-smart-account.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Import the necessary module from the Moralis library\nfrom moralis import evm_api\n\n# Define your API key\napi_key = \"YOUR_API_KEY\"\n\n# Define the parameters for the NFT transfer query\nparams = {\n    \"address\": \"0x350845DD3f03F1355233a3A7CEBC24b5aAD05eC5\",\n    \"chain\": \"eth\"\n}\n\n# Use Moralis' EvmApi to retrieve NFT transfer data\nresult = evm_api.nft.get_wallet_nft_transfers(\n    api_key=api_key,\n    params=params,\n)\n\n# Print the result\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Axelar Services in Solidity Contract Constructor\nDESCRIPTION: Defines the constructor for the `GMPDistribution` contract. It accepts the addresses of the Axelar Gateway (`_gateway`) and Gas Service (`_gasService`) as parameters, calls the constructor of the parent `AxelarExecutable` contract with the gateway address, and stores the gas service address in an immutable state variable.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.19;\n\n// Imports\n\ncontract GMPDistribution is AxelarExecutable {\n\n    IAxelarGasService public immutable gasService;\n\n    constructor(\n        // Set address for contracts in the constructor.\n        address _gateway,\n        address _gasService\n    ) AxelarExecutable(_gateway) {\n        gasService = IAxelarGasService(_gasService);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing components for API Reference documentation in React\nDESCRIPTION: Code snippet that imports the ApiReference component and configuration data for displaying the requestBind API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/reference/03-Profiles/request-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK in Express App (JavaScript)\nDESCRIPTION: Updates 'backend/index.js' to integrate the Moralis SDK. It requires 'moralis', 'dotenv' (to load the API key from '.env'), and configures the application to use CORS. The basic Express server setup remains, listening on port 8080.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nrequire(\"dotenv\").config();\n\nconst app = express();\nconst port = 8080;\n\napp.use(cors());\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with Authenticated Supabase Client (JavaScript)\nDESCRIPTION: Defines an asynchronous JavaScript function `getUser` for the client-side. This function uses the previously authenticated Supabase client instance (`_supabaseAuthenticated`), which was configured with the user's JWT. It performs a SELECT query on the `users` table. Because the client includes a valid JWT, Supabase's RLS policy grants access. The fetched user data is then passed to the `renderUser` function to display it.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst getUser = async (token) => {\n  const { data } = await _supabaseAuthenticated.from('users').select('*');\n  renderUser(data);\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Executes the `yarn run dev` command to start the Next.js development server. This makes the Solana NFT minter application accessible locally, typically at `http://localhost:3000`. Requires project dependencies to be installed first.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-minter.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: NodeJS Project package.json Structure - JSON\nDESCRIPTION: Sample package.json generated during project initialization. This file records metadata, main entry point, available npm scripts, and licensing details, and is central to managing the project's dependencies and scripts. Key properties include name, version, main script, scripts (such as test/start), and license.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"simple-nodejs-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Polygon Block Data using Moralis EVM API\nDESCRIPTION: Example of how to query block information from the Polygon network by specifying the chain parameter in the API call.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/cross-chain-requests.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nevmApi.block.getBlock({\n  blockNumberOrHash: \"33000000\",\n  chain: EvmChain.POLYGON,\n});\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Script via Node.js in Shell\nDESCRIPTION: This shell command executes a JavaScript file named `index.js` using the Node.js runtime. It requires Node.js to be installed and accessible in the system's PATH environment variable.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/partials/_run-the-script.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Creating Value Range Filter for USDC Transfers - Moralis Streams API - JSON\nDESCRIPTION: Defines a JSON filter object for the Moralis Streams UI that captures transfer events with values greater than 5,000 USDC and less than 50,000 USDC, taking contract decimal precision into account. It uses 'and', 'gt', and 'lt' operators on the 'value' field (expressed in smallest units, e.g., 5000000000 for USDC with 6 decimals). Requires valid Stream, ABI event, and appropriate parameters to deliver filtered transfer events.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/filter-streams.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"and\": [{ \"gt\": [\"value\", \"5000000000\"] }, { \"lt\": [\"value\", \"50000000000\"] }]\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Request Method Implementation\nDESCRIPTION: Implementation of the requestMessage method for Moralis authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function requestMessage(address, chain) {\n\n  const result = await Moralis.Auth.requestMessage({\n    address,\n    chain,\n    networkType: NETWORK,\n    domain: DOMAIN,\n    statement: STATEMENT,\n    uri: URI,\n    expirationTime: EXPIRATION_TIME,\n    timeout: TIMEOUT,\n  })\n\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Volume Statistics by Chain via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve overall volume statistics aggregated by blockchain using the Moralis Web3 API v2.2. Requires specifying the chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/volume/chains\n```\n\n----------------------------------------\n\nTITLE: Initializing a Firebase Project via CLI (Shell)\nDESCRIPTION: Initiates the Firebase project setup process within the current directory using the Firebase CLI. This command guides the user through selecting features (like Hosting, Functions, Emulators), choosing a Firebase project, and configuring project settings. Requires Firebase CLI to be installed and authenticated.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfirebase init\n```\n\n----------------------------------------\n\nTITLE: Displaying Example Pair Reserves Output - JSON\nDESCRIPTION: This sample JSON response shows the expected output from the Moralis 'getPairReserves' endpoint, containing 'reserve0' and 'reserve1' as string representations of liquidity balances for each token in the Sushiswap V2 pair. Outputs are strings for precision. Actual values will depend on the queried pair address and chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-reserves.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reserve0\": \"164603264012529614075996\",\n  \"reserve1\": \"854278497345719157300\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Reference Component using React - JavaScript/JSX\nDESCRIPTION: This snippet imports the ApiReference React component and a configuration object for API references, then renders the ApiReference component with Solana NFT Metadata parameters. Dependencies include React, project-specific components, and the config file. The input to ApiReference is the object 'config.solana.getNFTMetadata', which controls what is rendered for API documentation. Output is a rendered React element embedding the API reference for Solana NFT metadata. The snippet must be executed in a React environment supporting ES Modules and JSX.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/nft-api/get-nft-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.solana.getNFTMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference and Doc Components in JavaScript\nDESCRIPTION: This snippet imports essential React components and the configuration for the API reference from local project modules. Dependencies include React and the documentation site's theme components. Inputs include no explicit parameters, but the imported configuration or components will be used elsewhere in the file. No output is produced directly from this import block.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/08- Get Wallet Details/get-wallet-stats.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component in JSX\nDESCRIPTION: This JSX code renders the ApiReference component, passing configuration properties specific to the Solana 'getBondingTokensByExchange' endpoint using the spread syntax (...). The component uses this configuration (likely defining parameters, responses, and potentially code examples) to display the detailed API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Pump Fun Tokens/02-get-bonding-tokens-by-exchange.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getBondingTokensByExchange} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Verify Bind Request\nDESCRIPTION: This JSX snippet renders the `ApiReference` component, passing specific configuration properties (`config.auth.verifyRequestBind`) to display the documentation for the 'Verify bind request' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/reference/03-Profiles/verify-request-bind.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.auth.verifyRequestBind} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Content in Python\nDESCRIPTION: Python implementation for fetching block content using Moralis Block API. Uses the get_block function with block_number_or_hash and chain parameters to retrieve block data from the Ethereum network.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-content-by-block-number.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"block_number_or_hash\": \"15863321\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.block.get_block(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: React Component Import Declarations\nDESCRIPTION: Import statements for React components used in the documentation page, including API reference components and UI elements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/02-Get Transactions/get-decoded-transaction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList in React (JavaScript/TypeScript)\nDESCRIPTION: This snippet imports the DocCardList component, a Docusaurus-specific React module designed to render a list of documentation cards dynamically. It is typically used to present navigation for documentation sections or API references. The JSX usage of <DocCardList /> will output a styled list; prerequisites include Docusaurus and its necessary theming packages. No input props are specified in this instance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/balance-api/balance-api.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata and Formatting - Markdown\nDESCRIPTION: Provides frontmatter metadata for documentation navigation, including sidebar position, label, slug, and a short description of eth_getTransactionByHash. Also includes a Markdown heading for the reference section. This configuration is essential for Docusaurus to correctly present and organize the page within the site.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getTransactionByHash.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nsidebar_position: 17\nsidebar_label: eth_getTransactionByHash\nslug: /rpc-nodes/reference/eth_getTransactionByHash\ndescription: eth_getTransactionByHash returns information about a transaction for a given hash. Useful for tracking and verifying specific transactions.\n---\n\n## Get Transaction By Hash\n```\n\n----------------------------------------\n\nTITLE: Receiving and Logging Profile Props in Component (JavaScript)\nDESCRIPTION: Modifies the `Home` functional component in `pages/index.js` to accept the `profile` data passed via props from `getServerSideProps`. It logs the received profile object to the browser console for verification.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Home({ profile }) {\n  console.log(profile);\n  \n  // rest of Home\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in JSX\nDESCRIPTION: This code snippet imports the ApiBanner component from a specific file path. It's likely used to display a banner related to the API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/04-Get Token Transfers/get-token-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Graduated Tokens API Example Response (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a graduated tokens API response from Moralis. The response includes detailed information for each token, such as addresses, names, prices in SOL/USD, liquidity, fully diluted valuation, and graduation timestamp. Dependencies: Moralis API endpoint. Inputs: None (example data). Outputs: result array with token metadata. Useful as a reference for deserializing or inspecting actual API results.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/08-get-graduated-tokens.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": [\n    {\n      \"tokenAddress\": \"Cy12AGDENaqgdM7A6o8R7TUATdDY2rudLMTpbzbGpump\",\n      \"name\": \"Ginkgo\",\n      \"symbol\": \"Ginkgo\",\n      \"logo\": \"https://d23exngyjlavgo.cloudfront.net/solana_Cy12AGDENaqgdM7A6o8R7TUATdDY2rudLMTpbzbGpump\",\n      \"decimals\": \"6\",\n      \"priceNative\": \"0.000000559\",\n      \"priceUsd\": \"0.000081556\",\n      \"liquidity\": \"28183.83084726\",\n      \"fullyDilutedValuation\": \"81556\",\n      \"graduatedAt\": \"2025-03-05T09:30:42.000Z\"\n    },\n    {\n      \"tokenAddress\": \"9iD9XGK6vrzU7qHAodixwP7YWDUWyjoVZhjTsHEmvdRQ\",\n      \"name\": \"First Muslim Elephant\",\n      \"symbol\": \"Ali-Phant\",\n      \"logo\": \"https://d23exngyjlavgo.cloudfront.net/solana_9iD9XGK6vrzU7qHAodixwP7YWDUWyjoVZhjTsHEmvdRQ\",\n      \"decimals\": \"6\",\n      \"priceNative\": \"0.000003031\",\n      \"priceUsd\": \"0.000441674\",\n      \"liquidity\": \"69272.788967737\",\n      \"fullyDilutedValuation\": \"441674\",\n      \"graduatedAt\": \"2025-03-05T09:15:48.000Z\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Components in React JSX\nDESCRIPTION: Imports the ApiReference component and configuration data needed to render the API documentation for the getNFTFloorPriceByToken endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/02-NFT Prices/get-nft-floor-price-by-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server (Shell)\nDESCRIPTION: This shell command uses Yarn to run the `dev` script, typically defined in `package.json`. This script usually starts the Next.js development server, making the application accessible locally, often at `http://localhost:3000`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in React\nDESCRIPTION: This code imports the ApiBanner component from a specific file path. The component is likely used to display a banner related to the API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/01-Token Prices/get-erc20-token-price.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Implementing User Component in Angular\nDESCRIPTION: TypeScript code for the user component, including imports and initial setup for displaying user session data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from \"@angular/core\";\nimport { NgIf } from \"@angular/common\";\n\n@Component({\n  selector: \"app-user\",\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: \"./user.component.html\",\n  styleUrls: [\"./user.component.css\"],\n})\nexport class UserComponent {\n  session = '';\n\n  ngOnInit(): void {}\n\n  async signOut() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Solana NFT Minter\nDESCRIPTION: Example of the .env.local file configuration, including Moralis API key, NextAuth secret, and wallet private key for the Solana NFT minter project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-minter.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nAPP_CHAIN_ID=devnet\nAPP_DOMAIN=ethereum.boilerplate\n\nMORALIS_API_KEY= xxx\n\nNEXTAUTH_SECRET= xxx\n\nNEXTAUTH_URL=http://localhost:3000\n\nPRIVATE_KEY = xxx\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in React (JavaScript)\nDESCRIPTION: This snippet imports the ApiReference React component, used to display API reference details in the documentation. It relies on the Moralis documentation infrastructure and assumes @site/src/components/ApiReference is installed and accessible. The imported component can be used to embed interactive API documentation widgets.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/utils/web3-api-version.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Head Metadata - React/JSX\nDESCRIPTION: This snippet adds a <head> block with a title to set the browser tab and help with SEO. It requires an environment where JSX is supported, such as a Docusaurus or React-based documentation site. The title element sets the visible page title to \"eth_getLogs RPC Method - Moralis Documentation\". This enhances the documentation by making it easier to identify in browser tabs and search engines.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getLogs.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<head>\n    <title>eth_getLogs RPC Method - Moralis Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Metadata in JavaScript\nDESCRIPTION: JavaScript implementation for getting ERC20 token metadata using Moralis API. Requires Moralis and @moralisweb3/common-evm-utils packages. Takes token addresses and chain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-contract.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = [\"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\"];\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenMetadata({\n    addresses,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Installing ngrok Globally for Tunneling\nDESCRIPTION: Installs ngrok globally to create a public URL for the local Express server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g ngrok\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component - React - TypeScript\nDESCRIPTION: This snippet imports the ApiBanner UI component from the project, including its TypeScript typings, to display contextual banners or calls to action within the documentation. The import enables the use of the banner component elsewhere on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-nft-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Replacing MetaMask Button with RainbowKit ConnectButton (JavaScript)\nDESCRIPTION: Updates the `pages/signin.jsx` page to use the `ConnectButton` component from `@rainbow-me/rainbowkit`. This replaces the previous MetaMask-specific button, providing a unified UI for connecting various wallets supported by RainbowKit.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n...\n\nreturn (\n  <div>\n  \t<h3>Web3 Authentication</h3>\n    <ConnectButton />\n  </div>\n);\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for Solana Program\nDESCRIPTION: Updates the Cargo.toml file with required library configurations for Solana smart contract development.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\nname = \"tic_tac_toe\"\ncrate-type = [\"cdylib\", \"lib\"]\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component for Solana Wallet Token Balances\nDESCRIPTION: Imports the ApiReference component and configuration data needed to render the API documentation for the getSPL endpoint of the Solana Web3 Data API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/wallet-api/get-spl.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Updating Home Component to Receive Profile Props\nDESCRIPTION: Modifies the Home component to receive and use the profile data fetched from the Lens API. This prepares the component to display the profile information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Home({ profile }) {\n  console.log(profile);\n  \n  // rest of Home\n```\n\n----------------------------------------\n\nTITLE: Get Native Balance using TypeScript\nDESCRIPTION: TypeScript implementation to fetch native balance of a multi-signature wallet using Moralis SDK. Implements type safety while maintaining the same functionality as the JavaScript version.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x849D52316331967b6fF1198e5E32A0eB168D039d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance - Ethereum JSON-RPC - JSON\nDESCRIPTION: Shows example request and response payloads for the eth_getBalance method, used to fetch the balance of a specific Ethereum account address at a given block. The request takes an address and a block tag (such as 'latest'). The response returns the balance as a hexadecimal string along with JSON-RPC version and id fields.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\"0x0000000000000000000000000000000000000000\", \"latest\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x0234c8a3397aab58\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performing ENS Lookup via SimpleHash API\nDESCRIPTION: SimpleHash API endpoint URL for resolving an ENS (Ethereum Name Service) domain name to its corresponding wallet address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/ens/lookup\n```\n\n----------------------------------------\n\nTITLE: NFT Card Component with Filtering Logic\nDESCRIPTION: Implementation of NFT Card component that handles filtering logic based on NFT symbol. Includes metadata fetching and conditional rendering based on filter query.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-explorer.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `src/components/modules/NFTCard/NFTCard.jsx`\n\n// 4️⃣\n// `NFTCard` uses the `filterQuery` data when it is available\nconst NFTCard = ({ nftAddress, filterQuery }) => {\n//...\n\n// Stores the filter symbol state.\nconst [filterSymbol, setFilterSymbol] = useState();\n\nconst getNFTMetadata = async () => {\n  // ...\n  // 5️⃣\n  // When metadata is fetched from the backend we store the NFT symbol\n  // in a state variable called `filterSymbol`\n setFilterSymbol(response.symbol);\n  // ...\n}\n\n // 6️⃣\n // The value of `filterSymbol` is compared with the `filterQuery` and\n // if the value matches then the NFTCard component will be rendered,\n // else the NFTCard is not rendered in the UI.\nif (filterSymbol?.toLowerCase().includes(filterQuery)) {\n return (\n  //...\n );\n}\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overall Streams API Usage Statistics - JSON\nDESCRIPTION: This code snippet provides an example JSON response from querying the /status endpoint of the Streams API. It reports cumulative webhook delivery, failure, and processed record statistics for the current billing period. Inputs involve making a GET request to the API's /status endpoint; the output is an object containing total webhooks delivered/failed and breakdowns for logs, transactions, and internal transactions. The response helps users monitor period usage for billing and quota tracking. No external dependencies beyond API access are needed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/getting-started/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"totalWebhooksDelivered\": 1288,\\n  \"totalWebhooksFailed\": 17,\\n  \"totalLogsProcessed\": 4257,\\n  \"totalTxsProcessed\": 0,\\n  \"totalTxsInternalProcessed\": 0\\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for /authenticate JWT Validation - JavaScript\nDESCRIPTION: This Express.js endpoint checks for a jwt cookie and validates it using the secret from environment variables. Returns user data if valid or 403 status if invalid or missing. Inputs are the JWT cookie, output is the decoded JWT payload or unauthorized HTTP status. Should be protected by middleware like cookie-parser. Used for gating access to user-specific routes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/authenticate\", async (req, res) => {\n  const token = req.cookies.jwt;\n  if (!token) return res.sendStatus(403); // if the user did not send a jwt token, they are unauthorized\n\n  try {\n    const data = jwt.verify(token, process.env.AUTH_SECRET);\n    res.json(data);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing React Project\nDESCRIPTION: Creates a new React project named 'chartjs-crypto' using create-react-app and navigates into the newly created project directory. This sets up the basic file structure and development environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-chartsjs-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app chartjs-crypto\ncd chartjs-crypto\n```\n\n----------------------------------------\n\nTITLE: Deploying Serverless Application to AWS (PowerShell)\nDESCRIPTION: Executes the `serverless deploy` command in a PowerShell terminal from the project's root directory. This command initiates the deployment process using the Serverless Framework, which packages the application code, dependencies, and infrastructure configuration (`serverless.yml`) and provisions or updates the necessary resources (Lambda function, API Gateway, etc.) in the configured AWS account.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nserverless deploy\n```\n\n----------------------------------------\n\nTITLE: Creating User Data Display Component\nDESCRIPTION: Component for displaying authenticated user information including profile ID, account address, network, and session expiration time\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport styles from \"../../../styles/User.module.css\";\nimport { Typography } from \"@web3uikit/core\";\nimport { useSession } from \"next-auth/react\";\n\nexport default function UserData() {\n  const { data: session, status } = useSession();\n\n  if (session) {\n    return (\n      <div className={styles.data}>\n        <div className={styles.dataCell}>\n          <Typography variant=\"subtitle2\">Profile Id:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\"body16\">{session?.user.profileId}</Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\"subtitle2\">Account:</Typography>\n          <div className={styles.address}>\n            <Typography copyable variant=\"body16\">\n              {session?.user.address}\n            </Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\"subtitle2\">Network:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\"body16\">{session?.user.network}</Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\"subtitle2\">ExpTime:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\"body16\">\n              {session?.user.expirationTime}\n            </Typography>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Rust Project for Solana Tic Tac Toe Game\nDESCRIPTION: Commands to create a new Rust library project for the Tic Tac Toe game and navigate to the project directory.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo init tic_tac_toe --lib\n\ncd tic_tac_toe\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with Ngrok\nDESCRIPTION: Uses Ngrok to expose the local server running on port 3000 to the internet for receiving webhooks.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Contract Write Configuration with WAGMI\nDESCRIPTION: Setup of contract write preparation using WAGMI hooks with proper parameters and parsing of token amounts\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { config } = usePrepareContractWrite({\n    address: sourceChainContractAddr,\n    abi: abi,\n    chainId: chain?.id,\n    functionName: 'sendToMany(string,string,address[],string,uint256)',\n    args: [\n        submittedDestChain[0]?.chainName,\n        submittedDestChain[0]?.distributionContractAddr,\n        submittedReceiverAddrs,\n        submittedToken[0]?.tokenSymbol,\n        parseUnits((submittedToken[0]?.transferAmount || 0).toString(), 6).toString(),\n    ],\n    overrides: {\n        value: parseEther('1'),\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component with NFT Floor Price Configuration\nDESCRIPTION: Renders the ApiReference component with the specific configuration for the getNFTFloorPriceByToken API endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/02-NFT Prices/get-nft-floor-price-by-token.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTFloorPriceByToken} />\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Aggregated Token Pair Statistics - HTTP Endpoint\nDESCRIPTION: Provides aggregated stats for all pairs associated with a token address and network, such as total liquidity or volume. Takes network and address parameters, responds in JSON, and requires Moralis API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/token/:network/:address/pairs/stats\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference Documentation in React\nDESCRIPTION: This code snippet imports necessary components and configuration files for rendering API reference documentation. It includes an ApiReference component and a configuration object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/01-Token Prices/get-erc20-token-price.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana Native Balance API Reference Component - React/JSX\nDESCRIPTION: This snippet renders the ApiReference React component, spreading the 'solana.balance' config as props to the component. It is responsible for dynamically displaying the relevant Solana balance API documentation. Requires that the imported config object has a valid 'solana.balance' property. No direct parameters; the component assumes configuration is correct and present.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/09-Balance API/sol-balance.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.balance} />\n```\n\n----------------------------------------\n\nTITLE: Updating Stream Webhook\nDESCRIPTION: Example demonstrating how to update an existing stream's webhook URL using the Moralis SDK.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/stream-management.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n});\n\nawait Moralis.Streams.update({\n  id: \"STREAM_ID\",\n  webhook: \"<https://YOUR_NEW_WEBHOOK_URL>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi Dependencies\nDESCRIPTION: Imports required Wagmi hooks and MetaMask connector for wallet integration and contract interactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useConnect, useAccount, useDisconnect, useContractWrite, usePrepareContractWrite } from 'wagmi'\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\nimport abi from \"../abi.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList React Component in JavaScript\nDESCRIPTION: This snippet imports the DocCardList component from the '@theme/DocCardList' package, making it available for use in the current file. The '@theme' alias suggests integration with a documentation framework, such as Docusaurus. No parameters are required, but the environment must support ECMAScript modules and Docusaurus theme configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Configuration (JavaScript)\nDESCRIPTION: This snippet imports a JSON configuration for API references, supporting flexible rendering of API documentation in React components. Dependencies include a JSON configuration file and a supporting React/docs system that can process imported JSON. The input is the config JSON file; output is the imported config object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/06-Get Pairs & Liquidity/get-pair-address.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Authentication Integration Cards in HTML\nDESCRIPTION: This HTML snippet creates a responsive grid layout with cards for different authentication integrations. It includes Firebase, Parse Server, and Supabase, each with a logo, title, and brief description.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/index.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"container\">\n    <div className=\"row\">\n        <div className=\"col col--4\">\n            <div className=\"col-demo margin-bottom--lg\">\n                <a className=\"card padding--lg card--homepage\" href=\"/authentication-api/evm/integrations/firebase-nodejs\">\n                    <h3><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"36\" height=\"36\" fill=\"none\"><path fill=\"#FFA000\" d=\"m6 28 4.06-26.356a.747.747 0 0 1 1.402-.243l4.2 7.946 1.675-3.232a.747.747 0 0 1 1.329 0L30 28H6Z\"/><path fill=\"#F57C00\" d=\"M20 18.095 15.642 10 6 28l14-9.905Z\"/><path fill=\"#FFCA28\" d=\"M30 28.445 26.889 8.643a.767.767 0 0 0-.511-.606.733.733 0 0 0-.758.189L6 28.444l10.855 6.263a2.195 2.195 0 0 0 2.192 0L30 28.445Z\"/><path fill=\"#fff\" fillOpacity=\".2\" d=\"M26.892 8.46a.757.757 0 0 0-.51-.596.741.741 0 0 0-.758.186L21.732 12l-3.06-5.898a.746.746 0 0 0-1.329 0L15.67 9.326 11.473 1.4a.746.746 0 0 0-1.402.242L6.013 27.93H6l.013.015.105.054L25.617 8.244a.745.745 0 0 1 1.27.41l3.083 19.295.03-.018L26.892 8.46ZM6.048 27.896 10.07 1.83a.75.75 0 0 1 .614-.631.751.751 0 0 1 .788.39l4.197 7.924 1.673-3.224a.746.746 0 0 1 1.329 0l3 5.77L6.047 27.897Z\"/><path fill=\"#A52714\" d=\"M19.049 34.499a2.124 2.124 0 0 1-2.193 0l-10.83-6.49-.026.177 10.856 6.51a2.124 2.124 0 0 0 2.193 0L30 28.185 29.972 28 19.05 34.499Z\" opacity=\".2\"/></svg>&nbsp;&nbsp;<span>Firebase</span></h3>\n                    <p>Authenticate a user to your Firebase application with an EVM or Solana wallet.</p>\n                </a>\n            </div>\n        </div>\n        <div className=\"col col--4\">\n            <div className=\"col-demo margin-bottom--lg\">\n                <a className=\"card padding--lg card--homepage\" href=\"/authentication-api/evm/integrations/parse-server-nodejs\">\n                    <h3><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"36\" height=\"36\" fill=\"none\"><path fill=\"#fff\" d=\"M18 32.44c7.909 0 14.32-6.411 14.32-14.32C32.32 10.211 25.91 3.8 18 3.8c-7.909 0-14.32 6.411-14.32 14.32 0 7.909 6.411 14.32 14.32 14.32Z\"/><path fill=\"#169CEE\" d=\"M20.667 21.893H12.8c-1.147 0-1.813.707-1.813 1.72 0 .907.613 1.547 1.493 1.547 1.027 0 1.613-.707 1.667-1.72h2.28c-.12 2.48-1.667 3.8-3.974 3.8-2.16 0-3.773-1.467-3.773-3.653 0-2.28 1.693-3.867 4.24-3.867h7.787c2.626 0 4.626-1.933 4.626-4.533 0-2.627-1.786-4.48-4.333-4.48-2.52 0-4.56 1.84-4.56 5.24v2.226h-2.307v-2.226c0-4.507 2.894-7.427 6.907-7.427 3.827 0 6.613 2.747 6.613 6.64.027 3.893-2.96 6.733-6.986 6.733ZM18 34c8.947 0 16-7.08 16-16S26.947 2 18 2 2 9.107 2 18c0 8.92 7.053 16 16 16Z\"/></svg>&nbsp;&nbsp;Parse Server</h3>\n                    <p>Authenticate a user to your Parse server with MetaMask.</p>\n                </a>\n            </div>\n        </div>\n        <div className=\"col col--4\">\n            <div className=\"col-demo margin-bottom--lg\">\n                <a className=\"card padding--lg card--homepage\" href=\"/authentication-api/evm/integrations/supabase-nodejs\">\n                    <h3><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"36\" height=\"36\" fill=\"none\"><g clipPath=\"url(#a)\"><path fill=\"url(#b)\" d=\"M20.706 33.468c-.817 1.03-2.475.466-2.495-.849l-.288-19.226h12.928c2.342 0 3.648 2.704 2.191 4.538L20.706 33.468Z\"/><path fill=\"url(#c)\" fillOpacity=\".2\" d=\"M20.706 33.468c-.817 1.03-2.475.466-2.495-.849l-.288-19.226h12.928c2.342 0 3.648 2.704 2.191 4.538L20.706 33.468Z\"/><path fill=\"#3ECF8E\" d=\"M15.448 2.532c.818-1.03 2.476-.466 2.495.849l.127 19.226H5.304c-2.342 0-3.648-2.704-2.192-4.538L15.448 2.532Z\"/></g><defs><linearGradient id=\"b\" x1=\"17.923\" x2=\"29.413\" y1=\"17.656\" y2=\"22.475\" gradientUnits=\"userSpaceOnUse\"><stop stopColor=\"#249361\"/><stop offset=\"1\" stopColor=\"#3ECF8E\"/></linearGradient><linearGradient id=\"c\" x1=\"12.829\" x2=\"18.069\" y1=\"10.681\" y2=\"20.545\" gradientUnits=\"userSpaceOnUse\"><stop/><stop offset=\"1\" stopOpacity=\"0\"/></linearGradient><clipPath id=\"a\"><path fill=\"#fff\" d=\"M0 0h36v36H0z\"/></clipPath></defs></svg>&nbsp;&nbsp;<span>Supabase</span></h3>\n                    <p>Combine Web3 authentication with Supabase authentication.</p>\n                </a>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example Moralis Stream Test Webhook Payload\nDESCRIPTION: This JSON object represents the structure of the mandatory test webhook payload sent by Moralis when a new stream is created or updated. Your webhook endpoint must return a 200 OK status code upon receiving this test payload to activate the stream. The payload contains fields like block details, transaction arrays (txs, txsInternal), log arrays, chainId, tag, streamId, and various transfer/approval arrays, although most are empty in the test payload.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/getting-started/using-node-js-sdk.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"abi\": {},\n  \"block\": {\n    \"hash\": \"\",\n    \"number\": \"\",\n    \"timestamp\": \"\"\n  },\n  \"txs\": [],\n  \"txsInternal\": [],\n  \"logs\": [],\n  \"chainId\": \"\",\n  \"tag\": \"\",\n  \"streamId\": : \"\",\n  \"confirmed\": true,\n  \"retries\": 0,\n  \"erc20Approvals\": [],\n  \"erc20Transfers\": [],\n  \"nftApprovals\": [],\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for API Documentation\nDESCRIPTION: Import statements for React components used in the documentation page, including ApiReference, Admonition, Link, and custom badge components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/10-Get Trending Tokens/get-tokens-with-top-gainers.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n\nimport { PremiumEndpointBadge } from \"@site/src/components/PremiumEndpointBadge/PremiumEndpointBadge.js\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Page Metadata using YAML Frontmatter\nDESCRIPTION: This YAML frontmatter block defines metadata for the documentation page within a static site generator framework (like Docusaurus). It sets the page's position in the sidebar (`sidebar_position`), its label in the sidebar (`sidebar_label`), and its URL slug (`slug`). This metadata is crucial for site navigation and organization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/20-Utils/contract-review.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar_position: 3\nsidebar_label: Review contracts\nslug: /web3-data-api/evm/reference/contracts-review\n---\n```\n\n----------------------------------------\n\nTITLE: Reporting Spam ERC20 Contract - Moralis - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Moralis SDK in JavaScript (Node.js) to report a spam ERC20 smart contract. It requires the moralis package, @moralisweb3/common-evm-utils, and a local ABI file. The script starts Moralis with an API key, sets up the target Ethereum chain and contract address, composes a spam report, and invokes the reviewContracts function. The expected input includes chain info, contract details, and reason. The output is the response from Moralis, printed as JSON. Limitations include ensuring Node v14+ and having the required npm packages installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/spam-detection/report-erc20-spam.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\nconst abi = require(\"abi.json\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  const contractAddress = \"0x06012c8cf97bead5deae237070f9587f8e7a266d\";\n\n  const reason = \"My Reason\";\n\n  const response = await Moralis.EvmApi.utils.reviewContracts(\n    {\n      chain,\n    },\n    {\n      contracts: [\n        {\n          reason,\n          contractAddress,\n          reportType: \"spam\",\n          contractType: \"ERC20\",\n        },\n      ],\n    }\n  );\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Supported Chains Page in JSX\nDESCRIPTION: Imports custom components for displaying supported chains information and Docusaurus UI components for tab navigation. These components are used to create a tabbed interface for different blockchain ecosystems.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/05-supported-chains/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  EVMChainsCombined,\n  SolanaCombined,\n  AptosCombined,\n} from \"@site/src/components/SupportedChains\";\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport styles from \"@site/src/components/SupportedChains/tabsStyles.module.css\";\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Owners with Pagination using Python Requests\nDESCRIPTION: This Python snippet illustrates how to fetch NFT owners using the Moralis REST API and cursor pagination. It defines a function `get_nft_owners` that takes an offset and cursor, constructs the API URL (appending the cursor if provided), sets the required headers including the API key, and makes a GET request using the `requests` library. The function extracts and returns the cursor from the response for the next call. A loop demonstrates calling this function multiple times to fetch subsequent pages, with a small delay between requests.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/03-pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport time\n\ndef get_nft_owners(offset, cursor):\n    print(\"offset\", offset)\n    url = 'https://deep-index.moralis.io/api/v2/nft/<address_here>/owners?chain=polygon&format=decimal'\n    if cursor:\n      url = url + \"&cursor=%s\" % cursor\n\n    print(\"api_url\", url)\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"X-API-Key\": \"API_KEY_HERE\"\n    }\n    statusResponse = requests.request(\"GET\", url, headers=headers)\n    data = statusResponse.json()\n    print(\"HTTP headers:\", statusResponse.headers)\n    try:\n        print(\"nr results\", len(data['result']))\n    except:\n        print(repr(data))\n        print(\"exiting\")\n        raise SystemExit\n\n    cursor = data['cursor']\n    print(data['page'], data['total'])\n    return cursor\n\n\ncursor = None\nfor j in range(0, 10):\n    cursor = get_nft_owners(j*500, cursor)\n    print()\n    time.sleep(1.1)\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending Tokens via Moralis API in Python\nDESCRIPTION: The `get_trending_tokens` function retrieves a list of currently trending ERC-20 tokens using the Moralis API, filtered optionally by minimum security score and market capitalization. It returns a formatted string highlighting each token's details, or an error message. The function depends on the Moralis API key, the `requests` module, and expects an agent wallet context for usage.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_trending_tokens(security_score=80, min_market_cap=100000) -> str:\\n    \"\"\"\\n    Fetch trending tokens with a minimum security score and market cap.\\n\\n    Args:\\n        security_score (int): Minimum security score for tokens\\n        min_market_cap (int): Minimum market cap for tokens\\n\\n    Returns:\\n        str: Trending token information or an error message\\n    \"\"\"\\n    url = \"https://deep-index.moralis.io/api/v2.2/discovery/tokens/trending\"\\n    headers = {\\n        \"accept\": \"application/json\",\\n        \"X-API-Key\": MORALIS_API_KEY\\n    }\\n    params = {\\n        \"chain\": \"base\",\\n        \"security_score\": security_score,\\n        \"min_market_cap\": min_market_cap\\n    }\\n\\n    try:\\n        response = requests.get(url, headers=headers, params=params)\\n        response.raise_for_status()\\n        tokens = response.json()\\n\\n        # Format the output\\n        token_info = \"\\n\".join(\\n            [\\n                f\"Token Name: {token['token_name']} ({token['token_symbol']})\\\\n\"\\n                f\"Price (USD): {token['price_usd']}\\\\n\"\\n                f\"Market Cap: {token['market_cap']}\\\\n\"\\n                f\"Security Score: {token['security_score']}\\\\n\"\\n                f\"Logo: {token['token_logo']}\\\\n\"\\n                for token in tokens\\n            ]\\n        )\\n        return f\"Trending Tokens:\\n{token_info}\"\\n\\n    except requests.exceptions.RequestException as e:\\n        return f\"Error fetching trending tokens: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Including Ethers.js and Axios Dependencies via CDN in HTML\nDESCRIPTION: This HTML snippet loads the Ethers.js and Axios libraries from their respective CDNs, making them globally available for use in client-side JavaScript. Ethers.js is used for blockchain communications and wallet interaction, while Axios is utilized for making HTTP requests to backend endpoints. Ensure the script tags are placed in the correct location so that the libraries are loaded before any dependent code runs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script src=\\\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\\\"></script>\\n<script src=\\\"https://cdn.ethers.io/lib/ethers-5.2.umd.min.js\\\" type=\\\"application/javascript\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Starting the Express Server\nDESCRIPTION: Runs the start script to launch the Express server with nodemon for development.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with MoralisNextAuthProvider in TypeScript\nDESCRIPTION: Set up NextAuth in a TypeScript file, integrating MoralisNextAuthProvider and configuring callbacks for JWT and session management.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\n\nexport default NextAuth({\n  providers: [MoralisNextAuthProvider()],\n  // adding user info to the user session object\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      (session as { user: unknown }).user = token.user;\n      return session;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Token Balance Endpoint\nDESCRIPTION: This code snippet renders the ApiReference component, passing the configuration for the getWalletTokenBalances endpoint from the imported config object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/04-Get Tokens/get-wallet-token-balances.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getWalletTokenBalances}>\n\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: EVM RPC Response: eth_chainId\nDESCRIPTION: Example response format for eth_chainId RPC method showing the current chain ID in hexadecimal.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Solana Program Connection in Frontend\nDESCRIPTION: TypeScript code snippet showing the initialization of the Solana program connection in the frontend application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst programId = 'xxx';\nconst connection = new Connection(clusterApiUrl('devnet'));\n```\n\n----------------------------------------\n\nTITLE: Example Response from getWalletNFTCollections Endpoint\nDESCRIPTION: Sample JSON response from the Moralis NFT API endpoint. Shows the structure with total NFT collections, pagination information, and details for each collection including token address, contract type, name, and symbol.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/04-NFT Collections/how-to-get-all-nft-collections-owned-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 503,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsid2FsbGV0QWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSJ9LCJrZXlzIjpbIjE2NTg2ODUyMDMuNzExIl0sIndoZXJlIjp7Im93bmVyX29mIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1In0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6NTAzLCJwYWdlIjoxLCJ0YWlsT2Zmc2V0IjoxLCJpYXQiOjE2NjY4MDE3OTV9.wdLubHbqnGg36awXqwlJ7cnsdIX5DHDDnArnva72W5I\",\n  \"result\": [\n    {\n      \"token_address\": \"0xff8852a5f77c20094f0fabc7b225b417e0797907\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"VictoriasSecret\",\n      \"symbol\": \"VS\"\n    },\n    {\n      \"token_address\": \"0xff66f3c087b0e8e0d1349cadb218efd7bcf0ac99\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Flower Shoppe\",\n      \"symbol\": \"FLWRSHP\"\n    },\n    {\n      \"token_address\": \"0xfeddc1448eb4480714a9942ba28a27b16caf9ce4\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Impervious Registry\",\n      \"symbol\": \"IR\"\n    },\n    {\n      \"token_address\": \"0xfec64651c8b441f2526b1a54febb2122124bf041\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Porsche\",\n      \"symbol\": \"Porsche\"\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Moralis API Request with API Key in curl\nDESCRIPTION: This example demonstrates how to make an authenticated GET request to the Moralis API by providing the API key in the X-API-Key header. The example retrieves block data from the Ethereum blockchain with internal transactions included.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/resources/01-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url 'https://deep-index.moralis.io/api/v2.2/block/15863321?chain=eth&include=internal_transactions' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Normalized NFT Metadata with Python\nDESCRIPTION: This snippet demonstrates how to use the Moralis evm_api to fetch NFT metadata for a specific token on the Ethereum chain using Python. It requires the Moralis library and API key for authentication. Note that the example uses aptos_api instead of evm_api, which might be a typo in the original code.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/02-NFT Metadata/metadata-normalization.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"chain\": \"ethereum\",\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"tokenId\": \"1\",\n}\n\nresult = aptos_api.coins.get_coins_by_coin_type_hashes(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration\nDESCRIPTION: This snippet imports the necessary React component `ApiReference` and a JSON configuration file (`configsV2.json`) likely containing API endpoint details. This setup is typical for documentation sites built with frameworks like Docusaurus, where components render structured data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/reference/03-Profiles/remove-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Using ApiReference and Admonition Components in Docusaurus (Markdown/JSX)\nDESCRIPTION: This snippet demonstrates a documentation section using React-based Docusaurus components: ApiReference for structured API details and Admonition to present a styled informational note with a link to further RPC schema documentation. Props are dynamically injected from the imported configuration, and HTML tags are used for formatting within Admonition. Required dependencies are the previously imported components and a Docusaurus environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/eth_getTokenBalances.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Get ERC-20 Token Balances by Wallet Address\n\n<ApiReference {...config.rpc.eth_getTokenBalances} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Token Holders via Moralis API\nDESCRIPTION: Exclusive Moralis API endpoint (GET request) for retrieving historical data about the holders of a specific ERC20 token, identified by its `:token_address`. Allows tracking changes in token ownership over time.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_40\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/erc20/:token_address/holders/historical\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Stream Block Data (React JSX, JavaScript)\nDESCRIPTION: This snippet renders the 'ApiReference' component and spreads the specific API configuration for 'GetStreamBlockDataByNumber' as its props. The 'ApiReference' component dynamically displays API documentation based on the provided configuration object. It expects a configuration object shaped by 'configs.streams.GetStreamBlockDataByNumber'. The main limitation is the dependency on the integrity of the 'config' JSON import and the structure of the 'ApiReference' component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/get-stream-block-data-by-number.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.streams.GetStreamBlockDataByNumber} />\n```\n\n----------------------------------------\n\nTITLE: Initiating Interchain Token Transfer with useContractWrite in JavaScript\nDESCRIPTION: This snippet demonstrates how to initiate an interchain token transfer by calling the `interchainTransfer` function on an Interchain Token Service contract. It uses the `useContractWrite` hook (likely from wagmi/ethers.js) to prepare and send the transaction, specifying parameters like token ID, destination chain, receiver address, amount, and gas values. The `useWaitForTransaction` hook is used to monitor the transaction's mining status.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst TransferToken = () => {\n  //...\n  // Token Transfer\n  const {\n    data: tokenTransfer,\n    write\n  } = useContractWrite({\n    address: interchainTokenServiceContractAddress,\n    abi: interchainTokenServiceContractABI,\n    functionName: 'interchainTransfer',\n    args: [ethers.utils.arrayify('0x43DAE7E25FE1E690EEE852A3701C3DB8F0A76CD24E2A3A20AF011D552F08D82A'), destinationChain, receiverAddress, ethers.utils.parseEther(amountToTransfer.toString()), '0x', ethers.BigNumber.from(gasAmount.toString()), ],\n    overrides: {\n      value: ethers.BigNumber.from(gasAmount.toString()),\n    },\n    mode: 'recklesslyUnprepared',\n  });\n  const {\n    data: useWaitForTokenTransferTransactionData,\n    isSuccess,\n    isError,\n    isLoading,\n  } = useWaitForTransaction({\n    // Call a hook to wait for the transaction to be mined\n    hash: tokenTransfer?.hash,\n  });\n  // token transfer\n  const handleTokenTransfer = async () => {\n    if (!sourceChain || !destinationChain || !receiverAddress || !amountToTransfer) {\n      toast({\n        title: 'Invalid Input',\n        description: 'Please fill all the fields correctly.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n    if (write) {\n      write();\n      toast({\n        title: 'Transaction Submitted',\n        description: 'Please confirm the transaction in Metamask.',\n        status: 'info',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isError) {\n      toast({\n        title: 'Transaction Error',\n        description: 'There was an error submitting your transaction.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n  return (\n    //...\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: NFT Token Metadata JSON Structure\nDESCRIPTION: JSON structure containing detailed NFT token information including token address, ID, owner address, block numbers, and encoded ASCII art token URIs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_address\": \"0xd4e4078ca3495de5b1d4db434bebc5a986197782\",\n  \"token_id\": \"70\",\n  \"owner_of\": \"0x8e232860171762f6ff2d22d1fcc45af78bd3fbb5\",\n  \"block_number\": \"15791507\",\n  \"block_number_minted\": \"7517120\",\n  \"token_hash\": \"d24a56d874a7c44ff8f5986e53dc93da\",\n  \"amount\": \"1\",\n  \"contract_type\": \"ERC721\",\n  \"name\": \"Autoglyphs\",\n  \"symbol\": \"☵\",\n  \"token_uri\": \"data:text/plain;charset=utf-8,...\",\n  \"metadata\": null,\n  \"last_token_uri_sync\": \"2022-08-04T16:48:23.713Z\",\n  \"last_metadata_sync\": \"2022-08-04T16:48:29.685Z\",\n  \"minter_address\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MoralisNextApi Authentication Endpoint - JavaScript\nDESCRIPTION: Defines the MoralisNextApi endpoint for user authentication and API key validation, to be placed in pages/api/moralis/[...moralis].ts. Requires environment variables (MORALIS_API_KEY, NEXTAUTH_URL) and sets domain, URI, and token timeout for secure challenge requests. The endpoint is used internally by Moralis-related hooks for authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\\n\\nexport default MoralisNextApi({\\n  apiKey: process.env.MORALIS_API_KEY,\\n  authentication: {\\n    domain: \"amazing.dapp\",\\n    uri: process.env.NEXTAUTH_URL,\\n    timeout: 120,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend package.json (JSON)\nDESCRIPTION: Defines the project metadata and dependencies for the backend application in 'backend/package.json'. It includes the project name, version, main entry point ('index.js'), scripts (including a 'start' script using nodemon), author, license, and lists the installed dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"zapper\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"nodemon index.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.0.2\",\n    \"express\": \"^4.18.1\",\n    \"moralis\": \"^2.4.0\",\n    \"nodemon\": \"^2.0.19\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Client for MetaMask Connection - TypeScript\nDESCRIPTION: This snippet demonstrates initializing a wagmi client with automatic connection enabled and a provider set to ethers' default provider. This client manages web3 interactions and is foundational for enabling MetaMask authentication. No inputs are expected; output is a configured wagmi client instance. Dependencies include wagmi/core and ethers libraries.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient({\\n  autoConnect: true,\\n  provider: getDefaultProvider(),\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Options for Moralis Stream via WebUI (JSON)\nDESCRIPTION: This JSON structure defines the advanced filtering options for a Moralis Stream configured through the WebUI. It specifies the event topic (`topic0`) as the ERC20 transfer event signature ('transfer(address,address,uint256)'). The `filter` object uses an `and` condition to combine two checks: `eq` ensures the 'from' address matches '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5', and `gt` ensures the 'value' is greater than 1000000000 (example for USDT with 6 decimals). This JSON should be pasted into the 'Advanced Options' field in the Moralis WebUI when creating the stream.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-listen-all-er-c20-token-transfers-over-certain-amount-sent-by-specific-address.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n   [  \n     {  \n       \"topic0\": \"transfer(address,address,uint256)\",  \n       \"filter\": {  \n         \"and\": [  \n           { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] },  \n           { \"gt\": [\"value\", \"1000000000\"] }   // Example of USDT (6 Decimals) \n         ]  \n       }  \n     }  \n   ]\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK with yarn\nDESCRIPTION: Installs the Moralis SDK using the yarn package manager\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/partials/_install-moralis-sdk.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add ${props.node}\n```\n\n----------------------------------------\n\nTITLE: Checking Endpoint Weights in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Moralis SDK in JavaScript to check the latest compute units of API offerings using the endpointWeights method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/08-compute-units-cu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.utils.endpointWeights();\n\nconsole.log(response?.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Interchain Token Deployment with useContractWrite\nDESCRIPTION: This snippet details the implementation of the remote deployment functionality in a React component (`DeployTokenRemotely`). It uses the `useContractWrite` hook (likely from a library like wagmi) to interact with the `deployRemoteCanonicalInterchainToken` function of the `InterchainTokenFactory` contract. It prepares the necessary arguments (chains, token address, gas value) and includes overrides for the transaction value. The `useWaitForTransaction` hook monitors the transaction's progress, and the `handleDeployToken` function triggers the write operation and provides user feedback via toasts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n //...\nconst DeployTokenRemotely = () = >{\n  //...\n  // Deploy a token remotely\n  const {\n    data: deployTokenRemotely,\n    write\n  } = useContractWrite({\n    address: interchainTokenFactoryContractAddress,\n    abi: interchainTokenFactoryContractABI,\n    functionName: 'deployRemoteCanonicalInterchainToken',\n    args: [sourceChain, tokenAddress, destinationChain, ethers.BigNumber.from(gasAmount.toString())],\n    overrides: {\n      value: ethers.BigNumber.from(gasAmount.toString()),\n    },\n    mode: 'recklesslyUnprepared',\n  });\n  const {\n    data: useWaitForDeployTokenRemotelyTransactionData,\n    isSuccess,\n    isError,\n    isLoading,\n  } = useWaitForTransaction({\n    // Calling a hook to wait for the transaction to be mined\n    hash: deployTokenRemotely ? .hash,\n  });\n  const handleDeployToken = async() = >{\n    if (write) {\n      write();\n      toast({\n        title: 'Transaction Submitted',\n        description: 'Please confirm the transaction in MetaMask.',\n        status: 'info',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isError) {\n      toast({\n        title: 'Transaction Error',\n        description: 'There was an error submitting your transaction.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n  return (\n  //..\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Automating GameSparks Cloud Code Setup with JSON Configuration (JSON)\nDESCRIPTION: This JSON code snippet defines the structure for importing requests, responses, and associated backend logic into Amazon GameSparks via the snapshot import feature. It specifies custom request handlers (JavaScript scripts), request/response data shapes, and enables automation of backend setup. The snippet should be saved as a .json file and can be imported in the GameSparks console. Dependencies include Amazon GameSparks and the underlying Lambda functions exposed for invocation. Inputs and outputs are determined by the defined structures and are passed as message payloads between clients and Lambda functions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/aws-gamesparks-integration-with-unity.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Document\" : {\n    \"Type\" : \"Game\",\n    \"Sections\" : {\n      \"GameSparks.Core.RequestHandlers\" : {\n        \"GetNativeBalance\" : {\n          \"Code\" : {\n            \"Script\" : \"const response = GameSparks().Lambda(\\\"aws-node-project-dev-getNativeBalance\\\").Invoke(\\r\\n    {\\r\\n      // Example of how you would send a parameter to Lambda\\r\\n      \\\"address\\\": message.address,\\r\\n      \\\"chain\\\": message.chain\\r\\n    }\\r\\n);\\r\\n\\r\\nGameSparks().Logging().Debug(\\\"Result from Lambda is:\\\");\\r\\nGameSparks().Logging().Debug(JSON.stringify(response.Payload));\\r\\n\\r\\nreturn GameSparks().Messaging().Response({\\\"result\\\": parseFloat(response.Payload.result)});\",\n            \"ScriptLanguage\" : \"Javascript_ES5_1\"\n          },\n          \"Enabled\" : true,\n          \"Description\" : \"\"\n        },\n        \"GetWalletNfts\" : {\n          \"Code\" : {\n            \"Script\" : \"const response = GameSparks().Lambda(\\\"aws-node-project-dev-getWalletNfts\\\").Invoke(\\r\\n    {\\r\\n      \\\"address\\\": message.address,\\r\\n      \\\"chain\\\": message.chain\\r\\n    }\\r\\n);\\r\\n\\r\\nGameSparks().Logging().Debug(\\\"Result from Lambda is:\\\");\\r\\n\\r\\nreturn GameSparks().Messaging().Response({\\\"result\\\": response.Payload.result});\",\n            \"ScriptLanguage\" : \"Javascript_ES5_1\"\n          },\n          \"Enabled\" : true,\n          \"Description\" : \"\"\n        }\n      },\n      \"GameSparks.Core.Requests\" : {\n        \"GetNativeBalance\" : {\n          \"AllowedSources\" : [ \"Player\" ],\n          \"RequestShape\" : \"GetNativeBalanceRequest\",\n          \"ResponseShape\" : \"GetNativeBalanceResponse\",\n          \"Description\" : \"\"\n        },\n        \"GetWalletNfts\" : {\n          \"AllowedSources\" : [ \"Player\" ],\n          \"RequestShape\" : \"GetWalletNftsRequest\",\n          \"ResponseShape\" : \"GetWalletNftsResponse\",\n          \"Description\" : \"\"\n        }\n      },\n      \"GameSparks.Core.Model\" : {\n        \"GetNativeBalanceRequest\" : {\n          \"Structure\" : {\n            \"Description\" : \"\",\n            \"Fields\" : {\n              \"chain\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"String\"\n              },\n              \"address\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"String\"\n              }\n            }\n          }\n        },\n        \"GetNativeBalanceResponse\" : {\n          \"Structure\" : {\n            \"Description\" : \"\",\n            \"Fields\" : {\n              \"result\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"Decimal\"\n              }\n            }\n          }\n        },\n        \"GetWalletNftsRequest\" : {\n          \"Structure\" : {\n            \"Description\" : \"\",\n            \"Fields\" : {\n              \"chain\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"String\"\n              },\n              \"address\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"String\"\n              }\n            }\n          }\n        },\n        \"GetWalletNftsResponse\" : {\n          \"Structure\" : {\n            \"Description\" : \"\",\n            \"Fields\" : {\n              \"result\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"String\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner React Component (TypeScript)\nDESCRIPTION: This TypeScript import brings in the 'ApiBanner' React component, possibly used for displaying prominent API lifecycle or status messages. The '.tsx' extension signifies this is a TypeScript React file. The import pattern assumes a compatible build system for TypeScript and JSX.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Pump Fun Tokens/03-get-graduated-tokens-by-exchange.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block by Date via Moralis API URL\nDESCRIPTION: API endpoint URL for finding the block closest to a specific date. Corresponds to the `getBlockByDate` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/blockchain-api.md#2025-04-23_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/dateToBlock\n```\n\n----------------------------------------\n\nTITLE: EVM RPC Request: eth_createAccessList Parameters\nDESCRIPTION: Example parameters for eth_createAccessList RPC method including transaction details and block tag.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"from\": \"0x0000000000000000000000000000000000000000\",\n    \"to\": \"0x0000000000000000000000000000000000000000\",\n    \"gas\": \"0x76c0\",\n    \"gasPrice\": \"0x9184e72a000\",\n    \"value\": \"0x9184e72a\",\n    \"data\": \"0x\"\n  },\n  \"latest\"\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering Moralis DeleteStream API Documentation Component in React (TypeScript/JSX)\nDESCRIPTION: This snippet renders the API documentation for the 'Delete stream' endpoint by passing the corresponding configuration object as props to the ApiReference React component. It depends on the previously imported component and config, and it expects config.streams.DeleteStream to contain the endpoint definition. The result is a dynamically generated documentation page for this endpoint; modifications to the underlying configuration update the rendered reference automatically.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/delete-stream.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ApiReference {...config.streams.DeleteStream} />\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Wallet NFTs Query\nDESCRIPTION: This JSON snippet provides an example of the data structure returned when querying NFTs owned by a wallet with Moralis. The object contains fields such as 'total', 'page', 'page_size', and 'result', where each NFT item includes attributes like address, token ID, owner, contract type, and metadata. This guides developers on what to expect as output, but actual values will vary by address and chain queried.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 1456,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsid2FsbGV0QWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSJ9LCJrZXlzIjpbIjE2NjMyMzgxNzUuMDc3Il0sIndoZXJlIjp7Im93bmVyX29mIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1In0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6MTQ1NiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2NjgyNTUyfQ.E5DkWYvRTaFnVhgedRuT3IW-rb2V-ikFKwP2cg2Qf78\",\n  \"result\": [\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"4765809967066625256798886812262830659450023020194524584471225959000376492819\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"ba6d44b5f16be94283cecffeb784b7ca\",\n      \"block_number_minted\": \"15572796\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:06:08.153Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"84453794918345416145331514647027903846664455083247396107154093349515123913389\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"7c0212cd3daf1b6b64f193c6dc102fb4\",\n      \"block_number_minted\": \"15572811\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:09:09.838Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"16476931145019337030786748713476010946621971075817308111460324192065814192354\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"627ffc76405a90ee940cb91f7e90b294\",\n      \"block_number_minted\": \"15572818\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:11:34.545Z\",\n      \"minter_address\": null\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via AWS CLI\nDESCRIPTION: This command initiates the AWS CLI configuration process. It prompts the user to enter their AWS Access Key ID, Secret Access Key, default region name, and default output format, storing them for use by AWS tools and SDKs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\naws configure\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration (React, JavaScript)\nDESCRIPTION: This snippet imports a React component used for rendering API reference documentation and loads a configuration JSON specific to API documentation. The '@site' alias indicates a project-specific path resolution, commonly used with Docusaurus or similar documentation frameworks. These imports are prerequisites for composing the subsequent documentation UI.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/07-NFT API/get-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Config for API Documentation\nDESCRIPTION: React/JSX imports for documentation components including API reference, admonitions, configuration, and navigation links.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/20-Utils/run-contract-function.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\nimport Link from \"@docusaurus/Link\";\n```\n\n----------------------------------------\n\nTITLE: Importing NodeBanner Component in TypeScript/React\nDESCRIPTION: Imports the `NodeBanner` React component from a local TypeScript file (`.tsx`). This component is likely used within the documentation page (built with Docusaurus or a similar framework) for rendering a specific UI element related to Moralis Nodes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/getting-started/01-get-your-node-api-key.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NodeBanner from \"@site/src/components/NodeBanner/NodeBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Moralis ApiBanner Component in React (TypeScript)\nDESCRIPTION: This snippet imports the ApiBanner component from a TypeScript React file. A dependency on 'ApiBanner' is specified, intended for embedding banners related to Moralis API. The relative path '@site/src/components/ApiBanner/ApiBanner.tsx' is used, ensuring proper TypeScript support. This setup is foundational for dynamically displaying banners in the documentation page, but does not produce output on its own.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/01-Get Token Balances/get-wallet-token-balances-price.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs via Moralis NFT API in Python\nDESCRIPTION: This Python snippet utilizes the moralis Python SDK to fetch all NFTs owned by a wallet address on Ethereum. The script sets up the API key, configures parameters such as address, chain, result format, and pagination, and accesses the NFT data through evm_api.nft.get_wallet_nfts. The output is serialized to JSON for readability, handling Unicode characters where necessary. Required dependencies: 'moralis' and 'json'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"token_addresses\": [],\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: React Component Import - EVMChainData\nDESCRIPTION: Import statement for the EVMChainData component that displays supported EVM chains information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/defi-api.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EVMChainData } from '@site/src/components/SupportedChains';\n```\n\n----------------------------------------\n\nTITLE: Fetching EVM NFT Owners by Contract using Moralis API\nDESCRIPTION: Moralis API endpoint (v2.2) for retrieving the owners of NFTs associated with a specific EVM contract address. Requires the contract `address` as a path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/nft/:address/owners\n```\n\n----------------------------------------\n\nTITLE: Rendering Configured API Reference Component - JavaScript/React\nDESCRIPTION: This snippet renders the ApiReference component in JSX and supplies it with configuration properties from the configs.json file, specifically for the token.getWalletTokenTransfers endpoint. The primary dependency is a valid configuration structure in the imported JSON file. It expects the config object to include a token.getWalletTokenTransfers property, which should specify API method details. The output is a rendered, documentation-driven API reference block for frontend users. Errors may occur if the configuration structure does not match expected requirements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/04-Get Token Transfers/get-wallet-token-transfers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.token.getWalletTokenTransfers} />\n```\n\n----------------------------------------\n\nTITLE: Adding npm start Script to package.json - JSON\nDESCRIPTION: Shows how to add a start script in the package.json file to run the Express server using the 'node index.js' command. This enables quick server startup using npm run start.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"start\": \"node index.js\"\n},\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Arranging API Reference and Banners - React JSX - JavaScript\nDESCRIPTION: This snippet imports necessary React components and configuration files for composing a documentation page focused on Solana OHLCV data retrieval by pair address. It uses JSX to embed Chart and Ethereum API banners and the mainnet badge, and passes Solana-specific reference configurations to the ApiReference component for rendering API docs. The key dependency is React with Docusaurus or a similar static site generator setup. Inputs include configuration JSON and JSX props; outputs are React component renderings on the documentation site.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/price-api/get-ohlcv-price.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport EthereumApiBanner from \"@site/src/components/EthBanner/EthApiBanner.tsx\";\n\nimport ChartWidgetBanner from \"@site/src/components/ChartWidgetBanner/ChartWidgetBanner.tsx\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n\n# Get OHLCV by Pair Address <MainnetBadge />\n\n<div\n  style={{\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\", // Ensures both banners have the same width\n  }}\n>\n  <div style={{ width: \"100%\" }}>\n    <ChartWidgetBanner />\n  </div>\n  <div style={{ width: \"100%\" }}>\n    <EthereumApiBanner\n  customTitle=\"Looking for OHLCV data on EVM?\"\n  customText=\"Access OHLCV data by pair address on EVM using our API.\"\n  customButtonText=\"Explore EVM API\"\n  customButtonLink=\"/web3-data-api/evm/reference/get-ohlcv-by-pair-address\"\n/>\n\n  </div>\n</div>\n\n<ApiReference {...config.solana.getCandleSticks} />\n```\n\n----------------------------------------\n\nTITLE: AWS CLI Configuration Command\nDESCRIPTION: Command to configure AWS credentials using AWS CLI with access key ID and secret access key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\naws configure\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK Using pnpm - JavaScript\nDESCRIPTION: This code snippet details how to install the Moralis SDK using the pnpm package manager for JavaScript projects. Make sure you have a Moralis API key and that pnpm is installed on your system. Substitute ${props.node} with the actual Moralis package name. This command adds Moralis as a dependency.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/partials/_install-moralis-sdk.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add ${props.node}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for API Documentation Page (React/JSX)\nDESCRIPTION: Imports necessary React components (`ApiReference`, `Admonition`, `ApiBanner`) and configuration data (`configs.json`) to build the API reference documentation page using a framework like Docusaurus. These imports set up the required modules for rendering the page content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-wallet-nft-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration JSON (JavaScript)\nDESCRIPTION: This snippet imports a JSON configuration object that contains setup details for the API reference components. By importing 'configs.json', the file provides a configuration source to the 'ApiReference' React component, ensuring API operation metadata is available for rendering. The import must be compatible with the build's module resolution for JSON files.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Pump Fun Tokens/03-get-graduated-tokens-by-exchange.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server\nDESCRIPTION: Command to start the React development server. This compiles the application and opens it in a web browser, typically enabling features like hot module reloading for development.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-chartsjs-tutorial.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for DEX Pair Reserves using React/JSX\nDESCRIPTION: This JSX snippet renders the `ApiReference` React component. It dynamically passes properties to the component by spreading the `config.defi.getPairReserves` object. This object presumably contains configuration details (like endpoint URL, parameters, descriptions) necessary for the `ApiReference` component to display the documentation for the API endpoint that fetches DEX token pair reserves. Requires React, the specific `ApiReference` component implementation, and the `config` object imported from `@site/docs/configs/api-reference/configsV2.json`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/06-Get Pairs & Liquidity/get-pair-reserves.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.defi.getPairReserves} />\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK via npm\nDESCRIPTION: Installs the Moralis NodeJS SDK package using the Node Package Manager (npm). This command should be run in the root directory of the NodeJS project. It downloads the package and adds it to the project's dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install moralis\n```\n\n----------------------------------------\n\nTITLE: Running the Based Agent\nDESCRIPTION: Command to start the Based Agent after configuration is complete. This executes the main Python script that powers the autonomous agent.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython run.py\n```\n\n----------------------------------------\n\nTITLE: Fetching Endpoint Weights using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the Moralis SDK and use the `Moralis.EvmApi.utils.endpointWeights()` function to retrieve the compute unit costs (both price and rate limit cost) for various Moralis API endpoints. Requires the `moralis` package and a valid Moralis API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/05-compute-units-cu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.utils.endpointWeights();\n\nconsole.log(response?.toJSON());\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReference Component for Moralis Streams API in JavaScript\nDESCRIPTION: This snippet imports the ApiReference React component and a JSON configuration object, then renders the component with the specific configuration for updating the status of a stream using the Moralis Streams API. The approach requires a React environment and proper configuration data in order to output the API documentation. Inputs include the 'streams.UpdateStreamStatus' configuration, and the output is a rendered API reference section. Assumes the relevant JSON config structure and project dependencies are properly set up.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/update-stream-status.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.streams.UpdateStreamStatus} />\n```\n\n----------------------------------------\n\nTITLE: Embedding ApiReference and Admonition in Documentation - MDX/JSX\nDESCRIPTION: This snippet uses custom React components within MDX to render an API reference and an informational Admonition. The ApiReference receives a configuration prop corresponding to the eth_getTokenMetadata method, while the Admonition provides a note with additional guidance and a Link to more detailed schema documentation. Inputs are the config object and React components; the output is an interactive API documentation section. It presumes that all imported components and config files are present and correctly referenced.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/eth_getTokenMetadata.md#2025-04-23_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<ApiReference {...config.rpc.eth_getTokenMetadata} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Replaying a Failed Webhook via Moralis Streams API (cURL)\nDESCRIPTION: Shows how to replay a failed webhook by making a direct POST request to the Moralis Streams API history replay endpoint using cURL. Requires replacing `WEBHOOK_ID` with the actual history entry ID and `YOUR_API_KEY` with a valid Moralis API key. This method interacts directly with the API without needing the SDK.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/error-handling.md#2025-04-23_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X 'POST' \\\n  '<https://api.moralis-streams.com/history/replay/WEBHOOK_ID>' \\\n  -H 'accept: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Representing Autoglyph NFT Data (ID 40) in JSON\nDESCRIPTION: This JSON object details the metadata and ownership information for Autoglyph NFT with token ID \"40\". It follows the same structure as other Autoglyph data objects, providing contract address, owner, block details, contract type (ERC721), and the specific 'token_uri' holding the unique on-chain generative art for this token, encoded in a data URI. Sync timestamps indicate when the data was last updated.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"token_address\": \"0xd4e4078ca3495de5b1d4db434bebc5a986197782\",\n      \"token_id\": \"40\",\n      \"owner_of\": \"0x8e232860171762f6ff2d22d1fcc45af78bd3fbb5\",\n      \"block_number\": \"15791547\",\n      \"block_number_minted\": \"7517045\",\n      \"token_hash\": \"2cc632796f119c21fb4608a931e96c26\",\n      \"amount\": \"1\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Autoglyphs\",\n      \"symbol\": \"☵\",\n      \"token_uri\": \"data:text/plain;charset=utfn      \"metadata\": null,\n      \"last_token_uri_sync\": \"2022-08-04T16:48:48.145Z\",\n      \"last_metadata_sync\": \"2022-08-04T16:49:09.473Z\",\n      \"minter_address\": null\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK in JavaScript\nDESCRIPTION: Demonstrates how to initialize the Moralis SDK in a JavaScript (Node.js) environment using `require`. It requires the `moralis` package and needs an API key passed to the asynchronous `Moralis.start()` method. Additional configuration options can be provided within the start method's object argument.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/01-moralis-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Building a User Profile Page with Session Gating - JavaScript\nDESCRIPTION: This JavaScript page component renders a Solana user profile UI, gating access with server-side session authentication and displaying the UserData and logout/disconnect buttons. It depends on Next.js, next-auth, solana/wallet-adapter-react, and related UI packages. The component manages loading, session state, and wallet disconnects, and is intended for authenticated users viewing their Solana session details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useTransition } from \\\"react\\\";\nimport styles from \\\"../styles/User.module.css\\\";\nimport { getSession, signOut } from \\\"next-auth/react\\\";\nimport UserData from \\\"../app/components/userData/userData\\\";\nimport LogoutBtn from \\\"../app/components/logoutBtn/logoutBtn\\\";\nimport { WalletDisconnectButton } from \\\"@solana/wallet-adapter-react-ui\\\";\nimport { useWallet } from \\\"@solana/wallet-adapter-react\\\";\nrequire(\\\"@solana/wallet-adapter-react-ui/styles.css\\\");\n\nexport async function getServerSideProps(context) {\n  const session = await getSession(context);\n  if (!session) {\n    return { redirect: { destination: \\\"/\\\" } };\n  }\n  return {\n    props: { userSession: session },\n  };\n}\n\nexport default function Home({ userSession }) {\n  const { publicKey, disconnecting, connected } = useWallet();\n  const [isPending, startTransition] = useTransition();\n\n  console.log(userSession);\n\n  useEffect(() => {\n    startTransition(() => {\n      publicKey && console.log(publicKey.toBase58());\n    });\n  }, [publicKey]);\n\n  useEffect(() => {\n    startTransition(() => {\n      disconnecting && signOut();\n    });\n  }, [disconnecting]);\n\n  useEffect(() => {\n    startTransition(() => {\n      console.log({ disconnecting });\n    });\n  }, [disconnecting]);\n\n  if (userSession) {\n    return (\n      <div className={styles.body}>\n        {!isPending && (\n          <div className={styles.card}>\n            <>\n              <UserData />\n              <div className={styles.buttonsRow}>\n                {connected || disconnecting ? (\n                  <WalletDisconnectButton />\n                ) : (\n                  <LogoutBtn />\n                )}\n              </div>\n            </>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Configuration for API Documentation\nDESCRIPTION: This snippet imports the `ApiReference` and `EthereumApiBanner` React components, likely used for rendering documentation sections, along with a configuration object (`config`) from a JSON file. These imports are dependencies for dynamically constructing the documentation page content, probably within a framework like Docusaurus.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Token Holders/get-token-holder-stats.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport EthereumApiBanner from \"@site/src/components/EthBanner/EthApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Creating User Component Template in Angular\nDESCRIPTION: HTML template for the user component, displaying user session data and a sign-out button.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div *ngIf=\"session\">\n  <h3>User session:</h3>\n  <pre>{{ session }}</pre>\n  <button type=\"button\" (click)=\"signOut()\">Sign out</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updated package.json with Start Script and Dependencies\nDESCRIPTION: Shows the modified `package.json` file after installing dependencies and adding a `start` script. The script uses `nodemon` to run `index.js`, automatically restarting the server upon file changes during development. The `dependencies` section lists the installed packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"nodemon index.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"dotenv\": \"^16.0.3\",\n    \"express\": \"^4.18.2\",\n    \"ngrok\": \"^4.3.3\",\n    \"node-telegram-bot-api\": \"^0.60.0\",\n    \"nodemon\": \"^2.0.20\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Core Error Code Table in Markdown\nDESCRIPTION: Table displaying Core module error codes, their identifiers, and descriptions covering initialization, validation, and general operation errors\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Code | Error | Description |\n| --- | --- | --- |\n| `C0001` | GENERIC_CORE_ERROR | An unspecified error occurred |\n| `C0002` | DUPLICATE_MODULE | A module wants to register with a name that already is registered |\n| `C0003` | MODULE_NOT_FOUND | The specified module could not be found or not registered |\n| `C0004` | VALIDATION_ERROR | Data validation failed |\n| `C0005` | INVALID_ARGUMENT | An invalid argument was provided to a function or method |\n| `C0006` | REQUEST_ERROR | An error occurred while making a request |\n| `C0007` | NO_DATA_FOUND | Expected data was not found |\n| `C0008` | NOT_INITIALIZED | Attempted to use a component before it was initialized |\n| `C0009` | ALREADY_INITIALIZED | Attempted to initialize a module that was already initialized |\n| `C0010` | METHOD_FAILED | A method call failed |\n| `C0011` | STATE_MACHINE_STARTED | Attempted to start an already started state machine |\n| `C0012` | STATE_MACHINE_NOT_STARTED | Attempted to use a state machine that hasn't started |\n| `C0013` | CONFIG_KEY_NOT_EXIST | The specified configuration key doesn't exist |\n| `C0014` | CONFIG_INVALID_VALUE | An invalid value was provided for a configuration key |\n| `C0015` | CONFIG_KEY_ALREADY_EXIST | Attempted to create a configuration key that already exists |\n| `C0016` | INVALID_DATA | The provided data is invalid |\n| `C0500` | BIG_NUMBER_ERROR | Encountered an error with big number operations |\n| `C9000` | NOT_IMPLEMENTED | The called method or feature isn't implemented |\n```\n\n----------------------------------------\n\nTITLE: Skeleton for BalancesComponent Class - TypeScript\nDESCRIPTION: Provides a class definition for the BalancesComponent including properties for address, nativeBalance, and tokenBalances. Implements Angular's OnInit lifecycle interface; includes empty ngOnInit to be implemented later. No external dependencies except for Angular core and component decorator.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BalancesComponent implements OnInit {\n  constructor() {}\n\n  address = \"\";\n  nativeBalance = \"\";\n  tokenBalances = \"\";\n\n  ngOnInit(): void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReference and Other Components - React JSX\nDESCRIPTION: Imports React components and configuration files required to render the API reference and informational blocks for the eth_getTransactionByHash documentation page. Uses JSX syntax to display the ApiReference with method-specific configs and incorporate an Admonition with a helpful note and internal link. Dependencies include the specified components and configs from the project and Docusaurus theme.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getTransactionByHash.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.rpc.eth_getTransactionByHash} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component - React/TypeScript - TypeScript\nDESCRIPTION: This import brings in a TypeScript-based React component used for displaying an API banner on the page. The component is located within the project's source directory. Prerequisite: local TypeScript/React setup and the file @site/src/components/ApiBanner/ApiBanner.tsx. This does not take parameters; it simply makes the component available to the module.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-wallet-transactions-verbose.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Internal Transactions Endpoint\nDESCRIPTION: This JSX snippet utilizes the `ApiReference` React component to dynamically render the documentation details for the `getInternalTransactions` API endpoint. Configuration details for this specific endpoint are passed as props, sourced from the `config.transaction.getInternalTransactions` object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/13-Blockchain API/02-Get Transactions/get-internal-transactions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.transaction.getInternalTransactions} />\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component\nDESCRIPTION: Imports the ApiBanner component from the site components directory, used for displaying API-related banners at the top of the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/07-Get Token Stats/get-token-stats.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis API Key Environment Variable (Text)\nDESCRIPTION: Instructs the user to create a `.env.local` file in the project root and add the `MORALIS_API_KEY` variable. This key is required to authenticate requests to the Moralis API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n.env.local\nMORALIS_API_KEY=replace_me\n```\n\n----------------------------------------\n\nTITLE: Express Server Main Configuration\nDESCRIPTION: Main Express server setup with all middleware and route configurations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from 'moralis';\nimport express from 'express';\nimport cors from 'cors';\nimport { parseDashboard } from './parseDashboard';\nimport { parseServer } from './parseServer';\nimport { errorHandler } from './middlewares/errorHandler';\nimport config from './config';\nimport { authRouter } from './auth/authRouter';\n\nconst app = express();\n\nMoralis.start({\n  apiKey: config.MORALIS_API_KEY,\n});\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\napp.use(cors());\n\napp.use('/server', parseServer);\napp.use('/dashboard', parseDashboard);\napp.use('/auth', authRouter);\napp.use(errorHandler);\n\napp.use(express.static('public'));\n\napp.listen(config.PORT, () => {\n  console.log(`${config.APP_NAME} is running on port ${config.PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Time-Series Volume by Category via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve time-series volume data for a specific token category (e.g., 'artificial-intelligence') on a specific chain over a specified timeframe using the Moralis Web3 API v2.2. Requires the category in the path and query parameters like 'chain=eth' and 'timeframe=1d'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/volume/timeseries/artificial-intelligence?chain=eth&timeframe=1d\n```\n\n----------------------------------------\n\nTITLE: Updating Home Component Props\nDESCRIPTION: Updates the Home component to include the myNFT prop for displaying the follow NFT.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Home({ profile, nftArray, myNFT }) {\n  console.log(profile);\n\n  //let myNFT; remove or comment this out\n  \n  ...\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Solana Wallet Authentication\nDESCRIPTION: Commands to install required packages including Moralis, NextAuth, Web3UIKit, and Solana wallet adapter libraries.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @moralisweb3/next next-auth @web3uikit/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install bs58 tweetnacl \\\n    @solana/wallet-adapter-base \\\n    @solana/wallet-adapter-react \\\n    @solana/wallet-adapter-react-ui \\\n    @solana/wallet-adapter-wallets \\\n    @solana/web3.js\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulators via CLI (Shell)\nDESCRIPTION: Starts the Firebase emulators (e.g., Hosting, Functions) configured for the project. This allows local testing of the application without deploying to the live Firebase environment. Requires the Cloud Functions app to be built first if using TypeScript.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nfirebase emulators:start\n```\n\n----------------------------------------\n\nTITLE: Starting the NextJS Development Server\nDESCRIPTION: Runs the NextJS application in development mode using the script defined in `package.json`. This command starts a local development server, typically accessible at `http://localhost:3000`, with features like hot module reloading.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies\nDESCRIPTION: Installs the required dependencies for the frontend application using yarn.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi Client for MetaMask - TypeScript\nDESCRIPTION: This snippet sets up a Wagmi client configuration in TypeScript, specifying supported Ethereum chains (mainnet, sepolia) and their transports, allowing MetaMask-based Web3 connectivity. The config object is required for subsequent Wagmi functions that manage blockchain connections and requests. Requires '@wagmi/core' and correct chain constants.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Next-Auth with MoralisNextAuthProvider - JavaScript\nDESCRIPTION: Implements Next-Auth API route with MoralisNextAuthProvider as the authentication provider. The callbacks customize jwt and session objects to include full user information. This endpoint should be placed in pages/api/auth/[...nextauth].js and requires prior setup of Moralis and Next-Auth.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\";\\nimport { MoralisNextAuthProvider } from \"@moralisweb3/next\";\\n\\nexport default NextAuth({\\n  providers: [MoralisNextAuthProvider()],\\n  // adding user info to the user session object\\n  callbacks: {\\n    async jwt({ token, user }) {\\n      if (user) {\\n        token.user = user;\\n      }\\n      return token;\\n    },\\n    async session({ session, token }) {\\n      session.user = token.user;\\n      return session;\\n    },\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK with pnpm\nDESCRIPTION: Installs the Moralis SDK using the pnpm package manager\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/partials/_install-moralis-sdk.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add ${props.node}\n```\n\n----------------------------------------\n\nTITLE: Replacing MetaMask Button with RainbowKit ConnectButton\nDESCRIPTION: Modifies the `pages/signin.jsx` component to use the `<ConnectButton />` component from `@rainbow-me/rainbowkit`. This component provides a standardized user interface for connecting various wallets supported by RainbowKit, replacing a previous, potentially custom, authentication button.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n...\n\nreturn (\n  <div>\n  \t<h3>Web3 Authentication</h3>\n    <ConnectButton />\n  </div>\n);\n...\n```\n\n----------------------------------------\n\nTITLE: Fetching Top EVM NFT Collections by Market Cap using Moralis API\nDESCRIPTION: Moralis API endpoint (v2.2) for retrieving the top EVM NFT collections ranked by market capitalization. Currently, this functionality only supports the Ethereum chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/market-data/nfts/top-collections\n```\n\n----------------------------------------\n\nTITLE: Including Client-Side Libraries via CDN (HTML)\nDESCRIPTION: Includes required JavaScript libraries for the client-side application using Content Delivery Network (CDN) links within an HTML file. It loads Axios for making HTTP requests (to the backend), Ethers.js for interacting with the user's Ethereum wallet (like MetaMask) to sign messages, and the Supabase client library for interacting with the Supabase backend from the browser.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n<script src=\"https://cdn.ethers.io/lib/ethers-5.2.umd.min.js\" type=\"application/javascript\"></script>\n<script src=\"https://unpkg.com/@supabase/supabase-js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Base64 Secret Key Generation in C#\nDESCRIPTION: Utility code to generate a base64 encoded secret key from a plain text phrase for JWT signing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\nstring phrase = \"Morails Web3 APIs are the greatest thing since sliced bread!\";\n\nstring base64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(phrase));\n\nConsole.WriteLine(base64);\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Domain via Moralis API\nDESCRIPTION: Moralis API endpoint URL for resolving an ENS domain name, specified by `:domain`, to its corresponding wallet address. This is the Moralis equivalent to SimpleHash's 'ENS Lookup'. Moralis also supports other resolution services.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_32\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/resolve/ens/:domain\n```\n\n----------------------------------------\n\nTITLE: Implementing User Session Management Component in React\nDESCRIPTION: React component that manages user session state and authentication status. Handles session verification, data display, and logout functionality using axios for API communication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from \"react\";\n\nimport { useNavigate } from \"react-router-dom\";\n\nimport axios from \"axios\";\n\nexport default function User() {\n  const navigate = useNavigate();\n\n  const [session, setSession] = useState({});\n\n  useEffect(() => {\n    axios(`${process.env.REACT_APP_SERVER_URL}/authenticate`, {\n      withCredentials: true,\n    })\n      .then(({ data }) => {\n        const { iat, ...authData } = data; // remove unimportant iat value\n\n        setSession(authData);\n      })\n      .catch((err) => {\n        navigate(\"/signin\");\n      });\n  }, []);\n\n  async function signOut() {\n    await axios(`${process.env.REACT_APP_SERVER_URL}/logout`, {\n      withCredentials: true,\n    });\n\n    navigate(\"/signin\");\n  }\n\n  return (\n    <div>\n      <h3>User session:</h3>\n      <pre>{JSON.stringify(session, null, 2)}</pre>\n      <button type=\"button\" onClick={signOut}>\n        Sign out\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation with ApiReference Component (React/JSX)\nDESCRIPTION: This JSX snippet utilizes the custom `ApiReference` React component to display API documentation. It passes configuration details for the `getNativeBalance` endpoint (retrieved from the imported `config` object via `config.balance.getNativeBalance`) to the component using the spread operator (`{...}`). The component then renders the API reference based on this configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/02-Get Native Balance/get-native-balance.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.balance.getNativeBalance} />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JavaScript/React\nDESCRIPTION: This snippet demonstrates how to import reusable documentation-related React components, such as ApiReference for live API schema integration, Admonition for notes and warnings, Link for easy navigation, and a JSON configuration for dynamic rendering. These imports are necessary prerequisites for constructing interactive API documentation pages. Dependencies include React, the docusaurus framework, and existing config files. Inputs are components used in subsequent JSX markup, and outputs are the instantiated components within the page; improper paths or absent dependencies will cause build errors.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/eth_getNFTCollections.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies - Bash\nDESCRIPTION: Installs all required backend NPM packages: moralis, express, cors, dotenv, and nodemon. This ensures the backend can connect to Moralis, serve HTTP, handle CORS, read environment variables, and enable hot-reloading. Requires Node.js v14+ and NPM. Outputs installed dependencies in 'node_modules'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis express cors dotenv nodemon\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference and Notices - Docusaurus Markdown/JSX - Markdown+JSX\nDESCRIPTION: Uses Markdown and embedded React components to compose a documentation page for the Solana 'Get Trending Tokens' API endpoint. It provides premium usage notices, endpoint descriptions, and renders an API reference section dynamically via a configuration. The page expects a Docusaurus documentation environment with the necessary components and config files in place. All inputs are static string metadata and configuration props; the output is a rendered documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/08-Get Trending Tokens/trending-tokens-api.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nsidebar_position: 0\nsidebar_label: Get Trending Tokens\ntitle: Get Trending Tokens for Solana\nslug: /web3-data-api/solana/reference/get-trending-tokens\ndescription: Retrieve a list of trending tokens based on various criteria.\n---\n\n# Get Trending Tokens <MainnetBadge /> <PremiumEndpointBadge />\n\n  <Admonition type=\"info\" icon=\"💡\" title=\"Premium Endpoint\">\n    <p>\n      To use this API, you will need an API key associated with a Moralis\n      account on the <strong>Business</strong> plan or higher.\n    </p>\n  </Admonition>\n\n<ApiReference {...config.solana.getTrendingTokens} />\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Trades - Moralis NFT API - TypeScript\nDESCRIPTION: This TypeScript example fetches all trades for an NFT collection from a specified marketplace using the Moralis NFT API. Dependencies include 'moralis' and '@moralisweb3/common-evm-utils' TypeScript libraries. Main parameters are 'apiKey', 'address' (NFT contract), 'chain' (like EvmChain.ETHEREUM), and 'marketplace' (e.g., \"opensea\"). The script authenticates Moralis, requests trade data, and logs the JSON response. You must provide a valid API key and configure your TypeScript project accordingly.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/06-NFT Marketdata/how-to-get-nft-trades-by-marketplace.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const marketplace = \"opensea\";\n\n  const response = await Moralis.EvmApi.nft.getNFTTrades({\n    address,\n    chain,\n    marketplace,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchain Event Stream\nDESCRIPTION: Comprehensive example of creating a stream to monitor blockchain events using Moralis streams API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import streams\n\nwebhook_url = 'WEB_HOOK_URL_HERE'\napi_key = 'API_KEY_HERE'\n\nabi = [{\n  \"anonymous\": False,\n  \"inputs\": [\n    {\n      \"indexed\": False,\n      \"internalType\": \"string\",\n      \"name\": \"name\",\n      \"type\": \"string\",\n    },\n    {\n      \"indexed\": True,\n      \"internalType\": \"bytes32\",\n      \"name\": \"label\",\n      \"type\": \"bytes32\",\n    },\n    {\n      \"indexed\": True,\n      \"internalType\": \"address\",\n      \"name\": \"owner\",\n      \"type\": \"address\",\n    },\n    {\n      \"indexed\": False,\n      \"internalType\": \"uint256\",\n      \"name\": \"cost\",\n      \"type\": \"uint256\",\n    },\n    {\n      \"indexed\": False,\n      \"internalType\": \"uint256\",\n      \"name\": \"expires\",\n      \"type\": \"uint256\",\n    },\n  ],\n  \"name\": \"NameRegistered\",\n  \"type\": \"event\",\n}]\n\nadvanced_options = [\n  {\n    \"topic0\": \"NameRegistered(string,bytes32,address,uint256,uint256)\",\n    \"filter\": {\n      \"or\": [\n        { \"eq\": [\"owner\", \"0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5\"] },\n        { \"gt\": [\"cost\", \"1000000000000000000\"] }\n      ]\n    }\n  }\n]\n\nbody = {\n    \"webhookUrl\": webhook_url,\n    \"description\": \"ENS Name Registrations\",\n    \"tag\": \"ensRegistrationByBob\",\n    \"topic0\": [\"NameRegistered(string,bytes32,address,uint256,uint256)\"],\n    \"allAddresses\": False,\n    \"includeNativeTxs\": True,\n    \"includeContractLogs\": True,\n    \"includeInternalTxs\": False,\n    \"abi\": abi,\n    \"advancedOptions\": advanced_options,\n    \"chainIds\": [\"0x1\"],\n}\n\nresult = streams.evm.create_stream(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n\nparams = {\n    \"id\": result[\"id\"],\n}\nbody = {\n    \"address\": \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n}\n\nresult = streams.evm.add_address_to_stream(\n    api_key=api_key,\n    params=params,\n    body=body,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring RainbowKit and Wagmi Providers in NextJS App\nDESCRIPTION: Configures the NextJS application entry point (`pages/_app.jsx`) to support RainbowKit and wagmi. It sets up chains (mainnet), providers (publicProvider), WalletConnect configuration using a project ID, and wraps the application components with `WagmiConfig`, `SessionProvider` (from next-auth), and `RainbowKitProvider` to enable wallet connectivity and session management throughout the app. Requires a WalletConnect Project ID obtained from their dashboard.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDefaultWallets, RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { createConfig, configureChains, WagmiConfig } from \"wagmi\";\nimport { mainnet } from \"wagmi/chains\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { SessionProvider } from \"next-auth/react\";\nimport \"@rainbow-me/rainbowkit/styles.css\";\n\nconst { chains, publicClient, webSocketPublicClient } = configureChains(\n  [mainnet],\n  [publicProvider()]\n);\n\nconst { connectors } = getDefaultWallets({\n  appName: \"My RainbowKit App\",\n  projectId: \"WALLET_CONNECT_PROJECT_ID\", // Get your project ID from https://cloud.walletconnect.com/\n  chains,\n});\n\nconst config = createConfig({\n  autoConnect: true,\n  publicClient,\n  webSocketPublicClient,\n  connectors,\n});\n\n// added RainbowKitProvider wrapper\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <WagmiConfig config={config}>\n      <SessionProvider session={pageProps.session} refetchInterval={0}>\n        <RainbowKitProvider chains={chains}>\n          <Component {...pageProps} />\n        </RainbowKitProvider>\n      </SessionProvider>\n    </WagmiConfig>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Allowing Synthetic Default Imports in TypeScript Configuration\nDESCRIPTION: Adds the allowSyntheticDefaultImports compiler option to tsconfig.app.json to resolve issues with default imports such as axios in Angular TypeScript projects. This option allows default imports from modules that may not have a default export. Should be included under 'compilerOptions' for TypeScript to correctly interpret module imports.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"compilerOptions\": {\n\\u00a0 \\\"allowSyntheticDefaultImports\\\": true,\n\\u00a0 \\\"outDir\\\": \\\"./out-tsc/app\\\",\n\\u00a0 \\\"types\\\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Solana Authentication\nDESCRIPTION: Example of setting up environment variables in .env.local file for Solana wallet authentication, including Moralis API key and NextAuth settings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAPP_DOMAIN=amazing.finance\nMORALIS_API_KEY=xxxx\nNEXTAUTH_URL=http://localhost:3000\nNEXTAUTH_SECRET=7197b3e8dbee5ea6274cab37245eec212\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis and Express Dependencies - Shell\nDESCRIPTION: Installs the required dependencies for the NodeJS dapp, specifically moralis, express, and @moralisweb3/common-evm-utils, by running npm install. These packages are essential for building the blockchain querying server and handling HTTP requests.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install moralis express @moralisweb3/common-evm-utils\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Solana Wallet Authentication\nDESCRIPTION: Set up the necessary environment variables in the .env.local file for Solana wallet authentication, including Moralis API key, app domain, and NextAuth settings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAPP_DOMAIN=amazing.finance\nMORALIS_API_KEY=xxxx\nNEXTAUTH_URL=http://localhost:3000\nNEXTAUTH_SECRET=7197b3e8dbee5ea6274cab37245eec212\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component with Configuration\nDESCRIPTION: This snippet renders the ApiReference component, passing in the configuration for the getWalletTokenBalances endpoint from the imported config file. This displays the API documentation for retrieving ERC20 token balances for a wallet.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/01-Get Token Balances/get-wallet-token-balances.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getWalletTokenBalances}>\n\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Transfer UI with Moralis and React - JavaScript\nDESCRIPTION: This snippet defines the TransferToken React component, presenting a form-based UI to facilitate token transfers between chains. It incorporates multiple FormControl elements with React state binding and event handling for source/destination chains, token contract address, receiver address, and transfer amount, alongside a submission button to trigger the transfer via handleTokenTransfer. Dependencies include React, UI components (e.g., Chakra UI's Box, VStack, FormControl, Input, Select, Button), and underlying logic to tie inputs and actions with Moralis SDK (not shown). Key parameters handled by the form are sourceChain, interchainTokenContractAddress, destinationChain, receiverAddress, and amountToTransfer. Inputs are user-provided and outputs are processed through the invoked transfer handler, with loading and disabled UI states managed dynamically. Ensure actual implementations for unspecified code regions indicated by comments or placeholders are present for end-to-end functionality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n//...\n\nconst TransferToken = () => {\n  //...\n\n  return (\n    <Box\n      padding=\"7\"\n      maxW=\"xxl\"\n      borderWidth=\"1px\"\n      borderRadius=\"lg\"\n      overflow=\"hidden\"\n      margin=\"auto\"\n      marginTop=\"-20\"\n    >\n      {/*  ...  */}\n\n      <VStack spacing={5} align=\"stretch\">\n        <FormControl>\n          <FormLabel>Source Chain Name</FormLabel>\n\n          <Stack spacing={3}>\n            <Select\n              placeholder=\"Select  source  chain\"\n              value={sourceChain}\n              onChange={(e) => setSourceChain(e.target.value)}\n              size=\"md\"\n            >\n              {/*  ...  */}\n            </Select>\n          </Stack>\n\n          <FormHelperText>\n            Source chain for your token eg. Fantom, binance, Polygon etc.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Token Contract Address</FormLabel>\n\n          <Input\n            placeholder=\"Enter  Token  Contract  Address\"\n            value={interchainTokenContractAddress}\n            onChange={(e) => setInterchainTokenContractAddress(e.target.value)}\n          />\n\n          <FormHelperText>\n            Contract address of the token you want to transfer.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Destination Chain</FormLabel>\n\n          <Stack spacing={3}>\n            <Select\n              placeholder=\"Select  Destination  chain\"\n              value={destinationChain}\n              onChange={(e) => setDestinationChain(e.target.value)}\n              size=\"md\"\n            >\n              {/*  ...  */}\n            </Select>\n          </Stack>\n\n          <FormHelperText>\n            Destination chain for your token eg. Fantom, binance, Polygon etc.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Receiver Address</FormLabel>\n\n          <Input\n            placeholder=\"Enter  Receiver  Address\"\n            value={receiverAddress}\n            onChange={(e) => setReceiverAddress(e.target.value)}\n          />\n\n          <FormHelperText>Receiver address for your token.</FormHelperText>\n        </FormControl>\n\n        <FormControl>\n          <FormLabel>Amount to Transfer</FormLabel>\n\n          <Input\n            placeholder=\"Enter  Amount  to  Transfer\"\n            value={amountToTransfer}\n            onChange={(e) => setAmountToTransfer(Number(e.target.value))}\n          />\n\n          <FormHelperText>\n            Amount to transfer to the receiver address.\n          </FormHelperText>\n        </FormControl>\n\n        <Button\n          colorScheme=\"cyan\"\n          onClick={handleTokenTransfer}\n          isLoading={isLoading}\n          loadingText=\"Transferring  Token...\"\n          w=\"sm\"\n          variant=\"solid\"\n          disabled={isLoading}\n        >\n          Transfer Token\n        </Button>\n\n        {/*  ...  */}\n      </VStack>\n    </Box>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Target Address in C# Console\nDESCRIPTION: This snippet shows the initial part of the `DisplayCryptoData` function, printing the target wallet address to the console before fetching any blockchain data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine($\"For address: {address}...\\n\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Information by Unix Timestamp in Python\nDESCRIPTION: Python implementation for getting the closest block by unix timestamp using Moralis API. This code uses the evm_api.block.get_date_to_block method with the required parameters of API key, timestamp, and blockchain identifier.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-by-unix-timestamp.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"date\": \"1667823435\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.block.get_date_to_block(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Full MetaMask Web3 Authentication with Challenge Signing - JavaScript\nDESCRIPTION: Implements complete sign-in logic: disconnects previous wallet, connects with MetaMask, retrieves challenge message from Moralis, and signs it using user's wallet. Uses Wagmi and @moralisweb3/next hooks (useConnect, useSignMessage, useAccount, useAuthRequestChallengeEvm, useDisconnect). Logs the wallet signature after completion. Place in pages/signin.jsx or as a reusable authentication component. Requires the Moralis Next API route and Wagmi to be set up as described previously.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { useAuthRequestChallengeEvm } from \"@moralisweb3/next\";\n\nfunction SignIn() {\n  const { connectAsync } = useConnect();\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n  const { requestChallengeAsync } = useAuthRequestChallengeEvm();\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n\n    const { account, chain } = await connectAsync({\n      connector: new MetaMaskConnector(),\n    });\n\n    const { message } = await requestChallengeAsync({\n      address: account,\n      chainId: chain.id,\n    });\n\n    const signature = await signMessageAsync({ message });\n\n    console.log(signature);\n  };\n\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n      <button onClick={handleAuth}>Authenticate via Metamask</button>\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Querying eth_getTransactionReceipt Response - JSON\nDESCRIPTION: This snippet shows a typical JSON-RPC response for eth_getTransactionReceipt, containing fields 'jsonrpc', 'id', and a 'result' object representing the transaction receipt. Dependencies include JSON-RPC 2.0 compatibility, with input as a valid request and output as a structured object. The 'result' object contains details if the transaction exists; otherwise, it may be null.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    // Transaction receipt object\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Admonition UI Component in JavaScript\nDESCRIPTION: Imports the Admonition React component, which provides standardized alert or notice boxes for documentation interfaces. This dependency is local and presumes the use of Docusaurus or a compatible theme. No parameters are set in this isolated import.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-wallet-nft-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Admonition from \"@theme/Admonition\";\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for getWalletNFTTransfers Endpoint\nDESCRIPTION: Provides an example structure of the JSON response returned by the Moralis `getWalletNFTTransfers` API endpoint. The response includes pagination information (`total`, `page`, `page_size`, `cursor`) and a `result` array containing objects, each representing an NFT transfer with details like block number, timestamp, transaction hash, token address, token ID, sender (`from_address`), receiver (`to_address`), amount, and verification status.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-NFT-transfers-of-smart-account.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": null,\n  \"page\": 0,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmRlciI6IkRFU0MiLCJvZmZzZXQiOjAsImxpbWl0IjoxMDAsImRpc2FibGVfdG90YWwiOnRydWUsIndoZXJlIjp7fSwiZnJvbV9hZGRyZXNzIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1IiwidG9fYWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSIsInBhZ2UiOjEsImtleSI6IjE3NDMzNDI5LjUzLjEzMy4wIiwidG90YWwiOm51bGwsImlhdCI6MTY4OTc1ODUzNH0.MIBO5T05EbJruMe_ywWXEs99WJZ4jabI5IciWQugpYE\",\n  \"result\": [\n    {\n      \"block_number\": \"17715655\",\n      \"block_timestamp\": \"2023-07-17T21:27:59.000Z\",\n      \"block_hash\": \"0x58f8652ecb7025849a740fe0d6d270c61f9d0d59b41ab6460f4d9d6bb292b80d\",\n      \"transaction_hash\": \"0xf5e701f9f16f66ec8cdd3fa9f5c52b15410188392a0ffc128777bb89b2c73243\",\n      \"transaction_index\": 80,\n      \"log_index\": 225,\n      \"value\": \"0\",\n      \"contract_type\": \"ERC1155\",\n      \"transaction_type\": \"Single\",\n      \"token_address\": \"0xd4416b13d2b3a9abae7acd5d6c2bbdbe25686401\",\n      \"token_id\": \"32861001645432232115677216693187330961962340035243999304845689030250465478890\",\n      \"from_address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"from_address_label\": null,\n      \"to_address\": \"0xea97bb00daa1880e0a575b38e723066a398595ea\",\n      \"to_address_label\": null,\n      \"amount\": \"1\",\n      \"verified\": 1,\n      \"operator\": \"0x11be6670e94c6862dcd92bd4c27753f4df50890d\",\n      \"possible_spam\": false,\n      \"verified_collection\": true\n    },\n    // ....\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Removing Address Binding\nDESCRIPTION: This JSX snippet renders the `ApiReference` component, passing specific configuration data (`config.auth.removeBind`) as props using the spread syntax. This dynamically displays the documentation for the 'removeBind' endpoint within the authentication API section.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/reference/03-Profiles/remove-bind.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.auth.removeBind} />\n```\n\n----------------------------------------\n\nTITLE: Executing TypeScript Script via ts-node in Shell\nDESCRIPTION: This shell command executes a TypeScript file named `index.ts` using the `ts-node` utility. It requires `ts-node` and TypeScript to be installed (typically via npm/yarn) and accessible in the system's PATH. `ts-node` compiles and runs the TypeScript code directly without a separate compilation step.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/partials/_run-the-script.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nts-node index.ts\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Content Based on NFT Ownership in Django Template (HTML)\nDESCRIPTION: This HTML code defines the structure for the 'protected.html' Django template. It uses Django template tags to first check if a user is authenticated. If authenticated, it displays the user's address (username). It then checks if the 'nfts' context variable (passed from the view) is non-empty. If 'nfts' exists, it indicates the user owns the required NFT and displays a success message along with the NFT data. Otherwise, it displays a message indicating the user does not own the necessary NFT. It also provides a logout link for authenticated users or a login link for unauthenticated users.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/token-gating-django.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n```html protected.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Moralis Django NFT Gated Demo Page</title>\n</head>\n<body>\n    <div>\n\n    {% if user.is_authenticated %}\n        <h1>Eth address: {{ user.username }}</h1>\n        <h2>Protected content</h2>\n        {% if nfts %}\n          <h3>Nice! You have our NFT!</h3>\n          <pre>\n{{ nfts }}\n          </pre>\n        {% else %}\n          <h3>Sorry, you don't have our NFT!</h3>\n        {% endif %}\n        <br/>\n        <a href=\"{% url 'logout' %}?next={% url 'moralis_auth' %}\">Logout</a>\n    {% else %}\n        <a href=\"{% url 'moralis_auth' %}\"> Login page </a>\n    {% endif %}\n    </div>\n\n</body>\n</html>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference and ApiBanner Components in React\nDESCRIPTION: Imports the ApiReference component from the site's components directory and configuration data for the NFT contract sale prices API endpoint. Also imports the ApiBanner component for displaying API information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/02-NFT Prices/get-nft-contract-sale-prices.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Reporting Spam NFT Contracts with Moralis in Python\nDESCRIPTION: This code demonstrates how to report spam NFT contracts using the Moralis API in Python. It uses the evm_api module from the moralis package to call the review_contracts endpoint with the necessary parameters and body to report a contract as spam.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/spam-detection/report-nft-spam.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nbody = {\n    \"contracts\": [\n        {\n            \"contract_address\": \"0x06012c8cf97bead5deae237070f9587f8e7a266d\",\n            \"reason\": \"My Reason\",\n            \"report_type\": \"spam\",\n            \"contract_type\": \"NFT\"\n        }\n    ]\n}\n\nparams = {\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.utils.review_contracts(\n    api_key=api_key,\n    params=params,\n    body=body\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating Frontend React Application (Yarn) - Shell\nDESCRIPTION: Alternative frontend bootstrapping using Yarn to create the React app in a new 'frontend' directory. Requires Yarn installed. Outputs React app template in './frontend'. Inputs: none.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nyarn create react-app frontend\n```\n\n----------------------------------------\n\nTITLE: Get Wallet Stats Response Example\nDESCRIPTION: Example JSON response structure for the new /wallets/{address}/stats endpoint showing NFT, collection, transaction and transfer counts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-09-11-breaking-change.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"nfts\": \"14\",\n\t\"collections\": \"3\",\n\t\"transactions\": {\n            \"total\": \"5433\"\n        },\n\t\"nft_transfers\": {\n            \"total\": \"321\"\n        },\n\t\"token_transfers\": {\n            \"total\": \"2141\"\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying eth_getTransactionReceipt Parameters - JSON\nDESCRIPTION: This snippet provides a JSON-RPC parameter array for the eth_getTransactionReceipt method, which fetches the receipt of a transaction by its hash. The single parameter is a hexadecimal transaction hash, and no additional dependencies are required. Input is the transaction hash as a string, output is the transaction receipt object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"0x1a14ddf8d90ef3bdfa85e9d9d35f4abebfdff70606faa55b61404f1e78cb90fc\"\n]\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit and Wagmi Dependencies (Bash)\nDESCRIPTION: Installs the necessary packages (`@rainbow-me/rainbowkit`, `wagmi`, `viem`) using npm. Equivalent commands exist for yarn. These packages provide the core functionality for RainbowKit wallet connection UI and wagmi hooks for interacting with Ethereum.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbowkit@latest wagmi viem\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JavaScript/JSX\nDESCRIPTION: This code imports the `DocCardList` component from the '@theme/DocCardList' module. This component is typically provided by documentation frameworks like Docusaurus to automatically generate lists of documentation pages based on the sidebar structure or directory contents.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/tutorials.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Details by Hash in Python using Moralis API\nDESCRIPTION: This Python code demonstrates how to fetch transaction details from the Ethereum blockchain using the Moralis API. It requires an API key and takes a transaction hash as input to return detailed transaction information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-a-transaction-by-transaction-hash.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Import the necessary module from the Moralis library\nfrom moralis import evm_api\n\n# Specify your Moralis API key for authentication\napi_key = \"YOUR_API_KEY\"\n\n# Define parameters, including the transaction hash and blockchain (Ethereum in this case)\nparams = {\n    \"transaction_hash\": \"0xaae93882e8a9fe9ff30151853db20e4cd161940757a01744465ab83b751c5875\",\n    \"chain\": \"eth\",\n}\n\n# Use the Moralis API to fetch details of the specified transaction\nresult = evm_api.transaction.get_transaction(\n    api_key=api_key,\n    params=params,\n)\n\n# Print the result, which contains information about the transaction\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Page Metadata (YAML)\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page. It includes the page title ('Integrations'), its position in the sidebar (2000), the URL slug relative to its parent ('../integrations'), and a custom CSS class ('sidebar-integrations') for styling the sidebar link.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/integrations.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Integrations\"\nsidebar_position: 2000\nslug: \"../integrations\"\nsidebar_class_name: \"sidebar-integrations\"\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Web3 Authentication SignIn Page - JavaScript\nDESCRIPTION: Creates a minimal SignIn page as a functional React component displaying a Web3 Authentication header. Save as pages/signin.jsx. This boilerplate sets the stage for subsequent wallet connection and user authentication logic. No props or state are used here; it is for interface structure only.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction SignIn() {\n  return (\n    <div>\n      <h3>Web3 Authentication</h3>\n    </div>\n  );\n}\n\nexport default SignIn;\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using YAML Frontmatter\nDESCRIPTION: This YAML block at the beginning of the MDX file sets metadata properties for the documentation page. `sidebar_position` controls its order in the navigation sidebar, `sidebar_label` sets the text displayed in the sidebar, and `slug` defines the URL path for this page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/03-Get Wallet NFT Balances/get-wallet-nft-collections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidabar_position: 1\nsidabar_label: Get NFT collections by wallet\nslug: /web3-data-api/evm/reference/wallet-api/get-nft-collections-by-wallet\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference using JSX Component\nDESCRIPTION: Uses the imported ApiReference component within a JSX context to render the documentation for the 'DeleteAddressFromStream' API operation. It passes the specific configuration for this endpoint (`config.streams.DeleteAddressFromStream`) to the component using JSX spread attributes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/delete-address-from-stream.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.streams.DeleteAddressFromStream} />\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Package with Yarn\nDESCRIPTION: Command to install the Moralis package using Yarn, which is required for integrating Moralis Web3 authentication services.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add moralis\n```\n\n----------------------------------------\n\nTITLE: Updating Component Signature for NFT Array (JavaScript)\nDESCRIPTION: Modifies the `Home` component definition in `pages/index.js` to accept the `nftArray` prop, in addition to the existing `profile` prop. This allows the component to receive and use the array of Lens follower NFT animation URLs fetched via Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Home({ profile, nftArray }) {\n  console.log(profile);\n\n  // let nftArray; remove or comment this out\n  let myNFT;\n  \n  ...\n\n```\n\n----------------------------------------\n\nTITLE: Querying DEX Analytics Endpoints\nDESCRIPTION: HTTP GET endpoints for retrieving pair statistics and aggregated token pair data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/09-reservoir-migration-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/pairs/:address/stats\nGET https://deep-index.moralis.io/api/v2.2/:token_address/pairs/stats\n```\n\n----------------------------------------\n\nTITLE: Querying API Version Using Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to use the Moralis SDK to check the Web3 API version. It imports Moralis via ES module syntax, initializes the SDK with your API key, and queries the current API version using 'web3ApiVersion()'. The output is logged as JSON. This requires the 'moralis' npm package and a TypeScript-compatible project setup. Replace 'YOUR_API_KEY' as appropriate.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/02-compute-units-cu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.utils.web3ApiVersion();\n\nconsole.log(response?.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Rendering Streams API Documentation - JavaScript (JSX)\nDESCRIPTION: This JSX snippet renders the ApiReference React component and spreads in the configuration properties for 'GetStatsByStreamId'. It requires React and expects config.streams.GetStatsByStreamId to be properly defined in the JSON config. The main parameter is the configuration object, and the output is a rendered API reference documentation for the specified endpoint. This component must be placed within a compatible React rendering context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/03-Stats/get-stats-by-stream-id.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.streams.GetStatsByStreamId} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Components - React - JavaScript\nDESCRIPTION: This snippet shows how to import the ApiReference React component and a configuration JSON for endpoint documentation. The imported component is used to render interactive API documentation based on the provided config. Dependencies include React, the custom ApiReference component, and a configuration JSON object for the API endpoints.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/13-Blockchain API/03-Get Logs/get-contract-events.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Structure for Native Balances in Moralis Streams (JSON)\nDESCRIPTION: This snippet provides an example of the Moralis Streams webhook response after configuring native balance triggers. The 'nativeBalances' array includes the resulting balances for each uniquely selected address based on the triggers specified in the configuration. Inputs needed are determined by the stream configuration, and outputs include all standard webhook fields plus the 'nativeBalances' array, which contains address-balance pairs. No third-party dependencies are required, and the response structure must be respected as per the documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/get-native-balances.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": true,\n  \"chainId\": \"0x1\",\n  \"abi\": [],\n  \"streamId\": \"v900a834-a542-43f9-98f6-0f76caf65394\",\n  \"tag\": \"someString\",\n  \"retries\": 0,\n  \"block\": {\n    \"number\": \"16140655\",\n    \"hash\": \"0xfc0b1ae5d04b3c5a780f1f72658edc9e26a6340df4b1118a713652b6d043039a\",\n    \"timestamp\": \"1670510543\"\n  },\n  \"logs\": [],\n  \"txs\": [\n    {\n      \"hash\": \"0xd304ef0dd0df001d8f37de569af63585dbf7637247b17dc12224828960b4d830\",\n      \"gas\": \"120000\",\n      \"gasPrice\": \"17605149814\",\n      \"nonce\": \"43904\",\n      \"input\": \"0xa9059cbb00000000000000000000000072f54455fbdbff1b8975ab2df599ff9f9afb5310000000000000000000000000000000000000000000000000000000000606a9e0\",\n      \"transactionIndex\": \"16\",\n      \"fromAddress\": \"0x0b5c4a7fcda49e0a8661419bb55b86161a86db2a\",\n      \"toAddress\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n      \"value\": \"0\",\n      \"type\": \"2\",\n      \"v\": \"0\",\n      \"r\": \"52200684288032529078283440758240219132630446778024109656659293182067276426999\",\n      \"s\": \"25805856329951682196861199677610079726197925451457581628939426805653323455347\",\n      \"receiptCumulativeGasUsed\": \"1214527\",\n      \"receiptGasUsed\": \"63209\",\n      \"receiptContractAddress\": null,\n      \"receiptRoot\": null,\n      \"receiptStatus\": \"1\"\n    }\n  ],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [],\n  \"nftTokenApprovals\": [],\n  \"nftApprovals\": {\n    \"ERC721\": [],\n    \"ERC1155\": []\n  },\n  \"nftTransfers\": [],\n  \"nativeBalances\": [\n    {\n      \"address\": \"0x0b5c4a7fcda49e0a8661419bb55b86161a86db2a\",\n      \"balance\": \"3921415148849464186\"\n    },\n    {\n      \"address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n      \"balance\": \"2135786324\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize React Project and Dependencies\nDESCRIPTION: Commands to create a new React project and install required dependencies including lightweight-charts and axios.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-tradingview-lightweight-charts-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app crypto-charts\ncd crypto-charts\nnpm install lightweight-charts axios react-spinners\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase RLS Policy SQL\nDESCRIPTION: SQL policy definition to enable row-level security for authenticated users in Supabase\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY \"Enable select for authenticated users only\"\nON public.users\nFOR SELECT\nTO authenticated\nWITH CHECK (true);\n```\n\n----------------------------------------\n\nTITLE: Configuring URL-Encoded Body Parsing in Express - NodeJS\nDESCRIPTION: Configures the Express app to parse URL-encoded payloads in POST requests, which is necessary for reading incoming data from forms or HTTP clients. This is needed for Unity or browser apps that send data using content-type application/x-www-form-urlencoded. The 'extended: true' parameter allows for rich objects and arrays to be parsed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(express.urlencoded({\n  extended: true\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Options with Native Balance Retrieval in JSON\nDESCRIPTION: This snippet shows how to configure a stream to include native balance retrieval. It sets up a webhook URL, includes native transactions, and specifies selectors for retrieving native balances from transaction addresses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2022-12-07-get-native-balances.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"webhookUrl\": \"https:<your_url>.com\",\n  \"description\": \"some dedscription\",\n  \"includeNativeTxs\": true,\n  \"tag\": \"someTag\",\n  \"chainIds\": [\"0x1\"],\n  \"getNativeBalances\": [\n    {\n      \"selectors\": [\"$fromAddress\", \"$toAddress\"],\n      \"type\": \"tx\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install required dependencies: express, moralis, and common-evm-utils.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install moralis express @moralisweb3/common-evm-utils\n```\n\n----------------------------------------\n\nTITLE: Advanced Options Configuration for Web UI\nDESCRIPTION: JSON configuration for the advanced options when setting up the stream through the Moralis Web UI. This defines the filtering rules for monitoring specific CryptoPunk token IDs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-monitor-specific-nfts.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"topic0\": \"PunkTransfer(address,address,uint256)\",\n    \"filter\": { \"in\": [\"punkIndex\", [\"1000\", \"1001\", \"1002\"]] }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: EVM RPC Request: eth_estimateGas Parameters\nDESCRIPTION: Example parameters for eth_estimateGas RPC method showing transaction object structure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"from\": \"0x0000000000000000000000000000000000000000\",\n    \"to\": \"0x0000000000000000000000000000000000000000\",\n    \"gas\": \"0x76c0\",\n    \"gasPrice\": \"0x9184e72a000\",\n    \"value\": \"0x9184e72a\",\n    \"data\": \"0x\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running the Token Balance Script\nDESCRIPTION: Command to execute the ERC20 token balance fetching script.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-erc20-balances.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode fetchERC20Balances.js\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component from TypeScript Source\nDESCRIPTION: Imports the ApiBanner TypeScript component that likely displays information about the API, such as authentication requirements, rate limits, or other important notices.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/02-NFT Prices/get-nft-contract-sale-prices.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Querying Current Gas Price - Ethereum JSON-RPC - JSON\nDESCRIPTION: Demonstrates an example response payload for the eth_gasPrice method, which retrieves the current gas price in wei. No parameters are required for this method. The response includes fields for the JSON-RPC version, an identifier, and the gas price (hexadecimal string).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x4A817C800\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component with Token Configuration\nDESCRIPTION: This code renders the ApiReference component and passes the configuration for the getTopProfitableWalletPerToken endpoint. It uses object spreading to pass the configuration properties from the config object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Token Top Traders/get-top-profitable-wallet-per-token.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getTopProfitableWalletPerToken} />\n```\n\n----------------------------------------\n\nTITLE: Displaying NFT Data in React Component (TypeScript)\nDESCRIPTION: This React component handles the display of NFT data, including pagination and filtering. It uses the NFTCard component to render individual NFTs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-explorer.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [pageResult, setPageResult] = useState([]);\n\nconst loadPage = () => {\n  setPageResult(searchResult?.slice((page - 1) * 10, page * 10));\n};\n\nuseEffect(() => {\n  loadPage();\n}, [searchResult, page]);\n\nreturn (\n  <VStack\n    w={\"full\"}\n    h={\"650\"}\n    scrollBehavior={\"auto\"}\n    borderWidth={\"thin\"}\n    boxShadow={\"inherit\"}\n    padding={\"1\"}\n  >\n    {pageResult?.length > 0 ? (\n      <Grid templateColumns=\"repeat(5, 1fr)\" gap={6} overflow=\"auto\">\n        {pageResult?.map((e, i) => {\n          return <NFTCard key={i} nftAddress={e.mint} filterQuery={query} />;\n        })}\n      </Grid>\n    ) : (\n      <Center height={500} color=\"GrayText\">\n        <i>No Data</i>\n      </Center>\n    )}\n  </VStack>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Configuration (JavaScript/JSX)\nDESCRIPTION: Imports the `ApiReference` React component from a local path (`@site/src/components/ApiReference`) and a configuration object (`config`) from a JSON file. These imports are necessary to dynamically render the API documentation on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/01-Get NFTs/get-contract-nfts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering the Moralis Web3 API Reference Component - JSX\nDESCRIPTION: This snippet renders the 'ApiReference' React component, passing it the properties for the 'getNFTContractTransfers' endpoint extracted from the imported config object. This operation dynamically displays reference documentation for querying NFT contract transfer data via the Moralis Web3 Data API. The 'config.nft.getNFTContractTransfers' must be defined in the configuration and match the expected prop types for the component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-nft-contract-transfers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.nft.getNFTContractTransfers} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation Components\nDESCRIPTION: JSX code for rendering the API documentation components including the MainnetBadge, PremiumEndpointBadge, Admonition notice, and ApiReference component that displays the API details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/10-Get Trending Tokens/get-tokens-with-top-gainers.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n\n<Admonition type=\"info\" icon=\"💡\" title=\"Premium Endpoint\">\n  <p>\n    To use this API, you will need an API key associated with a Moralis account\n    on the <strong>Business</strong> plan or higher.\n  </p>\n</Admonition>\n\n<ApiReference {...config.discovery.getTopGainersTokens} />\n```\n\n----------------------------------------\n\nTITLE: Filtering and Monitoring USDT Transfers with Moralis Streams - TypeScript\nDESCRIPTION: This TypeScript code configures a Moralis Stream to monitor large USDT transactions on Ethereum, filtering for transfers from a specified sender and exceeding $1 million. Utilizing advancedOptions for event filtering, it then attaches the USDT contract address and executes the configuration asynchronously. Dependencies include Moralis SDK and TypeScript, with required parameters for stream definition and address. Output is real-time webhook notifications on matching events, with a focus on ERC20 'Transfer' events aligned to the filter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/streams-api-full-guide-walkthrough.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Above code is same as prior\n\nconst filter_ERC20 = {\n  \"and\": [\n    { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] },\n    { \"gt\": [\"value\", \"1000000000\"] }, // Example of USDT (6 Decimals)\n  ],\n};\n\nconst runApp = async () => {\n  const stream = {\n    // same parameters as prior\n    advancedOptions: [\n      {\n        topic0: \"Transfer(address,address,uint256)\",\n        filter: filter_ERC20\n      },\n    ]\n  };\n\n  const newStream = await Moralis.Streams.add(stream);\n  const { id } = newStream.toJSON();\n\n  // Now we attach USDT address to the stream\n  const address = \"0xdAC17F958D2ee523a2206206994597C13D831ec7\";\n\n  await Moralis.Streams.addAddress({ address, id });\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Parsing Smart Contract Events with Moralis in TypeScript\nDESCRIPTION: This code demonstrates how to parse smart contract event data from a Moralis webhook. It creates a typed interface for URI events, processes webhook data containing blockchain event logs, and uses Moralis.Streams.parsedLogs to decode the event data into a strongly-typed structure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/parse-data.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from 'moralis';\nimport { BigNumber } from '@moralisweb3/core';\n\nconst test = async () => {\n\n  interface URI{\n    value: string;\n    id: BigNumber;\n  }\n\n  const webhookData = {\n    confirmed: true,\n    chainId: '0x1',\n    abi: [\n      {\n        anonymous: false,\n        inputs: [\n          {\n            indexed: false,\n            internalType: 'string',\n            name: 'value',\n            type: 'string',\n          },\n          {\n            indexed: true,\n            internalType: 'uint256',\n            name: 'id',\n            type: 'uint256',\n          },\n        ],\n        name: 'URI',\n        type: 'event',\n      },\n    ],\n    streamId: 'b4dbc80e-8161-43d8-9c5a-05a8a4bba988',\n    tag: 'URI-listener',\n    retries: 0,\n    block: {\n      number: '15933519',\n      hash: '0x192357541e97093ebdf99b4a04e7e33726b6eb01f88f7ab3df3ab2dc5242147c',\n      timestamp: '1668009611',\n    },\n    logs: [\n      {\n        logIndex: '475',\n        transactionHash:\n          '0x55125fa34ce16c295c222d48fc3efe210864dc2fb017f5965b4e3743d72342d5',\n        address: '0x495f947276749ce646f68ac8c248420045cb7b5e',\n        data: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042697066733a2f2f6261666b726569687366326568636c78796d793467366836697163627361346c6961637a6f716b7373666b6e70787535796a356f67696a6f667175000000000000000000000000000000000000000000000000000000000000',\n        topic0:\n          '0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b',\n        topic1:\n          '0xab6953e647a36018fc48d6223583597b84c755a0000000000000010000000001',\n        topic2: null,\n        topic3: null,\n      },\n    ],\n    txs: [],\n    txsInternal: [],\n    erc20Transfers: [],\n    erc20Approvals: [],\n    nftApprovals: { ERC1155: [], ERC721: [] },\n    nftTransfers: [],\n  };\n\n  const decodedLogs = Moralis.Streams.parsedLogs<URI>(webhookData);\n\n  console.log(decodedLogs[0].value);\n  console.log(decodedLogs[0].id.toString());\n};\n\ntest();\n\n```\n\n----------------------------------------\n\nTITLE: Rendering ERC20 Burn API Reference with Deprecation Warning - React JSX\nDESCRIPTION: Renders the ApiReference component for ERC20 burns using JSX, passing configuration data and embedding two Admonition (alert) components. The first Admonition signals endpoint deprecation, and the second explains token burns in the context of blockchain. The code expects a React/Docusaurus environment and presence of configuration props and components; it outputs structured documentation elements and user warnings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/07-Get Burns/get-erc20-burns.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference {...config.token.getErc20Burns}>\n  <Admonition type=\"caution\" title=\"DEPRECATED ENDPOINT\">\n    This API will be deprecated on 4th September 2023.  Please subscribe to the{\" \"}\n    <Link href=\"/changelog\">Changelog</Link> page for further announcements.\n  </Admonition>\n  <Admonition title=\"Token Burns\" icon=\"🔥\">\n    <p>\n      This endpoint retrieves information about token burns for a specific\n      contract, where tokens have been burned by transferring them to a{\" \"}\n      <Link href=\"https://etherscan.io/address/0x0000000000000000000000000000000000000000\">\n        null address\n      </Link>\n      .\n    </p>\n    <p>\n      Sending tokens to a{\" \"}\n      <Link href=\"https://etherscan.io/address/0x0000000000000000000000000000000000000000\">\n        null address\n      </Link>\n      is a widely-used practice for decreasing the total supply of an ERC20\n      token. Tokens that have been burned cannot be utilized or accessed by\n      anyone.\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Collection Transfers using Moralis NFT API (TypeScript)\nDESCRIPTION: This TypeScript example outlines how to initialize and use the Moralis NFT API to fetch all transfer events for a specific NFT collection. It utilizes ES6 imports of 'moralis' and '@moralisweb3/common-evm-utils'. Necessary parameters are the API key, the NFT contract address, and the target blockchain. The code is organized within an asynchronous function, sends the request to getNFTContractTransfers, and prints the result in JSON format. Typing is provided inherently via TypeScript, and the script requires both Moralis SDK and EVM utilities as dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTContractTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference in React\nDESCRIPTION: This code snippet imports necessary components and configurations for rendering the API reference documentation. It includes imports for ApiReference, config, Admonition, and ReactMarkdown components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/09-Get NFT Traits and Rarity/resync-nft-traits-by-collection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Application with Parse Server and Moralis\nDESCRIPTION: Main Express application setup that integrates all components including Moralis initialization, Parse Server, Parse Dashboard, and authentication routes with necessary middleware.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from 'moralis';\nimport express from 'express';\nimport cors from 'cors';\nimport { parseDashboard } from './parseDashboard';\nimport { parseServer } from './parseServer';\nimport { errorHandler } from './middlewares/errorHandler';\nimport config from './config';\nimport { authRouter } from './auth/authRouter';\n\nconst app = express();\n\nMoralis.start({\n  apiKey: config.MORALIS_API_KEY,\n});\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\napp.use(cors());\n\napp.use('/server', parseServer);\napp.use('/dashboard', parseDashboard);\napp.use('/auth', authRouter);\napp.use(errorHandler);\n\napp.use(express.static('public'));\n\napp.listen(config.PORT, () => {\n  console.log(`${config.APP_NAME} is running on port ${config.PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction by Block Number and Index with eth_getTransactionByBlockNumberAndIndex\nDESCRIPTION: This snippet shows the request format for the eth_getTransactionByBlockNumberAndIndex method. It includes parameters for the block number and transaction index.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\"0x1B4\", \"0x0\"]\n```\n\n----------------------------------------\n\nTITLE: Importing React API Reference Component - JavaScript\nDESCRIPTION: This snippet imports the 'ApiReference' React component from a local project's component directory. The component is responsible for rendering detailed API reference documentation within the documentation site. Ensure that the '@site/src/components/ApiReference' path is valid within the Docusaurus or custom web documentation framework.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-nft-contract-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Creating the Main Sign-In Page (JavaScript)\nDESCRIPTION: This JavaScript code defines the main index page (`pages/index.jsx`) for the Next.js application. It uses the `useSession` hook from `next-auth/react` to check the user's authentication status. If the user is authenticated, it redirects them to the `/user` page using `next/router`. Otherwise, it displays a message and the `PhantomBtn` component to allow users to sign in. It uses `useTransition` to manage loading states during redirection.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport React, { useEffect, useTransition } from \"react\";\nimport styles from \"../styles/Home.module.css\";\nimport { useRouter } from \"next/router\";\nimport { Typography } from \"@web3uikit/core\";\nimport { useSession } from \"next-auth/react\";\nimport PhantomBtn from \"../app/components/loginBtn/phantomBtn\";\n\nexport default function Home() {\n  const router = useRouter();\n  const { data: session, status } = useSession();\n  const [isPending, startTransition] = useTransition();\n\n  useEffect(() => {\n    startTransition(() => {\n      session && status === \"authenticated\" && router.push(\"./user\");\n    });\n  }, [session, status]);\n\n  useEffect(() => {\n    startTransition(() => {\n      session && console.log(session);\n    });\n  }, [session]);\n\n  return (\n    <div className={styles.body}>\n      {!isPending && (\n        <div className={styles.card}>\n          <>\n            {!session ? (\n              <>\n                <Typography variant=\"body18\">\n                  Select Wallet for Authentication\n                </Typography>\n                <br />\n                <PhantomBtn />\n              </>\n            ) : (\n              <Typography variant=\"caption14\">Loading...</Typography>\n            )}\n          </>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Magic Connector Package with npm/yarn\nDESCRIPTION: Command to install the WAGMI Magic Connector package for adding Magic.Link authentication to dapps using wagmi.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-magiclink.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @everipedia/wagmi-magic-connector\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install Moralis SDK and Supabase dependencies\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add moralis @supabase/supabase-js jsonwebtoken\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Configuration for Documentation Page (JavaScript)\nDESCRIPTION: Imports necessary React components (ApiReference, Admonition, Link, NodeBanner) from Docusaurus theme, custom site components, and a JSON configuration file. These imports are essential for building the dynamic EVM RPC methods reference page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/_evm-rpc-methods.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\nimport NodeBanner from \"@site/src/components/NodeBanner/NodeBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Fetching EVM NFT Collection Metadata using Moralis API\nDESCRIPTION: Moralis API endpoint (v2.2) for retrieving metadata for a specific EVM NFT collection (contract). Requires the contract `address` as a path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/nft/:address/metadata\n```\n\n----------------------------------------\n\nTITLE: Resyncing NFT Metadata via Moralis API\nDESCRIPTION: Moralis API endpoint URL for triggering a metadata resync for a specific NFT, identified by its contract `:address` and `:token_id`. This is the Moralis equivalent to SimpleHash's 'Refresh NFT Metadata'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/nft/:address/:token_id/metadata/resync\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router in App.js\nDESCRIPTION: Setting up routing configuration using react-router-dom to create a /balances route\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\n\nimport Balances from \"./balances\";\n\nconst router = createBrowserRouter([\n  {\n    path: \"/balances\",\n    element: <Balances />,\n  },\n]);\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Solana Token Pairs Documentation in JSX\nDESCRIPTION: This code snippet imports necessary components for rendering the API reference and additional UI elements for the Solana token pairs documentation page. It includes imports for the API reference component, configuration data, and custom UI components like the Ethereum API banner and Mainnet badge.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Pairs & Liquidity/get-token-pairs.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport EthereumApiBanner from \"@site/src/components/EthBanner/EthApiBanner.tsx\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Pairs and Liquidity using Moralis Token API in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to make a GET request to the Moralis Token Pairs API using the 'node-fetch' library. It requires installation of 'node-fetch' (via npm) and setting the JavaScript module type in package.json. The API key must be inserted into the headers for authentication. The snippet takes as parameter a token address (here, USDC) and the chain ID for Ethereum mainnet ('eth'), then fetches all matching token pairs and logs the result or any errors. Input: token contract address. Output: a JSON response of token pair and liquidity data. Constraints: requires valid Moralis API key and network access.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-token-pairs-and-liquidity-data.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Dependencies to install:\\n// $ npm install node-fetch --save\\n// add \\\"type\\\": \\\"module\\\" to package.json\\n\\nimport fetch from \\\"node-fetch\\\";\\n\\nconst options = {\\n  method: \\\"GET\\\",\\n  headers: {\\n    accept: \\\"application/json\\\",\\n    \\\"X-API-Key\\\": \\\"YOUR_API_KEY\\\",\\n  },\\n};\\n\\nfetch(\\n  \\\"https://deep-index.moralis.io/api/v2.2/erc20/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/pairs?chain=eth\\\",\\n  options\\n)\\n  .then((response) => response.json())\\n  .then((response) => console.log(response))\\n  .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Embedding ApiReference Component for NFT Retrieval (JSX in Markdown)\nDESCRIPTION: This snippet renders the ApiReference React component and spreads in the object config.nft.getContractNFTs as props to visualize the API reference for getting NFTs by contract. This enables dynamic, interactive documentation and requires the ApiReference component and a correctly structured configsV2.json configuration file. The main parameter used is a configuration object representing the getContractNFTs endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/01-Get NFTs/get-contract-nfts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getContractNFTs} />\n```\n\n----------------------------------------\n\nTITLE: Wrapping NextJS App with Solana Wallet Provider and SessionProvider\nDESCRIPTION: Create a custom _app.jsx file to wrap the NextJS application with Solana Wallet Provider and SessionProvider, enabling wallet connection and session management.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../styles/globals.css\";\nimport { SessionProvider } from \"next-auth/react\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { useMemo } from \"react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\n\nfunction MyApp({ Component, pageProps }) {\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n  const wallets = useMemo(\n    () => [new PhantomWalletAdapter(), new SolflareWalletAdapter({ network })],\n    [network]\n  );\n  return (\n    <SessionProvider session={pageProps.session}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletModalProvider>\n            <Component {...pageProps} />\n          </WalletModalProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </SessionProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Starting ElizaOS with Character Configuration\nDESCRIPTION: Command to start ElizaOS with a specific character configuration file that includes the Moralis plugin.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/02-building-with-eliza-os.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm start --character=\"path/to/your/character.json\"\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Configurations - JavaScript\nDESCRIPTION: Imports key React components (ApiReference, Admonition, Link) and a JSON configuration file for rendering API documentation and notices within the page. These imports are prerequisites for embedding dynamic and interactive UI elements into the Markdown documentation. The imported components form the basis for the API documentation and user guidance displayed on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/12-Market Data API/get-top-nft-collections-by-market-cap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Admin SDK in Cloud Functions (TypeScript)\nDESCRIPTION: Initializes the Firebase Admin SDK within a Cloud Function environment using TypeScript. It imports the necessary modules (`firebase-functions`, `firebase-admin`) and calls `admin.initializeApp()` to configure the SDK, enabling interaction with Firebase services from the backend function. This code typically resides in `functions/src/index.ts`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as functions from \"firebase-functions\";\nimport * as admin from \"firebase-admin\";\n\nconst app = admin.initializeApp(functions.config().firebase);\n```\n\n----------------------------------------\n\nTITLE: Defining a C# TokenManager Class for JWT Handling\nDESCRIPTION: This C# code defines a `TokenManager` class within the `JwtServices` namespace. It provides static methods for generating, validating, and retrieving claims from JWTs. It depends on the `Microsoft.IdentityModel.Tokens` and `System.IdentityModel.Tokens.Jwt` NuGet packages. The class uses a hardcoded Base64 encoded secret key for signing and validating tokens. The `GenerateToken` method creates a JWT with custom claims provided as a dictionary, setting a 30-minute expiration. `GetPrincipal` validates a token and extracts its claims, while `ValidateToken` checks the validity based on claim presence.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.IdentityModel.Tokens;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\n\nnamespace JwtServices\n{\n    /// <summary>\n    /// Provide routines for generating and processing JWTs.\n    /// NOTE: depends on Nuget packages for Microsoft.Identity.Model.JsonWebTokens\n    /// and System.IdentityModel.Tokens.Jwt\n    /// </summary>\n    public class TokenManager\n    {\n        // The secret can be any random text. This is a base64 text created from a random phrase.\n        private static string Secret = \"TW9yYWlscyBXZWIzIEFQSXMgYXJlIHRoZSBncmVhdGVzdCB0aGluZyBzaW5jZSBzbGljZWQgYnJlYWQh\";\n\n        /// <summary>\n        /// Generates a new JWT Token with the specified claims.\n        /// Claims are pieces of information such as ID Tokens, user name, etc.\n        /// </summary>\n        /// <param name=\"appClaims\">IDictionary<string, string></param>\n        /// <returns>string</returns>\n        public static string GenerateToken(IDictionary<string, string> appClaims)\n        { \n            byte[] key = Convert.FromBase64String(Secret);\n            SymmetricSecurityKey securityKey = new SymmetricSecurityKey(key);\n            List<Claim> claims = new List<Claim>();\n\n            // Capture each of the custom claims that will be included\n            // in the JWT.\n            if (appClaims != null && appClaims.Count > 0)\n            {\n                foreach (string k in appClaims.Keys)\n                {\n                    claims.Add(new Claim(k, appClaims[k]));\n                }\n            }\n            \n            // Define the token data.\n            SecurityTokenDescriptor descriptor = new SecurityTokenDescriptor\n            {\n                Subject = new ClaimsIdentity(claims),\n                Expires = DateTime.UtcNow.AddMinutes(30),\n                SigningCredentials = new SigningCredentials(securityKey,\n                SecurityAlgorithms.HmacSha256Signature)\n            };\n\n            JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler();\n            JwtSecurityToken token = handler.CreateJwtSecurityToken(descriptor);\n\n            return handler.WriteToken(token);\n        }\n\n        /// <summary>\n        /// Reads a JWT token and extracts the Claims into a ClaimsPrincipal.\n        /// </summary>\n        /// <param name=\"token\">string</param>\n        /// <returns>ClaimsPrincipal</returns>\n        public static ClaimsPrincipal GetPrincipal(string token)\n        {\n            try\n            {\n                // Read the JSON string into a Jwt object.\n                JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();\n                JwtSecurityToken jwtToken = (JwtSecurityToken)tokenHandler.ReadToken(token);\n\n                if (jwtToken == null)\n                {\n                    return null;\n                }\n\n                // Use our know secret\n                byte[] key = Convert.FromBase64String(Secret);\n\n                TokenValidationParameters parameters = new TokenValidationParameters()\n                {\n                    RequireExpirationTime = true,\n                    ValidateIssuer = false,\n                    ValidateAudience = false,\n                    IssuerSigningKey = new SymmetricSecurityKey(key)\n                };\n\n                SecurityToken securityToken;\n\n                // Validate the token using the known secret and extract any claims.\n                ClaimsPrincipal principal = tokenHandler.ValidateToken(token,\n                      parameters, out securityToken);\n\n                return principal;\n            }\n            catch\n            {\n                return null;\n            }\n        }\n\n        /// <summary>\n        /// Validates a JWT.\n        /// </summary>\n        /// <param name=\"token\">string</param>\n        /// <returns>bool</returns>\n        public static bool ValidateToken(string token)\n        {\n            bool resp = false;\n\n            ClaimsPrincipal principal = GetPrincipal(token);\n\n            if (principal != null && principal.Identity != null)\n            {\n                try\n                {\n                    ClaimsIdentity identity = (ClaimsIdentity)principal.Identity;\n\n\n                    Claim? firstClaim = identity.FindFirst(ClaimTypes.Name);\n\n                    resp = firstClaim?.Value != null;\n                }\n                catch (NullReferenceException)\n                {\n                    // Do nothing resp will be false.\n                }\n            }\n\n            return resp;\n        }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Ignoring .env file in Git\nDESCRIPTION: Shows how to add the '.env' file to the '.gitignore' file. This prevents the file containing sensitive credentials, like the Moralis API key, from being accidentally committed to a Git repository.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n.env\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies Using Yarn (bash)\nDESCRIPTION: This snippet changes into the project directory and installs all local dependencies using Yarn, which is a JavaScript package manager. It prepares the development environment, ensuring all required packages for React, Web3, Axelar, and other integrations are ready for use. The commands are essential before any code modification or development begins.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    cd  multichain-token-example-with-interchain-token-service  &&  yarn  install\n```\n\n----------------------------------------\n\nTITLE: Normalizing Client IPs for Rate Limiting Middleware in TypeScript\nDESCRIPTION: This function processes the incoming request's IP address by replacing '.' and ':' with '-', ensuring compliance with firebase-functions-rate-limiter's requirement that qualifiers must not contain dots or colons. The output is a normalized string suitable for use as a rate limiter key. Requires firebase-functions for the https.Request type.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// 1.2.3.4 -> 1-2-3-4\nfunction readNormalizedIp(request: functions.https.Request): string {\n  return request.ip ? request.ip.replace(/\\.|:/g, \\\"-\\\") : \\\"unknown\\\";\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Time-Series Volume by Chain via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve time-series volume data for a specific blockchain over a specified timeframe using the Moralis Web3 API v2.2. Requires query parameters like 'chain=eth' and 'timeframe=1d'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/volume/timeseries?chain=eth&timeframe=1d\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Parser Middleware in Express App (JavaScript)\nDESCRIPTION: Adds `body-parser` middleware configurations to the Express application instance (`app`) within `handler.js`. This setup enables the application to parse various incoming request body formats, including JSON, raw data, text, and URL-encoded data, ensuring flexibility in handling different types of API requests.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(bodyParser.json());\napp.use(bodyParser.raw());\napp.use(bodyParser.text());\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Swaps by Token Address - HTTP Endpoint\nDESCRIPTION: Retrieves swap transactions involving a particular token address on a given Solana network. Designed for tracking volume, histories, or trending activity on tokens; endpoint requires API key and correct parameterization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/token/:network/:tokenAddress/swaps\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Holder Statistics via Moralis API\nDESCRIPTION: Exclusive Moralis API endpoint (GET request) for retrieving statistical data about the holders of a specific ERC20 token, identified by its `:token_address`. Provides insights into token distribution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_39\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/erc20/:token_address/holders/stats\n```\n\n----------------------------------------\n\nTITLE: Authenticating Moralis API Request using Curl\nDESCRIPTION: This snippet demonstrates how to make an authenticated GET request to the Moralis API using curl. It includes the API key in the X-API-Key header and retrieves block data for a specific Ethereum block.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/01-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url 'https://deep-index.moralis.io/api/v2/block/15863321?chain=eth&include=internal_transactions' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Non-Standard/Partial Collection Metadata in JSON\nDESCRIPTION: Shows an example JSON structure for the 'collection' object when dealing with non-standard or partial Metaplex Solana NFTs. Note the presence of null values for fields like 'collectionAddress', 'name', 'metaplexMint', and 'sellerFeeBasisPoints', which can occur if the NFT doesn't fully adhere to the Metaplex standard or lacks associated collection data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/nft-api-faq.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"collection\": {\n  \"collectionAddress\": null,\n  \"name\": null,\n  \"description\": \"This membership unlocks access to the jpegs.fun Secret Society. More secrets to be revealed soon.\",\n  \"imageOriginalUrl\": \"https://jpegs.fun/nft/disciples.png\",\n  \"externalUrl\": null,\n  \"metaplexMint\": null,\n  \"sellerFeeBasisPoints\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components - React JavaScript\nDESCRIPTION: This snippet demonstrates importing React components and configuration files required to compose the documentation page, including UI elements such as admonitions, badges, and the API reference wrapper. Dependencies include @site and @theme scoped packages, as well as a JSON config for API documentation settings. No direct runtime input/output is defined; these imports support static page rendering.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/02- Get Entity Categories/get-entity-categories.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport { PremiumEndpointBadge } from \"@site/src/components/PremiumEndpointBadge/PremiumEndpointBadge.js\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Verbose Wallet Transactions\nDESCRIPTION: This JSON object illustrates the typical structure of the response from the Moralis `getWalletTransactionsVerbose` API call. It includes pagination details (`page_size`, `page`, `cursor`) and a `result` array where each element represents a verbose transaction object containing fields like hash, nonce, addresses, value, gas details, timestamp, block info, and logs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-transaction-verbose.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"page_size\": 100,\n  \"page\": 1,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjaGFpbiI6ImV0aCIsImNoYWluX25hbWUiOiJtYWlubmV0Iiwic3ViZG9tYWluIjpudWxsLCJhcGlLZXlJZCI6MTkwNjU5LCJjdXJzb3IiOm51bGwsImZ1bmN0aW9uTmFtZSI6bnVsbCwibGltaXQiOjEwMCwiYWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSIsImZyb21fYmxvY2siOm51bGwsInRvX2Jsb2NrIjoiMTU3ODE1NDAiLCJmcm9tX2RhdGUiOm51bGwsInRvX2RhdGUiOm51bGwsInBhZ2UiOjEsImtleXMiOlsiMTU3ODE1NDAiXSwiYmxvY2tfb2Zmc2V0IjoxLCJpYXQiOjE2NzA4Mzk4MjN9.EVOoyaTeuMF0cF2xe2J4uJr41Ipx7QbgGxeu5Rpn3E0\",\n  \"result\": [\n    {\n      \"hash\": \"0x1e67156f8cef5668c69392876f9ff99ca655d43ec366c6cf62217dd633e809b4\",\n      \"nonce\": \"949\",\n      \"transaction_index\": \"74\",\n      \"from_address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"to_address\": \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n      \"value\": \"0\",\n      \"gas\": \"66163\",\n      \"gas_price\": \"14219353417\",\n      \"input\": \"0xa9059cbb000000000000000000000000c79b96044906550a5652bcf20a6ea02f139b9ae5000000000000000000000000000000000000000000000000000000007ea8ed40\",\n      \"receipt_cumulative_gas_used\": \"7069740\",\n      \"receipt_gas_used\": \"65625\",\n      \"receipt_contract_address\": null,\n      \"receipt_root\": null,\n      \"receipt_status\": \"1\",\n      \"block_timestamp\": \"2022-12-08T16:35:11.000Z\",\n      \"block_number\": \"16141217\",\n      \"block_hash\": \"0xc6d379902054169a094ded6e37953549e6c4d59c3dc5b253d5db3ff2dd5a173c\",\n      \"transfer_index\": [16141217, 74],\n      \"logs\": [\n        {\n          \"log_index\": \"147\",\n          \"transaction_hash\": \"0x1e67156f8cef5668c69392876f9ff99ca655d43ec366c6cf62217dd633e809b4\",\n          \"transaction_index\": \"74\",\n          \"address\": \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n          \"data\": \"0x000000000000000000000000000000000000000000000000000000007ea8ed40\",\n          \"topic0\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n          \"topic1\": \"0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045\",\n          \"topic2\": \"0x000000000000000000000000c79b96044906550a5652bcf20a6ea02f139b9ae5\",\n          \"topic3\": null,\n          \"block_timestamp\": \"2022-12-08T16:35:11.000Z\",\n          \"block_number\": \"16141217\",\n          \"block_hash\": \"0xc6d379902054169a094ded6e37953549e6c4d59c3dc5b253d5db3ff2dd5a173c\",\n          \"transfer_index\": [16141217, 74, 147],\n          \"transaction_value\": \"0\"\n        }\n      ]\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for the Frontend\nDESCRIPTION: Sample environment configuration for connecting the frontend to Solana and Moralis services.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nAPP_CHAIN_ID=devnet\nAPP_DOMAIN=ethereum.boilerplate \nMORALIS_API_KEY= xxx\nNEXTAUTH_SECRET= # Linux: `openssl rand -hex 32` or go to https://generate-secret.now.sh/64\nNEXTAUTH_URL=http://localhost:3000\n\n# Required for signing game transactions\nOWNER_PRIVATE_KEY= xxx\n\nNEXT_PUBLIC_PROGRAM_ID = xxx \n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component with NFT Sale Prices Configuration - JavaScript\nDESCRIPTION: This React JSX snippet renders the ApiReference component, spreading the configuration specific to NFT sale price retrieval. It depends on the previously imported ApiReference component and the config object's structure, particularly the nft.getNFTSalePrices key. The component accepts all related props, dynamically showing API docs for getting NFT sale prices by token ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-sale-prices.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.nft.getNFTSalePrices} />\n\n```\n\n----------------------------------------\n\nTITLE: Sample NFT Ownership JSON Response - JSON\nDESCRIPTION: This is an example JSON response returned from the Moralis getWalletNFTs endpoint, providing details about the NFTs owned by the specified address. It includes ownership totals, pagination data, and an array of NFT objects listing token address, ID, contract type, and more. This sample illustrates the response structure users should expect from the API request, including pagination and metadata fields.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 1456,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsid2FsbGV0QWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSJ9LCJrZXlzIjpbIjE2NjMyMzgxNzUuMDc3Il0sIndoZXJlIjp7Im93bmVyX29mIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1In0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6MTQ1NiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2NjgyNTUyfQ.E5DkWYvRTaFnVhgedRuT3IW-rb2V-ikFKwP2cg2Qf78\",\n  \"result\": [\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"4765809967066625256798886812262830659450023020194524584471225959000376492819\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"ba6d44b5f16be94283cecffeb784b7ca\",\n      \"block_number_minted\": \"15572796\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:06:08.153Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"84453794918345416145331514647027903846664455083247396107154093349515123913389\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"7c0212cd3daf1b6b64f193c6dc102fb4\",\n      \"block_number_minted\": \"15572811\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:09:09.838Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"16476931145019337030786748713476010946621971075817308111460324192065814192354\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"627ffc76405a90ee940cb91f7e90b294\",\n      \"block_number_minted\": \"15572818\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:11:34.545Z\",\n      \"minter_address\": null\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic Document Card List with JSX\nDESCRIPTION: This JSX snippet renders the `DocCardList` component. In frameworks like Docusaurus, this component typically automatically generates a list of cards linking to child documents or pages within the current directory structure, serving as a navigation element for the tutorials.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Getting NFT Transfers in Python with Moralis API\nDESCRIPTION: Python implementation to fetch all transfers of a specific NFT using the Moralis evm_api.nft.get_nft_transfers method. Requires the NFT contract address, token ID, chain parameter, and format setting.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n    \"token_id\": \"1\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n}\n\nresult = evm_api.nft.get_nft_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Owners with JavaScript/TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Moralis SDK in JavaScript or TypeScript to retrieve the owners of an NFT collection. It initializes Moralis, sets up the required parameters, and makes an API call to get the NFT owners.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owners-of-an-nft-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n  \n  const address = \"0xa186d739ca2b3022b966194004c6b01855d59571\";\n\n\tconst chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTOwners({\n      address,\n      chain,\n  });\n  \n  console.log(response.toJSON());\n}\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Defining Moralis API Key in .env - TypeScript\nDESCRIPTION: Declares an environment variable MORALIS_API_KEY in a .env file, used to authorize requests to the Moralis API. Required for Moralis SDK initialization. Input: the user's own API Key. Output: accessible as process.env.MORALIS_API_KEY in Node.js. No comments or complex logic.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nMORALIS_API_KEY = YOUR_KEY_HERE\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Moralis API Reference and Admonition Components - React JavaScript\nDESCRIPTION: This snippet leverages React and Docusaurus to document the 'Get ERC20 token mints' endpoint. It imports pre-defined components and configuration objects, then renders the API reference with a deprecation notice using the <ApiReference> and <Admonition> components. Dependencies include React, the Docusaurus @site component path, and a JSON configuration for endpoint details. Inputs are configuration objects and API metadata; outputs are structured API documentation in the page. Constraints: dependency on the specific component imports as per Docusaurus/Moralis documentation environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/08-Get Mints/get-erc20-mints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\nimport Link from \"@docusaurus/Link\";\n\n<ApiReference {...config.token.getErc20Mints}>\n  <Admonition type=\"caution\" title=\"DEPRECATED ENDPOINT\">\n    This API will be deprecated on 4th September 2023.  Please subscribe to the{\" \"}\n    <Link href=\"/changelog\">Changelog</Link> page for further announcements.\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: Imports and renders the DocCardList component from Docusaurus theme to display a list of documentation cards.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/integrations.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for getTransaction Endpoint\nDESCRIPTION: Illustrates the structure and content of the JSON object returned when successfully fetching transaction details by hash using the Moralis Transaction API. Includes fields like `hash`, `nonce`, addresses, gas information, block details, and logs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-a-transaction-by-transaction-hash.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"hash\": \"0xaae93882e8a9fe9ff30151853db20e4cd161940757a01744465ab83b751c5875\",\n  \"nonce\": \"6637\",\n  \"transaction_index\": \"203\",\n  \"from_address\": \"0x95222290dd7278aa3ddd389cc1e1d165cc4bafe5\",\n  \"to_address\": \"0x388c818ca8b9251b393131c08a736a67ccb19297\",\n  \"value\": \"62754610757602656\",\n  \"gas\": \"30000\",\n  \"gas_price\": \"10350264493\",\n  \"input\": \"0x\",\n  \"receipt_cumulative_gas_used\": \"19314887\",\n  \"receipt_gas_used\": \"22111\",\n  \"receipt_contract_address\": null,\n  \"receipt_root\": null,\n  \"receipt_status\": \"1\",\n  \"block_timestamp\": \"2022-11-07T08:36:11.000Z\",\n  \"block_number\": \"15916991\",\n  \"block_hash\": \"0xd517ab9abb4beed9efb6b74ecbabc141d8550abe11aedb715ce9d133dcb32c9b\",\n  \"transfer_index\": [15916991, 203],\n  \"logs\": [\n    {\n      \"log_index\": \"299\",\n      \"transaction_hash\": \"0xaae93882e8a9fe9ff30151853db20e4cd161940757a01744465ab83b751c5875\",\n      \"transaction_index\": \"203\",\n      \"transaction_value\": \"62754610757602656\",\n      \"address\": \"0x388c818ca8b9251b393131c08a736a67ccb19297\",\n      \"data\": \"0x00000000000000000000000000000000000000000000000000def2fc6a398d60\",\n      \"topic0\": \"0x27f12abfe35860a9a927b465bb3d4a9c23c8428174b83f278fe45ed7b4da2662\",\n      \"topic1\": null,\n      \"topic2\": null,\n      \"topic3\": null,\n      \"block_timestamp\": \"2022-11-07T08:36:11.000Z\",\n      \"block_number\": \"15916991\",\n      \"block_hash\": \"0xd517ab9abb4beed9efb6b74ecbabc141d8550abe11aedb715ce9d133dcb32c9b\",\n      \"transfer_index\": [15916991, 203, 299]\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding API Reference Component for Solana Token Search - JavaScript\nDESCRIPTION: This JavaScript/JSX snippet renders the 'ApiReference' component with configuration for the Solana token search API endpoint, enabling the live interactive API documentation section. It relies on the 'config' JSON object (imported previously), and specifically uses the 'solana.searchTokens' configuration path. The input is a props object spread from configuration; the output is a rendered, interactive API endpoint reference UI. Requires dependencies from earlier imports.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/09-Search Tokens/token-search-api.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.solana.searchTokens} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration file for the API reference. It then renders the ApiReference component with the configuration for getting token transfers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/04-Get Token Transfers/get-token-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.token.getTokenTransfers} />\n```\n\n----------------------------------------\n\nTITLE: Identifying Webhook URL Format for Deployed Firebase Function\nDESCRIPTION: This URL structure displays the public endpoint for the Moralis Streams webhook cloud function once deployed to Firebase. Substitute `<location>` and `<project_id>` with the actual function location and project ID. This URL is accessible within the Firebase Console under the Functions section.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/integrations/firebase.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttps://<location>-<project_id>.cloudfunctions.net/ext-moralis-streams-webhook\n```\n\n----------------------------------------\n\nTITLE: Installing Particle Connect React UI via npm\nDESCRIPTION: Installs the `@particle-network/connect-react-ui` package using npm. This package provides the necessary React UI components for integrating Particle Connect into a Next.js application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-particle.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @particle-network/connect-react-ui\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component with Dynamic Configuration (JSX)\nDESCRIPTION: This JSX snippet renders the `ApiReference` component. It uses the object spread syntax (`...`) to pass properties dynamically loaded from the imported `config` object, specifically targeting the configuration for the `getDefiPositionsByProtocol` endpoint under the `token` category. This allows the API documentation details to be data-driven and easily updated via the configuration file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/defi-api/01-Get Wallet DeFi Positions/get-defi-positions-by-protocol.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getDefiPositionsByProtocol} />\n```\n\n----------------------------------------\n\nTITLE: Refreshing Contract Metadata via SimpleHash API (Documentation)\nDESCRIPTION: Documentation URL for SimpleHash's feature to refresh contract metadata. Note that Moralis offers this functionality as a Premium Endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nhttps://docs.simplehash.com/reference/refresh-contract-metadata\n```\n\n----------------------------------------\n\nTITLE: Creating React Frontend App (Shell/Yarn)\nDESCRIPTION: Uses Yarn to run the 'create react-app' command, scaffolding a new React application named 'frontend' in the current directory (project root).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nyarn create react-app frontend\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation Component with Mainnet Badge in JSX\nDESCRIPTION: Renders the title of the API documentation with a MainnetBadge component to indicate this is a production-ready endpoint. This JSX code shows how the page title is structured with a status indicator.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Volume Stats/get-timeseries-volume.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# Get Timeseries Volume By Chain <MainnetBadge />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with React Component (JSX)\nDESCRIPTION: This JSX snippet renders the `ApiReference` React component. It uses the spread syntax (`{...}`) to pass properties defined in `config.wallet.getWalletProfitability` (loaded from `configs.json`) to the component. This component is responsible for displaying the detailed API documentation for the 'getWalletProfitability' endpoint, including parameters, request/response examples, and potentially code snippets in various languages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/10-Get Wallet PnL/get-wallet-profitability.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.wallet.getWalletProfitability}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Parsing Moralis API Response for Bonding Tokens (JSON)\nDESCRIPTION: This sample API response illustrates the structure of data returned by the Moralis Solana API when requesting bonding tokens from Pump.fun. Each token object includes basic identity info, pricing in SOL and USD, liquidity values, market cap estimation, and progress percentage. No dependencies are required to parse this JSON structure; it serves as a reference for applications consuming the API response. The number of objects returned depends on the specified limit and available data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/07-get-bonding-tokens.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": [\n    {\n      \"tokenAddress\": \"H2p8S7Ssd3mrBft1bcDGnzW8KNRAGtPTtJLv1tnupump\",\n      \"name\": \"SKYTO\",\n      \"symbol\": \"SKYTO\",\n      \"logo\": \"https://d23exngyjlavgo.cloudfront.net/solana_H2p8S7Ssd3mrBft1bcDGnzW8KNRAGtPTtJLv1tnupump\",\n      \"decimals\": \"6\",\n      \"priceNative\": \"0.000000346\",\n      \"priceUsd\": \"0.000050522\",\n      \"liquidity\": \"30803.481504874\",\n      \"fullyDilutedValuation\": \"50522\",\n      \"bondingCurveProgress\": 96.85384504519783\n    },\n    {\n      \"tokenAddress\": \"BnYS74gQuStmksR3PPGz3yPEhy5rD6mTAiYo4iQ8pump\",\n      \"name\": \"Fuck Around & Find Out\",\n      \"symbol\": \"FAFO\",\n      \"logo\": null,\n      \"decimals\": \"6\",\n      \"priceNative\": \"0.000000330\",\n      \"priceUsd\": \"0.000048279\",\n      \"liquidity\": \"30148.547804968\",\n      \"fullyDilutedValuation\": \"48279\",\n      \"bondingCurveProgress\": 95.92357915846021\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReference Component in Markdown\nDESCRIPTION: This snippet shows importing a React component 'ApiReference' and a configuration file within a Markdown file (likely MDX). It then uses the component, passing configuration specific to the 'GetStreamBlockDataToWebhookByNumber' endpoint from the 'streams' section of the config.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/get-stream-block-data-to-webhook-by-block.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n# Get stream block data to webhook by block\n\n<ApiReference {...config.streams.GetStreamBlockDataToWebhookByNumber} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference component with requestBind configuration\nDESCRIPTION: JSX code that renders the ApiReference component with configuration specific to the requestBind endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/reference/03-Profiles/request-bind.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.auth.requestBind} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Moralis Stream Verification and Discord Bot\nDESCRIPTION: Final implementation of the Express server with Moralis stream verification and Discord bot integration for sending notifications.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst Moralis = require(\"moralis\").default;\nconst discord = require(\"discord.js\");\nrequire(\"dotenv\").config();\nconst app = express();\nconst port = 3000;\n\nconst client = new discord.Client({\n  intents: [],\n});\n\nclient.login(process.env.PASS);\n\napp.use(express.json());\n\napp.post(\"/webhook\", async (req, res) => {\n  const { body, headers } = req;\n\n  try {\n    Moralis.Streams.verifySignature({\n      body,\n      signature: headers[\"x-signature\"],\n    });\n\n    let from = body.txs[0].fromAddress;\n    let amount = Number(body.txs[0].value / 1e18);\n\n    const channel = await client.channels.fetch(process.env.CHANNEL);\n    channel.send(\n      `New Donation submitted by ${from}, for ${amount.toFixed(2)} MATIC!!!!`\n    );\n\n    return res.status(200).json();\n  } catch (e) {\n    console.log(\"Not Moralis\");\n    return res.status(400).json();\n  }\n});\n\nMoralis.start({\n  apiKey: process.env.APIKEY,\n}).then(() => {\n  app.listen(port, () => {\n    console.log(`Listening to streams`);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering the API Reference Component - React/JSX\nDESCRIPTION: This snippet demonstrates how the ApiReference React component is used with spread endpoint configuration properties to render live API reference documentation for the 'getWalletTokenTransfers' endpoint. The 'config.token.getWalletTokenTransfers' object must be defined in the imported JSON configuration. The component constructs a reference UI for the targeted ERC20 token transfer API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-wallet-token-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.token.getWalletTokenTransfers} />\n```\n\n----------------------------------------\n\nTITLE: Creating EvmAddress Instances and Formatting - Moralis SDK - JavaScript\nDESCRIPTION: Shows how to manually instantiate the EvmAddress type and read its formatted representations. The EvmAddress.create() method accepts an Ethereum address (either in lowercase or checksum format), and exposes properties for retrieving the lowercase version. Requires '@moralisweb3/common-evm-utils'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmAddress } from \"@moralisweb3/common-evm-utils\";\n\nconst myAddress = EvmAddress.create(\n  \"0xa74476443119A942dE498590Fe1f2454d7D4aC0d\"\n);\n\nmyAddress.lowercase; // \"0xa74476443119a942de498590fe1f2454d7d4ac0d\"\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Auth Extension via Firebase CLI (NodeJS, Text CLI)\nDESCRIPTION: Installs the Moralis Auth extension into your Firebase project using the Firebase CLI. Prerequisites include having Firebase CLI installed and account certificates prepared. Input requires running the command in your project directory; output is the extension being set up for further configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_0\n\nLANGUAGE: Text CLI\nCODE:\n```\nfirebase ext:install moralis/moralis-auth@latest\n```\n\n----------------------------------------\n\nTITLE: EVM RPC Response: eth_estimateGas\nDESCRIPTION: Example response format for eth_estimateGas RPC method showing estimated gas amount.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Functions Client SDK (JavaScript)\nDESCRIPTION: Initializes the Firebase Functions client-side SDK within a frontend JavaScript context (e.g., inside a `<script>` tag in `hosting/index.html`). This allows the frontend code to invoke deployed Firebase Cloud Functions. Requires the Firebase client SDK library to be loaded first.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = firebase.functions();\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Traits by Collection via SimpleHash API\nDESCRIPTION: SimpleHash API endpoint URL for retrieving the traits associated with NFTs within a specific collection, identified by `{collection_id}`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/traits/collection/{collection_id}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for getTokenTransfers Endpoint\nDESCRIPTION: Illustrates the typical JSON response structure returned by the Moralis `getTokenTransfers` API endpoint when querying by contract address. Includes pagination details (`total`, `page`, `page_size`, `cursor`) and an array (`result`) containing individual transfer objects with details like transaction hash, block number, timestamp, from/to addresses, and value.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-contract.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 3779405,\n  \"page\": 0,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZGRyZXNzIjoiMHgxZjk4NDBhODVkNWFmNWJmMWQxNzYyZjkyNWJkYWRkYzQyMDFmOTg0IiwiY2hhaW4iOiJldGgiLCJhcGlLZXlJZCI6MTkwNjU5LCJsaW1pdCI6MTAwLCJ0b3BpYzMiOiI9Om51bGwiLCJ0b19ibG9jayI6IjE2MDY4NTg4IiwicGFnZSI6MSwidG90YWwiOjM3Nzk0MDUsIm9mZnNldCI6MSwidWMiOnRydWUsImlhdCI6MTY2OTY0NzYwNH0.A_F4jCBNybeIMvG4CBwTnc5-40hIY7QtBu5SrKEiih8\",\n  \"result\": [\n    {\n      \"transaction_hash\": \"0xf7cbf949d921cf53ce7bb4c5b944aa166327459c61c56a7c5057b0c9e89eaf2b\",\n      \"address\": \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n      \"block_timestamp\": \"2022-11-28T14:58:35.000Z\",\n      \"block_number\": \"16069234\",\n      \"block_hash\": \"0x00301a6e8320bd721539cc8f6de4ced806f1b1a0543d4d52153122731880523b\",\n      \"to_address\": \"0x174b75731fe5fbf32ac1d0fac9e2cee544122bdd\",\n      \"from_address\": \"0x28c6c06298d514db089934071355e5743bf21d60\",\n      \"value\": \"2374470000000000000000\",\n      \"transaction_index\": 37,\n      \"log_index\": 35\n    },\n    {\n      \"transaction_hash\": \"0x99701c5bcc132e3af83dc243ee406af978cc41ddb5e5a8b6616a48e198522881\",\n      \"address\": \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n      \"block_timestamp\": \"2022-11-28T14:18:11.000Z\",\n      \"block_number\": \"16069032\",\n      \"block_hash\": \"0x370a71c6eecde6be92616207c5d8bea1234d9ec187f56e585ec5335f7c7dfdd5\",\n      \"to_address\": \"0xe8c638de7d7ea80f3d103becd51a445cf46b1648\",\n      \"from_address\": \"0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43\",\n      \"value\": \"1831220100000000000\",\n      \"transaction_index\": 109,\n      \"log_index\": 163\n    },\n    {\n      \"transaction_hash\": \"0xfcbc8637fc36f709f291f9cb45d095ba8da502b8cd2a2d023866a4d237553457\",\n      \"address\": \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n      \"block_timestamp\": \"2022-11-28T14:14:59.000Z\",\n      \"block_number\": \"16069016\",\n      \"block_hash\": \"0x67a0fbe9d4a86c655c2d93103b86cc4e265230b7af5c31acc407689c0f10bcd7\",\n      \"to_address\": \"0xee61f5fb0db81d3a09392375ee96f723c0620e07\",\n      \"from_address\": \"0x5be862ce64b3ff8d3928e5d15c73b9a5064d0ff3\",\n      \"value\": \"545480000000000000000\",\n      \"transaction_index\": 106,\n      \"log_index\": 239\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in React (TypeScript)\nDESCRIPTION: This snippet imports the 'ApiBanner' component for displaying API-related banners in documentation pages. The component is implemented in TypeScript, emphasizing type safety and maintainability. Dependencies include the custom component at the specified relative path and a TypeScript-compatible React environment. Input: none. Output: imported component for use in JSX.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/06-Get Pairs & Liquidity/get-pair-address.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Supported Swap Event Topics\nDESCRIPTION: Blockchain event topics supported for tracking token swaps on Uniswap v2 and v3\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/01-Wallet API/profitability-faqs.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822\n0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component and API Configuration (JavaScript)\nDESCRIPTION: This snippet imports a React component (ApiReference) from a local documentation UI library and an API reference configuration (configsV2.json). The imports are foundational to rendering interactive API documentation, where the JSON configuration defines the available API endpoints and options for the Solana NFT metadata retrieval. The snippet requires Node.js and a compatible React-based static site generator (such as Docusaurus), with dependencies on local project structure and the referenced JSON file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/07-NFT API/get-nft-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component with Configuration\nDESCRIPTION: Renders the API reference component with token stats configuration data. Includes an information admonition indicating this is a beta feature.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/07-Get Token Stats/get-token-stats.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getTokenStats}>\n  <Admonition type=\"info\" title=\"Beta - Early Launch Notice\">\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference in JSX\nDESCRIPTION: This code snippet imports necessary components and configurations for rendering the API reference documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/09-Get NFT Traits and Rarity/get-nft-traits-by-collection-paginate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Querying eth_getUncleByBlockNumberAndIndex Parameters - JSON\nDESCRIPTION: Provides input parameters for eth_getUncleByBlockNumberAndIndex, given as block number (hexadecimal or keywords) and uncle index (hexadecimal). Both parameters are strings, with the method outputting uncle block details. Keys must be correctly hex-encoded or one of 'latest', 'earliest', or 'pending'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"0x1B4\",\n  \"0x0\"\n]\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component (JavaScript/JSX)\nDESCRIPTION: Imports the `DocCardList` React component from the `@theme/DocCardList` module. This component is commonly used within Docusaurus themes to automatically generate a list of cards linking to documents located in the same directory or configured subdirectories.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/integrations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Updating Lens API Query for Different Profile\nDESCRIPTION: Modifies the Lens API query to fetch information for a different profile (0x81 instead of 0x09). This shows how to change the target profile in the application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nprofile(request: { profileId: \"0x81\" }) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Payload for Smart Contract Events (Logs) in Moralis Streams (JSON)\nDESCRIPTION: Shows an example JSON payload when a Moralis Web3 Stream is configured to capture specific smart contract events (logs) using the 'Contract interactions (logs)' and 'Event Emittance' options. This requires providing an ABI and selecting topics. The payload includes the raw log data matching the specified filter criteria in the `logs` array, along with the `abi` used, block details, and stream information. Note that event data within `logs` is not automatically decoded in this specific configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/response-body.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"confirmed\": false,\n  \"chainId\": \"0x1\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"name\": \"reserve0\",\n          \"type\": \"uint112\"\n        },\n        {\n          \"indexed\": false,\n          \"name\": \"reserve1\",\n          \"type\": \"uint112\"\n        }\n      ],\n      \"name\": \"Sync\",\n      \"type\": \"event\"\n    }\n  ],\n  \"streamId\": \"6378fe38-54c7-4816-8d61-fca8e128e260\",\n  \"tag\": \"test_events\",\n  \"retries\": 1,\n  \"block\": {\n    \"number\": \"15984246\",\n    \"hash\": \"0x7f8d8285b572a60f6a14d5f1dcbd40e487ccffd9ec78f8dfbccb49aa191fbb95\",\n    \"timestamp\": \"1668621827\"\n  },\n  \"logs\": [\n    {\n      \"logIndex\": \"320\",\n      \"transactionHash\": \"0xf1682fa49b83689093b467ac6937785102895fc3ba418624c28d04f9af6e5e2b\",\n      \"address\": \"0x4cd36d6f32586177e36179a810595a33163a20bf\",\n      \"data\": \"0x00000000000000000000000000000000000000000000944ad388817e590ab6070000000000000000000000000000000000000000000000000000008a602de18e\",\n      \"topic0\": \"0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1\",\n      \"topic1\": null,\n      \"topic2\": null,\n      \"topic3\": null\n    }\n  ],\n  \"txs\": [],\n  \"txsInternal\": [],\n  \"erc20Transfers\": [],\n  \"erc20Approvals\": [],\n  \"nftApprovals\": {\n    \"ERC1155\": [],\n    \"ERC721\": []\n  },\n  \"nftTransfers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in JavaScript/JSX\nDESCRIPTION: Imports the `ApiReference` React component from a local path within the project. This component is likely used to render API documentation sections dynamically based on provided configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Volume Stats/get-timeseries-volume.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Lowest Price with Moralis API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the Moralis EvmApi to retrieve the lowest price of an NFT from a specific marketplace. It requires the NFT address, blockchain, and marketplace name as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/06-NFT Marketdata/how-to-get-lowest-price-of-nft-by-marketplace.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const marketplace = \"opensea\";\n\n  const response = await Moralis.EvmApi.nft.getNFTLowestPrice({\n    address,\n    chain,\n    marketplace,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Solana Program\nDESCRIPTION: Shell commands to build the Solana Rust program and deploy it to the Solana cluster.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo build-bpf\n\nsolana program deploy ./target/deploy/micro_blog.so\n```\n\n----------------------------------------\n\nTITLE: Setting Network Constant for Moralis - NodeJS\nDESCRIPTION: Defines a constant NETWORK set to 'evm', indicating that the backend is intended for use with EVM-compatible blockchains. This constant is used when making Moralis API calls for blockchain authentication and data retrieval, ensuring consistent configuration throughout the app.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst NETWORK = \"evm\";\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component in JSX\nDESCRIPTION: Renders the `ApiReference` component using JSX syntax within a React application. It utilizes the spread operator (`...`) to pass properties from `config.token.getTimeSeriesVolume` (imported configuration) to the component, dynamically displaying the API reference for the 'Get Timeseries Volume By Chain' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Volume Stats/get-timeseries-volume.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getTimeSeriesVolume} />\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Moralis NFT API\nDESCRIPTION: This sample JSON output demonstrates the structure returned by the Moralis getWalletNFTs endpoint, containing an array of NFT objects with details such as token_address, token_id, owner, contract type, and sync information. Useful as a reference for expected API output structure when handling or testing integration results.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"total\": 1456,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsid2FsbGV0QWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSJ9LCJrZXlzIjpbIjE2NjMyMzgxNzUuMDc3Il0sIndoZXJlIjp7Im93bmVyX29mIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1In0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6MTQ1NiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2NjgyNTUyfQ.E5DkWYvRTaFnVhgedRuT3IW-rb2V-ikFKwP2cg2Qf78\",\n  \"result\": [\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"4765809967066625256798886812262830659450023020194524584471225959000376492819\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"ba6d44b5f16be94283cecffeb784b7ca\",\n      \"block_number_minted\": \"15572796\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:06:08.153Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"84453794918345416145331514647027903846664455083247396107154093349515123913389\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"7c0212cd3daf1b6b64f193c6dc102fb4\",\n      \"block_number_minted\": \"15572811\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:09:09.838Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"16476931145019337030786748713476010946621971075817308111460324192065814192354\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"627ffc76405a90ee940cb91f7e90b294\",\n      \"block_number_minted\": \"15572818\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:11:34.545Z\",\n      \"minter_address\": null\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response: NFT Contract Transfers (JSON)\nDESCRIPTION: This JSON output illustrates the typical response structure for a call to the Moralis NFT API's getNFTContractTransfers endpoint. The object includes pagination details (total, page, page_size, cursor) and an array of result objects, each describing a transfer with block, transaction, token, and address details. Items contain keys like block_number, transaction_hash, token_id, from_address, to_address, value, and verification status. Large collections may return paginated results requiring cursor-based follow-up queries.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft-collection.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 88322,\n  \"page\": 0,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmRlciI6IkRFU0MiLCJvZmZzZXQiOjAsImxpbWl0IjozLCJ0b2tlbl9hZGRyZXNzIjoiMHhiYzRjYTBlZGE3NjQ3YThhYjdjMjA2MWMyZTExOGExOGE5MzZmMTNkIiwid2hlcmUiOnt9LCJwYWdlIjoxLCJrZXkiOiIxNTgyNzAwNy44OS4yMzAuMCIsInRvdGFsIjo4ODMyMiwiaWF0IjoxNjY2NzI5NTI5fQ.f3u98Vp_H6hwWC8DpjozJ_BIWrLo8C51Uxob-4MbVzM\",\n  \"result\": [\n    {\n      \"block_number\": \"15827007\",\n      \"block_timestamp\": \"2022-10-25T18:53:59.000Z\",\n      \"block_hash\": \"0xfd5c0243a0fa0e84d1b488413ee4917646d156ed23246814ffe39ca28dc13f31\",\n      \"transaction_hash\": \"0x7a75ba4f74058c3c9a0d4a65554477c9c08e33695002682ca463a9d0f52eed6e\",\n      \"transaction_index\": 89,\n      \"log_index\": 235,\n      \"value\": \"0\",\n      \"contract_type\": \"ERC721\",\n      \"transaction_type\": \"Single\",\n      \"token_address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n      \"token_id\": \"2071\",\n      \"from_address\": \"0x5f6ac80cdb9e87f3cfa6a90e5140b9a16a361d5c\",\n      \"to_address\": \"0xdbfd76af2157dc15ee4e57f3f942bb45ba84af24\",\n      \"amount\": \"1\",\n      \"verified\": 1,\n      \"operator\": null\n    },\n    {\n      \"block_number\": \"15827007\",\n      \"block_timestamp\": \"2022-10-25T18:53:59.000Z\",\n      \"block_hash\": \"0xfd5c0243a0fa0e84d1b488413ee4917646d156ed23246814ffe39ca28dc13f31\",\n      \"transaction_hash\": \"0x7a75ba4f74058c3c9a0d4a65554477c9c08e33695002682ca463a9d0f52eed6e\",\n      \"transaction_index\": 89,\n      \"log_index\": 232,\n      \"value\": \"0\",\n      \"contract_type\": \"ERC721\",\n      \"transaction_type\": \"Single\",\n      \"token_address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n      \"token_id\": \"2071\",\n      \"from_address\": \"0x70b97a0da65c15dfb0ffa02aee6fa36e507c2762\",\n      \"to_address\": \"0x5f6ac80cdb9e87f3cfa6a90e5140b9a16a361d5c\",\n      \"amount\": \"1\",\n      \"verified\": 1,\n      \"operator\": null\n    },\n    {\n      \"block_number\": \"15827007\",\n      \"block_timestamp\": \"2022-10-25T18:53:59.000Z\",\n      \"block_hash\": \"0xfd5c0243a0fa0e84d1b488413ee4917646d156ed23246814ffe39ca28dc13f31\",\n      \"transaction_hash\": \"0x7a75ba4f74058c3c9a0d4a65554477c9c08e33695002682ca463a9d0f52eed6e\",\n      \"transaction_index\": 89,\n      \"log_index\": 230,\n      \"value\": \"0\",\n      \"contract_type\": \"ERC721\",\n      \"transaction_type\": \"Single\",\n      \"token_address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n      \"token_id\": \"2071\",\n      \"from_address\": \"0x3b968d2d299b895a5fcf3bba7a64ad0f566e6f88\",\n      \"to_address\": \"0x70b97a0da65c15dfb0ffa02aee6fa36e507c2762\",\n      \"amount\": \"1\",\n      \"verified\": 1,\n      \"operator\": null\n    }\n  ],\n  \"block_exists\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and API Configuration in JavaScript\nDESCRIPTION: This snippet imports the 'ApiReference' React component and a configuration file for referencing API endpoints. It requires the @site/src/components/ApiReference module and a local JSON configuration file, setting up the context for dynamic documentation rendering. The main dependencies are Node.js-compatible import paths and a JSON configuration file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/01-Get NFTs/get-multiple-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Crypto Punks Monitoring Stream in Python\nDESCRIPTION: This Python code creates a Moralis stream to monitor transfers of specific CryptoPunk NFTs (IDs 1000-1002) on the Ethereum chain. It defines the ABI for the PunkTransfer event and configures stream options with filters for specific token IDs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-monitor-specific-nfts.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import streams\n\napi_key = \"YOUR_API_KEY\"\n\npunkTransferAbi = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": false, \"name\": \"punkIndex\", \"type\": \"uint256\" },\n  ],\n  \"name\": \"PunkTransfer\",\n  \"type\": \"event\",\n}]; // valid abi of the event\n\nbody = {\n    \"webhookUrl\": \"https://YOUR_WEBHOOK_URL\",\n    \"description\": \"1000 to 1002 cryptopunks\",\n    \"tag\": \"cryptoPunks\",\n    \"topic0\": [\"PunkTransfer(address,address,uint256)\"],\n    \"includeContractLogs\": True,\n    \"abi\": punkTransferAbi,\n    \"advancedOptions\": [\n      {\n        topic0: \"PunkTransfer(address,address,uint256)\",\n        filter: { \"in\": [\"punkIndex\", [\"1000\", \"1001\", \"1002\"]] }, // only receive transfer events if the token id is 1000/1001/1002\n        includeNativeTxs: True,\n      },\n    ],\n    \"chainIds\": [\"0x1\"],\n}\n\nresult = streams.evm.create_stream(\n    api_key=api_key,\n    body=body,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference and Title in MDX using React Components\nDESCRIPTION: This MDX snippet defines the page title and renders the main API reference content. It uses the imported `MainnetBadge` component alongside the H1 title and invokes the `ApiReference` component, passing specific configuration (`config.solana.getMultipleTokenPrices`) via props spread syntax. This dynamically displays the documentation for the 'getMultipleTokenPrices' Solana endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/05-Get Token Prices/get-multiple-token-prices.md#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n# Get Multiple Token Prices on Solana <MainnetBadge />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<ApiReference {...config.solana.getMultipleTokenPrices} />\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CLI\nDESCRIPTION: Command to install Angular CLI globally using npm\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @angular/cli\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Reference Component - React JavaScript\nDESCRIPTION: This snippet imports the ApiReference React component and a configuration JSON file for the Moralis Streams API documentation. It then renders the ApiReference component, spreading configuration for the 'GetStream' operation as props. Requires a React build environment and access to the configuration files. There are no parameters in this code directly, but the config object drives the rendered documentation component. The output is a rendered API documentation page for retrieving EVM stream details. The snippet assumes the existence and correct configuration of the 'ApiReference' component and configuration JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/get-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.streams.GetStream} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This snippet imports the ApiReference component and a configuration file for the NFT trades endpoint. It then renders the ApiReference component with the specific configuration for getNFTTrades.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/07-Get NFT Trades/get-nft-trades.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.nft.getNFTTrades} />\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installs required npm packages for the project including Moralis, Express, Discord.js, dotenv, and nodemon.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis express discord.js dotenv nodemon\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in React\nDESCRIPTION: Imports the ApiBanner component from the site's components directory to display API-related banners on the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/02-Get Token Metadata/get-token-details.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components with React in JavaScript\nDESCRIPTION: This snippet imports essential React components and JSON configuration necessary for rendering API reference documentation in a Docusaurus-powered site. It includes external and internal modules such as the API reference viewer, admonition blocks for notices, linking utility, and configuration data for API endpoints. The imports are prerequisites for composing and dynamically rendering documentation items on the page; ensure that all corresponding modules are installed in the project for these imports to succeed. There are no parameters—these lines provide building blocks and are not intended to be executed directly.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_chainId.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Streams Firebase Extension using Bash\nDESCRIPTION: This command utilizes the Firebase CLI to install the official Moralis Streams extension into the active Firebase project. The installer will request the Moralis API key during the setup process.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/integrations/firebase.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase ext:install moralis/moralis-streams\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFT Valuation via SimpleHash API\nDESCRIPTION: SimpleHash API endpoint URL for calculating the value of NFTs owned by specific wallet addresses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/owners/value\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Swaps by Pair Address via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve token swap data for a specific pair address using the Moralis Web3 API v2.2. The ':address' parameter in the URL should be replaced with the actual pair address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/pairs/:address/swaps\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Data Using Traditional eth_call Method with Web3.js\nDESCRIPTION: This snippet demonstrates how to use the traditional eth_call method with Web3.js to interact with contracts without modifying the blockchain state. It shows how to set up a Web3 instance with an Infura endpoint and make a read-only call to a smart contract.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/01-Get Blocks/eth-call-and-getblock.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Web3 = require(\"web3\");\nconst web3 = new Web3(\"YOUR_INFURA_ENDPOINT\");\n\nconst contractAddress = \"YOUR_CONTRACT_ADDRESS\";\nconst data = \"YOUR_DATA\";\n\nweb3.eth\n  .call({\n    to: contractAddress,\n    data: data,\n  })\n  .then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response\nDESCRIPTION: Sample JSON response returned when resolving an Unstoppable domain showing the resolved Ethereum address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-reverse-resolve-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x8aaD44321A86b170879d7A244c1e8d360c99DdA8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Solana Token Historical Holder Data - HTTP Endpoint\nDESCRIPTION: Fetches historical snapshots of token holders by address on Solana mainnet, suitable for trend analysis or charting. Returns time-series holder statistics. Requires a Moralis API key and proper token address parameterization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET https://solana-gateway.moralis.io/token/mainnet/holders/:address/historical\n```\n\n----------------------------------------\n\nTITLE: Example Approve Transaction Response in JSON\nDESCRIPTION: Sample JSON response showing the structure of an approve transaction, including category, summary, and contract interaction details with token and spender information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/01-Wallet API/wallet-history.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"category\": \"approve\",\n    \"summary\": \"Approved 0.000123 USDT\",\n    \"contract_interactions\": {\n        \"approvals\": [\n            {\n                \"value\": \"1230000000000000\",\n                \"value_formatted\": \"0.000123\",\n                \"token\": {\n                    \"address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n                    \"address_label\": \"Tether USD (USDT)\",\n                    \"token_name\": \"Tether USD\",\n                    \"token_logo\": \"https://cdn.moralis.io/eth/0xdac17f958d2ee523a2206206994597c13d831ec7.png\",\n                    \"token_symbol\": \"USDT\"\n                },\n                \"spender\": {\n                    \"address\": \"0x111111125421ca6dc452d289314280a0f8842a65\",\n                    \"address_label\": null\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Configuration in Markdown (MDX)\nDESCRIPTION: This line imports a JSON configuration file named `configs.json`. The configuration data stored in this file is likely used to populate the `ApiReference` component with specific API endpoint details, such as parameters, responses, and descriptions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/02-Get NFT Metadata/get-nft-contract-metadata.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Uniswap V2 Pair Reserves using Moralis SDK (Python)\nDESCRIPTION: This Python snippet shows how to retrieve Uniswap V2 pair reserves using the Moralis Python SDK. It imports the `evm_api` module, sets the API key and parameters including the `pair_address` and `chain` ('eth'), calls the `evm_api.defi.get_pair_reserves` function, and prints the resulting dictionary containing the reserves.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-reserves.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"pair_address\": \"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974\",\n    \"chain\": \"eth\",\n    # \"to_block\": \"\",\n    # \"to_date\": \"\",\n}\n\nresult = evm_api.defi.get_pair_reserves(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList Component in JSX\nDESCRIPTION: A React/JSX code snippet that imports and implements the DocCardList component for displaying tutorial cards in the documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/tutorials.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Querying eth_getUncleByBlockNumberAndIndex Response - JSON\nDESCRIPTION: This is a JSON-RPC response template for eth_getUncleByBlockNumberAndIndex, returning uncle block information in the 'result' object. The response is structured per JSON-RPC 2.0, with possible null output if no uncle is found.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    // Uncle block object\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Internal Transactions of an Address with JavaScript\nDESCRIPTION: JavaScript code example showing how to initialize Moralis and retrieve internal transactions for a specific wallet address using the getWalletTransactions endpoint with the internal_transactions parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-internal-transactions-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the Moralis library and EvmChain module\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\n// Asynchronous function to run the application\nconst runApp = async () => {\n  // Initialize Moralis with your API key\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  // Specify the wallet address for which transactions are to be retrieved\n  const walletAddress = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  // Set the blockchain (e.g., Ethereum)\n  const chain = EvmChain.ETHEREUM;\n\n  // Use the Moralis API to get wallet transactions with internal transactions included\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address: walletAddress,\n    chain,\n    include: \"internal_transactions\",\n  });\n\n  // Print the response in JSON format\n  console.log(response.toJSON());\n};\n\n// Execute the application function\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK Using npm - JavaScript\nDESCRIPTION: This snippet shows how to install the Moralis SDK in a JavaScript project using the npm package manager. Before running this command, ensure you have already registered for a Moralis API key and installed Node.js and npm on your machine. Replace ${props.node} with the Moralis package name as needed. The command adds Moralis to the project's dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/partials/_install-moralis-sdk.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ${props.node}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference in React\nDESCRIPTION: This snippet imports necessary components for rendering the API reference documentation. It includes imports for ApiReference, Admonition, Link, and a configuration file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/10-Get Trending NFTs/get-top-nft-collections-by-market-cap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Verbose Transactions\nDESCRIPTION: Sample JSON response from the Moralis getWalletTransactionsVerbose endpoint. The response includes pagination information, transaction details such as hash, nonce, addresses, gas information, and transaction logs with related event data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-transaction-verbose.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page_size\": 100,\n  \"page\": 1,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjaGFpbiI6ImV0aCIsImNoYWluX25hbWUiOiJtYWlubmV0Iiwic3ViZG9tYWluIjpudWxsLCJhcGlLZXlJZCI6MTkwNjU5LCJjdXJzb3IiOm51bGwsImZ1bmN0aW9uTmFtZSI6bnVsbCwibGltaXQiOjEwMCwiYWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSIsImZyb21fYmxvY2siOm51bGwsInRvX2Jsb2NrIjoiMTU3ODE1NDAiLCJmcm9tX2RhdGUiOm51bGwsInRvX2RhdGUiOm51bGwsInBhZ2UiOjEsImtleXMiOlsiMTU3ODE1NDAiXSwiYmxvY2tfb2Zmc2V0IjoxLCJpYXQiOjE2NzA4Mzk4MjN9.EVOoyaTeuMF0cF2xe2J4uJr41Ipx7QbgGxeu5Rpn3E0\",\n  \"result\": [\n    {\n      \"hash\": \"0x1e67156f8cef5668c69392876f9ff99ca655d43ec366c6cf62217dd633e809b4\",\n      \"nonce\": \"949\",\n      \"transaction_index\": \"74\",\n      \"from_address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"to_address\": \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n      \"value\": \"0\",\n      \"gas\": \"66163\",\n      \"gas_price\": \"14219353417\",\n      \"input\": \"0xa9059cbb000000000000000000000000c79b96044906550a5652bcf20a6ea02f139b9ae5000000000000000000000000000000000000000000000000000000007ea8ed40\",\n      \"receipt_cumulative_gas_used\": \"7069740\",\n      \"receipt_gas_used\": \"65625\",\n      \"receipt_contract_address\": null,\n      \"receipt_root\": null,\n      \"receipt_status\": \"1\",\n      \"block_timestamp\": \"2022-12-08T16:35:11.000Z\",\n      \"block_number\": \"16141217\",\n      \"block_hash\": \"0xc6d379902054169a094ded6e37953549e6c4d59c3dc5b253d5db3ff2dd5a173c\",\n      \"transfer_index\": [16141217, 74],\n      \"logs\": [\n        {\n          \"log_index\": \"147\",\n          \"transaction_hash\": \"0x1e67156f8cef5668c69392876f9ff99ca655d43ec366c6cf62217dd633e809b4\",\n          \"transaction_index\": \"74\",\n          \"address\": \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n          \"data\": \"0x000000000000000000000000000000000000000000000000000000007ea8ed40\",\n          \"topic0\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n          \"topic1\": \"0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045\",\n          \"topic2\": \"0x000000000000000000000000c79b96044906550a5652bcf20a6ea02f139b9ae5\",\n          \"topic3\": null,\n          \"block_timestamp\": \"2022-12-08T16:35:11.000Z\",\n          \"block_number\": \"16141217\",\n          \"block_hash\": \"0xc6d379902054169a094ded6e37953549e6c4d59c3dc5b253d5db3ff2dd5a173c\",\n          \"transfer_index\": [16141217, 74, 147],\n          \"transaction_value\": \"0\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying eth_getUncleCountByBlockNumber Parameters - JSON\nDESCRIPTION: This code provides parameters for eth_getUncleCountByBlockNumber as a JSON array, where the element is a block number (hexadecimal or a named keyword). It optionally supports comments for clarification (not natively in JSON). Output is a hexadecimal string with the uncle count.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"0x1B4\" // Block number in hexadecimal or one of the strings \"latest\", \"earliest\", or \"pending\".\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for Web3 Authentication\nDESCRIPTION: This snippet shows how to add the 'web3_auth' app to the INSTALLED_APPS list in the Django project's settings.py file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'web3_auth'\n]\n```\n\n----------------------------------------\n\nTITLE: Starting the Solana NFT Burner Application\nDESCRIPTION: Command to start the NextJS application in development mode on localhost port 3000.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-burner.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying API Reference with Admonition - React (JSX) - JavaScript\nDESCRIPTION: This snippet embeds the ApiReference component with configuration for 'getWalletTransactionsVerbose', which displays detailed API reference information for retrieving decoded wallet transactions. It also integrates an Admonition (info type) as a child to display important notes regarding ABI decoding limitations, along with guidance and a hyperlink to submit new ABI contracts. Prerequisite: all the imported components and the config object must be available. Inputs for the API reference are determined by the config.transaction.getWalletTransactionsVerbose object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/05-Get Transactions/get-wallet-transactions-verbose.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.transaction.getWalletTransactionsVerbose}>\n  <Admonition type=\"info\" title=\"Missing Decodings\">\n    <p>\n      We only decode transactions from verified ABIs. We are continuously adding\n      to our repository of verified contract ABIs.\n    </p>\n    <p>\n      To add new ABIs for decoding, please submit them on our{\" \"}\n      <Link href=\"https://roadmap.moralis.io/b/submit-contract-abis-for-decoding/\">\n        ABI requests board.\n      </Link>\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Components and Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates importing the necessary React components and configuration files required for rendering the API reference documentation. Dependencies include React components such as ApiReference, Admonition, and ReactMarkdown, and an external JSON configuration object. Inputs are static import statements, and the output is configured components ready for use within the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/05-Get Latest Block Number/get-latest-block-number.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\n```\n\n----------------------------------------\n\nTITLE: Running the NFT Balance Fetcher Script\nDESCRIPTION: Command to execute the NFT balance fetching script.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-nft-balances.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode fetchNFTs.js\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference in React\nDESCRIPTION: This code snippet imports necessary components for rendering an API reference documentation. It includes imports for ApiReference, Admonition, ReactMarkdown, and a configuration file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/04-Get Tokens/get-wallet-token-balances.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration for API Reference\nDESCRIPTION: This snippet imports a JSON configuration file (`configs.json`). This file likely contains the specific parameters and details for various API endpoints, including `getNFTOwners`, which are then passed to the `ApiReference` component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/05-Get NFT Owners/get-nft-owners.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Moralis API Reference in React (JavaScript)\nDESCRIPTION: These snippets import React components and configuration files required to render the API reference and a banner in a documentation page for syncing NFT contracts. Dependencies include the Moralis documentation React components (@site/src/components/ApiReference and @site/src/components/ApiBanner/ApiBanner.tsx) and a configuration JSON file (configs.json). The key parameters are the configuration object (config.nft.syncNFTContract) spread into the ApiReference component for customization. These imports are only usable within the Moralis documentation build environment, and the code is MDX/JSX specific.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/04-Get NFT Collections/sync-nft-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.nft.syncNFTContract} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Documentation Component in JSX\nDESCRIPTION: Renders the ApiReference component with configuration specific to the 'getTimeSeriesVolume' endpoint for Solana. This component likely displays the full API reference including parameters, responses, and examples.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Volume Stats/get-timeseries-volume.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getTimeSeriesVolume} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project using npm/yarn\nDESCRIPTION: Initializes a new Node.js project using the specified package manager (npm or yarn via `npm2yarn` tag) with default settings. This command creates a `package.json` file in the current directory, marking the beginning of the project setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for MDX Documentation Page (JavaScript/TypeScript)\nDESCRIPTION: Imports necessary React components (`ApiReference`, `MainnetBadge`, `ApiBanner`) and a JSON configuration file (`configs.json`). These are used within the MDX file to structure and render the API documentation content dynamically. The components likely handle displaying API details, badges, and banners.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/05-Get Token Prices/get-multiple-token-prices.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring syncNFTContract Endpoint for Moralis API in JSON\nDESCRIPTION: Demonstrates the configuration and rate limit parameters for the syncNFTContract endpoint in the Moralis API. This JSON snippet includes endpoint path, price, and rateLimitCost, which are essential for developers to understand rate limit consumption and planning API call usage. There are no code dependencies, but familiarity with endpoint structure and rate limits as defined by Moralis is required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/04-rate-limits.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"syncNFTContract\",\n  \"path\": \"/nft/{address}/sync\",\n  \"price\": 5,\n  \"rateLimitCost\": 25\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Function for Wallet NFTs in GameSparks\nDESCRIPTION: This code snippet demonstrates how to invoke an AWS Lambda function from a GameSparks request handler to get the NFTs in a wallet address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/aws-gamesparks-integration-with-unity.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = GameSparks().Lambda(\"aws-node-project-dev-getWalletNfts\").Invoke(\n    {\n      // Example of how you would send a parameter to Lambda\n      \"address\": message.address,\n      \"chain\": message.chain\n    }\n);\n\nGameSparks().Logging().Debug(\"Result from Lambda is:\");\n\nreturn GameSparks().Messaging().Response({\"result\": response.Payload.result});\n```\n\n----------------------------------------\n\nTITLE: Fetching Cross-Chain NFTs with JavaScript\nDESCRIPTION: JavaScript implementation to retrieve NFTs owned by an address across multiple chains using Moralis SDK. Requires Moralis and @moralisweb3/common-evm-utils packages. Returns NFT data from Ethereum, BSC, and Polygon chains.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Routing for the Protected View in Django\nDESCRIPTION: This Python code snippet shows how to configure the URL routing in a Django application's `urls.py` file. It maps the URL path `protected` to the `protected` view function located in the `views.py` module. This allows users to access the token-gated content by navigating to the `/protected` URL endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-gating-django.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python urls.py\npath('protected', views.protected, name='protected'),\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Protected Page Component in NextJS\nDESCRIPTION: This snippet defines a simple functional React component named `Protected` which serves as the initial structure for the page that will later be gated based on NFT ownership. It renders a basic heading.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/nft-gating-nextjs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Protected() {\n    return (\n        <div>\n            <h3>Protected content</h3>\n        </div>\n    );\n}\nexport default Protected;\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation & Utility Components - React JavaScript\nDESCRIPTION: Imports key JavaScript/React components and configuration required to render the API reference page. Includes Admonition for alerts, Link for navigation, and JSON configuration for API reference parameters. These imports set up the dependencies necessary for constructing and displaying the documentation for ERC20 token burn queries. No inputs or outputs; dependencies must be installed and correctly referenced within the Docusaurus environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/07-Get Burns/get-erc20-burns.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Parse Dashboard with Yarn\nDESCRIPTION: Command to install the parse-dashboard package using Yarn, which provides a web interface to manage Parse Server data and features.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add parse-dashboard\n```\n\n----------------------------------------\n\nTITLE: Refreshing NFT Metadata via SimpleHash API\nDESCRIPTION: SimpleHash API endpoint URL for triggering a metadata refresh for a specific NFT, identified by its `{chain}`, `{contract_address}`, and `{token_id}`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/refresh/{chain}/{contract_address}/{token_id}\n```\n\n----------------------------------------\n\nTITLE: Setting the Page Title for Documentation - HTML\nDESCRIPTION: This snippet uses an HTML <head> tag to set the browser document title specifically for the 'eth_getUncleByBlockNumberAndIndex RPC Method - Moralis Documentation' page. This is a static head section intended for SEO and user navigation, and is not dynamically generated. It ensures that users recognize the context of the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getUncleByBlockNumberAndIndex.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>eth_getUncleByBlockNumberAndIndex RPC Method - Moralis Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: USDT Contract ABI for Ethereum Mainnet\nDESCRIPTION: JSON representation of the USDT contract's Application Binary Interface (ABI). This ABI defines the contract's functions and events, allowing interaction with the USDT token on the Ethereum network.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"string\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"_upgradedAddress\", \"type\": \"address\" }],\n    \"name\": \"deprecate\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      { \"name\": \"_spender\", \"type\": \"address\" },\n      { \"name\": \"_value\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"deprecated\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"_evilUser\", \"type\": \"address\" }],\n    \"name\": \"addBlackList\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      { \"name\": \"_from\", \"type\": \"address\" },\n      { \"name\": \"_to\", \"type\": \"address\" },\n      { \"name\": \"_value\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"upgradedAddress\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [{ \"name\": \"\", \"type\": \"address\" }],\n    \"name\": \"balances\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"maximumFee\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"_totalSupply\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"unpause\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [{ \"name\": \"_maker\", \"type\": \"address\" }],\n    \"name\": \"getBlackListStatus\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      { \"name\": \"\", \"type\": \"address\" },\n      { \"name\": \"\", \"type\": \"address\" }\n    ],\n    \"name\": \"allowed\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"paused\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [{ \"name\": \"who\", \"type\": \"address\" }],\n    \"name\": \"balanceOf\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"pause\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"getOwner\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"string\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      { \"name\": \"_to\", \"type\": \"address\" },\n      { \"name\": \"_value\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      { \"name\": \"newBasisPoints\", \"type\": \"uint256\" },\n      { \"name\": \"newMaxFee\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"setParams\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"amount\", \"type\": \"uint256\" }],\n    \"name\": \"issue\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"amount\", \"type\": \"uint256\" }],\n    \"name\": \"redeem\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      { \"name\": \"_owner\", \"type\": \"address\" },\n      { \"name\": \"_spender\", \"type\": \"address\" }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [{ \"name\": \"remaining\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"basisPointsRate\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [{ \"name\": \"\", \"type\": \"address\" }],\n    \"name\": \"isBlackListed\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"_clearedUser\", \"type\": \"address\" }],\n    \"name\": \"removeBlackList\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"MAX_UINT\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"newOwner\", \"type\": \"address\" }],\n    \"name\": \"transferOwnership\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [{ \"name\": \"_blackListedUser\", \"type\": \"address\" }],\n    \"name\": \"destroyBlackFunds\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"name\": \"_initialSupply\", \"type\": \"uint256\" },\n      { \"name\": \"_name\", \"type\": \"string\" },\n      { \"name\": \"_symbol\", \"type\": \"string\" },\n      { \"name\": \"_decimals\", \"type\": \"uint256\" }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [{ \"indexed\": false, \"name\": \"amount\", \"type\": \"uint256\" }],\n    \"name\": \"Issue\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [{ \"indexed\": false, \"name\": \"amount\", \"type\": \"uint256\" }],\n    \"name\": \"Redeem\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [{ \"indexed\": false, \"name\": \"newAddress\", \"type\": \"address\" }],\n    \"name\": \"Deprecate\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      { \"indexed\": false, \"name\": \"feeBasisPoints\", \"type\": \"uint256\" },\n      { \"indexed\": false, \"name\": \"maxFee\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"Params\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      { \"indexed\": false, \"name\": \"_blackListedUser\", \"type\": \"address\" },\n      { \"indexed\": false, \"name\": \"_balance\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"DestroyedBlackFunds\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [{ \"indexed\": false, \"name\": \"_user\", \"type\": \"address\" }],\n    \"name\": \"AddedBlackList\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [{ \"indexed\": false, \"name\": \"_user\", \"type\": \"address\" }],\n    \"name\": \"RemovedBlackList\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      { \"indexed\": true, \"name\": \"owner\", \"type\": \"address\" },\n      { \"indexed\": true, \"name\": \"spender\", \"type\": \"address\" },\n      { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing MainnetBadge Component in JavaScript/JSX\nDESCRIPTION: Imports the `MainnetBadge` React component using named import syntax. This component is used to display a visual indicator (badge), possibly indicating the network status (e.g., Mainnet availability) for the documented API endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Volume Stats/get-timeseries-volume.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Configuration (React, JavaScript)\nDESCRIPTION: This snippet demonstrates importing a custom React component named 'ApiReference' from a local path, as well as importing a JSON configuration file used to populate the component with relevant API reference data. The 'configs.json' file must exist and should define an object structure with a key 'streams.GetStreamBlockDataByNumber' representing the stream block data endpoint configuration. The imported dependencies allow the embedding of dynamic API documentation within the Markdown-rendered content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/get-stream-block-data-by-number.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Dynamically in MDX/React\nDESCRIPTION: This snippet uses the imported `ApiReference` React component to dynamically render the API documentation for the `eth_getTokenPrice` RPC method. Configuration for this method is passed as props, likely sourced from the imported `config` object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/eth_getTokenPrice.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.rpc.eth_getTokenPrice} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing a React Component for Documentation Banner - JavaScript\nDESCRIPTION: Imports the ApiBanner React component from a local path into the documentation page, allowing for the rendering of an informative or promotional banner within the Markdown content. Assumes a documentation system like Docusaurus that supports MDX/JSX in Markdown files. Required dependency: the component must exist at the referenced path `@site/src/components/ApiBanner/ApiBanner.tsx`. Inputs: none directly; Output: rendered banner when the page is loaded.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/07-token-price-logic.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Sales & Transfers by Specific NFT using SimpleHash API\nDESCRIPTION: SimpleHash API endpoint to retrieve sales and transfer history for a specific NFT, identified by its chain, contract address, and token ID. Requires `chain`, `contract_address`, and `token_id` as path parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/transfers/{chain}/{contract_address}/{token_id}\n```\n\n----------------------------------------\n\nTITLE: Serverless Framework Configuration\nDESCRIPTION: YAML configuration for AWS Lambda functions including environment variables and function handlers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice: aws-node-project\n\nframeworkVersion: '3'\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  environment:\n    MORALIS_API_KEY: 'replace_me'\n\nfunctions:\n  getNativeBalance:\n    handler: functions/getNativeBalance.handler\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components for Moralis Web3 Docs - JavaScript\nDESCRIPTION: Imports necessary UI components such as ApiReference, Admonition, MainnetBadge, and PremiumEndpointBadge used throughout Moralis documentation pages for enhanced information and interface elements. These components enable inclusion of banners, badges, and API configuration elements, supporting consistent documentation standards. Dependencies include module paths relative to the docs directory; expected usage is within React/MDX documentation files.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/03- Get Entities/get-entities-by-category.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport { PremiumEndpointBadge } from \"@site/src/components/PremiumEndpointBadge/PremiumEndpointBadge.js\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration file for the API reference. It then renders the ApiReference component with the specific configuration for the 'getNFTTransfersByBlock' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/03-Get NFT Transfers/get-nft-transfers-by-block.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.nft.getNFTTransfersByBlock} />\n```\n\n----------------------------------------\n\nTITLE: Creating Signature Verification Endpoint via Moralis Auth API in ASP.NET Core (C#)\nDESCRIPTION: Implements a POST endpoint 'VerifySignature' that verifies a signed authentication challenge using Moralis. Accepts ChainNetworkType as a route parameter and CompleteChallengeRequestDto as body data; on success, returns a dummy JWT-like token. Handles external API exceptions robustly. Inputs: network id and signed data. Output: authentication response string suitable for further use (such as token issuance).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpPost, Route(\"verify/{network}\")]\npublic async Task<IActionResult> VerifySignature(ChainNetworkType network, [FromBody] CompleteChallengeRequestDto req)\n{\n    try\n    { \n        CompleteChallengeResponseDto completeResp = await MoralisClient.AuthenticationApi.AuthEndpoint.CompleteChallenge(req, network);\n\n        // ---------------------------------------------------------------------------------\n        // Here is where you would save authentication information to the database.\n        // ---------------------------------------------------------------------------------\n\n        // ---------------------------------------------------------------------------------\n        // Here is where you would generate a JWT or other authentication response object.\n        // ---------------------------------------------------------------------------------\n\n        // Return custom authentication response here.\n        string token =  $\"{{\\\"token\\\":\\\"{completeResp.Address}:{completeResp.ProfileId}\\\"}}\";\n\n        return new CreatedAtRouteResult(nameof(VerifySignature), token);\n    }\n    catch (ApiException ex)\n    {\n        return new BadRequestResult();\n    }\n    catch (Exception ex)\n    {\n        return new StatusCodeResult((int)System.Net.HttpStatusCode.InternalServerError);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Moralis API Reference - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the usage of ES module import syntax to bring in a React component (ApiReference) and a JSON configuration object. The config is used to feed endpoint-specific documentation settings into the reference component, which is rendered with logic for the 'getNFTBulkContractMetadata' endpoint. To use this snippet, ensure React, the relevant components, and the config JSON file are available and correctly structured. Inputs are passed via props, and the output is the rendered documentation interface.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/02-Get NFT Metadata/get-nft-bulk-contract-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.nft.getNFTBulkContractMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs via Moralis NFT API in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to retrieve all NFTs owned by a specific address on the Ethereum blockchain. The script requires npm modules 'moralis' and '@moralisweb3/common-evm-utils'; you must provide your Moralis API key. Parameters include the target wallet address and blockchain chain. The results, containing NFT metadata, are logged in JSON format. Suitable for Node.js environments (v.14+); ensure module dependencies are installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Querying eth_getUncleCountByBlockNumber Response - JSON\nDESCRIPTION: Demonstrates a JSON-RPC response for eth_getUncleCountByBlockNumber, returning the count of uncle blocks as a hexadecimal string in the 'result' field. All fields adhere to the JSON-RPC 2.0 protocol.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with Info Notice\nDESCRIPTION: JSX markup for rendering the API reference documentation with a custom information notice about a new endpoint. The notice includes a link to the newer Wallet History endpoint that provides enhanced transaction data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/02-Get Transactions/get-wallet-transactions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.transaction.getWalletTransactions}>\n    <Admonition type=\"info\" title=\"New Endpoint Available 🤩\">\n        <p>\n        Check-out our newest transactions endpoint, <b><a href=\"/web3-data-api/evm/reference/wallet-api/get-wallet-history\">Wallet History</a></b>, to fetch decoded transactions by wallet, fully enriched with metadata, labels and categories (such as Mints, Burns, Swaps etc).\n        </p>\n    </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router for Balances Route (JavaScript)\nDESCRIPTION: Sets up client-side routing in a React app using react-router-dom v6, defining a route to a balances page. Requires 'react-router-dom' and a Balances component to be present. Expects URLs matching '/balances' to render the Balances component, outputting a RouterProvider. Limitations: Assumes functional components and compatible React version.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\n\nimport Balances from \"./balances\";\n\nconst router = createBrowserRouter([\n  {\n    path: \"/balances\",\n    element: <Balances />,\n  },\n]);\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Installing ngrok Globally using npm\nDESCRIPTION: Installs the `ngrok` command-line tool globally using npm. `ngrok` is used to create a secure tunnel from the public internet to the local development server (running the Express app), making the `/webhook` endpoint accessible to external services like Moralis Streams.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g ngrok\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Informational Banner Component (TypeScript/TSX)\nDESCRIPTION: This snippet imports a custom informational banner component used in Docusaurus or React documentation pages. The banner, written in TSX, is imported from a local project directory to display important API usage notes or notifications for end users. Requires a valid .tsx component at the specified path.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/02-Get Wallet Token Balances/get-wallet-token-balances-price.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner UI Component - TypeScript\nDESCRIPTION: This snippet demonstrates importing a React UI banner component written in TypeScript from the local documentation site components directory. The imported component is used to provide informational banners within the API documentation pages. The proper path and file extension (.tsx) should be present in the project for successful compilation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-nft-contract-transfers.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Collections Owned by an Address (EVM) with Moralis Python SDK\nDESCRIPTION: Retrieves a list of NFT collections for which a specific wallet address owns NFTs on an EVM-compatible chain, using `evm_api.nft.get_wallet_nft_collections`. Requires the `moralis` SDK, API key, and parameters including the wallet address, chain, and optional pagination (limit, cursor). The result includes details about each collection.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"limit\": 100,\n    \"cursor\": \"\",\n}\n\nresult = evm_api.nft.get_wallet_nft_collections(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component - React/JSX\nDESCRIPTION: JSX code that renders the API reference component with configuration props for the verify remove bind endpoint documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/reference/03-Profiles/verify-remove-bind.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.auth.verifyRemoveBind} />\n```\n\n----------------------------------------\n\nTITLE: Importing Breaking Changes Component in JSX\nDESCRIPTION: React/JSX code that imports and renders a BreakingChanges component using MDX syntax. The file includes frontmatter configuration to hide table of contents and title.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport BreakingChanges from \"@site/src/components/BreakingChanges\";\n\n<BreakingChanges />\n```\n\n----------------------------------------\n\nTITLE: Getting All Addresses from a Stream in Moralis JavaScript\nDESCRIPTION: This snippet retrieves all wallet addresses that are currently attached to a specific Moralis stream, using the Moralis.Streams.getAddresses method. The method accepts the stream ID and optionally a limit parameter for the number of addresses to return. Requires the Moralis JavaScript SDK to be set up. Inputs: id (stream ID), limit (optional maximum count); Output: a promise with the list of addresses attached to the stream.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/addresses/monitor-multiple-addresses.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get all addresses\\nawait Moralis.Streams.getAddresses({\\n  id,\\n  limit,\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration\nDESCRIPTION: This snippet imports the necessary React component `ApiReference` and a JSON configuration file. This pattern is used to dynamically load and display API documentation sections based on the provided configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/02-Get Token Balances/get-native-balance.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Creating New Angular Project\nDESCRIPTION: Command to create a new Angular project with routing\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng new your-first-dapp-angular\n```\n\n----------------------------------------\n\nTITLE: Displaying Authenticated User Profile Information - JavaScript\nDESCRIPTION: This JavaScript component displays detailed authenticated user data including profile ID, wallet account, network, and expiration time, using styles from a CSS module and web3uikit Typography. It retrieves session data via useSession from next-auth and conditionally renders profile details if the session exists. This component depends on next-auth/react and @web3uikit/core, and serves as a user profile panel for authenticated sessions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// File path\n// app/components/logoutBtn/userData.js\n\nimport React from \\\"react\\\";\nimport styles from \\\"../../../styles/User.module.css\\\";\nimport { Typography } from \\\"@web3uikit/core\\\";\nimport { useSession } from \\\"next-auth/react\\\";\n\nexport default function UserData() {\n  const { data: session, status } = useSession();\n\n  if (session) {\n    return (\n      <div className={styles.data}>\n        <div className={styles.dataCell}>\n          <Typography variant=\\\"subtitle2\\\">Profile Id:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\\\"body16\\\">{session?.user.profileId}</Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\\\"subtitle2\\\">Account:</Typography>\n          <div className={styles.address}>\n            {/* account address */}\n            <Typography copyable variant=\\\"body16\\\">\n              {session?.user.address}\n            </Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\\\"subtitle2\\\">Network:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\\\"body16\\\">{session?.user.network}</Typography>\n          </div>\n        </div>\n        <div className={styles.dataCell}>\n          <Typography variant=\\\"subtitle2\\\">ExpTime:</Typography>\n          <div className={styles.address}>\n            <Typography variant=\\\"body16\\\">\\n              {session?.user.expirationTime}\\n            </Typography>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Solana Program\nDESCRIPTION: Shell commands to build the Solana Rust program and deploy it to the Solana cluster.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo build-bpf\n\nsolana program deploy ./target/deploy/micro_blog.so\n```\n\n----------------------------------------\n\nTITLE: Configuring NFT Transfer Monitoring with Moralis Streams API\nDESCRIPTION: JavaScript implementation for creating a stream to monitor NFT transfers from a specific address. Uses the Transfer event ABI and includes advanced filtering options to track specific sender addresses. Requires Moralis Business or Enterprise plan for listening to all addresses feature.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-listen-to-all-nft-transfers-sent-from-a-specific-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst NFT_transfer_ABI = [{\n  \"anonymous\": false,\n  \"inputs\": [\n    { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n    { \"indexed\": true, \"name\": \"tokenId\", \"type\": \"uint256\" },\n  ],\n  \"name\": \"transfer\",\n  \"type\": \"event\",\n}];\n\nconst options = {\n  chains: [EvmChain.ETHEREUM],\n  description: \"monitor all NFT transfers\",\n  tag: \"NFT_transfers\",\n  abi: NFT_transfer_ABI,\n  includeContractLogs: true,\n  allAddresses: true,\n  topic0: [\"Transfer(address,address,uint256)\"],\n  advancedOptions: [\n    {\n      topic0: \"Transfer(address,address,uint256)\",\n      filter: { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] },\n    },\n  ],\n  webhookUrl: \"https://YOUR_WEBHOOK_URL\",\n};\n\nconst stream = await Moralis.Streams.add(options);\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Filtering in React TypeScript\nDESCRIPTION: Implementation of NFT filtering functionality in the main component. Includes state management for filter query and handler function for filter input changes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-explorer.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `pages/index.jsx`\n\n// State variable to store the filter query entered in the UI\nconst [query, setQuery] = useState('');\n\n// 2️⃣\n// `queryHandler` function updated the `query` state variable with the input data.\nconst queryHandler = (e) => {\n  const Text = e.target.value.toLowerCase();\n  setQuery(Text);\n};\n\nreturn (\n  //...\n  // 1️⃣\n  // Input component to enter the filter query and it triggers\n  // `queryHandler` function on input change\n    <Input variant=\"filled\" placeholder=\"Filter..\" width={200} onInput={queryHandler} />\n  //...\n\n  //...\n  // 3️⃣\n  // NFTCard Component uses the query stae as on of its property.\n  <NFTCard key={i} nftAddress={e.mint} filterQuery={query} />;\n\n  //...\n);\n```\n\n----------------------------------------\n\nTITLE: Creating the Protected HTML Template with Conditional Content\nDESCRIPTION: This HTML code defines the template (`protected.html`) for the token-gated page using Django Template Language. It first checks if a user is authenticated. If authenticated, it displays the user's Ethereum address (username). It then checks if the `nfts` context variable (passed from the `protected` view) exists. If `nfts` data is present, it shows a success message and the NFT details; otherwise, it displays a message indicating the user does not own the required NFT. It also includes login/logout links.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-gating-django.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n```html protected.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Moralis Django NFT Gated Demo Page</title>\n</head>\n<body>\n    <div>\n\n    {% if user.is_authenticated %}\n        <h1>Eth address: {{ user.username }}</h1>\n        <h2>Protected content</h2>\n        {% if nfts %}\n          <h3>Nice! You have our NFT!</h3>\n          <pre>\n{{ nfts }}\n          </pre>\n        {% else %}\n          <h3>Sorry, you don't have our NFT!</h3>\n        {% endif %}\n        <br/>\n        <a href=\"{% url 'logout' %}?next={% url 'moralis_auth' %}\">Logout</a>\n    {% else %}\n        <a href=\"{% url 'moralis_auth' %}\"> Login page </a>\n    {% endif %}\n    </div>\n\n</body>\n</html>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in JavaScript/JSX\nDESCRIPTION: Imports the `ApiBanner` React component from its TypeScript file (`.tsx`). This component is likely used to display specific banners, notices, or promotional elements within the API documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-ens-domain.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Solana NFT Burner Project\nDESCRIPTION: Commands to clone the GitHub repository, navigate to the project directory, and install dependencies using yarn.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-burner.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/JohnVersus/solana-nft-burner.git\n\ncd solana-nft-burner\n\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Getting NFT Collections - React - JavaScript\nDESCRIPTION: Renders the ApiReference React component configured to display reference documentation for fetching NFT collections by a wallet using the Moralis Web3 Data API. Dependencies include React, a local Docusaurus site component, and a JSON configuration file containing endpoint details. Expected input is a configuration object for the desired endpoint; there is no direct output except the rendered API documentation. This approach assumes the necessary configuration details exist in configsV2.json and that the React environment properly supports component rendering.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/03-Get NFTs/get-wallet-nft-collections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.nft.getWalletNFTCollections} />\n```\n\n----------------------------------------\n\nTITLE: Starting the Express Server\nDESCRIPTION: This shell command starts the Express server using the npm start script, which utilizes nodemon for auto-restarting on code changes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Information by Unix Timestamp in TypeScript\nDESCRIPTION: TypeScript implementation for retrieving the closest block by a unix timestamp using Moralis. The code imports required dependencies, initializes Moralis with an API key, and calls the getDateToBlock endpoint with the specified timestamp and chain parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-by-unix-timestamp.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const date = \"1667823435\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getDateToBlock({\n    date,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Head Tag for Page Title - HTML\nDESCRIPTION: Defines the HTML <head> tag with a descriptive <title> for the page, specifying the topic 'eth_getTransactionByHash RPC Method - Moralis Documentation'. This is critical for SEO and browser tab designation. Should be used in environments that support raw HTML tags in markdown or JSX.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getTransactionByHash.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <title>eth_getTransactionByHash RPC Method - Moralis Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Admonition Block for Premium Endpoint Notice - Markdown/JSX\nDESCRIPTION: This Markdown/JSX snippet displays an informational admonition, leveraging the 'Admonition' React component. It provides critical information that accessing the token search API requires a Moralis account of Business plan or higher, and includes a link to further documentation (Token Search API FAQ). Inputs are written in Markdown with embedded JSX, and the output is a stylized, in-page info block. There are no external data dependencies but relies on Docusaurus markdown enhancements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/09-Search Tokens/token-search-api.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Admonition type=\"info\" icon=\"💡\" title=\"Premium Endpoint\">\n    <p>\n      To use this API, you will need an API key associated with a Moralis \n      account on the <strong>Business</strong> plan or higher.\n    </p>\n    <p>\n      For FAQs and more information about token search, please check out our <a href=\"/web3-data-api/evm/token-search\">Token Search API FAQ</a>.\n    </p>\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Importing EVMChainData Component in React/JSX\nDESCRIPTION: This code snippet imports and renders the EVMChainData component from the site components, which displays information about EVM chains supported by Moralis Web3 Data API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/01-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EVMChainData } from '@site/src/components/SupportedChains';\n\n<EVMChainData/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Pairs by Address via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve token pairs associated with a specific token address using the Moralis Web3 API v2.2. The ':token_address' parameter should be replaced with the token's contract address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:token_address/pairs\n```\n\n----------------------------------------\n\nTITLE: Complete Balances Component Implementation\nDESCRIPTION: TypeScript code for the balances component with axios integration for fetching data\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from \"@angular/core\";\n\nimport axios from \"axios\";\n\n@Component({\n  selector: \"app-balances\",\n  templateUrl: \"./balances.component.html\",\n  styleUrls: [\"./balances.component.css\"],\n})\nexport class BalancesComponent implements OnInit {\n  constructor() {}\n\n  address = \"\";\n  nativeBalance = \"\";\n  tokenBalances = \"\";\n\n  async ngOnInit() {\n    const { data } = await axios(`http://localhost:3000/balances`);\n\n    this.address = data.address;\n    this.nativeBalance = data.nativeBalance;\n    this.tokenBalances = data.tokenBalances;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installs the necessary npm packages for the project including express, node-telegram-bot-api, dotenv, and nodemon.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express node-telegram-bot-api dotenv nodemon\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis Core\nDESCRIPTION: Code to initialize Moralis core with API key configuration\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncore.start({\n  apiKey: \"<YOUR_API_KEY>\",\n  // ...and any other configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Running Express Backend using Nodemon - Bash\nDESCRIPTION: Executes the backend's start script, which launches the Express server via nodemon with live-reloading. Assumes prior definition of 'start' script in package.json and all dependencies are installed. No input parameters. Standard output includes nodemon and server logs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Updating Home Component Props\nDESCRIPTION: Modifies the Home component to accept the new myNFT prop from getServerSideProps.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Home({ profile, nftArray, myNFT }) {\n  console.log(profile);\n\n  //let myNFT; remove or comment this out\n  \n  ...\n```\n\n----------------------------------------\n\nTITLE: Migrating WalletConnect Authentication with Custom RPC URL in Moralis JS SDK\nDESCRIPTION: Example showing how to update the Moralis.authenticate method to use a custom RPC URL instead of the deprecated speedy nodes. The code demonstrates setting up authentication with WalletConnect using a project ID and custom RPC URL mapping.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2024-03-04-breaking-change.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMoralis.authenticate({\n  provider: \"walletconnect\",\n  projectId: \"<PROJECT_ID>\",\n  chainId: 1,\n  rpcMap: {\n    1: \"<YOUR_CUSTOM_RPC_URL>\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata (YAML Frontmatter)\nDESCRIPTION: Defines metadata for the documentation page using YAML frontmatter. It sets the sidebar position (`sidebar_position`), the label displayed in the sidebar (`sidebar_label`), and the URL slug (`slug`) for the page within the documentation site framework.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/01-Get NFTs/get-contract-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar_position: 1\nsidebar_label: Get NFTs by contract\nslug: /web3-data-api/evm/reference/get-contract-nfts\n---\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in React\nDESCRIPTION: This code snippet imports the ApiReference component and configuration data for the API reference documentation. It's used to render the API details for the 'Sync NFT Contract' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/04-Get NFT Collections/sync-nft-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Filtering Displayed NFTs in NFTCard Component with Query Prop (TypeScript)\nDESCRIPTION: This snippet details how the NFTCard component applies client-side filtering based on the filterQuery prop. The component fetches NFT metadata, stores the NFT symbol in filterSymbol using useState, and conditionally renders the card only if the filterSymbol matches the query. If no match, nothing is rendered, ensuring efficient UI updates. Requires dependencies: React, useState, and asynchronous data-fetching functions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-explorer.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `src/components/modules/NFTCard/NFTCard.jsx`\n\n// 4\\u20e3\n// `NFTCard` uses the `filterQuery` data when it is available\nconst NFTCard = ({ nftAddress, filterQuery }) => {\n//...\n\n// Stores the filter symbol state.\nconst [filterSymbol, setFilterSymbol] = useState();\n\nconst getNFTMetadata = async () => {\n  // ...\n  // 5\\u20e3\n  // When metadata is fetched from the backend we store the NFT symbol\n  // in a state variable called `filterSymbol`\n setFilterSymbol(response.symbol);\n  // ...\n}\n\n // 6\\u20e3\n // The value of `filterSymbol` is compared with the `filterQuery` and\n // if the value matches then the NFTCard component will be rendered,\n // else the NFTCard is not rendered in the UI.\nif (filterSymbol?.toLowerCase().includes(filterQuery)) {\n return (\n  //...\n );\n}\n  return null;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP Response Codes Table in Markdown\nDESCRIPTION: This markdown snippet creates a table that lists common HTTP response codes used by Moralis, including their status codes, messages, and descriptions. It provides a quick reference for developers to understand API response meanings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/02-api-response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Code | Message               | Description                                                                                      |\n| :---------- | :-------------------- | :----------------------------------------------------------------------------------------------- |\n| 200         | OK                    | Everything worked as expected.                                                                   |\n| 201         | Created               | Resource have been successfully created.                                                         |\n| 400         | Bad Request           | The request was unacceptable, often due to missing a required parameter.                         |\n| 424         | Unauthorized          | No valid API key provided.                                                                       |\n| 429         | Rate Limited          | Too many requests hit the API too quickly. We recommend an exponential backoff of your requests. |\n| 500         | Internal Server Error | Something went wrong on Moralis' end. (These are rare.)                                          |\n```\n\n----------------------------------------\n\nTITLE: Embedding API Reference and Note Admonition - React-JSX/MDX\nDESCRIPTION: This markup embeds the ApiReference interactive component with preconfigured props. It also includes an Admonition component that displays a user info alert, with inline HTML for a note advising users to cross-reference the RPC schema documentation. Dependencies: previously imported React components and config file. Parameters include config.rpc.eth_getTransactionByBlockHashAndIndex for dynamic rendering, and no inputs are required from the end-user. Expected output is a rich, interactive docs block on the rendered documentation site.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getTransactionByBlockHashAndIndex.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## Get Transaction By Hash And Index\n\n<ApiReference {...config.rpc.eth_getTransactionByBlockHashAndIndex} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Complete Express.js server with Moralis authentication implementation\nDESCRIPTION: The complete server implementation with all authentication endpoints integrated. Includes Moralis initialization, CORS configuration, and all four authentication endpoints: request-message, verify, authenticate, and logout.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nconst cookieParser = require(\"cookie-parser\");\nconst jwt = require(\"jsonwebtoken\");\n\n// to use our .env variables\nrequire(\"dotenv\").config();\n\nconst app = express();\nconst port = 4000;\n\napp.use(express.json());\napp.use(cookieParser());\n\n// allow access to React app domain\napp.use(\n  cors({\n    origin: \"http://localhost:3000\",\n    credentials: true,\n  })\n);\n\nconst config = {\n  domain: process.env.APP_DOMAIN,\n  statement: \"Please sign this message to confirm your identity.\",\n  uri: process.env.REACT_URL,\n  timeout: 60,\n};\n\n// request message to be signed by client\napp.post(\"/request-message\", async (req, res) => {\n  const { address, chain, network } = req.body;\n\n  try {\n    const message = await Moralis.Auth.requestMessage({\n      address,\n      chain,\n      ...config,\n    });\n\n    res.status(200).json(message);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n\napp.post(\"/verify\", async (req, res) => {\n  try {\n    const { message, signature } = req.body;\n\n    const { address, profileId } = (\n      await Moralis.Auth.verify({\n        message,\n        signature,\n        networkType: \"evm\",\n      })\n    ).raw;\n\n    const user = { address, profileId, signature };\n\n    // create JWT token\n    const token = jwt.sign(user, process.env.AUTH_SECRET);\n\n    // set JWT cookie\n    res.cookie(\"jwt\", token, {\n      httpOnly: true,\n    });\n\n    res.status(200).json(user);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n\napp.get(\"/authenticate\", async (req, res) => {\n  const token = req.cookies.jwt;\n  if (!token) return res.sendStatus(403); // if the user did not send a jwt token, they are unauthorized\n\n  try {\n    const data = jwt.verify(token, process.env.AUTH_SECRET);\n    res.json(data);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n\napp.get(\"/logout\", async (req, res) => {\n  try {\n    res.clearCookie(\"jwt\");\n    return res.sendStatus(200);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\nstartServer();\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Configuration (JavaScript)\nDESCRIPTION: This snippet imports the JSON configuration for the API reference, which provides endpoint-specific details used to dynamically render the API documentation. The dependency is the configs.json file at the specified path.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-address.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Plugin\nDESCRIPTION: Command to install the Moralis plugin for ElizaOS using pnpm.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/02-building-with-eliza-os.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @elizaos/plugin-moralis\n\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference in React\nDESCRIPTION: This code snippet imports necessary components and configurations for rendering the API reference documentation. It includes imports for ApiReference, configuration data, and additional UI components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/08-Get NFT Stats/get-nft-collection-stats.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in JSX\nDESCRIPTION: Imports the ApiBanner component which is likely used to display a banner or header for the API documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/utils/contract-review.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Setting up the .env file with Moralis Node URL for secure connection management.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-erc20-balances.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMORALIS_NODE_URL=YOUR_NODE_URL\n# Replace YOUR_NODE_URL with the actual node URL from your Moralis dashboard.\n```\n\n----------------------------------------\n\nTITLE: Documenting API Methods in Markdown\nDESCRIPTION: This Markdown snippet presents a tabular overview of three Moralis Price API methods for Solana, listing each method, a summary of its functionality, a link to detailed method documentation, and the corresponding endpoint URL. The table serves as a concise reference for developers, enabling quick navigation to API endpoints and documentation. No direct code dependencies are required, though knowledge of REST endpoints and accessing web documentation is assumed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/price-api/price-api.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| No. | Method                   | Description                                      | API Reference                                                                           | URL                                                                                                                                                    |\n| --- | ------------------------ | ------------------------------------------------ | --------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 1   | `getTokenPrice`          | Get token price                                  | [Method Documentation](/web3-data-api/solana/reference/price/get-sol-token-price)       | [https://solana-gateway.moralis.io/token/:network/:address/price](https://solana-gateway.moralis.io/token/:network/:address/price)                     |\n| 2   | `getMultipleTokenPrices` | Get multiple token prices                        | [Method Documentation](/web3-data-api/solana/reference/price/get-multiple-token-prices) | [https://solana-gateway.moralis.io/token/:network/:address/price](https://solana-gateway.moralis.io/token/:network/:address/price)                     |\n| 3   | `getCandleSticks`        | Get the OHLCV candlesticks by using pair address | [Method Documentation](/web3-data-api/solana/reference/price/get-ohlcv-by-pair-address) | [https://solana-gateway.moralis.io/token/:network/pairs/:pairAddress/ohlcv](https://solana-gateway.moralis.io/token/:network/pairs/:pairAddress/ohlcv) |\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference and Configuration in React - JavaScript\nDESCRIPTION: Imports the ApiReference React component for embedding interactive API reference documentation and loads a JSON configuration file that defines the structure of the API documentation. The config is used to populate the API reference component with endpoint details. Dependencies include React, the '@site/src/components/ApiReference' module, and a specific versioned API reference JSON file. Inputs are the module imports and configuration object; output is the prepared React scope with both ready for usage in the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/reference/02-Challenge/verify-challenge-solana.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing UI and Configuration Components - React/Docusaurus - JavaScript\nDESCRIPTION: These import statements bring in React and Docusaurus components as well as the JSON configuration required for API reference display. Dependencies include @site/src/components/ApiReference, @theme/Admonition, @docusaurus/Link, and a local configs.json. Inputs: none (just imports). Outputs: Component availability within the rendered page. These are prerequisites for rendering custom documentation UI elements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-wallet-transactions-verbose.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component and Configuration for EVM Streams API\nDESCRIPTION: Import statements for the ApiReference component and the configuration object for the Streams API reference documentation. This code sets up the components needed to render the API reference for the 'Get project stats' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/03-Stats/get-stats.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: EVM RPC Response: eth_createAccessList\nDESCRIPTION: Example response format for eth_createAccessList RPC method showing access list and gas used.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"accessList\": [],\n    \"gasUsed\": \"0x\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Firebase Projects via CLI (Shell)\nDESCRIPTION: Lists all Firebase projects accessible to the currently authenticated user via the Firebase CLI. This helps in identifying the correct project ID or confirming project existence before initialization. Requires Firebase CLI to be installed and authenticated.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfirebase projects:list\n```\n\n----------------------------------------\n\nTITLE: Fetching Balances Data in ngOnInit - TypeScript\nDESCRIPTION: Defines an asynchronous lifecycle method in the Angular balances component to request wallet balances from the backend API when the component is initialized. Sets component variables with the data received from the API. Requires the 'axios' package and a backend route at 'http://localhost:3000/balances'. The method assumes the server is running and responding with expected JSON data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync ngOnInit() {\n  const { data } = await axios(`http://localhost:3000/balances`);\n\n  this.address = data.address;\n  this.nativeBalance = data.nativeBalance;\n  this.tokenBalances = data.tokenBalances;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference and Banner Components - JavaScript/React\nDESCRIPTION: This snippet imports React components (ApiReference, ApiBanner) along with an endpoint configuration JSON for rendering an API reference and banners within a documentation page. It requires dependencies such as the local site component library and a JSON config file specifying API endpoint details. These imports provide the building blocks for dynamic API documentation rendering.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-wallet-token-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference using React Component\nDESCRIPTION: This JSX snippet renders the `ApiReference` React component. It passes configuration specific to the `getNFTFloorPriceByContract` endpoint (accessed via `config.nft.getNFTFloorPriceByContract`) as props. This component is responsible for displaying the detailed API documentation, including parameters, responses, and potentially code examples, based on the provided configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/02-NFT Prices/get-nft-floor-price-by-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTFloorPriceByContract} />\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Frontend Project\nDESCRIPTION: Instructions for cloning the project repository and navigating to the project directory.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/JohnVersus/solana-dapp-tic-tac-toe.git\n\ncd solana-dapp-tic-tac-toe\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component with Configuration\nDESCRIPTION: This code snippet renders the ApiReference component, passing the configuration for the getWalletTransactions endpoint from the imported config object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/05-Get Transactions/get-wallet-transactions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.transaction.getWalletTransactions} />\n```\n\n----------------------------------------\n\nTITLE: Importing React Component in Markdown (MDX)\nDESCRIPTION: This line imports the `ApiReference` React component from a local source file. This component is likely used to render structured API documentation content within the Markdown file, suggesting the use of MDX or a similar Markdown processor that supports JavaScript/React components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/02-Get NFT Metadata/get-nft-contract-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner React Component (TypeScript)\nDESCRIPTION: This snippet demonstrates importing the ApiBanner component, a TypeScript React component used to display banners or notices in the documentation. The import path points to the typed (.tsx) version, suggesting the documentation site supports both JavaScript and TypeScript components. The component is assumed to be used for conveying important information or promotional content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/utils/web3-api-version.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Documenting Moralis Web3 API Endpoints for Solana - Markdown\nDESCRIPTION: This markdown code documents a collection of Moralis Web3 API endpoints for the Solana blockchain, grouped into thematic sections (tokens, wallet, NFT, and price). Each table row shows a method, its description, documentation link, and API URL, giving a structured snapshot of function usage and endpoints. No executable code is present; this serves as a quick lookup for developers referencing the Moralis API methods.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/reference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Search Tokens\n\n| No. | Method         | Description   | API Reference                                                         | URL                                                                                                          |\n| --- | -------------- | ------------- | --------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| 30  | `searchTokens` | Search tokens | [Method Documentation](/web3-data-api/solana/reference/search-tokens) | [https://deep-index.moralis.io/api/v2.2/tokens/search](https://deep-index.moralis.io/api/v2.2/tokens/search) |\n\n## Wallet API\n\nSelect what you want to achieve:\n\n- [Get Native Balance](#get-native-balance)\n- [Get Token Balances](#get-token-balances)\n- [Get Portfolio](#get-portfolio)\n- [Get Wallet Token Swaps](#get-wallet-token-swaps)\n- [Get Wallet NFTs](#get-wallet-nfts)\n\n### Get Native Balance\n\n| No. | Method    | Description                  | API Reference                                                       | URL                                                                                                                                        |\n| --- | --------- | ---------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| 1   | `balance` | Get native balance by wallet | [Method Documentation](/web3-data-api/solana/reference/sol-balance) | [https://solana-gateway.moralis.io/account/:network/:address/balance](https://solana-gateway.moralis.io/account/:network/:address/balance) |\n\n### Get Token Balances\n\n| No. | Method   | Description                 | API Reference                                                   | URL                                                                                                                                      |\n| --- | -------- | --------------------------- | --------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| 2   | `getSPL` | Get token balance by wallet | [Method Documentation](/web3-data-api/solana/reference/get-spl) | [https://solana-gateway.moralis.io/account/:network/:address/tokens](https://solana-gateway.moralis.io/account/:network/:address/tokens) |\n\n### Get Portfolio\n\n| No. | Method         | Description             | API Reference                                                             | URL                                                                                                                                            |\n| --- | -------------- | ----------------------- | ------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| 3   | `getPortfolio` | Get portfolio by wallet | [Method Documentation](/web3-data-api/solana/reference/get-sol-portfolio) | [https://solana-gateway.moralis.io/account/:network/:address/portfolio](https://solana-gateway.moralis.io/account/:network/:address/portfolio) |\n\n### Get Wallet Token Swaps\n\n| No. | Method                    | Description                       | API Reference                                                                       | URL                                                                                                                                                |\n| --- | ------------------------- | --------------------------------- | ----------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 4   | `getSwapsByWalletAddress` | Get token swaps by wallet address | [Method Documentation](/web3-data-api/solana/reference/get-swaps-by-wallet-address) | [https://solana-gateway.moralis.io/account/:network/:walletAddress/swaps](https://solana-gateway.moralis.io/account/:network/:walletAddress/swaps) |\n\n### Get Wallet NFTs\n\n| No. | Method    | Description        | API Reference                                                        | URL                                                                                                                                |\n| --- | --------- | ------------------ | -------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| 5   | `getNFTs` | Get NFTs by wallet | [Method Documentation](/web3-data-api/solana/reference/get-sol-nfts) | [https://solana-gateway.moralis.io/account/:network/:address/nft](https://solana-gateway.moralis.io/account/:network/:address/nft) |\n\n## NFT API\n\n| No. | Method           | Description        | API Reference                                                                | URL                                                                                                                                  |\n| --- | ---------------- | ------------------ | ---------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| 1   | `getNFTs`        | Get NFTs by wallet | [Method Documentation](/web3-data-api/solana/reference/get-sol-nfts)         | [https://solana-gateway.moralis.io/account/:network/:address/nft](https://solana-gateway.moralis.io/account/:network/:address/nft)   |\n| 2   | `getNFTMetadata` | Get NFT metadata   | [Method Documentation](/web3-data-api/solana/reference/get-sol-nft-metadata) | [https://solana-gateway.moralis.io/nft/:network/:address/metadata](https://solana-gateway.moralis.io/nft/:network/:address/metadata) |\n\n## Price API\n\n| No. | Method                   | Description                                      | API Reference                                                                           | URL                                                                                                                                                    |\n| --- | ------------------------ | ------------------------------------------------ | --------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 1   | `getTokenPrice`          | Get token price                                  | [Method Documentation](/web3-data-api/solana/reference/price/get-sol-token-price)       | [https://solana-gateway.moralis.io/token/:network/:address/price](https://solana-gateway.moralis.io/token/:network/:address/price)                     |\n| 2   | `getMultipleTokenPrices` | Get multiple token prices                        | [Method Documentation](/web3-data-api/solana/reference/price/get-multiple-token-prices) | [https://solana-gateway.moralis.io/token/:network/:address/price](https://solana-gateway.moralis.io/token/:network/:address/price)                     |\n| 3   | `getCandleSticks`        | Get the OHLCV candlesticks by using pair address | [Method Documentation](/web3-data-api/solana/reference/price/get-ohlcv-by-pair-address) | [https://solana-gateway.moralis.io/token/:network/pairs/:pairAddress/ohlcv](https://solana-gateway.moralis.io/token/:network/pairs/:pairAddress/ohlcv) |\n```\n\n----------------------------------------\n\nTITLE: Creating EvmAddress Instance\nDESCRIPTION: Demonstrates creating an EvmAddress instance and accessing its properties.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmAddress } from \"@moralisweb3/common-evm-utils\";\n\nconst myAddress = EvmAddress.create(\n  \"0xa74476443119A942dE498590Fe1f2454d7D4aC0d\"\n);\n\nmyAddress.lowercase; // \"0xa74476443119a942de498590fe1f2454d7d4ac0d\"\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in React - JavaScript\nDESCRIPTION: This snippet imports necessary components for building an API reference documentation page in a React (Docusaurus) environment. It includes components such as ApiReference for rendering API docs, Admonition for callout boxes, and a configuration file with API parameters. Dependencies required are Docusaurus, React, and the specific @site/config assets.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/03-Get NFT Transfers/get-wallet-nft-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK via NPM\nDESCRIPTION: Command to install the Moralis SDK package using NPM package manager. This is the first step in integrating Moralis with an AI agent.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/06-common-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis\n```\n\n----------------------------------------\n\nTITLE: Complete Server Setup with Moralis Integration in ASP.NET Core (C#)\nDESCRIPTION: This snippet shows a complete Program.cs for an ASP.NET Core Web API configured with CORS, controllers, Swagger/OpenAPI, Moralis SDK setup, and typical middleware for HTTPS, authorization, and routing. It includes a CORS policy for cross-origin requests, initialization of service dependencies, and the Moralis client connection for authentication workflows. It expects ASP.NET Core and Moralis packages, and should be adapted with the correct client and server ports.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar AllowedOrigins = \"_allowedOrigins\";\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Define CORS policy\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(AllowedOrigins,\n                    policy =>\n                    {\n                        policy.WithOrigins(\"http://127.0.0.1:5500\")\n                                            .AllowAnyHeader()\n                                            .AllowAnyMethod();\n                    });\n});\n\n// Add services to the container.\nbuilder.Services.AddControllers();\n\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\n// Setup Moralis\nMoralis.MoralisClient.ConnectionData = new Moralis.Models.ServerConnectionData();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Auth Extension in Firebase\nDESCRIPTION: CLI commands for installing and deploying the Moralis authentication extension in Firebase.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfirebase ext:install moralis/moralis-auth@latest\n```\n\nLANGUAGE: text\nCODE:\n```\nfirebase deploy --only extensions\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet imports the DocCardList component from the Docusaurus theme and renders it within the page. The DocCardList component is typically used to automatically generate a list of child pages or related documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/tutorials.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Comparing EvmAddress Instances and Values for Equality - Moralis SDK - JavaScript\nDESCRIPTION: Demonstrates the utility of the EvmAddress.equals() method for checking equality between an EvmAddress instance and addresses provided in either lowercase or checksum string form, as well as other EvmAddress instances. Allows normalized comparison regardless of address input format. Assumes address is an EvmAddress object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  \"check 1: \",\n  address.equals(\"0xa9c4c85dd0495e32d08ef64d51fdeb35d200edfe\")\n);\n// check 1: true\nconsole.log(\n  \"check 2: \",\n  address.equals(\"0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe\")\n);\n// check 2: true\nconsole.log(\n  \"check 3: \",\n  address.equals(\n    EvmAddress.create(\"0xa9c4c85dd0495e32d08ef64d51fdeb35d200edfe\")\n  )\n);\n// check 3: true\nconsole.log(\n  \"check 4: \",\n  address.equals(\n    EvmAddress.create(\"0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe\")\n  )\n);\n// check 4: true\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference Page in React\nDESCRIPTION: This code snippet imports necessary components and configurations for rendering the API reference page. It includes imports for ApiReference, configuration data, and additional UI components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/09-Get NFT Traits and Rarity/get-nfts-by-traits.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Node-notifier Import\nDESCRIPTION: Importing the node-notifier package for desktop notifications\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst notifier = require(\"node-notifier\");\n```\n\n----------------------------------------\n\nTITLE: Rendering DeFi Protocols API Reference - Moralis Web3 Data API - JavaScript\nDESCRIPTION: This snippet renders the API documentation component for the 'getDefiSummary' endpoint, using configuration loaded from an external JSON file. It displays an interactive reference for developers to understand and try querying DeFi protocol summaries tied to an EVM wallet. Requires the 'ApiReference' component and the correct configuration schema in 'config.token.getDefiSummary'. Expected input is a configuration object; output is a rendered API reference UI. Limitations: Only as dynamic as the configuration and the component allow.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/06-Get Wallet Defi Positions/get-defi-summary.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.token.getDefiSummary} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Reference Component in React (JavaScript)\nDESCRIPTION: This snippet demonstrates importing the ApiReference React component and a JSON configuration for NFT API endpoints. It then renders the component with the specific NFT wallet configuration passed as props. Dependencies include React, the custom ApiReference component, and a configuration JSON. Inputs include the props from configs.json; the output is the rendered API reference section for documentation. Appropriate for React-based documentation sites with sidebar navigation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/01-Get NFTs/get-wallet-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.nft.getWalletNFTs} />\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running the Next.js Starter App (Shell)\nDESCRIPTION: Clones the starter repository for the Web3 social profile project, navigates into the project directory, installs dependencies using npm, and starts the Next.js development server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/IAmJaysWay/lens-starter\ncd lens-starter\ncd web3profile-starter\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering NFT Historical Floor Price API Reference - JSX\nDESCRIPTION: Renders the ApiReference component with specific props for the getNFTHistoricalFloorPriceByContract endpoint. Requires the configuration object imported earlier and the React/JSX runtime. The component is responsible for displaying structured API documentation for developers, including request/response schemas and usage instructions. Inputs: a configuration object; Outputs: a rendered documentation UI element.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-historical-floor-price-by-contract.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTHistoricalFloorPriceByContract} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference and Configuration - JavaScript/TypeScript\nDESCRIPTION: This snippet imports the ApiReference React component and a configuration object required to display dynamic API documentation for the NFT trades-by-token endpoint. Dependencies are '@site/src/components/ApiReference' (custom React component) and a configuration JSON, both essential for rendering the documentation. Inputs are the imported modules; outputs are the module objects ready for use in a React component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/07-Get NFT Trades/get-nft-trades-by-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Checking Endpoint Weights in TypeScript\nDESCRIPTION: Code example showing how to check the compute unit weights of Moralis API endpoints using TypeScript. It demonstrates initializing the Moralis SDK with an API key and calling the web3ApiVersion method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/resources/05-compute-units-cu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.utils.web3ApiVersion();\n\nconsole.log(response?.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Cards for Moralis API Documentation in JSX\nDESCRIPTION: This code renders navigation cards for the Moralis Web3 API documentation homepage. It displays cards for the EVM API and Solana API, each with an SVG icon and a brief description of their functionality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<a className=\"card padding--lg card--homepage\" href=\"/web3-data-api/evm/reference\">\n    <h3><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"36\" height=\"36\" fill=\"none\"><path stroke=\"#85B3DB\" strokeLinejoin=\"round\" strokeMiterlimit=\"2.927\" strokeWidth=\"2.238\" d=\"M18.005 1.213 7.928 17.31l10.077 5.735V1.213Z\"/><path stroke=\"#5B8DB9\" strokeLinejoin=\"round\" strokeMiterlimit=\"2.927\" strokeWidth=\"2.238\" d=\"M18 1.213v21.823l10.072-5.733L18 1.213Z\"/><path stroke=\"#85B3DB\" strokeLinejoin=\"round\" strokeMiterlimit=\"2.927\" strokeWidth=\"1.791\" d=\"M18.005 34.801V27L7.928 21.366 18.005 34.8Z\"/><path stroke=\"#5B8DB9\" strokeLinejoin=\"round\" strokeMiterlimit=\"2.927\" strokeWidth=\"2.238\" d=\"M18 26.987v7.799l10.072-13.43L18 26.987Z\"/></svg>&nbsp;&nbsp;<span>EVM API</span></h3>\n    <p>Get NFT, token and transaction data from EVM chains.</p>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference and Configuration - JavaScript\nDESCRIPTION: This snippet imports the \"ApiReference\" component from the local documentation site folder and the JSON configuration for API references. These dependencies are required to dynamically generate API reference pages and display Moralis Web3 API data. No parameters are accepted; the imported objects are used elsewhere in the code for rendering.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-sale-prices.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n\n```\n\n----------------------------------------\n\nTITLE: Getting NFT Owners by Contract Address with Moralis in JavaScript\nDESCRIPTION: This code demonstrates how to fetch all owners of NFTs from a specific contract address using the Moralis EvmApi.nft.getNFTOwners method. It requires configuring Moralis with an API key and specifying both the NFT contract address and the blockchain (Ethereum in this example).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xd4e4078ca3495DE5B1d4dB434BEbc5a986197782\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTOwners({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: JSX Homepage Layout Component\nDESCRIPTION: React JSX component for the Moralis documentation homepage layout. Includes search functionality, popular API sections, and chain navigation. Uses custom cards and SVG icons for visual elements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div id=\"home\">\n    <div className=\"intro\">\n        <h1>Moralis Web3 Docs</h1>\n        <p>Build with ease across 30+ chains with our API references, guides, and tutorials.</p>\n        <SearchBar />\n        <div className=\"popular-searches\">\n            <div>Popular Searches</div>\n            <ul>\n                <li><a href=\"/web3-data-api/evm/reference/price/get-ohlcv-by-pair-address\">Get OHLCV Prices</a></li>\n                <li><a href=\"/web3-data-api/solana/reference/get-token-pairs-by-address\">Get Token Pairs</a></li>\n                <li><a href=\"/web3-data-api/evm/reference/get-swaps-by-token-address\">Get Token Swaps</a></li>\n                <li><a href=\"/web3-data-api/evm/reference/wallet-api/get-wallet-history\">Get Wallet History</a></li>\n                <li><a href=\"/web3-data-api/evm/reference/get-token-pair-stats\">Get Pair Stats</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Streams API Reference Using React - JavaScript\nDESCRIPTION: This snippet demonstrates how to import a custom ApiReference React component and a JSON configuration file to display the 'Delete Stream' API reference. The component is rendered with the relevant configuration for the stream deletion endpoint, allowing for dynamic API documentation. Required dependencies include React, the ApiReference component, and the specified JSON configuration; the input is the props spread from 'config.streams.DeleteStream', and the output is the rendered API reference UI.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/delete-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.streams.DeleteStream} />\n```\n\n----------------------------------------\n\nTITLE: Triggering Function Call on Page Load (JavaScript)\nDESCRIPTION: Adds an event listener to the window object in the frontend JavaScript. This listener waits for the 'load' event (indicating the page and its resources have finished loading) and then calls the previously defined `getBalance` function.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"load\", function () {\n  getBalance();\n});\n```\n\n----------------------------------------\n\nTITLE: EVM RPC Request: eth_feeHistory Parameters\nDESCRIPTION: Example parameters for eth_feeHistory RPC method including block count, newest block, and reward percentiles.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\"0x4\", \"latest\", [10, 20, 30]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Solana Dapp\nDESCRIPTION: Example of environment variables needed for the Solana Tic Tac Toe dapp, including chain ID, Moralis API key, and program ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAPP_CHAIN_ID=devnet\nAPP_DOMAIN=ethereum.boilerplate \nMORALIS_API_KEY= xxx\nNEXTAUTH_SECRET= # Linux: `openssl rand -hex 32` or go to https://generate-secret.now.sh/64\nNEXTAUTH_URL=http://localhost:3000\n\n# Required for signing game transactions\nOWNER_PRIVATE_KEY= xxx\n\nNEXT_PUBLIC_PROGRAM_ID = xxx \n```\n\n----------------------------------------\n\nTITLE: Generating Balances Component\nDESCRIPTION: Command to generate a new Angular component for displaying balances\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng generate component balances\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response\nDESCRIPTION: Sample response showing the native balance of the queried address in wei.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-balance-of-a-wallet.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"balance\": \"900051407680925461166\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing the ApiReference Component - JavaScript\nDESCRIPTION: This snippet imports the 'ApiReference' React component from the designated site path. It is a dependency for rendering dynamic API documentation within the page and expects configuration data as props. No external parameters are used beyond the import path; proper project setup is required to resolve aliases.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-domain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Supported Solana Chains - React - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the 'SolanaChainData' React component from a local project-relative path and render it within the documentation. The component, once rendered, displays information about Solana chains supported by the Moralis Web3 Data API. Dependencies include React and project-specific component modules. Usage assumes integration within a React/JSX compatible environment; no arguments are needed, and the rendered output is determined by the implementation of 'SolanaChainData'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SolanaChainData } from '@site/src/components/SupportedChains';\n\n<SolanaChainData/>\n```\n\n----------------------------------------\n\nTITLE: Embedding API Reference in JSX\nDESCRIPTION: This snippet uses JSX syntax to render the ApiReference component with specific configuration props for resolving an address to a domain. The config object should include the necessary properties, and this approach requires a React environment capable of processing JSX inside MDX or similar.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-address-to-domain.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.resolve.resolveAddressToDomain} />\n```\n\n----------------------------------------\n\nTITLE: Installing Particle Network Chains via yarn (Optional)\nDESCRIPTION: Optionally installs the `@particle-network/chains` package using yarn. It facilitates the management of different blockchain chains supported by Particle Connect.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-particle.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @particle-network/chains\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from Moralis API\nDESCRIPTION: Sample JSON response returned by the Moralis API when fetching wallet transactions. Shows transaction details including hash, addresses, value, gas info, and block details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": \"2000\",\n  \"page\": \"2\",\n  \"page_size\": \"100\",\n  \"result\": [\n    {\n      \"hash\": \"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e\",\n      \"nonce\": 326595425,\n      \"transaction_index\": 25,\n      \"from_address\": \"0xd4a3BebD824189481FC45363602b83C9c7e9cbDf\",\n      \"to_address\": \"0xa71db868318f0a0bae9411347cd4a6fa23d8d4ef\",\n      \"value\": 650000000000000000,\n      \"gas\": 6721975,\n      \"gas_price\": 20000000000,\n      \"input\": \"string\",\n      \"receipt_cumulative_gas_used\": 1340925,\n      \"receipt_gas_used\": 1340925,\n      \"receipt_contract_address\": \"0x1d6a4cf64b52f6c73f201839aded7379ce58059c\",\n      \"receipt_root\": \"string\",\n      \"receipt_status\": 1,\n      \"block_timestamp\": \"2021-04-02T10:07:54.000Z\",\n      \"block_number\": 12526958,\n      \"block_hash\": \"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Moralis Web3 API Reference - JavaScript/JSX\nDESCRIPTION: This code snippet imports the necessary React components for rendering the API reference documentation: 'ApiReference' for displaying endpoint details and 'config' providing configuration data for available API endpoints. It also imports an API banner component. The code assumes a documentation setup using Docusaurus or a similar React-based static site generator, and the 'config' object should contain endpoint-specific configuration such as 'nft.getNFTFloorPriceByToken'. Key dependencies include React and Moralis's configuration files.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-floor-price-by-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies (Bash/NPM)\nDESCRIPTION: Navigates into the 'frontend' directory (not shown in snippet, but implied by context) and installs necessary npm packages for the React application. Dependencies include 'axios' for making HTTP requests (to the backend API) and various '@web3uikit' packages for UI components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install axios @web3uikit/core @web3uikit/web3 @web3uikit/icons\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Table Structure for Token Security Score\nDESCRIPTION: Table showing the available API endpoints for token security and related operations, including wallet history, ERC20 transfers, pricing, and metadata retrieval\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/03-Token API/token-security-score-faqs.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                  | Endpoint                    | API Reference                                                                        |\n| ------------------------------------- | --------------------------- | ------------------------------------------------------------------------------------ |\n| Get Wallet History                    | `/wallets/:address/history` | [Method Documentation](/web3-data-api/evm/reference/wallet-api/get-wallet-history)   |\n| Get ERC20 Transfers by Wallet         | `/:address/erc20/transfers` | [Method Documentation](/web3-data-api/evm/reference/get-wallet-token-transfers)      |\n| Get ERC20 Transfers by Contract       | `/erc20/:address/transfers` | [Method Documentation](/web3-data-api/evm/reference/get-token-transfers)             |\n| Get ERC20 Price                       | `/erc20/:address/price`     | [Method Documentation](/web3-data-api/evm/reference/get-token-price)                 |\n| Get Multiple ERC20 Prices             | `/erc20/prices`             | [Method Documentation](/web3-data-api/evm/reference/get-multiple-token-prices)       |\n| Get Wallet Token Balances             | `/:address/erc20`           | [Method Documentation](/web3-data-api/evm/reference/get-wallet-token-balances)       |\n| Get Wallet Token Balances with Prices | `/wallets/{address}/tokens` | [Method Documentation](/web3-data-api/evm/reference/get-wallet-token-balances-price) |\n| Get ERC20 Metadata by Contract        | `/erc20/metadata`           | [Method Documentation](/web3-data-api/evm/reference/get-token-metadata)              |\n| Get ERC20 Metadata by Symbol          | `/erc20/metadata/symbols`   | [Method Documentation](/web3-data-api/evm/reference/get-token-metadata-by-symbol)    |\n```\n\n----------------------------------------\n\nTITLE: Defining Application URL Patterns in Django (Python)\nDESCRIPTION: This snippet defines the URL patterns specific to the `web3_auth` application within its own `urls.py` file. It maps URL paths like `moralis_auth`, `request_message`, `my_profile`, and `verify_message` to corresponding view functions (`views.moralis_auth`, etc.) defined in `views.py`. These routes handle different stages of the Moralis Web3 authentication process. Dependencies include `django.urls` and the app's `views` module.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nurls.py\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('moralis_auth', views.moralis_auth, name='moralis_auth'),\n    path('request_message', views.request_message, name='request_message'),\n    path('my_profile', views.my_profile, name='my_profile'),\n    path('verify_message', views.verify_message, name='verify_message')\n]\n```\n\n----------------------------------------\n\nTITLE: Package.json Start Script\nDESCRIPTION: Adding start script to package.json for running the application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"start\": \"node index.js\"\n},\n```\n\n----------------------------------------\n\nTITLE: Rendering NFT Wallet API Reference Callout - JSX (React with MDX)\nDESCRIPTION: This JSX/MDX snippet renders the API reference for the Get NFT transfers by wallet feature using the ApiReference component, passing the relevant configuration. It also displays a caution Admonition warning users about an upcoming query parameter removal, providing a link for further details. Key inputs are the config.nft.getWalletNFTTransfers object for the API spec and content for the Admonition; no specialized parameters are required beyond these.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/03-Get NFT Transfers/get-wallet-nft-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getWalletNFTTransfers}>\n  <Admonition type=\"caution\" icon=\"⚠️\" title=\"QUERY PARAMETER CHANGE\">\n    <p>\n      From the 4th September 2023, the <b>direction</b> query parameter will be removed. <a href=\"/changelog/essential-api-changes\">Read more here</a>.\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Chain Parameter Formatting Example\nDESCRIPTION: Example showing how to format chain identifiers for multi-chain searches using URL encoding.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/03-Token API/token-search-api-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nchains=eth%2Csolana%2Cpolygon\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Server Configuration\nDESCRIPTION: Basic Parse Server setup with database connection and server configuration parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ParseServer } from 'parse-server';\n\nexport const parseServer = new ParseServer({\n  databaseURI: config.DATABASE_URI, // Connection string for your MongoDB database\n  cloud: config.CLOUD_PATH, // Absolute path to your Cloud Code\n  appId: config.APPLICATION_ID, // Application ID\n  masterKey: config.MASTER_KEY, // Master key\n  serverURL: config.SERVER_URL, // Server URL\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component and Configuration in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and the configuration object for the API reference. It then renders the ApiReference component with the specific configuration for getting token metadata by symbol.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/01-Get Tokens/get-token-metadata-by-symbol.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.token.getTokenMetadataBySymbol} />\n```\n\n----------------------------------------\n\nTITLE: Fetching All NFTs using Moralis Wallet API in Python\nDESCRIPTION: This Python snippet demonstrates using the Moralis evm_api library to call the 'get_contract_nfts' endpoint and retrieve all NFTs from a collection. It requires installing the 'moralis' module and uses the 'json' package for pretty-printing the result. Key parameters include 'address', 'chain', and options like 'format', 'limit', and 'normalizeMetadata'. The script prints a properly formatted JSON string containing NFT metadata, suitable for further processing or inspection. Replace 'YOUR_API_KEY' with a valid Moralis API key before execution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-the-nfts-from-a-collection.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\nimport json\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    # \"totalRanges\": 0,\n    # \"range\": 0,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_contract_nfts(\n    api_key=api_key,\n    params=params,\n)\n\n# converting it to json because of unicode characters\nprint(json.dumps(result, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet NFTs Across Chains with Moralis SDK (JavaScript)\nDESCRIPTION: Initializes the Moralis SDK using an API key, defines a target wallet address and an array of EVM chains (Ethereum, BSC, Polygon). It then iterates through the chains, calling `Moralis.EvmApi.nft.getWalletNFTs` for each chain with the specified address, collects the responses in an array, and logs the aggregated results. Requires the `moralis` and `@moralisweb3/common-evm-utils` npm packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/01-NFT Balance/how-to-get-all-nfts-by-wallet-addresses.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Creation and Transaction Handling in Solana Dapp\nDESCRIPTION: TypeScript code for creating a new PDA account, initiating a transaction to create a blog post, and handling the transaction confirmation in the Solana Dapp frontend.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Refer full code in `src/components/templates/microBlog/MicroBlog.tsx`\n\n// `createBlog` function is triggered with a button click from frontend.\n  const createBlog = async () => {\n    // Account Creation --- Start\n    const SEED = 'secret_phrase_to_recover_account_address';\n    class BlogCount {\n      total_blogs = 0;\n      constructor(fields: { total_blogs: number } | undefined = undefined) {\n        if (fields) {\n          this.total_blogs = fields.total_blogs;\n        }\n      }\n    }\n    const BlogSchema = new Map([\n      [\n        BlogCount,\n        {\n          kind: 'struct',\n          fields: [['total_blogs', 'u32']],\n        },\n      ],\n    ]);\n    const DATA_SIZE = borsh.serialize(BlogSchema, new BlogCount()).length;\n    const accountPubkey = await PublicKey.createWithSeed(publicKey, SEED, new PublicKey(programId));\n    const blogAccount = await connection.getAccountInfo(accountPubkey);\n\n    if (blogAccount === null) {\n      const lamports = await connection.getMinimumBalanceForRentExemption(DATA_SIZE);\n      // Transaction for account creation\n      const AccountCreation = new Transaction();\n      AccountCreation.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: publicKey,\n          basePubkey: publicKey,\n          seed: SEED,\n          newAccountPubkey: accountPubkey,\n          lamports,\n          space: DATA_SIZE,\n          programId: new PublicKey(programId),\n        }),\n      );\n      const {\n        context: { slot: minContextSlot },\n        value: { blockhash, lastValidBlockHeight },\n      } = await connection.getLatestBlockhashAndContext();\n\n      const signature = await sendTransaction(AccountCreation, connection, {\n        minContextSlot,\n        skipPreflight: true,\n        signers: [],\n        preflightCommitment: 'processed',\n      });\n      const confirmtx = await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n    }\n    // Account Creation --- END\n\n    // Transaction to post a new blog\n    const transaction = new Transaction();\n    setStatus('Processing Transaction');\n    transaction.add(\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: accountPubkey,\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: publicKey,\n            isSigner: true,\n            isWritable: false,\n          },\n          {\n            pubkey: SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: new PublicKey(programId),\n        data: Buffer.from(blogInupt),\n      }),\n    );\n\n    const {\n      context: { slot: minContextSlot },\n      value: { blockhash, lastValidBlockHeight },\n    } = await connection.getLatestBlockhashAndContext();\n\n    try {\n      const signature = await sendTransaction(transaction, connection, {\n        minContextSlot,\n        skipPreflight: true,\n        signers: [],\n        preflightCommitment: 'processed',\n      });\n\n      const confirmtx = await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n      await connection.getParsedTransaction(signature);\n      getAllTransactions();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n// `getAllTransactions` function is invoked after a new blog is created,\n// and the new data processed and updated in the UI\n  const getAllTransactions = async () => {\n    const data = await connection.getSignaturesForAddress(new PublicKey(programId));\n  };\n```\n\n----------------------------------------\n\nTITLE: EvmChain Property Access\nDESCRIPTION: Demonstrates how to access various properties of an EvmChain instance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"decimal: \", chain.decimal);\n// decimal: 1\nconsole.log(\"hex: \", chain.hex);\n// hex: \"0x1\"\nconsole.log(\"hex: \", chain.format());\n// output depends on specified by default formatting type\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with ApiReference Component in JSX\nDESCRIPTION: This JSX snippet renders the `ApiReference` React component. It spreads properties from `config.streams.GetSettings` (loaded from an external JSON configuration file) as props to the component. This dynamically displays the specific API documentation for the Moralis Streams API `GetSettings` endpoint. It requires the `ApiReference` component and the `config` object to be imported.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/02-Project/get-settings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n# Get project settings\n\n<ApiReference {...config.streams.GetSettings} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for NFT Traits Query\nDESCRIPTION: This code snippet renders the ApiReference component, passing the configuration for the 'getNFTByContractTraits' endpoint. It displays the detailed API reference for querying NFTs by traits.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/09-Get NFT Traits and Rarity/get-nfts-by-traits.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTByContractTraits}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Creating New Solana Game Session API Handler\nDESCRIPTION: Backend API route handler that creates a new game session by generating game accounts and signing transactions. Takes player addresses as input and handles account creation and initialization on Solana blockchain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  Connection,\n  clusterApiUrl,\n  Keypair,\n  PublicKey,\n  Transaction,\n  SystemProgram,\n  sendAndConfirmTransaction,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport base58 from 'bs58';\nimport * as borsh from 'borsh';\nimport { GameAccount, GameAccountSchema } from 'components/templates/TicTacToe/types';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { OWNER_PRIVATE_KEY } = process.env;\n  const { player1, player2 } = req.body;\n\n  if (!OWNER_PRIVATE_KEY) {\n    throw new Error('Add Owner private key in env file.');\n  }\n  const key = Uint8Array.from(base58.decode(OWNER_PRIVATE_KEY));\n  const keypair = Keypair.fromSecretKey(key);\n  const { publicKey } = keypair;\n\n  const Player1 = player1;\n  const Player2 = player2;\n  const programId = process.env.NEXT_PUBLIC_PROGRAM_ID;\n  if (!programId) {\n    throw new Error('Add Program Id in env file.');\n  }\n  const connection = new Connection(clusterApiUrl('devnet'));\n\n  // Account Creation --- Start\n  const GAME_ACCOUNT_SECRET = `${player1.substring(0, 5)}${player2.substring(0, 5)}`;\n\n  const DATA_SIZE = borsh.serialize(GameAccountSchema, new GameAccount()).length;\n  console.log(DATA_SIZE);\n\n  const GameDataAccountPubkey = await PublicKey.createWithSeed(\n    publicKey,\n    GAME_ACCOUNT_SECRET,\n    new PublicKey(programId),\n  );\n\n  const GameDataAccount = await connection.getAccountInfo(GameDataAccountPubkey);\n\n  if (GameDataAccount === null) {\n    console.log('Creating account', GameDataAccountPubkey.toBase58(), 'to play Tic-Tac-Toe');\n\n    const lamports = await connection.getMinimumBalanceForRentExemption(DATA_SIZE);\n\n    const AccountCreation = new Transaction();\n    AccountCreation.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: publicKey,\n        basePubkey: publicKey,\n        seed: GAME_ACCOUNT_SECRET,\n        newAccountPubkey: GameDataAccountPubkey,\n        lamports,\n        space: DATA_SIZE,\n        programId: new PublicKey(programId),\n      }),\n    );\n    console.log('created AccountWithSeed', AccountCreation);\n    const {\n      context: { slot: minContextSlot },\n      value: { blockhash, lastValidBlockHeight },\n    } = await connection.getLatestBlockhashAndContext();\n\n    const signature = await sendAndConfirmTransaction(connection, AccountCreation, [keypair], {\n      minContextSlot,\n      skipPreflight: true,\n      preflightCommitment: 'processed',\n    });\n    const confirmtx = await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n    console.log({ signature, confirmtx });\n  }\n  // Account Creation --- END\n\n  const transaction = new Transaction();\n  transaction.add(\n    new TransactionInstruction({\n      keys: [\n        {\n          pubkey: GameDataAccountPubkey,\n          isSigner: false,\n          isWritable: true,\n        },\n        {\n          pubkey: new PublicKey(Player1),\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: new PublicKey(Player2),\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: publicKey,\n          isSigner: true,\n          isWritable: false,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      ],\n      programId: new PublicKey(programId),\n      data: Buffer.from([0, 0, 0]),\n    }),\n  );\n\n  const {\n    context: { slot: minContextSlot },\n    value: { blockhash, lastValidBlockHeight },\n  } = await connection.getLatestBlockhashAndContext();\n\n  try {\n    const signature = await sendAndConfirmTransaction(connection, transaction, [keypair], {\n      minContextSlot,\n      skipPreflight: true,\n      preflightCommitment: 'processed',\n    });\n\n    const confirmtx = await connection.confirmTransaction({ blockhash, lastValidBlockHeight, signature });\n    console.log({ signature, confirmtx });\n    const data = await connection.getParsedTransaction(signature);\n\n    res.status(200).json(data);\n  } catch (error) {\n    if (error instanceof Error) {\n      res.status(400).send(error.message);\n      console.error(error.message);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and API Configurations - JavaScript/TSX\nDESCRIPTION: Imports the ApiReference React component, used for rendering API endpoint documentation, and a configuration JSON file containing API settings. These imports are prerequisites for displaying structured references for the Moralis Web3 Data API. Ensures that the documentation page can access and render the correct endpoint details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-contract-sale-prices.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component in TypeScript for React\nDESCRIPTION: This snippet imports the ApiBanner React component from a TypeScript file. The component is intended to display API-related banners or notices in the documentation UI. The file extension '.tsx' indicates support for JSX syntax and TypeScript typing. The snippet requires the existence of the specified TypeScript React component file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/08- Get Wallet Details/get-wallet-stats.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Signin Component Logic (TypeScript)\nDESCRIPTION: Adds an empty asynchronous `handleAuth` function to the `signin` component's TypeScript file (`src/app/signin/signin.component.ts`). This function will later contain the logic for initiating the MetaMask authentication process.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nngOnInit(): void {}\n\nasync handleAuth() {}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Authentication Router\nDESCRIPTION: Express router and controller setup for handling authentication endpoints.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport { verify, request } from './authController';\n\nexport const authRouter = express.Router();\n\nauthRouter.route('/request-message').post(request);\nauthRouter.route('/sign-message').post(verify);\n```\n\n----------------------------------------\n\nTITLE: Deploying the Lambda Function to AWS\nDESCRIPTION: Command to deploy the Serverless project to AWS Lambda.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nserverless deploy\n```\n\n----------------------------------------\n\nTITLE: Identifying Charged Records in Moralis Webhook Headers (JSON)\nDESCRIPTION: This JSON snippet displays example headers from a Moralis Streams webhook. The `x-records-charged` field, shown here with a value of '20', indicates the total number of records (sum of txs, logs, and internal txs) included in the webhook payload for which compute units will be charged. Only webhooks for confirmed blocks (`confirmed:true`) will have a non-zero value here.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/records-and-pricing.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nheaders: {\n    'x-region': 'us-west-2',\n    'x-queue-size': '0',\n    'x-records-charged': '20',\n    'x-signature': '0xdf49163b5273b50a8da48e82b7254b45d81aeee9a02f1909a45d7aaea240e9c2',\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Yarn (bash)\nDESCRIPTION: This command starts the Next.js development server with hot-reloading, making the Moralis-based dapp accessible locally (default at http://localhost:3000). It enables active development and live testing of frontend components and contract integration functionality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/create-multichain-tokens.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n    yarn  run  dev\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK with npm\nDESCRIPTION: Installs the Moralis SDK using the npm package manager\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/partials/_install-moralis-sdk.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ${props.node}\n```\n\n----------------------------------------\n\nTITLE: Initializing API Key Check in Python\nDESCRIPTION: This snippet checks if the API key is set and raises a SystemExit if it's not.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif API_KEY == 'WEB3_API_KEY_HERE':\n    print(\"API key is not set\")\n    raise SystemExit\n```\n\n----------------------------------------\n\nTITLE: Initializing Protected Page Component in NextJS\nDESCRIPTION: Creates a basic React component for the protected page, displaying a heading for protected content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-gating-nextjs.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Protected() {\n    return (\n        <div>\n            <h3>Protected content</h3>\n        </div>\n    );\n}\nexport default Protected;\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Moralis and Next-Auth - Env\nDESCRIPTION: This .env.local file snippet contains the environment variables necessary for Moralis and Next-Auth integration in a NextJS project. Each variable configures a critical authentication domain, API key, app URL, and the secret used for JWT encryption. These must be added to your local environment before running or deploying your dapp.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAPP_DOMAIN=amazing.finance\\nMORALIS_API_KEY=xxxx\\nNEXTAUTH_URL=http://localhost:3000\\nNEXTAUTH_SECRET=7197b3e8dbee5ea6274cab37245eec212\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in React\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration file for the API reference. It then renders the ApiReference component with the specific configuration for the 'getWalletNFTs' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/01-Get NFTs/get-wallet-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.nft.getWalletNFTs} />\n```\n\n----------------------------------------\n\nTITLE: Importing a React Component Using ES6 Import Syntax - JavaScript\nDESCRIPTION: This snippet uses ES6 import syntax to bring the BreakingChanges React component from a local module path into the current file. It depends on a module resolution system compatible with Node.js and React, such as in a Docusaurus site. No parameters are passed at import time. This line must be placed at the top level of a JavaScript or JSX file and is required to use the BreakingChanges component in the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/breaking-changes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BreakingChanges from \"@site/src/components/BreakingChanges\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Reference Component with NFT Config (React, JavaScript)\nDESCRIPTION: This snippet imports a React component ('ApiReference') and a configuration object from JSON, then renders the component with the 'reSyncMetadata' configuration for NFTs. Dependencies include React, the ApiReference component, and the appropriate JSON config file. The key parameter is 'config.nft.reSyncMetadata', which specifies the API endpoint being referenced; input is configuration data and the output is dynamic API documentation rendered on the page. This pattern ensures that documentation can stay modular and synced with backend API definitions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/02-Get NFT Metadata/re-sync-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.nft.reSyncMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration in React JavaScript\nDESCRIPTION: This snippet imports the APIReference React component, responsible for rendering API documentation blocks, and a JSON configuration file defining API reference behavior. Both imports are prerequisites for rendering the API documentation and illustrate a common approach in modular JavaScript documentation sites to decouple configuration from presentational components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/get-streams.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: React JSX API Reference Component\nDESCRIPTION: JSX code for rendering the API reference documentation using the ApiReference component with configuration and info admonition.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/eth_getDecodedTransactions.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.rpc.eth_getDecodedTransactions} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Top NFT Collections Market Cap Query - JSON\nDESCRIPTION: This snippet displays a representative JSON output structure after querying the top NFT collections by market cap from the Moralis Market Data API. The response includes lists for both \\'gainers\\' and \\'losers\\', each containing details such as rank, token name, symbol, contract address, price updates, and market cap values. Clients should expect equivalent structures in their actual API responses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-market-cap.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gainers\": [\n    {\n      \"rank\": \"1\",\n      \"token_name\": \"Wrapped Ether\",\n      \"token_symbol\": \"WETH\",\n      \"token_logo\": \"https://assets.coingecko.com/coins/images/2518/large/weth.png?1595348880\",\n      \"token_decimals\": \"18\",\n      \"contract_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n      \"price_usd\": \"0.0285\",\n      \"price_24h_percent_change\": \"0.0285\",\n      \"price_7d_percent_change\": \"0.0285\",\n      \"market_cap_usd\": \"0.0285\"\n    }\n  ],\n  \"losers\": [\n    {\n      \"rank\": \"1\",\n      \"token_name\": \"Wrapped Ether\",\n      \"token_symbol\": \"WETH\",\n      \"token_logo\": \"https://assets.coingecko.com/coins/images/2518/large/weth.png?1595348880\",\n      \"token_decimals\": \"18\",\n      \"contract_address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n      \"price_usd\": \"0.0285\",\n      \"price_24h_percent_change\": \"0.0285\",\n      \"price_7d_percent_change\": \"0.0285\",\n      \"market_cap_usd\": \"0.0285\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Native Balance with JavaScript\nDESCRIPTION: JavaScript implementation to fetch native balance of an ERC20 token vault using Moralis API. Requires Moralis and common-evm-utils packages. Takes address and chain as parameters and returns the balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-vault.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async() => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  // address of ERC20 token vault, e.g. WETH token address\n  const address = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n}\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Switching to Latest Stable Version\nDESCRIPTION: Command to checkout the latest stable version of ElizaOS using git tags.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/02-building-with-eliza-os.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout $(git describe --tags --abbrev=0)\n\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in React/JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration file for the API reference. It then renders the ApiReference component with the configuration for the 'getMultipleNFTs' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/01-Get NFTs/get-multiple-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.nft.getMultipleNFTs} />\n```\n\n----------------------------------------\n\nTITLE: Rendering NFT Metadata API Reference (JavaScript/JSX)\nDESCRIPTION: Embeds the ApiReference component configured to show the getNFTMetadata API operation details from the Moralis configuration object. This is used within a documentation page to dynamically render interactive API docs. The component expects the config object to have an nft.getNFTMetadata key, and it outputs a fully interactive API reference UI.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/02-Get NFT Metadata/get-nft-metadata.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.nft.getNFTMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Project via CLI (Shell)\nDESCRIPTION: Deploys the configured Firebase project features (like Hosting files and Cloud Functions) from the local development environment to the live Firebase cloud infrastructure. Requires the Firebase CLI to be installed, authenticated, and configured for the target project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Home Page for Wallet Sign-In - JavaScript\nDESCRIPTION: This Home page in JavaScript/JSX triggers wallet authentication and handles routing based on session state. It imports and uses Next.js's router, Moralis WalletAdaptor, useSession, web3uikit Typography, and custom styles. The page conditionally displays the wallet sign-in component or a loading indicator, managing user authentication UI and navigation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-wallet-provider.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useTransition } from \\\"react\\\";\nimport styles from \\\"../styles/Home.module.css\\\";\nimport { useRouter } from \\\"next/router\\\";\nimport { Typography } from \\\"@web3uikit/core\\\";\nimport { useSession } from \\\"next-auth/react\\\";\nimport WalletAdaptor from \\\"../app/components/loginBtn/walletAdaptor\\\";\n\nexport default function Home() {\n  const router = useRouter();\n  const { data: session, status } = useSession();\n  const [isPending, startTransition] = useTransition();\n\n  useEffect(() => {\n    startTransition(() => {\n      session && status === \\\"authenticated\\\" && router.push(\\\"./user\\\");\n    });\n  }, [session, status]);\n\n  useEffect(() => {\n    startTransition(() => {\n      session && console.log(session);\n    });\n  }, [session]);\n\n  return (\n    <div className={styles.body}>\n      {!isPending && (\n        <div className={styles.card}>\n          <>\n            {!session ? (\n              <>\n                <Typography variant=\\\"body18\\\">\\n                  Select Wallet for Authentication\\n                </Typography>\n                <br />\n                <WalletAdaptor />\n              </>\n            ) : (\n              <Typography variant=\\\"caption14\\\">Loading...</Typography>\n            )}\n          </>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering EVMChainData Component in MDX/JSX\nDESCRIPTION: Renders the previously imported `EVMChainData` component within the MDX page using JSX syntax. This executes the component's logic, likely fetching or referencing predefined data, to insert the dynamically generated list or table of supported EVM chains into the final rendered document.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/01-overview.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EVMChainData/>\n```\n\n----------------------------------------\n\nTITLE: Rendering eth_chainId API Reference using Docusaurus React Components (JavaScript/JSX)\nDESCRIPTION: This code block utilizes a custom React component (ApiReference) to render documentation for the eth_chainId RPC method. It spreads configuration properties sourced from a JSON file, enabling dynamic population of endpoint details. The component includes an information admonition, presented via another React component, Admonition, for highlighting important notes, such as schema references. Dependencies include a Docusaurus environment with React support, the associated components, and configuration files. Inputs are provided through the config object, and output is a rendered documentation section with references and tips.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_chainId.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.rpc.eth_chainId} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Multiple NFTs in React (JavaScript)\nDESCRIPTION: This snippet renders the 'ApiReference' React component, spreading in configuration specific to the 'getMultipleNFTs' endpoint. It assumes a React environment and a valid configuration object from the imported JSON file. All properties of config.nft.getMultipleNFTs are passed as props, displaying relevant documentation dynamically for developers integrating NFT querying features.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/01-Get NFTs/get-multiple-nfts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.nft.getMultipleNFTs} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction by Hash via Moralis API URL\nDESCRIPTION: API endpoint URL for fetching a specific transaction's details using its hash. Corresponds to the `getTransactionByHash` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/blockchain-api.md#2025-04-23_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/transaction/:transaction_hash\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with ApiReference Component (JSX)\nDESCRIPTION: Uses the imported `ApiReference` React component in JSX syntax to render API documentation. It passes specific configuration data for the 'getContractNFTs' endpoint (accessed via `config.nft.getContractNFTs`) as props to the component, which then displays the detailed API reference.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/01-Get NFTs/get-contract-nfts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getContractNFTs} />\n```\n\n----------------------------------------\n\nTITLE: API Reference Markdown Structure\nDESCRIPTION: Markdown structure defining the documentation layout and organization of Moralis Web3 API reference, including frontmatter metadata and categorized endpoint listings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Web3 Data API - EVM API Reference\"\nsidebar_label: \"API Reference\"\nsidebar_position: 1000\nslug: \"/web3-data-api/evm/reference\"\ndescription: \"Get started on Moralis Enterprise-Grade Web3 API Reference.\"\nsidebar_class_name: \"sidebar-api-reference\"\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button Component\nDESCRIPTION: Simple React component that provides logout functionality using NextAuth's signOut method\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport { Button } from \"@web3uikit/core\";\nimport { signOut } from \"next-auth/react\";\n\nexport default function LogoutBtn() {\n  return (\n    <Button text=\"Logout\" theme=\"outline\" onClick={() => signOut()}></Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering EVM Native Balances API Reference with React Component (JSX)\nDESCRIPTION: This JSX snippet renders the API reference documentation for the 'getNativeBalancesForAddresses' endpoint. It imports the `ApiReference` component and a configuration object (`config`), then passes the specific configuration section (`config.balance.getNativeBalancesForAddresses`) as props to the component using the spread syntax (`...`). The `ApiReference` component is responsible for displaying the detailed API information based on the provided configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/02-Get Wallet Token Balances/get-native-balances-for-addresses.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.balance.getNativeBalancesForAddresses} />\n```\n\n----------------------------------------\n\nTITLE: Pausing a Stream via HTTP POST Request - Curl\nDESCRIPTION: Uses a curl command to directly call the Moralis API endpoint to update the status of a stream. Sends a POST request to the stream status endpoint, passing the desired status in the JSON body. Requires setting the 'x-api-key' in the request header and providing the correct STREAM_ID and API key. Content-Type header must be 'application/json'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/stream-management.md#2025-04-23_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X 'POST'\n  '<https://api.moralis-streams.com/streams/evm/STREAM_ID/status>'\n  -H 'accept: application/json'\n  -H 'x-api-key: YOUR_API_KEY'\n  -H 'Content-Type: application/json'\n  -d '{\"status\": \"paused\"}'\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component in TypeScript\nDESCRIPTION: This snippet imports the ApiBanner component written in TypeScript, which is likely used to display a standard announcement or notification banner in the documentation. The component must exist at the referenced path and be compatible with React and TypeScript syntax.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-address-to-domain.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance of an ERC20 Vault in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to get the native balance of a specified ERC20 token vault address. It initializes Moralis with an API key, defines the target address (e.g., WETH contract) and the chain (Ethereum), then calls `Moralis.EvmApi.balance.getNativeBalance` and logs the JSON response containing the balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-vault.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  // address of ERC20 token vault, e.g. WETH token address\n  const address = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n}\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Reading Properties of EvmAddress Instances - Moralis SDK - JavaScript\nDESCRIPTION: Retrieves formatted address representations from an EvmAddress instance, such as the all-lowercase form and checksum address, as well as formatted output via the format() method. Facilitates conversion and validation of address input within applications. Expects address to be an EvmAddress object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"lowercase: \", address.lowercase);\n// lowercase: \"0xa9c4c85dd0495e32d08ef64d51fdeb35d200edfe\"\nconsole.log(\"checksum: \", address.checksum);\n// checksum: \"0xa9C4c85DD0495E32D08EF64d51fDEB35D200EDfe\"\nconsole.log(\"checksum: \", address.format());\n// output depends on specified by default formatting type\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js API Server (Shell)\nDESCRIPTION: Runs the Express.js server using the npm start script. Requires package.json with the appropriate script and all dependencies installed. No parameters needed. Starts the backend API to enable frontend/API integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Connecting to MetaMask\nDESCRIPTION: JavaScript function to connect to MetaMask wallet\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst connectToMetamask = async () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n\n  const [accounts, chainId] = await Promise.all([\n    provider.send('eth_requestAccounts', []),\n    provider.send('eth_chainId', []),\n  ]);\n\n  const signer = provider.getSigner();\n  return { signer, chain: chainId, account: accounts[0] };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Config in JavaScript/React\nDESCRIPTION: This code snippet imports required components and configuration files for a Docusaurus documentation page, specifically bringing in the ApiReference and Admonition React components, a Link component for routing, and a JSON configuration used to render API documentation. Dependencies include Docusaurus, React, and custom configuration files. These imports enable subsequent rendering of documentation elements, but do not produce any direct output themselves.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/13-Blockchain API/02-Get Transactions/get-wallet-transactions-verbose.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands for cloning the project repository and installing dependencies using yarn\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd bridge-existing-ERC20-token-with-ITS && yarn install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Frontend Data Parsing with React UseEffect\nDESCRIPTION: Implementation of useEffect hook to filter and process table data for blockchain transactions\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  const filteredDestChain = selectedDestChain.filter((item) => !(item.chainName === '' && item.chainId === 0));\n  setSubmittedDestChain(filteredDestChain);\n\n  const filteredTokens = selectedToken.filter((item) => !(item === undefined));\n  setSubmittedToken(filteredTokens);\n\n  const filteredReceiverAddrs = receiverAddrs\n    .filter((item) => !(item === ''))\n    .flatMap((item) => item.split(','))\n    .map((address) => address.trim());\n\n  setSubmittedReceiverAddrs(filteredReceiverAddrs);\n}, [selectedDestChain, selectedToken, receiverAddrs]);\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Token Balance with Moralis API - JavaScript\nDESCRIPTION: Defines the '/nativeBalance' GET endpoint to fetch the native blockchain token balance and its USD value using Moralis SDK. Requires valid MORALIS_API_KEY in .env and expects 'address' and 'chain' as query parameters. Outputs the token balance with computed USD price. Handles errors by sending the error object. Limitations: Only supports chains explicitly mapped to nativeCurrency addresses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//GET AMOUNT AND VALUE OF NATIVE TOKENS\n\napp.get(\"/nativeBalance\", async (req, res) => {\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const { address, chain } = req.query;\n\n    const response = await Moralis.EvmApi.balance.getNativeBalance({\n      address: address,\n      chain: chain,\n    });\n\n    const nativeBalance = response.data;\n\n    let nativeCurrency;\n    if (chain === \"0x1\") {\n      nativeCurrency = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n    } else if (chain === \"0x89\") {\n      nativeCurrency = \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\";\n    }\n\n    const nativePrice = await Moralis.EvmApi.token.getTokenPrice({\n      address: nativeCurrency, //WETH Contract\n      chain: chain,\n    });\n\n    nativeBalance.usd = nativePrice.data.usdPrice;\n\n    res.send(nativeBalance);\n  } catch (e) {\n    res.send(e);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using ApiReference Component with Spread Configuration (MDX/JSX)\nDESCRIPTION: This MDX/JSX snippet renders the 'ApiReference' component and passes the Solana 'getGraduatedTokensByExchange' configuration as props using the spread operator. This enables dynamic rendering of endpoint reference details directly within the documentation page. The snippet expects the configuration object (config.solana.getGraduatedTokensByExchange) structure to conform to the ApiReference component's prop requirements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Pump Fun Tokens/03-get-graduated-tokens-by-exchange.md#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<ApiReference {...config.solana.getGraduatedTokensByExchange} />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Documentation Card List in React/JSX\nDESCRIPTION: This JSX snippet renders the `DocCardList` component. When used within a compatible documentation framework (like Docusaurus), this component typically displays a grid or list of cards, each linking to a document within the current documentation section or category, based on the site's configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/tutorials.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Embedding Moralis API Reference Using Configuration (JSX)\nDESCRIPTION: This snippet renders the ApiReference React component, passing in a configuration object that points to the 'getDefiPositionsSummary' endpoint of the Moralis Web3 API. This connects the documentation UI to a dynamic, configuration-driven representation of the API reference content. The configuration file must contain a 'token.getDefiPositionsSummary' path, and the component expects all required fields for rendering the documentation UI accordingly.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/defi-api/01-Get Wallet DeFi Positions/get-defi-positions-summary.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getDefiPositionsSummary} />\n```\n\n----------------------------------------\n\nTITLE: Installing Particle Connect React UI via yarn\nDESCRIPTION: Installs the `@particle-network/connect-react-ui` package using yarn. This package is required for the React UI components used in the Particle Connect integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-particle.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @particle-network/connect-react-ui\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Request to Moralis EVM API using cURL\nDESCRIPTION: Example of how to make an authenticated GET request to the Moralis API using an API key in the X-API-Key header. This example retrieves block information including internal transactions for a specific block number on the Ethereum chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/00-General FAQs/01-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url 'https://deep-index.moralis.io/api/v2.2/block/15863321?chain=eth&include=internal_transactions' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component in TypeScript\nDESCRIPTION: Imports the ApiBanner component written in TypeScript with explicit filename extension. This component is likely used to show informative banners at the top of API documentation pages and expects to receive props consistent with its typing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-wallet-nft-transfers.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with React Component (JSX)\nDESCRIPTION: This JSX snippet utilizes the `ApiReference` React component to display API documentation. It passes configuration details for the specific 'getTokenTransfers' endpoint (likely containing parameters, responses, etc.) sourced from a `config` object, which is imported from a JSON file. This approach allows for dynamic generation of API documentation sections within the documentation website.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/04-Get Transfers/get-token-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getTokenTransfers} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component in Docusaurus - JavaScript (JSX)\nDESCRIPTION: This snippet imports the DocCardList React component from a theme package and renders it within the page. The purpose is to dynamically generate a list of documentation cards, providing navigation to subtopics or articles within the 'Webhooks' section. This is used in Docusaurus-powered documentation sites and assumes Docusaurus and its theme modules are installed. No parameters are needed; the DocCardList automatically populates based on the current documentation structure. The code must be placed within a Markdown (.mdx) document context for proper execution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/webhooks.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript (JSX)\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in JSX\nDESCRIPTION: This snippet imports the ApiReference component and a configuration file for the API reference. It then renders the ApiReference component with the specific configuration for the getNFTLowestPrice endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/06-Get NFT Market Data/get-nft-lowest-price.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.nft.getNFTLowestPrice} />\n```\n\n----------------------------------------\n\nTITLE: Adding Moralis Using Statements in ASP.NET Core (C#)\nDESCRIPTION: This snippet adds essential using statements to enable Moralis authentication integration in an ASP.NET Core controller. It prepares the file to use Moralis core, authentication API models, networking, and Web3 API models. No specific inputs or outputs, but these usings are prerequisites for all subsequent authentication logic.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Moralis;\nusing Moralis.AuthApi.Models;\nusing Moralis.Network;\nusing Moralis.Web3Api.Models;\n```\n\n----------------------------------------\n\nTITLE: Importing React Component and JSON Configuration in JavaScript\nDESCRIPTION: This snippet imports the ApiReference React component from a local path and a JSON configuration file. These imports are prerequisites for embedding dynamic API documentation within the Markdown file. The snippet relies on the Docusaurus project setup, with appropriate file paths to the component and config.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/01-Get NFTs/get-contract-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Theme Colors with CSS Custom Properties (CSS)\nDESCRIPTION: This CSS snippet defines custom properties (variables) for theming and color consistency across the application. It is meant to be included in a global stylesheet and works with Tailwind CSS for dark mode and custom theming. Variables control backgrounds, text colors, border, and semantic highlights, ensuring a unified look and allowing for easy theme changes or extensions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/dexscreener-clone.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n:root {\\n  --color-bg-primary: #0e1118;\\n  --color-bg-secondary: #141722;\\n  --color-bg-tertiary: #1e2330;\\n  --color-bg-highlight: #252b3b;\\n  --color-text-primary: #fff;\\n  --color-text-secondary: #8a94a8;\\n  --color-text-tertiary: #636d83;\\n  --color-border: #2c3344;\\n  --color-green: #16c784;\\n  --color-red: #ea3943;\\n  --color-blue: #4878ff;\\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Name using Python\nDESCRIPTION: Python implementation for reverse resolving an ENS name from an Ethereum address using Moralis API. Requires the moralis package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-name.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n  \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n}\n\nresult = evm_api.resolve.resolve_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Uniswap V3 Pair Address Query\nDESCRIPTION: Illustrates the JSON structure returned by the Moralis `getPairAddress` endpoint for a Uniswap V3 pool. It includes detailed information about both tokens in the pair (like address, name, symbol, decimals) and the calculated `pairAddress` for the liquidity pool. This is the expected output format from the API call.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-uniswap-v3-pair-address.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"token0\": {\n    \"address\": \"0x514910771af9ca656af840dff83e8264ecf986ca\",\n    \"name\": \"Chain Link\",\n    \"symbol\": \"LINK\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca.webp\",\n    \"logo_hash\": \"fd74ea1227adb458733847c09aab05d89c35c14b640c5ee1e0a8bffa79193eb4\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  \"token1\": {\n    \"address\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"name\": \"Wrapped Ether\",\n    \"symbol\": \"WETH\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.webp\",\n    \"logo_hash\": \"0a7fc292596820fe066ce8ce3fd6e2ad9d479c2993f905e410ef74f2062a83ec\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  \"pairAddress\": \"0xa6cc3c2531fdaa6ae1a3ca84c2855806728693e8\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK\nDESCRIPTION: TypeScript code to initialize Moralis SDK with API key\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from 'moralis';\n\nMoralis.start({\n  apiKey: 'your_api_key_here',\n});\n```\n\n----------------------------------------\n\nTITLE: Angular Router Outlet Template - HTML\nDESCRIPTION: Defines the router outlet in the Angular root component HTML file, allowing routing and dynamic view injection based on Angular routes. This element is essential for enabling navigation between different Angular pages or components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<router-outlet></router-outlet>\n```\n\n----------------------------------------\n\nTITLE: Initializing AuthenticationController in C# for Moralis Auth\nDESCRIPTION: Sets up the basic structure of the AuthenticationController class, including necessary using statements and class attributes for API routing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-csharp-dot-net.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Mvc;\nusing Moralis;\nusing Moralis.AuthApi.Models;\nusing Moralis.Network;\nusing Moralis.Web3Api.Models;\n\nnamespace MoralisDemo.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class AuthenticationController : ControllerBase\n    {\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing EVMChainData React Component for Documentation (JavaScript)\nDESCRIPTION: This code snippet imports the EVMChainData React component into the Markdown documentation file. The component is likely used for rendering a dynamic list or table of supported EVM chains. Usage of this import expects the documentation platform to support React components (such as Docusaurus). No parameters are passed and the effect of the component will only be visible in the rendered page context. The dependency is '@site/src/components/SupportedChains'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/blockchain-api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EVMChainData } from '@site/src/components/SupportedChains';\n```\n\n----------------------------------------\n\nTITLE: Initializing State and Handling User Input in React (TypeScript)\nDESCRIPTION: This snippet shows the initialization of state variables for search input and results, and the input handler function for the search bar.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-explorer.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst [searchInput, setSearchInput] = useState('');\nconst [searchResult, setSearchResult] = useState([]);\n\nconst inputHandler = (e) => {\n  const Text = e.target.value;\n  setSearchInput(Text);\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying API Banner (React/JSX)\nDESCRIPTION: Renders the imported `ApiBanner` React component. This instance of the component displays the banner content within the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/07-Get Wallet Net-worth/get-wallet-net-worth.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiBanner />\n```\n\n----------------------------------------\n\nTITLE: Creating POST Route for Signature Verification in Express.js\nDESCRIPTION: Implements a POST endpoint that calls the verify function to validate a signed message. The endpoint expects message and signature parameters in the request body to authenticate the user.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/verify\", async (req, res) => {\n    try {\n      const data = await verify(req.body.message, req.body.signature)\n      res.status(200)\n      res.json(data)\n \n    } catch (error) {\n      // Handle errors\n      console.error(error)\n      res.status(500)\n      res.json({ error: error.message })\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Moralis API Reference Components in React (JavaScript/JSX)\nDESCRIPTION: This snippet demonstrates how to import core configuration and documentation components for a Moralis Web3 Data API reference page using React. It brings in multiple modules, including the ApiReference, Admonition, ReactMarkdown, and a configuration file. The dependencies are React and several site-specific components. Inputs relate to the specific configuration file and will render and compose the API documentation dynamically for usage by developers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/10-Get Wallet PnL/get-wallet-profitability-summary.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Configuration - JavaScript\nDESCRIPTION: This snippet imports a JSON configuration object containing API endpoint details from a specific path within the project structure. The imported configuration is later used as props for the ApiReference component. This requires the '../../../../../configs/api-reference/configs.json' file to be present and accessible within the project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-nft-contract-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReference and Admonition Components in Docusaurus - JavaScript/JSX\nDESCRIPTION: This snippet imports custom React components (ApiReference, Admonition, Link) and a configuration JSON for use in a Docusaurus MDX file. These imports enable embedding interactive reference UI and callout boxes within documentation pages. It depends on the project structure having the specified components and configs; key parameters include the config object and imported components. Inputs are React usage within MDX, and the output is a rendered documentation section with embedded dynamic content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/eth_getTokenMetadata.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Solana Volume Stats Documentation\nDESCRIPTION: Renders the ApiReference component with configuration for the Solana getVolumeStatsByChain endpoint to display the API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Volume Stats/get-volume-stats-by-chain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getVolumeStatsByChain} />\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX - JavaScript/JSX\nDESCRIPTION: This snippet renders the DocCardList React component, which displays a list of documentation cards on the page. The component is used without props or children in this context and is intended to be used within a Docusaurus page or layout. No additional dependencies are required beyond Docusaurus itself. The output is the list of documentation previews and links for end-users.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/getting-started/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Content in TypeScript\nDESCRIPTION: TypeScript implementation for fetching block content using Moralis Block API. Provides type safety while using the getBlock endpoint to retrieve block data from the Ethereum network.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-content-by-block-number.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const blockNumberOrHash = \"15863321\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getBlock({\n    blockNumberOrHash,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Applying Core App Styles (App.css) - CSS\nDESCRIPTION: This snippet provides the main CSS styles for the React portfolio application. It includes styles for layout, header, titles, wallet inputs, content areas, wallet info, total value display, tab headings, filters, NFT info cards, and NFT lists. These styles customize the appearance and layout of the Web3 app, ensuring a responsive and modern UI. The file should be saved as src/App.css and will be loaded by importing it in App.js. There are no parameters; styles are applied globally and via class names. Key dependencies are React and usage of matching class names in components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  text-align: left;\n  min-height: 100vh;\n}\n\n.header {\n  height: 80px;\n  width: calc(100vw - 100px);\n  display: flex;\n  justify-content: flex-start;\n  background-color: rgb(33, 33, 38);\n  border-bottom: 1px solid rgb(121, 121, 121);\n  padding: 5px 50px;\n  align-items: center;\n}\n\n.title {\n  display: flex;\n  height: 60px;\n  align-items: center;\n  gap: 25px;\n}\n\n.walletInputs {\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n  align-items: center;\n  gap: 25px;\n}\n\n.content {\n  height: 100%;\n  margin: 0;\n  padding: 100px;\n  background: linear-gradient(180deg, rgba(142, 211, 182, 0.3) 0%, rgba(36,20,0,0) 50%);\n}\n\n.walletInfo {\n  display: flex;\n  justify-content: space-between;\n}\n\n.totalValue {\n  width: 350px;\n  height: 150px;\n  padding: 10px 30px; \n  border-radius: 20px;\n  background-color: rgba(33, 33, 38, 0.6);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.tabHeading {\n  font-size: 30px;\n  font-weight: bold;\n  margin: 20px 0px;\n  align-items: center;\n  display: flex;\n  gap: 20px;\n}\n\n.filters {\n  display: flex;\n  gap: 20px;\n  margin: 30px 0px;\n}\n\n.nftInfo {\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  color: white;\n  gap: 5px;\n  background-color: rgb(42, 42, 47);\n  border-radius: 5px;\n  padding: 10px;\n}\n\n.nftList {\n  display: flex;\n  justify-content: flex-start;\n  gap: 40px;\n  flex-wrap: wrap;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Collection Trading Volume via Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates the process of retrieving the top NFT collections by trading volume using the Moralis SDK. It imports the necessary modules, initializes Moralis with the API key, and calls getHottestNFTCollectionsByTradingVolume from EvmApi. The raw result is logged to the console. Requires moralis and @moralisweb3/common-evm-utils TypeScript packages and a valid API key. Input is handled internally; output is the raw API response object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/market-data-api/how-to-get-the-top-nft-collections-by-trading-volume.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response =\n    await Moralis.EvmApi.marketData.getHottestNFTCollectionsByTradingVolume();\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and API Configurations - JavaScript\nDESCRIPTION: This snippet imports the ApiReference React component and a Solana API configuration JSON for rendering the API documentation. Dependencies include the Moralis documentation codebase and the presence of the referenced JSON file. The imports are required for setting up the context and data for displaying the API reference component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/09-Balance API/sol-balance.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Running ngrok for Local Tunnel\nDESCRIPTION: Creates an ngrok tunnel to the local Express app running on port 5001.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nngrok http 5001\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration file for the API reference. It then renders the ApiReference component with the configuration for the Solana balance endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/wallet-api/sol-balance.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n\n<ApiReference {...config.solana.balance} />\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Configuration for API Reference (JavaScript)\nDESCRIPTION: This snippet imports a custom React component (ApiReference) for rendering API documentation sections, along with a JSON configuration file containing endpoint specifications. The imported component is likely used to display interactive or dynamically generated API reference material within the documentation page. The imports rely on Docusaurus's project structure and alias mapping, requiring proper setup for module resolution.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/add-address-to-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: NextJS Script Configuration\nDESCRIPTION: Adds NextJS development and build scripts to package.json\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"lint\": \"next lint\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Reference Component\nDESCRIPTION: React/JSX code that imports an API reference component and configuration, then renders documentation for the EVM challenge request endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/reference/02-Challenge/request-challenge-evm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.auth.requestChallengeEvm} />\n```\n\n----------------------------------------\n\nTITLE: Balances Component Template\nDESCRIPTION: HTML template for displaying wallet address and balances\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <h3>Wallet: {{ address }}</h3>\n  <h3>Native Balance: {{ nativeBalance }} ETH</h3>\n  <h3>Token Balances: {{ tokenBalances }}</h3>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing GameSparks Cloud Code Definitions via JSON - JSON\nDESCRIPTION: This JSON file defines Amazon GameSparks cloud code components, including request handlers, request/response model shapes, and connections to specific AWS Lambda functions. It enables rapid import and deployment of backend logic by describing two request handlers (GetNativeBalance, GetWalletNfts), their required request/response schemas, and the core Lambda invocation logic to be executed in the cloud. To deploy, upload this file through the GameSparks console 'Snapshot Import' feature; valid AWS Lambda function names and structured request parameters are required for correct operation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/aws-gamesparks-integration-with-unity.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Document\" : {\n    \"Type\" : \"Game\",\n    \"Sections\" : {\n      \"GameSparks.Core.RequestHandlers\" : {\n        \"GetNativeBalance\" : {\n          \"Code\" : {\n            \"Script\" : \"const response = GameSparks().Lambda(\\\"aws-node-project-dev-getNativeBalance\\\").Invoke(\\r\\n    {\\r\\n      // Example of how you would send a parameter to Lambda\\r\\n      \\\"address\\\": message.address,\\r\\n      \\\"chain\\\": message.chain\\r\\n    }\\r\\n);\\r\\n\\r\\nGameSparks().Logging().Debug(\\\"Result from Lambda is:\\\");\\r\\nGameSparks().Logging().Debug(JSON.stringify(response.Payload));\\r\\n\\r\\nreturn GameSparks().Messaging().Response({\\\"result\\\": parseFloat(response.Payload.result)});\",\n            \"ScriptLanguage\" : \"Javascript_ES5_1\"\n          },\n          \"Enabled\" : true,\n          \"Description\" : \"\"\n        },\n        \"GetWalletNfts\" : {\n          \"Code\" : {\n            \"Script\" : \"const response = GameSparks().Lambda(\\\"aws-node-project-dev-getWalletNfts\\\").Invoke(\\r\\n    {\\r\\n      \\\"address\\\": message.address,\\r\\n      \\\"chain\\\": message.chain\\r\\n    }\\r\\n);\\r\\n\\r\\nGameSparks().Logging().Debug(\\\"Result from Lambda is:\\\");\\r\\n\\r\\nreturn GameSparks().Messaging().Response({\\\"result\\\": response.Payload.result});\",\n            \"ScriptLanguage\" : \"Javascript_ES5_1\"\n          },\n          \"Enabled\" : true,\n          \"Description\" : \"\"\n        }\n      },\n      \"GameSparks.Core.Requests\" : {\n        \"GetNativeBalance\" : {\n          \"AllowedSources\" : [ \"Player\" ],\n          \"RequestShape\" : \"GetNativeBalanceRequest\",\n          \"ResponseShape\" : \"GetNativeBalanceResponse\",\n          \"Description\" : \"\"\n        },\n        \"GetWalletNfts\" : {\n          \"AllowedSources\" : [ \"Player\" ],\n          \"RequestShape\" : \"GetWalletNftsRequest\",\n          \"ResponseShape\" : \"GetWalletNftsResponse\",\n          \"Description\" : \"\"\n        }\n      },\n      \"GameSparks.Core.Model\" : {\n        \"GetNativeBalanceRequest\" : {\n          \"Structure\" : {\n            \"Description\" : \"\",\n            \"Fields\" : {\n              \"chain\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"String\"\n              },\n              \"address\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"String\"\n              }\n            }\n          }\n        },\n        \"GetNativeBalanceResponse\" : {\n          \"Structure\" : {\n            \"Description\" : \"\",\n            \"Fields\" : {\n              \"result\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"Decimal\"\n              }\n            }\n          }\n        },\n        \"GetWalletNftsRequest\" : {\n          \"Structure\" : {\n            \"Description\" : \"\",\n            \"Fields\" : {\n              \"chain\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"String\"\n              },\n              \"address\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"String\"\n              }\n            }\n          }\n        },\n        \"GetWalletNftsResponse\" : {\n          \"Structure\" : {\n            \"Description\" : \"\",\n            \"Fields\" : {\n              \"result\" : {\n                \"Cardinality\" : \"Required\",\n                \"Shape\" : \"String\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in React\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration object. It then renders the ApiReference component with the specific configuration for the getNativeBalancesForAddresses endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/02-Get Native Balance/get-native-balances-for-addresses.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.balance.getNativeBalancesForAddresses} />\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Token Approvals API\nDESCRIPTION: This JSON response example shows the structure of data returned by the Token Approvals API, including pagination information and details about token approvals such as block information, spender details, approved amount, and USD value at risk.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2024-09-13 token-approvals-api.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\": 1,\n  \"page_size\": 100,\n  \"result\": [\n    {\n      \"block_number\": \"12526958\",\n      \"block_timestamp\": \"2021-04-02T10:07:54.000Z\",\n      \"transaction_hash\": \"0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09\",\n      \"spender\": {\n        \"address\": \"0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c\",\n        \"address_label\": \"Binance 1\",\n        \"entity\": \"Opensea\"\n      },\n      \"approved_amount\": \"1000000000000000\",\n      \"usd_at_risk\": \"1000.00\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Owners with Moralis NFT API in Python\nDESCRIPTION: This Python example showcases how to retrieve owner information for a particular NFT using Moralis's Python SDK. It initializes parameters (including contract address, token ID, and chain), and uses the get_nft_token_id_owners function from the evm_api.nft module. Requires the 'moralis' Python package. Expected input parameters are an API key and NFT details; the output is a Python dictionary containing ownership records and metadata for the queried NFT.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owner-of-an-nft.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xa186d739ca2b3022b966194004c6b01855d59571\",\n    \"token_id\": \"1\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n    \"limit\": 100,\n    \"cursor\": \"\",\n    \"normalizeMetadata\": True,\n}\n\nresult = evm_api.nft.get_nft_token_id_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Solana getSPL Endpoint\nDESCRIPTION: Uses the ApiReference component to display the API documentation for the getSPL endpoint, passing the specific configuration from the imported config object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/wallet-api/get-spl.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getSPL} />\n```\n\n----------------------------------------\n\nTITLE: Authenticating Moralis Solana API Requests with API Key (Bash)\nDESCRIPTION: Demonstrates how to make an authenticated HTTP GET request to the Moralis Solana API using cURL in Bash. The cURL command sends a request to retrieve information about a specific Ethereum block, including internal transactions, by adding the required 'X-API-Key' header for authentication. Dependencies: A valid Moralis API key and cURL installed. Replace 'YOUR_API_KEY' with your actual API key before use. The output will be JSON-formatted data for the queried block. Keep your API key secret and never expose it in shared or client-side code.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/01-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url 'https://deep-index.moralis.io/api/v2/block/15863321?chain=eth&include=internal_transactions' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Querying Sushiswap V2 Pair Address in TypeScript\nDESCRIPTION: TypeScript implementation for retrieving a Sushiswap V2 pair address using Moralis DeFi API. Requires Moralis SDK and common-evm-utils. Takes token0 (WETH) and token1 (LINK) addresses as inputs and returns pair address details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"sushiswapv2\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Multiple ERC20 Transfer Triggers - JavaScript\nDESCRIPTION: Provides an example response structure for ERC20 transfer triggers, demonstrating both fromBalance and toBalance outputs. Useful for developers to understand the mapping of trigger results, showing how named output parameters appear in actual webhook data returned from Moralis Streams. No dependencies, simply for illustrative purposes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/triggers.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nerc20Transfers: [\n  {\n    transactionHash: \"0xf0c7542c73e2d26cc0b249da63426643263463463646345\",\n    logIndex: \"0\",\n    contract: \"0x34b6a28edbbaf0c7542c73e2d26cc0b249da69a6\",\n    from: \"0xbb6a28edbbaf0c7542c73212d26cc0b249da47a5\",\n    to: \"0xbdc7237c3b3bfcfeca7ed8108d01854589c91d65\",\n    value: \"100000000000000000\",\n    tokenName: \"Moralis\",\n    tokenSymbol: \"MOR\",\n    tokenDecimals: \"18\",\n    valueWithDecimals: \"0.1\",\n    triggers: [\n      { name: \"fromBalance\", value: \"6967063534600021400000\" },\n      { name: \"toBalance\", value: \"200000000000000000\" },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for Moralis Docs - JavaScript/React\nDESCRIPTION: This snippet imports React components necessary for rendering structured API reference material within the Docusaurus documentation framework. Dependencies include @site/src/components/ApiReference for showing API schemas, @theme/Admonition for callout boxes, @docusaurus/Link for internal links, and a JSON config object for API reference details. Required prior setup includes a React environment (such as Docusaurus) and the specified modules installed. No inputs or outputs are defined; this snippet simply prepares components for use throughout the documentation file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getBlockByHash.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReference Component in React Documentation - JSX\nDESCRIPTION: This snippet imports the ApiReference React component and a configuration JSON, then renders the ApiReference component with props for displaying API endpoint documentation. Dependencies include React, a prebuilt ApiReference component, and a configsV2.json file containing API configuration. The key prop provided is a configuration object for defi.getPairAddress, which determines what API details are displayed. Expected input: proper configuration JSON and corresponding component file paths. Output: an interactive API reference panel for the endpoint described.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/06-Get Pairs & Liquidity/get-pair-address.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.defi.getPairAddress} />\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component with JSX in JavaScript\nDESCRIPTION: This snippet renders the DocCardList React component using JSX syntax to display a list of documentation cards. It is intended to appear as part of a documentation page, often used for navigation or grouping related documentation articles. Requires that DocCardList is imported and that the file is processed by a React-compatible build system.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream History with Moralis JavaScript SDK\nDESCRIPTION: Uses the Moralis JavaScript SDK to fetch the history of stream events, including potentially failed webhooks. The `limit` parameter restricts the number of history records returned (100 in this example). Requires the Moralis SDK to be initialized and authenticated.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst history = await Moralis.Streams.getHistory({ limit: 100 });\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Components in JSX/Markdown\nDESCRIPTION: Import statements for components used in the API reference documentation page including ApiReference, config, and ApiBanner components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/03-Get Token Prices/get-multiple-token-price.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Powershell\nDESCRIPTION: Navigates the command line interface into the specified project directory (`aws-node-project`). This is necessary before running commands like `npm install` that operate on the project's files.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\ncd aws-node-project\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using Yarn\nDESCRIPTION: Installs the necessary Node.js packages for the Solana NFT minter project using the `yarn install` command. This command reads the `package.json` file and downloads the listed dependencies. Requires `yarn` or `npm` package manager.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-minter.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in Markdown (JSX)\nDESCRIPTION: This snippet imports the `ApiReference` React component from a local path within the documentation site structure. This component is likely used to display structured API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/05-Get NFT Owners/get-nft-owners.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for NFT Floor Price by Contract API\nDESCRIPTION: This JSON object shows an example response from the Moralis NFT Floor Price API when fetching by contract address. It includes the NFT contract address, the floor price in the native currency (ETH) and USD, the currency symbol, the marketplace(s) where the floor price was found (e.g., Blur), and the timestamp of the last update.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/07-NFT Floor Prices/how-to-get-nft-floor-prices.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n  \"floor_price\": \"0.2176\",\n  \"floor_price_usd\": \"564.24\",\n  \"currency\": \"eth\",\n  \"marketplace\": [\n    {\n      \"name\": \"blur\",\n      \"logo\": \"https://cdn.moralis.io/marketplaces/blur.png\"\n    }\n  ],\n  \"last_updated\": \"2024-08-21T15:59:11.000Z\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in React/JSX\nDESCRIPTION: Imports the ApiReference component and a configuration file for use in the Moralis Streams API documentation page. This component likely renders API documentation for the Update Stream endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/update-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Analyzing Graduated Tokens using Moralis API (JavaScript)\nDESCRIPTION: This JavaScript function fetches up to 20 graduated tokens from the Moralis Solana API, displays each token's price, liquidity, FDV, and graduation date, and computes simple analytics like total and average liquidity. Dependencies: browser fetch API, DOM manipulation, and a valid Moralis API key. Inputs: none directly, but requires presence of #graduated-tokens and #analytics elements in the HTML. Outputs: dynamically rendered token cards and analytics summary. Security Note: API key should be kept private and is exposed in this code, which is suited for demonstration or trusted environments.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/pump-fun-tutorials/08-get-graduated-tokens.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function analyzeGraduatedTokens() {\n  const response = await fetch(\n    \"https://solana-gateway.moralis.io/token/mainnet/exchange/pumpfun/graduated?limit=20\",\n    {\n      headers: {\n        accept: \"application/json\",\n        \"X-API-Key\": \"YOUR_API_KEY\",\n      },\n    }\n  );\n\n  const data = await response.json();\n\n  // Display the tokens\n  const tokenList = document.getElementById(\"graduated-tokens\");\n  const now = new Date();\n\n  data.result.forEach((token) => {\n    const tokenElement = document.createElement(\"div\");\n    tokenElement.className = \"token-card\";\n\n    // Calculate days since graduation\n    const graduatedDate = new Date(token.graduatedAt);\n    const daysSinceGraduation = Math.floor(\n      (now - graduatedDate) / (1000 * 60 * 60 * 24)\n    );\n\n    tokenElement.innerHTML = `\n      <h3>${token.name} (${token.symbol})</h3>\n      <p>Price: $${parseFloat(token.priceUsd).toFixed(8)}</p>\n      <p>Liquidity: $${parseInt(token.liquidity).toLocaleString()}</p>\n      <p>FDV: $${parseInt(token.fullyDilutedValuation).toLocaleString()}</p>\n      <p>Graduated: ${daysSinceGraduation} days ago (${graduatedDate.toLocaleDateString()})</p>\n      <a href=\"https://solscan.io/token/${\n        token.tokenAddress\n      }\" target=\"_blank\">View on Solscan</a>\n    `;\n\n    tokenList.appendChild(tokenElement);\n  });\n\n  // Simple analytics on the data\n  const totalLiquidity = data.result.reduce(\n    (sum, token) => sum + parseFloat(token.liquidity),\n    0\n  );\n  const avgLiquidity = totalLiquidity / data.result.length;\n\n  const analytics = document.getElementById(\"analytics\");\n  analytics.innerHTML = `\n    <h3>Analytics</h3>\n    <p>Total tokens analyzed: ${data.result.length}</p>\n    <p>Total liquidity: $${totalLiquidity.toLocaleString()}</p>\n    <p>Average liquidity per token: $${avgLiquidity.toLocaleString()}</p>\n  `;\n}\n\nanalyzeGraduatedTokens();\n```\n\n----------------------------------------\n\nTITLE: Reporting Spam ERC20 Contract - Moralis - TypeScript\nDESCRIPTION: This snippet details how to report a spam ERC20 contract on Ethereum using the Moralis SDK in TypeScript. Prerequisites are the Moralis, @moralisweb3/common-evm-utils, and a local ABI module. It initializes Moralis with an API key, configures the EVM chain and contract address, sets a report reason, and sends a contract review request marking it as spam using reviewContracts. The function prints the returned JSON response. The script requires a configured TypeScript/Node.js environment and the proper typings and packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/spam-detection/report-erc20-spam.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\nimport abi from \"abi.json\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  const contractAddress = \"0x06012c8cf97bead5deae237070f9587f8e7a266d\";\n\n  const reason = \"My Reason\";\n\n  const response = await Moralis.EvmApi.utils.reviewContracts(\n    {\n      chain,\n    },\n    {\n      contracts: [\n        {\n          reason,\n          contractAddress,\n          reportType: \"spam\",\n          contractType: \"ERC20\",\n        },\n      ],\n    }\n  );\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Installing EVM Authentication Package for Moralis Firebase (Text CLI)\nDESCRIPTION: Adds the dedicated EVM authentication package required for enabling MetaMask or WalletConnect login in the Firebase-Moralis integration. Executed via npm before integrating EVM wallet authentication on the frontend.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_4\n\nLANGUAGE: Text CLI\nCODE:\n```\nnpm install @moralisweb3/client-firebase-evm-auth\n```\n\n----------------------------------------\n\nTITLE: Styling React Portfolio Dashboard with CSS\nDESCRIPTION: This CSS snippet provides styles for the portfolio dashboard, including layout, colors, and component-specific styles. It's designed to create a dark-themed interface with gradient backgrounds and responsive layouts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  text-align: left;\n  min-height: 100vh;\n}\n\n.header {\n  height: 80px;\n  width: calc(100vw - 100px);\n  display: flex;\n  justify-content: flex-start;\n  background-color: rgb(33, 33, 38);\n  border-bottom: 1px solid rgb(121, 121, 121);\n  padding: 5px 50px;\n  align-items: center;\n}\n\n.title {\n  display: flex;\n  height: 60px;\n  align-items: center;\n  gap: 25px;\n}\n\n.walletInputs {\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n  align-items: center;\n  gap: 25px;\n}\n\n.content {\n  height: 100%;\n  margin: 0;\n  padding: 100px;\n  background: linear-gradient(180deg, rgba(142, 211, 182, 0.3) 0%, rgba(36,20,0,0) 50%);\n}\n\n.walletInfo {\n  display: flex;\n  justify-content: space-between;\n}\n\n.totalValue {\n  width: 350px;\n  height: 150px;\n  padding: 10px 30px;\n  border-radius: 20px;\n  background-color: rgba(33, 33, 38, 0.6);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.tabHeading {\n  font-size: 30px;\n  font-weight: bold;\n  margin: 20px 0px;\n  align-items: center;\n  display: flex;\n  gap: 20px;\n}\n\n.filters {\n  display: flex;\n  gap: 20px;\n  margin: 30px 0px;\n}\n\n.nftInfo {\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  color: white;\n  gap: 5px;\n  background-color: rgb(42, 42, 47);\n  border-radius: 5px;\n  padding: 10px;\n}\n\n.nftList {\n  display: flex;\n  justify-content: flex-start;\n  gap: 40px;\n  flex-wrap: wrap;\n}\n```\n\n----------------------------------------\n\nTITLE: Application Styling\nDESCRIPTION: CSS styles for the application layout and components including chart container and controls.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-tradingview-lightweight-charts-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.app-container {\n  max-width: 1200px;\n  margin: 2rem auto;\n  padding: 2rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);\n}\n\n.controls-container {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  max-width: 400px;\n  margin: 0 auto 2rem auto;\n}\n\nselect,\ninput {\n  width: 100%;\n  padding: 0.75rem 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  font-size: 1rem;\n}\n\nbutton {\n  background: #2196f3;\n  color: white;\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n}\n\nbutton:disabled {\n  background: #e0e0e0;\n  cursor: not-allowed;\n}\n\n.chart-container {\n  margin-top: 2rem;\n  padding: 1.5rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n}\n\n.loading-spinner {\n  display: flex;\n  justify-content: center;\n  margin: 2rem 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing EVMChainData Component in JavaScript/JSX\nDESCRIPTION: This snippet imports the `EVMChainData` component from a local file within the documentation site's source code (`@site/src/components/SupportedChains`). This component is presumably used later in the file to render the list of EVM chains supported by the Moralis Token API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/token-api.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EVMChainData } from '@site/src/components/SupportedChains';\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS Middleware\nDESCRIPTION: Configuring the Express app to use CORS middleware.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(cors())\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for NFT Trait Resync\nDESCRIPTION: This code snippet renders the ApiReference component with configuration specific to the NFT trait resync functionality. It uses the config object to pass the necessary properties to the ApiReference component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/09-Get NFT Traits and Rarity/resync-nft-traits-by-collection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.resyncNFTTrait}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in MDX/JavaScript\nDESCRIPTION: This snippet imports the necessary React components (`ApiReference`, `ApiBanner`) and a JSON configuration file. These imports are standard in MDX files used with frameworks like Docusaurus to bring in reusable UI elements and data for rendering the page content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-nft-trades-by-wallet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Moralis Instance\nDESCRIPTION: Example of combining Moralis modules into a custom instance for use in a dapp\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// moralis.ts\nimport { MoralisCore } from \"@moralisweb3/core\";\nimport EvmApi from \"@moralisweb3/evm-api\";\n\nconst core = MoralisCore.create();\nconst evmApi = EvmApi.create(core);\ncore.registerModules([evmApi]);\n\nexport const Moralis = {\n  EvmApi: evmApi,\n};\n\n// app.ts\nimport { Moralis } from \"./moralis/\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nMoralis.EvmApi.block.getBlock({\n  chain: EvmChain.ETHEREUM,\n  blockNumberOrHash: \"\",\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Web3 API Version Reference (JavaScript/JSX)\nDESCRIPTION: This snippet renders the ApiReference component, spreading the configuration object for the web3ApiVersion utility. The displayed component dynamically generates reference documentation for the targeted API version endpoint. This requires the config.utils.web3ApiVersion property to exist and contain the necessary metadata and parameters for ApiReference to consume.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/utils/web3-api-version.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.utils.web3ApiVersion} />\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnect Web3 Provider (Text CLI)\nDESCRIPTION: Installs the @walletconnect/web3-provider npm package necessary for using WalletConnect as an authentication provider in Moralis-Firebase integrations. Should be run before attempting WalletConnect-based logins.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_7\n\nLANGUAGE: Text CLI\nCODE:\n```\nnpm install @walletconnect/web3-provider\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component for Solana Address Unbinding Documentation\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration object to display the API reference for removing the bind of a Solana address from an authentication profile.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/reference/03-Profiles/remove-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Configuring IP-Based Rate Limiting with firebase-functions-rate-limiter in TypeScript\nDESCRIPTION: This TypeScript code block initializes the FirebaseFunctionsRateLimiter using Firestore as backend. It sets a limit of 10 calls every 5 seconds per qualifier and requires firebase-functions-rate-limiter, firebase-admin, and Firestore setup. Used as part of a middleware to prevent request abuse, it expects initialization on the backend.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { FirebaseFunctionsRateLimiter } from \\\"firebase-functions-rate-limiter\\\";\n\nconst firestore = admin.firestore(app);\nconst limiter = FirebaseFunctionsRateLimiter.withFirestoreBackend(\n  {\n    name: \\\"rateLimiter\\\",\n    maxCalls: 10,\n    periodSeconds: 5,\n  },\n  firestore\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text - Plain Text\nDESCRIPTION: This snippet reproduces the full MIT License terms and copyright declaration for reference within documentation or as a LICENSE file. It sets forth all legal terms under which the software can be used, modified, and distributed, including warranty and liability disclaimers. Inputs and outputs are not applicable as this is static legal text, and no dependencies are required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/styles/write-good/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License (MIT)\\n\\nCopyright (c) 2014 Brian Ford\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Updating package.json with Start Script\nDESCRIPTION: Adds a start script to package.json to run the Express app using nodemon for auto-reloading.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"nodemon index.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"dotenv\": \"^16.0.3\",\n    \"express\": \"^4.18.2\",\n    \"ngrok\": \"^4.3.3\",\n    \"node-telegram-bot-api\": \"^0.60.0\",\n    \"nodemon\": \"^2.0.20\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Moralis API Key in .env file\nDESCRIPTION: Illustrates the format for storing the Moralis API key in a '.env' file. The key is assigned to the variable `MORALIS_API_KEY`. This file should be kept in the project root for local development and not committed to version control.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Get your Moralis API Key at https://admin.moralis.com/web3apis\nMORALIS_API_KEY=xxx\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Commands to create a new Node.js project and install required packages ethers.js and dotenv.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/tutorials/fetch-wallet-transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new Node.js project\nmkdir wallet-transaction-fetcher\ncd wallet-transaction-fetcher\nnpm init -y\n\n# Install ethers.js and dotenv\nnpm install ethers dotenv\n```\n\n----------------------------------------\n\nTITLE: Auth Error Code Table in Markdown\nDESCRIPTION: Table listing Auth module error codes with identifiers and descriptions for authentication-related issues\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/error-handling.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Code | Error | Description |\n| --- | --- | --- |\n| `U0001` | GENERIC_AUTH_ERROR | An unspecified error occurred during authentication |\n| `U0002` | INCORRECT_NETWORK | The specified network is incorrect for the authentication request |\n| `U0003` | INCORRECT_PARAMETER | The supplied parameters for the authentication request are incorrect |\n| `U9000` | NOT_IMPLEMENTED | The requested authentication method or feature isn't implemented |\n```\n\n----------------------------------------\n\nTITLE: Rendering Token Analytics API Reference Component with MainnetBadge\nDESCRIPTION: Code that renders the main API reference component for the Solana getTokenAnalytics endpoint with a MainnetBadge indicator. The component uses configuration from the config object for the Solana getTokenAnalytics endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Token Analytics/get-token-analytics.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# Get Token Analytics <MainnetBadge />\n```\n\n----------------------------------------\n\nTITLE: Loading API Reference Configuration in JavaScript\nDESCRIPTION: Imports a JSON configuration object that defines API endpoint details and display parameters. This config is utilized by the ApiReference component to render endpoint-specific documentation dynamically. It expects the specified relative file path structure within the documentation project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/03-Get NFT Transfers/get-wallet-nft-transfers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: React JSX Import Statements\nDESCRIPTION: Import statements for React components used in the documentation page including ApiReference, Admonition, Link components and config file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/eth_getDecodedTransactions.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Selecting Language for Cloud Functions during Firebase Init (CLI Output)\nDESCRIPTION: Displays the prompt from `firebase init` where the user selects the programming language for Cloud Functions. This example shows selecting TypeScript.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n? What language would you like to use to write Cloud Functions?\n❯ TypeScript\n```\n\n----------------------------------------\n\nTITLE: Rendering EVM RPC API Reference with Admonition (JSX)\nDESCRIPTION: Uses the `ApiReference` component to display EVM RPC method details. Configuration for these methods is passed via props (`{...config.rpc.evmRpc}`). It includes an `Admonition` component containing a paragraph with a `Link` to the RPC schema page, providing users with further details on parameters and responses.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/_evm-rpc-methods.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.rpc.evmRpc} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the respective RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Getting Entity Categories via API Endpoint (URI)\nDESCRIPTION: Provides the API endpoint URL for retrieving a list of all available entity categories using the Moralis Entity API. This endpoint corresponds to the `getEntityCategories` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/entity-api.md#2025-04-23_snippet_1\n\nLANGUAGE: uri\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/entities/categories\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Head Title\nDESCRIPTION: This snippet uses JSX syntax within a Markdown file to define the HTML `<head>` section, specifically setting the `<title>` tag for the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_maxPriorityFeePerGas.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<head>\n    <title>eth_maxPriorityFeePerGas RPC Method - Moralis Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component with Config\nDESCRIPTION: React/JSX code importing a custom API reference component and configuration for the request bind documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/reference/03-Profiles/request-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.auth.requestBind} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Configuration - JavaScript\nDESCRIPTION: This snippet imports a JSON configuration object containing reference data for the Moralis API. The configuration is later used in components to define the endpoints and documentation data being displayed. Prerequisites include the correct file structure and available config at the provided path.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-domain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving DEX Token Pair Address via Moralis API\nDESCRIPTION: Fetches the DEX pair address for two given token addresses using the Moralis Deep Index API v2.2. Requires `:token0_address` and `:token1_address` path parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:token0_address/:token1_address/pairAddres\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList Component in JSX\nDESCRIPTION: Demonstrates importing and implementing the DocCardList component from the theme to display a list of documentation cards. Includes frontmatter configuration for title, sidebar position, slug, and custom sidebar class name.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and configuration file for the API reference documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/02-Get Price/get-multiple-token-price.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component and Configuration for Streams API Get History\nDESCRIPTION: This code imports the ApiReference component and the configuration file needed to render the API documentation for the 'Get history' endpoint of the Streams API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/01-History/get-history.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n# Get history\n\n<ApiReference {...config.streams.GetHistory} />\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Section with JSX for Moralis API Documentation\nDESCRIPTION: This code snippet creates a hero section for the Moralis API documentation landing page. It includes a title, subtitle, call-to-action button, and an image. The layout is structured using a two-column grid system.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/index.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"hero shadow--lw\">\n    <div className=\"container\">\n        <div className=\"row\">\n            <div className=\"col col--6 margin-bottom--xl\">\n                <div className=\"col-demo\">\n                    <h1 className=\"hero__title\">Moralis API Documentation</h1>\n                    <p className=\"hero__subtitle\">Integrate Web3 into any tech stack by following easy guides, recipes, and API references!</p>\n                    <div>\n                    <a href=\"/web3-data-api/evm/getting-started/\" className=\"button button--primary button--outline button--lg\">\n                        Get Started\n                    </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col col--6\">\n                <div className=\"col-demo\">\n                    <img src=\"/img/content/scaleWebApi3.svg\" width=\"580\" height=\"422\" loading=\"eager\" alt=\"Moralis API Documentation\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Solana Authentication - JavaScript\nDESCRIPTION: Imports a React component (ApiReference) and a configuration JSON file, then renders the ApiReference component for the specific 'verifyRemoveBind' Solana authentication endpoint. Depends on @site/src/components/ApiReference and @site/docs/configs/api-reference/configsV2.json for component logic and structured API config data. Expects config.auth.verifyRemoveBind to be present in the imported configuration. No direct business logic or state management is present; this is for documentation rendering in a static site generator context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/reference/03-Profiles/verify-remove-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.auth.verifyRemoveBind} />\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Block via Umbrella Moralis Package - JavaScript\nDESCRIPTION: Shows how to access the EvmApi module and call getBlock using the high-level umbrella Moralis package. This method is simpler for standard use cases as all modules are pre-registered. It demonstrates importing from the umbrella package and making direct calls without custom registration. Requires installation of the moralis package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nMoralis.EvmApi.block.getBlock({\n  chain: EvmChain.ETHEREUM,\n  blockNumberOrHash: \"\",\n});\n```\n\n----------------------------------------\n\nTITLE: Moralis API Key Configuration\nDESCRIPTION: Environment variable configuration for Moralis API key\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nMORALIS_API_KEY=replace_me\n```\n\n----------------------------------------\n\nTITLE: Authentication Constants Definition\nDESCRIPTION: Definition of constants required for authentication message configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'moralis.io';\nconst STATEMENT = 'Please sign this message to confirm your identity.';\nconst URI = 'https://moralis.io/';\nconst EXPIRATION_TIME = '2023-01-01T00:00:00.000Z';\nconst TIMEOUT = 15;\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Lowest Price using Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates using the Moralis SDK to get the lowest price for a given NFT contract address (from user wallet NFTs) and blockchain chain (such as Ethereum or Polygon). Ensure 'moralis' and '@moralisweb3/common-evm-utils' are installed, and replace the example parameters with real values. The resulting lowest price data is logged.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-api-full-guide-walkthrough.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"NFT_CONTRACT_ADDRESS\"; // provided from `getWalletNFTs`\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.nft.getNFTLowestPrice({\n    address,\n    chain,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Inheriting AxelarExecutable in Solidity Contract\nDESCRIPTION: Modifies the `GMPDistribution` contract definition to inherit from `AxelarExecutable`. This inheritance is necessary for the contract to be able to receive and handle messages relayed through the Axelar network.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-1.md#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// imports\npragma solidity ^0.8.19;\ncontract GMPDistribution is AxelarExecutable {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Block Number via Moralis API URL\nDESCRIPTION: API endpoint URL for fetching the latest block number for a specified chain. Corresponds to the `getLatestBlockNumber` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/blockchain-api.md#2025-04-23_snippet_6\n\nLANGUAGE: url\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/latestBlockNumber/:chain\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Collections by Wallet (v2) using SimpleHash API\nDESCRIPTION: SimpleHash API endpoint (v2) to retrieve NFT collections owned by specified wallet addresses across given chains. Requires `chains` and `wallet_addresses` as query parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/collections_by_wallets_v2?chains={chains}&wallet_addresses={wallet_addresses}\n```\n\n----------------------------------------\n\nTITLE: Initializing Metaplex SDK with Solana Wallet and Devnet\nDESCRIPTION: TypeScript code to initialize the Metaplex SDK with the connected Solana wallet and devnet cluster for NFT minting operations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-minter.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst wallet = useWallet();\nconst connection = new Connection(clusterApiUrl(\"devnet\"));\nconst metaplex = new Metaplex(connection);\nmetaplex.use(walletAdapterIdentity(wallet));\n```\n\n----------------------------------------\n\nTITLE: Importing ReactMarkdown Component - TypeScript/React\nDESCRIPTION: This statement imports the 'ReactMarkdown' library, a React component that renders Markdown as React elements. It is used to display prose or documentation written in Markdown within the React documentation site. The dependency enables conversion of Markdown content to HTML elements for display on documentation pages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/02-Get Wallet Token Balances/get-wallet-token-balances.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactMarkdown from \"react-markdown\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component - TypeScript\nDESCRIPTION: This snippet imports the ApiBanner React component with explicit TypeScript typing for use within the documentation page. It assumes that the ApiBanner.tsx file exports a compatible React component. This enables TypeScript-aware pages to include dynamic or static banners capable of displaying important API usage notices or calls to action.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/01-Search Entities/search-entities.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Starting Serverless Offline for Local Testing\nDESCRIPTION: Command to start the Serverless offline server for local development and testing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nserverless offline start\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component with React in JavaScript\nDESCRIPTION: This snippet imports the 'DocCardList' React component from the '@theme/DocCardList' package and then renders it within the documentation page using JSX. The component outputs a navigable card list representing documentation resources. The file assumes a Docusaurus environment, and dependencies include React and the Docusaurus documentation framework. The import statement and JSX usage must be supported by the build system.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />  \n```\n\n----------------------------------------\n\nTITLE: Querying eth_getUncleByBlockHashAndIndex Parameters - JSON\nDESCRIPTION: This snippet illustrates the input parameter array for the eth_getUncleByBlockHashAndIndex method, requiring a block hash and the uncle index in hexadecimal. Both inputs are strings; the method returns detailed uncle block information. No dependencies except a valid block hash and index.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"0xe9de65582d5a210f3f5703e0d7dc1daf9fbb5a0670937f5d92283a41ea1bcb2b\",\n  \"0x0\"\n]\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component - React/JSX\nDESCRIPTION: Import statements for the API reference component and configuration file needed to display the endpoint documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/reference/03-Profiles/verify-remove-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: ApiBanner Component Import in TypeScript\nDESCRIPTION: Import statement for the ApiBanner component from the site components directory.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/02-NFT API/verification-nft-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and a configuration object, then renders the component with specific props for the getNFTTradesByWallet API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/07-Get NFT Trades/get-nft-trades-by-wallet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.nft.getNFTTradesByWallet} />\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JavaScript/ESM\nDESCRIPTION: This snippet imports the `DocCardList` component from the Docusaurus theme's predefined components (`@theme/DocCardList`). This component is essential for automatically generating a list of documentation cards based on the file structure or explicit configuration within a Docusaurus project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/tutorials.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in Docusaurus - JavaScript\nDESCRIPTION: This snippet imports the DocCardList React component from the theme package in a Docusaurus documentation page. It enables easy rendering of a pre-styled list of documentation cards, facilitating modular and consistent layouts for docs sites. The import statement assumes the @theme package is available as part of the Docusaurus project dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/integrations.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JavaScript/JSX\nDESCRIPTION: Imports the `DocCardList` component, typically provided by a documentation theme (like Docusaurus), from the specified module path. This component is used to automatically generate lists of document links.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/token-api.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Using Moralis EVM API with Standard Approach\nDESCRIPTION: Example of using Moralis EVM API functionality with the standard umbrella package approach\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nMoralis.EvmApi.block.getBlock({\n  chain: EvmChain.ETHEREUM,\n  blockNumberOrHash: \"\",\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Section with Note using JSX\nDESCRIPTION: Renders the main API reference documentation section using the `ApiReference` component. Configuration for this component is passed via props spread from an external JSON file (`config.token.getAggregatedTokenPairStats`). It also includes a nested `Admonition` component to display an important informational note regarding the endpoint's limitation of considering only 200 pairs for aggregation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/06-Get Pairs & Liquidity/get-aggregated-token-pair-stats.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getAggregatedTokenPairStats}>\n  <Admonition type=\"info\" title=\"Note\">\n    This endpoint has a limit of 200 pairs that is considered when aggregating\n    the totals.\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component - TypeScript/React\nDESCRIPTION: This import statement retrieves the 'ApiBanner' TypeScript/React component, which is intended to be used as a banner or header for API documentation pages. The component's file extension (.tsx) indicates it includes TypeScript type annotations and JSX. This import is required for pages that include special notification or feature banners regarding the API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/02-Get Wallet Token Balances/get-wallet-token-balances.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Balance Methods in Moralis Web3 Server\nDESCRIPTION: Creates a function to get the native token balance for a wallet and a POST endpoint to expose this functionality. The implementation uses Moralis EvmApi to fetch the balance in ether.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// getNativeBalance method\nasync function getNativeBalance(address, chain) {\n  const nativeBalance = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  })\n\n  const native = nativeBalance.result.balance.ether\n  return native\n}\n\n// POST operation for getNativeBalance()\napp.post(\"/nativeBalance\", async (req, res) => {\n  try {\n    // Get and return the native balance\n    const nativeBalance = await getNativeBalance(req.body.address, req.body.chain)\n    res.status(200)\n    res.send(nativeBalance)\n\n  } catch (error) {\n    // Handle errors\n    console.error(error)\n    res.status(500)\n    res.json({ error: error.message })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initial package.json Configuration\nDESCRIPTION: The default package.json file created when initializing a new Node.js project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Endpoint Weights API Request\nDESCRIPTION: This JSON snippet shows the expected output format when checking endpoint weights, including the endpoint name, path, price (billing CU), and rateLimitCost (rate limit CU).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/08-compute-units-cu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"endpoint\": \"getBlock\",\n    \"path\": \"/block/{block_number_or_hash}\",\n    \"price\": 5,\n    \"rateLimitCost\": 5\n  },\n  {\n    \"endpoint\": \"getContractEvents\",\n    \"path\": \"/{address}/events\",\n    \"price\": 2,\n    \"rateLimitCost\": 2\n  },\n  {\n    \"endpoint\": \"getTransactions\",\n    \"path\": \"/transaction/{transaction_hash}\",\n    \"price\": 1,\n    \"rateLimitCost\": 3\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get ERC20 Token Allowance using Python\nDESCRIPTION: Python implementation to query token allowance using Moralis evm_api. Requires Moralis Python SDK. Takes token address, owner address, spender address, and chain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-the-spender-allowance.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    \"owner_address\": \"0x7c470D1633711E4b77c8397EBd1dF4095A9e9E02\",\n    \"spender_address\": \"0xed33259a056f4fb449ffb7b7e2ecb43a9b5685bf\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_token_allowance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Invoking an AWS Lambda Function from GameSparks Cloud Code\nDESCRIPTION: This example demonstrates the basic syntax for invoking an AWS Lambda function from within Amazon GameSparks Cloud Code. It uses `GameSparks().Lambda()` to specify the target Lambda function name and `.Invoke()` to trigger it, passing an object containing event parameters. This is the core mechanism used to integrate GameSparks with custom backend logic hosted on Lambda.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/aws-gamesparks-integration-with-unity.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nGameSparks().Lambda(\"lambda-function-name\").Invoke(\n    {\n    \t//Event parameters\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding NextJS Scripts to package.json\nDESCRIPTION: Updates the `scripts` section of the `package.json` file with standard commands for managing a NextJS application. These include `dev` (start development server), `build` (create production build), `start` (run production server), and `lint` (run linter).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"lint\": \"next lint\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Transactions using Moralis Transaction API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve all transactions for a specific Ethereum wallet address using the Moralis Transaction API. It requires installing the 'moralis' and '@moralisweb3/common-evm-utils' packages and uses an API key for authentication. The script initializes Moralis, sets the target address and chain, fetches transactions using 'getWalletTransactions', and outputs the result as JSON; 'address' and 'chain' are required parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getWalletTransactions({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Replaying Failed Webhooks via HTTP API - cURL\nDESCRIPTION: This cURL command demonstrates how to manually trigger a replay of a failed webhook history event using the Moralis Streams HTTP API. It uses a POST request to the /history/replay/{WEBHOOK_ID} endpoint, requiring replacement of WEBHOOK_ID and a valid API key via the x-api-key header. Required headers include application/json content-type and accept. This snippet is suitable for scripting or API clients that do not use the JavaScript SDK.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/error-handling.md#2025-04-23_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X 'POST'\n  '<https://api.moralis-streams.com/history/replay/WEBHOOK_ID>'\n  -H 'accept: application/json'\n  -H 'x-api-key: YOUR_API_KEY'\n  -H 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Content by Number using Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to fetch block information by number via the Moralis SDK. It starts the Moralis service with an API key, sets the desired block number (`15863321`) and chain (`EvmChain.ETHEREUM`), and uses `Moralis.EvmApi.block.getBlock` to retrieve the data. The response object is then converted to JSON and logged. Requires the `moralis` and `@moralisweb3/common-evm-utils` packages and a TypeScript/Node.js v14+ environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-content-by-block-number.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const blockNumberOrHash = \"15863321\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.block.getBlock({\n    blockNumberOrHash,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Transfers by Wallet with Moralis API - TypeScript\nDESCRIPTION: This TypeScript example shows how to use the Moralis SDK to query all NFT transfers linked to a wallet address on a specific EVM-compatible chain. It uses TypeScript's type safety, 'moralis' and '@moralisweb3/common-evm-utils' packages, and the main parameters are the wallet 'address' and 'chain'. The transfer details are logged as a JSON structure. An API key and valid TypeScript environment are required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-NFT-transfers-by-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference and Note Section - ReactJS - JavaScript\nDESCRIPTION: This snippet demonstrates rendering the API reference block for 'eth_getUncleCountByBlockHash' using a configured React component, and includes an informational Admonition section linking to further RPC schema details. It requires dependencies on the Docusaurus framework and the respective components. Inputs include props spread from the JSON config and static URLs; outputs are the visually embedded documentation elements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getUncleCountByBlockHash.md#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference {...config.rpc.eth_getUncleCountByBlockHash} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Fetching Multi-Chain Wallet Activity using Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates using the Moralis SDK to get the active chains for a wallet address. It initializes Moralis with an API key, specifies the wallet address, defines an array of chains using `EvmChain` enum (Ethereum, BSC, Polygon), and calls `Moralis.EvmApi.wallets.getWalletActiveChains`. The resulting activity data is logged as a JSON object. Requires `moralis` and `@moralisweb3/common-evm-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/01-Wallet Details/how-to-get-multichain-activity-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  const response = await Moralis.EvmApi.wallets.getWalletActiveChains({\n    address,\n    chains,\n  });\n  \n  console.log(response.toJSON());\n}\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK with pip\nDESCRIPTION: Installs the Moralis SDK using pip for Python environments\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/partials/_install-moralis-sdk.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install ${props.python}\n```\n\n----------------------------------------\n\nTITLE: Rendering EVM API Banner Link - React JSX\nDESCRIPTION: Renders an Ethereum API banner with customizable text and link targeting users seeking EVM (Ethereum Virtual Machine) token holder timeseries. This depends on the `EthereumApiBanner` React component, and expects several props for customization including title, text, button text, and a navigation link. Inputs are the prop values, and the output is a JSX banner; constraints include requiring the `EthereumApiBanner` component to accept these props.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Token Holders/get-historical-token-holders.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<EthereumApiBanner\n  customTitle=\"Looking for token holders timeseries on EVM?\"\n  customText=\"Access historical token holder statistics on EVM using our API.\"\n  customButtonText=\"Explore EVM API\"\n  customButtonLink=\"/web3-data-api/evm/reference/get-historical-token-holders\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing NPM Project\nDESCRIPTION: Creates a new NPM project with basic package.json configuration\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component - TypeScript\nDESCRIPTION: This snippet imports the ApiBanner React component, which is likely used to display informational banners related to the API. The dependency is '@site/src/components/ApiBanner/ApiBanner.tsx', a custom React component. The import prepares the component for usage within this documentation page; inputs are the module specifier, and outputs are the component object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/07-Get NFT Trades/get-nft-trades-by-token.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Cloning the Solana NFT Minter Project Repository\nDESCRIPTION: Clones the specified GitHub repository for the Solana NFT minter project using the `git clone` command and navigates into the newly created project directory using `cd`. Requires the `git` command-line tool to be installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-minter.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/JohnVersus/solana-nft-minter.git\n\ncd solana-nft-minter\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration\nDESCRIPTION: Example package.json configuration showing required dependencies and ES module support setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-aggregated-token-pair-stats.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"aggregated-token-pair-stats\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"dependencies\": {\n    \"node-fetch\": \"^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Registration State Management\nDESCRIPTION: React state setup for managing token registration form data\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [tokenAddress, setTokenAddress] = useState<string>(\"\");\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Moralis API Reference - JSX\nDESCRIPTION: This snippet imports various dependencies required for rendering API reference sections and informational banners within the documentation. It includes components for dynamic API documentation rendering (ApiReference), configuration (config), Admonition for alerts, and a banner component (ApiBanner). Dependencies are local project files and external packages managed within the site\\'s documentation source. No input parameters or outputs are defined; these imports support subsequent usage of interactive components in the documentation layout.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/01-Get Wallet History/get-wallet-transactions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\n\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Moralis via MetaMask (TypeScript, EVM)\nDESCRIPTION: Demonstrates authenticating users via MetaMask by calling signInWithMoralis with the moralisAuth client. Dependencies: @moralisweb3/client-firebase-evm-auth. Input: moralisAuth object; Output: authenticates the user and establishes session. Only supports MetaMask by default.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signInWithMoralis } from '@moralisweb3/client-firebase-evm-auth';\n\nawait signInWithMoralis(moralisAuth);\n```\n\n----------------------------------------\n\nTITLE: Getting Uniswap V2 Pair Address with Moralis DeFi API in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to connect to the Moralis DeFi API to retrieve the Uniswap V2 pair address for two ERC-20 tokens on Ethereum. It requires the 'moralis' and '@moralisweb3/common-evm-utils' packages. The key parameters are an API key, token0Address, token1Address, and the chain (set to Ethereum). After initializing Moralis with your API key, it calls 'defi.getPairAddress' and prints the response JSON. Inputs are specified as ERC-20 addresses, and the output is an object containing detailed token and pair information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-address-of-a-liquidity-pool.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in JavaScript/TypeScript\nDESCRIPTION: This JavaScript/TypeScript code imports the `ApiBanner` component from a local project path (indicated by the `.tsx` extension, suggesting TypeScript). This component might be used to display a promotional or informational banner related to the API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Volume Stats/04-get-timeseries-volume-by-category.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Sample ABI for Donation Smart Contract\nDESCRIPTION: ABI (Application Binary Interface) for a simple donation smart contract used in the tutorial.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"inputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Donate\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"newDonation\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Premium Endpoint Notice - Markdown JSX\nDESCRIPTION: This snippet uses an Admonition JSX component in Markdown to inform users that accessing the described API requires a Business plan API key. It offers visually distinct documentation guidance by embedding icons, a custom title, and descriptive paragraph content. There are no dependencies except for Admonition availability within the MDX/Markdown rendering environment; it does not take direct parameters and renders static content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/02- Get Entity Categories/get-entity-categories.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Admonition type=\"info\" icon=\"💡\" title=\"Premium Endpoint\">\n  <p>\n    To use this API, you will need an API key associated with a Moralis account\n    on the <strong>Business</strong> plan or higher.\n  </p>\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Registration Logic\nDESCRIPTION: Contract interaction logic for registering tokens using wagmi hooks and handling transaction states\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: registerToken, write } = useContractWrite({\n  address: interchainTokenFactoryContractAddress,\n  abi: interchainTokenFactoryContractABI,\n  functionName: 'registerCanonicalInterchainToken',\n  args: [tokenAddress],\n  mode: 'recklesslyUnprepared',\n});\n\nconst { data: useWaitForDeployTokenTransactionData, isSuccess, isError, isLoading } = useWaitForTransaction({\n  hash: registerToken?.hash,\n});\n\nconst handleRegisterToken = async() => {\n  if (!tokenAddress) {\n    toast({\n      title: 'Invalid Input',\n      description: 'Please fill the field correctly.',\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n    });\n    return;\n  }\n  write();\n  toast({\n    title: 'Transaction Submitted',\n    description: 'Please confirm the transaction in MetaMask.',\n    status: 'info',\n    duration: 5000,\n    isClosable: true,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Configurations - React - JavaScript\nDESCRIPTION: This snippet shows how to import React components and configuration JSON required for rendering the API documentation page. The imported components (ApiReference, Admonition, Link) are standard Docusaurus plugins, while the config JSON holds endpoint specifications for Moralis API references. No parameters are required. Outputs include availability of React components and API config variables for use in the page. Dependencies: @site/src/components/ApiReference, @theme/Admonition, @docusaurus/Link, @site/docs/configs/api-reference/configsV2.json.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/12-Market Data API/get-top-nft-collections-by-trading-volume.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component with Configuration in JSX\nDESCRIPTION: This code imports and renders an API reference component with pre-configured settings for the Solana getCandleSticks endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/05-Get Token Prices/get-ohlcv-by-pair-address.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n\n<ApiReference {...config.solana.getCandleSticks} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference and Admonition Components - React - JavaScript\nDESCRIPTION: This snippet imports reusable React components (ApiReference, Admonition, Link) and a configuration JSON for embedding an interactive API reference section within the documentation. Dependencies: @site/src/components/ApiReference, @theme/Admonition, @docusaurus/Link, and a JSON config file. These imports are typically used in Docusaurus/Nextra MDX docs to enable live API call examples and rich admonitions. Required to enable subsequent JSX elements in the Markdown file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getTransactionByBlockHashAndIndex.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Updating Serverless Function Definition in YAML\nDESCRIPTION: Updates the `serverless.yml` file to rename the function from `hello` to `getNativeBalance` and points the handler to the corresponding `getNativeBalance.js` file within the `functions` directory.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice: aws-node-project\n\nframeworkVersion: '3'\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  environment:\n    MORALIS_API_KEY: 'replace_me'\n\nfunctions:\n  getNativeBalance:\n    handler: functions/getNativeBalance.handler\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NFT API Response Structure - JSON\nDESCRIPTION: This code snippet displays a sample JSON response returned by Moralis Wallet API after querying the getWalletNFTs endpoint. It illustrates the structure and fields for paginated NFT data results, including owner address, chain, token metadata, and pagination cursor. Intended for reference purposes to understand the expected response format after running the example scripts. Inputs are the query parameters (not shown); output is a JSON structure with NFT records and pagination data. No dynamic code execution required.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 1456,\n  \"page\": 1,\n  \"page_size\": 100,\n  \"cursor\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21QYXJhbXMiOnsid2FsbGV0QWRkcmVzcyI6IjB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSJ9LCJrZXlzIjpbIjE2NjMyMzgxNzUuMDc3Il0sIndoZXJlIjp7Im93bmVyX29mIjoiMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1In0sImxpbWl0IjoxMDAsIm9mZnNldCI6MCwib3JkZXIiOltdLCJ0b3RhbCI6MTQ1NiwicGFnZSI6MSwidGFpbE9mZnNldCI6MSwiaWF0IjoxNjY2NjgyNTUyfQ.E5DkWYvRTaFnVhgedRuT3IW-rb2V-ikFKwP2cg2Qf78\",\n  \"result\": [\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"4765809967066625256798886812262830659450023020194524584471225959000376492819\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"ba6d44b5f16be94283cecffeb784b7ca\",\n      \"block_number_minted\": \"15572796\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:06:08.153Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"84453794918345416145331514647027903846664455083247396107154093349515123913389\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"7c0212cd3daf1b6b64f193c6dc102fb4\",\n      \"block_number_minted\": \"15572811\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:09:09.838Z\",\n      \"minter_address\": null\n    },\n    {\n      \"token_address\": \"0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85\",\n      \"token_id\": \"16476931145019337030786748713476010946621971075817308111460324192065814192354\",\n      \"amount\": \"1\",\n      \"owner_of\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n      \"token_hash\": \"627ffc76405a90ee940cb91f7e90b294\",\n      \"block_number_minted\": \"15572818\",\n      \"block_number\": \"15573017\",\n      \"contract_type\": \"ERC721\",\n      \"name\": \"Ethereum Name Service\",\n      \"symbol\": \"ENS\",\n      \"token_uri\": null,\n      \"metadata\": null,\n      \"last_token_uri_sync\": null,\n      \"last_metadata_sync\": \"2022-09-20T06:11:34.545Z\",\n      \"minter_address\": null\n    }\n  ],\n  \"status\": \"SYNCED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Moralis API Key in Python using python-decouple\nDESCRIPTION: Provides a Python example (index.py) using the 'python-decouple' library to read the Moralis API key from environment variables (or a '.env' file) using the `config` function. Requires 'python-decouple' package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom decouple import config\n\napi_key = config('MORALIS_API_KEY')\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation Display\nDESCRIPTION: This snippet imports necessary React components used for rendering the documentation page. `ApiReference` is likely the main component for displaying API details, `Admonition` for styled notes/warnings, `ReactMarkdown` for rendering Markdown content, and `ApiBanner` for displaying a banner. It also imports configuration data from a JSON file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/10-Get Wallet PnL/get-wallet-profitability.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Top NFT Collections via Moralis API\nDESCRIPTION: Moralis API endpoint URL for retrieving the top NFT collections based on trading volume. This is the Moralis equivalent to the SimpleHash 'Trending Collections' endpoint. Currently, this endpoint only supports the Ethereum chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/market-data/nfts/hottest-collections\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Solana NFT Metadata via cURL Command\nDESCRIPTION: Provides a sample cURL command to fetch metadata for a specific Solana NFT using its mint address ('FVzM6rUA1SigPxh6e3iQ8dAPjQNf2guap3Xcdj8Q6R2H' in the example) via the Solana Gateway API. Replace 'YOUR_API_KEY' with a valid API key. The request uses the GET method and requires 'accept: application/json' and 'X-API-Key' headers for authentication and response format specification.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/nft-api-faq.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url 'https://solana-gateway.moralis.io/nft/mainnet/FVzM6rUA1SigPxh6e3iQ8dAPjQNf2guap3Xcdj8Q6R2H/metadata' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Update Stream Status Endpoint\nDESCRIPTION: This code renders the ApiReference component with the configuration specifically for the Update Stream Status endpoint from the Streams API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/update-stream-status.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.streams.UpdateStreamStatus} />\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component for Solana Authentication Documentation in JSX\nDESCRIPTION: This code imports the ApiReference component and a configuration object to display the API reference for verifying a bind request in the Solana Authentication API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/reference/03-Profiles/verify-request-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n# Verify bind request\n\n<ApiReference {...config.auth.verifyRequestBind} />\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component for EVM Streams Documentation\nDESCRIPTION: This code imports the ApiReference component and configuration file needed to display the API reference for the Update Stream Status endpoint in the Moralis Streams API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/update-stream-status.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Fetching User NFT Balances - JavaScript\nDESCRIPTION: Implements the '/nftBalance' GET endpoint using Moralis.EvmApi to retrieve all NFTs owned by a wallet address on a specified EVM chain. Requires Moralis API Key. Expects 'address' and 'chain' query parameters. Returns a structured list of the user's NFTs as JSON. Error responses send the error object without structure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n//GET Users NFT's\n\napp.get(\"/nftBalance\", async (req, res) => {\n  await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n\n  try {\n    const { address, chain } = req.query;\n\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address: address,\n      chain: chain,\n    });\n\n    const userNFTs = response.data;\n\n    res.send(userNFTs);\n  } catch (e) {\n    res.send(e);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Non-Normalized NFT Metadata\nDESCRIPTION: Sample of non-normalized NFT metadata showing the same data in a stringified format with escape characters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/02-NFT API/02-NFT Metadata FAQs/normalized-vs-non-normalized-metadata.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"description\\\": \\\"Friendly OpenSea Creature that enjoys long swims in the ocean.\\\", \n  \\\"external_url\\\": \\\"https://openseacreatures.io/3\\\", \n  \\\"image\\\": \\\"https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.webp\\\", \n  \\\"name\\\": \\\"Dave Starbelly\\\",\n  \\\"attributes\\\": [\n    {\n      \\\"trait_type\\\": \\\"Base\\\", \n      \\\"value\\\": \\\"Starfish\\\"\n    }, \n    {\n      \\\"trait_type\\\": \\\"Eyes\\\", \n      \\\"value\\\": \\\"Big\\\"\n    }, \n    {\n      \\\"trait_type\\\": \\\"Mouth\\\", \n      \\\"value\\\": \\\"Surprised\\\"\n    }, \n    {\n      \\\"trait_type\\\": \\\"Level\\\", \n      \\\"value\\\": 5\n    }, \n    {\n      \\\"trait_type\\\": \\\"Stamina\\\", \n      \\\"value\\\": 1.4\n    }, \n    {\n      \\\"trait_type\\\": \\\"Personality\\\", \n      \\\"value\\\": \\\"Sad\\\"\n    }, \n    {\n      \\\"display_type\\\": \\\"boost_number\\\", \n      \\\"trait_type\\\": \\\"Aqua Power\\\", \n      \\\"value\\\": 40\n    }, \n    {\n      \\\"display_type\\\": \\\"boost_percentage\\\", \n      \\\"trait_type\\\": \\\"Stamina Increase\\\", \n      \\\"value\\\": 10\n    }, \n    {\n      \\\"display_type\\\": \\\"number\\\", \n      \\\"trait_type\\\": \\\"Generation\\\", \n      \\\"value\\\": 2\n    }\n  ]\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: EvmChain Equality Comparison\nDESCRIPTION: Shows how to compare EvmChain instances with different formats.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"check 1: \", chain.equals(1));\n// check 1: true\nconsole.log(\"check 2: \", chain.equals(\"0x1\"));\n// check 2: true\nconsole.log(\"check 3: \", chain.equals(EvmChain.create(1)));\n// check 3: true\nconsole.log(\"check 4: \", chain.equals(EvmChain.create(\"0x1\")));\n// check 4: true\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component - JavaScript\nDESCRIPTION: This snippet demonstrates how to embed the DocCardList React component into the body of a Docusaurus documentation page. When placed in the file, DocCardList will render a card list based on the configuration and data provided by the theme. The component requires that Docusaurus and its theme plugins are properly set up and does not take any explicit parameters in this context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/integrations.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Creating balanceOfReceiverAbi in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new ABI for the balanceOf function to get the balance of the recipient. It's a copy of the original ABI with a renamed output parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/triggers.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst balanceOfReceiverAbi = {\n  constant: true,\n  inputs: [\n    {\n      name: \"owner\",\n      type: \"address\",\n    },\n  ],\n  name: \"balanceOf\",\n  outputs: [\n    {\n      name: \"toBalance\",\n      type: \"uint256\",\n    },\n  ],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\",\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Firebase Front-End Utils Package (Text CLI)\nDESCRIPTION: Installs the front-end utilities package to interface with Moralis Auth extension for Firebase. Requires npm and a front-end project set up. Prepares the front-end for easier authentication integration using Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_2\n\nLANGUAGE: Text CLI\nCODE:\n```\nnpm install @moralisweb3/client-firebase-auth-utils\n```\n\n----------------------------------------\n\nTITLE: Implementing Disable Totals with Moralis API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Disable Totals feature in a Moralis API call using JavaScript. It initializes Moralis, sets the necessary parameters including 'disableTotal', and makes a call to get wallet NFTs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/04-Breaking Changes/01-disable-totals.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\ntry {\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = \"eth\";\n\n  const disableTotal = true;\n\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n    disableTotal,\n  });\n\n  console.log(response?.result);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: getErc20Approvals Response Structure\nDESCRIPTION: Example response from the deprecated getErc20Approvals endpoint showing token approval details including allowance value.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-09-11-breaking-change.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cursor\": null,\n  \"result\": [\n    {\n      \"token_name\": \"stETH\",\n      \"token_symbol\": \"stETH\",\n      \"token_logo\": \"https://cdn.moralis.io/eth/0xae7ab96520de3a18e5e111b5eaab095312d7fe84.png\",\n      \"token_decimals\": \"18\",\n      \"from_wallet\": \"0xcb1c1fde09f811b294172696404e88e658659905\",\n      \"from_wallet_label\": null,\n      \"to_wallet\": \"0x1111111254eeb25477b68fb85ed929f73a960582\",\n      \"to_wallet_label\": \"1inch v5: Aggregation Router\",\n      \"contract_address\": \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\",\n      \"block_hash\": \"0xb0bfa1a5d52ed5abc15b5dcd1e4cb351f3cc3b35d4b8c3bf4e0e91ec78d76670\",\n      \"block_number\": \"17654765\",\n      \"block_timestamp\": \"2023-07-09T07:47:59.000Z\",\n      \"transaction_hash\": \"0x8ddc6e9cf29aac7b5d2d42e60d6452ca1874c05ca3f44d97bdf5007bc3e5cdce\",\n      \"transaction_index\": \"132\",\n      \"log_index\": \"559\",\n      \"value\": \"144999999999999999\",\n      \"possible_spam\": false,\n      \"value_decimal\": \"0.145\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Uniswap V3 Pair Address using Moralis SDK in TypeScript\nDESCRIPTION: Initializes the Moralis SDK using TypeScript syntax with an API key. It retrieves the Uniswap V3 pair address for WETH and LINK tokens on the Ethereum chain via `Moralis.EvmApi.defi.getPairAddress`. Depends on `moralis`, `@moralisweb3/common-evm-utils` packages, TypeScript, and a Moralis API key. Prints the resulting pair information as JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-uniswap-v3-pair-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"uniswapv3\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Top NFT Collections using SimpleHash API\nDESCRIPTION: SimpleHash API endpoint (v2) to retrieve the top NFT collections, likely ranked by volume or market capitalization. Specific ranking criteria might depend on API implementation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/collections/top_v2\n```\n\n----------------------------------------\n\nTITLE: Proxying Moralis API Calls with Firebase Cloud Functions in TypeScript\nDESCRIPTION: This snippet shows a Firebase Cloud Function in TypeScript acting as a secure proxy to the Moralis EvmApi.block.getBlock endpoint. It defines a GetBlockData interface for input, receives API call parameters, performs the API call server-side, and returns the fetched block in JSON. Dependencies include Moralis JS SDK and firebase-functions; the backend holds the Moralis API key. Input requires 'chain' and 'blockNumberOrHash'; output is the full block data as JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as functions from \\\"firebase-functions\\\";\n\ninterface GetBlockData {\n  chain: string;\n  blockNumberOrHash: string;\n}\n\nexport const getBlock = functions.https.onCall(async (data: GetBlockData) => {\n  const response = await Moralis.EvmApi.block.getBlock({\n    chain: data.chain,\n    blockNumberOrHash: data.blockNumberOrHash,\n  });\n  return response.toJSON();\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL NFT Metadata using Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to fetch metadata for a specific SPL NFT. It initializes the Moralis SDK with an API key, defines the NFT address and the Solana network (MAINNET), and then calls the `Moralis.SolApi.nft.getNFTMetadata` function. The resulting metadata is logged to the console in JSON format. It requires the 'moralis' and '@moralisweb3/common-sol-utils' packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/nft-api/how-to-get-spl-nft-metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"FVW9KoJxXzP2cCfhLfFC7hQKBZKnaoPkyZJQgvM9moWV\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.nft.getNFTMetadata({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Support Components (JavaScript)\nDESCRIPTION: This snippet imports key React components necessary to render the API reference and instructional banners on the documentation page. Dependencies include modules from the Docusaurus site structure and a local configuration JSON file to drive API reference details. The components enable consistent documentation UI and facilitate linking, admonitions, and API reference rendering. Key parameters include the config object (imported from a JSON file) which provides endpoint configuration information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/02-Get Wallet Token Balances/get-wallet-token-balances-price.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Ownership Verification with Moralis in NextJS\nDESCRIPTION: Extends getServerSideProps to verify NFT ownership using Moralis EvmApi. Retrieves user's wallet address from the session and checks for specific NFTs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-gating-nextjs.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSession } from 'next-auth/react';\nimport Moralis from 'moralis';\nimport { EvmChain } from '@moralisweb3/common-evm-utils';\n\nfunction Protected({ message, nftList }) {\n    return (\n        <div>\n            <h3>Protected content</h3>\n            <p>{message}</p>\n            <pre>{JSON.stringify(nftList, null, 2)}</pre>\n        </div>\n    );\n}\n\nexport async function getServerSideProps(context) {\n    const session = await getSession(context);\n\n    if (!session) {\n        return {\n            redirect: {\n                destination: '/signin',\n                permanent: false,\n            },\n        };\n    }\n\n    if(!Moralis.Core.isStarted){\n        await Moralis.start({ apiKey: process.env.MORALIS_API_KEY });\n    }\n\n    const nftList = await Moralis.EvmApi.nft.getWalletNFTs({\n      \tchain: EvmChain.ETHEREUM,\n        address: session.user.address,\n        // replace \"0x...\" with your NFT token address\n        tokenAddresses: [\"0x...\", ],\n    });\n\n    return {\n        props: {\n            message:\n                // if user has at least one NFT he will get protected content\n                nftList.raw.total > 0 ? 'Nice! You have our NFT' : \"Sorry, you don't have our NFT\",\n            nftList: nftList.raw.result,\n        },\n    };\n}\nexport default Protected;\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in React - JavaScript/JSX\nDESCRIPTION: This snippet imports the DocCardList component from the Docusaurus theme package. Importing this component allows for dynamic rendering of documentation cards within the page. This snippet requires a Docusaurus project with the '@theme/DocCardList' package available. No parameters are needed, and there are no inputs or outputs beyond the module import. The import must exist at the top level of a JavaScript or JSX file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/getting-started/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Get Native Balance using Python\nDESCRIPTION: Python implementation to fetch native balance of a multi-signature wallet using Moralis SDK. Uses the evm_api module from the moralis package to make the API call.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x849D52316331967b6fF1198e5E32A0eB168D039d\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.balance.get_native_balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Minting the Solana NFT using Metaplex SDK in TypeScript\nDESCRIPTION: This code snippet performs the actual NFT minting on the Solana blockchain. It uses the previously initialized `metaplex` instance and the metadata `uri` obtained from the Arweave upload step. It calls `metaplex.nfts().create()`, specifying the URI, NFT name, and seller fee basis points (royalty percentage), which prompts the connected user's wallet to sign the minting transaction.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-nft-minter.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// The data which we get from backend, after uploading, contains the URI of\n// the metdata that was uploaded.\n// We use it mint the NFT on blockchain.\n\nconst data = await metaplex\n  .nfts()\n  .create({\n    uri,\n    name,\n    sellerFeeBasisPoints: 500, // represents the royality fee for the NFT\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Documenting DeFi API Endpoints - Markdown\nDESCRIPTION: Lists available DeFi API methods in a Markdown-formatted table, with each row representing a RESTful endpoint for fetching DeFi wallet data using Moralis's DeFi API. The table describes the method name, its purpose, a link to corresponding documentation, and the exact URL for API access; these URLs use path parameters like :address and :protocol to indicate dynamic values. This documentation is intended for developers integrating with Moralis's API using HTTP GET requests, and requires an API key for authorization.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/defi-api/defi-api.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| No. | Method                       | Description                                        | API Reference                                                                       | URL                                                                                                                                                                  |\n| --- | ---------------------------- | -------------------------------------------------- | ----------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1   | `getDefiSummary`             | Get DeFi protocols by wallet                       | [Method Documentation](/web3-data-api/evm/reference/get-defi-summary)               | [https://deep-index.moralis.io/api/v2.2/wallets/:address/defi/summary](https://deep-index.moralis.io/api/v2.2/wallets/:address/defi/summary)                         |\n| 2   | `getDefiPositionsSummary`    | Get DeFi positions by wallet                       | [Method Documentation](/web3-data-api/evm/reference/get-defi-positions-summary)     | [https://deep-index.moralis.io/api/v2.2/wallets/:address/defi/positions](https://deep-index.moralis.io/api/v2.2/wallets/:address/defi/positions)                     |\n| 3   | `getDefiPositionsByProtocol` | Get detailed DeFi positions by wallet and protocol | [Method Documentation](/web3-data-api/evm/reference/get-defi-positions-by-protocol) | [https://deep-index.moralis.io/api/v2.2/wallets/:address/defi/:protocol/positions](https://deep-index.moralis.io/api/v2.2/wallets/:address/defi/:protocol/positions) |\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata with HTML Head Tag (HTML)\nDESCRIPTION: This snippet sets the page's metadata, specifying the title for the browser tab using an HTML <head> element. It ensures that the documentation page displays 'eth_chainId RPC Method - Moralis Documentation' as its title, which aids in SEO and user navigation. This block should be placed within an HTML or JSX file that supports custom head sections, or within a Docusaurus markdown file where raw HTML inclusion is enabled.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_chainId.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>eth_chainId RPC Method - Moralis Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Installing CORS for Express Server\nDESCRIPTION: Command to install CORS middleware for Express.js server\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cors\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for API Keys and Tokens\nDESCRIPTION: Sets up environment variables for Moralis API key, Discord bot token, and Discord channel ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nAPIKEY = 'YOUR_API_KEY'\nPASS = 'YOUR_BOT_TOKEN'\nCHANNEL = 'CHANNEL_ID'\n```\n\n----------------------------------------\n\nTITLE: Example Lens Profile Data Structure (JSON)\nDESCRIPTION: Shows a sample JSON structure representing the Lens profile data logged to the browser console. This illustrates the kind of data received from the Lens API query, including id, name, bio, and attributes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"0x09\",\n    \"name\": \"Nicolo\",\n    \"bio\": \"Strategy @AaveAave.lens & @LensProtocol\\n\\nnicolo.eth\",\n    \"attributes\": [\n        {\n            \"displayType\": null,\n            \"traitType\": \"string\",\n            \"key\": \"location\",\n            \"value\": \"London, UK\",\n            \"__typename\": \"Attribute\"\n        },\n        {\n            \"displayType\": null,\n            \"traitType\": \"string\",\n            \"key\": \"twitter\",\n            \"value\": \"nicolo\",\n            \"__typename\": \"Attribute\"\n        },\n        {\n            \"displayType\": null,\n            \"traitType\": \"string\",\n            \"key\": \"statusMessage\",\n            \"value\": \"🌿👻\",\n            \"__typename\": \"Attribute\"\n        },\n        {\n            \"displayType\": null,\n            \"traitType\": \"string\",\n            \"key\": \"app\",\n            \"value\": \"Lenster\",\n            \"__typename\": \"Attribute\"\n        }\n    ],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Backend - JSON\nDESCRIPTION: Defines the package.json for the Express backend, specifying metadata, entry point, scripts (including a start script using nodemon), author/license info, and all required dependencies' versions. Expects all necessary modules to be installed. Inputs: none. Outputs: structure for NPM to run and manage the backend.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"zapper\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"nodemon index.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.0.2\",\n    \"express\": \"^4.18.1\",\n    \"moralis\": \"^2.4.0\",\n    \"nodemon\": \"^2.0.19\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sushiswap V2 Pair Reserves with Moralis SDK - Python\nDESCRIPTION: This Python snippet illustrates how to invoke Moralis' DeFi API to fetch Sushiswap V2 liquidity pair reserves. The script constructs parameters including the pair address and chain, calls 'evm_api.defi.get_pair_reserves', and prints the results. The script requires Python, the 'moralis' package, and your API key. Optional parameters like 'to_block' or 'to_date' can be passed for advanced queries.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-reserves.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"pair_address\": \"0xc40d16476380e4037e6b1a2594caf6a6cc8da967\",\n    \"chain\": \"eth\",\n    # \"to_block\": \"\",\n    # \"to_date\": \"\",\n}\n\nresult = evm_api.defi.get_pair_reserves(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n\n```\n\n----------------------------------------\n\nTITLE: Querying ERC20 Token Balances with Moralis Web3 API (Python)\nDESCRIPTION: This Python snippet queries the Moralis EVM API for all ERC20 token balances held by a given address on the Ethereum chain. Required dependencies include the 'moralis' Python package. The script defines the API key and parameters, then prints the resulting token balance list as returned by get_wallet_token_balances. Swap 'YOUR_API_KEY' for a valid key and ensure the moralis package is installed to run this script.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/03-Token Balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.token.get_wallet_token_balances(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Example of Normalized NFT Metadata in JSON\nDESCRIPTION: A sample of normalized NFT metadata that follows the standardized format. This example shows a complete NFT object with name, description, image URL, and various attributes with different trait types and display types.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/02-NFT Metadata/normalized-vs-non-normalized-metadata.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Friendly OpenSea Creature that enjoys long swims in the ocean.\",\n  \"external_url\": \"https://openseacreatures.io/3\",\n  \"image\": \"https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.webp\",\n  \"name\": \"Dave Starbelly\",\n  \"attributes\": [\n    {\n      \"trait_type\": \"Base\",\n      \"value\": \"Starfish\"\n    },\n    {\n      \"trait_type\": \"Eyes\",\n      \"value\": \"Big\"\n    },\n    {\n      \"trait_type\": \"Mouth\",\n      \"value\": \"Surprised\"\n    },\n    {\n      \"trait_type\": \"Level\",\n      \"value\": 5\n    },\n    {\n      \"trait_type\": \"Stamina\",\n      \"value\": 1.4\n    },\n    {\n      \"trait_type\": \"Personality\",\n      \"value\": \"Sad\"\n    },\n    {\n      \"display_type\": \"boost_number\",\n      \"trait_type\": \"Aqua Power\",\n      \"value\": 40\n    },\n    {\n      \"display_type\": \"boost_percentage\",\n      \"trait_type\": \"Stamina Increase\",\n      \"value\": 10\n    },\n    {\n      \"display_type\": \"number\",\n      \"trait_type\": \"Generation\",\n      \"value\": 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Domain with Moralis SDK - Python\nDESCRIPTION: This Python example demonstrates how to resolve an ENS domain to an Ethereum address using the 'moralis' library. It uses 'evm_api.resolve.resolve_ens_domain', requires the api_key and a dictionary with the 'domain' value. After making the API call, it prints the result. You must install the 'moralis' package via Pip and provide a valid API key. Only the domain parameter is needed, and the output is the resulting Ethereum address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-domain.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n  \"domain\": \"vitalik.eth\",\n}\n\nresult = evm_api.resolve.resolve_ens_domain(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Views for Web3 Authentication in Django (Python)\nDESCRIPTION: This snippet shows the initial setup for the `views.py` file in the `web3_auth` Django application. It includes necessary imports (`json`, `requests`, Django modules for rendering, HTTP responses, authentication, user models, and datetime) and defines a placeholder for the Moralis Web3 API Key (`API_KEY`). This file will contain the core logic for handling authentication requests and user interactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-python-django.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nviews.py\nimport json\nimport requests\n\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse, JsonResponse\nfrom django.contrib.auth import authenticate, login\nfrom django.contrib.auth.models import User\nfrom datetime import datetime, timedelta, timezone\n\nAPI_KEY = 'WEB3_API_KEY_HERE'\n# this is a check to make sure the API key was set\n# you have to set the API key only in line 9 above\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Angular MetaMask Authentication - TypeScript\nDESCRIPTION: This snippet imports necessary modules and libraries in an Angular component for handling authentication with MetaMask, including Angular core and router modules, axios for HTTP requests, multiple functions from the Wagmi Web3 library, and environment configuration. Dependencies include @angular/core, @angular/router, axios, and @wagmi/core, as well as a local Angular environment module. Imports must be at the top of the signin.component.ts file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from \"@angular/core\";\n// for navigating to other routes\nimport { Router } from \"@angular/router\";\n\n// for making HTTP requests\nimport axios from \"axios\";\n\nimport {\n  connect,\n  disconnect,\n  getAccount,\n  injected,\n  signMessage,\n} from \"@wagmi/core\";\nimport { http, createConfig } from \"@wagmi/core\";\nimport { mainnet, sepolia } from \"@wagmi/core/chains\";\n\nimport { environment } from \"../../environments/environment\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Solana getPortfolio Reference - JavaScript\nDESCRIPTION: This snippet imports the ApiReference React component and a JSON configuration object, then renders the ApiReference component for the Solana getPortfolio endpoint. Dependencies include React, the Moralis documentation's component library, and the associated configuration JSON. The expected input is a valid configuration object describing the API; output is a rendered documentation section for the Solana portfolio retrieval endpoint. This pattern allows for modular API documentation integration within Docusaurus-powered docs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/reference/09-Balance API/get-portfolio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.solana.getPortfolio} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Record Consumption Statistics in JSON\nDESCRIPTION: This example demonstrates the response from the /status API endpoint, showing total processed logs, transactions, and internal transactions for the current billing period. The total consumed records would be the sum of these values.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/records-and-pricing.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"totalWebhooksDelivered\": 1288,\n  \"totalWebhooksFailed\": 17,\n  \"totalLogsProcessed\": 4257,\n  \"totalTxsProcessed\": 0,\n  \"totalTxsInternalProcessed\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Expressing Query Parameters for Customizing API Results - Markdown\nDESCRIPTION: Provides usage examples for the API query parameters `min_pair_side_liquidity_usd` and `max_token_inactivity` within Markdown text, guiding readers on how to set custom liquidity thresholds or inactivity periods. These textual code references inform users about expected inputs (e.g. integer USD value for liquidity threshold, integer day count for inactivity). Outputs: adjusted API behaviors for omitted or returned tokens, as described elsewhere.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/faqs/07-token-price-logic.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`min_pair_side_liquidity_usd=5000` ensures only pairs with at least $5000 in liquidity are considered.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`max_token_inactivity=14` excludes tokens without trading activity for 14 days.\n```\n\n----------------------------------------\n\nTITLE: Installing Axios Dependency - Bash\nDESCRIPTION: Installs the 'axios' HTTP client library into the project, which enables making HTTP requests to the backend server from Angular. The code should be executed in the project root. Axios is required for client-server communication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install axios\n```\n\n----------------------------------------\n\nTITLE: Example Decoded Transaction Response from Moralis API (JSON)\nDESCRIPTION: This JSON object illustrates the structure of a response from Moralis's verbose transaction endpoints (`/:address/verbose` or `/transaction/:transaction_hash/verbose`). It shows a specific Ethereum transaction (`0x012b...`) with standard fields, crucially including the `decoded_call` object at the top level (representing the decoded transaction input data) and a `decoded_event` object within the `logs` array (representing decoded event data). These decoded fields demonstrate the transaction labeling feature.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/04-Blockchain API/transaction-labelling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"0x012b9b98e21664117ec0b499d726a39f492ac8bd402cca8bebcbd163b9f75760\",\n  \"nonce\": \"567407\",\n  \"transaction_index\": \"153\",\n  \"from_address\": \"0x48c04ed5691981c42154c6167398f95e8f38a7ff\",\n  \"to_address\": \"0x2b591e99afe9f32eaa6214f7b7629768c40eeb39\",\n  \"value\": \"0\",\n  \"gas\": \"180000\",\n  \"gas_price\": \"41000000000\",\n  \"input\": \"0xa9059cbb000000000000000000000000eafeba1882a066a4ecca2f9d596cd0c4e722bfda000000000000000000000000000000000000000000000000000000b4ec8a8e9a\",\n  \"receipt_cumulative_gas_used\": \"11843646\",\n  \"receipt_gas_used\": \"51617\",\n  \"receipt_contract_address\": null,\n  \"receipt_root\": null,\n  \"receipt_status\": \"1\",\n  \"block_timestamp\": \"2023-02-15T14:51:23.000Z\",\n  \"block_number\": \"16634851\",\n  \"block_hash\": \"0x83e09485f7dc9fdef520ae59bbc02ebbca2e2508fc6b7fa5fe6da93a21c71272\",\n  \"transfer_index\": [\n    16634851,\n    153\n  ],\n  \"logs\": [\n    {\n      \"log_index\": \"285\",\n      \"transaction_hash\": \"0x012b9b98e21664117ec0b499d726a39f492ac8bd402cca8bebcbd163b9f75760\",\n      \"transaction_index\": \"153\",\n      \"transaction_value\": \"0\",\n      \"address\": \"0x2b591e99afe9f32eaa6214f7b7629768c40eeb39\",\n      \"data\": \"0x000000000000000000000000000000000000000000000000000000b4ec8a8e9a\",\n      \"topic0\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n      \"topic1\": \"0x00000000000000000000000048c04ed5691981c42154c6167398f95e8f38a7ff\",\n      \"topic2\": \"0x000000000000000000000000eafeba1882a066a4ecca2f9d596cd0c4e722bfda\",\n      \"topic3\": null,\n      \"block_timestamp\": \"2023-02-15T14:51:23.000Z\",\n      \"block_number\": \"16634851\",\n      \"block_hash\": \"0x83e09485f7dc9fdef520ae59bbc02ebbca2e2508fc6b7fa5fe6da93a21c71272\",\n      \"transfer_index\": [\n        16634851,\n        153,\n        285\n      ],\n      \"decoded_event\": {\n        \"signature\": \"Transfer(address,address,uint256)\",\n        \"label\": \"Transfer\",\n        \"type\": \"event\",\n        \"params\": [\n          {\n            \"name\": \"from\",\n            \"value\": \"0x48c04ed5691981C42154C6167398f95e8f38a7fF\",\n            \"type\": \"address\"\n          },\n          {\n            \"name\": \"to\",\n            \"value\": \"0xeafebA1882a066A4eCcA2F9d596Cd0c4E722BfDa\",\n            \"type\": \"address\"\n          },\n          {\n            \"name\": \"value\",\n            \"value\": \"777062616730\",\n            \"type\": \"uint256\"\n          }\n        ]\n      }\n    }\n  ],\n  \"decoded_call\": {\n    \"signature\": \"transfer(address,uint256)\",\n    \"label\": \"transfer\",\n    \"type\": \"function\",\n    \"params\": [\n      {\n        \"name\": \"_to\",\n        \"value\": \"0xeafebA1882a066A4eCcA2F9d596Cd0c4E722BfDa\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"value\": \"777062616730\",\n        \"type\": \"uint256\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Collection Transfers using Moralis NFT API (Python)\nDESCRIPTION: This Python snippet shows how to fetch all transfer events for a specified NFT collection using the Moralis EVM API. It requires the 'moralis' Python package. Users need to provide their API key, collection address, and blockchain ('eth' for Ethereum) in the params dictionary. The evm_api.nft.get_nft_contract_transfers function is called with these parameters, and the resulting transfers data is printed. The function returns a JSON-like object listing transfer information, and supports optional formatting, e.g., as decimal.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft-collection.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n    \"chain\": \"eth\",\n    \"format\": \"decimal\",\n}\n\nresult = evm_api.nft.get_nft_contract_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Using API Response Data Types\nDESCRIPTION: Shows how to work with data types returned from API calls.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await Moralis.EvmApi.balance.getNativeBalance(params);\n\n// myBalance is an instance of the EvmNative data type\nconst myBalance = response.result.balance;\n\nmyBalance.wei; // 1000000000000000000\nmyBalance.ether; // 1.0\nmyBalance.equals(\"1000000000000000000\"); // true\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Function for Native Balance in GameSparks\nDESCRIPTION: This code snippet shows how to invoke an AWS Lambda function from a GameSparks request handler to get the native balance of a wallet address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/aws-gamesparks-integration-with-unity.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = GameSparks().Lambda(\"aws-node-project-dev-getNativeBalance\").Invoke(\n    {\n      // Example of how you would send a parameter to Lambda\n      \"address\": message.address,\n      \"chain\": message.chain\n    }\n);\n\nGameSparks().Logging().Debug(\"Result from Lambda is:\");\nGameSparks().Logging().Debug(JSON.stringify(response.Payload));\n\nreturn GameSparks().Messaging().Response({\"result\": parseFloat(response.Payload.result)});\n```\n\n----------------------------------------\n\nTITLE: Displaying API Reference using React Component\nDESCRIPTION: This JSX snippet renders the `ApiReference` React component, passing configuration data for the `eth_maxPriorityFeePerGas` RPC method via props. This component likely handles the display of API details based on the provided configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_maxPriorityFeePerGas.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.rpc.eth_maxPriorityFeePerGas} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Streams Firebase Extension - Shell Command\nDESCRIPTION: This command installs the official Moralis Streams extension into your Firebase project, enabling automated Firestore updates based on blockchain events. Running this command will prompt for your Moralis API key and perform all necessary backend setup in your Firebase project. Prerequisite: You must have the Firebase CLI installed and be authenticated with the target project. No additional arguments are required, but you may review the extension's details during installation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/firebase.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfirebase ext:install moralis/moralis-streams\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending NFT Collections via SimpleHash API\nDESCRIPTION: SimpleHash API endpoint URL for retrieving trending NFT collections. This endpoint is used as a reference for comparison with the Moralis equivalent.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/collections/trending\n```\n\n----------------------------------------\n\nTITLE: Calling a Firebase Proxy Function from the Frontend in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how a frontend app invokes the secured Firebase Cloud Function ('getBlock') using firebase.functions(). The client passes chain and blockNumberOrHash as input, but never exposes the API key, which remains secured on the backend. This pattern requires the Firebase JS SDK on the client and expects a JSON object containing chain and blockNumberOrHash as input; output is the proxied Moralis API response.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = firebase.functions();\n\nconst result = await functions.httpsCallable(\\\"getBlock\\\")({\n  chain: \\\"0x1\\\",\n  blockNumberOrHash:\n    \\\"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171\\\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet ERC20 Token Balances with Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to retrieve the balance of specified ERC20 tokens for a given wallet address using the Moralis SDK. It requires Moralis initialization with an API key, the target wallet address, an array of token contract addresses, and the chain identifier. The raw API response with balance information is logged.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"USER_WALLET_ADDRESS\";\n\n  const tokenAddresses = [\"ERC20_TOKEN_ADDRESS\"];\n\n  const chain = \"CHAIN\"; // e.g EvmChain.ETHEREUM, EvmChain.POLYGON\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    chain,\n    tokenAddresses,\n    address,\n  });\n\n  console.log(response.raw);\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Collection Owners with Moralis SDK in TypeScript\nDESCRIPTION: This snippet shows the TypeScript implementation for fetching NFT owners of a specific collection using the Moralis SDK. Similar to the JavaScript version, it initializes Moralis, specifies the contract address and chain (Ethereum), calls `Moralis.EvmApi.nft.getNFTOwners`, and logs the JSON response. Type annotations are used for better code clarity and safety.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-the-owners-of-an-nft-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xa186d739ca2b3022b966194004c6b01855d59571\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTOwners({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Uniswap V2 Pair Reserves using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch the reserves for a specific Uniswap V2 pair address on the Ethereum network using the Moralis SDK. It initializes the Moralis SDK with an API key, specifies the pair address and chain, calls the `Moralis.EvmApi.defi.getPairReserves` function, and logs the resulting JSON response containing reserve0 and reserve1.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-reserves.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const pairAddress = \"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Environment Variable\nDESCRIPTION: Adds the `SERVER_URL` variable to the Angular environment configuration file (`src/environments/environment.ts`). This variable stores the base URL of the backend server (running locally on port 3000 in this example) for the frontend application to communicate with.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const environment = {\n  production: false,\n  SERVER_URL: \"http://localhost:3000\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Server Endpoint for Authenticating Session (Node.js)\nDESCRIPTION: Defines a GET endpoint `/authenticate` in the Node.js/Express server. This endpoint checks for the presence of the `jwt` cookie in the incoming request. If the cookie exists, it attempts to verify the JWT using `jwt.verify` and the `AUTH_SECRET`. If verification is successful, it sends the decoded user data back to the client. If the cookie is missing or verification fails, it returns a 403 Forbidden status.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/authenticate\", async (req, res) => {\n  const token = req.cookies.jwt;\n  if (!token) return res.sendStatus(403); // if the user did not send a jwt token, they are unauthorized\n\n  try {\n    const data = jwt.verify(token, process.env.AUTH_SECRET);\n    res.json(data);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Informational Admonition for Premium API Endpoint (Markdown/JSX)\nDESCRIPTION: This code block creates an Admonition UI section warning users about the need for a Moralis Business plan API key. It uses the Admonition React component with informative text in Markdown/JSX. Inputs include the text content and optional icons; output is a styled callout on the documentation page. Requires the Admonition component and supporting Markdown rendering in the environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/03- Get Entities/get-entity-by-id.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Admonition type=\"info\" icon=\"💡\" title=\"Premium Endpoint\">\n  <p>\n    To use this API, you will need an API key associated with a Moralis account\n    on the <strong>Business</strong> plan or higher.\n  </p>\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList with Docusaurus in JavaScript\nDESCRIPTION: This snippet first imports the DocCardList React component from Docusaurus and then renders it within the page. The component is used to display a list of documentation cards, providing an organized and visual navigation layout. Required dependencies include Docusaurus and React, and the snippet presumes it is placed within an MDX file in a Docusaurus project. The main parameter is the DocCardList component itself, and it outputs a structured navigation UI. No additional configuration options are provided in this usage, and its output is determined by the site's sidebar configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL Token Price with Moralis SDK in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to fetch the price of an SPL token on the Solana mainnet. It initializes the Moralis SDK with an API key, specifies the token address and network, and then calls `Moralis.SolApi.token.getTokenPrice` to retrieve the price data, logging the JSON response. Requires `moralis` and `@moralisweb3/common-sol-utils` packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/how-to-get-spl-token-price.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.token.getTokenPrice({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Verbose Wallet Transactions with Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript script initializes the Moralis SDK, specifies a wallet address and the Ethereum chain using `EvmChain`, and calls `Moralis.EvmApi.transaction.getWalletTransactionsVerbose` to get detailed transaction data. It requires the `moralis` and `@moralisweb3/common-evm-utils` packages, a TypeScript setup, and a Moralis API key. The fetched data is outputted as JSON.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-transaction-verbose.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response =\n    await Moralis.EvmApi.transaction.getWalletTransactionsVerbose({\n      address,\n      chain,\n    });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Dashboard in TypeScript\nDESCRIPTION: Code to set up a Parse Dashboard instance with application configuration including app ID, master key, server URL, and app name.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport ParseDashboard from 'parse-dashboard';\n\nexport const parseDashboard = new ParseDashboard({\n  apps: [\n    {\n      appId: config.APPLICATION_ID, // Server Application ID\n      masterKey: config.MASTER_KEY, // Server Master Key\n      serverURL: config.SERVER_URL, // Server URL\n      appName: config.APP_NAME, // Application Name\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Portfolio Balance using Moralis SDK (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Moralis SDK to fetch the portfolio balance for a Solana address. It initializes the Moralis SDK with an API key, specifies the target address and network (MAINNET), and calls the `Moralis.SolApi.account.getPortfolio` method. The result, containing token, NFT, and native balances, is logged to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials/balance-api/how-to-get-solana-portfolio-balance-of-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript index.js\nconst Moralis = require(\"moralis\").default;\nconst { SolNetwork } = require(\"@moralisweb3/common-sol-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getPortfolio({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Inspecting x-records-charged in Streams API Webhook Headers - JSON\nDESCRIPTION: This snippet shows an example HTTP response headers object containing the 'x-records-charged' field, which indicates the number of records billed in a Streams API webhook request. It demonstrates how Moralis exposes usage counts through response headers. The sample highlights required header keys, particularly 'x-records-charged', and their typical values such as '20' (charged) or '0' (not charged for unconfirmed blocks). Dependencies include access to the Streams API and knowledge of HTTP headers. Inputs are implied from webhook activity; output is structured header data for billing transparency.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/getting-started/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    'x-region': 'us-west-2',\\n    'x-queue-size': '0',\\n    'x-records-charged': ‘20’\\n    'x-signature': '0xdf49163b5273b50a8da48e82b7254b45d81aeee9a02f1909a45d7aaea240e9c2',\\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components - Docusaurus React - JavaScript\nDESCRIPTION: Imports reusable documentation components, such as ApiReference, Admonition, Link, and endpoint badges, to compose the documentation page. Prerequisites include a Docusaurus project environment and the presence of the referenced modules. These imports are used to render premium badges, API details, and supplementary info; they do not perform direct algorithmic operations or side effects. Inputs are context/configuration objects, with outputs rendered reactively in the documentation UI.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/08-Get Trending Tokens/trending-tokens-api.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport { PremiumEndpointBadge } from \"@site/src/components/PremiumEndpointBadge/PremiumEndpointBadge.js\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Moralis API Documentation Components in React (JavaScript)\nDESCRIPTION: This snippet imports React components and configuration required to render the Moralis API reference documentation within a Docusaurus project. Dependencies include '@site/src/components/ApiReference', '@theme/Admonition', '@docusaurus/Link', and a local JSON configuration file. The imported components are used to compose the documentation page, while the config file contains endpoint-specific settings for API reference displays. No function is exported; these imports enable subsequent rendering or embedding operations.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/01-Get Token Balances/get-wallet-token-balances-price.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with Admonition in React/JSX\nDESCRIPTION: This JSX snippet renders the ApiReference component, passing in configuration from a JSON file to display the 'Get decoded wallet transactions' API documentation. It also provides an Admonition notice with additional information about ABI decoding and instructions for submitting new contract ABIs through a Link. Dependencies include the imported React components and a configuration JSON. Key input is the config object, and the output is the rendered documentation page section. The snippet is intended for use within a Docusaurus/React environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/13-Blockchain API/02-Get Transactions/get-wallet-transactions-verbose.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.transaction.getWalletTransactionsVerbose}>\n  <Admonition type=\"info\" title=\"Missing Decodings\">\n    <p>\n      We only decode transactions from verified ABIs. We are continuously adding\n      to our repository of verified contract ABIs.\n    </p>\n    <p>\n      To add new ABIs for decoding, please submit them on our{\" \"}\n      <Link href=\"https://roadmap.moralis.io/b/submit-contract-abis-for-decoding/\">\n        ABI requests board.\n      </Link>\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing Moralis Namespaces in C#\nDESCRIPTION: Imports the necessary Moralis namespaces (`Moralis` and `Moralis.Web3Api.Models`) required to use the Moralis SDK functionalities, including API models like `ChainList` and `NativeBalance`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Moralis;\nusing Moralis.Web3Api.Models;\n```\n\n----------------------------------------\n\nTITLE: Checking Endpoint Weights in JavaScript\nDESCRIPTION: Code example showing how to check the compute unit weights of Moralis API endpoints using JavaScript. It demonstrates initializing the Moralis SDK with an API key and calling the endpointWeights method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/resources/05-compute-units-cu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.utils.endpointWeights();\n\nconsole.log(response?.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in handler.js (JavaScript)\nDESCRIPTION: Imports the `body-parser` middleware module and the `moralis` SDK default export at the beginning of the `handler.js` file. These packages are required for parsing incoming request bodies and interacting with the Moralis Web3 API, respectively.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst bodyParser = require(\"body-parser\");\nconst Moralis = require(\"moralis\").default;\n```\n\n----------------------------------------\n\nTITLE: Filtering Moralis Stream Events by Value Range using JSON\nDESCRIPTION: This JSON code defines a filter object for Moralis Streams, specifically targeting the `value` parameter of an event (like an ERC20 Transfer). It uses the `and` operator to combine two conditions: `gt` (greater than `5000000000`) and `lt` (less than `50000000000`). This effectively filters for events where the `value` is between 5000 and 50000 USDC (assuming 6 decimals), excluding the boundaries.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/filter-streams.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"and\": [{ \"gt\": [\"value\", \"5000000000\"] }, { \"lt\": [\"value\", \"50000000000\"] }]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata and Sidebar Structure in Markdown\nDESCRIPTION: This snippet uses Markdown frontmatter to define the page title, sidebar position, routing slug, and custom sidebar class for the Developer Tools documentation page. This metadata is used by Docusaurus to organize navigation and appearance. The parameters include 'title' for the page header, 'sidebar_position' for ordering, 'slug' for routing, and 'sidebar_class_name' for custom CSS styling. These fields are required for Docusaurus navigation and theming to function correctly.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/developer-tools.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Developer tools\"\nsidebar_position: 3000\nslug: \"../../developer-tools\"\nsidebar_class_name: \"sidebar-developer-tools\"\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Global Styles for React Portfolio Dashboard\nDESCRIPTION: This CSS snippet sets global styles for the body and code elements, establishing a dark theme and specifying font families for the entire application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/zapper-clone.md#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: rgb(33, 33, 38);\n  color: white;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Document List in JSX (Docusaurus)\nDESCRIPTION: This snippet renders the imported `DocCardList` component within a MDX page. In the context of Docusaurus, this component automatically generates a list or grid of cards, typically linking to other documentation pages found within the same directory or as configured, serving as an index or overview.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/tutorials.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Verifying Authentication Signature via Moralis Auth - NodeJS\nDESCRIPTION: Provides an asynchronous function verify that validates a user's message and signature using Moralis.Auth.verify. It takes message and signature arguments from the client (after signing), and uses the NETWORK constant as context. Returns verification data confirming user identity. Assumes Moralis SDK is set up and ready for use; required for completing the authentication process from the Unity or other clients.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function verify(message, signature) {\n\n    const verifiedData = Moralis.Auth.verify({\n        message: message,\n        signature: signature,\n        network: NETWORK,\n    })\n\n    return verifiedData\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component in Markdown with React (MDX)\nDESCRIPTION: This snippet demonstrates embedding the ApiReference React component within a markdown (MDX) file to display API documentation dynamically. The spread syntax applies the `resolveDomain` configuration, enabling the component to display the 'Unstoppable Lookup By Domain' API interface. The dependency is the presence of the ApiReference React component and the relevant section in the imported JSON config.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/07-Domains Lookups/resolve-domain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ApiReference {...config.resolve.resolveDomain} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Multi-Chain Wallet Activity with Moralis SDK in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to retrieve active chains for a wallet address using the Moralis SDK and TypeScript. It initializes Moralis, defines the address and chains (Ethereum, BSC, Polygon) using `EvmChain` enum, and calls `Moralis.EvmApi.wallets.getWalletActiveChains`. The resulting activity data is then logged.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/01-Wallet Details/how-to-get-multichain-activity-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  const response = await Moralis.EvmApi.wallets.getWalletActiveChains({\n    address,\n    chains,\n  });\n\n  console.log(response.toJSON());\n}\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Internal Transactions by Hash using Moralis SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates initializing the Moralis SDK and calling `Moralis.EvmApi.transaction.getInternalTransactions` to retrieve internal transactions by hash on the Ethereum chain. It uses strong typing with `EvmChain` and requires the `moralis` and `@moralisweb3/common-evm-utils` packages, along with an API key, transaction hash, and chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-internal-transactions-by-hash.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript index.ts\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const transactionHash =\n    \"0xae5f9a43f424624376ea7479ce7b0ab25e9eba11f1c4791ec4e68f0206b5e071\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.transaction.getInternalTransactions({\n    transactionHash,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n```\n\n----------------------------------------\n\nTITLE: Importing the ApiBanner Component - React - JavaScript\nDESCRIPTION: Imports the ApiBanner component from a relative path within the site's src directory, written in TypeScript JSX (.tsx). This import is intended to render a banner or notification at the top of the API documentation page, potentially to display API-related updates or alerts. No additional dependencies except React, and the import path assumes project-local context. The component is not shown being rendered in this snippet.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/defi-api/defi-api.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Querying Closest Block by Unix Timestamp with Moralis SDK (Python)\nDESCRIPTION: This Python snippet demonstrates how to use the Moralis Python SDK to access the get_date_to_block endpoint, requiring the moralis package. The code sets the api_key, prepares the date (unix timestamp string) and chain parameters, and fetches the closest block using evm_api.block.get_date_to_block. The result is printed as a dictionary. Ensure all dependencies are installed and that your API key is valid.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-by-unix-timestamp.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"date\": \"1667823435\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.block.get_date_to_block(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Formatting and Displaying ERC-20 Token Balances in C#\nDESCRIPTION: Checks if the retrieved list of ERC-20 token balances is not null and contains items. If tokens are found, it iterates through the list and prints the symbol, name, and balance (as provided by the SDK, likely already formatted or in native units) for each token. If no tokens are found, it prints \"None\".\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine(\"\\n\\nYour ERC 20 Tokens:\");\n\nif (erc20Balnaces != null && erc20Balnaces.Count > 0)\n{\n    // Print out each token with symbol and balance.\n    foreach (Erc20TokenBalance tb in erc20Balnaces)\n    {\n        Console.WriteLine($\"\\t{tb.Symbol} - {tb.Name}: {tb.NativeTokenBalance}\"); \n    }\n}\nelse\n{\n    Console.WriteLine(\"\\tNone\");\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Moralis Stream Advanced Options in WebUI\nDESCRIPTION: This JSON configuration is used in the Moralis WebUI to set up a stream with advanced filtering. It defines filters to detect USDC transfers where either the sender or receiver is the zero address (burns or mints) and the transferred amount is at least 10000000000 (10,000 USDC with decimals).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-monitor-for-er-c20-token-burns-or-mints.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"topic0\": \"Transfer(address,address,uint256)\",\n    \"filter\": {\n      \"or\": [\n        {\n          \"and\": [\n            { \"eq\": [\"sender\", \"0x00000...00000\"] },\n            { \"gte\": [\"amount\", \"10000000000\"] }\n          ]\n        },\n        {\n          \"and\": [\n            { \"eq\": [\"receiver\", \"0x00000...00000\"] },\n            { \"gte\": [\"amount\", \"10000000000\"] }\n          ]\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Reference for Solana Authentication Challenge - React JavaScript\nDESCRIPTION: This code imports a React component (ApiReference) and a JSON configuration object, then renders the ApiReference component with a specific configuration prop for the Solana request challenge. Dependencies include React, the ApiReference component, and a local JSON configuration file. The component expects particular structure on the imported config; any changes in the configsV2.json format may require this file to be updated as well.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/reference/02-Challenge/request-challenge-solana.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.auth.requestChallengeSolana} />\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components in JavaScript/React\nDESCRIPTION: Imports critical React and Docusaurus modules for rendering documentation, references, and configuration. Dependencies include '@site/src/components/ApiReference' for API specs, '@theme/Admonition' for info/warning displays, '@docusaurus/Link' for inter-page navigation, and a local JSON config for API settings. Inputs are import statements, and outputs are ready-to-use components—ensure compatible Docusaurus and React setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_feeHistory.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: JSON Response for getDateToBlock Endpoint\nDESCRIPTION: Sample JSON response returned by the Moralis getDateToBlock endpoint. It includes the block number, formatted date, and the original unix timestamp that was provided in the request.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-by-unix-timestamp.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"block\": 15918090,\n  \"date\": \"2022-11-07T12:17:15+00:00\",\n  \"timestamp\": 1667823435\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Parse Dashboard\nDESCRIPTION: Configuration for Parse Dashboard to manage database and server features.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport ParseDashboard from 'parse-dashboard';\n\nexport const parseDashboard = new ParseDashboard({\n  apps: [\n    {\n      appId: config.APPLICATION_ID, // Server Application ID\n      masterKey: config.MASTER_KEY, // Server Master Key\n      serverURL: config.SERVER_URL, // Server URL\n      appName: config.APP_NAME, // Application Name\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Streams Replay History API Reference (JavaScript/JSX)\nDESCRIPTION: This snippet renders the ApiReference React component, spreading in configuration options for the Streams API's ReplayHistory from the imported config object. The component is responsible for programmatically displaying structured API details, using the settings provided. It requires properly structured configuration properties and a compatible parent React rendering environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/01-History/replay-history.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.streams.ReplayHistory} />\n```\n\n----------------------------------------\n\nTITLE: Describing Moralis API Endpoint Rate Limit Properties - JSON\nDESCRIPTION: This snippet specifies the structure and properties of the Moralis API endpoint 'syncNFTContract', listing its path, pricing, and computational unit (CU) cost per API call. It demonstrates how to define and document API endpoint characteristics relevant to rate limiting and planning usage according to Moralis account throughput. Expected input is JSON; no external dependencies are needed except for understanding the Moralis API structure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/06-rate-limits.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"syncNFTContract\",\n  \"path\": \"/nft/{address}/sync\",\n  \"price\": 5,\n  \"rateLimitCost\": 25\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component - TypeScript/React\nDESCRIPTION: This import statement brings in the 'ApiReference' React component, which is likely used to display the API documentation for a specific API endpoint. The file path points to a TypeScript file within the local documentation project, and it is necessary for rendering information about API methods. There are no parameters or returned values pertinent to this import beyond its effect in making the referenced component available.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/02-Get Wallet Token Balances/get-wallet-token-balances.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for ERC20 Metadata by Symbols Query\nDESCRIPTION: This JSON object shows an example response from the `getTokenMetadataBySymbol` Moralis API endpoint. It contains an array of objects, each representing an ERC20 token found for the requested symbols (LINK, UNI, AAVE). Each object includes details like the token's contract address, name, symbol, decimals, logo URL, thumbnail URL, and other metadata.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-symbols.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\n  {\n    \"address\": \"0x514910771af9ca656af840dff83e8264ecf986ca\",\n    \"name\": \"Chain Link\",\n    \"symbol\": \"LINK\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca.webp\",\n    \"logo_hash\": \"fd74ea1227adb458733847c09aab05d89c35c14b640c5ee1e0a8bffa79193eb4\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0x514910771af9ca656af840dff83e8264ecf986ca_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  {\n    \"address\": \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n    \"name\": \"Uniswap\",\n    \"symbol\": \"UNI\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984.webp\",\n    \"logo_hash\": \"064ee9557deba73c1a31014a60f4c081284636b785373d4ccdd1b3440df11f43\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  },\n  {\n    \"address\": \"0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9\",\n    \"name\": \"Aave Token\",\n    \"symbol\": \"AAVE\",\n    \"decimals\": \"18\",\n    \"logo\": \"https://cdn.moralis.io/eth/0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9.webp\",\n    \"logo_hash\": \"a43e5ac48a66d8b0eac410ac2f5634c2517acda6f4723a55b99e3c5906132a1b\",\n    \"thumbnail\": \"https://cdn.moralis.io/eth/0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9_thumb.webp\",\n    \"block_number\": null,\n    \"validated\": null,\n    \"created_at\": \"2022-01-20T10:39:55.818Z\"\n  }\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Decoded Transaction by Hash via Moralis API URL\nDESCRIPTION: API endpoint URL for fetching the decoded details of a specific transaction using its hash. Corresponds to the `getDecodedTransactionByHash` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/blockchain-api.md#2025-04-23_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/transaction/:transaction_hash/verbose\n```\n\n----------------------------------------\n\nTITLE: Basic Express Server Setup\nDESCRIPTION: Initial Express server setup with a basic route handler.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World!\");\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Balance API Documentation Page with React\nDESCRIPTION: React/JSX code that imports and renders a DocCardList component for displaying Balance API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/balance-api/balance-api.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Contract Events - JSX - JavaScript\nDESCRIPTION: This snippet demonstrates how to render the ApiReference component with the getContractEvents config spread as props. It displays the documentation and interactive API reference UI for users to explore contract event endpoints. Requires the ApiReference component and the corresponding endpoint configuration object; expects the config.events.getContractEvents structure to be present.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/13-Blockchain API/03-Get Logs/get-contract-events.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.events.getContractEvents} />\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component - JavaScript/React\nDESCRIPTION: This snippet imports the ApiBanner component, likely used to display informational banners within the documentation page. The dependency is the ApiBanner component at the specified .tsx path, which must exist and be correctly implemented in TypeScript. No inputs are provided and the export is ready for JSX usage, with usage constraints dependent on the component’s prop requirements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/04-Get Token Transfers/get-wallet-token-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis API Key Environment Variable\nDESCRIPTION: Defines an environment variable `REACT_APP_MORALIS_API_KEY` within a `.env` file. This variable stores the user's Moralis API key securely, making it accessible within the React application via `process.env.REACT_APP_MORALIS_API_KEY`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-chartsjs-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nREACT_APP_MORALIS_API_KEY=YOUR_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for SPL Token Price\nDESCRIPTION: This JSON object represents a typical response from the Moralis `getTokenPrice` API endpoint when fetching SPL token price data. It includes the token's price in USD (`usdPrice`), the exchange details (`exchangeName`, `exchangeAddress`), and the price relative to the native token (SOL), including its value, symbol, name, and decimals.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/how-to-get-spl-token-price.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"usdPrice\": 0.2435,\n  \"exchangeName\": \"Raydium\",\n  \"exchangeAddress\": \"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\",\n  \"nativePrice\": {\n    \"value\": \"20995847\",\n    \"symbol\": \"WSOL\",\n    \"name\": \"Wrapped Solana\",\n    \"decimals\": 9\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: NFT Metadata Fetching and Display Component (TypeScript)\nDESCRIPTION: This React component (NFTCard) handles fetching and displaying metadata for individual NFTs. It uses a backend API route to get the metadata and renders the NFT information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-explorer.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst NFTCard = ({ nftAddress, filterQuery }) => {\n  const [nftData, setNftData] = useState({\n    contractType: \"\",\n    name: \"\",\n    symbol: \"\",\n    metadata: \"\",\n  });\n  const [filterSymbol, setFilterSymbol] = useState();\n\n  const getNFTMetadata = async () => {\n    const options = {\n      network: \"mainnet\",\n      address: nftAddress,\n    };\n    const response = await apiPost(\"/SolApi/nft/getNFTMetadata\", options);\n    const result = await axios.get(`${response.metaplex.metadataUri}`, {\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    });\n    setFilterSymbol(response.symbol);\n    setNftData({\n      contractType: response.standard,\n      name: response.name,\n      symbol: response.symbol,\n      metadata: result.data,\n    });\n  };\n\n  useEffect(() => {\n    if (nftAddress) {\n      getNFTMetadata();\n    }\n  }, [nftAddress]);\n\n  if (filterSymbol?.toLowerCase().includes(filterQuery)) {\n    return (\n      // JSX for rendering NFT data\n    );\n  }\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Document Head Title - HTML - JavaScript\nDESCRIPTION: This snippet sets the page title within the HTML head tag to describe the documentation topic, aiding SEO and browser tab naming. It is often used within static documentation pages or when directly manipulating the HTML structure in frameworks like Docusaurus. No additional dependencies are required, and the only parameter is the title string.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getUncleCountByBlockHash.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n    <title>eth_getUncleCountByBlockHash RPC Method - Moralis Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Modifying Lens Profile Query ID (JavaScript)\nDESCRIPTION: Shows how to change the `profileId` within the GraphQL query definition in `pages/api/lensCalls.js`. This example changes the requested profile ID from `0x09` to `0x81` to fetch and display a different user's profile.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nprofile(request: { profileId: \"0x81\" }) {\n  ...\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Failed Webhook History\nDESCRIPTION: Illustrates the JSON structure returned by the Moralis Streams API when querying for failed webhook history. Each object in the `result` array represents a failed delivery, containing details like the unique `id`, timestamp (`date`), original `payload`, stream ID (`streamId`), tag, error message, and webhook URL. The response also includes the total count and a cursor for pagination.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/error-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": [\n    {\n      \"id\": \"HISTORY_ID\",\n      \"date\": \"string\",\n      \"payload\": {\n        // the failed webhook\n      },\n      \"tinyPayload\": {\n        \"block\": {},\n        \"chainId\": \"\",\n        \"amount\": 0\n      },\n      \"streamId\": \"STREAM_ID\",\n      \"tag\": \"TAG\",\n      \"errorMessage\": \"string\",\n      \"webhookUrl\": \"string\"\n    }\n  ],\n  \"total\": \"number\",\n  \"cursor\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase RLS Policy for Authenticated Users (SQL)\nDESCRIPTION: Defines a Row-Level Security (RLS) policy in Supabase for the `public.users` table. This specific policy, named \"Enable select for authenticated users only\", grants SELECT permissions only to users who are authenticated (possess a valid JWT indicating the 'authenticated' role). This ensures that only logged-in users can read data from the users table.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE POLICY \"Enable select for authenticated users only\"\nON public.users\nFOR SELECT\nTO authenticated\nWITH CHECK (true);\n```\n\n----------------------------------------\n\nTITLE: Initializing Tic Tac Toe Rust Project with Cargo\nDESCRIPTION: Creates a new Rust library project for the Tic Tac Toe smart contract on Solana.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo init tic_tac_toe --lib\n\ncd tic_tac_toe\n```\n\n----------------------------------------\n\nTITLE: User Session Authentication in Angular ngOnInit - TypeScript\nDESCRIPTION: Overrides ngOnInit in the user.component.ts to check for an existing authenticated session by requesting /authenticate from the backend. If successful, formats and stores the session (minus the 'iat' value) for display; on error or absence of valid session, redirects the user to the sign-in page. Relies on axios and Angular router.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync ngOnInit() {\n  try {\n    const { data } = await axios.get(\n      `${environment.SERVER_URL}/authenticate`,\n      {\n        withCredentials: true,\n      }\n    );\n\n    const { iat, ...authData } = data; // remove unimportant iat value\n\n    this.session = JSON.stringify(authData, null, 2); // format to be displayed nicely\n  } catch (err) {\n    // if user does not have a \"session\" token, redirect to /signin\n    this.router.navigateByUrl('/signin');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Express Server Implementation\nDESCRIPTION: JavaScript code for setting up Express server with Moralis integration for fetching blockchain data\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\n\nconst express = require(\"express\");\nconst cors = require(\"cors\");\n\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst app = express();\nconst port = 3000;\n\napp.use(\n  cors({\n    origin: \"http://localhost:4200\",\n    credentials: true,\n  })\n);\n\nconst MORALIS_API_KEY = \"replace_me\";\nconst address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\napp.get(\"/balances\", async (req, res) => {\n  try {\n    const [nativeBalance, tokenBalances] = await Promise.all([\n      Moralis.EvmApi.balance.getNativeBalance({\n        chain: EvmChain.ETHEREUM,\n        address,\n      }),\n      Moralis.EvmApi.token.getWalletTokenBalances({\n        chain: EvmChain.ETHEREUM,\n        address,\n      }),\n    ]);\n    res.status(200).json({\n      address,\n      nativeBalance: nativeBalance.result.balance.ether,\n      tokenBalances: tokenBalances.result.map((token) => token.display()),\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500);\n    res.json({ error: error.message });\n  }\n});\n\nconst startServer = async () => {\n  await Moralis.start({\n    apiKey: MORALIS_API_KEY,\n  });\n\n  app.listen(port, () => {\n    console.log(`Example app listening on port ${port}`);\n  });\n};\n\nstartServer();\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Token Balance Endpoint (JavaScript/React)\nDESCRIPTION: This snippet renders the ApiReference component into the documentation page, passing it the configuration for the token balance price retrieval endpoint. The config.token.getWalletTokenBalancesPrice object (imported from a JSON file) specifies endpoint details, examples, parameters, and schema. Requires that the config object and the ApiReference component are both properly defined and available.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/02-Get Wallet Token Balances/get-wallet-token-balances-price.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.token.getWalletTokenBalancesPrice} />\n```\n\n----------------------------------------\n\nTITLE: Rendering the BreakingChanges React Component with JSX - JavaScript\nDESCRIPTION: This snippet demonstrates rendering the BreakingChanges component using JSX syntax in a documentation page. There are no props or parameters provided to the component, invoking its default rendering behavior. The snippet requires that BreakingChanges has been imported, and that the file is processed by a JSX-compatible transpilation system (such as Babel in a Docusaurus or React project). Output is the rendered result of the component within the page's content at runtime.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/breaking-changes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BreakingChanges />\n```\n\n----------------------------------------\n\nTITLE: Installing CORS Middleware for Express Server (Shell)\nDESCRIPTION: Adds the 'cors' middleware to a Node.js/Express backend. Required to enable cross-origin resource sharing between the React client and API server. Needs npm and package.json. Output: node_modules/cors installed; enables CORS configuration in Express server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cors\n```\n\n----------------------------------------\n\nTITLE: Creating EvmChain Instances via Name, Hex, or Decimal - Moralis SDK - JavaScript\nDESCRIPTION: Demonstrates instantiation of EvmChain objects using static constants, hex strings, or decimal values. The EvmChain.create() factory method allows creation from either string (hexadecimal) or numeric input. Useful for apps that interact with multiple EVM chains. Requires '@moralisweb3/common-evm-utils'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/moralis-data-types.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\n//by name\nconst chain = EvmChain.ETHEREUM;\n//or by hex string\nconst chain = EvmChain.create(\"0x1\");\n// or by decimal value\nconst chain = EvmChain.create(1);\n```\n\n----------------------------------------\n\nTITLE: Importing React Component and Configuration (JavaScript)\nDESCRIPTION: This snippet imports a reusable ApiReference React component from a relative path, along with a configuration JSON file containing setup data for API references. These imports are essential for dynamically rendering API documentation based on external configuration. Both components and JSON data are prerequisites for successfully rendering the API reference within the React framework.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/01-History/replay-history.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing EVM Chain Data Component in React/JSX\nDESCRIPTION: Imports the EVMChainData component used to display supported EVM chains for the DeFi API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/defi-api.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EVMChainData } from '@site/src/components/SupportedChains';\n```\n\n----------------------------------------\n\nTITLE: Searching Tokens via Moralis API\nDESCRIPTION: Exclusive Moralis API endpoint (GET request) for searching for tokens based on various criteria (e.g., name, symbol). Facilitates token discovery.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_41\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/tokens/search\n```\n\n----------------------------------------\n\nTITLE: Importing API Configuration in JavaScript\nDESCRIPTION: This JavaScript code imports configuration data, likely containing API endpoint specifications and parameters, from a JSON file located at `@site/docs/configs/api-reference/configs.json`. This configuration is expected to be used by the `ApiReference` component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Volume Stats/04-get-timeseries-volume-by-category.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Initializing NPM Project\nDESCRIPTION: Command to initialize a new NPM project in the directory.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Starting the React App - Bash\nDESCRIPTION: This snippet shows the command required to start the React development server using npm. Running this command in the frontend project directory launches the project at http://localhost:3000/ by default, making the app accessible for local development and testing. Requires Node.js, npm, and prior installation of dependencies via npm install. No parameters; the output is a running frontend server. Must be executed in the terminal.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Particle Connect Core via yarn\nDESCRIPTION: Installs the core `@particle-network/connect` package using yarn. This package provides the fundamental integration capabilities for Particle Connect.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-particle.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @particle-network/connect\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation with ApiReference Component in JSX\nDESCRIPTION: This JSX snippet renders the `ApiReference` React component. It uses the spread syntax (`...`) to pass all properties from the `config.utils.contractsReview` object (imported from the JSON configuration) as props to the component. This dynamically populates the component with the specific details (like endpoint URL, parameters, responses) for the 'contractsReview' API, effectively rendering its documentation on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/20-Utils/contract-review.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.utils.contractsReview} />\n```\n\n----------------------------------------\n\nTITLE: Specifying HTML Page Title - JavaScript/JSX\nDESCRIPTION: This snippet sets the HTML document title to clearly indicate the page covers the eth_getBlockByHash RPC method within the Moralis documentation. This assists with SEO and user navigation. No external dependencies are required aside from the React rendering environment. No inputs or outputs; the main function is to update the browser tab title when the page loads.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getBlockByHash.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<head>\n    <title>eth_getBlockByHash RPC Method - Moralis Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Endpoint Deprecation List - All Chains\nDESCRIPTION: List of endpoints being deprecated across all chains with their recommended alternative solutions. Includes endpoints for logs, events, block stats, NFT stats, and internal transactions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2024-10-07-breaking-change.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Deprecated Endpoint | Recommendation |\n| --------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| [`/{address}/logs`] | Retrieve logs via our RPC nodes instead. You can learn more about this in [our documentation here](/rpc-nodes/reference/eth_getLogs). |\n| [`/{address}/events`] | Retrieve logs via our RPC nodes instead. You can learn more about this in [our documentation here](/rpc-nodes/reference/eth_getLogs). |\n| [`/block/{block_number_or_hash}/stats`] | Migrate to our [Streams API](/streams-api/evm) to monitor block stats in real time. |\n| [`/nft/{address}/{token_id}/stats`] | Migrate to our [Streams API](/streams-api/evm) to monitor NFT stats in real time. |\n| [`/transaction/{transaction_hash}/internal-transactions`] | Migrate to [getTransactionHash](/web3-data-api/evm/reference/get-transaction) using `include=internal_transactions`. |\n```\n\n----------------------------------------\n\nTITLE: Querying Token Analytics Endpoints\nDESCRIPTION: HTTP GET endpoints for accessing token holder statistics and historical holder data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/09-reservoir-migration-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/erc20/:token_address/holders/stats\nGET https://deep-index.moralis.io/api/v2.2/erc20/:token_address/holders/historical\n```\n\n----------------------------------------\n\nTITLE: Fetching Cross-Chain NFTs with TypeScript\nDESCRIPTION: TypeScript implementation to retrieve NFTs owned by an address across multiple chains using Moralis SDK. Requires Moralis and @moralisweb3/common-evm-utils packages. Returns NFT data from Ethereum, BSC, and Polygon chains.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/03-NFT balance/how-to-get-all-nfts-own-by-an-address-cross-chain.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const allNFTs = [];\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chains = [EvmChain.ETHEREUM, EvmChain.BSC, EvmChain.POLYGON];\n\n  for (const chain of chains) {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      address,\n      chain,\n    });\n\n    allNFTs.push(response);\n  }\n\n  console.log(allNFTs);\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Configurations in React (JavaScript)\nDESCRIPTION: This code imports React components (ApiReference, Admonition, Link) and a JSON configuration for use within a Docusaurus documentation file. Dependencies include @site/src/components/ApiReference, @theme/Admonition, @docusaurus/Link, and a project-local JSON file. These imports enable enriched documentation rendering and dynamic API reference configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/eth_getTokenBalances.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering NodeBanner Component (JSX)\nDESCRIPTION: Renders the custom `NodeBanner` React component within the MDX page. This component likely displays a specific banner related to RPC nodes, enhancing the user interface of the documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/_evm-rpc-methods.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NodeBanner />\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK Modules with npm - Bash\nDESCRIPTION: Demonstrates how to install specific Moralis SDK packages using npm for a more granular setup. The example installs the @moralisweb3/core and @moralisweb3/evm-api packages, which are foundational for Ethereum-compatible features. Ensure npm is installed on your system before running this command. The installed packages can be imported and registered as needed in your JavaScript or TypeScript project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @moralisweb3/core @moralisweb3/evm-api\n```\n\n----------------------------------------\n\nTITLE: Setting Up Frontend Environment for Solana Dapp\nDESCRIPTION: Shell commands to clone the project repository, install dependencies, and start the development server for the frontend application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/JohnVersus/solana-dapp-micro-blog.git\n\ncd solana-dapp-micro-blog\n\nyarn install\n\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering NFT Trades by Token API Reference - JSX\nDESCRIPTION: This snippet renders the ApiReference component with properties spread from the NFT trades-by-token configuration object. The primary dependency is the ApiReference React component and the config.nft.getNFTTradesByToken object. Inputs are the props containing API reference configuration; outputs are dynamically generated documentation elements. The component must be used within a valid React (JSX) context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/07-Get NFT Trades/get-nft-trades-by-token.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTTradesByToken} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet NFT API Reference with React Component\nDESCRIPTION: This JSX snippet uses the custom `ApiReference` component within a likely Docusaurus-based documentation site. It dynamically renders the API reference section for the `getWalletNFTs` endpoint by passing configuration properties (`config.nft.getWalletNFTs`) to the component. This component is responsible for displaying details like parameters, responses, and possibly code examples for the API endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/03-Get Wallet NFT Balances/get-wallet-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getWalletNFTs} />\n```\n\n----------------------------------------\n\nTITLE: Getting NFT Owners by Contract Address with Moralis in TypeScript\nDESCRIPTION: This TypeScript implementation shows how to retrieve all owners of NFTs from a specific contract address using Moralis. It configures the Moralis SDK with an API key, defines the contract address and blockchain, and fetches owner data using the getNFTOwners method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xd4e4078ca3495DE5B1d4dB434BEbc5a986197782\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTOwners({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Creating Backend Directory - Shell\nDESCRIPTION: This shell snippet creates and navigates into a new 'backend' directory, which will contain the Express-based backend server for the application. No dependencies are required, but assumes Unix-like environment with shell access. There are no input/output parameters, just filesystem side-effects. Limitation: overwriting existing directories is not handled.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/zapper-clone.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir backend\ncd backend\n```\n\n----------------------------------------\n\nTITLE: Importing API Banner Component - React TypeScript\nDESCRIPTION: This import brings in the ApiBanner React component, written in TypeScript (TSX), for use in the documentation page. The component is intended to display promotional or contextual information related to the API. Prerequisites include the existence of the specified TypeScript component within the project structure. There are no required inputs or outputs outside of normal component usage within a React application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/02- Get Entity Categories/get-entity-categories.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Component - ApiReference (JavaScript)\nDESCRIPTION: This snippet imports the 'ApiReference' React component from the specified site component directory. This allows the documentation page to embed interactive or static API reference blocks. No dependencies need to be installed beyond the monorepo's local packages, and it relies on React's import mechanism. No parameters are passed in this import.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Pump Fun Tokens/03-get-graduated-tokens-by-exchange.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet History via Moralis API\nDESCRIPTION: Exclusive Moralis API endpoint (GET request) for retrieving the transaction history for a specific wallet, identified by its `:address`. This provides detailed historical data about wallet activity.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_36\n\nLANGUAGE: http\nCODE:\n```\nGET https://deep-index.moralis.io/api/v2.2/wallets/:address/history\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata with YAML Frontmatter\nDESCRIPTION: Uses YAML frontmatter to set page metadata like title, URL slug, sidebar position, and a custom CSS class. This configuration is standard in documentation frameworks like Docusaurus for controlling page properties and navigation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/token-api.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Token API\"\nslug: \"../token-api\"\nsidebar_position: 4\nsidebar_class_name: \"sidebar-token-api\"\n---\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component with Configuration\nDESCRIPTION: React/JSX code that imports and renders an API reference component with configuration for the removeBind authentication endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/reference/03-Profiles/remove-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.auth.removeBind} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Based Agent\nDESCRIPTION: Command to install all required dependencies for the Based Agent project using npm.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/03-building-with-based-agent-template.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering Banners with Flex Layout in JSX\nDESCRIPTION: This code creates a flex container to display a chart widget banner and an Ethereum API banner with custom properties, arranged vertically with equal widths.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/05-Get Token Prices/get-ohlcv-by-pair-address.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  style={{\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\", // Ensures both banners have the same width\n  }}\n>\n  <div style={{ width: \"100%\" }}>\n    <ChartWidgetBanner />\n  </div>\n  <div style={{ width: \"100%\" }}>\n    <EthereumApiBanner\n  customTitle=\"Looking for OHLCV data on EVM?\"\n  customText=\"Access OHLCV data by pair address on EVM using our API.\"\n  customButtonText=\"Explore EVM API\"\n  customButtonLink=\"/web3-data-api/evm/reference/get-ohlcv-by-pair-address\"\n/>\n\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with ApiReference Component in JSX\nDESCRIPTION: This JSX code snippet renders the 'ApiReference' React component. It utilizes the spread operator (`...`) to pass properties defined in `config.wallet.getWalletActiveChains` to the component. This is used to dynamically display the API documentation for the 'getWalletActiveChains' endpoint within the Moralis Wallet API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/08- Get Wallet Details/get-chain-activity-by-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.wallet.getWalletActiveChains} />\n```\n\n----------------------------------------\n\nTITLE: Tracking Transaction Status and Updating UI with useEffect in React\nDESCRIPTION: This snippet demonstrates using the `useEffect` hook in a React component (`DeployTokenRemotely`) to track the status of the remote token deployment transaction. It depends on the status flags (`isSuccess`, `isError`, `isLoading`) provided by the `useWaitForTransaction` hook (aliased or destructured from `useWaitForDeployTokenRemotelyTransactionData`). Based on the transaction status, it displays appropriate toast notifications to the user and updates the UI state (e.g., displaying the transaction hash, showing the next step). It also calls the `gasEstimator` function, likely on component mount or when dependencies change.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n//...\nconst DeployTokenRemotely = () = >{\n  //...\n  useEffect(() = >{\n    gasEstimator();\n    if (isSuccess) {\n      setDisplayTransactionHash(deployTokenRemotely ? .hash ? ?'');\n      toast({\n        title: 'Token Deployed Remotely',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n      setShowNextStep(true);\n    }\n    if (isError) {\n      toast({\n        title: 'Transaction Error',\n        description: 'There was an error submitting your transaction.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n    if (isLoading) {\n      toast({\n        title: 'Transaction Pending',\n        description: 'Your transaction is pending.',\n        status: 'info',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  },\n  [deployTokenRemotely, isSuccess, isError, isLoading, useWaitForDeployTokenRemotelyTransactionData]);\n  return (\n  //..\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Informational Note using Admonition Component in JSX\nDESCRIPTION: Renders a Docusaurus `Admonition` component styled as an 'info' box with the title 'Note'. It contains a paragraph with an HTML anchor tag (`<a>`) linking users to the general EVM RPC schema page for detailed parameter and response definitions relevant to the RPC method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getBlockTransactionCountByNumber.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nPlease refer to <a href=\"/rpc-nodes/reference/evm-rpc-schema\">RPC schema</a> page for more details on the RPC params and RPC response definitions of the RPC method. \n</p>\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Importing CORS Module\nDESCRIPTION: Adding CORS requirement to the NodeJS application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cors = require('cors')\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring API Reference Component in JSX\nDESCRIPTION: This code snippet imports the ApiReference component and configuration data, then renders the component with the configuration for resolving addresses to ENS names.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/07-Domains Lookups/resolve-address.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.resolve.resolveAddress} />\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Moralis API (Plain Text)\nDESCRIPTION: This snippet sets up the Moralis API key within a .env file, providing secure environment-based configuration for the React application. The variable, REACT_APP_MORALIS_API_KEY, is required by the application to authenticate with Moralis APIs during runtime. The file should be placed in the root directory and must never be committed to version control for security reasons.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/dexscreener-clone.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nREACT_APP_MORALIS_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing CORS in NodeJS Project - Shell\nDESCRIPTION: Installs the cors package using npm to enable Cross-Origin Resource Sharing in the NodeJS backend. This is a required dependency for allowing the Express application to handle requests from different origins, which is especially needed for browser or Unity-based clients. The command must be run in the project root directory before starting the NodeJS server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cors\n```\n\n----------------------------------------\n\nTITLE: Example of Normalized NFT Metadata\nDESCRIPTION: Sample of a normalized NFT metadata output showing a structured JSON format with clearly defined fields and attributes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/02-NFT API/02-NFT Metadata FAQs/normalized-vs-non-normalized-metadata.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Friendly OpenSea Creature that enjoys long swims in the ocean.\",\n  \"external_url\": \"https://openseacreatures.io/3\",\n  \"image\": \"https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.webp\",\n  \"name\": \"Dave Starbelly\",\n  \"attributes\": [\n    {\n      \"trait_type\": \"Base\",\n      \"value\": \"Starfish\"\n    },\n    {\n      \"trait_type\": \"Eyes\",\n      \"value\": \"Big\"\n    },\n    {\n      \"trait_type\": \"Mouth\",\n      \"value\": \"Surprised\"\n    },\n    {\n      \"trait_type\": \"Level\",\n      \"value\": 5\n    },\n    {\n      \"trait_type\": \"Stamina\",\n      \"value\": 1.4\n    },\n    {\n      \"trait_type\": \"Personality\",\n      \"value\": \"Sad\"\n    },\n    {\n      \"display_type\": \"boost_number\",\n      \"trait_type\": \"Aqua Power\",\n      \"value\": 40\n    },\n    {\n      \"display_type\": \"boost_percentage\",\n      \"trait_type\": \"Stamina Increase\",\n      \"value\": 10\n    },\n    {\n      \"display_type\": \"number\",\n      \"trait_type\": \"Generation\",\n      \"value\": 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing verify endpoint for Moralis signature verification\nDESCRIPTION: Express.js endpoint that verifies the message signed by the user's Web3 wallet. Upon successful verification, it creates a JWT token and sets it as a cookie for session management.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/verify\", async (req, res) => {\n  try {\n    const { message, signature } = req.body;\n\n    const { address, profileId } = (\n      await Moralis.Auth.verify({\n        message,\n        signature,\n        networkType: \"evm\",\n      })\n    ).raw;\n\n    const user = { address, profileId, signature };\n\n    // create JWT token\n    const token = jwt.sign(user, process.env.AUTH_SECRET);\n\n    // set JWT cookie\n    res.cookie(\"jwt\", token, {\n      httpOnly: true,\n    });\n\n    res.status(200).json(user);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n    console.error(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Configurations in JavaScript\nDESCRIPTION: This snippet imports a React component `ApiReference` and a JSON configuration object for rendering API references. It enables the dynamic generation of the API documentation UI by providing the component and configuration necessary for integration. There are no external parameters beyond the paths; dependencies include Node.js, a React environment, and the referenced configuration JSON file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/07-Domains Lookups/resolve-domain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Get Pancakeswap V1 Pair Address in TypeScript\nDESCRIPTION: TypeScript implementation to fetch a Pancakeswap V1 pair address using Moralis DeFi API. Requires Moralis and common-evm-utils packages. Takes token addresses as input and returns pair address details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.BSC;\n\n  // token 0 address, e.g. WBNB token address\n  const token0Address = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n    exchange: \"pancakeswapv1\",\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Configurations (JavaScript)\nDESCRIPTION: This code imports the API reference configuration from a specified JSON file, which contains structured data for API endpoints. The imported configuration object (config) provides endpoint-specific settings and metadata for rendering documentation via the ApiReference component. It requires that the JSON file at the relative path exists and is correctly formatted.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/utils/web3-api-version.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing MainnetBadge React Component (JavaScript)\nDESCRIPTION: This code imports the 'MainnetBadge' React component, which is likely used to visually indicate the mainnet status of the API or feature. The file extension '.js' suggests this component is implemented in JavaScript. All import paths assume this runs in an environment with local project aliasing or monorepo structure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Pump Fun Tokens/03-get-graduated-tokens-by-exchange.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet ERC20 Balances using Moralis Python SDK\nDESCRIPTION: This Python snippet demonstrates using the Moralis Python SDK to get ERC20 token balances. It sets the API key and defines parameters including the wallet `address` and `chain` identifier ('eth'). The `evm_api.token.get_wallet_token_balances` function is called with these parameters, and the resulting dictionary containing token balances is printed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/04-ERC20 balance/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.token.get_wallet_token_balances(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler for Synthetic Default Imports - JSON\nDESCRIPTION: This snippet updates TypeScript's tsconfig.app.json to allow synthetic default imports, ensuring compatibility with libraries like axios when using ESModule imports. The 'allowSyntheticDefaultImports' option is set to true under 'compilerOptions'. This is a static configuration; it should be placed in the project's tsconfig.app.json.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\u00a0 \\\"allowSyntheticDefaultImports\\\": true,\\n\\u00a0 \\\"outDir\\\": \\\"./out-tsc/app\\\",\\n\\u00a0 \\\"types\\\": []\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Configuration in MDX\nDESCRIPTION: These JavaScript/MDX import statements load necessary React components and configuration data. `ApiReference` is likely used to display structured API documentation, `config` holds the specific API endpoint details loaded from a JSON file, and `ApiBanner` might display informational messages or ads.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/03-Get Wallet NFT Balances/get-wallet-nft-collections.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReference Component in React/JSX\nDESCRIPTION: This snippet shows how to import the `ApiReference` component and a configuration object in a React-based environment (likely Docusaurus). It then renders the `ApiReference` component, passing specific configuration details (`config.nft.getNFTContractTransfers`) via props to display documentation for the 'get NFT contract transfers' API endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/03-Get NFT Transfers/get-nft-contract-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n# Get NFT transfers by contract\n\n<ApiReference {...config.nft.getNFTContractTransfers} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Collection Transfers in JavaScript\nDESCRIPTION: This code demonstrates how to get all transfers for an NFT collection using Moralis EvmApi with JavaScript. It initializes Moralis with an API key, sets the NFT collection address and blockchain, and makes the API request to retrieve transfer data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTContractTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Moralis using Custom Solana Provider (TypeScript, Solana)\nDESCRIPTION: Illustrates providing an alternative Solana provider (besides Phantom) by passing it via the provider option to signInWithMoralis. Dependencies: @moralisweb3/client-firebase-sol-auth and (optionally) @ethersproject/providers. Input: moralisAuth and custom provider; Output: authenticates user with given Solana provider.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signInWithMoralis } from '@moralisweb3/client-firebase-sol-auth';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\nconst provider = /* ... */\n\nawait signInWithMoralis(moralisAuth, {\n  provider\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Volume Stats by Category via Moralis API\nDESCRIPTION: Fetches volume and chain data grouped by categories for a specific chain (e.g., 'eth') using the Moralis Deep Index API v2.2. Requires the `chain` query parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/volume/categories?chain=eth\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verbose Transactions in JavaScript\nDESCRIPTION: JavaScript implementation for getting verbose transactions of an address using the Moralis Transaction API. This code initializes Moralis with an API key, defines a wallet address and blockchain to query, then calls the getWalletTransactionsVerbose endpoint to retrieve detailed transaction data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-transaction-verbose.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response =\n    await Moralis.EvmApi.transaction.getWalletTransactionsVerbose({\n      address,\n      chain,\n    });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Displaying Input Address in C#\nDESCRIPTION: This snippet shows the initial part of the `DisplayCryptoData` function, printing the wallet address received as input to the console for context before fetching blockchain data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nConsole.WriteLine($\"For address: {address}...\\n\");\n```\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server using NPM (Bash)\nDESCRIPTION: Executes the `start` script defined in the project's `package.json` file using the Node Package Manager (npm). This command typically compiles the React application and launches a local development server, making the application accessible in a web browser for testing and development. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-tradingview-lightweight-charts-tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis, Next-Auth, and Dependencies - Bash\nDESCRIPTION: This snippet installs Moralis, @moralisweb3/next, and next-auth packages using npm. These dependencies are essential for enabling Web3 authentication and session management in a NextJS application. Make sure you have Node.js and npm installed; run these commands in your project's root directory before proceeding.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis @moralisweb3/next next-auth\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component - Docusaurus React - JavaScript\nDESCRIPTION: This snippet imports the DocCardList React component from the Docusaurus theme and renders it within the documentation page. DocCardList is responsible for displaying a list of documentation cards, typically used to navigate between tutorial entries. Requires an existing Docusaurus setup and the @theme/DocCardList module; no additional parameters are used. The output is a rendered list of doc cards in the final web page, and this must be used in an MDX file or similar within a Docusaurus project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Fetching Internal Transactions by Hash using Moralis SDK (Python)\nDESCRIPTION: This Python snippet shows how to use the Moralis Python SDK to fetch internal transactions by hash. It utilizes the `moralis.evm_api.transaction.get_internal_transactions` function, passing the API key and parameters including the transaction hash and chain ('eth' for Ethereum). It requires the `moralis` package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-internal-transactions-by-hash.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"transaction_hash\": \"0xae5f9a43f424624376ea7479ce7b0ab25e9eba11f1c4791ec4e68f0206b5e071\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.transaction.get_internal_transactions(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Solana getNFTs Endpoint\nDESCRIPTION: This code renders the ApiReference component with the configuration specific to the Solana getNFTs endpoint. The configuration is passed as a prop to the component using JSX spread syntax.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/wallet-api/get-wallet-nfts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getNFTs} />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in React (JavaScript)\nDESCRIPTION: This snippet imports the 'ApiReference' React component from a local docs directory, enabling in-situ documentation embedding. Dependencies include a custom docs setup and React. It expects that the imported component exists at the relative path and is used to render API specification details. Input: none. Output: imported component object for usage in JSX.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/06-Get Pairs & Liquidity/get-pair-address.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Updating React UI for Canonical Interchain Token Registration\nDESCRIPTION: This snippet shows a part of a React functional component (`RegisterExistingToken`) responsible for the UI to register an existing token. It includes an Input field to capture the token address and a Button to trigger the registration process (`handleRegisterToken`). State management for the input value is handled via `tokenAddress` state variable and `setTokenAddress` function.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//...\n\nconst RegisterExistingToken: React.FC = () => {\n  //...\n\n  return (\n    <Box\n      padding=\"7\"\n      maxW=\"xxl\"\n      borderWidth=\"1px\"\n      borderRadius=\"lg\"\n      overflow=\"hidden\"\n      margin=\"auto\"\n      marginTop=\"-20\"\n    >\n      <Heading size=\"lg\" marginBottom=\"6\" textAlign=\"center\">\n        Register Canonical Interchain Token\n      </Heading>\n\n      <VStack spacing={5} align=\"stretch\">\n        <FormControl>\n          <FormLabel>Token Address </FormLabel>\n\n          <Input\n            placeholder=\"Enter token address\"\n            value={tokenAddress} // updated\n            onChange={(e) => setTokenAddress(e.target.value)} // updated\n          />\n\n          <FormHelperText>\n            Enter your existing token address you already deployed\n          </FormHelperText>\n        </FormControl>\n\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <Button\n            colorScheme=\"cyan\"\n            loadingText=\"Creating Token\"\n            w=\"sm\"\n            variant=\"solid\"\n            onClick={handleRegisterToken} // update here\n          >\n            Register Token\n          </Button>\n\n          {/*  ...  */}\n        </div>\n\n        {/*  ...  */}\n      </VStack>\n    </Box>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for ERC20 Token Transfers in JavaScript\nDESCRIPTION: This snippet renders the 'ApiReference' component with configuration props for displaying the ERC20 token transfers API endpoint. It depends on the imported 'ApiReference' React component and the config object. The key prop used is 'config.token.getWalletTokenTransfers', which defines the settings for this specific API documentation block. This component is expected to be placed within a React-based documentation site.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/04-Get Transfers/get-wallet-token-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.token.getWalletTokenTransfers} />\n```\n\n----------------------------------------\n\nTITLE: Example package.json after Initialization\nDESCRIPTION: Shows a sample structure of the `package.json` file generated after running `npm init`. It includes basic project information like name, version, description, entry point (`main`), an example test script, author, and license.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"simple-nextjs-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (PowerShell)\nDESCRIPTION: Executes the `npm install` command in a PowerShell terminal to install the `moralis` and `body-parser` Node.js packages. These packages are essential runtime dependencies for the Express application, providing Moralis SDK functionality and request body parsing capabilities, respectively. They will be added to the project's `package.json` and `node_modules`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install moralis body-parser\n```\n\n----------------------------------------\n\nTITLE: Installing cookie-parser, jsonwebtoken, dotenv for Express.js Server - Shell\nDESCRIPTION: This shell snippet installs the dependencies required for user session management and authentication on your Node.js/Express backend. cookie-parser is for parsing cookies, jsonwebtoken for handling JWTs, and dotenv for loading environment variables. Run this command in your server directory before starting development or running your server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cookie-parser jsonwebtoken dotenv\n```\n\n----------------------------------------\n\nTITLE: EVM RPC Response: eth_blockNumber\nDESCRIPTION: Example response format for eth_blockNumber RPC method showing the block number result in hexadecimal format.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x1b4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Ether.js and Axios via CDN in HTML\nDESCRIPTION: This HTML snippet demonstrates how to add the Ether.js and Axios libraries to a web page using their respective CDNs. Ether.js is required for interacting with the Ethereum blockchain (specifically signing messages with MetaMask), and Axios is used for making HTTP requests to the backend.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n<script src=\"https://cdn.ethers.io/lib/ethers-5.2.umd.min.js\" type=\"application/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok Tunnel for Local Express Server\nDESCRIPTION: Executes the `ngrok` command to establish an HTTP tunnel, forwarding requests from a public ngrok URL to the local server running on port 5001. This makes the Express application's `/webhook` endpoint accessible from the internet for receiving notifications.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nngrok http 5001\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Uniswap V2 Pair Reserves\nDESCRIPTION: This JSON object shows the expected output format when successfully retrieving Uniswap V2 pair reserves. It contains two keys, `reserve0` and `reserve1`, representing the amount of each token held in the liquidity pool, denominated in the smallest unit of each respective token.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-reserves.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"reserve0\": \"153821290283758699698748\",\n  \"reserve1\": \"794388536599735508826\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and JSON Configurations in JavaScript\nDESCRIPTION: This snippet demonstrates importing React components and a JSON configuration file for use within a documentation or UI context. The imported components likely facilitate rendering interactive API references and UI banners. It relies on proper project structure and the presence of the specified files within the source tree.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/05-Get NFT Owners/get-nft-token-id-owners.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration - JavaScript\nDESCRIPTION: This snippet imports the ApiReference React component from a local directory and a JSON configuration file containing API reference specific settings. It sets up dependencies required for the documentation page to render dynamic API reference details. Both imports are necessary for instantiating the API reference UI with custom configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/01-Get Blocks/get-date-to-block.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Uploading NFT Metadata to Arweave for Solana\nDESCRIPTION: Backend TypeScript code to handle the upload of NFT metadata to Arweave storage using Metaplex SDK and Bundlr storage.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-minter.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const connection = new Connection(clusterApiUrl(\"devnet\"));\n  const metaplex = new Metaplex(connection);\n\n  const key = Uint8Array.from(base58.decode(process.env.PRIVATE_KEY));\n  const keypair = Keypair.fromSecretKey(key);\n\n  metaplex.use(walletAdapterIdentity(keypair));\n  metaplex.use(\n    bundlrStorage({\n      address: \"https://devnet.bundlr.network\",\n      providerUrl: \"https://api.devnet.solana.com\",\n      timeout: 60000,\n      identity: keypair,\n    })\n  );\n\n  const data = await metaplex\n    .nfts()\n    .uploadMetadata({ name, description, image, symbol })\n    .run();\n\n  res.status(200).json(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Moralis API Reference Components in JavaScript\nDESCRIPTION: This snippet imports the 'ApiReference' React component and a JSON config for setting up an API documentation page. It requires the Moralis documentation structure and the referenced JSON configuration file. The imports allow dynamic rendering of API endpoints in the documentation. This code expects the referenced components and configuration files to be present in the specified paths.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/04-Get Transfers/get-wallet-token-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Basic Express Server - JavaScript\nDESCRIPTION: Creates an Express server in JavaScript, listening on port 3000. The server exposes a root endpoint ('/') that responds with 'Hello World!'. This snippet demonstrates minimal Express setup and is the foundation for adding API endpoints that interact with Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World!\");\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing User Profile Page\nDESCRIPTION: Protected page component that displays user profile information and logout option, with server-side session validation\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useTransition } from \"react\";\nimport styles from \"../styles/User.module.css\";\nimport { getSession, signOut } from \"next-auth/react\";\nimport UserData from \"../app/components/userData/userData\";\nimport LogoutBtn from \"../app/components/logoutBtn/logoutBtn\";\n\nexport async function getServerSideProps(context) {\n  const session = await getSession(context);\n  if (!session) {\n    return { redirect: { destination: \"/\" } };\n  }\n  return {\n    props: { userSession: session },\n  };\n}\n\nexport default function Home({ userSession }) {\n  if (userSession) {\n    return (\n      <div className={styles.body}>\n        {!isPending && (\n          <div className={styles.card}>\n            <>\n              <UserData />\n              <div className={styles.buttonsRow}>\n                <LogoutBtn />\n              </div>\n            </>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Balances in JavaScript\nDESCRIPTION: JavaScript implementation to get all ERC20 tokens owned by an address using Moralis SDK. Requires Moralis and @moralisweb3/common-evm-utils packages. Returns token balances including address, name, symbol, logo, and balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenBalances({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Balances Component Template - HTML\nDESCRIPTION: Defines the HTML template for displaying wallet, native balance, and token balances within the BalancesComponent. Uses Angular's interpolation syntax to show the address and balances dynamically. The component expects the variables 'address', 'nativeBalance', and 'tokenBalances' to be set in its TypeScript code.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-angular.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <h3>Wallet: {{ address }}</h3>\n  <h3>Native Balance: {{ nativeBalance }} ETH</h3>\n  <h3>Token Balances: {{ tokenBalances }}</h3>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction by Hash using Moralis SDK in Python\nDESCRIPTION: Uses the Moralis Python SDK's `evm_api.transaction.get_transaction` function to fetch transaction details. Requires the `moralis` Python package. Key parameters include `api_key`, `transaction_hash`, and `chain` (passed within the `params` dictionary). Prints the resulting transaction details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-a-transaction-by-transaction-hash.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python index.py\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"transaction_hash\": \"0xaae93882e8a9fe9ff30151853db20e4cd161940757a01744465ab83b751c5875\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.transaction.get_transaction(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Disable Totals with Moralis API in TypeScript\nDESCRIPTION: This snippet shows how to use the Disable Totals feature in a Moralis API call using TypeScript. It sets up Moralis, defines the necessary parameters including 'disableTotal', and makes a call to retrieve wallet NFTs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/04-Breaking Changes/01-disable-totals.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\n\ntry {\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = \"eth\";\n\n  const disableTotal = true;\n\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTs({\n    address,\n    chain,\n    disableTotal,\n  });\n\n  console.log(response?.result);\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis Client in C# Console App\nDESCRIPTION: Sets up the basic structure of a C# console application (`Program.cs`) and initializes the `MoralisClient` by providing the necessary `ServerConnectionData`, specifically the API key obtained from a Moralis account. This is the entry point for configuring the Moralis SDK within the application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace ConsoleDemo\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            // Setup Moralis\n            MoralisClient.ConnectionData = new Moralis.Models.ServerConnectionData()\n            {\n                ApiKey = \"YOUR MORALIS WEB3API KEY\"\n            };\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gnosis NFT API Deprecation List\nDESCRIPTION: Comprehensive list of NFT-related endpoints being deprecated on Gnosis Mainnet and Gnosis Testnet due to network spam issues.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2024-10-07-breaking-change.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `/nft/getMultipleNFTs`\n- `/block/{block_number_or_hash}/nft/transfers`\n- `/nft/{address}`\n- `/nft/{address}/transfers`\n- `/nft/{address}/owners`\n- `/nft/{address}/metadata`\n- `/nft/{address}/sync`\n- `/nft/{address}/{token_id}/metadata/resync`\n- `/nft/{address}/{token_id}`\n- `/nft/{address}/{token_id}/owners`\n- `/nft/{address}/{token_id}/transfers`\n- `/nft/transfers`\n- `/nft/{address}/traits`\n- `/nft/{address}/traits/paginate`\n- `/nft/{address}/traits/resync`\n- `/nft/{address}/{token_id}/stats`\n- `/nft/{address}/stats`\n- `/{address}/nft`\n- `/{address}/nft/collections`\n- `/{address}/nft/transfers`\n```\n\n----------------------------------------\n\nTITLE: Getting NFT Transfers in JavaScript with Moralis API\nDESCRIPTION: JavaScript implementation to fetch all transfers of a specific NFT using Moralis EvmApi.nft.getNFTTransfers method. Requires the NFT contract address, token ID, and chain parameter (Ethereum in this example).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/03-NFT Transfers/how-to-get-all-transfers-of-an-nft.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\";\n\n  const tokenId = \"1\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getNFTTransfers({\n    address,\n    tokenId,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Rendering the ApiReference Component - JavaScript (JSX)\nDESCRIPTION: This snippet renders the 'ApiReference' React component and spreads the 'resolve.resolveDomain' part of the configuration as props. It dynamically sets up documentation for resolving an Unstoppable Domain, expecting the proper structure in the configuration for API endpoint rendering. The input is the configuration object; the output is the relevant documentation UI rendered in a React context.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-domain.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.resolve.resolveDomain} />\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI\nDESCRIPTION: Command to install Firebase CLI tools globally using npm\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner React Component (JSX)\nDESCRIPTION: This code imports the `ApiBanner` React component, sourced from a TypeScript (`.tsx`) file within the site's components directory. This component is likely intended to display an informational or promotional banner on the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/defi-api/01-Get Wallet DeFi Positions/get-defi-positions-by-protocol.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This snippet renders the imported `DocCardList` component within the MDX file. In a Docusaurus context, this component automatically generates a list of cards, where each card links to another documentation page within the same sidebar category or directory, based on the file structure and configuration. It requires the `DocCardList` component to be imported previously.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/tutorials.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiReference Component - React JavaScript\nDESCRIPTION: Imports the ApiReference component, along with Admonition, configuration, and Link components, then renders the API reference for the getErc20Approvals endpoint. This enables interactive documentation for the API endpoint, with dependencies on Docusaurus, React, and specified configuration files. Inputs include the endpoint configuration object, while the output is an embedded, interactive API reference block with a deprecation warning.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/05-Get Approvals/get-erc20-approvals.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\nimport Link from \"@docusaurus/Link\";\n\n<ApiReference {...config.token.getErc20Approvals}>\n  <Admonition type=\"caution\" title=\"DEPRECATED ENDPOINT\">\n    This API will be deprecated on 4th September 2023.  Please subscribe to the{\" \"}\n    <Link href=\"/changelog\">Changelog</Link> page for further announcements.\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference using JSX Component\nDESCRIPTION: Uses the imported `ApiReference` React component in JSX syntax. It passes specific configuration for the EVM challenge verification endpoint (`config.auth.verifyChallengeEvm`) to the component using the spread attribute syntax. This dynamically renders the relevant API documentation section on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/reference/02-Challenge/verify-challenge-evm.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.auth.verifyChallengeEvm} />\n```\n\n----------------------------------------\n\nTITLE: Importing Contract Dependencies\nDESCRIPTION: Code for importing the Interchain Token Factory ABI and setting up contract address\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/bridge-tokens-to-all-chains-with-ITS.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport interchainTokenFactoryContractABI from \"../../../../../contracts/InterchainTokenFactoryABI.json\";\n\nconst interchainTokenFactoryContractAddress = \"0x83a93500d23Fbc3e82B410aD07A6a9F7A0670D66\";\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs by Wallet Address using Moralis SDK in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Moralis SDK to fetch NFTs associated with a specific wallet address. It includes parameters for chain selection, cursor-based pagination, and filtering options.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/03-Get NFTs/get-wallet-nfts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from 'moralis';\ntry {\n    await Moralis.start({\n        apiKey: \"YOUR_API_KEY\"\n    });\n\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n        address: \"0x75e3e9c92162e62000425c98769965a76c2e387a\",\n        chain: \"1\",\n        limit: 100,\n        tokenAddresses: [],\n        cursor: \"\",\n        normalizeMetadata: true,\n    });\n\n    console.log(response.raw);\n} catch (e) {\n    console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Analytics via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve analytics data for a specific token address using the Moralis Web3 API v2.2. Replace ':address' with the token's contract address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/tokens/:address/analytics\n```\n\n----------------------------------------\n\nTITLE: Adding Start Script to package.json\nDESCRIPTION: Adds a start script to package.json to run the application using nodemon for automatic restarting on code changes.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"start\": \"nodemon index.js\",\n  ...\n},\n```\n\n----------------------------------------\n\nTITLE: Building Firebase Cloud Functions App (Shell)\nDESCRIPTION: Commands to prepare the Firebase Cloud Functions project for emulation or deployment. It navigates into the 'functions' directory, installs dependencies if necessary, and then compiles the TypeScript code using the build script defined in `package.json`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd functions\nnpm install # if needed\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus/React Components and Configuration\nDESCRIPTION: Imports necessary React components (`ApiReference`, `Admonition`, `Link`) from the Docusaurus framework and site structure, along with API configuration data from a JSON file (`configs.json`). These imports are essential for dynamically rendering the documentation page content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getBlockTransactionCountByNumber.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Solana API Banner using JSX\nDESCRIPTION: Renders a banner component (`SolanaApiBanner`) to inform users about the availability of similar functionality for the Solana blockchain. It directs users to the corresponding Solana API documentation via a button, using custom props for the title, text, button text, and link.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/06-Get Pairs & Liquidity/get-aggregated-token-pair-stats.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SolanaApiBanner\n  customTitle=\"Looking for aggregated token pair stats on Solana?\"\n  customText=\"Find aggregated token pair stats on Solana using our API.\"\n  customButtonText=\"Explore Solana API\"\n  customButtonLink=\"/web3-data-api/solana/reference/get-aggregated-token-pair-stats\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP Response Codes Table in Markdown\nDESCRIPTION: This snippet presents a markdown table that lists common HTTP response codes used by Moralis for Solana API requests. It includes status codes, messages, and descriptions for each response type.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/resources/02-api-response.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Status Code | Message               | Description                                                                                      |\n| :---------- | :-------------------- | :----------------------------------------------------------------------------------------------- |\n| 200         | OK                    | Everything worked as expected.                                                                   |\n| 201         | Created               | Resource have been successfully created.                                                         |\n| 400         | Bad Request           | The request was unacceptable, often due to missing a required parameter.                         |\n| 424         | Unauthorized          | No valid API key provided.                                                                       |\n| 429         | Rate Limited          | Too many requests hit the API too quickly. We recommend an exponential backoff of your requests. |\n| 500         | Internal Server Error | Something went wrong on Moralis' end. (These are rare.)                                          |\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in TSX for Documentation\nDESCRIPTION: This snippet imports two React components: `ApiBanner` from a specific project path and `DocCardList` from a theme path. These imports are necessary to use these components within the documentation page, likely built with a framework like Docusaurus.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/api-tutorials.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Moralis getDateToBlock API (JSON)\nDESCRIPTION: This JSON block represents a typical response returned by the Moralis getDateToBlock endpoint. It contains the closest block number, the block date (ISO string), and the corresponding unix timestamp. This format illustrates the expected structure of output for the provided code samples.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/blockchain-api/01-Get Blocks/how-to-get-block-by-unix-timestamp.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"block\": 15918090,\n  \"date\": \"2022-11-07T12:17:15+00:00\",\n  \"timestamp\": 1667823435\n}\n```\n\n----------------------------------------\n\nTITLE: Get Pancakeswap V1 Pair Address in Python\nDESCRIPTION: Python implementation to fetch a Pancakeswap V1 pair address using Moralis DeFi API. Requires the moralis package. Takes token addresses as input and returns pair address details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-pancakeswap-v1-pair-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"exchange\": \"pancakeswapv1\",\n    # token 0 address, e.g. WBNB token address\n    \"token0_address\": \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n    # token 1 address, e.g. LINK token address\n    \"token1_address\": \"0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD\",\n    \"chain\": \"bsc\"\n}\n\nresult = evm_api.defi.get_pair_address(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Configurations in JavaScript\nDESCRIPTION: This snippet imports a JSON configuration object required for the API reference section, allowing the documentation to dynamically render relevant endpoint details. It requires an existing configs.json file accessible at the specified path. This pattern is useful for decoupling API data from UI logic.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-address-to-domain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Formatting and Displaying Native Balance in C#\nDESCRIPTION: Parses the retrieved native balance string (assumed to be in the smallest unit, e.g., wei) into a double, converts it to the main unit (e.g., Ether) by dividing by 10^18, and then prints the formatted balance to the console.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-net-app.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\ndouble nativeBal = 0;\n\ndouble.TryParse(bal.Balance, out nativeBal);\n\nConsole.WriteLine($\"Your native balance is {nativeBal / Math.Pow(10,18)}\");\n```\n```\n\n----------------------------------------\n\nTITLE: Initiating Serverless Project Setup (Shell)\nDESCRIPTION: Runs the `serverless` command-line interface (CLI) tool in the terminal. This initiates the interactive setup process for creating a new Serverless Framework project, prompting the user to select a project template (e.g., Express API).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nserverless\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with Deprecation Warning for ERC20 Transfers Endpoint\nDESCRIPTION: This JSX code renders the API reference for the ERC20 token transfers endpoint. It includes a deprecation warning using the Admonition component, informing users about the upcoming deprecation date and directing them to the Changelog page for updates.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/04-Get Transfers/get-erc20-transfers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getErc20Transfers}>\n  <Admonition type=\"caution\" title=\"DEPRECATED ENDPOINT\">\n    This API will be deprecated on 4th September 2023.  Please subscribe to the{\" \"}\n    <Link href=\"/changelog\">Changelog</Link> page for further announcements.\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Get Block by Date - JavaScript\nDESCRIPTION: This snippet uses the imported ApiReference component, spreading the configuration object for the 'getDateToBlock' API endpoint. It dynamically generates documentation details relevant to retrieving a blockchain block by date using Moralis Web3 Data API endpoints. The component must be used within a React or MDX page context and depends on the config object structure.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/01-Get Blocks/get-date-to-block.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference {...config.block.getDateToBlock} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Disable Totals with Moralis API in Python\nDESCRIPTION: This snippet illustrates how to use the Disable Totals feature in a Moralis API call using Python. It imports the necessary module, sets the API key and parameters including 'disable_total', and makes a call to fetch wallet NFTs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/04-Breaking Changes/01-disable-totals.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"disable_total\": True\n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Auth Wagmi Connector - Bash\nDESCRIPTION: Installs the @web3auth/web3auth-wagmi-connector package via npm to enable Web3Auth integration in the NextJS project. This dependency is required to utilize the Web3AuthConnector in later code snippets for wagmi integration. No parameters are required; simply run this command in your project root.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-web3authio.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @web3auth/web3auth-wagmi-connector@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JavaScript/JSX\nDESCRIPTION: This line imports the `DocCardList` React component from the `@theme/DocCardList` module. This is a standard way to import themed components in frameworks like Docusaurus, allowing customization and consistent styling across the documentation site. The component is used to display a list of related documents.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/tutorials.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Streams Response Structure\nDESCRIPTION: JSON structure showing the response format when retrieving streams, including webhook details, configuration options, and status information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/streams-configuration/stream-management.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": [\n    {\n      \"webhookUrl\": \"string\",\n      \"description\": \"string\",\n      \"tag\": \"string\",\n      \"topic0\": [],\n      \"includeNativeTxs\": true,\n      \"allAddresses\": false,\n      \"includeContractLogs\": true,\n      \"advancedOptions\": [{\n        \"topic0\": \"string\",\n        \"includeNativeTxs\": true,\n        \"filter\": {}\n      }],\n      \"abi\": [],\n      \"filter\": \"string\",\n      \"address\": \"string\",\n      \"chainIds\": [\n        \"string\"\n      ],\n      \"id\": \"3fa84f64-5717-4562-b3fc-2c963f66afa6\",\n      \"status\": \"active\",\n      \"statusMessage\": \"string\"\n    }\n  ],\n  \"cursor\": \"string\",\n  \"total\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Importing URQL Client and Profile Query (JavaScript)\nDESCRIPTION: Imports the previously defined `urqlClient` instance and the `Profile` GraphQL query from the `lensCalls.js` file into the main page component (`pages/index.js`).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { urqlClient, Profile } from './api/lensCalls';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components - ReactJS - JavaScript\nDESCRIPTION: This snippet imports React components (ApiReference, Admonition, Link) and a configuration JSON used to enrich the documentation page. Dependencies include the local project structure, Docusaurus, and an external config file for API references. The imported components are prerequisites for rendering rich, composable documentation experiences with dynamic API details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getUncleCountByBlockHash.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration\nDESCRIPTION: This snippet imports the ApiReference React component and a JSON configuration file. The component is likely used to dynamically render API documentation based on the imported configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/get-addresses.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Token Balance Retrieval in JSX\nDESCRIPTION: This code snippet renders the ApiReference component, passing in the configuration for retrieving wallet token balances from the imported config object.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/01-Get Tokens/get-wallet-token-balances.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getWalletTokenBalances}>\n\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Serverless Offline (PowerShell)\nDESCRIPTION: Runs the `serverless offline start` command in a PowerShell terminal. This command utilizes the `serverless-offline` plugin to launch a local server that mimics the AWS Lambda and API Gateway environment defined in `serverless.yml`. It allows developers to test their Lambda function endpoints locally, typically accessible at `http://localhost:3000`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nserverless offline start\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Transfers by Contract via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve ERC20 token transfers related to a specific token contract address using the Moralis Web3 API v2.2. The ':address' parameter should be replaced with the ERC20 token contract address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/erc20/:address/transfers\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Sushiswap V2 Pair Reserves\nDESCRIPTION: This JSON object shows the expected response format when successfully fetching pair reserves using the Moralis API. It contains two keys, `reserve0` and `reserve1`, representing the amount of each token held in the liquidity pool pair, returned as strings.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-sushiswap-v2-pair-reserves.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reserve0\": \"164603264012529614075996\",\n  \"reserve1\": \"854278497345719157300\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Custom API Banner Component (JavaScript/JSX)\nDESCRIPTION: This snippet imports a custom API banner React component used to visually distinguish API endpoints or inform users about API-related notices. The component is defined in a TypeScript/TSX file, ensuring type safety and integration into the documentation's React architecture. To use this, the project must have TypeScript and React support, and the referenced TSX component must exist at the specified path.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/defi-api/01-Get Wallet DeFi Positions/get-defi-positions-summary.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Transfers in JavaScript\nDESCRIPTION: JavaScript implementation to fetch ERC20 token transfers for a specific wallet address using Moralis SDK. Requires Moralis API key and uses the EvmChain.ETHEREUM chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-erc20-transfers-by-wallet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Moralis = require(\"moralis\").default;\nconst { EvmChain } = require(\"@moralisweb3/common-evm-utils\");\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Collections with TypeScript using Moralis API\nDESCRIPTION: TypeScript implementation to retrieve NFT collections owned by a specific wallet address. Uses the Moralis SDK with the getWalletNFTCollections endpoint, with proper TypeScript imports and typing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/04-NFT Collections/how-to-get-all-nft-collections-owned-by-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.nft.getWalletNFTCollections({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Getting Uniswap V2 Pair Address with Moralis DeFi API in TypeScript\nDESCRIPTION: This TypeScript example illustrates retrieving a Uniswap V2 pair address utilizing the Moralis SDK and common EVM utilities. Ensure you have the 'moralis' and '@moralisweb3/common-evm-utils' TypeScript packages installed. You need an API key and the two ERC-20 token addresses. The script initializes Moralis, defines chain, token addresses, and requests the pair address. The function logs the response containing token and pair data. Inputs are typed, ensuring safer code and auto-complete for parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/how-to-get-the-pair-address-of-a-liquidity-pool.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const chain = EvmChain.ETHEREUM;\n\n  // token 0 address, e.g. WETH token address\n  const token0Address = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\n\n  // token 1 address, e.g. LINK token address\n  const token1Address = \"0x514910771AF9Ca656af840dff83E8264EcF986CA\";\n\n  const response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Get ERC20 Transfers using TypeScript\nDESCRIPTION: TypeScript implementation to fetch ERC20 token transfers for a specific wallet address using Moralis API. Requires Moralis SDK and common-evm-utils package. Takes wallet address and chain as parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/06-Transfers/how-to-get-all-erc20-transfers-by-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getWalletTokenTransfers({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component with Configuration in React/JSX\nDESCRIPTION: Renders the `ApiReference` component using JSX syntax. It passes configuration specific to the 'getWalletTokenApprovals' endpoint (accessed via `config.wallet.getWalletTokenApprovals`) to the component using the spread attribute syntax (`{...}`). This dynamically populates the component with the appropriate API details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/04-Get Wallet Token Approvals/get-wallet-token-approvals.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.wallet.getWalletTokenApprovals} />\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for User Session Management - Angular TypeScript\nDESCRIPTION: This snippet shows the minimal necessary imports for user session management in the user.component.ts file. It imports Router for navigation, axios for HTTP requests, and the environment object for accessing server URLs. Required for enabling authentication checks and logout flows.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Router } from \"@angular/router\";\n\nimport axios from \"axios\";\n\nimport { environment } from \"../../environments/environment\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in TypeScript/React\nDESCRIPTION: Imports the `ApiBanner` React component from a local project path (`@site/src/components/ApiBanner/ApiBanner.tsx`). This component is likely used within the documentation page framework (e.g., Docusaurus) to display a banner element, possibly related to the API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/01-pricing-plans.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Solana NFT Burner\nDESCRIPTION: Example of .env.local file content, including Moralis API key, NextAuth secret, and other necessary configurations for the Solana NFT Burner application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-burner.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# devent is used for chain Id as we will be testing the app on devnet chain\nAPP_CHAIN_ID=devnet\nAPP_DOMAIN=ethereum.boilerplate\n\n# Get your KEY https://admin.moralis.com/web3apis\nMORALIS_API_KEY= xxx\n\n# Linux: `openssl rand -hex 32` or go to https://generate-secret.now.sh/64\nNEXTAUTH_SECRET= xxx\n\n# Replace for production\nNEXTAUTH_URL=http://localhost:3000\n\n# Wallet private only if you want to use the NFT Minter page.\nPRIVATE_KEY = xxx\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Collections with Python using Moralis API\nDESCRIPTION: Python implementation to retrieve NFT collections owned by a wallet address. Uses the Moralis Python SDK to call the get_wallet_nft_collections endpoint with parameters including wallet address, chain, limit, and cursor.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/04-NFT Collections/how-to-get-all-nft-collections-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"limit\": 100,\n    \"cursor\": \"\",\n}\n\nresult = evm_api.nft.get_wallet_nft_collections(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Advanced Filter Configuration for CryptoPunk NFT Monitoring\nDESCRIPTION: This JSON configuration defines the advanced options filter for monitoring specific CryptoPunk NFTs with token IDs 1000, 1001, and 1002. It's used in the WebUI setup process to filter PunkTransfer events by specific token IDs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/how-to-monitor-specific-nfts.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"topic0\": \"PunkTransfer(address,address,uint256)\",\n    \"filter\": { \"in\": [\"punkIndex\", [\"1000\", \"1001\", \"1002\"]] }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers in Python\nDESCRIPTION: Python implementation to get ERC20 token transfers for a specific wallet address using Moralis Token API. Requires Moralis EVM API package. Returns transfer details including transaction hashes, addresses, timestamps, and values.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_wallet_token_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implement Chain Selector Component\nDESCRIPTION: React component for selecting blockchain networks with visual indicators.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-tradingview-lightweight-charts-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nconst chains = [\n  { id: \"eth\", name: \"Ethereum\", icon: \"🔷\" },\n  { id: \"bsc\", name: \"BSC\", icon: \"💛\" },\n  { id: \"polygon\", name: \"Polygon\", icon: \"💜\" },\n  { id: \"arbitrum\", name: \"Arbitrum\", icon: \"🔵\" },\n];\n\nconst ChainSelector = ({ onSelect }) => (\n  <select onChange={(e) => onSelect(e.target.value)} defaultValue=\"\">\n    <option value=\"\" disabled>\n      Select a Chain\n    </option>\n    {chains.map((chain) => (\n      <option key={chain.id} value={chain.id}>\n        {chain.icon} {chain.name}\n      </option>\n    ))}\n  </select>\n);\n\nexport default ChainSelector;\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installs necessary npm packages for the project: 'chart.js' for the charting library, 'react-chartjs-2' as a React wrapper for Chart.js, 'axios' for making HTTP requests to the Moralis API, and 'react-spinners' for displaying a loading indicator.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-chartsjs-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chart.js react-chartjs-2 axios react-spinners\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC20 Metadata with TypeScript\nDESCRIPTION: TypeScript implementation for fetching ERC20 token metadata using token symbols with the Moralis SDK. The code provides type safety while maintaining the same functionality as the JavaScript version.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-erc20-metadata-by-symbols.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const symbols = [\"UNI\", \"AAVE\", \"LINK\"];\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.token.getTokenMetadataBySymbol({\n    symbols,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script via Python Interpreter in Shell\nDESCRIPTION: This shell command executes a Python file named `index.py` using the default Python interpreter found in the system's PATH. It requires Python to be installed and configured correctly.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/partials/_run-the-script.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython index.py\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the documentation page, defining sidebar position, label and URL slug.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/02-Get Transactions/get-decoded-transaction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 1\nsidebar_label: Get decoded transaction by hash\nslug: /web3-data-api/evm/reference/get-decoded-transaction\n---\n```\n\n----------------------------------------\n\nTITLE: Adding getWalletNfts Function to serverless.yml\nDESCRIPTION: This YAML snippet adds the definition for a new Lambda function named `getWalletNfts` to the `serverless.yml` file under the `functions` section. It maps this function name to its handler code located at `functions/getWalletNfts.handler`.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ngetWalletNfts:\n    handler: functions/getWalletNfts.handler\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis Node URL using Environment Variables - Bash\nDESCRIPTION: This snippet demonstrates creating an environment file to securely store your Moralis Node URL. It adds a variable named MORALIS_NODE_URL to the .env file in your project root. dotenv is used in code to load this variable. There are no direct outputs, but this is a prerequisite for the main script.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/getting-started/02-making-your-first-request.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMORALIS_NODE_URL=YOUR_URL_OBTAINED_FROM_DASHBOARD\n```\n\n----------------------------------------\n\nTITLE: Creating React Project using Create React App\nDESCRIPTION: Command to create a new React project using create-react-app CLI tool\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-react-app your-first-dapp-react\ncd your-first-dapp-react\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Configuration for ERC20 Transfers API Documentation\nDESCRIPTION: This code snippet imports necessary components and configuration for rendering the API reference documentation. It includes imports for ApiReference, Admonition, config, and Link components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/04-Get Transfers/get-erc20-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\nimport Link from \"@docusaurus/Link\";\n```\n\n----------------------------------------\n\nTITLE: Adding serverless-offline Plugin to serverless.yml (YAML)\nDESCRIPTION: Shows the `plugins` section of the `serverless.yml` configuration file. The line `- serverless-offline` is added under `plugins:` to register the installed `serverless-offline` plugin with the Serverless Framework, enabling its use for local testing.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - serverless-offline\n\n```\n\n----------------------------------------\n\nTITLE: Searching Entities via API Endpoint (URI)\nDESCRIPTION: Provides the API endpoint URL for searching entities, addresses, and categories using the Moralis Entity API. This endpoint corresponds to the `searchEntities` method described in the documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/entity-api.md#2025-04-23_snippet_0\n\nLANGUAGE: uri\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/entities/search\n```\n\n----------------------------------------\n\nTITLE: Fetching Top Profitable Wallets per Token via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve the top gaining (most profitable) wallets for a specific ERC20 token using the Moralis Web3 API v2.2. The ':address' parameter should be replaced with the ERC20 token contract address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/erc20/:address/top-gainers\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Configuration\nDESCRIPTION: This snippet imports necessary React components (`ApiReference`, `Admonition`, `Link`) from the Docusaurus framework and site-specific components, along with a JSON configuration file (`configs.json`) likely containing API endpoint details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_maxPriorityFeePerGas.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Authentication Package for Moralis Firebase (Text CLI)\nDESCRIPTION: Adds the Solana-specific Firebase authentication utility from Moralis, which is required to implement Phantom wallet login on the frontend. Executed with npm prior to Solana auth code integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_9\n\nLANGUAGE: Text CLI\nCODE:\n```\nnpm install @moralisweb3/client-firebase-sol-auth\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component with Token Price Information\nDESCRIPTION: Renders the API reference component for the getTokenPrice endpoint with an embedded admonition that explains special considerations for USD price decimal places in the response.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/05-Get Token Prices/get-token-price.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getTokenPrice}>\n  <Admonition type=\"info\" icon=\"💡\" title=\"USD Price Decimal\">\n    <ReactMarkdown>\n      The `usdPrice` output field now supports results with more than 4 decimal\n      places. The smallest unit returned will be based on the SPL token's\n      decimal value. For example, if the token price is 0.001 and the token\n      decimal is 2, the price will be 0.\n    </ReactMarkdown>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Partial ERC-20 Token Event ABI in JSON\nDESCRIPTION: Fragment of an ERC-20 token ABI showing event definitions for Transfer, Pause, and Unpause events. Includes parameter details and indexing information.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ \"indexed\": true, \"name\": \"to\", \"type\": \"address\" },\n      { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  { \"anonymous\": false, \"inputs\": [], \"name\": \"Pause\", \"type\": \"event\" },\n  { \"anonymous\": false, \"inputs\": [], \"name\": \"Unpause\", \"type\": \"event\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in React (JavaScript)\nDESCRIPTION: This snippet imports the ApiReference React component, which is responsible for displaying structured API documentation within the documentation site. No external dependencies are necessary besides the internal @site/src/components/ApiReference path.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-address.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Balances in Python\nDESCRIPTION: Python implementation to get all ERC20 tokens owned by an address using Moralis SDK. Requires the moralis package. Returns token balances including address, name, symbol, logo, and balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/01-Tokens/how-to-get-all-erc20-tokens-owned-by-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.token.get_wallet_token_balances(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Follow NFT Metadata with Moralis EvmApi\nDESCRIPTION: Retrieves the Follow NFT metadata from a profile using Moralis EvmApi token methods. This code runs server-side and returns the NFT metadata along with profile data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst followNFT = await Moralis.EvmApi.token.getTokenIdMetadata({\n  address: response?.data.profile.followNftAddress,\n  chain: 0x89,\n  tokenId: 1,\n});\n\nconst myNFT = JSON.parse(followNFT.data.metadata).animation_url;\n\nreturn {\n  props: {\n    profile: response?.data.profile,\n    nftArray: nftArray,\n    myNFT: myNFT,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Component and Configuration for API Reference\nDESCRIPTION: Imports the necessary `ApiReference` React component from the site's components directory and the `config` object containing API details from a JSON configuration file. This setup is required to dynamically render the API documentation section.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/get-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Configuration in JavaScript\nDESCRIPTION: Imports a configuration object named `config` from a JSON file located in the documentation's configuration directory. This object is expected to contain parameters and details needed by the `ApiReference` component to render specific API endpoints.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/04-Get Wallet Token Approvals/get-wallet-token-approvals.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Configuration for API Reference\nDESCRIPTION: This snippet imports necessary React components (`ApiReference`, `ApiBanner`) and a configuration object (`config`) from external files. These imports are prerequisites for rendering the API documentation dynamically on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/price-api/02-NFT Prices/get-nft-floor-price-by-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Wagmi Hooks in Home Component\nDESCRIPTION: Sets up Wagmi hooks for wallet connection and contract interaction within the Home component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Home({ profile, nftArray, myNFT }) {\n  console.log(profile);\n\n  const { connectAsync } = useConnect();\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { config } = usePrepareContractWrite({\n    addressOrName: '0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d',\n    contractInterface: abi,\n    functionName: 'follow',\n    args: [[profile.id], [0x0]],\n  });\n\n  const { write } = useContractWrite(config);\n  \n  ...\n```\n\n----------------------------------------\n\nTITLE: Verifying Moralis Webhook Signatures with JavaScript\nDESCRIPTION: Code example demonstrating how to verify webhook signatures using the Moralis SDK. This verification ensures that incoming webhook data is authentically from Moralis by checking the x-signature header against the request body using the API key.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/webhooks/webhooks-transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nconst { headers, body } = request;\n\nMoralis.Streams.verifySignature({\n  body,\n  signature: headers[\"x-signature\"],\n}); // throws error if not valid\n```\n\n----------------------------------------\n\nTITLE: Fetching Aggregated Token Pair Statistics via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve aggregated statistics for all pairs involving a specific token address using the Moralis Web3 API v2.2. The ':token_address' parameter should be replaced with the token's contract address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:token_address/pairs/stats\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Page Title using JSX\nDESCRIPTION: Defines the HTML `<head>` section for the documentation page using JSX syntax within a Docusaurus file. It specifically sets the `<title>` tag, which determines the text displayed in the browser tab and is crucial for SEO.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/eth_getBlockTransactionCountByNumber.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<head>\n    <title>eth_getBlockTransactionCountByNumber RPC Method - Moralis Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana API Reference using JSX Component\nDESCRIPTION: This JSX snippet utilizes the imported `ApiReference` React component to render API documentation. It passes configuration specific to the Solana 'getTokenMetadata' endpoint (`config.solana.getTokenMetadata`) as props using the spread syntax. This dynamically generates the API reference content based on the provided configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/01-Get Token Metadata/get-token-metadata.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getTokenMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Get Native Balance with Python\nDESCRIPTION: Python implementation to fetch native balance of an ERC20 token vault using Moralis API. Requires moralis package. Takes address and chain as parameters and returns the balance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-native-balance-of-a-smart-contract-vault.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    # address of ERC20 token vault, e.g. WETH token address\n    \"address\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.balance.get_native_balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Node-Notifier Import in JavaScript\nDESCRIPTION: Import statement for the node-notifier package which is used to display desktop notifications based on webhook data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/live-crypto-notifications.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst notifier = require(\"node-notifier\");\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Navigating to Project (Bash)\nDESCRIPTION: This Bash snippet demonstrates cloning the DEX Screener clone repository from GitHub and changing directories to the project folder. It requires a working installation of Git. The command copies the project source code locally, enabling further development or setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/dexscreener-clone.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bharathbabu-moralis/dexscreener-clone.git\\ncd dexscreener-clone\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK with Pnpm\nDESCRIPTION: Command to install Moralis SDK and EVM utilities using Pnpm package manager.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/get-your-api-key.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add moralis @moralisweb3/common-evm-utils\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Offline Plugin (PowerShell)\nDESCRIPTION: Uses the `npm install` command with the `--save-dev` flag in a PowerShell terminal to install the `serverless-offline` package. This package is added as a development dependency, meaning it's needed for local development and testing but not for the deployed production application. It allows emulating the AWS Lambda and API Gateway environment locally.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install --save-dev serverless-offline\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Using Config Object (React, JavaScript)\nDESCRIPTION: This snippet shows the usage of the <ApiReference> component to display reference documentation for the 'getEntity' API, passing configuration from a JSON file. It expects a config object specifying endpoint details as an input, and outputs an interactive API reference UI. The setup assumes prior import of the config object and the presence of the <ApiReference> component.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/entity-api/03- Get Entities/get-entity-by-id.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.entities.getEntity}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Using getTokenAllowance API Request\nDESCRIPTION: Example of the new recommended API request to get token allowances using the getTokenAllowance endpoint, which replaces getErc20Approvals.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-09-11-breaking-change.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncurl --request GET \\\n     --url 'https://deep-index.moralis.io/api/v2.2/erc20/0xae7ab96520de3a18e5e111b5eaab095312d7fe84/allowance?chain=eth&owner_address=0xcB1C1FdE09f811B294172696404e88E658659905&spender_address=0x1111111254eeb25477b68fb85ed929f73a960582' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Fetching Native Balance with TypeScript\nDESCRIPTION: TypeScript implementation using Moralis SDK to get native balance of an Ethereum address. Requires Moralis and common-evm-utils packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/02-Native balance/how-to-get-the-balance-of-a-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nconst runApp = () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\";\n\n  const chain = EvmChain.ETHEREUM;\n\n  const response = await Moralis.EvmApi.balance.getNativeBalance({\n    address,\n    chain,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit Dependencies using npm\nDESCRIPTION: Installs the required packages (`@rainbow-me/rainbowkit`, `wagmi`, `viem`) using npm for integrating RainbowKit authentication. These packages provide wallet connection UI, core Web3 interaction hooks, and Ethereum utilities respectively.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-rainbowkit.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rainbow-me/rainbowkit@latest wagmi viem\n```\n\n----------------------------------------\n\nTITLE: EVM RPC Response: eth_feeHistory\nDESCRIPTION: Example response format for eth_feeHistory RPC method showing fee history data including oldest block, rewards, base fees, and gas ratios.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"oldestBlock\": \"0x1b4\",\n    \"reward\": [],\n    \"baseFeePerGas\": [],\n    \"gasUsedRatio\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in React/JSX\nDESCRIPTION: This code imports the ApiReference component from the site's components directory and a configuration object for the API reference. It then uses the component to render the API documentation for the getAddresses endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/reference/03-Profiles/get-addresses.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n# Get addresses that are bound to the specific profileId\n\n<ApiReference {...config.auth.getAddresses} />\n```\n\n----------------------------------------\n\nTITLE: Initializing URQL Client for Lens API (JavaScript)\nDESCRIPTION: Sets up and exports a GraphQL client using the `urql` library to interact with the Lens Protocol API. It defines the API endpoint URL (`https://api.lens.dev`) and creates the client instance.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/web3-social-media.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from 'urql';\n\nconst APIURL = 'https://api.lens.dev';\n\nexport const client = new createClient({\n  url: APIURL,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeseries Volume Data by Chain via Moralis API\nDESCRIPTION: Fetches timeseries volume data for a specified blockchain (e.g., 'eth') over a given timeframe (e.g., '1d') using the Moralis Deep Index API v2.2. Requires `chain` and `timeframe` query parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/volume/timeseries?chain=eth&timeframe=1d\n```\n\n----------------------------------------\n\nTITLE: Installing bs58 Dependency for Solana Data Processing (bash)\nDESCRIPTION: Installs the `bs58` package using npm or yarn. This package is required for encoding and decoding data, specifically handling signatures from Solana wallets like Phantom.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install bs58\n```\n\n----------------------------------------\n\nTITLE: Implementing Disable Totals with Moralis API in Python\nDESCRIPTION: This code snippet demonstrates how to implement the Disable Totals feature in Python by setting the disable_total parameter to True when making a get_wallet_nfts API call to Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-02-01-breaking-change.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n    \"disable_total\": True\n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Reference Documentation\nDESCRIPTION: This snippet imports the ApiReference component and config data to build the API reference documentation for the getTokenMetadata endpoint. It structures the page layout with the necessary documentation components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/02-Get Token Metadata/get-token-metadata.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n\n# Get ERC20 token metadata by contract\n\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n\n\n\n<ApiReference {...config.token.getTokenMetadata} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Server in TypeScript\nDESCRIPTION: Code to initialize a new Parse Server instance with configuration parameters including database URI, cloud code path, application ID, master key, and server URL.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { ParseServer } from 'parse-server';\n\nexport const parseServer = new ParseServer({\n  databaseURI: config.DATABASE_URI, // Connection string for your MongoDB database\n  cloud: config.CLOUD_PATH, // Absolute path to your Cloud Code\n  appId: config.APPLICATION_ID, // Application ID\n  masterKey: config.MASTER_KEY, // Master key\n  serverURL: config.SERVER_URL, // Server URL\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Logs with eth_getLogs\nDESCRIPTION: This snippet demonstrates the request format for the eth_getLogs method. It includes parameters such as block range, address, and topics to filter the logs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"fromBlock\": \"0x1\",\n    \"toBlock\": \"0x2\",\n    \"address\": \"0x8888f1f195afa192cfee860698584c030f4c9db1\",\n    \"topics\": [\"0x00000000000000000000000000000000\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying API Banner\nDESCRIPTION: This JSX snippet renders an `ApiBanner` React component. Its specific purpose isn't fully detailed by the snippet alone but is likely used to display promotional, informational, or contextual content related to the API being documented.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/price-api/get-multiple-token-prices.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiBanner />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference for Update Stream Endpoint\nDESCRIPTION: This snippet uses the imported `ApiReference` component in a JSX context. It passes the specific configuration for the 'UpdateStream' endpoint (located within `config.streams`) to the component as props, instructing it to render the relevant API details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/update-stream.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.streams.UpdateStream} />\n```\n\n----------------------------------------\n\nTITLE: WebUI Advanced Options Configuration for ERC20 Transfer Monitoring\nDESCRIPTION: JSON configuration for setting up ERC20 transfer monitoring through the Moralis WebUI. Defines filtering conditions for transfers over 1000 tokens from a specific address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/tutorials/how-to-listen-all-er-c20-token-transfers-over-certain-amount-sent-by-specific-address.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"topic0\": \"Transfer(address,address,uint256)\",\n    \"filter\": {\n      \"and\": [\n        { \"eq\": [\"from\", \"0x283af0b28c62c092c9727f1ee09c02ca627eb7f5\"] },\n        { \"gt\": [\"value\", \"1000000000\"] }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Token Price in Python\nDESCRIPTION: Python implementation to get ERC20 token price using Moralis API. Requires the moralis package. Returns token price and related information for a specified token address on the Ethereum chain.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/02-Token Price/how-to-get-the-price-of-an-erc20-token.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_token_price(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs from Solana Wallet (TypeScript)\nDESCRIPTION: This function handles the NFT search process by calling a backend API route with the wallet address. It uses the Moralis Solana API to fetch NFTs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-explorer.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nftSearch = async () => {\n  setSearchResult(() => null);\n  setQuery('');\n  setPage(1);\n  if (searchInput) {\n    const options = {\n      network: 'mainnet',\n      address: searchInput,\n    };\n    const response = await apiPost('/SolApi/account/getNFTs', options);\n    setSearchResult(() => response);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration JSON in JavaScript/JSX\nDESCRIPTION: Imports API configuration data from a JSON file located within the project's documentation structure. This configuration object likely contains details like endpoint URLs, parameters, and descriptions.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/reference/02-Challenge/verify-challenge-evm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Fetching SPL NFT Balance using TypeScript\nDESCRIPTION: TypeScript implementation for getting SPL NFT balance of a Solana address using Moralis API. Requires Moralis and @moralisweb3/common-sol-utils packages.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/nft-api/how-to-get-spl-nft-balance-of-an-address.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { SolNetwork } from \"@moralisweb3/common-sol-utils\";\n\nconst runApp = async () => {\n  await Moralis.start({\n    apiKey: \"YOUR_API_KEY\",\n    // ...and any other configuration\n  });\n\n  const address = \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\";\n\n  const network = SolNetwork.MAINNET;\n\n  const response = await Moralis.SolApi.account.getNFTs({\n    address,\n    network,\n  });\n\n  console.log(response.toJSON());\n};\n\nrunApp();\n```\n\n----------------------------------------\n\nTITLE: Updating Home Component to Use NFT Array\nDESCRIPTION: Updates the Home component to accept and use the NFT array passed from getServerSideProps. This enables the component to display the follow NFTs retrieved from Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Home({ profile, nftArray }) {\n  console.log(profile);\n\n  // let nftArray; remove or comment this out\n  let myNFT;\n  \n  ...\n```\n\n----------------------------------------\n\nTITLE: Fetching Volume Statistics by Category via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve volume and chain data filtered by token categories (e.g., 'artificial-intelligence') using the Moralis Web3 API v2.2. Requires specifying the category and chain (e.g., 'chain=eth').\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/volume/categories?chain=eth\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Transactions using Python\nDESCRIPTION: Example showing how to use Moralis API to get all transactions for a specific wallet address on Ethereum chain using Python. Requires Moralis API key and moralis package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/blockchain-api/02-Get Transactions/how-to-get-all-transactions-of-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.transaction.get_wallet_transactions(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ApiBanner Component in TSX\nDESCRIPTION: Code that imports the ApiBanner component from the site's components directory and renders it. This component likely provides additional context or promotional information about the API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Token Analytics/get-token-analytics.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n\n<ApiReference {...config.solana.getTokenAnalytics} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ApiBanner Component in JSX\nDESCRIPTION: Imports the ApiBanner component from the site's component library. This banner is likely used to display important information or notices about the API at the top of the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Volume Stats/get-timeseries-volume.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Token Details Documentation Page in React\nDESCRIPTION: Imports various React components needed for building the API reference documentation page, including ApiReference, Admonition, Link, and custom components for premium endpoint badges.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/02-Get Token Metadata/get-token-details.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport { PremiumEndpointBadge } from \"@site/src/components/PremiumEndpointBadge/PremiumEndpointBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in JavaScript/JSX\nDESCRIPTION: Imports the `ApiReference` React component from a local path within the documentation site structure. This component is likely used to display standardized API documentation sections based on configuration data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-ens-domain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: React Component Import Statements\nDESCRIPTION: Import statements for React components used in the API reference documentation page, including ApiReference, Admonition, Link, and configuration data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/02-Get Transactions/get-wallet-transactions-verbose.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Sample Smart Contract ABI\nDESCRIPTION: ABI (Application Binary Interface) for a simple donation smart contract used in the tutorial.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"inputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Donate\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"newDonation\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Default package.json Structure after Initialization\nDESCRIPTION: Displays the initial content of the `package.json` file generated by the `npm init -y` command. It includes basic project metadata like name, version, main entry point (`index.js`), and a default test script.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference and Admonition Components in JSX\nDESCRIPTION: This code snippet renders an API reference component for the getNFTTransfers endpoint, along with an admonition component displaying a caution notice about a query parameter change.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/06-Get Transfers/get-wallet-nft-transfers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getWalletNFTTransfers}>\n  <Admonition type=\"caution\" icon=\"⚠️\" title=\"QUERY PARAMETER CHANGE\">\n    <p>\n      From the 4th September 2023, the <b>direction</b> query parameter will be removed. <a href=\"/changelog/essential-api-changes\">Read more here</a>.\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Fetching DEX Token Pair Reserves via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve the liquidity reserves for a specific DEX token pair address using the Moralis Web3 API v2.2. Replace ':pair_address' with the pair's contract address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:pair_address/reserves\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless Service with Moralis API Key (YAML)\nDESCRIPTION: Defines the Serverless service configuration in `serverless.yml`. It specifies AWS as the provider, sets the runtime to Node.js 14.x, defines a `MORALIS_API_KEY` environment variable (with a placeholder 'replace_me' that needs replacement), includes the `serverless-offline` plugin for local testing, and configures an HTTP API trigger (`httpApi: '*'`) for the `handler.handler` function.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservice: aws-node-express-api-project\nframeworkVersion: '3'\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  environment:\n    MORALIS_API_KEY: 'replace_me'\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  api:\n    handler: handler.handler\n    events:\n      - httpApi: '*'\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components (React/JSX)\nDESCRIPTION: Imports necessary React components (`ApiReference`, `Admonition`, `ReactMarkdown`, `ApiBanner`) and configuration (`config`) from specified paths. These components are used for rendering the API documentation page structure and content within a likely MDX or React-based documentation framework (e.g., Docusaurus).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/07-Get Wallet Net-worth/get-wallet-net-worth.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with Note (React/JSX)\nDESCRIPTION: Uses the `ApiReference` component to display detailed documentation for the `getWalletNetWorth` endpoint. The configuration for the endpoint is passed dynamically using the spread attributes syntax (`{...config.wallet.getWalletNetWorth}`). It includes a nested `Admonition` component of type 'info' to highlight important recommendations regarding filtering spam tokens/contracts and the endpoint's limitation to mainnet chains.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/07-Get Wallet Net-worth/get-wallet-net-worth.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.wallet.getWalletNetWorth}>\n <Admonition type=\"info\" title=\"Note\">\n    <p>\n      We recommend to filter out spam tokens and unverified contracts to get a more accurate result. <br/>\n      Endpoint only works on the Mainnet chains.\n    </p>\n\n  </Admonition>\n  </ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration in JSX\nDESCRIPTION: This code imports an ApiReference component and configuration settings from a JSON file, then renders the API reference for the AddAddressToStream endpoint of the Moralis Streams API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/add-address-to-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n# Add address to stream\n\n<ApiReference {...config.streams.AddAddressToStream} />\n```\n\n----------------------------------------\n\nTITLE: PnL Calculation Formula\nDESCRIPTION: Mathematical formula used to calculate realized Profit and Loss using weighted average cost method. The formula considers average sell price in USD and average cost of quantity sold multiplied by total tokens sold.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/faqs/01-Wallet API/profitability-faqs.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n(avgSellPriceUsd − avgCostOfQuantitySold) × totalTokensSold\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output for Native Balance - JSON\nDESCRIPTION: Example response from the '/demo' endpoint showing the native Ether balance as a string. This illustrates the structure clients should expect when querying the API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"native\": \"0.169421625822962794\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing EVMRpcChainData Component in JSX\nDESCRIPTION: This code imports a React component called EVMRpcChainData from the site components directory and renders it in the page. This component likely displays a list or table of all EVM-compatible blockchain networks supported by the Moralis platform.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/03-public-node-endpoints.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EVMRpcChainData } from '@site/src/components/SupportedChains';\n\n<EVMRpcChainData/>\n```\n\n----------------------------------------\n\nTITLE: Get Solana Wallet Balance Using Python\nDESCRIPTION: Python implementation to fetch native Solana balance using Moralis API. Requires the moralis package. Returns balance in both lamports and SOL.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/balance-api/how-to-get-native-solana-balance-by-wallet.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\",\n    \"network\": \"mainnet\",\n}\n\nresult = sol_api.account.balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Get NFT Collection Stats Response Example\nDESCRIPTION: Example JSON response structure for the new /nft/{address}/stats endpoint showing total tokens, current owners and transfer counts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-09-11-breaking-change.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"total_tokens\": \"10000\",\n  \"owners\": {\n    \"current\": \"10000\"\n  },\n  \"transfers\": {\n    \"total\": \"235936\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component for Unstoppable Lookup by Address in React\nDESCRIPTION: This code snippet imports the ApiReference component and configuration data for the resolveAddressToDomain API. It then renders the ApiReference component with the specific configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/07-Domains Lookups/resolve-address-to-domain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.resolve.resolveAddressToDomain} />\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for API Documentation\nDESCRIPTION: React/JSX imports for rendering API reference documentation components and configuration data. Includes imports for ApiReference component, configuration object, and an Admonition component for displaying informational notices.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/02-Get Transactions/get-wallet-transactions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Parse Server with Moralis Auth Adapter\nDESCRIPTION: Code to initialize Parse Server with the custom Moralis authentication adapter, integrating Web3 authentication into the Parse Server framework.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { ParseServer } from 'parse-server';\nimport MoralisAuthAdapter from './auth/MoralisAuthAdapter';\n\nexport const parseServer = new ParseServer({\n  databaseURI: config.DATABASE_URI,\n  cloud: config.CLOUD_PATH,\n  appId: config.APPLICATION_ID,\n  masterKey: config.MASTER_KEY,\n  serverURL: config.SERVER_URL,\n  auth: {\n    moralis: {\n      module: MoralisAuthAdapter,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC20 Transfers with Python\nDESCRIPTION: Python implementation for getting ERC20 token transfers using Moralis SDK. Uses the moralis package and requires an API key for authentication.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/04-Transfers/how-to-get-all-erc20-transactions-by-contract.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n    \"chain\": \"eth\"\n}\n\nresult = evm_api.token.get_token_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger Configuration for ERC20 Transfers\nDESCRIPTION: JavaScript code that creates a trigger configuration for fetching the sender's balance in ERC20 transfers. Uses selectors to dynamically reference contract address and sender address.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/triggers.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst trigger = {\n  contractAddress: \"$contract\",\n  functionAbi: balanceOfSenderAbi,\n  inputs: [\"$from\"],\n  type: \"erc20transfer\",\n};\n\nconst triggers = [trigger];\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in JavaScript/JSX\nDESCRIPTION: Imports the `ApiReference` React component from a relative path within the project's site structure. This component is responsible for rendering formatted API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/reference/02-Challenge/verify-challenge-evm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Reference Component for SetSettings Endpoint\nDESCRIPTION: This code imports the ApiReference component and a configuration object, then renders the API reference documentation for the SetSettings endpoint in the Moralis Streams API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/02-Project/set-settings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n# Set project settings\n\n<ApiReference {...config.streams.SetSettings} />\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in TypeScript/TSX\nDESCRIPTION: Imports the `ApiBanner` React component from a TypeScript file (`.tsx`). This component is likely used to display a prominent banner related to the API documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Volume Stats/get-timeseries-volume.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Configuration for API Reference in JSX\nDESCRIPTION: This snippet imports necessary components and configuration for rendering the API reference. It includes imports for ApiReference, Admonition, ReactMarkdown, and a configuration file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/01-Get Tokens/get-wallet-token-balances.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in JSX\nDESCRIPTION: This code imports the ApiBanner component, which is likely used to display a banner or header for the API documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/07-Get NFT Trades/get-nft-trades.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Authentication in NextJS\nDESCRIPTION: Adds getServerSideProps function to check user session and redirect unauthenticated users. Displays a message based on NFT ownership.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/nft-gating-nextjs.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSession } from 'next-auth/react';\nimport Moralis from 'moralis';\n\nfunction Protected({ message }) {\n    return (\n        <div>\n            <h3>Protected content</h3>\n            <p>{message}</p>\n        </div>\n    );\n}\n\nexport async function getServerSideProps(context) {\n    const session = await getSession(context);\n\n    if (!session) {\n        return {\n            redirect: {\n                destination: '/signin',\n                permanent: false,\n            },\n        };\n    }\n\n\n    return {\n        props: {\n            message:\n                // if user has at least one NFT he will get congrats message\n                nftList.raw.total > 0 ? 'Nice! You have our NFT' : \"Sorry, you don't have our NFT\",\n        },\n    };\n}\nexport default Protected;\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project\nDESCRIPTION: Creates a new Node.js project by initializing a package.json file with default values.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Moralis Get Wallet NFTs Lambda Function\nDESCRIPTION: AWS Lambda function that uses Moralis SDK to fetch NFTs owned by a wallet address with pagination.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nconst Moralis = require(\"moralis\").default;\n\nconst startMoralis = async () => {\n  await Moralis.start({\n    apiKey: process.env.MORALIS_API_KEY,\n  });\n};\n\nstartMoralis();\n\nmodule.exports.handler = async (event) => {\n  // Get wallet NFTs\n  const nfts = await Moralis.EvmApi.nft.getWalletNFTs({\n    address: event.address,\n    chain: event.chain,\n    limit: 10,\n  });\n\n  return {\n    result: JSON.stringify(nfts),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript React Banner Component\nDESCRIPTION: This snippet shows the import of a TypeScript-based React banner component for incorporating UI banners in the documentation view. The file path indicates a modular structure with TypeScript used for type safety, and the component is expected to display additional context or promotional content.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/05-Get NFT Owners/get-nft-token-id-owners.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component in JSX\nDESCRIPTION: This code snippet renders the ApiReference component with configuration specific to the getNFTTraitsByCollectionPaginate endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/09-Get NFT Traits and Rarity/get-nft-traits-by-collection-paginate.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTTraitsByCollectionPaginate}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for ERC20 Token Holders Endpoint\nDESCRIPTION: This code renders the API reference component for the getTokenOwners endpoint, passing configuration from the configs.json file. It utilizes the ApiReference component to generate the complete API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/08-Get Token Holders/get-token-owners.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n\n<ApiReference {...config.token.getTokenOwners}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Solana Token Price Documentation\nDESCRIPTION: Imports required React components for the API documentation page, including ApiReference, Admonition, ReactMarkdown, and configuration data from a JSON file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/05-Get Token Prices/get-token-price.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Checking Endpoint Weights in TypeScript\nDESCRIPTION: This code snippet shows how to use the Moralis SDK in TypeScript to check the latest compute units of API offerings using the web3ApiVersion method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/08-compute-units-cu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.utils.web3ApiVersion();\n\nconsole.log(response?.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Solidity Contract with Complex Types for Triggers\nDESCRIPTION: Example Solidity contract demonstrating complex struct types that can be used with Moralis Triggers. Shows how to define structs and functions that can be called by triggers.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/triggers.md#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ComplexContract {\n\n  struct Human {\n    string name;\n    int age;\n    address user;\n  }\n\n  mapping(address => Human[]) friends;\n\n\tfunction getFriends(Human memory human) public view returns(Human[] memory friend) {\n    return (friends[human.user]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing logout endpoint for session termination\nDESCRIPTION: Express.js endpoint that clears the JWT cookie, effectively logging out the user by removing their session data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/logout\", async (req, res) => {\n  try {\n    res.clearCookie(\"jwt\");\n    return res.sendStatus(200);\n  } catch {\n    return res.sendStatus(403);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration in JavaScript\nDESCRIPTION: Imports API configuration data from a JSON file located within the documentation's configuration directory. This configuration is likely used to populate the `ApiReference` component dynamically.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/wallet-api/09-Get Wallet Domains/resolve-ens-domain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Getting Solana Native Balance\nDESCRIPTION: Example showing how to fetch the native balance of a Solana address using Moralis sol_api.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import sol_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"BWeBmN8zYDXgx2tnGj72cA533GZEWAVeqR9Eu29txaen\",\n    \"network\": \"mainnet\",\n}\n\nresult = sol_api.account.balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Rendering Tutorial Cards with DocCardList in JSX\nDESCRIPTION: Imports and renders the DocCardList component to display a collection of tutorial cards related to the Streams API. This component automatically lists all available tutorial documents in the current section.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/tutorials/tutorials.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />  \n```\n\n----------------------------------------\n\nTITLE: Configuring Default EVM Chain in Moralis\nDESCRIPTION: Shows how to change the default EVM chain for all API calls by setting defaultEvmApiChain in the Moralis configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/cross-chain-requests.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\nMoralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  defaultEvmApiChain: EvmChain.POLYGON,\n});\n\nMoralis.EvmApi.block.getBlock({\n  blockNumberOrHash: \"33000000\",\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Integration Documentation List with DocCardList in JSX\nDESCRIPTION: Imports and renders a DocCardList component to display integration documentation cards. The page uses frontmatter configuration for title, sidebar position, slug, and custom sidebar class name.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component and Configuration\nDESCRIPTION: This snippet imports the necessary React component `ApiReference` and a configuration file (`configs.json`) to dynamically render API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/reference/03-Profiles/verify-request-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component\nDESCRIPTION: This code imports the ApiBanner component which is used to display a banner for the API documentation. The component is imported from a TypeScript file in the src/components directory.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Token Top Traders/get-top-profitable-wallet-per-token.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components for API Documentation in React\nDESCRIPTION: This code snippet imports necessary components and configurations for rendering the API reference documentation. It includes imports for ApiReference, config object, Admonition, and ReactMarkdown components.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/09-Get NFT Traits and Rarity/get-nft-traits-by-collection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\nimport Admonition from \"@theme/Admonition\";\nimport ReactMarkdown from \"react-markdown\";\n```\n\n----------------------------------------\n\nTITLE: Listing Firebase Projects\nDESCRIPTION: Command to list available Firebase projects\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfirebase projects:list\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Update Stream\nDESCRIPTION: Renders the ApiReference component with configuration specific to the UpdateStream endpoint from the imported configuration file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/update-stream.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.streams.UpdateStream} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Unified NFT Token Approvals in JavaScript\nDESCRIPTION: This code snippet demonstrates the new structure for NFT token approvals in the Streams API. It includes examples for both ERC721 and ERC1155 tokens, showing how approvals are now unified regardless of the token standard.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2022-12-06-nft-approvals.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...,\n  nftTokenApprovals: [\n   {\n     transactionHash: \"0xf0c7542c73e2d26cc0b249da63426643263463463646345\",\n     logIndex: \"0\",\n     contract: \"0xf573d99385c05c23b24ed33de616ad16a43a0919\",\n     account: \"0x6887246668a3b87f54deb3b94ba47a6f63f32985\",\n     operator: \"0x34b6a28edbbaf0c7542c73e2d26cc0b249da69a6\",\n     approvedAll: false,\n     tokenId: '1',\n     tokenName: 'STREAMSNFT',\n     tokenSymbol: 'StrNft',\n     tokenContractType: 'ERC721',\n    },\n    {\n      transactionHash: \"0x60c7542c73e2d26cc0b249da63426643263463467846235\",\n      logIndex: '0',\n      contract: '0xd119b250d83893860159f8a7b7a751bc044655a1',\n      account: '0x6887246668a3b87f54deb3b94ba47a6f63f32985',\n      operator: '0x34b6a28edbbaf0c7542c73e2d26cc0b249da69a6',\n      approvedAll: true,\n      tokenId: null,\n      tokenName: 'ERC1155_Name',\n      tokenSymbol: 'ERC1155_SYMBOL',\n      tokenContractType: 'ERC1155',\n    }\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Configuration (JavaScript)\nDESCRIPTION: Imports necessary React components (`ApiReference`, `Admonition`) and a JSON configuration file (`configsV2.json`) required for rendering the API reference documentation page within a documentation framework like Docusaurus. `ApiReference` displays the API details, `Admonition` shows formatted notes/warnings, and `config` supplies the data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/13-Blockchain API/03-Get Logs/get-contract-logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component for Sync NFT Contract\nDESCRIPTION: This code renders the ApiReference component with the configuration for the 'Sync NFT Contract' endpoint. It displays the API details, including parameters, responses, and examples.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/04-Get NFT Collections/sync-nft-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.syncNFTContract} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Storage Value with eth_getStorageAt\nDESCRIPTION: This snippet illustrates the request format for the eth_getStorageAt method. It includes parameters for the storage address, storage position, and block tag.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\"0x0000000000000000000000000000000000000000\", \"0x0\", \"latest\"]\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Components in JSX\nDESCRIPTION: Imports the ApiReference component and loads the configuration for the contracts review API. This setup allows displaying detailed API documentation for the contract review functionality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/utils/contract-review.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.utils.contractsReview} />\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Spam Report API\nDESCRIPTION: This snippet shows the expected JSON response from the Moralis API after successfully reporting a spam NFT contract. The response contains a message confirming that the submission was successful.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/spam-detection/report-nft-spam.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"message\": \"Submission successful\" }\n```\n\n----------------------------------------\n\nTITLE: Getting Ethereum Native Balance\nDESCRIPTION: Code to retrieve the native balance of an Ethereum address using Moralis evm_api.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\n\nparams = {\n    \"address\": \"0x26fcbd3afebbe28d0a8684f790c48368d21665b5\",\n    \"chain\": \"eth\",\n}\n\nresult = evm_api.balance.get_native_balance(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Collection Data by Contract using SimpleHash API\nDESCRIPTION: SimpleHash API endpoint to retrieve collection data for a specific NFT contract on a given chain. Requires `chain` and `contract_address` as path parameters.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/08-simplehash-migration-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.simplehash.com/api/v0/nfts/collections/{chain}/{contract_address}\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component and Configuration in JSX\nDESCRIPTION: Imports the ApiReference component and configuration data to render the API documentation for the verify bind request endpoint in the Moralis Authentication API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/reference/03-Profiles/verify-request-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n# Verify bind request\n\n<ApiReference {...config.auth.verifyRequestBind} />\n```\n\n----------------------------------------\n\nTITLE: Importing ApiBanner Component in JSX\nDESCRIPTION: This code snippet imports the ApiBanner component from a specific file path. The component is likely used to display a banner related to the API documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/07-Get NFT Trades/get-nft-trades-by-wallet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component in React\nDESCRIPTION: This code snippet imports the ApiReference component and configuration data for the API reference documentation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/01-Get Wallet Details/get-chain-activity-by-wallet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet imports and renders the DocCardList component, which is likely used to display a list of tutorial cards or links on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/solana/tutorials/tutorials.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Blockchain Bot\nDESCRIPTION: Installs necessary npm packages including Moralis, Express, Discord.js, dotenv, and nodemon for development.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/blockchain-discord-bot.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis express discord.js dotenv nodemon\n```\n\n----------------------------------------\n\nTITLE: Get ERC20 Token Stats Response Example\nDESCRIPTION: Example JSON response structure for the new /erc20/{address}/stats endpoint showing total transfer count.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-09-11-breaking-change.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"transfers\": {\n\t\t\"total\": \"5311\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis with API Key\nDESCRIPTION: Code to initialize the Moralis SDK with an API key, which is required before using any Moralis services in the application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/parse.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport Moralis from 'moralis';\n\nMoralis.start({\n  apiKey: 'your_api_key_here',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component with EVM Challenge Config\nDESCRIPTION: React/JSX code that imports and renders an API reference component with configuration for the EVM challenge verification endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/reference/02-Challenge/verify-challenge-evm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.auth.verifyChallengeEvm} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component in React\nDESCRIPTION: This code snippet renders the ApiReference component, passing the configuration for the 'getNFTTraitsByCollection' API from the imported config object. It displays the API details and usage information for the 'Get NFT Traits by Collection' endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/09-Get NFT Traits and Rarity/get-nft-traits-by-collection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTTraitsByCollection}></ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies using Yarn (Bash)\nDESCRIPTION: Installs necessary NodeJS packages for the backend implementation using the Yarn package manager. It adds the Moralis SDK (`moralis`) for Web3 authentication, the Supabase client library (`@supabase/supabase-js`) for interacting with the Supabase backend, and the `jsonwebtoken` library for signing JWTs.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add moralis @supabase/supabase-js jsonwebtoken\n```\n\n----------------------------------------\n\nTITLE: Starting the Frontend Development Server\nDESCRIPTION: Launches the Next.js development server for the Tic Tac Toe game frontend.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-multiplayer-game-tictactoe.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Importing wagmi dependencies in React\nDESCRIPTION: Imports required wagmi components and providers for setting up Web3 connectivity in a React application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createConfig, configureChains, WagmiConfig } from \"wagmi\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { mainnet } from \"wagmi/chains\";\n\nimport Signin from \"./signin\";\nimport User from \"./user\";\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for NFT Collection Stats\nDESCRIPTION: This code snippet renders the ApiReference component with configuration data specific to the 'getNFTCollectionStats' endpoint. It provides a structured way to display the API documentation for retrieving NFT collection statistics.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/08-Get NFT Stats/get-nft-collection-stats.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.nft.getNFTCollectionStats}>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Basic API Request without disable_total Parameter\nDESCRIPTION: Example of a basic API request URL without explicitly setting the disable_total parameter. Prior to February 1st 2023, this defaults to disable_total=false.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2023-01-12-disable-total-for-faster-response-times.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2/${address}?chain=eth\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference with Admonition (JSX)\nDESCRIPTION: Uses the custom `ApiReference` React component to render the documentation for the `getContractLogs` endpoint, passing configuration data via props (`config.events.getContractLogs`). It embeds an `Admonition` component to display a caution message regarding upcoming mandatory changes to the `topic0` query parameter and the removal of other topic fields.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/13-Blockchain API/03-Get Logs/get-contract-logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.events.getContractLogs} >\n  <Admonition type=\"caution\" icon=\"⚠️\" title=\"QUERY PARAMETER CHANGE\">\n    <p>\n     From the 4th September 2023, the <b>topic0</b> field will now be required, and we will be removing the <b>topic1</b>, <b>topic2</b>, <b>and topic3</b> fields. <a href=\"/changelog/essential-api-changes\">Read more here</a>.\n    </p>\n  </Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana API Reference with JSX Component\nDESCRIPTION: This JSX snippet renders the API reference documentation by invoking the 'ApiReference' component. It uses the spread operator (`...`) to pass configuration details specific to the Solana 'getPortfolio' endpoint, likely loaded from the imported 'config.json' file. This component is responsible for displaying the technical details of the API endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/02-Get Token Balances/get-native-and-spl-balance.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.solana.getPortfolio} />\n```\n\n----------------------------------------\n\nTITLE: Generate Event Topic Hash Example\nDESCRIPTION: Example code showing how to generate a topic0 hash from an event signature using ethers.js library.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-09-11-breaking-change.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ethers = require(\"ethers\");\n\nconst eventSignature = \"Transfer(address,address,uint256)\";\nconst hash = ethers.utils.solidityKeccak256([\"string\"], [eventSignature]);\n```\n\n----------------------------------------\n\nTITLE: Installing wagmi and viem dependencies for React Web3 authentication\nDESCRIPTION: Command to install the wagmi and viem libraries, which are essential for interacting with Web3 wallets like MetaMask in a React application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-authenticate-users-with-metamask-using-react.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install wagmi viem\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction by Hash with eth_getTransactionByHash\nDESCRIPTION: This snippet shows the request format for the eth_getTransactionByHash method. It includes the transaction hash as a parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/98-EVM RPC API/evm-rpc-schema.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n[\"0x1a14ddf8d90ef3bdfa85e9d9d35f4abebfdff70606faa55b61404f1e78cb90fc\"]\n```\n\n----------------------------------------\n\nTITLE: Resolving Unstoppable Domain Using Python\nDESCRIPTION: Python implementation for resolving an Unstoppable domain to an ETH address using Moralis API. Requires the moralis package.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-reverse-resolve-an-address.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"domain\": \"brad.crypto\",\n    \"currency\": \"eth\",\n}\n\nresult = evm_api.resolve.resolve_domain(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Pairs by Address via Moralis API\nDESCRIPTION: Fetches token pairs associated with a specific token address using the Moralis Deep Index API v2.2. Requires the `:token_address` path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/:token_address/pairs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Analytics via Moralis API\nDESCRIPTION: Fetches analytics data for a specific token address using the Moralis Deep Index API v2.2. Requires the `:address` path parameter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/token-api.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/tokens/:address/analytics\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block by Hash via Moralis API URL\nDESCRIPTION: API endpoint URL for fetching a specific block's details using its hash or block number. Corresponds to the `getBlockByHash` method.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/blockchain-api/blockchain-api.md#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/block/:block_number_or_hash\n```\n\n----------------------------------------\n\nTITLE: Initializing Moralis SDK in TypeScript\nDESCRIPTION: Initialize the Moralis SDK using an API key in TypeScript. The API key should be stored in a .env file for security.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/01-moralis-sdk.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Moralis from \"moralis\";\n\nawait Moralis.start({\n  apiKey: \"YOUR_API_KEY\",\n  // ...and any other configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Package.json Configuration\nDESCRIPTION: Initial package.json configuration file with basic project metadata and scripts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"simple-nodejs-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Components in React\nDESCRIPTION: This code imports and renders the API reference component for the getWalletTokenApprovals endpoint using configuration from the configs.json file.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/02-Get Token Approvals/get-token-approvals.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\n\n# Get Wallet Token Approvals\n\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n\n<ApiReference {...config.wallet.getWalletTokenApprovals} />\n```\n\n----------------------------------------\n\nTITLE: Optimized Block Query Function\nDESCRIPTION: Enhanced version of the block query function with hardcoded chain parameter to reduce input parameters and potential misuse.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/firebase-api-calls-from-the-frontend.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\n\ninterface GetBlockData {\n  blockNumberOrHash: string;\n}\n\nexport const getBlock = functions.https.onCall(async (data: GetBlockData) => {\n  const response = await Moralis.EvmApi.block.getBlock({\n    chain: EvmChain.ETHEREUM,\n    blockNumberOrHash: data.blockNumberOrHash,\n  });\n  return response.toJSON();\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for ENS Domain Resolution in JSX\nDESCRIPTION: This code renders the ApiReference component with the configuration for the 'resolve ENS domain' endpoint. It's used to display the API documentation for this specific functionality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/09-Wallet API/07-Domains Lookups/resolve-ens-domain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.resolve.resolveENSDomain} />\n```\n\n----------------------------------------\n\nTITLE: Using DocCardList Component in JSX\nDESCRIPTION: Renders the imported `DocCardList` component within the JSX structure of the page. This component dynamically creates navigation cards linking to other documents based on the file structure or configuration, simplifying index page creation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/token-api/token-api.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Example of IPFS Gateway URL Format Change\nDESCRIPTION: Demonstrates the transition from the old IPFS gateway URL format to the new format. The old format used a Moralis IPFS gateway URL, while the new format returns the on-chain tokenURI with the ipfs:// protocol.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/blog/2024-12-18-solana-updates.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **Old format:**\n  - `https://ipfs.moralis.io:2053/ipfs/QmdYeDpkVZedk1mkGodjNmF35UNxwafhFLVvsHrWgJoz6A/beanz_metadata/9933`  \n- **New format:**\n  - `ipfs://QmdYeDpkVZedk1mkGodjNmF35UNxwafhFLVvsHrWgJoz6A/beanz_metadata/9933`\n```\n\n----------------------------------------\n\nTITLE: Querying NFT Trades by Contract Address using Moralis SDK in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Moralis SDK to fetch NFT trade data for a specific contract address. It includes parameters for pagination and filtering by marketplace.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/10-NFT API/06-Get NFT Market Data/get-nft-trades.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Moralis from 'moralis';\ntry {\n    await Moralis.start({\n        apiKey: \"YOUR_API_KEY\"\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTrades({\n        address: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\n        chain: \"0x1\",\n        fromBlock: 0,\n        toBlock: 999999999,\n        fromDate: \"\",\n        toDate: \"\",\n        limit: 100,\n        cursor: \"\",\n        marketplace: \"opensea\"\n    });\n\n    console.log(response.raw);\n} catch (e) {\n    console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Solana Historical Token Holder API Reference - React JSX\nDESCRIPTION: Displays the Solana-specific historical token holder timeseries API reference using a reusable React component and configuration. It relies on the `ApiReference` component and a configuration property (`solana.getHistoricalHolders`) loaded from JSON. Inputs are the configuration object properties, and the output is a rendered API reference UI; limitation is that the config object and the ApiReference component must be correctly structured and available.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Token Holders/get-historical-token-holders.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference {...config.solana.getHistoricalHolders} />\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Multiple Token Prices\nDESCRIPTION: This JSX code renders the ApiReference component with the configuration for the 'getMultipleTokenPrices' API endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/11-Token API/02-Get Price/get-multiple-token-price.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getMultipleTokenPrices} />\n```\n\n----------------------------------------\n\nTITLE: Including Frontend Dependencies\nDESCRIPTION: HTML script tags to include required frontend dependencies\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n<script src=\"https://cdn.ethers.io/lib/ethers-5.2.umd.min.js\" type=\"application/javascript\"></script>\n<script src=\"https://unpkg.com/@supabase/supabase-js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Stream Stats\nDESCRIPTION: Renders the ApiReference component with the configuration for the GetStatsByStreamId endpoint from the streams API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/03-Stats/get-stats-by-stream-id.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.streams.GetStatsByStreamId} />\n```\n\n----------------------------------------\n\nTITLE: Registering Moralis Modules\nDESCRIPTION: Setup code for registering Moralis modules with the core package\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport MoralisCore from \"@moralisweb3/core\";\nimport MoralisEvmApi from \"@moralisweb3/evm-api\";\n\nconst core = MoralisCore.create();\n// Register all imported modules to the @moralisweb3/core module\ncore.registerModules([MoralisEvmApi]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for Solana Program\nDESCRIPTION: TOML configuration for the Rust library, specifying the crate type for Solana program compilation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/solana-micro-blogger-dapp.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\nname = \"micro_blog\"\ncrate-type = [\"cdylib\", \"lib\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Core and EVM API Packages\nDESCRIPTION: Example of installing required Moralis packages using npm or yarn package managers\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/advanced-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @moralisweb3/core @moralisweb3/evm-api\n```\n\n----------------------------------------\n\nTITLE: Local Testing Command\nDESCRIPTION: Serverless Framework command to test Lambda functions locally using event data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/aws-lambda-nodejs.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nserverless invoke local -f getNativeBalance --path event.json\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Token Analytics via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve analytics data for multiple token addresses using the Moralis Web3 API v2.2. The exact mechanism (e.g., query parameters) to specify multiple tokens should be checked in the detailed API reference, though the base URL is provided here. Replace ':address' potentially as part of the query or body.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/tokens/:address/analytics\n```\n\n----------------------------------------\n\nTITLE: Selecting Features during Firebase Init (CLI Output)\nDESCRIPTION: Displays the interactive prompt from the `firebase init` command where the user selects the desired Firebase features. This example shows selecting Hosting, Functions, and Emulators for the project setup.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n? Which Firebase features do you want to set up for this directory?\n◉ Hosting: Configure files for Firebase Hosting\n◉ Functions\n◉ Emulators\n```\n\n----------------------------------------\n\nTITLE: Defining Moralis Test Webhook Payload in JSON\nDESCRIPTION: This snippet provides an example JSON body sent as a test webhook when a stream is created or updated in Moralis. It details the field structure, including properties like abi, block information, transactions, logs, and NFT/ERC20 data, which are critical for validating webhook handling logic. The payload may require mock or empty values for some arrays and objects. This example does not require any dependencies and serves to guide the expected input format that back-end handlers should support. Inputs are JSON objects as shown; outputs are determined by the server-side logic (e.g., returning status 200 on receipt).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/mandatory-test-webhook.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"abi\": {},  \n  \"block\": {  \n    \"hash\": \"\",  \n    \"number\": \"\",  \n    \"timestamp\": \"\"  \n  },  \n  \"txs\": [],  \n  \"txsInternal\": [],  \n  \"logs\": [],  \n  \"chainId\": \"\",  \n  \"tag\": \"\",  \n  \"streamId\": : \"\",  \n  \"confirmed\": true,  \n  \"retries\": 0,  \n  \"erc20Approvals\": [],  \n  \"erc20Transfers\": [],  \n  \"nftApprovals\": [ ERC721: [], ERC1155: [] ],  \n  \"nftTransfers\": []  \n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for API Documentation\nDESCRIPTION: Imports required React components and configurations for rendering API documentation, including ApiReference, Admonition, Link components and configuration data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/07-rpc-nodes/reference/99-Extended RPC API/_extended-rpc-methods.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport Admonition from \"@theme/Admonition\";\nimport Link from \"@docusaurus/Link\";\nimport config from \"../../../configs/api-reference/configs.json\";\nimport NodeBanner from \"@site/src/components/NodeBanner/NodeBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install project dependencies using pnpm package manager without freezing the lockfile.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/tutorials/ai-agent-tutorials/02-building-with-eliza-os.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --no-frozen-lockfile\n```\n\n----------------------------------------\n\nTITLE: Using getErc20Approvals API Request\nDESCRIPTION: Example of a deprecated API request to get ERC20 token approvals using the getErc20Approvals endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-09-11-breaking-change.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncurl --request GET \\\n     --url 'https://deep-index.moralis.io/api/v2.2/0x26fcbd3afebbe28d0a8684f790c48368d21665b5/erc20/transfers?chain=eth' \\\n     --header 'accept: application/json' \\\n     --header 'X-API-Key: YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Components and Configuration - JavaScript\nDESCRIPTION: This snippet demonstrates importing the ApiReference React component and a JSON configuration file containing API reference definitions. The imports are necessary for rendering the API documentation dynamically in a React/MDX documentation environment. The code enables dynamic and maintainable documentation through component-based structure, with 'ApiReference' rendering the specified API endpoint docs according to 'configsV2.json'.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/reference/03-Profiles/remove-bind.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component in JavaScript\nDESCRIPTION: This JavaScript code imports the `ApiReference` component from a local project path. This component is presumably used later in the file to render API documentation details dynamically, likely using the imported `config` data.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/05-Get Volume Stats/04-get-timeseries-volume-by-category.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\n```\n\n----------------------------------------\n\nTITLE: Adding Body Parser Middleware\nDESCRIPTION: Configuration for parsing URL-encoded bodies in POST requests.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/integrations/google-cloud-nodejs-unity.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(express.urlencoded({\n  extended: true\n}))\n```\n\n----------------------------------------\n\nTITLE: Rendering API Version Reference\nDESCRIPTION: React component implementation that renders the API version documentation using the ApiReference component with configuration props.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/reference/20-Utils/web3-api-version.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.utils.web3ApiVersion} />\n```\n\n----------------------------------------\n\nTITLE: Starting Moralis Documentation Local Development Server\nDESCRIPTION: Command to start a local development server that opens a browser window with live-reloading functionality.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JSX\nDESCRIPTION: Imports and renders the DocCardList component from the theme to display NFT API documentation cards.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/solana/nft-api/nft-api.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Fetching Time-Series Token Analytics via Moralis API (HTTP)\nDESCRIPTION: Provides the API endpoint URL to retrieve time-series analytics data for a token using the Moralis Web3 API v2.2. Requires specifying the token address and potentially timeframe parameters, consult API reference for details.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/reference.md#2025-04-23_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nhttps://deep-index.moralis.io/api/v2.2/tokens//analytics/timeseries\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js Application using npm Start Script\nDESCRIPTION: Runs the `start` script defined in the `package.json` file using npm (or yarn). This command executes `nodemon index.js`, starting the Express server and enabling automatic restarts when code changes are detected during development.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/automated-telegram-nft-transfer-bot.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies (Angular)\nDESCRIPTION: Installs necessary npm packages for the Angular frontend: `@wagmi/core` for Web3 interactions (specifically version 0.5.8 for Angular 14 compatibility), `ethers` (version 5) as a peer dependency for wagmi, and `axios` for making HTTP requests to the backend server.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/core@0.5.8 ethers@^5 axios\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference Component for Delete Address from Stream Documentation\nDESCRIPTION: This code imports the ApiReference component and configuration data needed to display the Delete Address from Stream API documentation. The component renders detailed API specifications based on the imported configuration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/02-streams-api/evm/reference/04-Streams/delete-address-from-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n# Delete address from stream\n\n<ApiReference {...config.streams.DeleteAddressFromStream} />\n```\n\n----------------------------------------\n\nTITLE: Get NFT Token ID Stats Response Example\nDESCRIPTION: Example JSON response structure for the new /nft/{address}/{token_id}/stats endpoint showing current owners and transfer counts for a specific token ID.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/breaking-changes/2023-09-11-breaking-change.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"owners\": {\n    \"current\": \"1\"\n  },\n  \"transfers\": {\n    \"total\": \"2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the EVMChainData Component in JSX\nDESCRIPTION: This JSX tag renders the previously imported `EVMChainData` component. It executes the component's logic to display the list of EVM chains supported by the Token API directly on the documentation webpage. This requires a React/JSX rendering environment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/token-api.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EVMChainData/>\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component and Configuration in JSX\nDESCRIPTION: This snippet imports the ApiReference component and the configuration object for the Solana challenge request API. It then renders the ApiReference component with the specific configuration for the requestChallengeSolana endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/reference/02-Challenge/request-challenge-solana.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n\n<ApiReference {...config.auth.requestChallengeSolana} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Angular Web3 Authentication\nDESCRIPTION: Command to install required dependencies for implementing Web3 authentication in an Angular application.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask-angular.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/core @wagmi/connectors viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK for Python\nDESCRIPTION: Instructions for installing the Moralis SDK using pip for Python projects.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/token-api-full-guide-walkthrough.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install moralis\n```\n\n----------------------------------------\n\nTITLE: Basic NextJS Homepage Component\nDESCRIPTION: Creates a simple NextJS page component as entry point\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomePage() {\n  return <div>Welcome to my Next.js dApp!</div>;\n}\n\nexport default HomePage;\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Entry Point\nDESCRIPTION: Shell command to execute a TypeScript file named index.ts using ts-node runtime.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/partials/_run-the-script.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nts-node index.ts\n```\n\n----------------------------------------\n\nTITLE: React Component Import - ApiBanner\nDESCRIPTION: Import statement for the ApiBanner React component used in the documentation page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/defi-api.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Documentation Dependencies\nDESCRIPTION: Command to install all necessary dependencies for the Moralis Documentation project using npm.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing bs58 for Solana Wallet Signature Processing\nDESCRIPTION: Install the bs58 package to encode and decode data from Solana Web3 wallets like Phantom.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install bs58\n```\n\n----------------------------------------\n\nTITLE: Running Python Entry Point\nDESCRIPTION: Shell command to execute a Python file named index.py using Python interpreter.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/partials/_run-the-script.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython index.py\n```\n\n----------------------------------------\n\nTITLE: Example API Response\nDESCRIPTION: Sample JSON response from the Moralis resolveAddress API endpoint showing the resolved ENS name.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/wallet-api/07-Domains Lookups/how-to-resolve-ens-name.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"vitalik.eth\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Reference and Configuration for Moralis Web3 Docs - TypeScript\nDESCRIPTION: Imports the ApiReference and configuration JSON needed for displaying API endpoint documentation in the Moralis Web3 Docs site. Dependencies include @site/src/components/ApiReference and a local JSON config. This setup registers the page with the correct configuration for rendering endpoint-specific documentation. No inputs or outputs expected from this import, but the imported objects are crucial for subsequent page component usage.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/06-Get NFT Prices/get-nft-historical-floor-price-by-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Streams API Reference Component in JavaScript\nDESCRIPTION: This snippet imports a React component and a JSON configuration required for rendering the Streams API reference in a documentation site. Dependencies include React, the custom 'ApiReference' component, and a JSON configuration with API reference details. Inputs are the config object and component props; outputs are the rendered API reference documentation. Ensure correct relative paths to the component and configs for proper operation.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/03-Stats/get-stats.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: API Error Code Table in Markdown\nDESCRIPTION: Table showing API module error codes with identifiers and descriptions for API-specific operations\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/error-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Code | Error | Description |\n| --- | --- | --- |\n| `A0001` | GENERIC_API_ERROR | An unspecified error occurred while using the API |\n| `A0002` | PAGE_LIMIT_EXCEEDED | The page limit for a list operation was exceeded |\n| `A0003` | API_KEY_NOT_SET | The API key wasn't set |\n| `A0004` | INVALID_PARAMS | Invalid parameters were supplied to an API call |\n| `A0404` | NOT_FOUND | The requested resource wasn't found |\n| `A9000` | NOT_IMPLEMENTED | The requested API method or feature isn't implemented |\n```\n\n----------------------------------------\n\nTITLE: Importing ApiReference Component and Configuration in JavaScript/JSX\nDESCRIPTION: Imports the `ApiReference` React component from a local project path and a JSON configuration file (`configs.json`). These imports are necessary to render the API documentation dynamically on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/02-streams-api/evm/reference/04-Streams/create-stream.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"../../../../configs/api-reference/configs.json\";\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi Dependencies\nDESCRIPTION: Imports necessary wagmi hooks and MetaMask connector for wallet integration.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useConnect, useAccount, useDisconnect, useContractWrite, usePrepareContractWrite } from 'wagmi'\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\nimport abi from \"../abi.json\";\n```\n\n----------------------------------------\n\nTITLE: Running Express Server\nDESCRIPTION: Starts the Express server using the npm start script.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/live-crypto-notifications.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK Using yarn - JavaScript\nDESCRIPTION: This snippet demonstrates installing the Moralis SDK in a JavaScript project using the yarn package manager. Prior registration of a Moralis API key and installation of Node.js and yarn are prerequisites. Replace ${props.node} with the correct Moralis package name. Running this command will add Moralis as a dependency in your project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/partials/_install-moralis-sdk.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add ${props.node}\n```\n\n----------------------------------------\n\nTITLE: Adding Basic CSS Styles\nDESCRIPTION: Provides basic CSS rules saved in `src/styles.css`. It styles the main application container (`.app-container`), the chart container (`.chart-container`), the loading spinner container (`.loading-spinner`), and the main heading (`h1`) with properties for layout, background, padding, margins, borders, shadows, and text alignment.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-chartsjs-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.app-container {\n  max-width: 1200px;\n  margin: 2rem auto;\n  padding: 2rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);\n}\n\n.chart-container {\n  margin-top: 2rem;\n  padding: 1.5rem;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  height: 500px;\n}\n\n.loading-spinner {\n  display: flex;\n  justify-content: center;\n  margin: 2rem 0;\n}\n\nh1 {\n  text-align: center;\n  color: #1a237e;\n  margin-bottom: 2rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Autoglyphs Token JSON Structure\nDESCRIPTION: JSON structure containing NFT token data including token address, ID, ownership info, contract details and ASCII art token URI for an Autoglyphs token.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/nft-api/05-NFT Owners/how-to-get-nft-owners-by-an-address.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_address\": \"0xd4e4078ca3495de5b1d4db434bebc5a986197782\",\n  \"token_id\": \"66\",\n  \"owner_of\": \"0x8e232860171762f6ff2d22d1fcc45af78bd3fbb5\",\n  \"block_number\": \"15791513\",\n  \"block_number_minted\": \"7517107\",\n  \"token_hash\": \"6f0447e9b75382f98f9d773890e393aa\",\n  \"amount\": \"1\",\n  \"contract_type\": \"ERC721\",\n  \"name\": \"Autoglyphs\",\n  \"symbol\": \"☵\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Reference - React/JSX - JavaScript\nDESCRIPTION: This snippet imports the ApiReference React component and a configuration object from a JSON file, then renders the ApiReference component with the EVM request challenge configuration spread as props. Dependencies include React, a local ApiReference component, and a JSON config file. Inputs are the config properties for the EVM request challenge; output is a rendered API reference documentation interface.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/reference/02-Challenge/request-challenge-evm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configsV2.json\";\n\n<ApiReference {...config.auth.requestChallengeEvm} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList Component in React Documentation\nDESCRIPTION: Imports and renders the DocCardList component from the theme to display a list of documentation cards on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Rendering Get Swaps by Token Address Page in Markdown\nDESCRIPTION: This Markdown/MDX content serves as the page structure for the Solana 'Get Swaps by Token Address' API documentation entry. It includes the main header with the MainnetBadge, an EVM API banner guiding users to the EVM endpoint, and inserts the referenced API parameters for Solana. An Admonition block provides a disclaimer on data availability. Expected input is user navigation in a documentation website; output is a formatted API reference page rendered via Docusaurus or similar static site generators.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/03-Get Token Swaps/get-swaps-by-token-address.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Get Swaps by Token Address <MainnetBadge />\n\n<EthereumApiBanner\n  customTitle=\"Looking for swaps by token address on EVM?\"\n  customText=\"Access token swap data by token address using our EVM API.\"\n  customButtonText=\"Explore EVM API\"\n  customButtonLink=\"/web3-data-api/evm/reference/get-swaps-by-token-address\"\n/>\n<ApiReference {...config.solana.getSwapsByTokenAddress} >\n<Admonition type=\"info\" title=\"Note\">\n\n<p>\nSwaps data is synced and available only from September 2024 onwards. Data\nprior to this date is not included.\n</p>\n</Admonition>\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Installing WAGMI Magic Connector via npm\nDESCRIPTION: Installs the '@everipedia/wagmi-magic-connector' package using npm. This package provides the necessary connector to integrate Magic.Link authentication with applications using the WAGMI library.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-magiclink.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @everipedia/wagmi-magic-connector\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles in App Component\nDESCRIPTION: Imports the previously defined CSS styles from `styles.css` into the main `App.js` component. This ensures that the CSS rules are applied to the rendered elements.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/token-api/06-OHLCV Candlesticks/integrate-chartsjs-tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Component - TSX\nDESCRIPTION: This snippet shows how to import the 'ApiBanner' React component in a Markdown/MDX environment to insert custom banners within documentation pages. The import relies on the Docusaurus project structure, expecting the ApiBanner component at the specified path. No key parameters are set at import; usage would be within the JSX code block or markdown content. There are no outputs or runtime code effects unless the component is rendered on the page.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/06-defi-protocols-and-chains.md#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering API Documentation Components in JSX/TSX\nDESCRIPTION: Code that imports and renders API reference components for the token analytics documentation page. It imports the ApiReference component, configuration data, and a MainnetBadge component to display the API documentation for the Solana getTokenAnalytics endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/solana/reference/token-api/04-Get Token Analytics/get-token-analytics.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from \"@site/src/components/ApiReference\";\nimport config from \"@site/docs/configs/api-reference/configs.json\";\nimport { MainnetBadge } from \"@site/src/components/MainnetBadge/MainnetBadge.js\";\n```\n\n----------------------------------------\n\nTITLE: Triggering Transaction and Setting Token Key Ref - React/JavaScript\nDESCRIPTION: Defines a Button component that is conditionally disabled unless the token symbol is 'aUSDC'. When clicked, it calls the write function (likely submitting a transaction) and records the current token's key using keyRef. Key dependencies are React, the write function, keyRef, the key variable, and token. Expects token and key variables to be in scope. User input (button click) triggers the side effects.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  isDisabled={token?.symbol != 'aUSDC'}\n  onClick={() => {\n    write?.();\n    keyRef.current = key;\n  }}\n>\n  Transfer\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Premium Information Admonition in React\nDESCRIPTION: Renders an information admonition component to inform users that this API endpoint requires a Business plan or higher subscription with Moralis.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/02-Get Token Metadata/get-token-details.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Admonition type=\"info\" icon=\"💡\" title=\"Premium Endpoint\">\n  <p>\n    To use this API, you will need an API key associated with a Moralis account\n    on the <strong>Business</strong> plan or higher.\n  </p>\n</Admonition>\n```\n\n----------------------------------------\n\nTITLE: Selecting Project Option during Firebase Init (CLI Output)\nDESCRIPTION: Shows the prompt during `firebase init` asking whether to use an existing Firebase project or create a new one. This example indicates selecting an existing project.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/integrations/firebase-nodejs.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n? Please select an option:\n❯ Use an existing project\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis API Key in .env.local\nDESCRIPTION: Shows how to configure the Moralis API key as an environment variable. Create a `.env.local` file in the project root and add the `MORALIS_API_KEY` variable, setting its value to your actual Moralis API key. This file keeps sensitive keys secure and accessible server-side in NextJS.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nextjs.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nMORALIS_API_KEY=replace_me\n```\n\n----------------------------------------\n\nTITLE: Rendering EVM Chain Data Component\nDESCRIPTION: Renders the EVMChainData component to display the list of supported EVM chains.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/token-api/05-Pairs & Liquidity/defi-api.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EVMChainData/>\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component for Verify Remove Bind Endpoint\nDESCRIPTION: This JSX code renders the ApiReference component, passing in the configuration for the 'verifyRemoveBind' endpoint from the imported config object. This likely displays the full API reference for the endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/reference/03-Profiles/verify-remove-bind.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.auth.verifyRemoveBind} />\n```\n\n----------------------------------------\n\nTITLE: Opening Axelarscan Transaction URL and Resetting UI State - React/JavaScript\nDESCRIPTION: Defines the viewTx() function which assembles an Axelarscan URL from transaction data (specifically txData?.hash) and opens it in a new browser tab. After opening the link, it resets key frontend state variables by calling multiple set* hooks. Assumes dependencies such as window, txData, and several set-state functions are available in scope. Expects txData?.hash to be populated; no output values are returned.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/integrations/01-Axelar/build-dapp-with-axelar-part-2.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewTx = () => {\n   const url = 'https://testnet.axelarscan.io/gmp/${txData?.hash}';\n   if (url) window.open(url, '_blank');\n   setSelectedDestChain([]);\n   setReceiverAddrs([]);\n   setSelectedToken([]);\n   setSubmittedDestChain([]);\n   setSubmittedToken([]);\n   setSubmittedReceiverAddrs([]);\n };\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK with Pip\nDESCRIPTION: Command to install Moralis SDK using Python's Pip package manager.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/get-your-api-key.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install moralis\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Solana NFT Burner Project\nDESCRIPTION: Commands to clone the GitHub repository, navigate to the project directory, and install dependencies using yarn.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/04-guides/solana-nft-burner.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/JohnVersus/solana-nft-burner.git\n\ncd solana-nft-burner\n\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi and Viem for Wallet Connection - Bash\nDESCRIPTION: This bash command adds the wagmi and viem packages, which are required for integrating wallet connectors (e.g., MetaMask) into your NextJS dapp. The wagmi library simplifies wallet connection abstractions, while viem is a dependency for EVM-related utilities.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/evm/tutorials/how-to-sign-in-with-metamask.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install wagmi viem\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference Component for requestBind Endpoint\nDESCRIPTION: This JSX code renders the ApiReference component, passing the configuration for the requestBind endpoint from the imported config object. It displays the API reference documentation for the requestBind endpoint.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/reference/03-Profiles/request-bind.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.auth.requestBind} />\n```\n\n----------------------------------------\n\nTITLE: Starting the Server\nDESCRIPTION: Command to start the Express server\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-react.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK with NPM\nDESCRIPTION: Command to install Moralis SDK and EVM utilities using NPM package manager.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/get-your-api-key.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install moralis @moralisweb3/common-evm-utils\n```\n\n----------------------------------------\n\nTITLE: Installing Environment Variable Packages\nDESCRIPTION: Commands for installing necessary packages to handle environment variables in different package managers (npm, yarn, pip).\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/developer-tools/security-guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Read more about Dotenv at https://www.npmjs.com/package/dotenv\nnpm install dotenv\n```\n\nLANGUAGE: shell\nCODE:\n```\n## Read more about Dotenv at https://www.npmjs.com/package/dotenv\nyarn add dotenv\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Read more about Python Decouple at https://pypi.org/project/python-decouple/\npip install python-decouple\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component in React JSX\nDESCRIPTION: This code snippet renders the ApiReference component with configuration props for the 'getTopNFTCollectionsByMarketCap' endpoint. It also includes a commented-out Admonition component that provides additional information about the endpoint's premium status.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/nft-api/10-Get Trending NFTs/get-top-nft-collections-by-market-cap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config[\"market-data\"].getTopNFTCollectionsByMarketCap}>\n  {/* <Admonition type=\"info\" icon=\"💡\" title=\"PREMIUM ENDPOINT\">\n    <p>\n      To use this API, you will need an API key under a Moralis account with the\n      Pro or above plan. To upgrade your API plan, go to the{\" \"}\n      <Link href=\"https://admin.moralis.com/account/billing\">billing page</Link>{\" \"}\n      in the Moralis Dashboard.\n    </p>\n    <p>\n    This API has no parameter and you can simply use the <b>Try It</b> button to test it out.\n    </p>\n  </Admonition> */}\n</ApiReference>\n```\n\n----------------------------------------\n\nTITLE: Configuring Moralis API for Authentication (JavaScript)\nDESCRIPTION: Set up the Moralis API endpoint with authentication configuration, including timeout, domain, and expiration time in JavaScript.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/03-authentication-api/solana/tutorials/how-to-sign-in-with-solana-phantom-wallet.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MoralisNextApi } from \"@moralisweb3/next\";\n\nconst DATE = new Date();\nconst FUTUREDATE = new Date(DATE);\nFUTUREDATE.setDate(FUTUREDATE.getDate() + 1);\n\nconst { MORALIS_API_KEY, APP_DOMAIN, NEXTAUTH_URL } = process.env;\n\nif (!MORALIS_API_KEY || !APP_DOMAIN || !NEXTAUTH_URL) {\n  throw new Error(\n    \"Missing env variables. Please add the required env variables.\"\n  );\n}\n\nexport default MoralisNextApi({\n  apiKey: MORALIS_API_KEY,\n  authentication: {\n    timeout: 120,\n    domain: APP_DOMAIN,\n    uri: NEXTAUTH_URL,\n    expirationTime: FUTUREDATE.toISOString(),\n    statement: \"Sign message to authenticate.\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis SDK Using pip - Python\nDESCRIPTION: This snippet provides the command for installing the Moralis SDK in a Python environment using pip. Users should possess a Moralis API key and have pip installed. Replace ${props.python} with the Moralis Python package name if needed. This command will install Moralis and its dependencies.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/partials/_install-moralis-sdk.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install ${props.python}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Token Metadata Endpoint\nDESCRIPTION: Renders the ApiReference component with configuration parameters specific to the getTokenMetadataBySymbol endpoint from the token API section.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/reference/token-api/02-Get Token Metadata/get-token-metadata-by-symbol.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference {...config.token.getTokenMetadataBySymbol} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Anon Client-Side (JavaScript)\nDESCRIPTION: Initializes the Supabase client library on the frontend using JavaScript. It calls `supabase.createClient` with the Supabase project URL and the public Anonymous Key (`SUPABASE_PUBLIC_ANON_KEY`). This client is intended for public use in the browser and operates under the restrictions defined by Row-Level Security (RLS) policies for anonymous users. It cannot bypass RLS.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/03-authentication-api/evm/integrations/supabase.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst _supabaseAnon = supabase.createClient(SUPABASE_URL, SUPABASE_PUBLIC_ANON_KEY);\n```\n\n----------------------------------------\n\nTITLE: Importing Custom API Banner Component - React/TypeScript\nDESCRIPTION: This import statement includes the custom ApiBanner React component, used to visually promote API features within the documentation page. The file path is resolved using a site/src convention, suggesting a project using Docusaurus or a similar static site generator. There are no additional parameters; users should ensure that the TypeScript (.tsx) file exists and all dependencies are installed in the project. No input or output is produced by the import alone.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/resources/07-nft-marketplaces.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport ApiBanner from \"@site/src/components/ApiBanner/ApiBanner.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up GraphQL Client for Lens API\nDESCRIPTION: Creates a GraphQL client using the urql library to connect to the Lens Protocol API. This sets up the foundation for making queries to the Lens API.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/04-guides/web3-social-media.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from 'urql';\n\nconst APIURL = 'https://api.lens.dev';\n\nexport const client = new createClient({\n  url: APIURL,\n});\n```\n\n----------------------------------------\n\nTITLE: Building Moralis Documentation Static Site\nDESCRIPTION: Command to generate static content into the build directory, which can then be deployed to any static hosting service.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Moralis Python SDK\nDESCRIPTION: Command to install the Moralis Python SDK using pip package manager.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/docs/01-web3-data-api/evm/getting-started/quickstart-python.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npip install moralis\n```\n\n----------------------------------------\n\nTITLE: Initializing NodeJS Project with npm - Shell\nDESCRIPTION: Initializes a new NodeJS project by running the npm init command. This is a prerequisite for installing further dependencies and setting up the project structure. It prompts the user to fill out package metadata and creates the package.json file as a baseline for managing dependencies and scripts.\nSOURCE: https://github.com/moralisweb3/docs/blob/main/versioned_docs/version-2.0/01-web3-data-api/evm/getting-started/quickstart-nodejs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init\n\n```"
  }
]