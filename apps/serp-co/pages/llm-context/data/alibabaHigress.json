[
  {
    "owner": "alibaba",
    "repo": "higress",
    "content": "TITLE: Configuring Qwen Service with Model Mapping\nDESCRIPTION: YAML configuration for Qwen service with model mapping between OpenAI model names and corresponding Qwen models. Includes mappings for various GPT models to their Qwen equivalents.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: qwen\n  apiTokens:\n    - \"YOUR_QWEN_API_TOKEN\"\n  modelMapping:\n    'gpt-3': \"qwen-turbo\"\n    'gpt-35-turbo': \"qwen-plus\"\n    'gpt-4-turbo': \"qwen-max\"\n    'gpt-4-*': \"qwen-max\"\n    'gpt-4o': \"qwen-vl-plus\"\n    'text-embedding-v1': 'text-embedding-v1'\n    '*': \"qwen-turbo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwen Service with Model Mapping\nDESCRIPTION: YAML configuration for Qwen service with model mapping between OpenAI model names and corresponding Qwen models. Includes mappings for various GPT models to their Qwen equivalents.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: qwen\n  apiTokens:\n    - \"YOUR_QWEN_API_TOKEN\"\n  modelMapping:\n    'gpt-3': \"qwen-turbo\"\n    'gpt-35-turbo': \"qwen-plus\"\n    'gpt-4-turbo': \"qwen-max\"\n    'gpt-4-*': \"qwen-max\"\n    'gpt-4o': \"qwen-vl-plus\"\n    'text-embedding-v1': 'text-embedding-v1'\n    '*': \"qwen-turbo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Agent Plugin Fields in YAML\nDESCRIPTION: Defines the structure and fields for configuring the AI Agent plugin, including LLM settings, API configurations, prompt templates, and JSON response formatting options.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nllm:\n  apiKey: string\n  serviceName: string\n  servicePort: int\n  domain: string\n  path: string\n  model: string\n  maxIterations: int\n  maxExecutionTime: int\n  maxTokens: int\n\napis:\n  apiProvider:\n    apiKey:\n      in: string\n      name: string\n      value: string\n    maxExecutionTime: int\n    serviceName: string\n    servicePort: int\n    domain: string\n  api: string\n\npromptTemplate:\n  language: string\n  chTemplate:\n    question: string\n    thought1: string\n    observation: string\n    thought2: string\n  enTemplate:\n    question: string\n    thought1: string\n    observation: string\n    thought2: string\n\njsonResp:\n  enable: bool\n  jsonSchema: string\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwen Service with Text Context\nDESCRIPTION: YAML configuration for Qwen service with pure text context information. Includes a file URL for providing additional context to the AI model.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: qwen\n  apiTokens:\n    - \"YOUR_QWEN_API_TOKEN\"\n  modelMapping:\n    \"*\": \"qwen-turbo\"\n  context:\n    - fileUrl: \"http://file.default.svc.cluster.local/ai/context.txt\",\n      serviceName: \"file.dns\",\n      servicePort: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM and API Services in YAML\nDESCRIPTION: This YAML configuration sets up the LLM (Language Model) and defines multiple API services including Amap, XZWeather, and DeepL. It specifies API keys, domains, and OpenAPI specifications for each service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nllm:\n  apiKey: xxxxxxxxxxxxxxxxxx\n  domain: dashscope.aliyuncs.com\n  serviceName: dashscope.dns\n  servicePort: 443\n  path: /compatible-mode/v1/chat/completions\n  model: qwen-max-0403\n  maxIterations: 2\npromptTemplate:\n  language: CH\napis:\n- apiProvider:\n    domain: restapi.amap.com\n    serviceName: geo.dns\n    servicePort: 80\n    apiKey:\n      in: query\n      name: key\n      value: xxxxxxxxxxxxxxx\n  api: |\n    openapi: 3.1.0\n    info:\n      title: Amap\n      description: Get related information of POI\n      version: v1.0.0\n    servers:\n      - url: https://restapi.amap.com\n    paths:\n      /v5/place/text:\n        get:\n          description: Get latitude and longitude coordinates based on POI name\n          operationId: get_location_coordinate\n          parameters:\n            - name: keywords\n              in: query\n              description: POI name, must be in Chinese\n              required: true\n              schema:\n                type: string\n            - name: region\n              in: query\n              description: The name of the region where the POI is located, must be in Chinese\n              required: true\n              schema:\n                type: string\n          deprecated: false\n      /v5/place/around:\n        get:\n          description: Search for POI near the given coordinates\n          operationId: search_nearby_pois\n          parameters:\n            - name: keywords\n              in: query\n              description: Keywords for the target POI\n              required: true\n              schema:\n                type: string\n            - name: location\n              in: query\n              description: Latitude and longitude of the center point, separated by a comma\n              required: true\n              schema:\n                type: string\n          deprecated: false\n    components:\n      schemas: {}\n- apiProvider:\n    domain: api.seniverse.com\n    serviceName: seniverse.dns\n    servicePort: 80\n    apiKey:\n      in: query\n      name: key\n      value: xxxxxxxxxxxxxxx\n  api: |\n    openapi: 3.1.0\n    info:\n      title: XZWeather\n      description: Get weather related information\n      version: v1.0.0\n    servers:\n      - url: https://api.seniverse.com\n    paths:\n      /v3/weather/now.json:\n        get:\n          description: Get weather conditions for a specified city\n          operationId: get_weather_now\n          parameters:\n            - name: location\n              in: query\n              description: The city to query\n              required: true\n              schema:\n                type: string\n            - name: language\n              in: query\n              description: Language used for the weather query results\n              required: true\n              schema:\n                type: string\n                default: zh-Hans\n                enum:\n                  - zh-Hans\n                  - en\n                  - ja\n            - name: unit\n              in: query\n              description: Units of temperature, available in Celsius and Fahrenheit\n              required: true\n              schema:\n                type: string\n                default: c\n                enum:\n                  - c\n                  - f\n          deprecated: false\n    components:\n      schemas: {}\n- apiProvider:\n    apiKey:\n      in: \"header\"\n      name: \"DeepL-Auth-Key\"\n      value: \"73xxxxxxxxxxxxxxx:fx\"\n    domain: \"api-free.deepl.com\"\n    serviceName: \"deepl.dns\"\n    servicePort: 443\n  api: |\n    openapi: 3.1.0\n    info:\n      title: DeepL API Documentation\n      description: The DeepL API provides programmatic access to DeepL's machine translation technology.\n      version: v1.0.0\n    servers:\n      - url: https://api-free.deepl.com/v2\n    paths:\n      /translate:\n        post:\n          summary: Request Translation\n          operationId: translateText\n          requestBody:\n            required: true\n            content:\n              application/json:\n                schema:\n                  type: object\n                  required:\n                    - text\n                    - target_lang\n                  properties:\n                    text:\n                      description: |\n                        Text to be translated. Only UTF-8-encoded plain text is supported. \n                        The parameter may be specified up to 50 times in a single request. \n                        Translations are returned in the same order as they are requested.\n                      type: array\n                      maxItems: 50\n                      items:\n                        type: string\n                        example: Hello, World!\n                    target_lang:\n                      description: The language into which the text should be translated.\n                      type: string\n                      enum:\n                        - BG\n                        - CS\n                        - DA\n                        - DE\n                        - EL\n                        - EN-GB\n                        - EN-US\n                        - ES\n                        - ET\n                        - FI\n                        - FR\n                        - HU\n                        - ID\n                        - IT\n                        - JA\n                        - KO\n                        - LT\n                        - LV\n                        - NB\n                        - NL\n                        - PL\n                        - PT-BR\n                        - PT-PT\n                        - RO\n                        - RU\n                        - SK\n                        - SL\n                        - SV\n                        - TR\n                        - UK\n                        - ZH\n                        - ZH-HANS\n                      example: DE\n    components:\n      schemas: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer-based Rate Limiting in YAML\nDESCRIPTION: This snippet shows how to configure rate limiting based on consumers. It includes specific limits for named consumers and uses regular expressions for pattern matching across consumer names.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cluster-key-rate-limit/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrule_name: default_rule\nrule_items:\n- limit_by_consumer: ''\n  limit_keys:\n  - key: consumer1\n    query_per_second: 10\n  - key: consumer2\n    query_per_hour: 100\n- limit_by_per_consumer: ''\n  limit_keys:\n  # Regular expression, matches all strings starting with a, each consumer corresponds to 10qds.\n  - key: \"regexp:^a.*\"\n    query_per_second: 10\n  # Regular expression, matches all strings starting with b, each consumer corresponds to 100qd.\n  - key: \"regexp:^b.*\"\n    query_per_minute: 100\n  # As a fallback, matches all requests, each consumer corresponds to 1000qdh.\n  - key: \"*\"\n    query_per_hour: 1000\nredis:\n  service_name: redis.static\nshow_limit_quota_header: true\n```\n\n----------------------------------------\n\nTITLE: Configuring AliCloud Bailian with Original Protocol\nDESCRIPTION: YAML configuration for using AliCloud Bailian with the original protocol instead of OpenAI protocol. Requires a Dashscope API token.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nactiveProviderId: my-qwen\nproviders:\n  - id: my-qwen\n    type: qwen\n    apiTokens:\n      - \"YOUR_DASHSCOPE_API_TOKEN\"\n    protocol: original\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Service Provider with OpenAI Protocol Proxy\nDESCRIPTION: YAML configuration for connecting to Azure OpenAI Service via an OpenAI protocol proxy. Requires an Azure OpenAI API token and service URL with deployment name.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: azure\n  apiTokens:\n    - \"YOUR_AZURE_OPENAI_API_TOKEN\"\n  azureServiceUrl: \"https://YOUR_RESOURCE_NAME.openai.azure.com/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2024-02-15-preview\",\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Issuance in Java\nDESCRIPTION: Provides a complete Java example for generating a JWT token using a private key, setting claims, and serializing the token.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport java.security.PrivateKey; \nimport org.jose4j.json.JsonUtil;\nimport org.jose4j.jwk.RsaJsonWebKey;\nimport org.jose4j.jwk.RsaJwkGenerator;\nimport org.jose4j.jws.AlgorithmIdentifiers;\nimport org.jose4j.jws.JsonWebSignature;\nimport org.jose4j.jwt.JwtClaims;\nimport org.jose4j.jwt.NumericDate;\nimport org.jose4j.lang.JoseException;\npublic class GenerateJwtDemo {\n    public static void main(String[] args) throws JoseException  {\n        String keyId = \"uniq_key\";\n          //使用本文2.1节生成的Keypair\n        String privateKeyJson = \"{\n            + \"  \\\"kty\\\": \\\"RSA\\\",\n\"\n            + \"  \\\"d\\\": \"\n            +\n            \"\\\"O9MJSOgcjjiVMNJ4jmBAh0mRHF_TlaVva70Imghtlgwxl8BLfcf1S8ueN1PD7xV6Cnq8YenSKsfiNOhC6yZ_fjW1syn5raWfj68eR7cjHWjLOvKjwVY33GBPNOvspNhVAFzeqfWneRTBbga53Agb6jjN0SUcZdJgnelzz5JNdOGaLzhacjH6YPJKpbuzCQYPkWtoZHDqWTzCSb4mJ3n0NRTsWy7Pm8LwG_Fd3pACl7JIY38IanPQDLoighFfo-Lriv5z3IdlhwbPnx0tk9sBwQBTRdZ8JkqqYkxUiB06phwr7mAnKEpQJ6HvhZBQ1cCnYZ_nIlrX9-I7qomrlE1UoQ\\\",\n\"\n            + \"  \\\"e\\\": \\\"AQAB\\\",\n\"\n            + \"  \\\"alg\\\": \\\"RS256\\\",\n\"\n            + \"  \\\"n\\\": \\\"vCuB8MgwPZfziMSytEbBoOEwxsG7XI3MaVMoocziP4SjzU4IuWuE_DodbOHQwb_thUru57_Efe\"\n            +\n            \"--sfATHEa0Odv5ny3QbByqsvjyeHk6ZE4mSAV9BsHYa6GWAgEZtnDceeeDc0y76utXK2XHhC1Pysi2KG8KAzqDa099Yh7s31AyoueoMnrYTmWfEyDsQL_OAIiwgXakkS5U8QyXmWicCwXntDzkIMh8MjfPskesyli0XQD1AmCXVV3h2Opm1Amx0ggSOOiINUR5YRD6mKo49_cN-nrJWjtwSouqDdxHYP-4c7epuTcdS6kQHiQERBd1ejdpAxV4c0t0FHF7MOy9kw\\\"\n\"\n            + \"}\";\n        JwtClaims claims = new JwtClaims();\n        claims.setGeneratedJwtId();\n        claims.setIssuedAtToNow();\n        //过期时间一定要设置\n        NumericDate date = NumericDate.now();\n        date.addSeconds(120*60);\n        claims.setExpirationTime(date);\n        claims.setNotBeforeMinutesInThePast(1);\n        claims.setSubject(\"YOUR_SUBJECT\");\n        claims.setAudience(\"YOUR_AUDIENCE\");\n        //添加自定义参数，所有值请都使用String类型\n        claims.setClaim(\"userId\", \"1213234\");\n        claims.setClaim(\"email\", \"userEmail@youapp.com\");\n        JsonWebSignature jws = new JsonWebSignature();\n        jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n        jws.setKeyIdHeaderValue(keyId);\n        jws.setPayload(claims.toJson());\n        PrivateKey privateKey = new RsaJsonWebKey(JsonUtil.parseJson(privateKeyJson)).getPrivateKey();\n     \n        jws.setKey(privateKey);\n        String jwtResult = jws.getCompactSerialization();\n        System.out.println(\"Generate Json Web token , result is \" + jwtResult);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Protocol Proxy for Gemini Services\nDESCRIPTION: YAML configuration for setting up the OpenAI protocol proxy to work with Google's Gemini services. Includes API token setup, model mapping to Gemini Pro, and safety settings for content moderation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: gemini\n  apiTokens:\n    - \"YOUR_GEMINI_API_TOKEN\"\n  modelMapping:\n    \"*\": \"gemini-pro\"\n  geminiSafetySetting:\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\" :\"BLOCK_NONE\"\n    \"HARM_CATEGORY_HATE_SPEECH\" :\"BLOCK_NONE\"\n    \"HARM_CATEGORY_HARASSMENT\" :\"BLOCK_NONE\"\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\" :\"BLOCK_NONE\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Consumer-Based Rate Limiting in Higress\nDESCRIPTION: This YAML snippet configures rate limiting rules based on consumer identifiers. It sets specific limits for named consumers and uses regular expressions to apply limits to groups of consumers.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrule_name: default_rule\nrule_items:\n  - limit_by_consumer: ''\n    limit_keys:\n      - key: consumer1\n        token_per_second: 10\n      - key: consumer2\n        token_per_hour: 100\n  - limit_by_per_consumer: ''\n    limit_keys:\n      # Regular expression, matches all strings starting with a, each consumer corresponds to 10 qds\n      - key: \"regexp:^a.*\"\n        token_per_second: 10\n      # Regular expression, matches all strings starting with b, each consumer corresponds to 100 qd\n      - key: \"regexp:^b.*\"\n        token_per_minute: 100\n      # Fallback, matches all requests, each consumer corresponds to 1000 qdh\n      - key: \"*\"\n        token_per_hour: 1000\nredis:\n  service_name: redis.static\n```\n\n----------------------------------------\n\nTITLE: Configuring ERNIE Bot AI Service with YAML\nDESCRIPTION: YAML configuration for setting up the ERNIE Bot AI service with API tokens and model mapping.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: baidu\n  apiTokens:\n    - \"YOUR_BAIDU_API_TOKEN\"\n  modelMapping:\n    'gpt-3': \"ERNIE-4.0\"\n    '*': \"ERNIE-4.0\"\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Chat Completion Request\nDESCRIPTION: Example JSON request for Azure OpenAI chat completion API. Includes a basic user message and temperature setting for controlling response randomness.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-3\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Hello, who are you?\"\n    }\n  ],\n  \"temperature\": 0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Full Kubernetes Configuration for Groq Services\nDESCRIPTION: Complete Kubernetes YAML example that configures OpenAI protocol proxy for Groq services. Includes WasmPlugin configuration, Ingress setup with HTTPS backend protocol, and McpBridge configuration for DNS-based service discovery.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: ai-proxy-groq\n  namespace: higress-system\nspec:\n  matchRules:\n  - config:\n      provider:\n        type: groq\n        apiTokens:\n          - \"YOUR_API_TOKEN\"\n    ingress:\n    - groq\n  url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/ai-proxy:1.0.0\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/backend-protocol: HTTPS\n    higress.io/destination: groq.dns\n    higress.io/proxy-ssl-name: api.groq.com\n    higress.io/proxy-ssl-server-name: \"on\"\n  labels:\n    higress.io/resource-definer: higress\n  name: groq\n  namespace: higress-system\nspec:\n  ingressClassName: higress\n  rules:\n  - host: <YOUR-DOMAIN>\n    http:\n      paths:\n      - backend:\n          resource:\n            apiGroup: networking.higress.io\n            kind: McpBridge\n            name: default\n        path: /\n        pathType: Prefix\n---\napiVersion: networking.higress.io/v1\nkind: McpBridge\nmetadata:\n  name: default\n  namespace: higress-system\nspec:\n  registries:\n  - domain: api.groq.com\n    name: groq\n    port: 443\n    type: dns\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie-Based Rate Limiting in Higress\nDESCRIPTION: This configuration sets up rate limiting based on key-value pairs in cookies. It defines limits for specific cookie values and uses regular expressions for pattern matching, with a custom rejection response.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrule_name: default_rule\nrule_items:\n  - limit_by_cookie: key1\n    limit_keys:\n      - key: value1\n        token_per_minute: 10\n      - key: value2\n        token_per_hour: 100\n  - limit_by_per_cookie: key1\n    limit_keys:\n      # Regular expression, matches all strings starting with a, each value in cookie corresponds to 10 qds\n      - key: \"regexp:^a.*\"\n        token_per_second: 10\n      # Regular expression, matches all strings starting with b, each value in cookie corresponds to 100 qd\n      - key: \"regexp:^b.*\"\n        token_per_minute: 100\n      # Fallback, matches all requests, each value in cookie corresponds to 1000 qdh\n      - key: \"*\"\n        token_per_hour: 1000\nrejected_code: 200\nrejected_msg: '{\"code\":-1,\"msg\":\"Too many requests\"}'\nredis:\n  service_name: redis.static\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Completion Request to Moonshot AI\nDESCRIPTION: JSON request format for sending a chat completion request to the Moonshot AI service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-4-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Please summarize the content\"\n    }\n  ],\n  \"temperature\": 0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Example LLM Query Input\nDESCRIPTION: Sample user query demonstrating the input format for the RAG system.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-rag/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWhere did the rear-end collision in Hainan occur? What was the cause? How many casualties were there?\n```\n\n----------------------------------------\n\nTITLE: Spark Service Request Example\nDESCRIPTION: JSON request example for the Spark service through the OpenAI protocol proxy. The request includes a system message to set the assistant's persona as a professional developer and a user query.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": \"gpt-4o\",\n    \"messages\": [\n        {\n            \"role\": \"system\",\n            \"content\": \"You are a professional developer!\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"Hello, who are you?\"\n        }\n    ],\n    \"stream\": false\n}\n```\n\n----------------------------------------\n\nTITLE: REST-to-MCP Configuration in YAML\nDESCRIPTION: YAML configuration for the REST-to-MCP feature, which converts REST APIs to MCP tools without writing code. Defines server settings, tool descriptions, arguments, request templates with variable substitution, and response templates.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  name: rest-amap-server\n  config:\n    apiKey: your-api-key-here\ntools:\n- name: maps-geo\n  description: \"Convert structured address information to latitude and longitude coordinates. Supports parsing landmarks, scenic spots, and building names into coordinates.\"\n  args:\n  - name: address\n    description: \"The structured address to parse\"\n    required: true\n  - name: city\n    description: \"The city to search in\"\n    required: false\n  requestTemplate:\n    url: \"https://restapi.amap.com/v3/geocode/geo?key={{.config.apiKey}}&address={{.args.address}}&city={{.args.city}}&source=ts_mcp\"\n    method: GET\n    headers:\n    - key: x-api-key\n      value: \"{{.config.apiKey}}\"\n    - key: Content-Type\n      value: application/json\n  responseTemplate:\n    body: |\n      # Geocoding Information\n      {{- range $index, $geo := .Geocodes }}\n      ## Location {{add $index 1}}\n\n      - **Country**: {{ $geo.Country }}\n      - **Province**: {{ $geo.Province }}\n      - **City**: {{ $geo.City }}\n      - **City Code**: {{ $geo.Citycode }}\n      - **District**: {{ $geo.District }}\n      - **Street**: {{ $geo.Street }}\n      - **Number**: {{ $geo.Number }}\n      - **Administrative Code**: {{ $geo.Adcode }}\n      - **Coordinates**: {{ $geo.Location }}\n      - **Level**: {{ $geo.Level }}\n      {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Protocol Proxy for Spark Service\nDESCRIPTION: YAML configuration for setting up the OpenAI protocol proxy to work with Spark service. Includes authentication with API key and secret, and model mapping for different GPT model versions.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: spark\n  apiTokens:\n    - \"APIKey:APISecret\"\n  modelMapping:\n    \"gpt-4o\": \"generalv3.5\"\n    \"gpt-4\": \"generalv3\"\n    \"*\": \"general\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie-based Rate Limiting in YAML\nDESCRIPTION: This configuration demonstrates rate limiting based on key-value pairs in cookies. It includes specific limits for certain cookie values and uses regular expressions for pattern matching. It also specifies custom rejection parameters.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cluster-key-rate-limit/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrule_name: default_rule\nrule_items:\n  - limit_by_cookie: key1\n    limit_keys:\n      - key: value1\n        query_per_minute: 10\n      - key: value2\n        query_per_hour: 100\n  - limit_by_per_cookie: key1\n    limit_keys:\n      # Regular expression, matches all strings starting with a, each cookie's value corresponds to 10qds.\n      - key: \"regexp:^a.*\"\n        query_per_second: 10\n      # Regular expression, matches all strings starting with b, each cookie's value corresponds to 100qd.\n      - key: \"regexp:^b.*\"\n        query_per_minute: 100\n      # As a fallback, matches all requests, each cookie's value corresponds to 1000qdh.\n      - key: \"*\"\n        query_per_hour: 1000\nrejected_code: 200\nrejected_msg: '{\"code\":-1,\"msg\":\"Too many requests\"}'\nredis:\n  service_name: redis.static\nshow_limit_quota_header: true\n```\n\n----------------------------------------\n\nTITLE: Processing Chat Completion Response from MiniMax AI\nDESCRIPTION: JSON response format received from the MiniMax AI service after a chat completion request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"02b2251f8c6c09d68c1743f07c72afd7\",\n    \"choices\": [\n        {\n            \"finish_reason\": \"stop\",\n            \"index\": 0,\n            \"message\": {\n                \"content\": \"Hello! I am MM Intelligent Assistant, a large language model developed by MiniMax. I can help answer questions, provide information, and engage in conversations. How can I assist you?\",\n                \"role\": \"assistant\"\n            }\n        }\n    ],\n    \"created\": 1717760544,\n    \"model\": \"abab6.5s-chat\",\n    \"object\": \"chat.completion\",\n    \"usage\": {\n        \"total_tokens\": 106\n    },\n    \"input_sensitive\": false,\n    \"output_sensitive\": false,\n    \"input_sensitive_type\": 0,\n    \"output_sensitive_type\": 0,\n    \"base_resp\": {\n        \"status_code\": 0,\n        \"status_msg\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Search Engines for Higress AI Search\nDESCRIPTION: Advanced configuration example showing how to integrate multiple search engines (Google and Bing) with specialized search contexts. It includes a custom prompt template and language setting.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultLang: \"en-US\"\npromptTemplate: |\n  # Search Results:\n  {search_results}\n  \n  # Please answer this question: \n  {question}\nsearchFrom:\n- type: google\n  apiKey: \"google-key\"\n  cx: \"github-search-id\"  # Search engine ID specifically for GitHub content\n  serviceName: \"google-svc.dns\"\n  servicePort: 443\n- type: google\n  apiKey: \"google-key\"\n  cx: \"news-search-id\"    # Search engine ID specifically for Google News content \n  serviceName: \"google-svc.dns\"\n  servicePort: 443\n- type: bing\n  apiKey: \"bing-key\"\n  serviceName: \"bing-svc.dns\"\n  servicePort: 443\n  optionArgs:\n    answerCount: \"5\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Values in All Array Elements with Higress Transformer\nDESCRIPTION: Example of using the Request Transformer to modify fields across all elements in an array using the '#' wildcard notation. The configuration replaces the 'age' value in all elements of the 'users' array with '20'.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nreqRules:\n- operate: replace\n  body:\n  - key: users.#.age\n    newValue: 20\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v -X POST console.higress.io/post \\\n-H 'Content-Type: application/json' \\\n-d '{\"users\":[{\"name\":\"zhangsan\",\"age\":18},{\"name\":\"lisi\",\"age\":19}]}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"json\": {\n    \"users\": [\n      {\n        \"age\": \"20\",\n        \"name\": \"zhangsan\"\n      },\n      {\n        \"age\": \"20\",\n        \"name\": \"lisi\"\n      }\n    ]\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Protocol Proxy for Cloudflare Workers AI\nDESCRIPTION: YAML configuration for setting up the OpenAI protocol proxy to work with Cloudflare Workers AI service. Includes API token configuration and model mapping that defaults to the Llama 3 8B model.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: cloudflare\n  apiTokens:\n    - \"YOUR_WORKERS_AI_API_TOKEN\"\n  cloudflareAccountId: \"YOUR_CLOUDFLARE_ACCOUNT_ID\"\n  modelMapping:\n    \"*\": \"@cf/meta/llama-3-8b-instruct\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Authentication and Route-Level Authorization in Higress\nDESCRIPTION: This YAML configuration sets up Key Auth at the instance level with two consumers having unique credentials. The global_auth is set to false, meaning authentication will only be applied to specifically configured routes or domains.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: false\nconsumers:\n- credential: 2bda943c-ba2b-11ec-ba07-00163e1250b5\n  name: consumer1\n- credential: c8c8e9ca-558e-4a2d-bb62-e700dcc40e35\n  name: consumer2\nkeys:\n- apikey\n- x-api-key\n```\n\n----------------------------------------\n\nTITLE: Creating Ingress Rules for Qwen and Redis in Higress\nDESCRIPTION: This YAML configuration creates two Ingress resources in Higress. One for routing traffic to the Qwen AI service with HTTPS backend, and another for Redis service discovery.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/backend-protocol: HTTPS\n    higress.io/destination: qwen.dns\n    higress.io/proxy-ssl-name: dashscope.aliyuncs.com\n    higress.io/proxy-ssl-server-name: \"on\"\n  labels:\n    higress.io/resource-definer: higress\n  name: qwen\n  namespace: higress-system\nspec:\n  ingressClassName: higress\n  rules:\n  - host: qwen-test.com\n    http:\n      paths:\n      - backend:\n          resource:\n            apiGroup: networking.higress.io\n            kind: McpBridge\n            name: default\n        path: /\n        pathType: Prefix\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/destination: redis.dns\n    higress.io/ignore-path-case: \"false\"\n  labels:\n    higress.io/resource-definer: higress\n  name: redis\nspec:\n  ingressClassName: higress\n  rules:\n  - http:\n      paths:\n      - backend:\n          resource:\n            apiGroup: networking.higress.io\n            kind: McpBridge\n            name: default\n        path: /\n        pathType: Prefix\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Prompt Templates in YAML\nDESCRIPTION: Example of how to define an AI prompt template in YAML configuration. This template named 'developer-chat' uses the GPT-3.5-turbo model and includes system and user role messages with variable placeholders that can be filled at runtime.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-prompt-template/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntemplates:\n- name: \"developer-chat\"\n  template:\n    model: gpt-3.5-turbo\n    messages:\n    - role: system\n      content: \"You are a {{program}} expert, in {{language}} programming language.\"\n    - role: user\n      content: \"Write me a {{program}} program.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Protocol Proxy for DeepL Translation\nDESCRIPTION: YAML configuration for setting up the OpenAI protocol proxy to work with DeepL's translation service. Specifies the API token and the target language for translations (Chinese in this example).\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: deepl\n  apiTokens:\n    - \"YOUR_DEEPL_API_TOKEN\"\n  targetLang: \"ZH\"\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated JSON Weather Response\nDESCRIPTION: This response shows how the AI model automatically generates a JSON-formatted weather report when jsonResp is enabled. The weather data is structured in JSON format inside the content field.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\"id\":\"ebd6ea91-8e38-9e14-9a5b-90178d2edea4\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"content\": \"{\\\"city\\\": \\\"BeiJing\\\", \\\"weather_condition\\\": \\\"cloudy\\\", \\\"temperature\\\": \\\"19℃\\\", \\\"data_update_time\\\": \\\"Oct 9, 2024, at 16:37\\\"}\"},\"finish_reason\":\"stop\"}],\"created\":1723187991,\"model\":\"qwen-max-0403\",\"object\":\"chat.completion\",\"usage\":{\"prompt_tokens\":890,\"completion_tokens\":56,\"total_tokens\":946}}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Reference Location in Higress AI Search\nDESCRIPTION: Configuration example demonstrating how to place references at the end of the response instead of the beginning. This allows for customizing the placement of citation information in the AI's output.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nneedReference: true\nreferenceLocation: \"tail\"  # Add references at the end of the response instead of the beginning\nsearchFrom:\n- type: bing\n  apiKey: \"your-bing-key\"\n  serviceName: \"search-service.dns\"\n  servicePort: 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Intent Recognition Plugin in YAML\nDESCRIPTION: Example configuration for the AI Intent Recognition plugin showing scene category settings and LLM proxy configuration. Includes settings for prompt templates, service endpoints, and timeout values.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-intent/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscene:\n  category: \"Finance|E-commerce|Law|Higress\"\n  prompt: \"You are a smart category recognition assistant responsible for determining which preset category a user's question belongs to based on the question posed by the user and the preset categories, and returning the corresponding category. The user's question is: '%s', the preset categories are '%s', directly return a specific category; if not found, return 'NotFound'.\"\nllm:\n  proxyServiceName: \"intent-service.static\"\n  proxyUrl: \"http://127.0.0.1:80/intent/compatible-mode/v1/chat/completions\"\n  proxyDomain: \"127.0.0.1\"\n  proxyPort: \"80\"\n  proxyModel: \"qwen-long\"\n  proxyApiKey: \"\"\n  proxyTimeout: \"10000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AI RAG Plugin with YAML\nDESCRIPTION: Example configuration for setting up the AI RAG plugin with Dashscope and Dashvector services. Includes API keys, service endpoints, and vector search parameters for both services.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-rag/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndashscope:\n    apiKey: xxxxxxxxxxxxxxx\n    serviceFQDN: dashscope\n    servicePort: 443\n    serviceHost: dashscope.aliyuncs.com\ndashvector:\n    apiKey: xxxxxxxxxxxxxxxxxxxx\n    serviceFQDN: dashvector\n    servicePort: 443\n    serviceHost: vrs-cn-xxxxxxxxxxxxxxx.dashvector.cn-hangzhou.aliyuncs.com\n    collection: xxxxxxxxxxxxxxx\n    topk: 1\n    threshold: 0.4\n    field: raw\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Global Configuration in YAML\nDESCRIPTION: YAML configuration at the instance level that defines two consumers with their credentials and sets global_auth to false.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconsumers:\n- credential: 'admin:123456'\n  name: consumer1\n- credential: 'guest:abc'\n  name: consumer2\nglobal_auth: false\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Request-Response Transformation Plugin in YAML\nDESCRIPTION: Example YAML configuration for the AI Request-Response Transformation plugin. It shows how to set up request path modification and XML to JSON response conversion using Qwen LLM service through Alibaba Cloud Dashscope.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-transformer/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrequest:\n    enable: false\n    prompt: \"If the request path starts with /httpbin, please remove the /httpbin prefix and do not change anything else.\"\nresponse:\n    enable: true\n    prompt: \"Please modify the following HTTP response information with the requirements: 1. change content-type to application/json; 2. convert body from xml to json; 3. remove content-length.\"\nprovider:\n    serviceName: qwen\n    domain: dashscope.aliyuncs.com\n    apiKey: xxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Structuring AI Response with JSON Schema in Higress\nDESCRIPTION: Example JSON request for the AI JSON Formatting plugin, demonstrating how to structure a request to an AI model for generating an API documentation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-json-resp/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\"role\": \"user\", \"content\": \"give me a api doc for add the variable x to x+5\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Level Authorization in Higress\nDESCRIPTION: YAML configuration for setting up authorization rules at the route level, specifying which consumers are allowed to access specific routes.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow: \n- consumer1\n```\n\n----------------------------------------\n\nTITLE: Authenticated API Request\nDESCRIPTION: Request to access protected API endpoint with Bearer token authorization.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README_EN.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl --url \"foo.bar.com/headers\"\n  --header \"Authorization: Bearer eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIiwiaXNzIjoiaHR0cHM6Ly9kZXYtbzQzeGIxbXo3eWE3YWNoNC51cy5hdXRoMC5jb20vIn0..WP_WRVM-y3fM1sN4.fAQqtKoKZNG9Wj0OhtrMgtsjTJ2J72M2klDRd9SvUKGbiYsZNPmIl_qJUf81D3VIjD59o9xrOOJIzXTgsfFVA2x15g-jBlNh68N7dyhXu9237Tbplweu1jA25IZDSnjitQ3pbf7xJVIfPnWcrzl6uT8G1EP-omFcl6AQprV2FoKFMCGFCgeafuttppKe1a8mpJDj7AFLPs-344tT9mvCWmI4DuoLFh0PiqMMJBByoijRSxcSdXLPxZng84j8JVF7H6mFa-dj-icP-KLy6yvzEaRKz_uwBzQCzgYK434LIpqw_PRuN3ClEsenwRgIsNdVjvKcoAysfoZhmRy9BQaE0I7qTohSBFNX6A.mgGGeeWgugfXcUcsX4T5dQ\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Token Rate Limiting in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up token rate limiting based on the 'apikey' request parameter. It includes specific rate limits for certain API keys and fallback rules using regular expressions.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrule_name: default_rule\nrule_items:\n  - limit_by_param: apikey\n    limit_keys:\n      - key: 9a342114-ba8a-11ec-b1bf-00163e1250b5\n        token_per_minute: 10\n      - key: a6a6d7f2-ba8a-11ec-bec2-00163e1250b5\n        token_per_hour: 100\n  - limit_by_per_param: apikey\n    limit_keys:\n      # Regular expression, matches all strings starting with a, each apikey corresponds to 10 qds\n      - key: \"regexp:^a.*\"\n        token_per_second: 10\n      # Regular expression, matches all strings starting with b, each apikey corresponds to 100 qd\n      - key: \"regexp:^b.*\"\n        token_per_minute: 100\n      # Fallback, matches all requests, each apikey corresponds to 1000 qdh\n      - key: \"*\"\n        token_per_hour: 1000\nredis:\n  service_name: redis.static\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Mapping in YAML\nDESCRIPTION: Example configuration showing how to map different model names using prefix matching and fallback patterns. Demonstrates mapping gpt-4 models to Qwen variants.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/model_mapper/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodelMapping:\n  'gpt-4-*': \"qwen-max\"\n  'gpt-4o': \"qwen-vl-plus\"\n  '*': \"qwen-turbo\"\n```\n\n----------------------------------------\n\nTITLE: IP Whitelist Configuration in YAML\nDESCRIPTION: Example YAML configuration for the ip-restriction plugin using origin-source IP type with a whitelist that includes a single IP address and a CIDR range. This configuration allows access only from the specified IPs.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ip-restriction/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nip_source_type: origin-source\nallow:\n  - 10.0.0.1\n  - 192.168.0.0/16\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Schema Weather Response\nDESCRIPTION: This response shows a weather report formatted according to a custom JSON schema. The AI model structures the data to match the schema defined in the configuration, with specific field names and data types.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\"id\":\"ebd6ea91-8e38-9e14-9a5b-90178d2edea4\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"content\": \"{\\\"location\\\": \\\"Beijing\\\", \\\"weather\\\": \\\"cloudy\\\", \\\"temperature\\\": \\\"19℃\\\", \\\"update_time\\\": \\\"Oct 9, 2024, at 16:37\\\"}\"},\"finish_reason\":\"stop\"}],\"created\":1723187991,\"model\":\"qwen-max-0403\",\"object\":\"chat.completion\",\"usage\":{\"prompt_tokens\":890,\"completion_tokens\":56,\"total_tokens\":946}}\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Proxy and Token Rate Limiting WasmPlugins in Higress\nDESCRIPTION: YAML configuration for setting up the AI proxy and token rate limiting plugins in Higress. The ai-proxy plugin is configured to work with Tongyi Qianwen AI service with model mappings. The ai-token-ratelimit plugin is configured to limit requests to 200 tokens per minute for a specific API key, using the Redis backend for state management.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: ai-proxy\n  namespace: higress-system\nspec:\n  matchRules:\n  - config:\n      provider:\n        type: qwen\n        apiTokens:\n        - \"<YOUR_API_TOKEN>\"\n        modelMapping:\n          'gpt-3': \"qwen-turbo\"\n          'gpt-35-turbo': \"qwen-plus\"\n          'gpt-4-turbo': \"qwen-max\"\n          '*': \"qwen-turbo\"\n    ingress:\n    - qwen\n  url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/ai-proxy:1.0.0\n  phase: UNSPECIFIED_PHASE\n  priority: 100\n---\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: ai-token-ratelimit\n  namespace: higress-system\nspec:\n  defaultConfig:\n    rule_name: default_limit_by_param_apikey\n    rule_items:\n    - limit_by_param: apikey\n      limit_keys:\n      - key: 123456\n        token_per_minute: 200\n    redis:\n      # 默认情况下，为了减轻数据面的压力，Higress 的 global.onlyPushRouteCluster 配置参数被设置为 true，意味着不会自动发现 Kubernetes Service\n      # 如果需要使用 Kubernetes Service 作为服务发现，可以将 global.onlyPushRouteCluster 参数设置为 false，\n      # 这样就可以直接将 service_name 设置为 Kubernetes Service, 而无须为 Redis 创建 McpBridge 以及 Ingress 路由\n      # service_name: redis.default.svc.cluster.local\n      service_name: redis.dns\n      service_port: 6379\n  url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/ai-token-ratelimit:1.0.0\n  phase: UNSPECIFIED_PHASE\n  priority: 600\n```\n\n----------------------------------------\n\nTITLE: Defining Helm Chart Values for Higress Deployment\nDESCRIPTION: This YAML configuration defines the values for deploying Higress using a Helm chart. It includes settings for both the controller and gateway components, covering aspects like image repositories, resource allocations, autoscaling, networking, and security contexts.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclusterName: \"\"\ncontroller:\n  affinity: {}\n  automaticHttps:\n    email: \"\"\n    enabled: true\n  autoscaling:\n    enabled: false\n    maxReplicas: 5\n    minReplicas: 1\n    targetCPUUtilizationPercentage: 80\n  env: {}\n  hub: \"higress-registry.cn-hangzhou.cr.aliyuncs.com/higress\"\n  image: \"higress\"\n  imagePullSecrets: []\n  labels: {}\n  name: \"higress-controller\"\n  nodeSelector: {}\n  podAnnotations: {}\n  podLabels: {}\n  podSecurityContext: {}\n  ports:\n    - name: \"http\"\n      port: 8888\n      protocol: \"TCP\"\n      targetPort: 8888\n    - name: \"http-solver\"\n      port: 8889\n      protocol: \"TCP\"\n      targetPort: 8889\n    - name: \"grpc\"\n      port: 15051\n      protocol: \"TCP\"\n      targetPort: 15051\n  probe:\n    httpGet:\n      path: \"/ready\"\n      port: 8888\n    initialDelaySeconds: 1\n    periodSeconds: 3\n    timeoutSeconds: 5\n  rbac:\n    create: true\n  replicas: 1\n  resources:\n    limits:\n      cpu: \"1000m\"\n      memory: \"2048Mi\"\n    requests:\n      cpu: \"500m\"\n      memory: \"2048Mi\"\n  securityContext: {}\n  service:\n    type: \"ClusterIP\"\n  serviceAccount:\n    annotations: {}\n    create: true\n    name: \"\"\n  tag: \"\"\n  tolerations: []\n\ngateway:\n  affinity: {}\n  annotations: {}\n  autoscaling:\n    enabled: false\n    maxReplicas: 5\n    minReplicas: 1\n    targetCPUUtilizationPercentage: 80\n  env: {}\n  hostNetwork: false\n  httpPort: 80\n  httpsPort: 443\n  hub: \"higress-registry.cn-hangzhou.cr.aliyuncs.com/higress\"\n  image: \"gateway\"\n  kind: \"Deployment\"\n  labels: {}\n  metrics:\n    enabled: false\n    honorLabels: false\n    interval: \"\"\n    metricRelabelConfigs: []\n    metricRelabelings: []\n    provider: \"monitoring.coreos.com\"\n    rawSpec: {}\n    relabelConfigs: []\n    relabelings: []\n    scrapeTimeout: \"\"\n  name: \"higress-gateway\"\n  networkGateway: \"\"\n  nodeSelector: {}\n  podAnnotations:\n    \"prometheus.io/path\": \"/stats/prometheus\"\n    \"prometheus.io/port\": \"15020\"\n    \"prometheus.io/scrape\": \"true\"\n    \"sidecar.istio.io/inject\": \"false\"\n  podLabels: {}\n  rbac:\n    enabled: true\n  readinessFailureThreshold: 30\n  readinessInitialDelaySeconds: 1\n  readinessPeriodSeconds: 2\n  readinessSuccessThreshold: 1\n  readinessTimeoutSeconds: 3\n  replicas: 2\n  resources:\n    limits:\n      cpu: \"2000m\"\n      memory: \"2048Mi\"\n    requests:\n      cpu: \"2000m\"\n      memory: \"2048Mi\"\n  revision: \"\"\n  rollingMaxSurge: \"100%\"\n  rollingMaxUnavailable: \"25%\"\n  service:\n    annotations: {}\n    externalTrafficPolicy: \"\"\n    loadBalancerClass: \"\"\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n    ports:\n      - name: \"http2\"\n        port: 80\n        protocol: \"TCP\"\n        targetPort: 80\n      - name: \"https\"\n        port: 443\n        protocol: \"TCP\"\n        targetPort: 443\n    type: \"LoadBalancer\"\n  serviceAccount:\n    annotations: {}\n    create: true\n    name: \"\"\n  tag: \"\"\n  tolerations: []\n\nglobal:\n  autoscalingv2API: true\n  caAddress: \"\"\n  caName: \"\"\n  configCluster: false\n  defaultPodDisruptionBudget:\n    enabled: false\n  defaultResources:\n    requests:\n      cpu: \"10m\"\n  defaultUpstreamConcurrencyThreshold: 10000\n  disableAlpnH2: false\n```\n\n----------------------------------------\n\nTITLE: Configuring DeepL Translation Service with OpenAI Protocol\nDESCRIPTION: YAML configuration for setting up a DeepL translation service proxy with OpenAI protocol. This configuration specifies Chinese as the target language and requires a DeepL API token.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: deepl\n  apiTokens:\n    - \"YOUR_DEEPL_API_TOKEN\"\n  targetLang: \"ZH\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Higress AI Proxy and Token Rate Limiting\nDESCRIPTION: This YAML configuration sets up the AI Proxy and AI Token Rate Limiting plugins in Higress. It configures the Qwen AI service provider and sets a limit of 200 tokens per minute for a specific API key.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: ai-proxy\n  namespace: higress-system\nspec:\n  matchRules:\n  - config:\n      provider:\n        type: qwen\n        apiTokens:\n        - \"<YOUR_API_TOKEN>\"\n        modelMapping:\n          'gpt-3': \"qwen-turbo\"\n          'gpt-35-turbo': \"qwen-plus\"\n          'gpt-4-turbo': \"qwen-max\"\n          '*': \"qwen-turbo\"\n    ingress:\n    - qwen\n  url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/ai-proxy:1.0.0\n  phase: UNSPECIFIED_PHASE\n  priority: 100\n---\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: ai-token-ratelimit\n  namespace: higress-system\nspec:\n  defaultConfig:\n    rule_name: default_limit_by_param_apikey\n    rule_items:\n    - limit_by_param: apikey\n      limit_keys:\n      - key: 123456\n        token_per_minute: 200\n    redis:\n      # By default, to reduce data plane pressure, the `global.onlyPushRouteCluster` parameter in Higress is set to true, meaning that Kubernetes Services are not automatically discovered.\n      # If you need to use Kubernetes Service for service discovery, set `global.onlyPushRouteCluster` to false,\n      # allowing you to directly set `service_name` to the Kubernetes Service without needing to create an McpBridge and an Ingress route for Redis.\n      # service_name: redis.default.svc.cluster.local\n      service_name: redis.dns\n      service_port: 6379\n  url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/ai-token-ratelimit:1.0.0\n  phase: UNSPECIFIED_PHASE\n  priority: 600\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Header Routing in YAML\nDESCRIPTION: Configuration example showing how to set up the model-router plugin to extract and add provider information to a custom header.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/model_router/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naddProviderHeader: x-higress-llm-provider\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to AI JSON Formatting Plugin in Higress\nDESCRIPTION: Curl command example for sending a POST request to the AI JSON Formatting plugin endpoint, including the necessary headers and request body.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-json-resp/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"http://localhost:8001/v1/chat/completions\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\"role\": \"user\", \"content\": \"give me a api doc for add the variable x to x+5\"}\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Content Security to Check Both Request and Response Legality\nDESCRIPTION: YAML configuration example for enabling both input and output content validation using the Alibaba Cloud content security service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-security-guard/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserviceName: safecheck.dns\nservicePort: 443\nserviceHost: green-cip.cn-shanghai.aliyuncs.com\naccessKey: \"XXXXXXXXX\"\nsecretKey: \"XXXXXXXXXXXXXXX\"\ncheckRequest: true\ncheckResponse: true\n```\n\n----------------------------------------\n\nTITLE: PathAndParameters Format for HMAC Signature\nDESCRIPTION: Text example showing how the path, query parameters, and form parameters should be formatted when included in the HMAC signature calculation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nPath + \"?\" + Key1 + \"=\" + Value1 + \"&\" + Key2 + \"=\" + Value2 + ... \"&\" + KeyN + \"=\" + ValueN\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Payload in JavaScript\nDESCRIPTION: Shows an example of a JWT payload containing user information as a JSON object.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Cache Plugin in Higress (YAML)\nDESCRIPTION: Example YAML configuration for the AI Cache plugin in Higress, demonstrating settings for vector storage, embedding service, and caching.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-cache/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvector:\n  type: dashvector\n  serviceName: dashvector\n  serviceHost: api.dashvector.com\n  servicePort: 443\n  apiKey: your_api_key\n  topK: 1\n  timeout: 10000\n  collectionID: your_collection_id\n  threshold: 1000\n  thresholdRelation: lt\n\nembedding:\n  type: dashscope\n  serviceName: dashscope\n  serviceHost: api.dashscope.com\n  servicePort: 443\n  apiKey: your_api_key\n  timeout: 10000\n  model: text-embedding-v1\n\ncache:\n  type: redis\n  serviceName: redis\n  serviceHost: localhost\n  servicePort: 6379\n  username: \"\"\n  password: \"\"\n  timeout: 10000\n  cacheTTL: 3600\n  cacheKeyPrefix: \"higress-ai-cache:\"\n  database: 0\n\ncacheKeyStrategy: \"lastQuestion\"\nenableSemanticCache: true\ncacheKeyFrom: \"messages.@reverse.0.content\"\ncacheValueFrom: \"choices.0.message.content\"\ncacheStreamValueFrom: \"choices.0.delta.content\"\ncacheToolCallsFrom: \"choices.0.delta.content.tool_calls\"\nresponseTemplate: '{\"id\":\"ai-cache.hit\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"content\":%s},\"finish_reason\":\"stop\"}],\"model\":\"gpt-4o\",\"object\":\"chat.completion\",\"usage\":{\"prompt_tokens\":0,\"completion_tokens\":0,\"total_tokens\":0}}'\nstreamResponseTemplate: 'data:{\"id\":\"ai-cache.hit\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":%s},\"finish_reason\":\"stop\"}],\"model\":\"gpt-4o\",\"object\":\"chat.completion\",\"usage\":{\"prompt_tokens\":0,\"completion_tokens\":0,\"total_tokens\":0}}\\n\\ndata:[DONE]\\n\\n'\n```\n\n----------------------------------------\n\nTITLE: Configuring Spark Service with OpenAI Protocol\nDESCRIPTION: YAML configuration for setting up a Spark service proxy with OpenAI protocol. This configuration maps OpenAI model names to Spark model versions and requires API key and secret.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: spark\n  apiTokens:\n    - \"APIKey:APISecret\"\n  modelMapping:\n    \"gpt-4o\": \"generalv3.5\"\n    \"gpt-4\": \"generalv3\"\n    \"*\": \"general\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OPA Plugin in Higress with YAML\nDESCRIPTION: Example YAML configuration for the OPA plugin in Higress. This configuration specifies a Kubernetes-based OPA service with parameters for service name, port, namespace, policy, and timeout.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/opa/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserviceSource: k8s\nserviceName: opa\nservicePort: 8181\nnamespace: higress-backend\npolicy: example1\ntimeout: 5s\n```\n\n----------------------------------------\n\nTITLE: Normal JSON Response from AI JSON Formatting Plugin in Higress\nDESCRIPTION: Example of a normal JSON response from the AI JSON Formatting plugin, showing a structured API documentation for the requested operation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-json-resp/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiVersion\": \"1.0\",\n  \"request\": {\n    \"endpoint\": \"/add_to_five\",\n    \"method\": \"POST\",\n    \"port\": 8080,\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    },\n    \"body\": {\n      \"x\": 7\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processed LLM Request with Geo-IP and AI Prompts\nDESCRIPTION: Example of the final processed LLM request after applying both the geo-ip and AI Prompts plugins, showing the inclusion of geographic location information.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-prompt-decorator/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost/test \\\n-H \"content-type: application/json\" \\\n-H \"x-forwarded-for: 87.254.207.100,4.5.6.7\" \\\n-d '{\n  \"model\": \"gpt-3.5-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"The user's current geographic location is, country: China, province: Beijing, city: Beijing.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"How is the weather today?\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"After answering each question, try to ask a follow-up question.\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Path Blocking in YAML for Higress Request-Block Plugin\nDESCRIPTION: This YAML configuration sets up URL path blocking for the Higress request-block plugin. It blocks requests containing 'swagger.html' or 'foo=bar' in the URL, ignoring case sensitivity.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/request_block/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblock_urls:\n- swagger.html\n- foo=bar\ncase_sensitive: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined Validation in YAML\nDESCRIPTION: This example demonstrates a combined validation configuration using multiple data types and validation rules in the request body.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/request-validation/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbody_schema:\n  type: object\n  required:\n    - boolean_payload\n    - array_payload\n    - regex_payload\n  properties:\n    boolean_payload:\n      type: boolean\n    array_payload:\n      type: array\n      minItems: 1\n      items:\n          type: integer\n          minimum: 1\n          maximum: 10\n      uniqueItems: true\n      default: [1, 2, 3]\n    regex_payload:\n      type: string\n      minLength: 1\n      maxLength: 10\n      pattern: \"^[a-zA-Z0-9_]+$\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Forward Auth Configuration with Header Management in YAML\nDESCRIPTION: Extended configuration for ext-auth plugin using forward_auth endpoint mode with header management. This demonstrates allowed headers, custom headers, and response header handling.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_service:\n  authorization_request:\n    allowed_headers:\n      - exact: x-auth-version\n    headers_to_add:\n      x-envoy-header: true\n  authorization_response:\n    allowed_upstream_headers:\n      - exact: x-user-id\n      - exact: x-auth-version\n  endpoint_mode: forward_auth\n  endpoint:\n    service_name: ext-auth.backend.svc.cluster.local\n    service_host: my-domain.local\n    service_port: 8090\n    path: /auth\n    request_method: POST\n  timeout: 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring 360智脑 Service with OpenAI Protocol\nDESCRIPTION: YAML configuration for setting up a 360智脑 service proxy with OpenAI protocol. This configuration maps OpenAI model names to 360 model equivalents and requires a 360 API token.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: ai360\n  apiTokens:\n    - \"YOUR_360_API_TOKEN\"\n  modelMapping:\n    \"gpt-4o\": \"360gpt-turbo-responsibility-8k\"\n    \"gpt-4\": \"360gpt2-pro\"\n    \"gpt-3.5\": \"360gpt-turbo\"\n    \"text-embedding-3-small\": \"embedding_s1_v1.2\"\n    \"*\": \"360gpt-pro\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Whitelist Mode for ext-auth Plugin in YAML\nDESCRIPTION: This snippet demonstrates how to configure the whitelist mode for the ext-auth plugin. It shows examples of matching rules based on domain, path, and HTTP method.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmatch_type: 'whitelist'\nmatch_list:\n  - match_rule_domain: 'api.example.com'\n    match_rule_path: '/public'\n    match_rule_type: 'prefix'\n  - match_rule_domain: 'images.example.com'\n    match_rule_method: [\"GET\"]\n  - match_rule_method: [\"HEAD\"]\n    match_rule_path: '/health-check'\n    match_rule_type: 'exact'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for AI History Dialogue Plugin in YAML\nDESCRIPTION: A simple example showing how to configure the Redis connection for the AI History Dialogue plugin. This configuration sets the Redis service name and increases the timeout value to 2000 milliseconds.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-history/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n  serviceName: my-redis.dns\n  timeout: 2000\n```\n\n----------------------------------------\n\nTITLE: Initial Chat Completion Request with Higress Question\nDESCRIPTION: First round chat completion request example showing basic request structure with a single message about Higress vs Nginx comparison.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-history/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://example.com/api/openai/v1/chat/completions?fill_history_cnt=3' \\\n  -H 'Accept: application/json, text/event-stream' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer sk-Nzf7RtkdS4s0zFyn5575124129254d9bAf9473A5D7D06dD3'\n  --data-raw '{\"model\":\"qwen-long\",\"frequency_penalty\":0,\"max_tokens\":800,\"stream\":false,\"messages\":[\n        {\n            \"role\": \"user\",\n            \"content\": \"Can Higress replace Nginx?\"\n        }\n    ],\"presence_penalty\":0,\"temperature\":0.7,\"top_p\":0.95}'\n```\n\n----------------------------------------\n\nTITLE: LLM Response Without RAG\nDESCRIPTION: Example response from LLM without RAG enhancement\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-rag/README.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n抱歉，作为AI模型，我无法实时获取和更新新闻事件的具体信息，包括地点、原因、人员伤亡等细节。对于此类具体事件，建议您查阅最新的新闻报道或官方通报以获取准确信息。您可以访问主流媒体网站、使用新闻应用或者关注相关政府部门的公告来获取这类动态资讯。\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for AI Cache Plugin in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Redis settings for the AI Cache plugin. It includes specifying the Redis service name, timeout, port, and database.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-cache/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nredis:  \n  serviceName: my-redis.dns  \n  timeout: 2000  \n  servicePort: 6379\n  database: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Enumeration Validation in YAML\nDESCRIPTION: This snippet demonstrates how to set up enumeration validation for a request body using JSON Schema in the request-validation plugin.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/request-validation/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbody_schema:\n  type: object\n  required:\n    - enum_payload\n  properties:\n    enum_payload:\n      type: string\n      enum:\n        - \"enum_string_1\"\n        - \"enum_string_2\"\n      default: \"enum_string_1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Model Service with OpenAI Protocol\nDESCRIPTION: YAML configuration for setting up a GitHub model service proxy with OpenAI protocol. This configuration maps OpenAI model names to GitHub model equivalents and requires a GitHub access token.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: github\n  apiTokens:\n    - \"YOUR_GITHUB_ACCESS_TOKEN\"\n  modelMapping:\n    \"gpt-4o\": \"gpt-4o\"\n    \"gpt-4\": \"Phi-3.5-MoE-instruct\"\n    \"gpt-3.5\": \"cohere-command-r-08-2024\"\n    \"text-embedding-3-large\": \"text-embedding-3-large\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Single Search Engine Integration for Higress AI Search\nDESCRIPTION: Basic configuration example showing how to set up the AI search plugin with a single Google search engine. It demonstrates how to enable reference sources in the response and configure basic search parameters.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nneedReference: true\nsearchFrom:\n- type: google\n  apiKey: \"your-google-api-key\"\n  cx: \"search-engine-id\"\n  serviceName: \"google-svc.dns\"\n  servicePort: 443\n  count: 5\n  optionArgs:\n    fileType: \"pdf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DeGraphQL Plugin with Kubernetes Resources\nDESCRIPTION: Example YAML configuration showing how to set up the DeGraphQL plugin to connect to GitHub's GraphQL API. The configuration includes McpBridge, Ingress, and WasmPlugin resources.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/de-graphql/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.higress.io/v1\nkind: McpBridge\nmetadata:\n  name: default\n  namespace: higress-system\nspec:\n  registries:\n  - domain: api.github.com\n    name: github\n    port: 443\n    type: dns\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/destination: github.dns\n    higress.io/upstream-vhost: \"api.github.com\"\n    higress.io/backend-protocol: HTTPS\n  name: github-api\n  namespace: higress-system\nspec:\n  ingressClassName: higress  \n  rules:\n  - http:\n      paths:\n      - backend:\n          resource:\n            apiGroup: networking.higress.io\n            kind: McpBridge\n            name: default\n        path: /api\n        pathType: Prefix\n---\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: de-graphql-github-api\n  namespace: higress-system\nspec:\n  matchRules:\n  - ingress:\n    - github-api\n    config:\n      timeout: 5000\n      endpoint: /graphql\n      domain: api.github.com\n      gql: |\n           query ($owner:String! $name:String!){\n              repository(owner:$owner, name:$name) {\n                name\n                forkCount\n                description\n             }\n           }\n  url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/de-graphql:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Transformer to Map Body Parameters to Headers in Higress\nDESCRIPTION: This YAML configuration example demonstrates how to extract the 'userId' field from the request body and map it to the 'x-user-id' request header. This enables routing based on body parameters using Higress's header matching capability.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreqRules:\n- operate: map\n  headers:\n  - fromKey: userId\n    toKey: x-user-id\n  mapSource: body\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication for Specific Routes in YAML\nDESCRIPTION: YAML configuration for enabling OAuth2 authentication on specific routes 'route-a' and 'route-b'. It includes consumer settings with client_id and client_secret.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconsumers:\n- name: consumer1\n  client_id: 12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration YAML for Higress MCP Server\nDESCRIPTION: YAML configuration for deploying an MCP server as a Higress plugin. It specifies the server name, configuration parameters like API keys, and optionally defines a whitelist of allowed tools that can be called.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  # MCP server name - MUST match the name used in mcp.AddMCPServer() in your code\n  name: my-mcp-server\n  # MCP server configuration\n  config:\n    apiKey: your-api-key-here\n  # Optional: If configured, acts as a whitelist - only tools listed here can be called\n  allowTools:\n  - my_tool\n  - another_tool\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request with JSON Body for Transformer Plugin\nDESCRIPTION: This cURL command demonstrates sending a request with a JSON body containing 'userId' and 'userName' fields. The transformer plugin will extract the userId value and add it as the 'x-user-id' header.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost -d '{\"userId\":12, \"userName\":\"johnlanni\"}' -H 'content-type:application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis-based AI Quota Management in YAML\nDESCRIPTION: Example configuration for setting up the AI quota management plugin with Redis integration. Defines the redis key prefix, admin consumer, admin path, and Redis connection details.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-quota/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nredis_key_prefix: \"chat_quota:\"\nadmin_consumer: consumer3\nadmin_path: /quota\nredis:\n  service_name: redis-service.default.svc.cluster.local\n  service_port: 6379\n  timeout: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring DeGraphQL Plugin for GitHub API Access in Higress\nDESCRIPTION: YAML configuration example demonstrating how to set up the DeGraphQL plugin to proxy GitHub API requests through Higress. The configuration includes DNS registry setup, Ingress definition, and WasmPlugin configuration with GraphQL query parameters.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/de-graphql/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.higress.io/v1\nkind: McpBridge\nmetadata:\n  name: default\n  namespace: higress-system\nspec:\n  registries:\n  - domain: api.github.com\n    name: github\n    port: 443\n    type: dns\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/destination: github.dns\n    higress.io/upstream-vhost: \"api.github.com\"\n    higress.io/backend-protocol: HTTPS\n  name: github-api\n  namespace: higress-system\nspec:\n  ingressClassName: higress\n  rules:\n  - http:\n      paths:\n      - backend:\n          resource:\n            apiGroup: networking.higress.io\n            kind: McpBridge\n            name: default\n        path: /api\n        pathType: Prefix\n---\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: de-graphql-github-api\n  namespace: higress-system\nspec:\n  matchRules:\n  - ingress:\n    - github-api\n    config:\n      timeout: 5000\n      endpoint: /graphql\n      domain: api.github.com\n      gql: |\n           query ($owner:String! $name:String!){\n              repository(owner:$owner, name:$name) {\n                name\n                forkCount\n                description\n             }\n           }\n  url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/de-graphql:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query Example with curl\nDESCRIPTION: Demonstrates making a direct GraphQL query to GitHub's API using curl, including authentication with a personal access token to retrieve the viewer's login information.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/de-graphql/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://api.github.com/graphql -X POST \\\n-H \"Authorization: bearer <PAT>\" \\\n-d \"{\\\"query\\\": \\\"query { viewer { login }}\\\"}\"\n\n{\n\t\"data\": {\n\t\t\"viewer\": {\n\t\t\t\"login\": \"2456868764\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Global Authentication Configuration in YAML for Higress Key-Auth Plugin\nDESCRIPTION: This YAML configuration enables key-auth authentication for specific routes or hostnames. It defines two consumers with unique credentials and configures the plugin to look for API keys in both the 'apikey' and 'x-api-key' fields.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: false\nconsumers:\n- credential: 2bda943c-ba2b-11ec-ba07-00163e1250b5\n  name: consumer1\n- credential: c8c8e9ca-558e-4a2d-bb62-e700dcc40e35\n  name: consumer2\nkeys:\n- apikey\n- x-api-key\n```\n\n----------------------------------------\n\nTITLE: Domain-Specific Authorization Configuration in YAML\nDESCRIPTION: Configuration for domain-level authorization allowing specific consumer access.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: LLM Response With RAG\nDESCRIPTION: Example response from LLM with RAG enhancement showing improved context and accuracy\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-rag/README.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n海南追尾事故发生在海文高速公路文昌至海口方向37公里处。关于事故的具体原因，交警部门当时仍在进一步调查中，所以根据提供的信息无法确定事故的确切原因。人员伤亡情况是1人死亡（司机当场死亡），另有8人受伤（包括2名儿童和6名成人），所有受伤人员都被解救并送往医院进行治疗。\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Gray Release with Rewrite Rules for CDN in YAML\nDESCRIPTION: This configuration example demonstrates how to set up the frontend-gray plugin with rewrite rules, typically used in CDN deployment scenarios. It includes host configuration, 404 page handling, and routing rules for both index pages and static files.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/frontend-gray/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngrayKey: userid\nrules:\n- name: inner-user\n  grayKeyValue:\n  - '00000001'\n  - '00000005'\n- name: beta-user\n  grayKeyValue:\n  - '00000002'\n  - '00000003'\n  grayTagKey: level\n  grayTagValue:\n  - level3\n  - level5\nrewrite:\n  host: frontend-gray.oss-cn-shanghai-internal.aliyuncs.com\n  notFoundUri: /mfe/app1/dev/404.html\n  indexRouting:\n    /app1: '/mfe/app1/{version}/index.html'\n    /: '/mfe/app1/{version}/index.html',\n  fileRouting:\n    /: '/mfe/app1/{version}'\n    /app1/: '/mfe/app1/{version}'\nbaseDeployment:\n  version: base\ngrayDeployments:\n  - name: beta-user\n    version: gray\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrent Search Queries for Higress AI Search\nDESCRIPTION: Configuration example demonstrating how to set up concurrent search queries to overcome search engine result limits. It shows how to get 30 results using three concurrent queries with different start positions.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsearchFrom:\n- type: google\n  apiKey: \"your-google-api-key\"\n  cx: \"search-engine-id\"\n  serviceName: \"google-svc.dns\"\n  servicePort: 443\n  start: 0\n  count: 10\n- type: google\n  apiKey: \"your-google-api-key\"\n  cx: \"search-engine-id\"\n  serviceName: \"google-svc.dns\"\n  servicePort: 443\n  start: 10\n  count: 10\n- type: google\n  apiKey: \"your-google-api-key\"\n  cx: \"search-engine-id\"\n  serviceName: \"google-svc.dns\"\n  servicePort: 443\n  start: 20\n  count: 10 \n```\n\n----------------------------------------\n\nTITLE: Allowing All Cross-Origin Access Without Credentials in YAML\nDESCRIPTION: YAML configuration that permits access from all origins (*) without allowing credentials. This configuration allows all methods, headers, and exposed headers with a cache duration of 7200 seconds.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cors/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nallow_origins:\n  - '*'\nallow_methods:\n  - '*'\nallow_headers:\n  - '*'\nexpose_headers:\n  - '*'\nallow_credentials: false\nmax_age: 7200\n```\n\n----------------------------------------\n\nTITLE: Testing GitHub GraphQL API with cURL\nDESCRIPTION: Example cURL commands demonstrating direct interaction with GitHub's GraphQL API. The first example shows a simple viewer login query, while the second shows a more complex repository query with variables.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/de-graphql/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://api.github.com/graphql -X POST \\\n-H \"Authorization: bearer <PAT>\" \\\n-d \"{\\\"query\\\": \\\"query { viewer { login }}\\\"}\"\n\n{\n\t\"data\": {\n\t\t\"viewer\": {\n\t\t\t\"login\": \"2456868764\"\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'https://api.github.com/graphql' -X POST \\\n-H 'Authorization: bearer <PAT>' \\\n-d '{\"query\":\"query ($owner: String!, $name: String!) {\\n  repository(owner: $owner, name: $name) {\\n    name\\n    forkCount\\n    description\\n  }\\n}\\n\",\"variables\":{\"owner\":\"2456868764\",\"name\":\"higress\"}}'\n\n{\n\t\"data\": {\n\t\t\"repository\": {\n\t\t\t\"name\": \"higress\",\n\t\t\t\"forkCount\": 149,\n\t\t\t\"description\": \"Next-generation Cloud Native Gateway | 下一代云原生网关\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliyun OIDC Authentication in Higress (YAML)\nDESCRIPTION: This YAML configuration sets up OIDC authentication using Aliyun as the identity provider. It specifies the redirect URL, OIDC issuer URL, client credentials, scopes, and matching rules for the authentication flow.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nredirect_url: 'http://foo.bar.com/oauth2/callback'\nprovider: aliyun\noidc_issuer_url: 'https://oauth.aliyun.com/'\nclient_id: 'XXXXXXXXXXXXXXXX'\nclient_secret: 'XXXXXXXXXXXXXXXX'\nscope: 'openid'\ncookie_secret: 'nqavJrGvRmQxWwGNptLdyUVKcBNZ2b18Guc1n_8DCfY='\nservice_name: 'aliyun.dns'\nservice_port: 443\nmatch_type: whitelist\nmatch_list:\n - match_rule_domain: 'foo.bar.com'\n   match_rule_path: /foo\n   match_rule_type: prefix\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-Based Rate Limiting in Higress\nDESCRIPTION: This YAML configuration sets up rate limiting rules based on the 'x-ca-key' request header. It defines different token limits for specific key values and uses regular expressions for pattern matching.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrule_name: default_rule\nrule_items:\n  - limit_by_header: x-ca-key\n    limit_keys:\n    \t- key: 102234\n        token_per_minute: 10\n      - key: 308239\n        token_per_hour: 10\n  - limit_by_per_header: x-ca-key\n    limit_keys:\n      # Regular expression, matches all strings starting with a, each apikey corresponds to 10 qds\n      - key: \"regexp:^a.*\"\n        token_per_second: 10\n      # Regular expression, matches all strings starting with b, each apikey corresponds to 100 qd\n      - key: \"regexp:^b.*\"\n        token_per_minute: 100\n      # Fallback, matches all requests, each apikey corresponds to 1000 qdh\n      - key: \"*\"\n        token_per_hour: 1000\nredis:\n  service_name: redis.static\n```\n\n----------------------------------------\n\nTITLE: Basic WasmPlugin Configuration in Kubernetes\nDESCRIPTION: YAML configuration for deploying a WASM plugin in Higress using the WasmPlugin API. This example configures the request-block plugin to block URLs containing 'swagger.html'.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: request-block\n  namespace: higress-system\nspec:\n  defaultConfig:\n    block_urls:\n    - \"swagger.html\"\n  url: oci://<your_registry_hub>/request-block:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Example LLM Request with Model Parameter\nDESCRIPTION: Sample JSON request body showing the structure of an LLM API call with model parameter that will be processed by the plugin.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/model_router/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": \"qwen-long\",\n    \"frequency_penalty\": 0,\n    \"max_tokens\": 800,\n    \"stream\": false,\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the GitHub address of the Higress project's main repository?\"\n    }],\n    \"presence_penalty\": 0,\n    \"temperature\": 0.7,\n    \"top_p\": 0.95\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Gateway Service in Higress AI JSON Formatting Plugin\nDESCRIPTION: YAML configuration example for setting up a local gateway service in the AI JSON Formatting plugin, allowing reuse of existing AI-proxy services.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-json-resp/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nserviceName: localservice\nserviceDomain: 127.0.0.1\nservicePort: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Service in Higress\nDESCRIPTION: Basic configuration for Azure OpenAI service with no additional context. Defines the provider type, API tokens, and service URL for Azure OpenAI integration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: azure\n  apiTokens:\n    - \"YOUR_AZURE_OPENAI_API_TOKEN\"\n  azureServiceUrl: \"https://YOUR_RESOURCE_NAME.openai.azure.com/openai/deployments/YOUR_DEPLOYMENT_NAME/chat/completions?api-version=2024-02-15-preview\",\n```\n\n----------------------------------------\n\nTITLE: Constructing Request Body with Templates and Variable Substitution\nDESCRIPTION: Example YAML configuration showing how to use templates and variable substitution to dynamically construct a request body for a workflow node.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/api-workflow/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    service_body_tmpl:\n      embeddings: \n        result: \"\"\n      msg: \"\"\n      sk: \"sk-xxxxxx\"\n    service_body_replace_keys:\n      - to \"embeddings.result\"\n        from \"A||output.embeddings.0.embedding\"\n      - to \"msg\"\n        from \"B||@all\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Tool in Go\nDESCRIPTION: Example of a complete MCP tool implementation with Description, InputSchema, Create, and Call methods. Shows parameter definition with JSON schema annotations and handling of server configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// tools/my_tool.go\npackage tools\n\nimport (\n    \"encoding/json\"\n    \"errors\"\n    \"fmt\"\n    \"net/http\"\n    \n    \"my-mcp-server/config\"\n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp/server\"\n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp/utils\"\n)\n\n// Define your tool structure with input parameters\ntype MyTool struct {\n    Param1 string `json:\"param1\" jsonschema_description:\"Description of param1\" jsonschema:\"example=example value\"`\n    Param2 int    `json:\"param2,omitempty\" jsonschema_description:\"Description of param2\" jsonschema:\"default=5\"`\n}\n\n// Description returns the description field for the MCP tool definition.\n// This corresponds to the \"description\" field in the MCP tool JSON response,\n// which provides a human-readable explanation of the tool's purpose and usage.\nfunc (t MyTool) Description() string {\n    return `Detailed description of what this tool does and when to use it.`\n}\n\n// InputSchema returns the inputSchema field for the MCP tool definition.\n// This corresponds to the \"inputSchema\" field in the MCP tool JSON response,\n// which defines the JSON Schema for the tool's input parameters, including\n// property types, descriptions, and required fields.\nfunc (t MyTool) InputSchema() map[string]any {\n    return server.ToInputSchema(&MyTool{})\n}\n\n// Create instantiates a new tool instance based on the input parameters\n// from an MCP tool call. It deserializes the JSON parameters into a struct,\n// applying default values for optional fields, and returns the configured tool instance.\nfunc (t MyTool) Create(params []byte) server.Tool {\n    myTool := &MyTool{\n        Param2: 5, // Default value\n    }\n    json.Unmarshal(params, &myTool)\n    return myTool\n}\n\n// Call implements the core logic for handling an MCP tool call. This method is executed\n// when the tool is invoked through the MCP framework. It processes the configured parameters,\n// makes any necessary API requests, and formats the results to be returned to the caller.\nfunc (t MyTool) Call(ctx server.HttpContext, s server.Server) error {\n    // Get server configuration\n    serverConfig := &config.MyServerConfig{}\n    s.GetConfig(serverConfig)\n    if serverConfig.ApiKey == \"\" {\n        return errors.New(\"missing api key in server configuration\")\n    }\n    \n    // Implement your tool's logic here\n    // ...\n    \n    // Return results\n    utils.SendMCPToolTextResult(ctx, fmt.Sprintf(\"Result: %s, %d\", t.Param1, t.Param2))\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Query Rewriting with LLM for Higress AI Search\nDESCRIPTION: Example configuration for enabling the search rewrite feature using an LLM service. This feature optimizes search queries by analyzing the user's question and generating better keyword combinations for search engines.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsearchFrom:\n- type: google\n  apiKey: \"your-google-api-key\"\n  cx: \"search-engine-id\"\n  serviceName: \"google-svc.dns\"\n  servicePort: 443\nsearchRewrite:\n  llmServiceName: \"llm-svc.dns\"\n  llmServicePort: 443\n  llmApiKey: \"your-llm-api-key\"\n  llmUrl: \"https://api.example.com/v1/chat/completions\"\n  llmModelName: \"gpt-3.5-turbo\"\n  timeoutMillisecond: 15000\n```\n\n----------------------------------------\n\nTITLE: Setting API Key in HTTP Headers for Higress Key-Auth Authentication\nDESCRIPTION: Example of a cURL request that passes the API key in the HTTP request header. This method works when in_header is set to true in the plugin configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test -H 'x-api-key: 2bda943c-ba2b-11ec-ba07-00163e1250b5'\n```\n\n----------------------------------------\n\nTITLE: Configuring McpBridge for Service Discovery in Higress\nDESCRIPTION: McpBridge configuration for Higress to enable service discovery for both the Tongyi Qianwen AI service and Redis. This configuration allows the plugins to communicate with external services by mapping domain names to service endpoints.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.higress.io/v1\nkind: McpBridge\nmetadata:\n  name: default\n  namespace: higress-system\nspec:\n  registries:\n  - domain: dashscope.aliyuncs.com\n    name: qwen\n    port: 443\n    type: dns\n  - domain: redis.default.svc.cluster.local # Kubernetes Service\n    name: redis\n    type: dns\n    port: 6379\n```\n\n----------------------------------------\n\nTITLE: Configuring Higress Global Parameters\nDESCRIPTION: Comprehensive configuration parameters for Higress deployment including Gateway API settings, Redis integration, image pull policies, and ingress class configurations. These parameters control core functionality and integration with various components.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  enableGatewayAPI: false\n  enableH3: false\n  enableIPv6: false\n  enableIstioAPI: true\n  enableLDSCache: false\n  enableProxyProtocol: false\n  enablePushAllMCPClusters: true\n  enableRedis: false\n  enableSRDS: true\n  enableStatus: true\n  externalIstiod: false\n  hostRDSMergeSubset: false\n  hub: \"higress-registry.cn-hangzhou.cr.aliyuncs.com/higress\"\n  imagePullPolicy: \"\"\n  imagePullSecrets: []\n  ingressClass: \"higress\"\n  istioNamespace: \"istio-system\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Prompts Plugin in YAML\nDESCRIPTION: Example YAML configuration for the AI Prompts plugin, demonstrating how to insert prompts before and after the initial input in LLM requests.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-prompt-decorator/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprepend:\n- role: system\n  content: \"Please answer the questions in English.\"\nappend:\n- role: user\n  content: \"After answering each question, try to ask a follow-up question.\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example from Node B in Workflow\nDESCRIPTION: Example JSON response from Node B in the workflow, containing a simple array of text that can be used in subsequent nodes.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/api-workflow/README.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\"higress项目主仓库的github地址是什么\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy for Claude AI Integration\nDESCRIPTION: An Envoy proxy configuration that sets up a listener on port 10000, routes traffic to Anthropic's Claude API, and includes a Wasm plugin for handling authentication and request processing. The configuration includes TLS settings for secure communication with the Claude API.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  address:\n    socket_address:\n      protocol: TCP\n      address: 0.0.0.0\n      port_value: 9901\nstatic_resources:\n  listeners:\n    - name: listener_0\n      address:\n        socket_address:\n          protocol: TCP\n          address: 0.0.0.0\n          port_value: 10000\n      filter_chains:\n        - filters:\n            - name: envoy.filters.network.http_connection_manager\n              typed_config:\n                \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n                scheme_header_transformation:\n                  scheme_to_overwrite: https\n                stat_prefix: ingress_http\n                # Outputs envoy logs to stdout\n                access_log:\n                  - name: envoy.access_loggers.stdout\n                    typed_config:\n                      \"@type\": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog\n                # Modify as needed\n                route_config:\n                  name: local_route\n                  virtual_hosts:\n                    - name: local_service\n                      domains: [ \"*\" ]\n                      routes:\n                        - match:\n                            prefix: \"/\"\n                          route:\n                            cluster: claude\n                            timeout: 300s\n                http_filters:\n                  - name: claude\n                    typed_config:\n                      \"@type\": type.googleapis.com/udpa.type.v1.TypedStruct\n                      type_url: type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm\n                      value:\n                        config:\n                          name: claude\n                          vm_config:\n                            runtime: envoy.wasm.runtime.v8\n                            code:\n                              local:\n                                filename: /etc/envoy/plugin.wasm\n                          configuration:\n                            \"@type\": \"type.googleapis.com/google.protobuf.StringValue\"\n                            value: | # Plugin configuration\n                              {\n                                \"provider\": {\n                                  \"type\": \"claude\",\n                                  \"apiTokens\": [\n                                    \"YOUR_API_TOKEN\"\n                                  ]\n                                }\n                              }\n                  - name: envoy.filters.http.router\n  clusters:\n    - name: claude\n      connect_timeout: 30s\n      type: LOGICAL_DNS\n      dns_lookup_family: V4_ONLY\n      lb_policy: ROUND_ROBIN\n      load_assignment:\n        cluster_name: claude\n        endpoints:\n          - lb_endpoints:\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: api.anthropic.com # Service address\n                      port_value: 443\n      transport_socket:\n        name: envoy.transport_sockets.tls\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n          \"sni\": \"api.anthropic.com\"\n```\n\n----------------------------------------\n\nTITLE: Token Usage Configuration for Non-OpenAI Protocols\nDESCRIPTION: YAML configuration example for extracting model, input_token, and output_token from non-OpenAI protocol responses.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-statistics/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nattributes:\n  - key: model\n    value_source: response_body\n    value: usage.models.0.model_id\n    apply_to_log: true\n    apply_to_span: false\n  - key: input_token\n    value_source: response_body\n    value: usage.models.0.input_tokens\n    apply_to_log: true\n    apply_to_span: false\n  - key: output_token\n    value_source: response_body\n    value: usage.models.0.output_tokens\n    apply_to_log: true\n    apply_to_span: false\n```\n\n----------------------------------------\n\nTITLE: Qwen AI Chat Completion Request Example\nDESCRIPTION: JSON request example for Qwen AI chat completion API. Shows how to send a basic chat message using the OpenAI protocol format.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-3\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"你好，你是谁？\"\n    }\n  ],\n  \"temperature\": 0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure for MCP Server Implementation\nDESCRIPTION: Shows the typical directory structure for an MCP server project, including the main file and tool implementations.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy-mcp-server/\n├── go.mod                 # Go module definition\n├── go.sum                 # Go module checksums\n├── main.go                # Entry point that registers tools and resources\n└── tools/\n    └── my_tool.go         # Tool implementation\n```\n\n----------------------------------------\n\nTITLE: GitHub Model Service Chat Request Format\nDESCRIPTION: JSON request example for GitHub model service using the OpenAI chat completion format. It includes messages with system and user roles, streaming settings, and generation parameters.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a helpful assistant.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"What is the capital of France?\"\n    }\n  ],\n  \"stream\": true,\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"max_tokens\": 1000,\n  \"model\": \"gpt-4o\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Specific Authorization in Higress\nDESCRIPTION: This YAML configuration restricts access to the *.example.com and test.com domains to only the consumer2 user. It implements domain-level access control in the gateway.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Content Security to Check Request Legality\nDESCRIPTION: YAML configuration example for the AI security plugin that enables checking if input content is legal. It specifies service connection details and Alibaba Cloud credentials.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-security-guard/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserviceName: safecheck.dns\nservicePort: 443\nserviceHost: \"green-cip.cn-shanghai.aliyuncs.com\"\naccessKey: \"XXXXXXXXX\"\nsecretKey: \"XXXXXXXXXXXXXXX\"\ncheckRequest: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak OIDC Authentication in Higress (YAML)\nDESCRIPTION: This YAML configuration sets up OIDC authentication using Keycloak as the identity provider. It specifies the redirect URL, OIDC issuer URL, client credentials, scopes, and matching rules for the authentication flow.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nredirect_url: 'http://foo.bar.com/oauth2/callback'\noidc_issuer_url: 'http://127.0.0.1:9090/realms/myrealm'\nclient_id: 'XXXXXXXXXXXXXXXX'\nclient_secret: 'XXXXXXXXXXXXXXXX'\nscope: 'openid email'\ncookie_secret: 'nqavJrGvRmQxWwGNptLdyUVKcBNZ2b18Guc1n_8DCfY='\nservice_name: 'keycloak.static'\nservice_port: 80\nservice_host: '127.0.0.1:9090'\nmatch_type: 'blacklist'\nmatch_list:\n    - match_rule_domain: '*.bar.com'\n      match_rule_path: '/headers'\n      match_rule_type: 'prefix'\n```\n\n----------------------------------------\n\nTITLE: DeepL Translation Request Example\nDESCRIPTION: JSON request example for DeepL translation service through the OpenAI protocol proxy. The request includes a service tier (Free), a system message providing context about 'money', and two text samples to translate.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"Free\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"money\"\n    },\n    {\n      \"content\": \"sit by the bank\"\n    },\n    {\n      \"content\": \"a bank in China\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Istio Helm Repository\nDESCRIPTION: Commands to add the official Istio Helm repository and update local repository cache. This is required before installing the Istio base chart.\nSOURCE: https://github.com/alibaba/higress/blob/main/hgctl/pkg/manifests/istiobase/README.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add istio https://istio-release.storage.googleapis.com/charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 403 Error for Unauthorized Consumer in Higress Key-Auth\nDESCRIPTION: Example of a cURL request with a valid API key for consumer2, but returning a 403 error because consumer2 is not in the allow list for the matched route.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test?apikey=c8c8e9ca-558e-4a2d-bb62-e700dcc40e35\n```\n\n----------------------------------------\n\nTITLE: Qwen Chat Completion API Response Example\nDESCRIPTION: This snippet shows a sample JSON response from the Qwen AI model. It includes the generated response, model information, and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"id\":\"ebd6ea91-8e38-9e14-9a5b-90178d2edea4\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"content\":\" The current weather condition in Beijing is overcast, with a temperature of 19°C. This information was last updated on Sep 12, 2024, at 22:17 (Beijing time).\"},\"finish_reason\":\"stop\"}],\"created\":1723187991,\"model\":\"qwen-max-0403\",\"object\":\"chat.completion\",\"usage\":{\"prompt_tokens\":999,\"completion_tokens\":76,\"total_tokens\":1075}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Moonshot AI Service with YAML\nDESCRIPTION: YAML configuration for setting up the Moonshot AI service with API tokens, file ID, and model mapping.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: moonshot\n  apiTokens:\n    - \"YOUR_MOONSHOT_API_TOKEN\"\n  moonshotFileId: \"YOUR_MOONSHOT_FILE_ID\",\n  modelMapping:\n    '*': \"moonshot-v1-32k\"\n```\n\n----------------------------------------\n\nTITLE: Token Response\nDESCRIPTION: Response containing access token, refresh token and ID token from the authorization server.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIiwiaXNzIjoiaHR0cHM6Ly9kZXYtbzQzeGIxbXo3eWE3YWNoNC51cy5hdXRoMC5jb20vIn0..WP_WRVM-y3fM1sN4.fAQqtKoKZNG9Wj0OhtrMgtsjTJ2J72M2klDRd9SvUKGbiYsZNPmIl_qJUf81D3VIjD59o9xrOOJIzXTgsfFVA2x15g-jBlNh68N7dyhXu9237Tbplweu1jA25IZDSnjitQ3pbf7xJVIfPnWcrzl6uT8G1EP-omFcl6AQprV2FoKFMCGFCgeafuttppKe1a8mpJDj7AFLPs-344tT9mvCWmI4DuoLFh0PiqMMJBByoijRSxcSdXLPxZng84j8JVF7H6mFa-dj-icP-KLy6yvzEaRKz_uwBzQCzgYK434LIpqw_PRuN3ClEsenwRgIsNdVjvKcoAysfoZhmRy9BQaE0I7qTohSBFNX6A.mgGGeeWgugfXcUcsX4T5dQ\",\n    \"refresh_token\": \"GrZ1f2JvzjAZQzSXmyr1ScWbv8aMFBvzAXHBUSiILcDEG\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Imc1Z1ExSF9ZbTY0WUlvVkQwSVpXTCJ9.eyJlbWFpbCI6IjE2MDExNTYyNjhAcXEuY29tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJpc3MiOiJodHRwczovL2Rldi1vNDN4YjFtejd5YTdhY2g0LnVzLmF1dGgwLmNvbS8iLCJhdWQiOiJZYWdGcVJEOXRmTklhYWM1QmFtamhzU2F0anJBbnNuWiIsImlhdCI6MTcxOTE5ODYzOCwiZXhwIjoxNzE5MjM0NjM4LCJzdWIiOiJhdXRoMHw2NjVkNzFlNzRjMTMxMTc3YmU2NmU2MDciLCJzaWQiOiJjdDJVOF9ZUS16VDdFOGkwRTNNeUstejc5ZGlWUWhhVSJ9.gfzXKJ0FeqzYqOUDLQHWcUG19IOLqkpLN09xTmIat0umrlGV5VNSumgWH3XJmmwnhdb8AThH3Jf-7kbRJzu4rM-BbGbFTRBTzNHeUajFOFrIgld5VENQ_M_sXHkTp0psWKSr9vF24kmilCfSbvC5lBKjt878ljZ7-xteWuaUYOMUdcJb4DSv0-zjX01sonJxYamTlhji3M4TAW7VwhwqyZt8dBhVSNaRw1wUKj-M1JrBDLyx65sroZtSqVA0udIrqMHEbWYb2de7JjzlqG003HRMzwOm7OXgEd5ZVFqgmBLosgixOU5DJ4A26nlqK92Sp6VqDMRvA-3ym8W_m-wJ_A\",\n    \"scope\": \"openid email offline_access\",\n    \"expires_in\": 86400,\n    \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Qwen File Context Request\nDESCRIPTION: Example JSON request for Qwen service with file context. Uses gpt-4-turbo model (mapped to qwen-long) and asks to summarize the content from the provided files.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-4-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Please summarize the content\"\n    }\n  ],\n  \"temperature\": 0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request with Form-Encoded Body for Transformer Plugin\nDESCRIPTION: This cURL command demonstrates sending a request with form-encoded parameters 'userId' and 'userName'. The transformer plugin will extract the userId value and add it as the 'x-user-id' header.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost -d 'userId=12&userName=johnlanni'\n```\n\n----------------------------------------\n\nTITLE: Domain-Level Authorization Configuration in YAML\nDESCRIPTION: YAML configuration for setting domain-specific authorization rules. This example allows only consumer2 to access matching domains (*.example.com and test.com).\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Making Unauthorized Basic Auth Requests - Insufficient Permissions\nDESCRIPTION: Example of a request that will be rejected with 403 Forbidden because the consumer doesn't have permission to access the route.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# consumer2不在route-a的allow列表里\ncurl -u guest:abc  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Gemini Services Response Example\nDESCRIPTION: JSON response example from Google's Gemini services, showing a structured response with an ID, choices containing the assistant's message, usage statistics, and model information.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"chatcmpl-b010867c-0d3f-40ba-95fd-4e8030551aeb\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"I am a large multi-modal model, trained by Google. I am designed to provide information and answer questions to the best of my abilities.\"\n            },\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"created\": 1722756984,\n    \"model\": \"gemini-pro\",\n    \"object\": \"chat.completion\",\n    \"usage\": {\n        \"prompt_tokens\": 5,\n        \"completion_tokens\": 29,\n        \"total_tokens\": 34\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route-specific Authorization Configuration in YAML\nDESCRIPTION: YAML configuration for route-level authorization that allows only consumer1 to access the routes named route-a and route-b.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow: \n- consumer1\n```\n\n----------------------------------------\n\nTITLE: Configuring Groq AI Service with YAML\nDESCRIPTION: YAML configuration for setting up the Groq AI service with API tokens.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: groq\n  apiTokens:\n    - \"YOUR_GROQ_API_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Request with Custom Headers in Forward Auth Mode in Shell\nDESCRIPTION: Example of making a GET request to the gateway with custom headers including X-Auth-Version, which will be passed through to the authorization service based on the allowed_headers configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README_EN.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:8082/users?apikey=9a342114-ba8a-11ec-b1bf-00163e1250b5 -X GET -H \"foo: bar\" -H \"Authorization: xxx\" -H \"X-Auth-Version: 1.0\" -H \"Host: foo.bar.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Coze Applications with Original Protocol\nDESCRIPTION: YAML configuration for using Coze applications with the original protocol instead of OpenAI protocol. Requires a Coze API key.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: coze\n  apiTokens:\n    - YOUR_COZE_API_KEY\n  protocol: original\n```\n\n----------------------------------------\n\nTITLE: Sending LLM Request with Geo-IP Information\nDESCRIPTION: Example cURL command to send an LLM request with an X-Forwarded-For header, demonstrating how to include IP information for geo-location.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-prompt-decorator/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost/test \\\n-H \"content-type: application/json\" \\\n-H \"x-forwarded-for: 87.254.207.100,4.5.6.7\" \\\n-d '{\n  \"model\": \"gpt-3.5-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"How is the weather today?\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Regular Expression Validation in YAML\nDESCRIPTION: This example demonstrates how to set up regular expression validation for strings in the request body.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/request-validation/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbody_schema:\n  type: object\n  required:\n    - regex_payload\n  properties:\n    regex_payload:\n      type: string\n      minLength: 1\n      maxLength: 10\n      pattern: \"^[a-zA-Z0-9_]+$\"\n```\n\n----------------------------------------\n\nTITLE: Forward Auth Endpoint Mode Configuration in YAML\nDESCRIPTION: Configuration example for the ext-auth plugin using forward_auth endpoint mode, which provides different header formatting compared to envoy mode. This defines service details and request method.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_service:\n  endpoint_mode: forward_auth\n  endpoint:\n    service_name: ext-auth.backend.svc.cluster.local\n    service_port: 8090\n    path: /auth\n    request_method: POST\n  timeout: 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Level Authorization in Higress\nDESCRIPTION: This YAML snippet configures Basic Auth authorization for specific domains, allowing only the consumer named 'consumer2' to access domains matching '*.example.com' and 'test.com'.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude AI Service with YAML\nDESCRIPTION: YAML configuration for setting up the Claude AI service with API tokens and version specification.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: claude\n  apiTokens:\n    - \"YOUR_CLAUDE_API_TOKEN\"\n  version: \"2023-06-01\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WAF Plugin in Higress with YAML\nDESCRIPTION: Example YAML configuration for the WAF plugin showing how to enable OWASP CRS and define custom ModSecurity rules. The configuration demonstrates setting debug log level, enabling the rule engine, and creating rules to block access to specific paths and request payloads.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/waf/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuseCRS: true  \nsecRules:  \n  - \"SecDebugLogLevel 3\"  \n  - \"SecRuleEngine On\"  \n  - \"SecAction \\\"id:100,phase:1,pass\\\"\"  \n  - \"SecRule REQUEST_URI \\\"@streq /admin\\\" \\\"id:101,phase:1,t:lowercase,deny\\\"\"  \n  - \"SecRule REQUEST_BODY \\\"@rx maliciouspayload\\\" \\\"id:102,phase:2,t:lowercase,deny\\\"\"  \n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Workers AI Service with OpenAI Protocol\nDESCRIPTION: YAML configuration for setting up a Cloudflare Workers AI service proxy with OpenAI protocol. This configuration requires Cloudflare credentials and maps all model requests to the Llama-3-8b model.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: cloudflare\n  apiTokens:\n    - \"YOUR_WORKERS_AI_API_TOKEN\"\n  cloudflareAccountId: \"YOUR_CLOUDFLARE_ACCOUNT_ID\"\n  modelMapping:\n    \"*\": \"@cf/meta/llama-3-8b-instruct\"\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON for Replay Attack Detection\nDESCRIPTION: An example JSON response returned when a replay attack is detected. It includes the configured status code and error message.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/replay-protection/README.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 429,\n  \"message\": \"Replay Attack Detected\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Simple CORS Request with cURL\nDESCRIPTION: A shell command using cURL that demonstrates a simple CORS request with a specific origin header. The response includes CORS headers showing whether the origin is permitted and what headers are exposed.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cors/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -H \"Origin: http://httpbin2.example.org:9090\" -H \"Host: httpbin.example.com\" http://127.0.0.1/anything/get\\?foo\\=1\n< HTTP/1.1 200 OK\n> x-cors-version: 1.0.0\n> access-control-allow-origin: http://httpbin2.example.org:9090\n> access-control-expose-headers: X-Custom-Header,X-Env-UTM\n> access-control-allow-credentials: true\n```\n\n----------------------------------------\n\nTITLE: History Retrieval Response\nDESCRIPTION: Response showing the format of retrieved historical chat messages including user questions and AI responses.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-history/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"role\": \"user\",\n    \"content\": \"Can Higress replace Nginx?\"\n  },\n  {\n    \"role\": \"assistant\",\n    \"content\": \"While both Higress and Nginx have gateway functionalities, their design philosophies and application scenarios differ. Nginx is better known as a high-performance HTTP and reverse proxy server, while Higress is a cloud-native gateway that integrates many cloud-native features such as service mesh, observability, and security management in addition to basic routing capabilities.\\\\n\\\\nTherefore, if you want to deploy applications in a cloud-native environment and wish to obtain advanced features required for modern applications, such as service governance, gray release, circuit breaker and rate limiting, and security authentication, then Higress can be a good alternative to Nginx. However, if it's a relatively simple static website or only requires basic reverse proxy functionality, traditional Nginx configurations may be simpler and more direct.\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"What about Spring Cloud GateWay?\"\n  },\n  {\n    \"role\": \"assistant\",\n    \"content\": \"Compared to Spring Cloud Gateway, Higress is also an API gateway, but there are some key differences between them:\\\\n\\\\n- **Design Philosophy**: Spring Cloud Gateway mainly targets service-to-service communication and routing in microservice architectures. As part of the Spring Cloud ecosystem, it is more focused on scenarios for Java developers in microservices. In contrast, Higress, as a cloud-native gateway, not only focuses on service communication but also offers a range of cloud-native features such as service mesh, observability, security management, etc.\\\\n- **Deployment Method**: Spring Cloud Gateway typically runs as part of microservice applications on application servers, whereas Higress usually deploys as an independent microservice or containerized service in Kubernetes environments, suitable for modern cloud-native deployment models.\\\\n- **Scalability and Integration**: Higress provides wider integration and support, for example, deep integration with ecosystems like Istio, Kubernetes, etc., making it better suited for complex cloud-native environments.\\\\n\\\\nTherefore, if your application is built on Spring Cloud and you want a lightweight, easy-to-integrate service gateway, then Spring Cloud Gateway might be a suitable choice. However, if you are building or refactoring cloud-native applications and require more powerful routing rules, service governance, observability, etc., then Higress is likely a better choice.\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"Can Higress replace Nginx?\"\n  },\n  {\n    \"role\": \"assistant\",\n    \"content\": \"While both Higress and Nginx have gateway functionalities, their design philosophies and application scenarios differ. Nginx is better known as a high-performance HTTP and reverse proxy server, while Higress is a cloud-native gateway that integrates many cloud-native features such as service mesh, observability, and security management in addition to basic routing capabilities.\\\\n\\\\nTherefore, if you want to deploy applications in a cloud-native environment and wish to obtain advanced features required for modern applications, such as service governance, gray release, circuit breaker and rate limiting, and security authentication, then Higress can be a good alternative to Nginx. However, if it's a relatively simple static website or only requires basic reverse proxy functionality, traditional Nginx configurations may be simpler and more direct.\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Hostname-Level Authorization Configuration in YAML for Higress Key-Auth Plugin\nDESCRIPTION: This YAML configuration specifies that only 'consumer2' is authorized to access hostnames *.example.com and test.com. It works in conjunction with the global authentication configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname-Level Authorization in Higress Key-Auth Plugin\nDESCRIPTION: Hostname-level authorization configuration that specifies consumer2 as the only allowed consumer for domains matching *.example.com and test.com. This works in conjunction with the instance-level authentication configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Configuring MiniMax AI Service with YAML\nDESCRIPTION: YAML configuration for setting up the MiniMax AI service with API tokens, model mapping, and group ID.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: minimax\n  apiTokens:\n    - \"YOUR_MINIMAX_API_TOKEN\"\n  modelMapping:\n    \"gpt-3\": \"abab6.5g-chat\"\n    \"gpt-4\": \"abab6.5-chat\"\n    \"*\": \"abab6.5g-chat\"\n  minimaxGroupId: \"YOUR_MINIMAX_GROUP_ID\"\n```\n\n----------------------------------------\n\nTITLE: Processing Text Embedding Response from 360 Brain AI\nDESCRIPTION: JSON response format received from the 360 Brain AI service after a text embedding request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"embedding\": [\n        -0.011237,\n        -0.015433,\n        ...,\n        -0.028946,\n        -0.052778,\n        0.003768,\n        -0.007917,\n        -0.042201\n      ],\n      \"index\": 0,\n      \"object\": \"\"\n    }\n  ],\n  \"model\": \"embedding_s1_v1.2\",\n  \"object\": \"\",\n  \"usage\": {\n    \"prompt_tokens\": 2,\n    \"total_tokens\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hostname-Level Authorization Configuration in YAML for Higress Key-Auth Plugin\nDESCRIPTION: This YAML configuration specifies that only 'consumer2' is authorized to access hostnames *.example.com and test.com. It works in conjunction with the global authentication configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Gemini Service Chat Response Format\nDESCRIPTION: JSON response example from Gemini service in OpenAI format. It includes the Gemini model's self-description and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"chatcmpl-b010867c-0d3f-40ba-95fd-4e8030551aeb\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"I am a large multi-modal model, trained by Google. I am designed to provide information and answer questions to the best of my abilities.\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"created\": 1722756984,\n  \"model\": \"gemini-pro\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"prompt_tokens\": 5,\n    \"completion_tokens\": 29,\n    \"total_tokens\": 34\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed LLM Request JSON Example\nDESCRIPTION: Example of the transformed LLM API request after model mapping, showing the model name changed to qwen-vl-plus.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/model_mapper/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": \"qwen-vl-plus\",\n    \"frequency_penalty\": 0,\n    \"max_tokens\": 800,\n    \"stream\": false,\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the GitHub address of the main repository for the higress project?\"\n    }],\n    \"presence_penalty\": 0,\n    \"temperature\": 0.7,\n    \"top_p\": 0.95\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Authentication and Route Authorization in YAML\nDESCRIPTION: YAML configuration example for setting up global HMAC authentication with multiple consumers, demonstrating how to define authentication credentials at the instance level.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: false\nconsumers:\n- key: appKey-example-1\n  secret: appSecret-example-1\n  name: consumer-1\n- key: appKey-example-2\n  secret: appSecret-example-2\n  name: consumer-2\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow DAG Edges in YAML\nDESCRIPTION: Example YAML configuration for defining the edges of a DAG workflow, showing how to connect nodes with conditional logic.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/api-workflow/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  edges:\n    - source: start\n      target: A\n    - source: start\n      target: B\n    - source: start\n      target: C\n    - source: A\n      target: D\n    - source: B\n      target: D\n    - source: C\n      target: D\n    - source: D\n      target: end\n      conditional: \"gt {{D||check}} 0.9\"\n    - source: D\n      target: E\n      conditional: \"lt {{D||check}} 0.9\"\n    - source: E\n      target: end\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response for 404 Status Code in Higress\nDESCRIPTION: Example of the HTTP response that will be returned when the original status is 404, showing the custom headers and body defined in the configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nkey1: value1\nkey2: value2\nContent-Length: 21\n\n{\"hello\":\"world 400\"}\n```\n\n----------------------------------------\n\nTITLE: Qwen Text Context Response\nDESCRIPTION: Example JSON response from Qwen service with text context. Contains the assistant's summary of the content and token usage statistics showing a high prompt token count due to the context.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"cmpl-77861a17681f4987ab8270dbf8001936\",\n  \"object\": \"chat.completion\",\n  \"created\": 9756990,\n  \"model\": \"moonshot-v1-128k\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"The content of this document is about...\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 20181,\n    \"completion_tokens\": 439,\n    \"total_tokens\": 20620\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Redis for Higress AI Token Rate Limiting\nDESCRIPTION: This YAML configuration sets up a Redis deployment and service in Kubernetes. Redis is required for tracking available tokens in the AI Token Rate Limiting Plugin.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis\n        ports:\n        - containerPort: 6379\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\n  labels:\n    app: redis\nspec:\n  ports:\n  - port: 6379\n    targetPort: 6379\n  selector:\n    app: redis\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Basic Auth Authentication in Higress\nDESCRIPTION: Instance-level YAML configuration for setting up global Basic Auth authentication with multiple consumers. This configuration defines credential pairs (username:password) for different consumers that will be used for authentication across the system.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconsumers:\n- credential: 'admin:123456'\n  name: consumer1\n- credential: 'guest:abc'\n  name: consumer2\nglobal_auth: false\n```\n\n----------------------------------------\n\nTITLE: Example LLM Request with Provider/Model Parameter\nDESCRIPTION: Sample JSON request body showing the structure of an LLM API call with combined provider/model parameter that will be processed by the plugin.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/model_router/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": \"dashscope/qwen-long\",\n    \"frequency_penalty\": 0,\n    \"max_tokens\": 800,\n    \"stream\": false,\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the GitHub address of the Higress project's main repository?\"\n    }],\n    \"presence_penalty\": 0,\n    \"temperature\": 0.7,\n    \"top_p\": 0.95\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Basic Auth in a cURL Request\nDESCRIPTION: Examples of how to make authenticated requests using cURL. Shows both the user:password format with the -u parameter and the base64 encoded Authorization header approach.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Assuming the following request matches the route-a route\n# Using curl's -u parameter to specify\ncurl -u admin:123456  http://xxx.hello.com/test\n# Or directly specify the Authorization request header with the username and password encoded in base64\ncurl -H 'Authorization: Basic YWRtaW46MTIzNDU2'  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Configuring 360 Brain AI Service with YAML\nDESCRIPTION: YAML configuration for setting up the 360 Brain AI service with API tokens and model mapping.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: ai360\n  apiTokens:\n    - \"YOUR_AI360_API_TOKEN\"\n  modelMapping:\n    \"gpt-4o\": \"360gpt-turbo-responsibility-8k\"\n    \"gpt-4\": \"360gpt2-pro\"\n    \"gpt-3.5\": \"360gpt-turbo\"\n    \"text-embedding-3-small\": \"embedding_s1_v1.2\"\n    \"*\": \"360gpt-pro\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Sample HTTP Response for 404 Status Code in Higress\nDESCRIPTION: Another example of the HTTP response that will be returned when the original status is 404, showing the custom headers and body defined in the configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nkey1: value1\nkey2: value2\nContent-Length: 21\n\n{\"hello\":\"world 404\"}\n```\n\n----------------------------------------\n\nTITLE: GitHub Model Service Embedding Request Format\nDESCRIPTION: JSON request example for text embedding using GitHub's model service. It specifies input phrases to be converted into vector embeddings.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": [\"first phrase\", \"second phrase\", \"third phrase\"],\n  \"model\": \"text-embedding-3-large\"\n}\n```\n\n----------------------------------------\n\nTITLE: Token Refresh Request\nDESCRIPTION: Request to refresh expired access token using refresh token.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README_EN.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \\\n  --url \"https://dev-o43xb1mz7ya7ach4.us.auth0.com/oauth/token\" \\\n  --data \"grant_type=refresh_token\" \\\n  --data \"client_id=YagFqRD9tfNIaac5BamjhsSatjrAnsnZ\" \\\n  --data \"client_secret=ekqv5XoZuMFtYms1NszEqRx03qct6BPvGeJUeptNG4y09PrY16BKT9IWezTrrhJJ\" \\\n  --data \"refresh_token=GrZ1f2JvzjAZQzSXmyr1ScWbv8aMFBvzAXHBUSiILcDEG\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Geolocation Plugin in YAML for Higress\nDESCRIPTION: This YAML configuration example sets up the geo-ip plugin to use IPv4, retrieve IP from a header, and specify a custom header name.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/geo-ip/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nip_protocol: ipv4\nip_source_type: header\nip_header_name: X-Real-Ip\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Protocol Proxy for Together-AI\nDESCRIPTION: YAML configuration for setting up the OpenAI protocol proxy to work with Together-AI services. Includes API token setup and model mapping to Meta-Llama-3.1-8B-Instruct-Turbo.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: together-ai\n  apiTokens:\n    - \"YOUR_TOGETHER_AI_API_TOKEN\"\n  modelMapping:\n    \"*\": \"meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Blacklist Mode for ext-auth Plugin in YAML\nDESCRIPTION: This snippet shows how to set up the blacklist mode for the ext-auth plugin. It includes examples of matching rules for specific domains, paths, and HTTP methods that require validation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmatch_type: 'blacklist'\nmatch_list:\n  - match_rule_domain: 'admin.example.com'\n    match_rule_path: '/sensitive'\n    match_rule_type: 'prefix'\n  - match_rule_method: [\"DELETE\"]\n    match_rule_path: '/user'\n    match_rule_type: 'exact'\n  - match_rule_domain: 'legacy.example.com'\n    match_rule_method: [\"POST\"]\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response from Mock Configuration in Higress\nDESCRIPTION: The resulting HTTP response that will be returned when using the mock response configuration. It shows the status code, headers, and body content that clients will receive.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/custom_response/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nHello: World\nContent-Length: 17\n{\"hello\":\"world\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect on Rate Limiting in Higress YAML\nDESCRIPTION: Example YAML configuration that triggers a 302 redirect when the gateway returns a 429 (Too Many Requests) status code, allowing rate-limited users to be redirected to another page.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nenable_on_status:\n- 429\nstatus_code: 302\nheaders:\n- Location=https://example.com\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Chat Completion Request Example\nDESCRIPTION: Sample JSON request for Azure OpenAI chat completion API. Demonstrates sending a basic chat message to the AI model with temperature control.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-3\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"你好，你是谁？\"\n    }\n  ],\n  \"temperature\": 0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting Based on API Key Parameter\nDESCRIPTION: Example configuration showing how to implement rate limiting based on the 'apikey' request parameter. Defines different rate limits for two distinct API keys with per-second and per-minute quotas.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_rate_limit/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlimit_by_param: apikey\nlimit_keys:\n- key: 9a342114-ba8a-11ec-b1bf-00163e1250b5\n  query_per_second: 10\n- key: a6a6d7f2-ba8a-11ec-bec2-00163e1250b5\n  query_per_minute: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Format in YAML\nDESCRIPTION: Example of modifying log_format to include AI statistics in gateway access logs.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-statistics/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n'{\"ai_log\":\"%FILTER_STATE(wasm.ai_log:PLAIN)%\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Rate Limiting Response in Higress\nDESCRIPTION: YAML configuration for customizing the response when rate limiting (429 status code) is triggered. This example redirects users to another website using a 302 redirect when they exceed rate limits.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/custom_response/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenable_on_status:\n- 429\nstatus_code: 302\nheaders:\n- Location=https://example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring ext-auth Plugin with Envoy Endpoint Mode in YAML\nDESCRIPTION: This example shows how to configure the ext-auth plugin using the 'envoy' endpoint mode. It specifies the external authorization service details including service name, port, and path prefix.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_service:\n  endpoint_mode: envoy\n  endpoint:\n    service_name: ext-auth.backend.svc.cluster.local\n    service_port: 8090\n    path_prefix: /auth\n  timeout: 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Blocking in YAML for Higress Request-Block Plugin\nDESCRIPTION: This YAML configuration sets up header blocking for the Higress request-block plugin. It blocks requests containing headers with 'example-key' or 'example-value'.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/request_block/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nblock_headers:\n- example-key\n- example-value\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response for Rate Limiting Redirect in Higress\nDESCRIPTION: Example of the HTTP response that will be returned when rate limiting is triggered (status code 429), showing the 302 redirect with Location header to the specified URL.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 302 Found\nLocation: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Chat Completion Response Example\nDESCRIPTION: Sample JSON response from Azure OpenAI chat completion API. Shows the structure of the response including content filtering results, message content, and token usage information.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"choices\": [\n    {\n      \"content_filter_results\": {\n        \"hate\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"self_harm\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"sexual\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"violence\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        }\n      },\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"你好！我是一个AI助手，可以回答你的问题和提供帮助。有什么我可以帮到你的吗？\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1714807624,\n  \"id\": \"chatcmpl-abcdefg1234567890\",\n  \"model\": \"gpt-35-turbo-16k\",\n  \"object\": \"chat.completion\",\n  \"prompt_filter_results\": [\n    {\n      \"prompt_index\": 0,\n      \"content_filter_results\": {\n        \"hate\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"self_harm\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"sexual\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"violence\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        }\n      }\n    }\n  ],\n  \"system_fingerprint\": null,\n  \"usage\": {\n    \"completion_tokens\": 40,\n    \"prompt_tokens\": 15,\n    \"total_tokens\": 55\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Request with Nonce Using cURL\nDESCRIPTION: A bash script demonstrating how to generate a nonce and send a request with the nonce header using cURL. This example shows the proper usage of the replay protection feature.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/replay-protection/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Generate nonce\nnonce=$(openssl rand -base64 32)\n\n# Send request\ncurl -X POST 'https://api.example.com/path' \\\n  -H \"X-Higress-Nonce: $nonce\" \\\n  -d '{\"key\": \"value\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Based Authorization in Higress\nDESCRIPTION: YAML configuration for restricting access to specific routes based on consumer identity. This configuration allows only consumer1 to access the specified routes after authentication.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer1\n```\n\n----------------------------------------\n\nTITLE: All-in-One MCP Server Integration in Go\nDESCRIPTION: Main entry point for an all-in-one MCP server plugin that combines multiple MCP servers into a single WASM binary, reducing deployment overhead while maintaining separate server identities and configurations.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// all-in-one/main.go\npackage main\n\nimport (\n    amap \"amap-tools/tools\"\n    quark \"quark-search/tools\"\n    \n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp\"\n)\n\nfunc main() {}\n\nfunc init() {\n    mcp.LoadMCPServer(mcp.AddMCPServer(\"quark-search\",\n        quark.LoadTools(&mcp.MCPServer{})))\n    mcp.LoadMCPServer(mcp.AddMCPServer(\"amap-tools\",\n        amap.LoadTools(&mcp.MCPServer{})))\n    mcp.InitMCPServer()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Whitelist Mode for Ext-Auth Plugin in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the whitelist mode for the ext-auth plugin. It specifies rules for requests that do not need verification based on domain, path, and HTTP method.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmatch_type: 'whitelist'\nmatch_list:\n  - match_rule_domain: 'api.example.com'\n    match_rule_path: '/public'\n    match_rule_type: 'prefix'\n  - match_rule_domain: 'images.example.com'\n    match_rule_method: [\"GET\"]\n  - match_rule_method: [\"HEAD\"]\n    match_rule_path: '/health-check'\n    match_rule_type: 'exact'\n```\n\n----------------------------------------\n\nTITLE: Route-Level Authorization Configuration in YAML\nDESCRIPTION: YAML configuration showing how to set up route-specific authorization by allowing a specific consumer. This is applied to routes 'route-a' and 'route-b' to control access at the route level.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer1\n```\n\n----------------------------------------\n\nTITLE: Configuring IP-based Rate Limiting Using x-forwarded-for Header in YAML\nDESCRIPTION: This configuration sets up rate limiting based on client IP addresses extracted from the x-forwarded-for header. It includes rules for specific IPs, IP ranges, and a fallback for all other IPs.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cluster-key-rate-limit/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrule_name: default_rule\nrule_items:\n- limit_by_per_ip: from-header-x-forwarded-for\n  limit_keys:\n  # Exact IP\n  - key: 1.1.1.1\n    query_per_day: 10\n  # IP segment, for IPs matching this segment, each IP corresponds to 100qpd.\n  - key: 1.1.1.0/24\n    query_per_day: 100\n  # As a fallback, defaults to 1000 qpd for each IP.\n  - key: 0.0.0.0/0\n    query_per_day: 1000\nredis:\n  service_name: redis.static\nshow_limit_quota_header: true\n```\n\n----------------------------------------\n\nTITLE: Dify Service Chat Request Format\nDESCRIPTION: JSON request example for Dify service using the OpenAI chat completion format. It includes a simple user message in Chinese with streaming disabled.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-4-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"你好，你是谁？\"\n    }\n  ],\n  \"stream\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing All Cross-Origin Access With Credentials in YAML\nDESCRIPTION: YAML configuration that permits access from all origins with credentials allowed. It uses patterns instead of specific origins since allow_credentials is true, allowing all methods, headers, and exposed headers with a cache duration of 7200 seconds.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cors/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow_origin_patterns:\n  - '*'\nallow_methods:\n  - '*'\nallow_headers:\n  - '*'\nexpose_headers:\n  - '*'\nallow_credentials: true\nmax_age: 7200\n```\n\n----------------------------------------\n\nTITLE: Response for Coffee Shop Query near Xinshi Building\nDESCRIPTION: This JSON response contains the assistant's recommendations for coffee shops near the Xinshi Building in Jinan, including their names and locations.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"139487e7-96a0-9b13-91b4-290fb79ac992\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \" Near the Xinshi Building in Jinan, you can choose from the following coffee shops:\\n1. luckin coffee 瑞幸咖啡(鑫盛大厦店), located in the lobby of Xinshi Building, No. 1299 Xinluo Avenue;\\n2. 三庆齐盛广场挪瓦咖啡(三庆·齐盛广场店), located 60 meters southwest of the intersection of Xinluo Avenue and Yingxiu Road;\\n3. luckin coffee 瑞幸咖啡(三庆·齐盛广场店), located at No. 1267 Yingxiu Road;\\n4. 库迪咖啡(齐鲁软件园店), located in the commercial space of Building 4, Sanqing Qisheng Plaza, Xinluo Avenue;\\n5. 库迪咖啡(美莲广场店), located at L117, Meilian Plaza, No. 1166 Xinluo Avenue, High-tech Zone; and a few other options. I hope these suggestions help!\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"created\": 1723172296,\n  \"model\": \"qwen-max-0403\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"prompt_tokens\": 886,\n    \"completion_tokens\": 50,\n    \"total_tokens\": 936\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Request with JWT Bearer Token\nDESCRIPTION: Example of making an HTTP request with a JWT bearer token in the Authorization header. The token provides authentication and identity information for the consumer.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://test.com' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6ImFwcGxpY2F0aW9uXC9hdCtqd3QifQ.eyJhdWQiOiJkZWZhdWx0IiwiY2xpZW50X2lkIjoiMTIzNDU2NzgteHh4eC14eHh4LXh4eHgteHh4eHh4eHh4eHh4IiwiZXhwIjoxNjg3OTUxNDYzLCJpYXQiOjE2ODc5NDQyNjMsImlzcyI6IkhpZ3Jlc3MtR2F0ZXdheSIsImp0aSI6IjEwOTU5ZDFiLThkNjEtNGRlYy1iZWE3LTk0ODEwMzc1YjYzYyIsInN1YiI6ImNvbnN1bWVyMSJ9.NkT_rG3DcV9543vBQgneVqoGfIhVeOuUBwLJJ4Wycb0'\n```\n\n----------------------------------------\n\nTITLE: Advanced Envoy Endpoint Mode Configuration with Header Management in YAML\nDESCRIPTION: Extended configuration for ext-auth plugin using envoy endpoint mode with header management. This includes allowing specific request/response headers and adding custom headers to authorization requests.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_service:\n  authorization_request:\n    allowed_headers:\n      - exact: x-auth-version\n    headers_to_add:\n      x-envoy-header: true\n  authorization_response:\n    allowed_upstream_headers:\n      - exact: x-user-id\n      - exact: x-auth-version\n  endpoint_mode: envoy\n  endpoint:\n    service_name: ext-auth.backend.svc.cluster.local\n    service_host: my-domain.local\n    service_port: 8090\n    path_prefix: /auth\n  timeout: 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Level Authorization in YAML\nDESCRIPTION: YAML configuration for route-level authorization that specifies which consumers are allowed to access specific routes.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer1\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting Based on x-ca-key Header in YAML\nDESCRIPTION: This snippet demonstrates how to set up rate limiting rules based on the x-ca-key header. It includes specific limits for certain keys and uses regular expressions for pattern matching.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cluster-key-rate-limit/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrule_name: default_rule\nrule_items:\n- limit_by_header: x-ca-key\n  limit_keys:\n  - key: 102234\n    query_per_minute: 10\n  - key: 308239\n    query_per_hour: 10\n- limit_by_per_header: x-ca-key\n  limit_keys:\n  # Regular expression, matches all strings starting with a, each apikey corresponds to 10qds.\n  - key: \"regexp:^a.*\"\n    query_per_second: 10\n  # Regular expression, matches all strings starting with b, each apikey corresponds to 100qd.\n  - key: \"regexp:^b.*\"\n    query_per_minute: 100\n  # As a fallback, matches all requests, each apikey corresponds to 1000qdh.\n  - key: \"*\"\n    query_per_hour: 1000\nredis:\n  service_name: redis.static\nshow_limit_quota_header: true\n```\n\n----------------------------------------\n\nTITLE: Testing Groq AI Proxy with curl in Kubernetes\nDESCRIPTION: This bash command demonstrates how to send a chat completion request to the Groq AI service through the configured proxy in Kubernetes. It uses the OpenAI-compatible API format.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://<YOUR-DOMAIN>/v1/chat/completions\" -H \"Content-Type: application/json\" -d '{\n  \"model\": \"llama3-8b-8192\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"你好，你是谁？\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: JSON Response After Transformation\nDESCRIPTION: Resulting JSON output after processing the XML response through the AI transformer plugin. This demonstrates how the plugin automatically converts XML to a well-structured JSON format while maintaining the content semantics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-transformer/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slideshow\": {\n    \"title\": \"Sample Slide Show\",\n    \"date\": \"Date of publication\",\n    \"author\": \"Yours Truly\",\n    \"slides\": [\n      {\n        \"type\": \"all\",\n        \"title\": \"Wake up to WonderWidgets!\"\n      },\n      {\n        \"type\": \"all\",\n        \"title\": \"Overview\",\n        \"items\": [\n          \"Why <em>WonderWidgets</em> are great\",\n          \"\",\n          \"Who <em>buys</em> WonderWidgets\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzzy Status Code Matching in Higress YAML\nDESCRIPTION: Example YAML configuration demonstrating fuzzy status code matching using patterns like '40x' to match any status code from 400-409, providing custom responses for ranges of status codes.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - body: '{\"hello\":\"world 200\"}'\n    enable_on_status:\n      - 200\n    headers:\n      - key1=value1\n      - key2=value2\n    status_code: 200\n  - body: '{\"hello\":\"world 40x\"}'\n    enable_on_status:\n      - '40x'\n    headers:\n      - key1=value1\n      - key2=value2\n    status_code: 200\n```\n\n----------------------------------------\n\nTITLE: Testing WAF Rule Enforcement with cURL Commands\nDESCRIPTION: These cURL commands demonstrate requests that would be blocked by the configured WAF rules. The first attempts to access a restricted admin path, and the second sends a request with a malicious payload in the request body.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/waf/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://example.com/admin\ncurl http://example.com -d \"maliciouspayload\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OIDC Authentication in Higress (YAML)\nDESCRIPTION: This YAML configuration sets up OIDC authentication using GitHub as the identity provider. It specifies the redirect URL, OIDC issuer URL, client credentials, scopes, and matching rules for the authentication flow. It also includes additional settings for access token validation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nredirect_url: 'http://foo.bar.com/oauth2/callback'\nprovider: github\noidc_issuer_url: 'https://github.com/'\npass_access_token: true\nclient_id: 'XXXXXXXXXXXXXXXX'\nclient_secret: 'XXXXXXXXXXXXXXXX'\nscope: 'user repo'\ncookie_secret: 'nqavJrGvRmQxWwGNptLdyUVKcBNZ2b18Guc1n_8DCfY='\nservice_name: 'github.dns'\nservice_port: 443\nvalidate_service_name: 'api.dns'\nvalidate_service_port: 443\nmatch_type: 'whitelist'\nmatch_list:\n    - match_rule_domain: '*.bar.com'\n      match_rule_path: '/headers'\n      match_rule_type: 'prefix'\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Level Authorization in YAML\nDESCRIPTION: YAML configuration for domain-level authorization that controls which consumers can access specific domains.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Configuring String Length Validation in YAML\nDESCRIPTION: This snippet shows how to configure string length validation in the request body using JSON Schema.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/request-validation/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbody_schema:\n  type: object\n  required:\n    - string_payload\n  properties:\n    string_payload:\n      type: string\n      minLength: 1\n      maxLength: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Proxy for Groq in Kubernetes\nDESCRIPTION: This YAML configuration sets up a WasmPlugin, Ingress, and McpBridge to proxy Groq AI services using the OpenAI protocol in a Kubernetes environment. It includes the necessary annotations and labels for Higress integration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: ai-proxy-groq\n  namespace: higress-system\nspec:\n  matchRules:\n    - config:\n        provider:\n          type: groq\n          apiTokens:\n            - \"YOUR_API_TOKEN\"\n      ingress:\n        - groq\n  url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/ai-proxy:1.0.0\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/backend-protocol: HTTPS\n    higress.io/destination: groq.dns\n    higress.io/proxy-ssl-name: api.groq.com\n    higress.io/proxy-ssl-server-name: \"on\"\n  labels:\n    higress.io/resource-definer: higress\n  name: groq\n  namespace: higress-system\nspec:\n  ingressClassName: higress\n  rules:\n    - host: <YOUR-DOMAIN>\n      http:\n        paths:\n          - backend:\n              resource:\n                apiGroup: networking.higress.io\n                kind: McpBridge\n                name: default\n            path: /\n            pathType: Prefix\n---\napiVersion: networking.higress.io/v1\nkind: McpBridge\nmetadata:\n  name: default\n  namespace: higress-system\nspec:\n  registries:\n    - domain: api.groq.com\n      name: groq\n      port: 443\n      type: dns\n```\n\n----------------------------------------\n\nTITLE: Adding Higress Wasm-Go SDK Dependency with Bash Command\nDESCRIPTION: Command to add the required Higress wasm-go SDK dependency to a Go module. This SDK is necessary for supporting Go 1.24's WebAssembly compilation features.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Add the required dependency\ngo get github.com/alibaba/higress/plugins/wasm-go\n```\n\n----------------------------------------\n\nTITLE: Obtaining OAuth2 Access Token Using Client Credentials in Bash\nDESCRIPTION: Bash commands demonstrating how to obtain an OAuth2 Access Token using the Client Credentials grant type, with both GET and POST methods.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# 通过 GET 方法获取（推荐）\n\ncurl 'http://test.com/oauth2/token?grant_type=client_credentials&client_id=12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx&client_secret=abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n\n# 通过 POST 方法获取（需要先匹配到有真实目标服务的路由，否则网关不会读取请求 Body）\n\ncurl 'http://test.com/oauth2/token' -H 'content-type: application/x-www-form-urlencoded' -d 'grant_type=client_credentials&client_id=12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx&client_secret=abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n\n# 获取响应中的 access_token 字段即可:\n{\n  \"token_type\": \"bearer\",\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6ImFwcGxpY2F0aW9uXC9hdCtqd3QifQ.eyJhdWQiOiJkZWZhdWx0IiwiY2xpZW50X2lkIjoiMTIzNDU2NzgteHh4eC14eHh4LXh4eHgteHh4eHh4eHh4eHh4IiwiZXhwIjoxNjg3OTUxNDYzLCJpYXQiOjE2ODc5NDQyNjMsImlzcyI6IkhpZ3Jlc3MtR2F0ZXdheSIsImp0aSI6IjEwOTU5ZDFiLThkNjEtNGRlYy1iZWE3LTk0ODEwMzc1YjYzYyIsInN1YiI6ImNvbnN1bWVyMSJ9.NkT_rG3DcV9543vBQgneVqoGfIhVeOuUBwLJJ4Wycb0\",\n  \"expires_in\": 7200\n}\n```\n\n----------------------------------------\n\nTITLE: Starting OPA Service with Docker\nDESCRIPTION: Shell command to start an OPA (Open Policy Agent) service using Docker. This runs the OPA container in detached mode, exposing port 8181.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/opa/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name opa -p 8181:8181 openpolicyagent/opa:0.35.0 run -s\n```\n\n----------------------------------------\n\nTITLE: Configuring Global OAuth2 Authentication with Route-specific Authorization in YAML\nDESCRIPTION: YAML configuration for global OAuth2 authentication at the instance level, with route-specific authorization settings for different consumers.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: false\nconsumers:\n- name: consumer1\n  client_id: 12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n- name: consumer2\n  client_id: 87654321-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: hgfedcba-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Configuring Boolean Validation in YAML\nDESCRIPTION: This snippet shows the configuration for boolean validation in the request body using JSON Schema.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/request-validation/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbody_schema:\n  type: object\n  required:\n    - boolean_payload\n  properties:\n    boolean_payload:\n      type: boolean\n      default: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Hunyuan AI Service with YAML\nDESCRIPTION: YAML configuration for setting up the Hunyuan AI service with authentication keys, tokens, and model mapping.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: \"hunyuan\"\n  hunyuanAuthKey: \"<YOUR AUTH KEY>\"\n  apiTokens:\n    - \"\"\n  hunyuanAuthId: \"<YOUR AUTH ID>\"\n  timeout: 1200000\n  modelMapping:\n    \"*\": \"hunyuan-lite\"\n```\n\n----------------------------------------\n\nTITLE: Higress Test Environment Setup - Makefile Targets\nDESCRIPTION: Comprehensive list of make targets for managing the test environment lifecycle including preparation, execution, and cleanup phases\nSOURCE: https://github.com/alibaba/higress/blob/main/test/README.md#2025-04-09_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake higress-conformance-test\nmake higress-conformance-test-prepare\nmake run-higress-e2e-test\nmake run-higress-e2e-test-setup\nmake run-higress-e2e-test-run\nmake run-higress-e2e-test-clean\nmake higress-conformance-test-clean\nmake higress-wasmplugin-test\nmake higress-wasmplugin-test-prepare\nmake run-higress-e2e-test-wasmplugin\nmake run-higress-e2e-test-wasmplugin-setup\nmake run-higress-e2e-test-wasmplugin-run\nmake run-higress-e2e-test-wasmplugin-clean\nmake higress-wasmplugin-test-clean\n```\n\n----------------------------------------\n\nTITLE: Testing SSE Timing Plugin with cURL\nDESCRIPTION: Command to send an HTTP request to the Envoy proxy running with the SSE Timing plugin. This allows for testing the plugin's functionality.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-rust/example/sse-timing/README.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ curl localhost:10000/\n```\n\n----------------------------------------\n\nTITLE: Testing AI Token Rate Limiting with curl Commands\nDESCRIPTION: Bash commands to test the AI token rate limiting functionality. The first curl command demonstrates a successful request to the Tongyi Qianwen AI service, while the second command shows the rate limiting in action with a \"Too many requests\" response when the token limit is exceeded.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:18000/v1/chat/completions?apikey=123456\" \\\n-H \"Host: qwen-test.com\" \\\n-H \"Content-Type: application/json\"  \\\n-d '{\n  \"model\": \"gpt-3\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"你好，你是谁？\"\n    }\n  ],\n  \"stream\": false\n}'\n{\"id\":\"88cfa80f-545d-93b4-8ff3-3f5245ca33ba\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"content\":\"我是通义千问，由阿里云开发的AI助手。我可以回答各种问题、提供信息和与用户进行对话。有什么我可以帮助你的吗？\"},\"finish_reason\":\"stop\"}],\"created\":1719909825,\"model\":\"qwen-turbo\",\"object\":\"chat.completion\",\"usage\":{\"prompt_tokens\":13,\"completion_tokens\":33,\"total_tokens\":46}}\ncurl \"http://qwen-test.com:18000/v1/chat/completions?apikey=123456\" -H \"Content-Type: application/json\"  -d '{\n  \"model\": \"gpt-3\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"你好，你是谁？\"\n    }\n  ],\n  \"stream\": false\n}'\nToo many requests  # 限流成功\n```\n\n----------------------------------------\n\nTITLE: Creating an OPA Policy with HTTP Method Restriction\nDESCRIPTION: Shell command to create an 'example1' policy in OPA that only allows GET HTTP methods. The policy is defined in Rego language and uploaded via the OPA API.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/opa/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT '127.0.0.1:8181/v1/policies/example1' \\\n  -H 'Content-Type: text/plain' \\\n  -d 'package example1\n\nimport input.request\n\ndefault allow = false\n\nallow {\n    # HTTP method must GET\n    request.method == \"GET\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared OAuth2 Credentials Across Routes in YAML\nDESCRIPTION: YAML configuration for enabling shared OAuth2 credentials across routes. It sets global_credentials to true and includes consumer settings.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_credentials: true\nconsumers:\n- name: consumer1\n  client_id: 12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache-Control for Image Files in Higress\nDESCRIPTION: This configuration example caches files with jpg, png, and jpeg extensions for one hour (3600 seconds). When these file types are requested, Expires and Cache-Control headers will be added to the response.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cache-control/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsuffix: jpg|png|jpeg\nexpires: 3600\n```\n\n----------------------------------------\n\nTITLE: Processing Chat Completion Response from 360 Brain AI\nDESCRIPTION: JSON response format received from the 360 Brain AI service after a chat completion request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"choices\": [\n    {\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"Hello, I am 360 Brain, a large language model. I can assist with answering various questions, providing information, engaging in conversations, and more. How can I assist you?\"\n      },\n      \"finish_reason\": \"\",\n      \"index\": 0\n    }\n  ],\n  \"created\": 1724257207,\n  \"id\": \"5e5c94a2-d989-40b5-9965-5b971db941fe\",\n  \"model\": \"360gpt-turbo\",\n  \"object\": \"\",\n  \"usage\": {\n    \"completion_tokens\": 33,\n    \"prompt_tokens\": 24,\n    \"total_tokens\": 57\n  },\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a professional developer!\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Hello, who are you?\"\n    }\n  ],\n  \"context\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Completion Request to Groq AI\nDESCRIPTION: JSON request format for sending a chat completion request to the Groq AI service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"llama3-8b-8192\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Hello, who are you?\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Global Tracer Configuration YAML\nDESCRIPTION: Default configuration for various tracing systems including Datadog, Lightstep, and Stackdriver with their respective settings and limitations.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nglobal.tracer:\n  datadog:\n    address: \"$(HOST_IP):8126\"\n  lightstep:\n    accessToken: \"\"\n    address: \"\"\n  stackdriver:\n    debug: false\n    maxNumberOfAnnotations: 200\n    maxNumberOfAttributes: 200\n    maxNumberOfMessageEvents: 200\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Signature in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to generate a JWT signature by combining the encoded header and payload, then signing with HMAC SHA256.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nvar encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);\nvar signature = HMACSHA256(encodedString, '$secret');\n```\n\n----------------------------------------\n\nTITLE: Querying an OPA Policy\nDESCRIPTION: Shell command to test an OPA policy by sending a POST request to the OPA data API. This example tests the 'example1' policy with a GET method in the input.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/opa/README.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST '127.0.0.1:8181/v1/data/example1/allow' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"input\":{\"request\":{\"method\":\"GET\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-specific OAuth2 Authorization in YAML\nDESCRIPTION: YAML configuration for domain-specific OAuth2 authorization, allowing only 'consumer2' to access specific domains.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Cache Duration for All Files in Higress\nDESCRIPTION: This configuration sets the maximum possible cache time (until December 31, 2037) for all file types by using the 'max' keyword without specifying any file extensions.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cache-control/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nexpires: max\n```\n\n----------------------------------------\n\nTITLE: Qwen Text Context Request\nDESCRIPTION: Example JSON request for Qwen service with text context. Asks the model to summarize the content provided in the context.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-3\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Please summarize the content\"\n    }\n  ],\n  \"temperature\": 0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Whitelist in Higress IP Restriction Plugin\nDESCRIPTION: This YAML configuration sets up an IP whitelist using the origin-source IP. It allows access from a specific IP address (10.0.0.1) and a CIDR range (192.168.0.0/16).\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ip-restriction/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nip_source_type: origin-source\nallow:\n  - 10.0.0.1\n  - 192.168.0.0/16\n```\n\n----------------------------------------\n\nTITLE: Testing an Illegal CORS Origin with cURL\nDESCRIPTION: A shell command using cURL that tests an invalid CORS origin. The request uses an origin not permitted by the configuration, resulting in a 403 Forbidden response with an error message.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cors/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -X OPTIONS -H \"Origin: http://httpbin2.example.org\" -H \"Host: httpbin.example.com\" -H \"Access-Control-Request-Method: GET\" http://127.0.0.1/anything/get\\?foo\\=1\n HTTP/1.1 403 Forbidden\n< content-length: 70\n< content-type: text/plain\n< x-cors-version: 1.0.0\n< date: Tue, 23 May 2023 11:27:01 GMT\n< server: istio-envoy\n<\n* Connection #0 to host 127.0.0.1 left intact\nInvalid CORS request\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Signature in JavaScript\nDESCRIPTION: Illustrates the process of creating a JWT signature by combining the encoded header and payload, then signing with a secret key.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);\nvar signature = HMACSHA256(encodedString, '$secret');\n```\n\n----------------------------------------\n\nTITLE: Allow Go HTTP Client Configuration in Higress\nDESCRIPTION: YAML configuration to whitelist Go HTTP client requests that would otherwise be blocked by default bot detection rules.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/bot-detect/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- \".*Go-http-client.*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global OAuth2 Authentication at Gateway Instance Level in YAML\nDESCRIPTION: YAML configuration for enabling OAuth2 authentication globally at the gateway instance level, requiring all requests to be authenticated.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: true\nconsumers:\n- name: consumer1\n  client_id: 12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n- name: consumer2\n  client_id: 87654321-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: hgfedcba-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Frontend Gray Release Rules in YAML\nDESCRIPTION: This snippet demonstrates a basic configuration for the frontend-gray plugin. It defines rules for inner and beta users, specifying gray key values and tag-based filtering.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/frontend-gray/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngrayKey: userid\nrules:\n- name: inner-user\n  grayKeyValue:\n  - '00000001'\n  - '00000005'\n- name: beta-user\n  grayKeyValue:\n  - '00000002'\n  - '00000003'\n  grayTagKey: level\n  grayTagValue:\n  - level3\n  - level5\nbaseDeployment:\n  version: base\ngrayDeployments:\n  - name: beta-user\n    version: gray\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Completion Request to Hunyuan AI via cURL\nDESCRIPTION: Shell script using cURL to send a chat completion request to the Hunyuan AI service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location 'http://<your higress domain>/v1/chat/completions' \\\n--header 'Content-Type:  application/json' \\\n--data '{\n  \"model\": \"gpt-3\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a professional developer!\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Hello, who are you?\"\n    }\n  ],\n  \"temperature\": 0.3,\n  \"stream\": false\n}'\n```\n\n----------------------------------------\n\nTITLE: Weather Query with JSON Formatting Request\nDESCRIPTION: This curl command demonstrates making a weather query request with JSON formatting enabled. The request is configured to return structured data in JSON format rather than plain text.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://<replace with gateway public IP>/api/openai/v1/chat/completions' \\\n-H 'Accept: application/json, text/event-stream' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"model\":\"qwen\",\"frequency_penalty\":0,\"max_tokens\":800,\"stream\":false,\"messages\":[{\"role\":\"user\",\"content\":\"What is the current weather in Beijing ?\"}],\"presence_penalty\":0,\"temperature\":0,\"top_p\":0}'\n```\n\n----------------------------------------\n\nTITLE: Non-OpenAI Protocol Log Example\nDESCRIPTION: Sample JSON log output from non-OpenAI protocol configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-statistics/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ai_log\": \"{\\\"model\\\":\\\"qwen-max\\\",\\\"input_token\\\":\\\"343\\\",\\\"output_token\\\":\\\"153\\\",\\\"llm_service_duration\\\":\\\"19110\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Payload in JavaScript\nDESCRIPTION: This JavaScript code shows an example of creating a JWT payload with a subject identifier and a custom 'name' field.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Bot Detection Rule in Higress\nDESCRIPTION: YAML configuration to add custom bot detection rules for blocking specific user agents.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/bot-detect/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndeny:\n- \"spd-tools.*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Header Routing in YAML\nDESCRIPTION: Configuration example showing how to set up the model-router plugin to add model information to a custom header.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/model_router/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodelToHeader: x-higress-llm-model\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Gray Release with JSON User Information in YAML\nDESCRIPTION: This configuration example shows how to set up the frontend-gray plugin when user information is contained within a JSON structure in the cookie. It uses graySubKey to specify the JSON field containing the user ID.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/frontend-gray/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngrayKey: appInfo\ngraySubKey: userId\nrules:\n- name: inner-user\n  grayKeyValue:\n  - '00000001'\n  - '00000005'\n- name: beta-user\n  grayKeyValue:\n  - '00000002'\n  - '00000003'\n  grayTagKey: level\n  grayTagValue:\n  - level3\n  - level5\nbaseDeployment:\n  version: base\ngrayDeployments:\n  - name: beta-user\n    version: gray\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Completion Request to ERNIE Bot AI\nDESCRIPTION: JSON request format for sending a chat completion request to the ERNIE Bot AI service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": \"gpt-4-turbo\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Hello, who are you?\"\n        }\n    ],\n    \"stream\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Level Authorization in Higress\nDESCRIPTION: YAML configuration for setting up authorization rules at the domain level, specifying which consumers are allowed to access specific domains.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Higress Envoy Proxy\nDESCRIPTION: A Docker Compose configuration that sets up an Envoy proxy container with Higress. It mounts the required configuration and Wasm plugin files, exposing port 10000 for API access.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.7'\nservices:\n  envoy:\n    image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/envoy:1.20\n    entrypoint: /usr/local/bin/envoy\n    # Enables debug level logging for easier debugging\n    command: -c /etc/envoy/envoy.yaml --component-log-level wasm:debug\n    networks:\n      - higress-net\n    ports:\n      - \"10000:10000\"\n    volumes:\n      - ./envoy.yaml:/etc/envoy/envoy.yaml\n      - ./plugin.wasm:/etc/envoy/plugin.wasm\nnetworks:\n  higress-net: {}\n```\n\n----------------------------------------\n\nTITLE: Example Bot Detection Test Commands\nDESCRIPTION: Curl commands demonstrating how the custom bot detection rules block specific user agents.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/bot-detect/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://example.com -H 'User-Agent: spd-tools/1.1'\ncurl http://exmaple.com -H 'User-Agent: spd-tools'\n```\n\n----------------------------------------\n\nTITLE: Original LLM Request JSON Example\nDESCRIPTION: Example of an original LLM API request before model mapping transformation, showing a request to GPT-4o model.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/model_mapper/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": \"gpt-4o\",\n    \"frequency_penalty\": 0,\n    \"max_tokens\": 800,\n    \"stream\": false,\n    \"messages\": [{\n        \"role\": \"user\",\n        \"content\": \"What is the GitHub address of the main repository for the higress project?\"\n    }],\n    \"presence_penalty\": 0,\n    \"temperature\": 0.7,\n    \"top_p\": 0.95\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content-based Traffic Tagging in Higress\nDESCRIPTION: This example demonstrates content-based traffic tagging by adding an 'x-mse-tag: gray' header to requests where the header 'role' matches specific values and the query parameter 'foo' equals 'bar'. It also adds a default tag for unmatched requests.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/traffic-tag/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultTagKey: x-mse-tag\ndefaultTagVal: base\nconditionGroups:\n  - headerName: x-mse-tag\n    headerValue: gray\n    logic: and\n    conditions:\n      - conditionType: header\n        key: role\n        operator: in\n        value:\n          - user\n          - viewer\n          - editor\n      - conditionType: parameter\n        key: foo\n        operator: equal\n        value:\n          - bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Gemini Service with OpenAI Protocol\nDESCRIPTION: YAML configuration for setting up a Gemini service proxy with OpenAI protocol. This configuration maps all models to gemini-pro and includes safety settings to allow all content types.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: gemini\n  apiTokens:\n    - \"YOUR_GEMINI_API_TOKEN\"\n  modelMapping:\n    \"*\": \"gemini-pro\"\n  geminiSafetySetting:\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\" :\"BLOCK_NONE\"\n    \"HARM_CATEGORY_HATE_SPEECH\" :\"BLOCK_NONE\"\n    \"HARM_CATEGORY_HARASSMENT\" :\"BLOCK_NONE\"\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\" :\"BLOCK_NONE\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Search Plugin in Higress for DeepSeek Web Search\nDESCRIPTION: YAML configuration for the AI Search plugin that enables web search capabilities. It includes settings for reference formatting, prompt templates, search engine configuration, and LLM integration parameters.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/guide.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nneedReference: true # 为 true 时会在结果中附带网页引用信息\npromptTemplate: | # 可以不用配置模版，使用内置的也可以\n  # The following content is based on search results from the user-submitted query:\n  {search_results}\n  In the search results I provide, each result is formatted as [webpage X begin]...[webpage X end], where X represents the index number of each article. Please cite the context at the end of the sentences where appropriate. Use a format of citation numbe] in the answer for corresponding parts. If a sentence is derived from multiple contexts, list all relevant citation numbers, such as [3][5], and ensure not to cluster the citations at the end; instead, list them in the corresponding parts of the answer.\n  When responding, please pay attention to the following:\n  - Today's date in Beijing time is: {cur_date}.\n  - Not all content from the search results is closely related to the user's question. You need to discern and filter the search results based on the question.\n  - For listing-type questions (e.g., listing all flight information), try to keep the answer to within 10 points and inform the user that they can check the search source for complete information. Prioritize providing the most comprehensive and relevantms; do not volunteer information missing from the search results unless necessary.\n  - For creative questions (e.g., writing a paper), be sure to cite relevant references in the body paragraphs, such as [3][5], rather than only at the end of the article. You need to interpret and summarize the user's topic requirements, choose the apprate format, fully utilize search results, extract crucial information, and generate answers that meet user requirements, with deep thought, creativity, and professionalism. The length of your creation should be extended as much as possible, hypothesize tser's intent for each point, providing as many angles as possible, ensuring substantial information, and detailed discussion.\n  - If the response is lengthy, try to structure the summary into paragraphs. If responding with points, try to keep it within 5 points and consolidate related content.\n  - For objective Q&A, if the answer is very short, you can appropriately add one or two related sentences to enrich the content.\n  - You need to choose a suitable and aesthetically pleasing response format based on the user's requirements and answer content to ensure high readability.\n  - Your answers should synthesize multiple relevant web pages to respond and should not repeatedly quote a single web page.\n  - Unless the user requests otherwise, respond in the same language the question was asked.\n   # The user's message is:\n  {question}\nsearchFrom: # 下面是配置一个搜索引擎选择列表，可以仅配置你需要的引擎，不用都配上\n- type: quark\n  apiKey: \"your-quark-api-key\" # 👈 需要修改成你的key\n  serviceName: \"quark.dns\"\n  servicePort: 443\n- type: google\n  apiKey: \"your-google-api-key\" # 👈 需要修改成你的key\n  cx: \"your-search-engine-id\" # 👈 需要修改成你的engine id\n  serviceName: \"google.dns\"\n  servicePort: 443\n- type: bing\n  apiKey: \"bing-key\" # 👈 需要修改成你的key\n  serviceName: \"bing.dns\"\n  servicePort: 443\n- type: arxiv\n  serviceName: \"arxiv.dns\"\n  servicePort: 443\nsearchRewrite:\n  llmApiKey: \"your-deepseek-api-key\" # 👈 需要修改成你的key\n  llmModelName: \"deepseek-chat\"\n  llmServiceName: \"llm-deepseek.internal.dns\"\n  llmServicePort: 443\n  llmUrl: \"https://api.deepseek.com/chat/completions\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 401 Error for Missing API Key in Higress Key-Auth\nDESCRIPTION: Example of a cURL request without an API key, which will return a 401 error as the authentication fails due to the missing credential.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Making Authorized Basic Auth Requests Using cURL\nDESCRIPTION: Examples of making HTTP requests with Basic Authentication credentials that will be allowed. Shows two methods: using the -u flag and explicitly setting the Authorization header.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# 假设以下请求将会匹配到route-a路由\n# 使用 curl 的 -u 参数指定\ncurl -u admin:123456  http://xxx.hello.com/test\n# 或者直接指定 Authorization 请求头，用户名密码使用 base64 编码\ncurl -H 'Authorization: Basic YWRtaW46MTIzNDU2'  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication via HTTP Header in cURL\nDESCRIPTION: Example cURL command showing how to pass JWT via the Authorization header with Bearer prefix. This demonstrates standard header-based JWT authentication for a route.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjEyMyJ9.eyJpc3MiOiJhYmNkIiwic3ViIjoidGVzdCIsImlhdCI6MTY2NTY2MDUyNywiZXhwIjoxODY1NjczODE5fQ.-vBSV0bKeDwQcuS6eeSZN9dLTUnSnZVk8eVCXdooCQ4'\n```\n\n----------------------------------------\n\nTITLE: Allowing Requests That Hit Crawler Rules in YAML\nDESCRIPTION: YAML configuration example for the bot-detect plugin to allow requests from the Golang network library, which would otherwise be treated as crawlers and blocked by default rules.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/bot-detect/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- \".*Go-http-client.*\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Go HTTP Client Through Higress Bot Detection\nDESCRIPTION: YAML configuration example for allowing Go HTTP client requests that would otherwise be identified as crawlers by the default detection rules. This is useful for legitimate automated clients built with Go's standard HTTP library.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/bot_detect/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- \".*Go-http-client.*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Authentication with Consumer Definitions in Higress\nDESCRIPTION: This YAML snippet configures Basic Auth authentication at the instance level, defining two consumers with different credentials and setting global_auth to false to enable selective authentication on specific routes or domains.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconsumers:\n- credential: 'admin:123456'\n  name: consumer1\n- credential: 'guest:abc'\n  name: consumer2\nglobal_auth: false\n```\n\n----------------------------------------\n\nTITLE: Gemini Service Chat Request Format\nDESCRIPTION: JSON request example for Gemini service using the OpenAI chat completion format. It includes a simple user message with streaming disabled.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-3.5\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Who are you?\"\n    }\n  ],\n  \"stream\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair in Java\nDESCRIPTION: Demonstrates how to generate an RSA key pair for JWT using the jose4j library in Java.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nRsaJsonWebKey rsaJsonWebKey = RsaJwkGenerator.generateJwk(2048);\nfinal String publicKeyString = rsaJsonWebKey.toJson(JsonWebKey.OutputControlLevel.PUBLIC_ONLY);\nfinal String privateKeyString = rsaJsonWebKey.toJson(JsonWebKey.OutputControlLevel.INCLUDE_PRIVATE);\n```\n\n----------------------------------------\n\nTITLE: Building Higress WASM-Go Plugin with Makefile\nDESCRIPTION: Command for building a WASM plugin using the Higress wasm-go builder with the ability to set EXTRA_TAGS in .buildrc file. This builds both a WASM file and Docker image.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NOTE: if you want to set EXTRA_TAGS for the wasm plugin\n# please set them in the .buildrc file under extensions/${PLUGIN_NAME} directory\n$ PLUGIN_NAME=request-block make build\n```\n\n----------------------------------------\n\nTITLE: Making Requests to Gateway with External Auth Enabled in Shell\nDESCRIPTION: Example of making a POST request to the gateway after enabling the ext-auth plugin. The command includes headers and query parameters that will be forwarded to the authorization service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:8082/users?apikey=9a342114-ba8a-11ec-b1bf-00163e1250b5 -X GET -H \"foo: bar\" -H \"Authorization: xxx\"\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Nodes with HTTP Service Configuration\nDESCRIPTION: Example YAML configuration for defining a node in a workflow DAG, showing how to configure the HTTP service call with dynamic body replacement.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/api-workflow/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  nodes:\n    - name: \"A\"\n      service_domain: \"dashscope.aliyuncs.com\"\n      service_name: \"dashscope\"\n      service_port: 443\n      service_path: \"/api/v1/services/embeddings/text-embedding/text-embedding\"\n      service_method: \"POST\"\n      service_body_tmpl:\n        model: \"text-embedding-v2\"\n        input:\n          texts: \"\"\n        parameters:\n          text_type: \"query\"\n      service_body_replace_keys:\n        - from: \"start||messages.#(role==user)#.content\"\n          to: \"input.texts\"\n      service_headers:\n        - key: \"Authorization\"\n          value: \"Bearer sk-b98f462xxxxxxxx\"\n        - key: \"Content-Type\"\n          value:  \"application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwen AI Service in Higress AI JSON Formatting Plugin\nDESCRIPTION: YAML configuration example for setting up the Qwen AI service with a custom JSON schema in the AI JSON Formatting plugin.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-json-resp/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nserviceName: qwen\nserviceDomain: dashscope.aliyuncs.com\napiKey: [Your API Key]\nservicePath: /compatible-mode/v1/chat/completions\njsonSchema:\n  title: ReasoningSchema\n  type: object\n  properties:\n    reasoning_steps:\n      type: array\n      items:\n        type: string\n      description: The reasoning steps leading to the final conclusion.\n    answer:\n      type: string\n      description: The final answer, taking into account the reasoning steps.\n  required:\n    - reasoning_steps\n    - answer\n  additionalProperties: false\n```\n\n----------------------------------------\n\nTITLE: Authenticated API Request Examples with Basic Auth\nDESCRIPTION: These bash examples demonstrate how to make authenticated requests using Basic Auth, either with the curl -u parameter or by manually setting the Authorization header with a base64-encoded username:password.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Assuming the following request matches the route-a route\n# Using curl's -u parameter to specify\ncurl -u admin:123456  http://xxx.hello.com/test\n# Or directly specify the Authorization request header with the username and password encoded in base64\ncurl -H 'Authorization: Basic YWRtaW46MTIzNDU2'  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Spark Service Response Example\nDESCRIPTION: JSON response example from the Spark service, showing a structured response with an ID, choices containing the assistant's message, usage statistics, and model information.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"cha000c23c6@dx190ef0b4b96b8f2532\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"Hello! I am a professional developer skilled in programming and problem-solving. What can I assist you with?\"\n            }\n        }\n    ],\n    \"created\": 1721997415,\n    \"model\": \"generalv3.5\",\n    \"object\": \"chat.completion\",\n    \"usage\": {\n        \"prompt_tokens\": 10,\n        \"completion_tokens\": 19,\n        \"total_tokens\": 29\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Together-AI Response Example\nDESCRIPTION: JSON response example from Together-AI service, showing a structured response with an ID, object type, creation timestamp, model information, choices with the assistant's message, and usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"8f5809d54b73efac\",\n  \"object\": \"chat.completion\",\n  \"created\": 1734785851,\n  \"model\": \"Qwen/Qwen2.5-72B-Instruct-Turbo\",\n  \"prompt\": [],\n  \"choices\": [\n    {\n      \"finish_reason\": \"eos\",\n      \"seed\": 12830868308626506000,\n      \"logprobs\": null,\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"I am Qwen, a large language model created by Alibaba Cloud. I am designed to assist users in generating various types of text, such as articles, stories, poems, and more, as well as answering questions and providing information on a wide range of topics. How can I assist you today?\",\n        \"tool_calls\": []\n      }\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 33,\n    \"completion_tokens\": 61,\n    \"total_tokens\": 94\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy and Security Settings\nDESCRIPTION: Configuration settings for proxy components including resource limits, logging levels, security contexts, and health check parameters. These settings control how the proxy components operate and interact with the system.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  proxy:\n    autoInject: \"enabled\"\n    clusterDomain: \"cluster.local\"\n    componentLogLevel: \"misc:error\"\n    enableCoreDump: false\n    holdApplicationUntilProxyStarts: false\n    image: \"proxyv2\"\n    logLevel: \"warning\"\n    privileged: false\n    resources:\n      limits:\n        cpu: \"2000m\"\n        memory: \"1024Mi\"\n      requests:\n        cpu: \"100m\"\n        memory: \"128Mi\"\n    statusPort: 15020\n```\n\n----------------------------------------\n\nTITLE: Constructed Request Body Example after Template Substitution\nDESCRIPTION: Example JSON showing the final constructed request body after applying template substitution with data from previous nodes A and B.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/api-workflow/README.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"embeddings\":{\"result\":\"[0.014398524595686043，......]\"},\"msg\":[\"higress项目主仓库的github地址是什么\"],\"sk\":\"sk-xxxxxx\"}\n```\n\n----------------------------------------\n\nTITLE: Deploying Redis Service for AI Token Rate Limiting in Kubernetes\nDESCRIPTION: Kubernetes manifest to deploy a Redis instance which will be used to store and track token usage for AI rate limiting. The configuration includes a Deployment with a single Redis container and a corresponding Service to expose it on port 6379.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis\n        ports:\n        - containerPort: 6379\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\n  labels:\n    app: redis\nspec:\n  ports:\n  - port: 6379\n    targetPort: 6379\n  selector:\n    app: redis\n---\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Request Example without Credentials\nDESCRIPTION: This bash example shows a request that will be denied with HTTP 401 because it doesn't include any authentication credentials.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Qwen Multimodal API Request\nDESCRIPTION: Example JSON request for Qwen multimodal API. Uses gpt-4o model which maps to qwen-vl-plus and includes both image URL and text components in the message content.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": \"gpt-4o\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"image_url\",\n                    \"image_url\": {\n                        \"url\": \"https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg\"\n                    }\n                },\n                {\n                    \"type\": \"text\",\n                    \"text\": \"Where is this picture from?\"\n                }\n            ]\n        }\n    ],\n    \"temperature\": 0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Intent Recognition Plugin with YAML in Higress\nDESCRIPTION: Example configuration for the AI Intent Recognition plugin showing how to define intent categories and LLM proxy settings. The configuration specifies different recognition categories and connection details for the large language model service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-rust/extensions/ai-intent/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscene:\n  category: \n    - use_for: intent-route\n      options: \n      - Finance\n      - E-commerce \n      - Law\n      - Others\n    - use_for: disable-cache\n      options:\n      - Time-sensitive\n      - An innovative response is needed\n      - Others\nllm:\n  proxy_service_name: \"intent-service.static\"\n  proxy_url: \"http://127.0.0.1:80/intent/compatible-mode/v1/chat/completions\"\n  proxy_domain: \"127.0.0.1\"\n  proxy_port: 80\n  proxy_model: \"qwen-long\"\n  proxy_api_key: \"\"\n  proxy_timeout: 10000\n```\n\n----------------------------------------\n\nTITLE: Groq Services Access Example with Curl\nDESCRIPTION: Bash command example showing how to access the configured Groq service using curl. The request sends a simple query to the chat completions endpoint using the llama3-8b-8192 model.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://<YOUR-DOMAIN>/v1/chat/completions\" -H \"Content-Type: application/json\" -d '{\n  \"model\": \"llama3-8b-8192\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"hello, who are you?\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Response for Current Weather Query in Jinan\nDESCRIPTION: This JSON response contains the assistant's reply with the current weather conditions in Jinan, including temperature and last update time.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"ebd6ea91-8e38-9e14-9a5b-90178d2edea4\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \" The current weather condition in Jinan is overcast, with a temperature of 31°C. This information was last updated on August 9, 2024, at 15:12 (Beijing time).\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"created\": 1723187991,\n  \"model\": \"qwen-max-0403\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"prompt_tokens\": 890,\n    \"completion_tokens\": 56,\n    \"total_tokens\": 946\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid API Key Scenario in Higress\nDESCRIPTION: This cURL command demonstrates using an unrecognized API key, which should result in a 401 Unauthorized response as the key doesn't match any configured consumers.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test?apikey=926d90ac-ba2e-11ec-ab68-00163e1250b5\n```\n\n----------------------------------------\n\nTITLE: Configuring McpBridge for Higress Service Discovery\nDESCRIPTION: This YAML configuration sets up an McpBridge resource in Higress to define service discovery for the Qwen AI service and Redis. It specifies the domains and ports for these services.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.higress.io/v1\nkind: McpBridge\nmetadata:\n  name: default\n  namespace: higress-system\nspec:\n  registries:\n  - domain: dashscope.aliyuncs.com\n    name: qwen\n    port: 443\n    type: dns\n  - domain: redis.default.svc.cluster.local # Kubernetes Service\n    name: redis\n    type: dns\n    port: 6379\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Request Example with Invalid Credentials\nDESCRIPTION: This bash example shows a request that will be denied with HTTP 401 because it provides incorrect authentication credentials.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u admin:abc  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: 360智脑 Service Chat Request Format\nDESCRIPTION: JSON request example for 360智脑 service using the OpenAI chat completion format. It includes system and user messages in Chinese.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-4o\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"你是一个专业的开发人员！\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"你好，你是谁？\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Level Authorization in Higress\nDESCRIPTION: This YAML snippet configures Basic Auth authorization for specific routes, allowing only the consumer named 'consumer1' to access routes 'route-a' and 'route-b'.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer1\n```\n\n----------------------------------------\n\nTITLE: Sending Text Embedding Request to 360 Brain AI\nDESCRIPTION: JSON request format for sending a text embedding request to the 360 Brain AI service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\":[\"Hello\"],\n  \"model\":\"text-embedding-3-small\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Key in HTTP Headers with cURL\nDESCRIPTION: This cURL command demonstrates setting the API key in the HTTP request header 'x-api-key'. This allows authentication for routes that have been configured to accept API keys in headers.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test -H 'x-api-key: 2bda943c-ba2b-11ec-ba07-00163e1250b5'\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwen Service with File Context\nDESCRIPTION: YAML configuration for Qwen service with native file context. Specifies file IDs to be used as context when using the qwen-long model.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: qwen\n  apiTokens:\n    - \"YOUR_QWEN_API_TOKEN\"\n  modelMapping:\n    \"*\": \"qwen-long\" # Qwen's file context can only be used in the qwen-long model\n  qwenFileIds:\n  - \"file-fe-xxx\"\n  - \"file-fe-yyy\"\n```\n\n----------------------------------------\n\nTITLE: Domain-specific Authorization Configuration in YAML\nDESCRIPTION: YAML configuration for domain-level authorization that allows only consumer2 to access the domains *.example.com and test.com.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Spark Service Chat Response Format\nDESCRIPTION: JSON response example from Spark service in OpenAI format. It includes the Chinese response content from a professional developer perspective and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"cha000c23c6@dx190ef0b4b96b8f2532\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"你好！我是一名专业的开发人员，擅长编程和解决技术问题。有什么我可以帮助你的吗？\"\n      }\n    }\n  ],\n  \"created\": 1721997415,\n  \"model\": \"generalv3.5\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"prompt_tokens\": 10,\n    \"completion_tokens\": 19,\n    \"total_tokens\": 29\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ingress Rules for AI Service and Redis in Kubernetes\nDESCRIPTION: Kubernetes Ingress configurations to create routing rules for both the Tongyi Qianwen AI service and Redis. The AI service ingress includes annotations for HTTPS backend and SSL server name indication, while both rules reference the McpBridge for service discovery.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/backend-protocol: HTTPS\n    higress.io/destination: qwen.dns\n    higress.io/proxy-ssl-name: dashscope.aliyuncs.com\n    higress.io/proxy-ssl-server-name: \"on\"\n  labels:\n    higress.io/resource-definer: higress\n  name: qwen\n  namespace: higress-system\nspec:\n  ingressClassName: higress\n  rules:\n  - host: qwen-test.com\n    http:\n      paths:\n      - backend:\n          resource:\n            apiGroup: networking.higress.io\n            kind: McpBridge\n            name: default\n        path: /\n        pathType: Prefix\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/destination: redis.dns\n    higress.io/ignore-path-case: \"false\"\n  labels:\n    higress.io/resource-definer: higress\n  name: redis\nspec:\n  ingressClassName: higress\n  rules:\n  - http:\n      paths:\n      - backend:\n          resource:\n            apiGroup: networking.higress.io\n            kind: McpBridge\n            name: default\n        path: /\n        pathType: Prefix\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Responses for Different Status Codes in Higress\nDESCRIPTION: This example shows how to configure the custom-response plugin to return different custom responses based on different original status codes. It defines specific responses for status codes 200/201 and 404.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - body: '{\"hello\":\"world 200\"}'\n    enable_on_status:\n      - 200\n      - 201\n    headers:\n      - key1=value1\n      - key2=value2\n    status_code: 200\n  - body: '{\"hello\":\"world 404\"}'\n    enable_on_status:\n      - 404\n    headers:\n      - key1=value1\n      - key2=value2\n    status_code: 200\n```\n\n----------------------------------------\n\nTITLE: Request with Invalid API Key Using cURL\nDESCRIPTION: This cURL command demonstrates a request with an invalid API key, which will result in a 401 Unauthorized response.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test?apikey=926d90ac-ba2e-11ec-ab68-00163e1250b5\n```\n\n----------------------------------------\n\nTITLE: Configuring Doubao Service Provider\nDESCRIPTION: YAML configuration for connecting to Doubao service via an OpenAI protocol proxy. Maps all OpenAI model identifiers to a specific Doubao endpoint.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nactiveProviderId: my-doubao\nproviders:\n- id: my-doubao\n  type: doubao\n  apiTokens:\n    - YOUR_DOUBAO_API_KEY\n  modelMapping:\n    '*': YOUR_DOUBAO_ENDPOINT\n  timeout: 1200000\n```\n\n----------------------------------------\n\nTITLE: Failed Basic Auth Request Examples\nDESCRIPTION: Examples of curl commands that will be rejected: missing credentials (401), incorrect credentials (401), and unauthorized consumer (403).\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u admin:abc  http://xxx.hello.com/test\n```\n\nLANGUAGE: bash\nCODE:\n```\n# consumer2不在route-a的allow列表里\ncurl -u guest:abc  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy for AI Proxy in Docker-Compose\nDESCRIPTION: This Envoy configuration sets up HTTP filters and clusters for proxying AI services, specifically Claude in this example. It includes TLS configuration and WASM plugin setup for the AI proxy.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  address:\n    socket_address:\n      protocol: TCP\n      address: 0.0.0.0\n      port_value: 9901\nstatic_resources:\n  listeners:\n    - name: listener_0\n      address:\n        socket_address:\n          protocol: TCP\n          address: 0.0.0.0\n          port_value: 10000\n      filter_chains:\n        - filters:\n            - name: envoy.filters.network.http_connection_manager\n              typed_config:\n                \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n                scheme_header_transformation:\n                  scheme_to_overwrite: https\n                stat_prefix: ingress_http\n                # Output envoy logs to stdout\n                access_log:\n                  - name: envoy.access_loggers.stdout\n                    typed_config:\n                      \"@type\": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog\n                # Modify as required\n                route_config:\n                  name: local_route\n                  virtual_hosts:\n                    - name: local_service\n                      domains: [ \"*\" ]\n                      routes:\n                        - match:\n                            prefix: \"/\"\n                          route:\n                            cluster: claude\n                            timeout: 300s\n                http_filters:\n                  - name: claude\n                    typed_config:\n                      \"@type\": type.googleapis.com/udpa.type.v1.TypedStruct\n                      type_url: type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm\n                      value:\n                        config:\n                          name: claude\n                          vm_config:\n                            runtime: envoy.wasm.runtime.v8\n                            code:\n                              local:\n                                filename: /etc/envoy/plugin.wasm\n                          configuration:\n                            \"@type\": \"type.googleapis.com/google.protobuf.StringValue\"\n                            value: | # 插件配置\n                              {\n                                \"provider\": {\n                                  \"type\": \"claude\",                                \n                                  \"apiTokens\": [\n                                    \"YOUR_API_TOKEN\"\n                                  ]                  \n                                }\n                              }\n                  - name: envoy.filters.http.router\n  clusters:\n    - name: claude\n      connect_timeout: 30s\n      type: LOGICAL_DNS\n      dns_lookup_family: V4_ONLY\n      lb_policy: ROUND_ROBIN\n      load_assignment:\n        cluster_name: claude\n        endpoints:\n          - lb_endpoints:\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: api.anthropic.com # API 服务地址\n                      port_value: 443\n      transport_socket:\n        name: envoy.transport_sockets.tls\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n          \"sni\": \"api.anthropic.com\"\n```\n\n----------------------------------------\n\nTITLE: Testing an Illegal CORS Method with cURL\nDESCRIPTION: A shell command using cURL that tests an invalid CORS request method. The request uses DELETE method which is not allowed by the configuration, resulting in a 403 Forbidden response.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cors/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -X OPTIONS -H \"Origin: http://httpbin2.example.org:9090\" -H \"Host: httpbin.example.com\" -H \"Access-Control-Request-Method: DELETE\" http://127.0.0.1/anything/get\\?foo\\=1\n< HTTP/1.1 403 Forbidden\n< content-length: 49\n< content-type: text/plain\n< x-cors-version: 1.0.0\n< date: Tue, 23 May 2023 11:28:51 GMT\n< server: istio-envoy\n<\n* Connection #0 to host 127.0.0.1 left intact\nInvalid CORS request\n```\n\n----------------------------------------\n\nTITLE: Question and Answer Recording Configuration\nDESCRIPTION: YAML configuration for capturing questions from request body and answers from streaming/non-streaming responses.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-statistics/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nattributes:\n  - key: question \n    value_source: request_body\n    value: messages.@reverse.0.content\n    apply_to_log: true\n  - key: answer\n    value_source: response_streaming_body\n    value: choices.0.delta.content\n    rule: append\n    apply_to_log: true\n  - key: answer\n    value_source: response_body\n    value: choices.0.message.content\n    apply_to_log: true\n```\n\n----------------------------------------\n\nTITLE: Request with Unauthorized Consumer Using cURL\nDESCRIPTION: This cURL command shows a request where the consumer (consumer2) is not in the allow list for the route, which will result in a 403 Forbidden response.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test?apikey=c8c8e9ca-558e-4a2d-bb62-e700dcc40e35\n```\n\n----------------------------------------\n\nTITLE: Error Response from AI JSON Formatting Plugin in Higress\nDESCRIPTION: Example of an error response from the AI JSON Formatting plugin, showing the structure of error messages with code and description.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-json-resp/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Code\": 1006,\n  \"Msg\": \"retry count exceed max retry count\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Specific Authorization in Higress\nDESCRIPTION: This YAML configuration restricts access to the route-a and route-b routes to only the consumer1 user. It's applied at the route level to implement fine-grained access control.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow: \n- consumer1\n```\n\n----------------------------------------\n\nTITLE: Querying Current Weather in Jinan\nDESCRIPTION: This cURL command sends a request to the Higress API gateway to query the current weather conditions in Jinan using the configured LLM and API services.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://<replace with gateway public IP>/api/openai/v1/chat/completions' \\\n-H 'Accept: application/json, text/event-stream' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"model\":\"qwen\",\"frequency_penalty\":0,\"max_tokens\":800,\"stream\":false,\"messages\":[{\"role\":\"user\",\"content\":\"What is the current weather in Jinan?\"}],\"presence_penalty\":0,\"temperature\":0,\"top_p\":0}'\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Geolocation Plugin in YAML for Higress\nDESCRIPTION: This YAML configuration example sets up the geo-ip plugin to use IPv4, obtain the IP from a header, and specify a custom header name for the IP source.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/geo-ip/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nip_protocol: ipv4\nip_source_type: header\nip_header_name: X-Real-Ip\n```\n\n----------------------------------------\n\nTITLE: Testing Blocked URL Paths with cURL in Bash\nDESCRIPTION: These cURL commands demonstrate requests that would be blocked based on the URL path blocking configuration. They attempt to access URLs containing the blocked patterns.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/request_block/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://example.com?foo=Bar\ncurl http://exmaple.com/Swagger.html\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Upstream for Git Repository in Higress\nDESCRIPTION: Commands for setting up the remote upstream in Git to properly synchronize with the Higress main repository while preventing direct pushes to upstream.\nSOURCE: https://github.com/alibaba/higress/blob/main/CONTRIBUTING_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:alibaba/higress.git\ngit remote set-url --push upstream no-pushing\n```\n\n----------------------------------------\n\nTITLE: Making Unauthorized Basic Auth Requests - Invalid Credentials\nDESCRIPTION: Example of a request that will be rejected with 401 Unauthorized due to incorrect credentials.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u admin:abc  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Quota Management API Examples using cURL\nDESCRIPTION: Examples of using cURL commands to manage quotas, including refreshing quotas, querying current quota values, and incrementing/decrementing quota amounts.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-quota/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://example.com/v1/chat/completions/quota/refresh -H \"Authorization: Bearer credential3\" -d \"consumer=consumer1&quota=10000\"\n\ncurl https://example.com/v1/chat/completions/quota?consumer=consumer1 -H \"Authorization: Bearer credential3\"\n\ncurl https://example.com/v1/chat/completions/quota/delta -d \"consumer=consumer1&value=100\" -H \"Authorization: Bearer credential3\"\n```\n\n----------------------------------------\n\nTITLE: Instance-Level Key Authentication Configuration in YAML for Higress\nDESCRIPTION: This YAML configuration enables key-auth authentication at the instance level, requiring all requests to pass authentication. It defines two consumers and configures the plugin to look for API keys in both 'apikey' and 'x-api-key' fields.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: true\nconsumers:\n- credential: 2bda943c-ba2b-11ec-ba07-00163e1250b5\n  name: consumer1\n- credential: c8c8e9ca-558e-4a2d-bb62-e700dcc40e35\n  name: consumer2\nkeys:\n- apikey\n- x-api-key\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Completion Request to Qwen Model with Curl\nDESCRIPTION: This snippet shows how to send a chat completion request to the Qwen model using curl. The request includes a conversation history and configuration parameters like temperature and max tokens.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n--data-raw '{\"model\":\"qwen\",\"frequency_penalty\":0,\"max_tokens\":800,\"stream\":false,\"messages\":[{\"role\":\"user\",\"content\":\"What is the current weather in Jinan?\"},{\"role\":\"assistant\",\"content\":\" The current weather condition in Jinan is overcast, with a temperature of 31°C. This information was last updated on August 9, 2024, at 15:12 (Beijing time).\"},{\"role\":\"user\",\"content\":\"BeiJing?\"}],\"presence_penalty\":0,\"temperature\":0,\"top_p\":0}'\n```\n\n----------------------------------------\n\nTITLE: Complete CORS Plugin Test Configuration in YAML\nDESCRIPTION: A comprehensive YAML configuration for testing the CORS plugin in Higress. It sets up a McpBridge resource, Ingress resource, and WasmPlugin with CORS rules specifying allowed origins, methods, headers and other CORS parameters.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cors/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.higress.io/v1\nkind: McpBridge\nmetadata:\n  name: mcp-cors-httpbin\n  namespace: higress-system\nspec:\n  registries:\n    - domain: httpbin.org\n      name: httpbin\n      port: 80\n      type: dns\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/destination: httpbin.dns\n    higress.io/upstream-vhost: \"httpbin.org\"\n    higress.io/backend-protocol: HTTP\n  name: ingress-cors-httpbin\n  namespace: higress-system\nspec:\n  ingressClassName: higress\n  rules:\n    - host: httpbin.example.com\n      http:\n        paths:\n          - backend:\n              resource:\n                apiGroup: networking.higress.io\n                kind: McpBridge\n                name: mcp-cors-httpbin\n            path: /\n            pathType: Prefix\n---\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: wasm-cors-httpbin\n  namespace: higress-system\nspec:\n  defaultConfigDisable: true\n  matchRules:\n    - config:\n        allow_origins:\n          - http://httpbin.example.net\n        allow_origin_patterns:\n          - http://*.example.com:[*]\n          - http://*.example.org:[9090,8080]\n        allow_methods:\n          - GET\n          - POST\n          - PATCH\n        allow_headers:\n          - Content-Type\n          - Token\n          - Authorization\n        expose_headers:\n          - X-Custom-Header\n          - X-Env-UTM\n        allow_credentials: true\n        max_age: 3600\n      configDisable: false\n      ingress:\n        - ingress-cors-httpbin\n  url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/cors:1.0.0\n  imagePullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Defining MCP Server Configuration in Go\nDESCRIPTION: Shows how to create a configuration structure for an MCP server to store settings like API keys.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README_zh.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// config/config.go\npackage config\n\ntype MyServerConfig struct {\n    ApiKey string `json:\"apiKey\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Requests for Cached Image Files\nDESCRIPTION: These curl commands demonstrate HTTP requests for PNG and JPG files that would have caching headers applied according to the plugin configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cache-control/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://example.com/test.png\ncurl http://example.com/test.jpg\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway Instance-Level HMAC Authentication in YAML\nDESCRIPTION: YAML configuration to enable HMAC authentication at the gateway instance level, requiring all requests to be authenticated.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: true\nconsumers:\n- key: appKey-example-1\n  secret: appSecret-example-1\n  name: consumer-1\n- key: appKey-example-2\n  secret: appSecret-example-2\n  name: consumer-2\n```\n\n----------------------------------------\n\nTITLE: Gemini Services Request Example\nDESCRIPTION: JSON request example for Google's Gemini services through the OpenAI protocol proxy. The request uses a simple user query with the GPT-3.5 model name, which will be mapped to Gemini Pro.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": \"gpt-3.5\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Who are you?\"\n        }\n    ],\n    \"stream\": false\n}\n```\n\n----------------------------------------\n\nTITLE: IP Blacklist Configuration in YAML\nDESCRIPTION: Example YAML configuration for the ip-restriction plugin using a custom header for IP source with a blacklist that blocks specified IPs. This configuration denies access from the listed IP addresses.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ip-restriction/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nip_source_type: header\nip_header_name: x-real-iP\ndeny:\n  - 10.0.0.1\n  - 192.169.0.0/16   \n```\n\n----------------------------------------\n\nTITLE: Translation Response Example\nDESCRIPTION: This JSON response shows the result of a translation request. It contains the translated text from English to German along with model information and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"id\":\"65dcf12c-61ff-9e68-bffa-44fc9e6070d5\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"content\":\" The German translation of \\\"Hail Hydra!\\\" is \\\"Hoch lebe Hydra!\\\".\"},\"finish_reason\":\"stop\"}],\"created\":1724043865,\"model\":\"qwen-max-0403\",\"object\":\"chat.completion\",\"usage\":{\"prompt_tokens\":908,\"completion_tokens\":52,\"total_tokens\":960}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Range Validation in YAML\nDESCRIPTION: This example demonstrates how to set up number range validation for integers in the request body.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/request-validation/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbody_schema:\n  type: object\n  required:\n    - integer_payload\n  properties:\n    integer_payload:\n      type: integer\n      minimum: 1\n      maximum: 10\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Callback\nDESCRIPTION: Callback request with authorization code and state parameter for CSRF validation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl --url \"http://foo.bar.com/oauth2/callback\" \\n  --url-query \"state=nT06xdCqn4IqemzBRV5hmO73U_hCjskrH_VupPqdcdw%3A%2Ffoo\" \\n  --url-query \"code=0bdopoS2c2lx95u7iO0OH9kY1TvaEdJHo4lB6CT2_qVFm\"\n```\n\n----------------------------------------\n\nTITLE: Generated HMAC Signing String Example\nDESCRIPTION: Text example of the final signing string generated from an HTTP request, which will be used for HMAC signature calculation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nPOST\napplication/json; charset=utf-8\napplication/x-www-form-urlencoded; charset=utf-8\nWed, 09 May 2018 13:30:29 GMT+00:00\nx-ca-key:203753385\nx-ca-nonce:c9f15cbf-f4ac-4a6c-b54d-f51abf4b5b44\nx-ca-signature-method:HmacSHA256\nx-ca-timestamp:1525872629832\n/http2test/test?param1=test&password=123456789&username=xiaoming\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Workers AI Request Example\nDESCRIPTION: JSON request example for the Cloudflare Workers AI service through the OpenAI protocol proxy. The request specifies a model, maximum tokens, and a simple user message.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-3.5\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Who are you?\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Body in Higress\nDESCRIPTION: Example of sending a POST request with a JSON body to a Higress endpoint and displaying the transformed response. The transformer adds fields, renames fields, and modifies values.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v -X POST console.higress.io/post -H 'host: foo.bar.com' \\\n-H 'Content-Type: application/json' \\\n-d '{\"a1\":\"t1\",\"a2\":\"t2\",\"a3\":\"t3\"}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"headers\": {\n    ...\n    \"Content-Type\": \"application/json\",\n    ...\n  },\n  \"json\": {\n    \"a1-new\": [\n      \"t1-new\",\n      \"t1-foo.bar-append\"\n    ],\n    \"a2-new\": \"t2\",\n    \"a3\": \"t3-new\",\n    \"a4\": \"t1-new\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example RAG Query Input\nDESCRIPTION: Sample user query demonstrating the input format for the RAG system\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-rag/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n海南追尾事故，发生在哪里？原因是什么？人员伤亡情况如何？\n```\n\n----------------------------------------\n\nTITLE: Configuring Blacklist Mode for Ext-Auth Plugin in YAML\nDESCRIPTION: This YAML snippet shows the structure for configuring the blacklist mode for the ext-auth plugin. The actual configuration is not provided in the input, but the structure would be similar to the whitelist mode.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmatch_type: 'blacklist'\nmatch_list:\n  # Blacklist rules would be defined here\n```\n\n----------------------------------------\n\nTITLE: Configuring Quark Search Engine Integration for Higress AI Search\nDESCRIPTION: Example showing how to integrate the Quark search engine with the AI search plugin. It demonstrates configuration of the content mode to retrieve full text content instead of just summaries.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsearchFrom:\n- type: quark\n  serviceName: \"quark-svc.dns\" \n  servicePort: 443\n  apiKey: \"quark api key\"\n  contentMode: \"full\"  # Optional values: \"summary\"(default) or \"full\"\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC-SHA256 Signature in Java\nDESCRIPTION: This code snippet demonstrates how to generate an HMAC-SHA256 signature using a secret key and a signing string. It uses Java's Mac and SecretKeySpec classes for encryption and Base64 encoding for the final signature.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nMac hmacSha256 = Mac.getInstance(\"HmacSHA256\");\nbyte[] secretBytes = secret.getBytes(\"UTF-8\");\nhmacSha256.init(new SecretKeySpec(secretBytes, 0, secretBytes.length, \"HmacSHA256\"));\nbyte[] result = hmacSha256.doFinal(stringToSign.getBytes(\"UTF-8\"));\nString sign = Base64.encodeBase64String(result);\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Workers AI Response Example\nDESCRIPTION: JSON response example from the Cloudflare Workers AI service, showing how it returns an ID, object type, creation timestamp, model information, and the generated content.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"id-1720367803430\",\n  \"object\": \"chat.completion\",\n  \"created\": 1720367803,\n  \"model\": \"@cf/meta/llama-3-8b-instruct\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"I am LLaMA, an AI assistant developed by Meta AI that can understand and respond to human input in a conversational manner. I'm not a human, but a computer program designed to simulate conversation and answer questions to the best of my knowledge. I can be used to generate text on a wide range of topics, from science and history to entertainment and culture.\"\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with URL-encoded Form Data in Higress\nDESCRIPTION: Example of sending a POST request with application/x-www-form-urlencoded data to a Higress endpoint and displaying the transformed response. The transformer modifies form fields in a similar pattern to the JSON example.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v -X POST console.higress.io/post -H 'host: foo.bar.com' \\\n-d 'a1=t1&a2=t2&a3=t3'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"form\": {\n    \"a1-new\": [\n      \"t1-new\",\n      \"t1-foo.bar-append\"\n    ],\n    \"a2-new\": \"t2\",\n    \"a3\": \"t3-new\",\n    \"a4\": \"t1-new\"\n  },\n  \"headers\": {\n    ...\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Second Round Chat Completion Request with History Fill\nDESCRIPTION: Example showing how historical context is automatically filled when making subsequent requests with fill_history_cnt parameter.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-history/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://example.com/api/openai/v1/chat/completions?fill_history_cnt=3' \\\n  -H 'Accept: application/json, text/event-stream' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer sk-Nzf7RtkdS4s0zFyn5575124129254d9bAf9473A5D7D06dD3'\n  --data-raw '{\"model\":\"qwen-long\",\"frequency_penalty\":0,\"max_tokens\":800,\"stream\":false,\"messages\":[\n        {\n            \"role\": \"user\",\n            \"content\": \"What about Spring Cloud GateWay?\"\n        }\n    ],\"presence_penalty\":0,\"temperature\":0.7,\"top_p\":0.95}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Responses Based on Status Codes in Higress YAML\nDESCRIPTION: Example YAML configuration for the custom-response plugin that returns different responses based on specific HTTP status codes. This demonstrates how to configure custom bodies and headers for 200/201 status codes versus 404 status codes.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - body: '{\"hello\":\"world 200\"}'\n    enable_on_status:\n      - '200'\n      - '201'\n    headers:\n      - key1=value1\n      - key2=value2\n    status_code: 200\n  - body: '{\"hello\":\"world 404\"}'\n    enable_on_status:\n      - '404'\n    headers:\n      - key1=value1\n      - key2=value2\n    status_code: 200\n```\n\n----------------------------------------\n\nTITLE: Configuring WAF Plugin with OWASP CRS and Custom Rules in YAML\nDESCRIPTION: This YAML configuration enables the OWASP Core Rule Set and defines custom ModSecurity rules for the WAF plugin. It includes debug logging, rule engine activation, and specific rules to block access to admin paths and requests containing malicious payloads.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/waf/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuseCRS: true\nsecRules: \n  - \"SecDebugLogLevel 3\"\n  - \"SecRuleEngine On\"\n  - \"SecAction \\\"id:100,phase:1,pass\\\"\"\n  - \"SecRule REQUEST_URI \\\"@streq /admin\\\" \\\"id:101,phase:1,t:lowercase,deny\\\"\"\n  - \"SecRule REQUEST_BODY \\\"@rx maliciouspayload\\\" \\\"id:102,phase:2,t:lowercase,deny\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Request with Signature Headers\nDESCRIPTION: This example shows a complete HTTP POST request including the necessary headers for signature verification. It demonstrates how to include the APP Key, signature method, signature headers, and the final signature in the request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nPOST /http2test/test?param1=test HTTP/1.1\nhost:api.aliyun.com\naccept:application/json; charset=utf-8\nca_version:1\ncontent-type:application/x-www-form-urlencoded; charset=utf-8\nx-ca-timestamp:1525872629832\ndate:Wed, 09 May 2018 13:30:29 GMT+00:00\nuser-agent:ALIYUN-ANDROID-DEMO\nx-ca-nonce:c9f15cbf-f4ac-4a6c-b54d-f51abf4b5b44\nx-ca-key:203753385\nx-ca-signature-method:HmacSHA256\nx-ca-signature-headers:x-ca-timestamp,x-ca-key,x-ca-nonce,x-ca-signature-method\nx-ca-signature:xfX+bZxY2yl7EB/qdoDy9v/uscw3Nnj1pgoU+Bm6xdM=\ncontent-length:33\nusername=xiaoming&password=123456789\n```\n\n----------------------------------------\n\nTITLE: Together-AI Request Example\nDESCRIPTION: JSON request example for Together-AI service through the OpenAI protocol proxy. The request specifies the Qwen2.5-72B-Instruct-Turbo model and a simple user query.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": \"Qwen/Qwen2.5-72B-Instruct-Turbo\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Who are you?\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Non-nested JSON Fields with Escaped Dot Notation in Higress\nDESCRIPTION: Example of using the Response Transformer to add a JSON field with a dot in its name. Using the escaped notation 'foo\\.bar' creates a flat field name 'foo.bar' rather than a nested structure.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrespRules:\n- operate: add\n  body:\n  - key: foo\\.bar\n    value: value\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v console.higress.io/get\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n ...\n \"foo.bar\": \"value\",\n ...\n}\n```\n\n----------------------------------------\n\nTITLE: Making Requests with AI Prompt Templates in JSON\nDESCRIPTION: Example JSON request body that uses the 'developer-chat' template and provides values for the template variables. This request specifically asks for a Python quick sort program by filling in the 'program' and 'language' properties.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-prompt-template/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": \"developer-chat\",\n  \"properties\": {\n    \"program\": \"quick sort\",\n    \"language\": \"python\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DeepL Translation Service Response Format\nDESCRIPTION: JSON response example from DeepL translation service in OpenAI format. It includes multiple choices with translated content, showing how context affects translation of ambiguous terms.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": { \"name\": \"EN\", \"role\": \"assistant\", \"content\": \"坐庄\" }\n    },\n    {\n      \"index\": 1,\n      \"message\": { \"name\": \"EN\", \"role\": \"assistant\", \"content\": \"中国银行\" }\n    }\n  ],\n  \"created\": 1722747752,\n  \"model\": \"Free\",\n  \"object\": \"chat.completion\",\n  \"usage\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Header in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to create a JWT header with the token type and signing algorithm.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication via URL Parameter in cURL\nDESCRIPTION: Example cURL command demonstrating how to pass JWT via a URL query parameter (access_token). This method shows authentication against a route that's configured to allow consumer1.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl  'http://xxx.hello.com/test?access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjEyMyJ9.eyJpc3MiOiJhYmNkIiwic3ViIjoidGVzdCIsImlhdCI6MTY2NTY2MDUyNywiZXhwIjoxODY1NjczODE5fQ.-vBSV0bKeDwQcuS6eeSZN9dLTUnSnZVk8eVCXdooCQ4'\n```\n\n----------------------------------------\n\nTITLE: Testing Claude AI API Access with curl\nDESCRIPTION: A curl command example that demonstrates how to test the Claude AI integration by sending a chat completion request to the locally deployed Envoy proxy on port 10000. It specifies the model, token limit, and a simple user message.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:10000/v1/chat/completions\"  -H \"Content-Type: application/json\"  -d '{\n  \"model\": \"claude-3-opus-20240229\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"hello, who are you?\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Default Bot Detection Regex Patterns in Higress\nDESCRIPTION: Collection of regular expressions used by default to identify various types of web crawlers, bots, and spiders.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/bot-detect/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Bots General matcher 'name/0.0'\n    (?:\\/[A-Za-z0-9\\.]+|) {0,5}([A-Za-z0-9 \\-_\\!\\[\\]:]{0,50}(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]{0,50}))[/ ](\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)\n# Bots General matcher 'name 0.0'\n    (?:\\/[A-Za-z0-9\\.]+|) {0,5}([A-Za-z0-9 \\-_\\!\\[\\]:]{0,50}(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]{0,50})) (\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)\n# Bots containing spider|scrape|bot(but not CUBOT)|Crawl\n    ((?:[A-z0-9]{1,50}|[A-z\\-]{1,50} ?|)(?: the |)(?:[Ss][Pp][Ii][Dd][Ee][Rr]|[Ss]crape|[Cc][Rr][Aa][Ww][Ll])[A-z0-9]{0,50})(?:(?:[ /]| v)(\\d+)(?:\\.(\\d+)|)(?:\\.(\\d+)|)|)\n# Bots Pattern '/name-0.0'\n    /((?:Ant-)?Nutch|[A-z]+[Bb]ot|[A-z]+[Ss]pider|Axtaris|fetchurl|Isara|ShopSalad|Tailsweep)[ \\-](\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?\\s\\b(008|Altresium|Argus|BaiduMobaider|BoardReader|DNSGroup|DataparkSearch|EDI|Goodzer|Grub|INGRID|Infohelfer|LinkedInBot|LOOQ|Nutch|OgScrper|PathDefender|Peew|PostPost|Steeler|Twitterbot|VSE|WebCrunch|WebZIP|Y!J-BR[A-Z]|YahooSeeker|envolk|sproose|wminer)/(\\d+)(?:\\.(\\d+)|)(?:\\.(\\d+)|)\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Demand Plugin Activation in YAML\nDESCRIPTION: YAML configuration for enabling the plugin only when the request contains a 'web_search_options' field. It specifies default disabled state and Google search engine settings.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultEnable: false\nsearchFrom:\n- type: google\n  apiKey: \"your-google-api-key\"\n  cx: \"search-engine-id\"\n  serviceName: \"google-svc.dns\"\n  servicePort: 443\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request for HMAC Signature\nDESCRIPTION: Text example of an HTTP request that will be signed with HMAC, showing all headers and parameters that will be included in the signature calculation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nPOST /http2test/test?param1=test HTTP/1.1\nhost:api.aliyun.com\naccept:application/json; charset=utf-8\nca_version:1\ncontent-type:application/x-www-form-urlencoded; charset=utf-8\nx-ca-timestamp:1525872629832\ndate:Wed, 09 May 2018 13:30:29 GMT+00:00\nuser-agent:ALIYUN-ANDROID-DEMO\nx-ca-nonce:c9f15cbf-f4ac-4a6c-b54d-f51abf4b5b44\ncontent-length:33\nusername=xiaoming&password=123456789\n```\n\n----------------------------------------\n\nTITLE: OIDC Blacklist Configuration in YAML\nDESCRIPTION: Example YAML configuration for blacklist mode, requiring validation only for requests matching the prefix '/headers' under wildcard domain '*.bar.com'.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmatch_type: 'blacklist'\nmatch_list:\n    - match_rule_domain: '*.bar.com'\n      match_rule_path: '/headers'\n      match_rule_type: 'prefix'\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Base Chart\nDESCRIPTION: Commands to create the istio-system namespace and install the Istio base chart with the release name 'istio-base'.\nSOURCE: https://github.com/alibaba/higress/blob/main/hgctl/pkg/manifests/istiobase/README.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nkubectl create namespace istio-system\nhelm install istio-base istio/base -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Adding Jose4j Dependency in Maven for JWT Handling in Java\nDESCRIPTION: This XML snippet shows how to add the jose4j dependency to a Maven project for JWT handling in Java. The jose4j library is used for generating and working with JWKs and JWTs.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n     <groupId>org.bitbucket.b_c</groupId>\n     <artifactId>jose4j</artifactId>\n     <version>0.7.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response for Mock Response in Higress\nDESCRIPTION: Example of the HTTP response that will be returned for the mock response configuration, showing the custom headers and JSON body.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nkey1: value1\nkey2: value2\nContent-Length: 21\n\n{\"hello\":\"world\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Crawler Identification in YAML\nDESCRIPTION: YAML configuration example for the bot-detect plugin to add custom crawler identification rules, specifically blocking requests with User-Agent strings containing 'spd-tools'.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/bot-detect/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndeny:\n- \"spd-tools.*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring geo-ip Plugin in YAML\nDESCRIPTION: Example YAML configuration for the geo-ip plugin, which is used in conjunction with the AI Prompts plugin to include geographic location information.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-prompt-decorator/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nipProtocal: \"ipv4\"\n```\n\n----------------------------------------\n\nTITLE: Testing API Key via URL Parameter in Higress\nDESCRIPTION: This cURL command demonstrates how to send an API key through a URL query parameter for authentication. The example shows accessing a route that requires the consumer1 API key.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test?apikey=2bda943c-ba2b-11ec-ba07-00163e1250b5\n```\n\n----------------------------------------\n\nTITLE: Translation Request with Curl\nDESCRIPTION: This curl command demonstrates how to request a translation from the AI model. It sends a request to translate a phrase from English to German, showing how to structure translation requests.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://<replace with gateway public IP>/api/openai/v1/chat/completions' \\\n-H 'Accept: application/json, text/event-stream' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"model\":\"qwen\",\"frequency_penalty\":0,\"max_tokens\":800,\"stream\":false,\"messages\":[{\"role\":\"user\",\"content\":\"Help me translate the following sentence into German: \\\"Hail Hydra!\\\"\"}],\"presence_penalty\":0,\"temperature\":0,\"top_p\":0}'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 401 Error for Invalid API Key in Higress Key-Auth\nDESCRIPTION: Example of a cURL request with an invalid API key, which will return a 401 error as the authentication fails due to the unrecognized credential.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test?apikey=926d90ac-ba2e-11ec-ab68-00163e1250b5\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response for 400-409 Status Codes with Fuzzy Matching in Higress\nDESCRIPTION: Example of the HTTP response that will be returned when the status code is in the range of 400-409 (matching the '40x' pattern), showing the custom headers and body.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nkey1: value1\nkey2: value2\nContent-Length: 21\n\n{\"hello\":\"world 40x\"}\n```\n\n----------------------------------------\n\nTITLE: Testing a CORS Preflight Request with cURL\nDESCRIPTION: A shell command using cURL that demonstrates a CORS preflight request with OPTIONS method. The request includes origin, request method, and request headers to test if the actual request would be permitted.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cors/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -X OPTIONS -H \"Origin: http://httpbin2.example.org:9090\" -H \"Host: httpbin.example.com\" -H \"Access-Control-Request-Method: POST\" -H \"Access-Control-Request-Headers: Content-Type, Token\" http://127.0.0.1/anything/get\\?foo\\=1\n< HTTP/1.1 200 OK\n< x-cors-version: 1.0.0\n< access-control-allow-origin: http://httpbin2.example.org:9090\n< access-control-allow-methods: GET,POST,PATCH\n< access-control-allow-headers: Content-Type,Token,Authorization\n< access-control-expose-headers: X-Custom-Header,X-Env-UTM\n< access-control-allow-credentials: true\n< access-control-max-age: 3600\n< date: Tue, 23 May 2023 11:41:28 GMT\n< server: istio-envoy\n< content-length: 0\n<\n* Connection #0 to host 127.0.0.1 left intact\n* Closing connection 0\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Higress Gateway Testing\nDESCRIPTION: Bash command to set up port forwarding from local port 18000 to the Higress Gateway service in the Kubernetes cluster. This allows for testing the rate limiting functionality locally without exposing the service externally.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward svc/higress-gateway -n higress-system 18000:80\n```\n\n----------------------------------------\n\nTITLE: Configuring Dify Service with OpenAI Protocol\nDESCRIPTION: YAML configuration for setting up a Dify service proxy with OpenAI protocol. This configuration maps all models to the dify service and requires a Dify API token.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: dify\n  apiTokens:\n    - \"YOUR_DIFY_API_TOKEN\"\n  modelMapping:\n    \"*\": \"dify\"\n```\n\n----------------------------------------\n\nTITLE: Obtaining OAuth2 Access Token using Client Credentials in Bash\nDESCRIPTION: Bash commands demonstrating how to obtain an OAuth2 Access Token using the client credentials grant type. Includes examples for both GET and POST methods, as well as the expected JSON response format.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Get via GET method (recommended)\ncurl 'http://test.com/oauth2/token?grant_type=client_credentials&client_id=12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx&client_secret=abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n\n# Get via POST method (requires matching a route with a real target service first, or the gateway will not read the request Body)\ncurl 'http://test.com/oauth2/token' -H 'content-type: application/x-www-form-urlencoded' -d 'grant_type=client_credentials&client_id=12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx&client_secret=abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\n\n# Simply get the access_token field from the response:\n{\n  \"token_type\": \"bearer\",\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6ImFwcGxpY2F0aW9uXC9hdCtqd3QifQ.eyJhdWQiOiJkZWZhdWx0IiwiY2xpZW50X2lkIjoiMTIzNDU2NzgteHh4eC14eHh4LXh4eHgteHh4eHh4eHh4eHh4IiwiZXhwIjoxNjg3OTUxNDYzLCJpYXQiOjE2ODc5NDQyNjMsImlzcyI6IkhpZ3Jlc3MtR2F0ZXdheSIsImp0aSI6IjEwOTU5ZDFiLThkNjEtNGRlYy1iZWE3LTk0ODEwMzc1YjYzYyIsInN1YiI6ImNvbnN1bWVyMSJ9.NkT_rG3DcV9543vBQgneVqoGfIhVeOuUBwLJJ4Wycb0\",\n  \"expires_in\": 7200\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Instance-Level Global Authentication in Higress Key-Auth\nDESCRIPTION: Instance-level configuration that enables global authentication by setting global_auth to true. This requires all requests to the gateway to pass key-auth authentication before accessing any resource.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: true\nconsumers:\n- credential: 2bda943c-ba2b-11ec-ba07-00163e1250b5\n  name: consumer1\n- credential: c8c8e9ca-558e-4a2d-bb62-e700dcc40e35\n  name: consumer2\nkeys:\n- apikey\n- x-api-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Response in Higress YAML\nDESCRIPTION: Example YAML configuration for creating a mock response that returns a specific JSON body and content-type header, useful for simulating API responses during development or testing.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nenable_on_status:\n  - 200\nstatus_code: 200\nheaders:\n  - Content-Type=application/json\n  - Hello=World\nbody: \"{\\\"hello\\\":\\\"world\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for WASM Plugin\nDESCRIPTION: Simple Dockerfile for packaging a WASM plugin, copying the compiled main.wasm file as plugin.wasm into a scratch container image.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM scratch\nCOPY main.wasm plugin.wasm\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Authentication with Instance-Level Key-Auth Plugin in Higress\nDESCRIPTION: Instance-level configuration for the key-auth plugin setting up two consumers with their respective API keys. The global_auth parameter is set to false to enable selective authentication based on route or hostname configs.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: false\nconsumers:\n- credential: 2bda943c-ba2b-11ec-ba07-00163e1250b5\n  name: consumer1\n- credential: c8c8e9ca-558e-4a2d-bb62-e700dcc40e35\n  name: consumer2\nkeys:\n- apikey\n- x-api-key\n```\n\n----------------------------------------\n\nTITLE: Server Configuration Structure in Go\nDESCRIPTION: Defines a configuration structure for storing MCP server settings like API keys.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// config/config.go\npackage config\n\ntype MyServerConfig struct {\n    ApiKey string `json:\"apiKey\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Codespell Package Version in Requirements File\nDESCRIPTION: This line specifies that version 2.2.2 of the codespell package is required. Codespell is a Python tool used to check for and correct common misspellings in text files, which helps maintain code quality.\nSOURCE: https://github.com/alibaba/higress/blob/main/tools/src/codespell/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\ncodespell==2.2.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-specific OAuth2 Authorization in YAML\nDESCRIPTION: YAML configuration for route-specific OAuth2 authorization, allowing only 'consumer1' to access specific routes.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer1\n```\n\n----------------------------------------\n\nTITLE: Request Without API Key Using cURL\nDESCRIPTION: This cURL command shows a request without an API key, which will result in a 401 Unauthorized response when key authentication is enabled.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Advanced WasmPlugin Configuration with Matching Rules\nDESCRIPTION: Extended YAML configuration for WasmPlugin showing how to apply different configurations at global, ingress, and domain levels using matching rules that are evaluated in order.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: request-block\n  namespace: higress-system\nspec:\n  defaultConfig:\n   # this config will take effect globally (all incoming requests not matched by rules below)\n   block_urls:\n   - \"swagger.html\"\n  matchRules:\n  # ingress-level takes effect\n  - ingress:\n    - default/foo\n    # the ingress foo in namespace default will use this config\n    config:\n      block_bodies:\n      - \"foo\"\n  - ingress:\n    - default/bar\n    # the ingress bar in namespace default will use this config\n    config:\n      block_bodies:\n      - \"bar\"\n  # domain-level takes effect\n  - domain:\n    - \"*.example.com\"\n    # if the request's domain matched, this config will be used\n    config:\n      block_bodies:\n       - \"foo\"\n       - \"bar\"\n  url: oci://<your_registry_hub>/request-block:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth Authentication at Instance Level in Higress\nDESCRIPTION: YAML configuration for setting up Basic Auth authentication at the instance level, defining consumers with credentials and configuring global authentication behavior.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconsumers:\n- credential: 'admin:123456'\n  name: consumer1\n- credential: 'guest:abc'\n  name: consumer2\nglobal_auth: false\n```\n\n----------------------------------------\n\nTITLE: First Round Chat Completion Response\nDESCRIPTION: Response from the first chat completion request showing the AI's comparison between Higress and Nginx.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-history/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"02f4c621-820e-97d4-a905-1e3d0d8f59c6\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"While both Higress and Nginx have gateway functionalities, their design philosophies and application scenarios differ. Nginx is better known as a high-performance HTTP and reverse proxy server, while Higress is a cloud-native gateway that integrates many cloud-native features such as service mesh, observability, and security management in addition to basic routing capabilities.\\n\\nTherefore, if you want to deploy applications in a cloud-native environment and wish to obtain advanced features required for modern applications, such as service governance, gray release, circuit breaker and rate limiting, and security authentication, then Higress can be a good alternative to Nginx. However, if it's a relatively simple static website or only requires basic reverse proxy functionality, traditional Nginx configurations may be simpler and more direct.\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"created\": 1724077770,\n  \"model\": \"qwen-long\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"prompt_tokens\": 7316,\n    \"completion_tokens\": 164,\n    \"total_tokens\": 7480\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration for MCP Server\nDESCRIPTION: Example go.mod file configuration for an MCP server, specifying Go 1.24 and the required Higress wasm-go plugin dependency with the correct version that supports WebAssembly compilation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule my-mcp-server\n\ngo 1.24\n\nrequire (\n    github.com/alibaba/higress/plugins/wasm-go v1.4.4-0.20250324133957-dab499f6ade6\n    // other dependencies\n)\n```\n\n----------------------------------------\n\nTITLE: Using OAuth2 Access Token for API Requests in Bash\nDESCRIPTION: Bash command demonstrating how to use the obtained OAuth2 Access Token in the Authorization header for API requests.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://test.com' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6ImFwcGxpY2F0aW9uXC9hdCtqd3QifQ.eyJhdWQiOiJkZWZhdWx0IiwiY2xpZW50X2lkIjoiMTIzNDU2NzgteHh4eC14eHh4LXh4eHgteHh4eHh4eHh4eHh4IiwiZXhwIjoxNjg3OTUxNDYzLCJpYXQiOjE2ODc5NDQyNjMsImlzcyI6IkhpZ3Jlc3MtR2F0ZXdheSIsImp0aSI6IjEwOTU5ZDFiLThkNjEtNGRlYy1iZWE3LTk0ODEwMzc1YjYzYyIsInN1YiI6ImNvbnN1bWVyMSJ9.NkT_rG3DcV9543vBQgneVqoGfIhVeOuUBwLJJ4Wycb0'\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Authentication using curl\nDESCRIPTION: Curl commands demonstrating how to authenticate using HTTP Basic Auth, either with the -u parameter or by directly specifying the Authorization header with Base64 encoded credentials.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# 假设以下请求将会匹配到route-a路由\n# 使用 curl 的 -u 参数指定\ncurl -u admin:123456  http://xxx.hello.com/test\n# 或者直接指定 Authorization 请求头，用户名密码使用 base64 编码\ncurl -H 'Authorization: Basic YWRtaW46MTIzNDU2'  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Implementing an MCP Tool in Go\nDESCRIPTION: Demonstrates a complete implementation of an MCP tool with input schema definition, tool creation, and call execution, including proper error handling and result formatting.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README_zh.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// tools/my_tool.go\npackage tools\n\nimport (\n    \"encoding/json\"\n    \"errors\"\n    \"fmt\"\n    \"net/http\"\n    \n    \"my-mcp-server/config\"\n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp/server\"\n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp/utils\"\n)\n\n// 定义带有输入参数的工具结构\ntype MyTool struct {\n    Param1 string `json:\"param1\" jsonschema_description:\"参数1的描述\" jsonschema:\"example=示例值\"`\n    Param2 int    `json:\"param2,omitempty\" jsonschema_description:\"参数2的描述\" jsonschema:\"default=5\"`\n}\n\n// Description 返回 MCP 工具定义的描述字段。\n// 这对应于 MCP 工具 JSON 响应中的 \"description\" 字段，\n// 提供了工具目的和用法的人类可读解释。\nfunc (t MyTool) Description() string {\n    return `详细描述这个工具做什么以及何时使用它。`\n}\n\n// InputSchema 返回 MCP 工具定义的 inputSchema 字段。\n// 这对应于 MCP 工具 JSON 响应中的 \"inputSchema\" 字段，\n// 定义了工具输入参数的 JSON Schema，包括属性类型、描述和必填字段。\nfunc (t MyTool) InputSchema() map[string]any {\n    return server.ToInputSchema(&MyTool{})\n}\n\n// Create 基于 MCP 工具调用的输入参数实例化一个新的工具实例。\n// 它将 JSON 参数反序列化为结构体，为可选字段应用默认值，并返回配置好的工具实例。\nfunc (t MyTool) Create(params []byte) server.Tool {\n    myTool := &MyTool{\n        Param2: 5, // 默认值\n    }\n    json.Unmarshal(params, &myTool)\n    return myTool\n}\n\n// Call 实现处理 MCP 工具调用的核心逻辑。当通过 MCP 框架调用工具时，执行此方法。\n// 它处理配置的参数，进行必要的 API 请求，并格式化返回给调用者的结果。\nfunc (t MyTool) Call(ctx server.HttpContext, s server.Server) error {\n    // 获取服务器配置\n    serverConfig := &config.MyServerConfig{}\n    s.GetConfig(serverConfig)\n    if serverConfig.ApiKey == \"\" {\n        return errors.New(\"服务器配置中缺少 API 密钥\")\n    }\n    \n    // 在这里实现工具的逻辑\n    // ...\n    \n    // 返回结果\n    utils.SendMCPToolTextResult(ctx, fmt.Sprintf(\"结果: %s, %d\", t.Param1, t.Param2))\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication for Routes in YAML\nDESCRIPTION: Example YAML configuration for enabling OAuth2 authentication on specific routes. This configuration sets up a consumer with client credentials and enables global credential sharing.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_credentials: true\nconsumers:\n- name: consumer1\n  client_id: 12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Allowing Specific Subdomains With Credential Support in YAML\nDESCRIPTION: YAML configuration that allows cross-origin access from specific subdomains and ports, with specific HTTP methods and headers permitted. This configuration allows credentials and caches CORS results for 7200 seconds.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cors/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow_origin_patterns:\n  - http://*.example.com\n  - http://*.example.org:[8080,9090]\nallow_methods:\n  - GET\n  - PUT\n  - POST\n  - DELETE\nallow_headers:\n  - Token\n  - Content-Type\n  - Authorization\nexpose_headers:\n  - '*'\nallow_credentials: true\nmax_age: 7200\n```\n\n----------------------------------------\n\nTITLE: Error Response Format in JSON\nDESCRIPTION: Example JSON response format when a replay attack is detected by the plugin.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/replay-protection/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 429,\n  \"message\": \"Replay Attack Detected\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Blocked Headers with cURL in Bash\nDESCRIPTION: These cURL commands demonstrate requests that would be blocked based on the header blocking configuration. They attempt to send requests with headers containing the blocked patterns.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/request_block/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://example.com -H 'example-key: 123'\ncurl http://exmaple.com -H 'my-header: example-value'\n```\n\n----------------------------------------\n\nTITLE: Removing Array Elements in JSON with Higress Transformer\nDESCRIPTION: Example of using the Request Transformer to remove a specific array element using index notation. The configuration removes the first element (index 0) from the 'users' array in the JSON request body.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nreqRules:\n- operate: remove\n  body:\n  - key: users.0\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v -X POST console.higress.io/post \\\n-H 'Content-Type: application/json' \\\n-d '{\"users\":[{\"123\":{\"name\":\"zhangsan\"}},{\"456\":{\"name\":\"lisi\"}}]}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"json\": {\n    \"users\": [\n      {\n        \"456\": {\n          \"name\": \"lisi\"\n        }\n      }\n    ]\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Level Authorization in Higress Key-Auth Plugin\nDESCRIPTION: Route-level authorization configuration that specifies consumer1 as the only allowed consumer for routes named route-a and route-b. This works in conjunction with the instance-level authentication configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer1\n```\n\n----------------------------------------\n\nTITLE: Enabling OAuth2 Authentication at Gateway Instance Level in YAML\nDESCRIPTION: YAML configuration for enabling OAuth2 authentication at the gateway instance level. This setup requires all requests to be authenticated before access is granted.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: true\nconsumers:\n- name: consumer1\n  client_id: 12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n- name: consumer2\n  client_id: 87654321-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: hgfedcba-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Configuring Weight-based Traffic Tagging in Higress\nDESCRIPTION: This example demonstrates weight-based traffic tagging that randomly distributes traffic with 30% receiving 'x-mse-tag: gray', 30% receiving 'x-mse-tag: blue', and the remaining 40% receiving no additional header.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/traffic-tag/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# The total weight is 100; the 40 weight not configured in the example will not add a header.\nweightGroups:\n  - headerName: x-mse-tag\n    headerValue: gray\n    weight: 30\n  - headerName: x-mse-tag\n    headerValue: blue\n    weight: 30\n```\n\n----------------------------------------\n\nTITLE: Route-Level Authorization Configuration in YAML for Higress Key-Auth Plugin\nDESCRIPTION: This YAML configuration specifies that only 'consumer1' is authorized to access routes route-a and route-b. It works in conjunction with the global authentication configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer1\n```\n\n----------------------------------------\n\nTITLE: HTTP Response for Blocked Request\nDESCRIPTION: Example HTTP response when a request is blocked by the request-block WASM plugin, showing a 403 Forbidden status code.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 403 Forbidden\ndate: Wed, 09 Nov 2022 12:12:32 GMT\nserver: istio-envoy\ncontent-length: 0\n```\n\n----------------------------------------\n\nTITLE: Renaming Nested JSON Fields in Arrays with Higress Transformer\nDESCRIPTION: Example of using the Request Transformer to rename a nested field within an array element. The configuration renames the key '123' to 'first' in the first element of the 'users' array.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreqRules:\n- operate: rename\n  body:\n  - oldKey: users.0.123\n    newKey: users.0.first\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v -X POST console.higress.io/post \\\n-H 'Content-Type: application/json' \\\n-d '{\"users\":[{\"123\":{\"name\":\"zhangsan\"}},{\"456\":{\"name\":\"lisi\"}}]}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"json\": {\n    \"users\": [\n      {\n        \"msg\": {\n          \"name\": \"zhangsan\"\n        }\n      },\n      {\n        \"456\": {\n          \"name\": \"lisi\"\n        }\n      }\n    ]\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Key in URL Parameters for Higress Key-Auth Authentication\nDESCRIPTION: Example of a cURL request that passes the API key as a URL parameter. This method works when in_query is set to true in the plugin configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test?apikey=2bda943c-ba2b-11ec-ba07-00163e1250b5\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway-Level Authentication in Higress\nDESCRIPTION: This YAML configuration enables Key Auth authentication at the gateway instance level, applying it to all routes. It sets global_auth to true and defines two consumers with their respective credentials.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: true\nconsumers:\n- credential: 2bda943c-ba2b-11ec-ba07-00163e1250b5\n  name: consumer1\n- credential: c8c8e9ca-558e-4a2d-bb62-e700dcc40e35\n  name: consumer2\nkeys:\n- apikey\n- x-api-key\n```\n\n----------------------------------------\n\nTITLE: Constructing JWT Header in JavaScript\nDESCRIPTION: Demonstrates the creation of a JWT header as a JSON object, specifying the token type and encryption algorithm.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing JWT Header in JavaScript\nDESCRIPTION: Demonstrates the creation of a JWT header as a JSON object, specifying the token type and encryption algorithm.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Coffee Shops near Xinshi Building in Jinan\nDESCRIPTION: This cURL command sends a request to the Higress API gateway to query coffee shops near the Xinshi Building in Jinan using the configured LLM and API services.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://<replace with gateway public IP>/api/openai/v1/chat/completions' \\\n-H 'Accept: application/json, text/event-stream' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"model\":\"qwen\",\"frequency_penalty\":0,\"max_tokens\":800,\"stream\":false,\"messages\":[{\"role\":\"user\",\"content\":\"I want to have coffee near the Xinshi Building in Jinan, please recommend a few.\"}],\"presence_penalty\":0,\"temperature\":0,\"top_p\":0}'\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with Multipart Form Data in Higress\nDESCRIPTION: Example of sending a POST request with multipart/form-data to a Higress endpoint and displaying the transformed response. The transformation works similarly to the other content types, showing the plugin's versatility.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v -X POST console.higress.io/post -H 'host: foo.bar.com' \\\n-F a1=t1 -F a2=t2 -F a3=t3\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"form\": {\n    \"a1-new\": [\n      \"t1-new\",\n      \"t1-foo.bar-append\"\n    ],\n    \"a2-new\": \"t2\",\n    \"a3\": \"t3-new\",\n    \"a4\": \"t1-new\"\n  },\n  \"headers\": {\n    ...\n    \"Content-Type\": \"multipart/form-data; boundary=------------------------1118b3fab5afbc4e\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Route-Specific Authorization Configuration in YAML\nDESCRIPTION: Configuration for route-level authorization allowing specific consumer access.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_auth/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow: \n- consumer1\n```\n\n----------------------------------------\n\nTITLE: OIDC Whitelist Configuration in YAML\nDESCRIPTION: Example YAML configuration for whitelist mode, allowing requests matching the prefix '/foo' under wildcard domain '*.bar.com' to bypass validation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmatch_type: 'whitelist'\nmatch_list:\n    - match_rule_domain: '*.bar.com'\n      match_rule_path: '/foo'\n      match_rule_type: 'prefix'\n```\n\n----------------------------------------\n\nTITLE: Japanese Weather Response Example\nDESCRIPTION: This JSON response shows the AI model replying in Japanese with weather information converted to Fahrenheit. It includes the standard API response structure with token usage information.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"id\":\"ebd6ea91-8e38-9e14-9a5b-90178d2edea4\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"content\":\" 現在の济南の天気は曇りで、気温は88°Fです。この情報は2024年8月9日15時12分（東京時間）に更新されました。\"},\"finish_reason\":\"stop\"}],\"created\":1723187991,\"model\":\"qwen-max-0403\",\"object\":\"chat.completion\",\"usage\":{\"prompt_tokens\":890,\"completion_tokens\":56,\"total_tokens\":946}}\n```\n\n----------------------------------------\n\nTITLE: Text Embedding Response Example from Qwen AI\nDESCRIPTION: JSON response example from Qwen text embedding API. Shows the structure of the response including the embedded vector representation of the input text.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"embedding\",\n      \"index\": 0,\n      \"embedding\": [\n        -1.0437825918197632,\n        5.208984375,\n        3.0483806133270264,\n        -1.7897135019302368,\n        -2.0107421875,\n        ...,\n        0.8125,\n        -1.1759847402572632,\n        0.8174641728401184,\n        1.0432943105697632,\n        -0.5885213017463684\n      ]\n    }\n  ],\n  \"model\": \"text-embedding-v1\",\n  \"usage\": {\n    \"prompt_tokens\": 1,\n    \"total_tokens\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Based Authorization in Higress\nDESCRIPTION: YAML configuration for restricting access to specific domains based on consumer identity. This configuration allows only consumer2 to access the specified domains after authentication.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: OIDC Authorization Request\nDESCRIPTION: Redirect to OIDC provider with authentication parameters and CSRF protection.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl --url \"https://dev-o43xb1mz7ya7ach4.us.auth0.com/authorize\"\\n  --url-query \"approval_prompt=force\" \\n  --url-query \"client_id=YagFqRD9tfNIaac5BamjhsSatjrAnsnZ\" \\n  --url-query \"redirect_uri=http%3A%2F%2Ffoo.bar.com%2Foauth2%2Fcallback\" \\n  --url-query \"response_type=code\" \\n  --url-query \"scope=openid+email+offline_access\" \\n  --url-query \"state=nT06xdCqn4IqemzBRV5hmO73U_hCjskrH_VupPqdcdw%3A%2Ffoo\" \\n  --header \"Set-Cookie: _oauth2_proxy_csrf=LPruATEDgcdmelr8zScD_ObhsbP4zSzvcgmPlcNDcJpFJ0OvhxP2hFotsU-kZnYxd5KsIjzeIXGTOjf8TKcbTHbDIt-aQoZORXI_0id3qeY0Jt78223DPeJ1xBqa8VO0UiEOUFOR53FGxirJOdKFxaAvxDFb1Ok=|1718962455|V1QGWyjQ4hMNOQ4Jtf17HeQJdVqHdt5d65uraFduMIU=; Path=/; Expires=Fri, 21 Jun 2024 08:06:20 GMT; HttpOnly\"\n```\n\n----------------------------------------\n\nTITLE: Processed LLM Request with AI Prompts\nDESCRIPTION: Example of the processed LLM request after applying the AI Prompts plugin, showing how prepend and append messages are inserted.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-prompt-decorator/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost/test \\\n-H \"content-type: application/json\" \\\n-d '{\n  \"model\": \"gpt-3.5-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Please answer the questions in English.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Who are you?\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"After answering each question, try to ask a follow-up question.\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Text Embedding Request Example for Qwen AI\nDESCRIPTION: JSON request example for text embedding API using Qwen's text embedding model. Shows how to send a simple text embedding request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"text-embedding-v1\",\n  \"input\": \"Hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Basic Auth Request Examples\nDESCRIPTION: Examples of requests that will be denied access due to missing credentials (returns 401), incorrect credentials (returns 401), or unauthorized consumer (returns 403).\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u admin:abc  http://xxx.hello.com/test\n```\n\nLANGUAGE: bash\nCODE:\n```\n# consumer2 is not in the allow list for route-a\ncurl -u guest:abc  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Request\nDESCRIPTION: Exchange authorization code for access token, refresh token and ID token.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \\n  --url \"https://dev-o43xb1mz7ya7ach4.us.auth0.com/oauth/token\" \\n  --data \"grant_type=authorization_code\" \\n  --data \"client_id=YagFqRD9tfNIaac5BamjhsSatjrAnsnZ\" \\n  --data \"client_secret=ekqv5XoZuMFtYms1NszEqRx03qct6BPvGeJUeptNG4y09PrY16BKT9IWezTrrhJJ\" \\n  --data \"redirect_uri=http%3A%2F%2Ffoo.bar.com%2Foauth2%2Fcallback\" \\n  --data \"code=0bdopoS2c2lx95u7iO0OH9kY1TvaEdJHo4lB6CT2_qVFm\" \n```\n\n----------------------------------------\n\nTITLE: Qwen AI Chat Completion Response Example\nDESCRIPTION: JSON response example from Qwen AI chat completion API. Demonstrates the structure of the response including the assistant's message and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"c2518bd3-0f46-97d1-be34-bb5777cb3108\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"我是通义千问，由阿里云开发的AI助手。我可以回答各种问题、提供信息和与用户进行对话。有什么我可以帮助你的吗？\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"created\": 1715175072,\n  \"model\": \"qwen-turbo\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"prompt_tokens\": 24,\n    \"completion_tokens\": 33,\n    \"total_tokens\": 57\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Qwen VL (Vision-Language) Multimodal Model Request Example\nDESCRIPTION: JSON request example for Qwen vision-language models. Shows how to send a request containing both an image and text using the OpenAI protocol format.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-4o\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg\"\n          }\n        },\n        {\n          \"type\": \"text\",\n          \"text\": \"这个图片是哪里？\"\n        }\n      ]\n    }\n  ],\n  \"temperature\": 0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Making Unauthorized Basic Auth Requests - Missing Credentials\nDESCRIPTION: Example of a request that will be rejected with 401 Unauthorized due to missing credentials.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/basic_auth/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Configuring Blacklist Mode for External Authorization in YAML\nDESCRIPTION: Configuration for blacklist mode where specific requests matching domain, path, and method rules require verification. This includes rules for admin.example.com, DELETE requests to /user, and POST requests to legacy.example.com.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Configuration for the blacklist mode. Requests that match the blacklist rules need verification.\nmatch_type: 'blacklist'\nmatch_list:\n  # Requests with the domain name admin.example.com and a path prefixed with /sensitive need verification.\n  - match_rule_domain: 'admin.example.com'\n    match_rule_path: '/sensitive'\n    match_rule_type: 'prefix'\n  # For all domains, DELETE requests with an exact path match of /user need verification.\n  - match_rule_method: [\"DELETE\"]\n    match_rule_path: '/user'\n    match_rule_type: 'exact'\n  # For the domain legacy.example.com, all POST requests need verification.\n  - match_rule_domain: 'legacy.example.com'\n    match_rule_method: [\"POST\"]\n```\n\n----------------------------------------\n\nTITLE: Qwen VL (Vision-Language) Multimodal Model Response Example\nDESCRIPTION: JSON response example from Qwen vision-language model API. Shows the structure of the response for a multimodal request that includes image analysis.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"17c5955d-af9c-9f28-bbde-293a9c9a3515\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": [\n          {\n            \"text\": \"这张照片显示的是一位女士和一只狗在海滩上。由于我无法获取具体的地理位置信息，所以不能确定这是哪个地方的海滩。但是从视觉内容来看，它可能是一个位于沿海地区的沙滩海岸线，并且有海浪拍打着岸边。这样的场景在全球许多美丽的海滨地区都可以找到。如果您需要更精确的信息，请提供更多的背景或细节描述。\"\n          }\n        ]\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"created\": 1723949230,\n  \"model\": \"qwen-vl-plus\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"prompt_tokens\": 1279,\n    \"completion_tokens\": 78\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Qwen Text Embedding Response\nDESCRIPTION: Example JSON response from Qwen text embedding API. Contains vector embeddings for the input text, model information, and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"embedding\",\n      \"index\": 0,\n      \"embedding\": [\n        -1.0437825918197632,\n        5.208984375,\n        3.0483806133270264,\n        -1.7897135019302368,\n        -2.0107421875,\n        ...,\n        0.8125,\n        -1.1759847402572632,\n        0.8174641728401184,\n        1.0432943105697632,\n        -0.5885213017463684\n      ]\n    }\n  ],\n  \"model\": \"text-embedding-v1\",\n  \"usage\": {\n    \"prompt_tokens\": 1,\n    \"total_tokens\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Authentication Configuration with Multiple Consumers in YAML\nDESCRIPTION: YAML configuration example at the instance level defining two JWT consumers with different keys and issuers. This setup shows how to configure global authentication with multiple credential types.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: false\nconsumers:\n- name: consumer1\n  issuer: abcd\n  jwks: |\n    {\n      \"keys\": [\n        {\n          \"kty\": \"oct\",\n          \"kid\": \"123\",\n          \"k\": \"hM0k3AbXBPpKOGg__Ql2Obcq7s60myWDpbHXzgKUQdYo7YCRp0gUqkCnbGSvZ2rGEl4YFkKqIqW7mTHdj-bcqXpNr-NOznEyMpVPOIlqG_NWVC3dydBgcsIZIdD-MR2AQceEaxriPA_VmiUCwfwL2Bhs6_i7eolXoY11EapLQtutz0BV6ZxQQ4dYUmct--7PLNb4BWJyQeWu0QfbIthnvhYllyl2dgeLTEJT58wzFz5HeNMNz8ohY5K0XaKAe5cepryqoXLhA-V-O1OjSG8lCNdKS09OY6O0fkyweKEtuDfien5tHHSsHXoAxYEHPFcSRL4bFPLZ0orTt1_4zpyfew\",\n          \"alg\": \"HS256\"\n        }\n      ]\n    }\n- name: consumer2\n  issuer: abc\n  jwks: |\n    {\n      \"keys\": [\n        {\n          \"kty\": \"RSA\",\n          \"e\": \"AQAB\",\n          \"use\": \"sig\",\n          \"kid\": \"123\",\n          \"alg\": \"RS256\",\n          \"n\": \"i0B67f1jggT9QJlZ_8QL9QQ56LfurrqDhpuu8BxtVcfxrYmaXaCtqTn7OfCuca7cGHdrJIjq99rz890NmYFZuvhaZ-LMt2iyiSb9LZJAeJmHf7ecguXS_-4x3hvbsrgUDi9tlg7xxbqGYcrco3anmalAFxsbswtu2PAXLtTnUo6aYwZsWA6ksq4FL3-anPNL5oZUgIp3HGyhhLTLdlQcC83jzxbguOim-0OEz-N4fniTYRivK7MlibHKrJfO3xa_6whBS07HW4Ydc37ZN3Rx9Ov3ZyV0idFblU519nUdqp_inXj1eEpynlxH60Ys_aTU2POGZh_25KXGdF_ZC_MSRw\"\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting API Key in URL Parameters with cURL\nDESCRIPTION: This cURL command shows how to make a request with the API key set as a URL parameter. This allows authentication for routes that have been configured to accept API keys in query parameters.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test?apikey=2bda943c-ba2b-11ec-ba07-00163e1250b5\n```\n\n----------------------------------------\n\nTITLE: GitHub Model Service Embedding Response Format\nDESCRIPTION: JSON response example for text embedding from GitHub model service, providing vector representations for input text and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"embedding\",\n      \"index\": 0,\n      \"embedding\": [\n        -0.0012583479,\n        0.0020349282,\n        ...\n        0.012051377,\n        -0.0053306012,\n        0.0060688322\n      ]\n    }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\": 6,\n    \"total_tokens\": 6\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spark Service Chat Request Format\nDESCRIPTION: JSON request example for Spark service using the OpenAI chat completion format. It includes system and user messages in Chinese with streaming disabled.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-4o\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"你是一名专业的开发人员！\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"你好，你是谁？\"\n    }\n  ],\n  \"stream\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Request Example in cURL\nDESCRIPTION: Example cURL command showing a request without JWT token, which should return a 401 Unauthorized error. This demonstrates the authentication requirement enforcement.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Testing API Key via HTTP Header in Higress\nDESCRIPTION: This cURL command demonstrates how to send an API key through an HTTP header for authentication. The example uses the x-api-key header to authenticate as consumer1.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test -H 'x-api-key: 2bda943c-ba2b-11ec-ba07-00163e1250b5'\n```\n\n----------------------------------------\n\nTITLE: 360智脑 Service Embedding Request Format\nDESCRIPTION: JSON request example for text embedding using 360智脑 service. It specifies Chinese input text to be converted into vector embeddings.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\":[\"你好\"],\n  \"model\":\"text-embedding-3-small\"\n}\n```\n\n----------------------------------------\n\nTITLE: Together-AI Service Chat Response Format\nDESCRIPTION: JSON response example from Together-AI service in OpenAI format. It includes the Qwen model's self-description, token usage statistics, and metadata.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"8f5809d54b73efac\",\n  \"object\": \"chat.completion\",\n  \"created\": 1734785851,\n  \"model\": \"Qwen/Qwen2.5-72B-Instruct-Turbo\",\n  \"prompt\": [],\n  \"choices\": [\n    {\n      \"finish_reason\": \"eos\",\n      \"seed\": 12830868308626506000,\n      \"logprobs\": null,\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"I am Qwen, a large language model created by Alibaba Cloud. I am designed to assist users in generating various types of text, such as articles, stories, poems, and more, as well as answering questions and providing information on a wide range of topics. How can I assist you today?\",\n        \"tool_calls\": []\n      }\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 33,\n    \"completion_tokens\": 61,\n    \"total_tokens\": 94\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forbidden Request Example in cURL\nDESCRIPTION: Example cURL command showing a request where the JWT is valid but the identified consumer doesn't have permission for the requested domain. This demonstrates authorization control based on consumer identity.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# consumer1 is not in the allow list for *.example.com\ncurl  'http://xxx.example.com/test' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjEyMyJ9.eyJpc3MiOiJhYmNkIiwic3ViIjoidGVzdCIsImlhdCI6MTY2NTY2MDUyNywiZXhwIjoxODY1NjczODE5fQ.-vBSV0bKeDwQcuS6eeSZN9dLTUnSnZVk8eVCXdooCQ4'\n```\n\n----------------------------------------\n\nTITLE: Testing Missing API Key Scenario in Higress\nDESCRIPTION: This cURL command demonstrates a request without an API key, which should result in a 401 Unauthorized response from the gateway since authentication is required.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Workers AI Service Chat Request Format\nDESCRIPTION: JSON request example for Cloudflare Workers AI service using the OpenAI chat completion format. It includes a simple user message and token limit settings.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-3.5\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Who are you?\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dify Service Chat Response Format\nDESCRIPTION: JSON response example from Dify service in OpenAI format. It includes a Chinese response from ChatGPT with extensive token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"e33fc636-f9e8-4fae-8d5e-fbd0acb09401\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"你好！我是ChatGPT，由OpenAI开发的人工智能语言模型。我可以帮助回答问题、提供建议或进行各种对话。如果你有任何需要，随时告诉我哦！\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"created\": 1736657752,\n  \"model\": \"dify\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"prompt_tokens\": 16,\n    \"completion_tokens\": 243,\n    \"total_tokens\": 259\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JWT Authentication at Gateway Instance Level in YAML\nDESCRIPTION: This YAML configuration enables JWT authentication for all requests at the gateway instance level. It defines two consumers with different JWT issuers and JWKS (JSON Web Key Set) configurations.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: true\nconsumers:\n- name: consumer1\n  issuer: abcd\n  jwks: |\n    {\n      \"keys\": [\n        {\n          \"kty\": \"oct\",\n          \"kid\": \"123\",\n          \"k\": \"hM0k3AbXBPpKOGg__Ql2Obcq7s60myWDpbHXzgKUQdYo7YCRp0gUqkCnbGSvZ2rGEl4YFkKqIqW7mTHdj-bcqXpNr-NOznEyMpVPOIlqG_NWVC3dydBgcsIZIdD-MR2AQceEaxriPA_VmiUCwfwL2Bhs6_i7eolXoY11EapLQtutz0BV6ZxQQ4dYUmct--7PLNb4BWJyQeWu0QfbIthnvhYllyl2dgeLTEJT58wzFz5HeNMNz8ohY5K0XaKAe5cepryqoXLhA-V-O1OjSG8lCNdKS09OY6O0fkyweKEtuDfien5tHHSsHXoAxYEHPFcSRL4bFPLZ0orTt1_4zpyfew\",\n          \"alg\": \"HS256\"\n        }\n      ]\n    }\n- name: consumer2\n  issuer: abc\n  jwks: |\n    {\n      \"keys\": [\n        {\n          \"kty\": \"RSA\",\n          \"e\": \"AQAB\",\n          \"use\": \"sig\",\n          \"kid\": \"123\",\n          \"alg\": \"RS256\",\n          \"n\": \"i0B67f1jggT9QJlZ_8QL9QQ56LfurrqDhpuu8BxtVcfxrYmaXaCtqTn7OfCuca7cGHdrJIjq99rz890NmYFZuvhaZ-LMt2iyiSb9LZJAeJmHf7ecguXS_-4x3hvbsrgUDi9tlg7xxbqGYcrco3anmalAFxsbswtu2PAXLtTnUo6aYwZsWA6ksq4FL3-anPNL5oZUgIp3HGyhhLTLdlQcC83jzxbguOim-0OEz-N4fniTYRivK7MlibHKrJfO3xa_6whBS07HW4Ydc37ZN3Rx9Ov3ZyV0idFblU519nUdqp_inXj1eEpynlxH60Ys_aTU2POGZh_25KXGdF_ZC_MSRw\"\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Testing Unauthorized Consumer Scenario in Higress\nDESCRIPTION: This cURL command demonstrates a request with a valid API key (consumer2) that doesn't have permission to access the specific route (route-a), which should result in a 403 Forbidden response.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/key-auth/README.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl  http://xxx.hello.com/test?apikey=c8c8e9ca-558e-4a2d-bb62-e700dcc40e35\n```\n\n----------------------------------------\n\nTITLE: DeepL Translation Service Request Format\nDESCRIPTION: JSON request example for DeepL translation service using the OpenAI chat format. It includes messages with content to translate and system message for context that won't be translated.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"Free\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"money\"\n    },\n    {\n      \"content\": \"sit by the bank\"\n    },\n    {\n      \"content\": \"a bank in China\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-Compose for AI Proxy\nDESCRIPTION: This Docker-Compose configuration sets up an Envoy proxy with a WASM plugin for AI service proxying. It includes volume mounts for the Envoy configuration and WASM plugin files.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.7'\nservices:\n  envoy:\n    image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/envoy:1.20\n    entrypoint: /usr/local/bin/envoy\n    # 开启了 debug 级别日志方便调试\n    command: -c /etc/envoy/envoy.yaml --component-log-level wasm:debug\n    networks:\n      - higress-net\n    ports:\n      - \"10000:10000\"\n    volumes:\n      - ./envoy.yaml:/etc/envoy/envoy.yaml\n      - ./plugin.wasm:/etc/envoy/plugin.wasm\nnetworks:\n  higress-net: {}\n```\n\n----------------------------------------\n\nTITLE: Generating RSA JSON Web Keys in Java\nDESCRIPTION: This Java code snippet demonstrates how to generate a pair of RSA JSON Web Keys (JWKs) using the jose4j library. It creates both public and private key representations in JSON format.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nRsaJsonWebKey rsaJsonWebKey = RsaJwkGenerator.generateJwk(2048);\nfinal String publicKeyString = rsaJsonWebKey.toJson(JsonWebKey.OutputControlLevel.PUBLIC_ONLY);\nfinal String privateKeyString = rsaJsonWebKey.toJson(JsonWebKey.OutputControlLevel.INCLUDE_PRIVATE);\n```\n\n----------------------------------------\n\nTITLE: Configuring OPA Plugin in YAML\nDESCRIPTION: Example YAML configuration for the OPA plugin showing required fields like serviceSource, serviceName, servicePort, namespace, policy, and timeout.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/opa/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserviceSource: k8s\nserviceName: opa\nservicePort: 8181\nnamespace: higress-backend\npolicy: example1\ntimeout: 5s\n```\n\n----------------------------------------\n\nTITLE: Configuring Together-AI Service with OpenAI Protocol\nDESCRIPTION: YAML configuration for setting up a Together-AI service proxy with OpenAI protocol. This configuration maps all models to Qwen2.5-72B and requires a Together-AI API token.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: together-ai\n  apiTokens:\n    - \"YOUR_TOGETHER_AI_API_TOKEN\"\n  modelMapping:\n    \"*\": \"Qwen/Qwen2.5-72B-Instruct-Turbo\"\n```\n\n----------------------------------------\n\nTITLE: Testing Claude AI Proxy with curl in Docker-Compose\nDESCRIPTION: This bash command demonstrates how to send a chat completion request to the Claude AI service through the configured proxy in Docker-Compose. It uses the OpenAI-compatible API format.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:10000/v1/chat/completions\"  -H \"Content-Type: application/json\"  -d '{\n  \"model\": \"claude-3-opus-20240229\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"你好，你是谁？\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding JWT Dependencies in Maven XML\nDESCRIPTION: Specifies the Maven dependency for the jose4j library used for JWT operations in Java.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n     <groupId>org.bitbucket.b_c</groupId>\n     <artifactId>jose4j</artifactId>\n     <version>0.7.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Replay Protection Plugin in YAML\nDESCRIPTION: Complete YAML configuration example for the replay attack prevention plugin, including Redis settings, nonce parameters, and error response customization.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/replay-protection/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nforce_nonce: true\nnonce_header: \"X-Higress-Nonce\"    # Specifies the name of the nonce request header\nnonce_ttl: 900                    # The validity period of the nonce, set to 900 seconds\nnonce_min_length: 8               # The minimum length of the nonce\nnonce_max_length: 128             # The maximum length of the nonce\nvalidate_base64: true             # Whether to enable Base64 format verification\nreject_code: 429                  # The HTTP status code returned when a request is rejected\nreject_msg: \"Replay Attack Detected\"  # The error message content returned when a request is rejected\nredis:\n  service_name: redis.static       # The name of the Redis service\n  service_port: 80                # The port used by the Redis service\n  timeout: 1000                   # The timeout time of Redis operations (unit: milliseconds)\n  key_prefix: \"replay-protection\" # The key prefix in Redis\n```\n\n----------------------------------------\n\nTITLE: Together-AI Service Chat Request Format\nDESCRIPTION: JSON request example for Together-AI service using the OpenAI chat completion format. It includes a simple user message asking for self-identification.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"Qwen/Qwen2.5-72B-Instruct-Turbo\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Who are you?\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Chat Completion Response from Moonshot AI\nDESCRIPTION: JSON response format received from the Moonshot AI service after a chat completion request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"cmpl-e5ca873642ca4f5d8b178c1742f9a8e8\",\n  \"object\": \"chat.completion\",\n  \"created\": 1872961,\n  \"model\": \"moonshot-v1-128k\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"The content of the text is about a payment platform named 'xxxx'...\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 11,\n    \"completion_tokens\": 498,\n    \"total_tokens\": 509\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global OAuth2 Authentication with Route-level Authorization in YAML\nDESCRIPTION: YAML configuration for setting up global OAuth2 authentication at the instance level, with route-specific authorization rules. This example defines multiple consumers and allows specific consumers for different routes and domains.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/oauth/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal_auth: false\nconsumers:\n- name: consumer1\n  client_id: 12345678-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: abcdefgh-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n- name: consumer2\n  client_id: 87654321-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  client_secret: hgfedcba-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer1\n```\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- consumer2\n```\n\n----------------------------------------\n\nTITLE: Configuring Replay Attack Protection Plugin in YAML\nDESCRIPTION: A complete YAML configuration example for the replay attack protection plugin. It includes settings for nonce validation, Redis connection, and error responses.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/replay-protection/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nforce_nonce: true\nnonce_header: \"X-Higress-Nonce\"    # 指定 nonce 请求头名称\nnonce_ttl: 900                    # nonce 有效期，设置为 900 秒\nnonce_min_length: 8               # nonce 的最小长度\nnonce_max_length: 128             # nonce 的最大长度\nvalidate_base64: true             # 是否开启 base64 格式校验\nreject_code: 429                  # 当拒绝请求时返回的 HTTP 状态码\nreject_msg: \"Replay Attack Detected\"  # 拒绝请求时返回的错误信息内容\nredis:\n  service_name: redis.static       # Redis 服务的名称\n  service_port: 80                # Redis 服务所使用的端口\n  timeout: 1000                   # Redis 操作的超时时间（单位：毫秒）\n  key_prefix: \"replay-protection\" # Redis 中键的前缀\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Chat Completion Response\nDESCRIPTION: Example JSON response from Azure OpenAI chat completion API. Contains the assistant's message, content filter results, usage statistics, and other metadata.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"choices\": [\n    {\n      \"content_filter_results\": {\n        \"hate\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"self_harm\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"sexual\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"violence\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        }\n      },\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"Hello! I am an AI assistant, here to answer your questions and provide assistance. Is there anything I can help you with?\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1714807624,\n  \"id\": \"chatcmpl-abcdefg1234567890\",\n  \"model\": \"gpt-35-turbo-16k\",\n  \"object\": \"chat.completion\",\n  \"prompt_filter_results\": [\n    {\n      \"prompt_index\": 0,\n      \"content_filter_results\": {\n        \"hate\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"self_harm\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"sexual\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"violence\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        }\n      }\n    }\n  ],\n  \"system_fingerprint\": null,\n  \"usage\": {\n    \"completion_tokens\": 40,\n    \"prompt_tokens\": 15,\n    \"total_tokens\": 55\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Chat Completion Response from Claude AI\nDESCRIPTION: JSON response format received from the Claude AI service after a chat completion request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"msg_01Jt3GzyjuzymnxmZERJguLK\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"Hello, I am a conversation system developed by Anthropic, a company specializing in artificial intelligence. My name is Claude, a friendly and knowledgeable chatbot. Nice to meet you! I can engage in discussions on various topics, answer questions, provide suggestions, and assist you. I'll do my best to give you helpful responses. I hope we have a pleasant exchange!\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"created\": 1717385918,\n  \"model\": \"claude-3-opus-20240229\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"prompt_tokens\": 16,\n    \"completion_tokens\": 126,\n    \"total_tokens\": 142\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HMAC Signature String Format Example\nDESCRIPTION: Text example showing the format of the signing string used in HMAC authentication, which combines various HTTP request components.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nHTTPMethod\nAccept\nContent-MD5\nContent-Type\nDate\nHeaders\nPathAndParameters\n```\n\n----------------------------------------\n\nTITLE: Executing API Request with Nonce Header in Bash\nDESCRIPTION: Example bash script demonstrating how to generate a random nonce value and include it in an API request header.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/replay-protection/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Generate nonce\nnonce=$(openssl rand -base64 32)\n\n# Send request\ncurl -X POST 'https://api.example.com/path' \\\n  -H \"X-Higress-Nonce: $nonce\" \\\n  -d '{\"key\": \"value\"}'\n```\n\n----------------------------------------\n\nTITLE: Qwen AI Conversation Request\nDESCRIPTION: Example JSON request for Qwen chat completions API. Uses the gpt-3 model identifier which will be mapped to qwen-turbo based on the configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-3\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Hello, who are you?\"\n    }\n  ],\n  \"temperature\": 0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Chat Completion Response from ERNIE Bot AI\nDESCRIPTION: JSON response format received from the ERNIE Bot AI service after a chat completion request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"as-e90yfg1pk1\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"Hello, I am ERNIE Bot. I can interact with people, answer questions, assist in creation, and efficiently provide information, knowledge, and inspiration.\"\n            },\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"created\": 1717251488,\n    \"model\": \"ERNIE-4.0\",\n    \"object\": \"chat.completion\",\n    \"usage\": {\n        \"prompt_tokens\": 4,\n        \"completion_tokens\": 33,\n        \"total_tokens\": 37\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side StringToSign Error Message Example\nDESCRIPTION: This snippet shows how the server returns the StringToSign in the HTTP Response header when signature verification fails. The line breaks in the StringToSign are replaced with '#' for proper HTTP header formatting.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nX-Ca-Error-Message:  Server StringToSign:`GET#application/json##application/json##X-Ca-Key:200000#X-Ca-Timestamp:1589458000000#/app/v1/config/keys?keys=TEST`\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Blacklist in Higress IP Restriction Plugin\nDESCRIPTION: This YAML configuration sets up an IP blacklist using a custom header for IP source. It denies access from a specific IP address (10.0.0.1) and a CIDR range (192.169.0.0/16).\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ip-restriction/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nip_source_type: header\nip_header_name: x-real-iP\ndeny:\n  - 10.0.0.1\n  - 192.169.0.0/16\n```\n\n----------------------------------------\n\nTITLE: Qwen File Context Response\nDESCRIPTION: Example JSON response from Qwen service with file context. Contains the assistant's summary of the uploaded files and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"choices\": [\n      {\n        \"finish_reason\": \"stop\",\n        \"message\": {\n          \"role\": \"assistant\",\n          \"content\": \"You uploaded two files, `context.txt` and `context_2.txt`, which seem to contain information about...\"\n        }\n      }\n    ]\n  },\n  \"usage\": {\n    \"total_tokens\": 2023,\n    \"output_tokens\": 530,\n    \"input_tokens\": 1493\n  },\n  \"request_id\": \"187e99ba-5b64-9ffe-8f69-01dafbaf6ed7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Validation in YAML\nDESCRIPTION: This snippet shows how to configure array validation in the request body, including item type, count, and uniqueness.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/request-validation/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbody_schema:\n  type: object\n  required:\n    - array_payload\n  properties:\n    array_payload:\n      type: array\n      minItems: 1\n      items:\n        type: integer\n        minimum: 1\n        maximum: 10\n      uniqueItems: true\n      default: [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Response in Higress Custom Response Plugin\nDESCRIPTION: YAML configuration example for mocking API responses with custom status code, headers and JSON body. This configuration sets up a 200 OK response with content-type headers and a simple JSON payload.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/custom_response/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_code: 200\nheaders:\n- Content-Type=application/json\n- Hello=World\nbody: \"{\\\"hello\\\":\\\"world\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting Based on HTTP Header\nDESCRIPTION: Example configuration demonstrating rate limiting based on the 'x-ca-key' HTTP header. Sets different rate limits for two distinct header values with per-second and per-hour quotas.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/key_rate_limit/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlimit_by_header: x-ca-key\nlimit_keys:\n- key: 102234\n  query_per_second: 10\n- key: 308239\n  query_per_hour: 10\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Completion Request to Claude AI\nDESCRIPTION: JSON request format for sending a chat completion request to the Claude AI service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"claude-3-opus-20240229\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Hello, who are you?\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Auth Plugin with Envoy Endpoint Mode in YAML\nDESCRIPTION: Basic configuration example for the ext-auth plugin using envoy endpoint mode, specifying service details, timeout, and endpoint configuration pointing to the ext-auth service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_service:\n  endpoint_mode: envoy\n  endpoint:\n    service_name: ext-auth.backend.svc.cluster.local\n    service_port: 8090\n    path_prefix: /auth\n  timeout: 1000\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response from Rate Limiting Configuration in Higress\nDESCRIPTION: The resulting HTTP response when rate limiting is triggered with the custom configuration. It shows a 302 redirect status with a Location header pointing to the redirect destination.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/custom_response/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 302 Found\nLocation: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter-Based Rate Limiting in Higress Gateway\nDESCRIPTION: Example configuration demonstrating rate limiting based on apikey parameter with multiple rules including regular expression matching and fallback options. Uses Redis for storing rate limit data and includes quota header display.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cluster-key-rate-limit/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrule_name: default_rule\nrule_items:\n- limit_by_param: apikey\n  limit_keys:\n  - key: 9a342114-ba8a-11ec-b1bf-00163e1250b5\n    query_per_minute: 10\n  - key: a6a6d7f2-ba8a-11ec-bec2-00163e1250b5\n    query_per_hour: 100\n- limit_by_per_param: apikey\n  limit_keys:\n  # Regular expression, matches all strings starting with a, each apikey corresponds to 10qds.\n  - key: \"regexp:^a.*\"\n    query_per_second: 10\n  # Regular expression, matches all strings starting with b, each apikey corresponds to 100qd.\n  - key: \"regexp:^b.*\"\n    query_per_minute: 100\n  # As a fallback, matches all requests, each apikey corresponds to 1000qdh.\n  - key: \"*\"\n    query_per_hour: 1000\nredis:\n  service_name: redis.static\nshow_limit_quota_header: true\n```\n\n----------------------------------------\n\nTITLE: Processing Chat Completion Response from Hunyuan AI\nDESCRIPTION: JSON response format received from the Hunyuan AI service after a chat completion request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"fd140c3e-0b69-4b19-849b-d354d32a6162\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"delta\": {\n                \"role\": \"assistant\",\n                \"content\": \"Hello! I am a professional developer.\"\n            },\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"created\": 1717493117,\n    \"model\": \"hunyuan-lite\",\n    \"object\": \"chat.completion\",\n    \"usage\": {\n        \"prompt_tokens\": 15,\n        \"completion_tokens\": 9,\n        \"total_tokens\": 24\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Request to Gateway with Host Header in Forward Auth Mode in Shell\nDESCRIPTION: Example of making a GET request to the gateway with the Host header specified, which affects how the request is forwarded to the authorization service in forward_auth mode.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ext-auth/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:8082/users?apikey=9a342114-ba8a-11ec-b1bf-00163e1250b5 -X GET -H \"foo: bar\" -H \"Authorization: xxx\" -H \"Host: foo.bar.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Body Blocking in YAML for Higress Request-Block Plugin\nDESCRIPTION: This YAML configuration sets up request body blocking for the Higress request-block plugin. It blocks requests containing 'hello world' in the body, ignoring case sensitivity.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/request_block/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nblock_bodies:\n- \"hello world\"\ncase_sensitive: false\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Crawler Detection Rules in Higress\nDESCRIPTION: YAML configuration example for adding custom crawler identification patterns to block specific user agents. This example targets user agents containing 'spd-tools' with or without version numbers.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/bot_detect/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndeny:\n- \"spd-tools.*\"\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Completion Request to MiniMax AI\nDESCRIPTION: JSON request format for sending a chat completion request to the MiniMax AI service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"model\": \"gpt-4-turbo\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Hello, who are you?\"\n        }\n    ],\n    \"stream\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying OPA Policy via REST API\nDESCRIPTION: cURL command to test the OPA policy by sending a GET request method through the OPA REST API.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/opa/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST '127.0.0.1:8181/v1/data/example1/allow' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"input\":{\"request\":{\"method\":\"GET\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Default Crawler Identification Regular Expressions for Higress Bot Detection\nDESCRIPTION: Set of regular expressions used by default to identify web crawlers based on User-Agent patterns. These patterns match various types of bots, spiders, crawlers, and scrapers with different naming conventions and version patterns.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/bot_detect/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Bots General matcher 'name/0.0'\n    (?:\\/[A-Za-z0-9\\.]+|) {0,5}([A-Za-z0-9 \\-_\\!\\[\\]:]{0,50}(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]{0,50}))[/ ](\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)\n# Bots General matcher 'name 0.0'\n    (?:\\/[A-Za-z0-9\\.]+|) {0,5}([A-Za-z0-9 \\-_\\!\\[\\]:]{0,50}(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]{0,50})) (\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)\n# Bots containing spider|scrape|bot(but not CUBOT)|Crawl\n    ((?:[A-z0-9]{1,50}|[A-z\\-]{1,50} ?|)(?: the |)(?:[Ss][Pp][Ii][Dd][Ee][Rr]|[Ss]crape|[Cc][Rr][Aa][Ww][Ll])[A-z0-9]{0,50})(?:(?:[ /]| v)(\\d+)(?:\\.(\\d+)|)(?:\\.(\\d+)|)|)\n# Bots Pattern '/name-0.0'\n    /((?:Ant-)?Nutch|[A-z]+[Bb]ot|[A-z]+[Ss]pider|Axtaris|fetchurl|Isara|ShopSalad|Tailsweep)[ \\-](\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?\\n# Bots Pattern 'name/0.0'\n    \\b(008|Altresium|Argus|BaiduMobaider|BoardReader|DNSGroup|DataparkSearch|EDI|Goodzer|Grub|INGRID|Infohelfer|LinkedInBot|LOOQ|Nutch|OgScrper|PathDefender|Peew|PostPost|Steeler|Twitterbot|VSE|WebCrunch|WebZIP|Y!J-BR[A-Z]|YahooSeeker|envolk|sproose|wminer)/(\\d+)(?:\\.(\\d+)|)(?:\\.(\\d+)|)\n# More bots\n    (CSimpleSpider|Cityreview Robot|CrawlDaddy|CrawlFire|Finderbots|Index crawler|Job Roboter|KiwiStatus Spider|Lijit Crawler|QuerySeekerSpider|ScollSpider|Trends Crawler|USyd-NLP-Spider|SiteCat Webbot|BotName\\/\\$BotVersion|123metaspider-Bot|1470\\.net crawler|50\\.nu|8bo Crawler Bot|Aboundex|Accoona-[A-z]{1,30}-Agent|AdsBot-Google(?:-[a-z]{1,30}|)|altavista|AppEngine-Google|archive.{0,30}\\.org_bot|archiver|Ask Jeeves|[Bb]ai[Dd]u[Ss]pider(?:-[A-Za-z]{1,30})(?:-[A-Za-z]{1,30}|)|bingbot|BingPreview|blitzbot|BlogBridge|Bloglovin|BoardReader Blog Indexer|BoardReader Favicon Fetcher|boitho.com-dc|BotSeer|BUbiNG|\\b\\w{0,30}favicon\\w{0,30}\\b|\\bYeti(?:-[a-z]{1,30}|)|Catchpoint(?: bot|)|[Cc]harlotte|Checklinks|clumboot|Comodo HTTP\\(S\\) Crawler|Comodo-Webinspector-Crawler|ConveraCrawler|CRAWL-E|CrawlConvera|Daumoa(?:-feedfetcher|)|Feed Seeker Bot|Feedbin|findlinks|Flamingo_SearchEngine|FollowSite Bot|furlbot|Genieo|gigabot|GomezAgent|gonzo1|(?:[a-zA-Z]{1,30}-|)Googlebot(?:-[a-zA-Z]{1,30}|)|Google SketchUp|grub-client|gsa-crawler|heritrix|HiddenMarket|holmes|HooWWWer|htdig|ia_archiver|ICC-Crawler|Icarus6j|ichiro(?:/mobile|)|IconSurf|IlTrovatore(?:-Setaccio|)|InfuzApp|Innovazion Crawler|InternetArchive|IP2[a-z]{1,30}Bot|jbot\\b|KaloogaBot|Kraken|Kurzor|larbin|LEIA|LesnikBot|Linguee Bot|LinkAider|LinkedInBot|Lite Bot|Llaut|lycos|Mail\\.RU_Bot|masscan|masidani_bot|Mediapartners-Google|Microsoft .{0,30} Bot|mogimogi|mozDex|MJ12bot|msnbot(?:-media {0,2}|)|msrbot|Mtps Feed Aggregation System|netresearch|Netvibes|NewsGator[^/]{0,30}|^NING|Nutch[^/]{0,30}|Nymesis|ObjectsSearch|OgScrper|Orbiter|OOZBOT|PagePeeker|PagesInventory|PaxleFramework|Peeplo Screenshot Bot|PlantyNet_WebRobot|Pompos|Qwantify|Read%20Later|Reaper|RedCarpet|Retreiver|Riddler|Rival IQ|scooter|Scrapy|Scrubby|searchsight|seekbot|semanticdiscovery|SemrushBot|Simpy|SimplePie|SEOstats|SimpleRSS|SiteCon|Slackbot-LinkExpanding|Slack-ImgProxy|Slurp|snappy|Speedy Spider|Squrl Java|Stringer|TheUsefulbot|ThumbShotsBot|Thumbshots\\.ru|Tiny Tiny RSS|Twitterbot|WhatsApp|URL2PNG|Vagabondo|VoilaBot|^vortex|Votay bot|^voyager|WASALive.Bot|Web-sniffer|WebThumb|WeSEE:[A-z]{1,30}|WhatWeb|WIRE|WordPress|Wotbox|www\\.almaden\\.ibm\\.com|Xenu(?:.s|) Link Sleuth|Xerka [A-z]{1,30}Bot|yacy(?:bot|)|YahooSeeker|Yahoo! Slurp|Yandex\\w{1,30}|YodaoBot(?:-[A-z]{1,30}|)|YottaaMonitor|Yowedo|^Zao|^Zao-Crawler|ZeBot_www\\.ze\\.bz|ZooShot|ZyBorg)(?:[ /]v?(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)|)\n```\n\n----------------------------------------\n\nTITLE: Default Crawler Identification Regular Expressions in Bash\nDESCRIPTION: A set of regular expressions used by the bot-detect plugin to identify common crawler patterns in User-Agent strings. These expressions cover various bot naming conventions and known crawler identifiers.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/bot-detect/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Bots General matcher 'name/0.0'\n    (?:\\/[A-Za-z0-9\\.]+|) {0,5}([A-Za-z0-9 \\-_\\!\\[\\]:]{0,50}(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]{0,50}))[/ ](\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)\n# Bots General matcher 'name 0.0'\n    (?:\\/[A-Za-z0-9\\.]+|) {0,5}([A-Za-z0-9 \\-_\\!\\[\\]:]{0,50}(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]{0,50})) (\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)\n# Bots containing spider|scrape|bot(but not CUBOT)|Crawl\n    ((?:[A-z0-9]{1,50}|[A-z\\-]{1,50} ?|)(?: the |)(?:[Ss][Pp][Ii][Dd][Ee][Rr]|[Ss]crape|[Cc][Rr][Aa][Ww][Ll])[A-z0-9]{0,50})(?:(?:[ /]| v)(\\d+)(?:\\.(\\d+)|)(?:\\.(\\d+)|)|)\n# Bots Pattern '/name-0.0'\n    /((?:Ant-)?Nutch|[A-z]+[Bb]ot|[A-z]+[Ss]pider|Axtaris|fetchurl|Isara|ShopSalad|Tailsweep)[ \\-](\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?\n# Bots Pattern 'name/0.0'\n    \\b(008|Altresium|Argus|BaiduMobaider|BoardReader|DNSGroup|DataparkSearch|EDI|Goodzer|Grub|INGRID|Infohelfer|LinkedInBot|LOOQ|Nutch|OgScrper|PathDefender|Peew|PostPost|Steeler|Twitterbot|VSE|WebCrunch|WebZIP|Y!J-BR[A-Z]|YahooSeeker|envolk|sproose|wminer)/(\\d+)(?:\\.(\\d+)|)(?:\\.(\\d+)|)\n# More bots\n    (CSimpleSpider|Cityreview Robot|CrawlDaddy|CrawlFire|Finderbots|Index crawler|Job Roboter|KiwiStatus Spider|Lijit Crawler|QuerySeekerSpider|ScollSpider|Trends Crawler|USyd-NLP-Spider|SiteCat Webbot|BotName\\/\\$BotVersion|123metaspider-Bot|1470\\.net crawler|50\\.nu|8bo Crawler Bot|Aboundex|Accoona-[A-z]{1,30}-Agent|AdsBot-Google(?:-[a-z]{1,30}|)|altavista|AppEngine-Google|archive.{0,30}\\.org_bot|archiver|Ask Jeeves|[Bb]ai[Dd]u[Ss]pider(?:-[A-Za-z]{1,30})(?:-[A-Za-z]{1,30}|)|bingbot|BingPreview|blitzbot|BlogBridge|Bloglovin|BoardReader Blog Indexer|BoardReader Favicon Fetcher|boitho.com-dc|BotSeer|BUbiNG|\\b\\w{0,30}favicon\\w{0,30}\\b|\\bYeti(?:-[a-z]{1,30}|)|Catchpoint(?: bot|)|[Cc]harlotte|Checklinks|clumboot|Comodo HTTP\\(S\\) Crawler|Comodo-Webinspector-Crawler|ConveraCrawler|CRAWL-E|CrawlConvera|Daumoa(?:-feedfetcher|)|Feed Seeker Bot|Feedbin|findlinks|Flamingo_SearchEngine|FollowSite Bot|furlbot|Genieo|gigabot|GomezAgent|gonzo1|(?:[a-zA-Z]{1,30}-|)Googlebot(?:-[a-zA-Z]{1,30}|)|Google SketchUp|grub-client|gsa-crawler|heritrix|HiddenMarket|holmes|HooWWWer|htdig|ia_archiver|ICC-Crawler|Icarus6j|ichiro(?:/mobile|)|IconSurf|IlTrovatore(?:-Setaccio|)|InfuzApp|Innovazion Crawler|InternetArchive|IP2[a-z]{1,30}Bot|jbot\\b|KaloogaBot|Kraken|Kurzor|larbin|LEIA|LesnikBot|Linguee Bot|LinkAider|LinkedInBot|Lite Bot|Llaut|lycos|Mail\\.RU_Bot|masscan|masidani_bot|Mediapartners-Google|Microsoft .{0,30} Bot|mogimogi|mozDex|MJ12bot|msnbot(?:-media {0,2}|)|msrbot|Mtps Feed Aggregation System|netresearch|Netvibes|NewsGator[^/]{0,30}|^NING|Nutch[^/]{0,30}|Nymesis|ObjectsSearch|OgScrper|Orbiter|OOZBOT|PagePeeker|PagesInventory|PaxleFramework|Peeplo Screenshot Bot|PlantyNet_WebRobot|Pompos|Qwantify|Read%20Later|Reaper|RedCarpet|Retreiver|Riddler|Rival IQ|scooter|Scrapy|Scrubby|searchsight|seekbot|semanticdiscovery|SemrushBot|Simpy|SimplePie|SEOstats|SimpleRSS|SiteCon|Slackbot-LinkExpanding|Slack-ImgProxy|Slurp|snappy|Speedy Spider|Squrl Java|Stringer|TheUsefulbot|ThumbShotsBot|Thumbshots\\.ru|Tiny Tiny RSS|Twitterbot|WhatsApp|URL2PNG|Vagabondo|VoilaBot|^vortex|Votay bot|^voyager|WASALive.Bot|Web-sniffer|WebThumb|WeSEE:[A-z]{1,30}|WhatWeb|WIRE|WordPress|Wotbox|www\\.almaden\\.ibm\\.com|Xenu(?:.s|) Link Sleuth|Xerka [A-z]{1,30}Bot|yacy(?:bot|)|YahooSeeker|Yahoo! Slurp|Yandex\\w{1,30}|YodaoBot(?:-[A-z]{1,30}|)|YottaaMonitor|Yowedo|^Zao|^Zao-Crawler|ZeBot_www\\.ze\\.bz|ZooShot|ZyBorg)(?:[ /]v?(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)|)\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Completion Request to 360 Brain AI\nDESCRIPTION: JSON request format for sending a chat completion request to the 360 Brain AI service.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"gpt-4o\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a professional developer!\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Hello, who are you?\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing WAF Rules with cURL Commands\nDESCRIPTION: Example bash commands using cURL to test the WAF plugin configuration. These commands demonstrate the requests that would be blocked by the configured rules, including attempts to access the '/admin' path and sending a request with a malicious payload.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/waf/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://example.com/admin  \ncurl http://example.com -d \"maliciouspayload\"  \n```\n\n----------------------------------------\n\nTITLE: Default Bot Detection Regular Expressions in Bash\nDESCRIPTION: 这段代码列出了默认用于识别爬虫的正则表达式集合。这些表达式用于匹配各种常见的爬虫User-Agent字符串。\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/bot_detect/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Bots General matcher 'name/0.0'\n    (?:\\/[A-Za-z0-9\\.]+|) {0,5}([A-Za-z0-9 \\-_\\!\\[\\]:]{0,50}(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]{0,50}))[/ ](\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)\n# Bots General matcher 'name 0.0'\n    (?:\\/[A-Za-z0-9\\.]+|) {0,5}([A-Za-z0-9 \\-_\\!\\[\\]:]{0,50}(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]{0,50})) (\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)\n# Bots containing spider|scrape|bot(but not CUBOT)|Crawl\n    ((?:[A-z0-9]{1,50}|[A-z\\-]{1,50} ?|)(?: the |)(?:[Ss][Pp][Ii][Dd][Ee][Rr]|[Ss]crape|[Cc][Rr][Aa][Ww][Ll])[A-z0-9]{0,50})(?:(?:[ /]| v)(\\d+)(?:\\.(\\d+)|)(?:\\.(\\d+)|)|)\n# Bots Pattern '/name-0.0'\n    /((?:Ant-)?Nutch|[A-z]+[Bb]ot|[A-z]+[Ss]pider|Axtaris|fetchurl|Isara|ShopSalad|Tailsweep)[ \\-](\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?\\n# Bots Pattern 'name/0.0'\n    \\b(008|Altresium|Argus|BaiduMobaider|BoardReader|DNSGroup|DataparkSearch|EDI|Goodzer|Grub|INGRID|Infohelfer|LinkedInBot|LOOQ|Nutch|OgScrper|PathDefender|Peew|PostPost|Steeler|Twitterbot|VSE|WebCrunch|WebZIP|Y!J-BR[A-Z]|YahooSeeker|envolk|sproose|wminer)/(\\d+)(?:\\.(\\d+)|)(?:\\.(\\d+)|)\n# More bots\n    (CSimpleSpider|Cityreview Robot|CrawlDaddy|CrawlFire|Finderbots|Index crawler|Job Roboter|KiwiStatus Spider|Lijit Crawler|QuerySeekerSpider|ScollSpider|Trends Crawler|USyd-NLP-Spider|SiteCat Webbot|BotName\\/\\$BotVersion|123metaspider-Bot|1470\\.net crawler|50\\.nu|8bo Crawler Bot|Aboundex|Accoona-[A-z]{1,30}-Agent|AdsBot-Google(?:-[a-z]{1,30}|)|altavista|AppEngine-Google|archive.{0,30}\\.org_bot|archiver|Ask Jeeves|[Bb]ai[Dd]u[Ss]pider(?:-[A-Za-z]{1,30})(?:-[A-Za-z]{1,30}|)|bingbot|BingPreview|blitzbot|BlogBridge|Bloglovin|BoardReader Blog Indexer|BoardReader Favicon Fetcher|boitho.com-dc|BotSeer|BUbiNG|\\b\\w{0,30}favicon\\w{0,30}\\b|\\bYeti(?:-[a-z]{1,30}|)|Catchpoint(?: bot|)|[Cc]harlotte|Checklinks|clumboot|Comodo HTTP\\(S\\) Crawler|Comodo-Webinspector-Crawler|ConveraCrawler|CRAWL-E|CrawlConvera|Daumoa(?:-feedfetcher|)|Feed Seeker Bot|Feedbin|findlinks|Flamingo_SearchEngine|FollowSite Bot|furlbot|Genieo|gigabot|GomezAgent|gonzo1|(?:[a-zA-Z]{1,30}-|)Googlebot(?:-[a-zA-Z]{1,30}|)|Google SketchUp|grub-client|gsa-crawler|heritrix|HiddenMarket|holmes|HooWWWer|htdig|ia_archiver|ICC-Crawler|Icarus6j|ichiro(?:/mobile|)|IconSurf|IlTrovatore(?:-Setaccio|)|InfuzApp|Innovazion Crawler|InternetArchive|IP2[a-z]{1,30}Bot|jbot\\b|KaloogaBot|Kraken|Kurzor|larbin|LEIA|LesnikBot|Linguee Bot|LinkAider|LinkedInBot|Lite Bot|Llaut|lycos|Mail\\.RU_Bot|masscan|masidani_bot|Mediapartners-Google|Microsoft .{0,30} Bot|mogimogi|mozDex|MJ12bot|msnbot(?:-media {0,2}|)|msrbot|Mtps Feed Aggregation System|netresearch|Netvibes|NewsGator[^/]{0,30}|^NING|Nutch[^/]{0,30}|Nymesis|ObjectsSearch|OgScrper|Orbiter|OOZBOT|PagePeeker|PagesInventory|PaxleFramework|Peeplo Screenshot Bot|PlantyNet_WebRobot|Pompos|Qwantify|Read%20Later|Reaper|RedCarpet|Retreiver|Riddler|Rival IQ|scooter|Scrapy|Scrubby|searchsight|seekbot|semanticdiscovery|SemrushBot|Simpy|SimplePie|SEOstats|SimpleRSS|SiteCon|Slackbot-LinkExpanding|Slack-ImgProxy|Slurp|snappy|Speedy Spider|Squrl Java|Stringer|TheUsefulbot|ThumbShotsBot|Thumbshots\\.ru|Tiny Tiny RSS|Twitterbot|WhatsApp|URL2PNG|Vagabondo|VoilaBot|^vortex|Votay bot|^voyager|WASALive.Bot|Web-sniffer|WebThumb|WeSEE:[A-z]{1,30}|WhatWeb|WIRE|WordPress|Wotbox|www\\.almaden\\.ibm\\.com|Xenu(?:.s|) Link Sleuth|Xerka [A-z]{1,30}Bot|yacy(?:bot|)|YahooSeeker|Yahoo! Slurp|Yandex\\w{1,30}|YodaoBot(?:-[A-z]{1,30}|)|YottaaMonitor|Yowedo|^Zao|^Zao-Crawler|ZeBot_www\\.ze\\.bz|ZooShot|ZyBorg)(?:[ /]v?(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)|)\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Crawler Identification in Bash\nDESCRIPTION: Bash commands demonstrating how to test the custom crawler identification rules using curl, showing requests that would be blocked based on the User-Agent header.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/bot-detect/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://example.com -H 'User-Agent: spd-tools/1.1'\ncurl http://exmaple.com -H 'User-Agent: spd-tools'\n```\n\n----------------------------------------\n\nTITLE: DeepL Translation Response Example\nDESCRIPTION: JSON response example from DeepL translation service, showing translated content for the two provided phrases. The response includes information about the source language (EN) and the translated content.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": { \"name\": \"EN\", \"role\": \"assistant\", \"content\": \"operate a gambling establishment\" }\n    },\n    {\n      \"index\": 1,\n      \"message\": { \"name\": \"EN\", \"role\": \"assistant\", \"content\": \"Bank of China\" }\n    }\n  ],\n  \"created\": 1722747752,\n  \"model\": \"Free\",\n  \"object\": \"chat.completion\",\n  \"usage\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Auth0 HTTPS Ingress Configuration\nDESCRIPTION: Kubernetes Ingress configuration for Auth0 service with HTTPS backend protocol and DNS destination settings.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: auth0-ingress\n  annotations:\n    higress.io/destination: auth.dns\n    higress.io/backend-protocol: \"HTTPS\"\n    higress.io/ignore-path-case: \"false\"\nspec:\n  ingressClassName: higress\n  rules:\n    - host: foo.bar.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              resource:\n                apiGroup: networking.higress.io\n                kind: McpBridge\n                name: default\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Bot Detection Rule with cURL\nDESCRIPTION: 这些cURL命令演示了如何测试自定义的爬虫检测规则。它们展示了会被新规则拦截的请求示例。\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/bot_detect/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://example.com -H 'User-Agent: spd-tools/1.1'\ncurl http://exmaple.com -H 'User-Agent: spd-tools'\n```\n\n----------------------------------------\n\nTITLE: Calculating Content-MD5 Header in Java\nDESCRIPTION: Java code snippet demonstrating how to calculate the Content-MD5 header value for use in HMAC signature generation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nString content-MD5 = Base64.encodeBase64(MD5(bodyStream.getBytes(\"UTF-8\")));\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Quota Management with Redis Backend\nDESCRIPTION: Example configuration for the ai-quota plugin that specifies a Redis backend for quota storage. The configuration sets a key prefix, admin consumer identity, admin path prefix, and Redis connection details.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-quota/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nredis_key_prefix: \"chat_quota:\"\nadmin_consumer: consumer3\nadmin_path: /quota\nredis:\n  service_name: redis-service.default.svc.cluster.local\n  service_port: 6379\n  timeout: 2000\n```\n\n----------------------------------------\n\nTITLE: Setting Up Arxiv Academic Search Integration for Higress AI Search\nDESCRIPTION: Configuration for integrating Arxiv academic paper search into the AI search plugin. This enables the plugin to search for scientific papers in the CS.AI category and return the top 10 results.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsearchFrom:\n- type: arxiv\n  serviceName: \"arxiv-svc.dns\" \n  servicePort: 443\n  arxivCategory: \"cs.AI\"\n  count: 10\n```\n\n----------------------------------------\n\nTITLE: Building WASM Plugin with Docker Builder\nDESCRIPTION: Command to build a WASM plugin using the Higress wasm-go builder. The command uses Docker to compile the plugin and outputs the WASM file to the specified plugin's directory.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ PLUGIN_NAME=request_block make build\n```\n\n----------------------------------------\n\nTITLE: Headers Concatenation Format for HMAC Signature\nDESCRIPTION: Text example showing how HTTP headers should be concatenated when included in the HMAC signature calculation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/hmac_auth/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nHeaderKey1 + \":\" + HeaderValue1 + \"\\n\" +\nHeaderKey2 + \":\" + HeaderValue2 + \"\\n\" +\n...\nHeaderKeyN + \":\" + HeaderValueN + \"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AI RAG Plugin Settings in YAML\nDESCRIPTION: Example configuration for setting up the AI RAG plugin with DashScope and DashVector services. Includes API keys, service endpoints, and vector search parameters.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-rag/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndashscope:\n    apiKey: xxxxxxxxxxxxxxx\n    serviceFQDN: dashscope\n    servicePort: 443\n    serviceHost: dashscope.aliyuncs.com\ndashvector:\n    apiKey: xxxxxxxxxxxxxxxxxxxx\n    serviceFQDN: dashvector\n    servicePort: 443\n    serviceHost: vrs-cn-xxxxxxxxxxxxxxx.dashvector.cn-hangzhou.aliyuncs.com\n    collection: xxxxxxxxxxxxxxx\n    topk: 1\n    threshold: 0.4\n    field: raw\n```\n\n----------------------------------------\n\nTITLE: Parametrized GraphQL Query with Variables for GitHub Repository\nDESCRIPTION: Shows how to execute a GraphQL query with variables using curl, demonstrating a query for repository information with owner and name parameters.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/de-graphql/README.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'https://api.github.com/graphql' -X POST \\\n-H 'Authorization: bearer <PAT>' \\\n-d '{\"query\":\"query ($owner: String!, $name: String!) {\\n  repository(owner: $owner, name: $name) {\\n    name\\n    forkCount\\n    description\\n  }\\n}\\n\",\"variables\":{\"owner\":\"2456868764\",\"name\":\"higress\"}}'\n\n{\n\t\"data\": {\n\t\t\"repository\": {\n\t\t\t\"name\": \"higress\",\n\t\t\t\"forkCount\": 149,\n\t\t\t\"description\": \"Next-generation Cloud Native Gateway | 下一代云原生网关\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing URL Blocking with cURL\nDESCRIPTION: Command to test the request-block WASM plugin by making a request to a URL containing 'swagger.html', which should be blocked by the plugin.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl <your_gateway_address>/api/user/swagger.html\n```\n\n----------------------------------------\n\nTITLE: Testing Blocked Request Bodies with cURL in Bash\nDESCRIPTION: These cURL commands demonstrate requests that would be blocked based on the request body blocking configuration. They attempt to send requests with bodies containing the blocked pattern.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/request_block/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://example.com -d 'Hello World'\ncurl http://exmaple.com -d 'hello world'\n```\n\n----------------------------------------\n\nTITLE: Integrating Elasticsearch for Private Knowledge Base with Higress AI Search\nDESCRIPTION: Example configuration for connecting the AI search plugin to an Elasticsearch private knowledge base. It shows how to map Elasticsearch fields to the search plugin's required fields.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsearchFrom:\n- type: elasticsearch\n  serviceName: \"es-svc.static\"\n  # static ip service use 80 as default port\n  servicePort: 80\n  index: \"knowledge_base\"\n  contentField: \"content\"\n  semanticTextField: \"semantic_text\"\n  linkField: \"url\" \n  titleField: \"title\"\n  # username: \"elastic\"\n  # password: \"password\"\n```\n\n----------------------------------------\n\nTITLE: Standard GraphQL POST Request Body Structure\nDESCRIPTION: Example of the JSON structure for a standard GraphQL POST request, including the query document, operation name, and variables fields that comprise a complete GraphQL request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/de-graphql/README.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"{viewer{name}}\",\n  \"operationName\": \"\",\n  \"variables\": {\n    \"name\": \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running WASM Plugin E2E Tests\nDESCRIPTION: Command to run E2E tests for a specific WASM plugin, allowing developers to validate their plugin implementations before deployment.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nPLUGIN_TYPE=CPP PLUGIN_NAME=request_block make higress-wasmplugin-test\n```\n\n----------------------------------------\n\nTITLE: Testing an Illegal CORS Header with cURL\nDESCRIPTION: A shell command using cURL that tests an invalid CORS request header. The request includes TokenView header which is not permitted by the configuration, resulting in a 403 Forbidden response.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/cors/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -X OPTIONS -H \"Origin: http://httpbin2.example.org:9090\" -H \"Host: httpbin.example.com\" -H \"Access-Control-Request-Method: GET\" -H \"Access-Control-Request-Headers: TokenView\" http://127.0.0.1/anything/get\\?foo\\=1\n< HTTP/1.1 403 Forbidden\n< content-length: 52\n< content-type: text/plain\n< x-cors-version: 1.0.0\n< date: Tue, 23 May 2023 11:31:03 GMT\n< server: istio-envoy\n<\n* Connection #0 to host 127.0.0.1 left intact\nInvalid CORS request\n```\n\n----------------------------------------\n\nTITLE: Customizing Reference Format in Higress AI Search\nDESCRIPTION: Configuration example showing how to customize the format of reference citations in the AI search plugin's output. This example uses a custom markdown header format for references.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nneedReference: true\nreferenceFormat: \"### Data Sources\\n%s\"\nsearchFrom: \n- type: bing\n  apiKey: \"your-bing-key\"\n  serviceName: \"search-service.dns\"\n  servicePort: 8080\n```\n\n----------------------------------------\n\nTITLE: Weather Query Request in Japanese with Curl\nDESCRIPTION: This curl command sends a request to get weather information in Fahrenheit with the response in Japanese language. It demonstrates how to customize the AI response format and language.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-agent/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://<replace with gateway public IP>/api/openai/v1/chat/completions' \\\n-H 'Accept: application/json, text/event-stream' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"model\":\"qwen\",\"frequency_penalty\":0,\"max_tokens\":800,\"stream\":false,\"messages\":[{\"role\":\"user\",\"content\":\"What is the current weather in Jinan? Please indicate in Fahrenheit and respond in Japanese.\"}],\"presence_penalty\":0,\"temperature\":0,\"top_p\":0}'\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response for 200/201 Status Codes in Higress\nDESCRIPTION: Example of the HTTP response that will be returned when the original status is 200 or 201, showing the custom headers and body defined in the configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nkey1: value1\nkey2: value2\nContent-Length: 21\n\n{\"hello\":\"world 200\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom MCP Server in Go\nDESCRIPTION: Example code demonstrating how to register and implement a custom MCP server. Shows the required methods for configuration parsing and server initialization including structure definition and error handling.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/golang-filter/mcp-server/README.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// 在init函数中注册你的服务器\n// 参数1: 服务器名称\n// 参数2: 配置结构体实例\nfunc init() {\n\tinternal.GlobalRegistry.RegisterServer(\"demo\", &DemoConfig{})\n}\n\n// 服务器配置结构体\ntype DemoConfig struct {\n\thelloworld string\n}\n\n// 解析配置方法\n// 从配置map中解析并验证配置项\nfunc (c *DBConfig) ParseConfig(config map[string]any) error {\n\thelloworld, ok := config[\"helloworld\"].(string)\n\tif !ok { return errors.New(\"missing helloworld\")}\n\tc.helloworld = helloworld\n\treturn nil\n}\n\n// 创建新的MCP服务器实例\n// serverName: 服务器名称\n// 返回值: MCP服务器实例和可能的错误\nfunc (c *DBConfig) NewServer(serverName string) (*internal.MCPServer, error) {\n\tmcpServer := internal.NewMCPServer(serverName, Version)\n    \n\t// 添加工具方法到服务器\n\t// mcpServer.AddTool()\t\n\t\n\t// 添加资源到服务器\n\t// mcpServer.AddResource()\n\t\n\treturn mcpServer, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response for 200/201 Status Codes in Higress\nDESCRIPTION: Example of the HTTP response that will be returned when the original status is 200 or 201, showing the custom headers and body defined in the configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nkey1: value1\nkey2: value2\nContent-Length: 21\n\n{\"hello\":\"world 200\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Context Size in JSON\nDESCRIPTION: JSON configuration for dynamically adjusting the number of search queries using the 'search_context_size' parameter in the 'web_search_options' field of the request.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-search/README_EN.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"web_search_options\": {\n    \"search_context_size\": \"medium\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending LLM Request with cURL\nDESCRIPTION: Example cURL command to send an LLM request to the configured endpoint, demonstrating the structure of the request before plugin processing.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-prompt-decorator/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost/test \\\n-H \"content-type: application/json\" \\\n-d '{\n  \"model\": \"gpt-3.5-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Who are you?\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MCP Server Implementation in Go\nDESCRIPTION: Example of how to import a server implementation using the blank identifier to execute the package's init function, which registers the server with the global registry.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/golang-filter/mcp-server/README.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t_ \"github.com/alibaba/higress/plugins/golang-filter/mcp-server/servers/gorm\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redirect for Rate Limiting in Higress\nDESCRIPTION: This example demonstrates how to redirect users to a different URL when rate limiting (status code 429) is triggered. It implements a 302 redirect to an external URL which could be a static page hosted on CDN.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenable_on_status: \n- 429\nstatus_code: 302\nheaders:\n- Location=https://example.com\n```\n\n----------------------------------------\n\nTITLE: Sample AI Log Output Format\nDESCRIPTION: Example JSON structure showing the AI log output format with model, token, and duration information.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-statistics/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ai_log\":\"{\\\"model\\\":\\\"qwen-turbo\\\",\\\"input_token\\\":\\\"10\\\",\\\"output_token\\\":\\\"69\\\",\\\"llm_first_token_duration\\\":\\\"309\\\",\\\"llm_service_duration\\\":\\\"1955\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Prompts with Geo-IP Integration\nDESCRIPTION: Example YAML configuration for the AI Prompts plugin that incorporates geographic location information provided by the geo-ip plugin.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-prompt-decorator/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprepend:\n- role: system\n  content: \"The user's current geographic location is, country: ${geo-country}, province: ${geo-province}, city: ${geo-city}.\"\nappend:\n- role: user\n  content: \"After answering each question, try to ask a follow-up question.\"\n```\n\n----------------------------------------\n\nTITLE: Importing MCP Server Package in Go\nDESCRIPTION: This snippet shows how to import the MCP server package using an underscore import to execute the package's init function. This is typically done in the config.go file.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/golang-filter/mcp-server/README_en.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t_ \"github.com/alibaba/higress/plugins/golang-filter/mcp-server/servers/gorm\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Rejection Message in YAML\nDESCRIPTION: This snippet shows how to set a custom rejection code and message when a request fails validation.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/request-validation/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbody_schema:\n  type: object\n  required:\n    - boolean_payload\n  properties:\n    boolean_payload:\n      type: boolean\nrejected_code: 403\nrejected_msg: \"Request rejected\"\n```\n\n----------------------------------------\n\nTITLE: Authentication Consumer Configuration\nDESCRIPTION: YAML configuration for recording consumer information from request headers.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-statistics/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nattributes:\n  - key: consumer\n    value_source: request_header\n    value: x-mse-consumer\n    apply_to_log: true\n```\n\n----------------------------------------\n\nTITLE: History Retrieval Request\nDESCRIPTION: Example of retrieving historical chat messages using a dedicated endpoint.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-history/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://example.com/api/openai/v1/chat/completions/ai-history/query?cnt=3' \\\n  -H 'Accept: application/json, text/event-stream' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer sk-Nzf7RtkdS4s0zFyn5575124129254d9bAf9473A5D7D06dD3'\n```\n\n----------------------------------------\n\nTITLE: Configuring Request-Block Wasm Plugin in Higress\nDESCRIPTION: This YAML configuration demonstrates how to use the request-block plugin version 1.0.0 in Higress. It sets up a WasmPlugin resource that blocks access to 'swagger.html' for the Higress gateway.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: request-block\n  namespace: higress-system\nspec:\n  selector:\n    matchLabels:\n      higress: higress-system-higress-gateway\n  defaultConfig:\n    block_urls:\n    - \"swagger.html\"\n  url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/request-block:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing the DeGraphQL Plugin with a cURL Request\nDESCRIPTION: Example of testing the DeGraphQL plugin by sending a simple HTTP GET request to the configured Higress endpoint. The request includes owner and name parameters which are passed to the GraphQL query defined in the plugin configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/de-graphql/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"http://localhost/api?owner=alibaba&name=higress\" -H \"Authorization: Bearer some-token\"\n\n{\n\t\"data\": {\n\t\t\"repository\": {\n\t\t\t\"description\": \"Next-generation Cloud Native Gateway\",\n\t\t\t\"forkCount\": 149,\n\t\t\t\"name\": \"higress\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IP-Based Rate Limiting in Higress\nDESCRIPTION: This configuration sets up rate limiting based on the client's IP address, extracted from the 'x-forwarded-for' header. It defines limits for specific IPs, IP ranges, and a fallback for all other IPs.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-token-ratelimit/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrule_name: default_rule\nrule_items:\n  - limit_by_per_ip: from-header-x-forwarded-for\n    limit_keys:\n      # Exact IP\n      - key: 1.1.1.1\n        token_per_day: 10\n      # IP segment, matching IPs in this segment, each IP 100 qpd\n      - key: 1.1.1.0/24\n        token_per_day: 100\n      # Fallback, i.e., default each IP 1000 qpd\n      - key: 0.0.0.0/0\n        token_per_day: 1000\nredis:\n  service_name: redis.static\n```\n\n----------------------------------------\n\nTITLE: XML Response Before Transformation\nDESCRIPTION: Sample XML response from the original httpbin's /xml endpoint before processing through the AI transformer plugin. This shows the raw XML structure that will be converted to JSON.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-transformer/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version='1.0' encoding='us-ascii'?>\n<!--  A SAMPLE set of slides  -->\n<slideshow\n    title=\"Sample Slide Show\"\n    date=\"Date of publication\"\n    author=\"Yours Truly\"\n    >\n    <!-- TITLE SLIDE -->\n    <slide type=\"all\">\n      <title>Wake up to WonderWidgets!</title>\n    </slide>\n    <!-- OVERVIEW -->\n    <slide type=\"all\">\n        <title>Overview</title>\n        <item>Why <em>WonderWidgets</em> are great</item>\n        <item/>\n        <item>Who <em>buys</em> WonderWidgets</item>\n    </slide>\n</slideshow>\n```\n\n----------------------------------------\n\nTITLE: Starting Higress with Docker\nDESCRIPTION: This bash command starts Higress using Docker, mapping necessary ports and mounting a local directory for configuration. It uses the latest all-in-one image from the Higress registry.\nSOURCE: https://github.com/alibaba/higress/blob/main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a working directory\nmkdir higress; cd higress\n# Start higress, configuration files will be written to the working directory\ndocker run -d --rm --name higress-ai -v ${PWD}:/data \\\n        -p 8001:8001 -p 8080:8080 -p 8443:8443  \\\n        higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example from Node A in Workflow\nDESCRIPTION: Example JSON response from Node A in the workflow, containing embedding data that can be used in subsequent nodes.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/api-workflow/README.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"embeddings\":  {\"output\":{\"embeddings\":[{\"embedding\":[0.014398524595686043],\"text_index\":0}]},\"usage\":{\"total_tokens\":12},\"request_id\":\"2a5229bc-53d9-91ca-bce2-00ae5e01a1d3\"}}\n```\n\n----------------------------------------\n\nTITLE: Forbidden Request Example with Unauthorized Consumer\nDESCRIPTION: This bash example shows a request that will be denied with HTTP 403 because the authenticated consumer doesn't have permission to access the requested route.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/basic-auth/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# consumer2 is not in the allow list for route-a\ncurl -u guest:abc  http://xxx.hello.com/test\n```\n\n----------------------------------------\n\nTITLE: Deploying Higress AI Gateway with Docker\nDESCRIPTION: This snippet demonstrates how to quickly start Higress using Docker. It creates a working directory, mounts it to the container, and exposes necessary ports for the UI console and gateway access.\nSOURCE: https://github.com/alibaba/higress/blob/main/README_ZH.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 创建一个工作目录\nmkdir higress; cd higress\n# 启动 higress，配置文件会写到工作目录下\ndocker run -d --rm --name higress-ai -v ${PWD}:/data \\\n        -p 8001:8001 -p 8080:8080 -p 8443:8443  \\\n        higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Adding Nested JSON Fields with Dot Notation in Higress\nDESCRIPTION: Example of using the Response Transformer to add nested JSON fields using dot notation. The key 'foo.bar' indicates a nested structure where 'bar' is a child of 'foo'.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/transformer/README.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrespRules:\n- operate: add\n  body:\n  - key: foo.bar\n    value: value\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v console.higress.io/get\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n ...\n \"foo\": {\n  \"bar\": \"value\"\n },\n ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Version of Custom Response in Higress\nDESCRIPTION: This example shows the legacy version configuration of the custom-response plugin which only supports a single response type. It defines custom headers and body for status code 200.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenable_on_status:\n  - 200\nstatus_code: 200\nheaders:\n  - Content-Type=application/json\n  - Hello=World\nbody: \"{\\\"hello\\\":\\\"world\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Running IP Range to CIDR Conversion Program in Bash for Higress\nDESCRIPTION: This Bash command runs a Go program that converts IP ranges to CIDR notation for use with the geo-ip plugin in Higress.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/geo-ip/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run generateCidr/ipRange2Cidr.go\n```\n\n----------------------------------------\n\nTITLE: Installing Higress in Kubernetes with Helm\nDESCRIPTION: Command to install Higress with the release name 'higress' in the 'higress-system' namespace. It creates the namespace if it doesn't exist and renders subchart notes.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.zh.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm install higress -n higress-system higress.io/higress --create-namespace --render-subchart-notes\n```\n\n----------------------------------------\n\nTITLE: Generating Cookie Secret with Python\nDESCRIPTION: Python script to generate a secure base64-encoded cookie secret for OAuth2 proxy configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/oidc/README_EN.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -c 'import os, base64; print(base64.urlsafe_b64encode(os.urandom(32)).decode())'\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response for 200 Status Code with Fuzzy Matching in Higress\nDESCRIPTION: Example of the HTTP response that will be returned when the status is exactly 200, showing the custom headers and body defined in the fuzzy matching configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/custom-response/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nkey1: value1\nkey2: value2\nContent-Length: 21\n\n{\"hello\":\"world 200\"}\n```\n\n----------------------------------------\n\nTITLE: Building WASM Plugin Locally with TinyGo\nDESCRIPTION: Command for building a WASM plugin locally using TinyGo targeting the WASI platform. This shows how to compile the request-block plugin specifically.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntinygo build -o main.wasm -scheduler=none -target=wasi ./extensions/request-block/main.go\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Higress from Kubernetes\nDESCRIPTION: Command to remove the Higress deployment from the Kubernetes cluster. This will delete all Kubernetes components associated with the Higress chart.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.zh.md#2025-04-09_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm delete higress -n higress-system\n```\n\n----------------------------------------\n\nTITLE: Generating geoCidr.txt File Using Go for Higress IP Geolocation\nDESCRIPTION: This command runs a Go program to convert IP ranges to CIDR notation and generate the geoCidr.txt file used by the geo-ip plugin in Higress.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/geo-ip/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run generateCidr/ipRange2Cidr.go\n```\n\n----------------------------------------\n\nTITLE: Using GJSON Function for Complex Queries in Templates\nDESCRIPTION: This snippet demonstrates various ways to use the GJSON function for complex queries within templates, including array filtering, using modifiers, and iterating over filtered results.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- Using the gjson function for complex queries -->\nActive users: {{gjson \"users.#(active==true)#.name\"}}\n\n<!-- Array filtering with multiple conditions -->\nActive developers over 30: {{gjson \"users.#(active==true && age>30)#.name\"}}\n\n<!-- Using modifiers -->\nUser names (reversed): {{gjson \"users.@reverse.#.name\"}}\n\n<!-- Iterating over filtered results -->\nAdmins:\n{{range $user := gjson \"users.#(roles.#(==admin)>0)#\"}}\n  - {{$user.name}} ({{$user.age}})\n{{end}}\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing WASM Plugin Docker Image\nDESCRIPTION: Commands for building and pushing a Docker image containing the WASM plugin to a container registry, making it available for deployment.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t <your_registry_hub>/request-block:1.0.0 -f <your_dockerfile> .\ndocker push <your_registry_hub>/request-block:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Pilot Configuration YAML\nDESCRIPTION: Pilot component configuration including resource requests, autoscaling parameters, and environment variables.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\npilot:\n  autoscaleEnabled: false\n  autoscaleMax: 5\n  autoscaleMin: 1\n  resources:\n    requests:\n      cpu: \"500m\"\n      memory: \"2048Mi\"\n  env:\n    PILOT_ENABLE_CROSS_CLUSTER_WORKLOAD_ENTRY: \"false\"\n    PILOT_ENABLE_METADATA_EXCHANGE: \"false\"\n    PILOT_SCOPE_GATEWAY_TO_NAMESPACE: \"false\"\n    VALIDATION_ENABLED: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Building WebAssembly Binary with Go Command\nDESCRIPTION: Command to compile Go code into a WebAssembly (WASM) binary for deployment as a Higress plugin. It sets the target OS to wasip1 and architecture to wasm, building as a C-shared library.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nGOOS=wasip1 GOARCH=wasm go build -buildmode=c-shared -o main.wasm main.go\n```\n\n----------------------------------------\n\nTITLE: Main Entry Point for MCP Server Implementation in Go\nDESCRIPTION: The main.go file serves as the entry point for an MCP server, registering tools and resources with the Higress MCP framework. It initializes the MCP server with a specified name and loads the defined tools.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// main.go\npackage main\n\nimport (\n    \"my-mcp-server/tools\"\n    \n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp\"\n)\n\nfunc main() {}\n\nfunc init() {\n    mcp.LoadMCPServer(mcp.AddMCPServer(\"my-mcp-server\",\n        tools.LoadTools(&mcp.MCPServer{})))\n    mcp.InitMCPServer()\n}\n```\n\n----------------------------------------\n\nTITLE: E2E Test YAML Configuration for WASM Plugin\nDESCRIPTION: Example YAML configuration for end-to-end testing of the request-block WASM plugin, showing how to define an Ingress resource and plugin configuration for testing purposes.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\n...\n...\nspec:\n  defaultConfig:\n    block_urls:\n    - \"swagger.html\"\n  url: file:///opt/plugins/wasm-go/extensions/request-block/plugin.wasm\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Higress Core Helm Chart\nDESCRIPTION: This Markdown snippet provides a brief introduction to the Higress Core Helm Chart and includes a note recommending the installation of the full Higress package. It also provides a link to the Higress documentation for more detailed installation instructions.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/core/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Higress Core Helm Chart\n\nInstalls the core components of cloud-native gateway [Higress](http://higress.io/)\n\n**Note:** It is highly recommended to install the whole package of Higress. Please visit https://higress.io/docs/user/quickstart/ for details.\n```\n\n----------------------------------------\n\nTITLE: Implementing an All-in-One MCP Server in Go\nDESCRIPTION: Demonstrates how to create an all-in-one MCP server that combines multiple MCP servers into a single WASM binary, reducing overhead when deploying multiple servers.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README_zh.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// all-in-one/main.go\npackage main\n\nimport (\n    amap \"amap-tools/tools\"\n    quark \"quark-search/tools\"\n    \n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp\"\n)\n\nfunc main() {}\n\nfunc init() {\n    mcp.LoadMCPServer(mcp.AddMCPServer(\"quark-search\",\n        quark.LoadTools(&mcp.MCPServer{})))\n    mcp.LoadMCPServer(mcp.AddMCPServer(\"amap-tools\",\n        amap.LoadTools(&mcp.MCPServer{})))\n    mcp.InitMCPServer()\n}\n```\n\n----------------------------------------\n\nTITLE: Makefile Usage Examples for MCP Server Build\nDESCRIPTION: Examples of using the provided Makefile with various configuration options to build an MCP server, including setting custom server names, registries, and version tags for Docker image building and pushing.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Build with a custom server name\nmake SERVER_NAME=my-mcp-server build\n\n# Build with a custom registry\nmake REGISTRY=my-registry.example.com/ build-image\n\n# Build with a specific version tag\nmake SERVER_VERSION=1.0.0 build-image\n```\n\n----------------------------------------\n\nTITLE: Adding WASM Plugin to E2E Test Suite in Go\nDESCRIPTION: Go code snippet showing how to add a new WASM plugin test case to the end-to-end test suite, which allows for selective testing of specific plugins.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n...\ncSuite.Setup(t)\n\tvar higressTests []suite.ConformanceTest\n\n\tif *isWasmPluginTest {\n\t\tif strings.Compare(*wasmPluginType, \"CPP\") == 0 {\n\t\t\tm := make(map[string]suite.ConformanceTest)\n\t\t\tm[\"request_block\"] = tests.CPPWasmPluginsRequestBlock\n\t\t\tm[\"key_auth\"] = tests.CPPWasmPluginsKeyAuth\n\n\t\t\thigressTests = []suite.ConformanceTest{\n\t\t\t\tm[*wasmPluginName],\n\t\t\t}\n\t\t} else {\n\t\t\thigressTests = []suite.ConformanceTest{\n\t\t\t\ttests.WasmPluginsRequestBlock,\n        //Add your newly written case method name here\n\t\t\t}\n\t\t}\n\t} else {\n...\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header for Alibaba Higress\nDESCRIPTION: Standard copyright and license header that appears at the top of source files in the Higress project. It establishes that the code is owned by Alibaba Group Holding Ltd. and is licensed under Apache License 2.0, which permits usage subject to the license terms.\nSOURCE: https://github.com/alibaba/higress/blob/main/client/header.go.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// Copyright (c) 2022 Alibaba Group Holding Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Configuring REST-to-MCP Integration in YAML\nDESCRIPTION: Shows how to configure the REST-to-MCP feature, which allows converting REST APIs to MCP tools without writing code, using declarative YAML configuration with templating capabilities.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README_zh.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  name: rest-amap-server\n  config:\n    apiKey: 您的API密钥\ntools:\n- name: maps-geo\n  description: \"将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标\"\n  args:\n  - name: address\n    description: \"待解析的结构化地址信息\"\n    required: true\n  - name: city\n    description: \"指定查询的城市\"\n    required: false\n  requestTemplate:\n    url: \"https://restapi.amap.com/v3/geocode/geo?key={{.config.apiKey}}&address={{.args.address}}&city={{.args.city}}&source=ts_mcp\"\n    method: GET\n    headers:\n    - key: x-api-key\n      value: \"{{.config.apiKey}}\"\n    - key: Content-Type\n      value: application/json\n  responseTemplate:\n    body: |\n      # 地理编码信息\n      {{- range $index, $geo := .Geocodes }}\n      ## 地点 {{add $index 1}}\n\n      - **国家**: {{ $geo.Country }}\n      - **省份**: {{ $geo.Province }}\n      - **城市**: {{ $geo.City }}\n      - **城市代码**: {{ $geo.Citycode }}\n      - **区/县**: {{ $geo.District }}\n      - **街道**: {{ $geo.Street }}\n      - **门牌号**: {{ $geo.Number }}\n      - **行政编码**: {{ $geo.Adcode }}\n      - **坐标**: {{ $geo.Location }}\n      - **级别**: {{ $geo.Level }}\n      {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing MCP Tool JSON Schema in Go\nDESCRIPTION: Go unit test code for verifying the JSON schema configuration of an MCP tool. The test checks that the InputSchema method returns a valid, non-empty schema and outputs the formatted schema for inspection.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// tools/my_tool_test.go\npackage tools\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"testing\"\n)\n\n// TestMyToolInputSchema tests the InputSchema method of MyTool\n// to verify that the JSON schema configuration is correct.\nfunc TestMyToolInputSchema(t *testing.T) {\n    myTool := MyTool{}\n    schema := myTool.InputSchema()\n    \n    schemaJSON, err := json.MarshalIndent(schema, \"\", \"  \")\n    if err != nil {\n        t.Fatalf(\"Failed to marshal schema to JSON: %v\", err)\n    }\n    \n    fmt.Printf(\"MyTool InputSchema:\\n%s\\n\", string(schemaJSON))\n    \n    if len(schema) == 0 {\n        t.Error(\"InputSchema returned an empty schema\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Specific WASM Plugin\nDESCRIPTION: Command for running end-to-end tests for a specific WASM plugin (request-block) using the Makefile target, which builds only the needed plugin and executes its test cases.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPLUGIN_NAME=request-block make higress-wasmplugin-test\n```\n\n----------------------------------------\n\nTITLE: Qwen AI Conversation Response\nDESCRIPTION: Example JSON response from Qwen chat completions API. Contains the assistant's message, usage statistics, and metadata including the actual model used (qwen-turbo).\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"c2518bd3-0f46-97d1-be34-bb5777cb3108\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"I am Qwen, an AI assistant developed by Alibaba Cloud. I can answer various questions, provide information, and engage in conversations with users. How can I assist you?\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"created\": 1715175072,\n  \"model\": \"qwen-turbo\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"prompt_tokens\": 24,\n    \"completion_tokens\": 33,\n    \"total_tokens\": 57\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Plugin in Higress in YAML\nDESCRIPTION: Shows how to configure an MCP server plugin in Higress, including server name, configuration parameters, and optional tool allowlist.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README_zh.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  # MCP 服务器名称 - 必须与代码中 mcp.AddMCPServer() 调用时使用的名称完全一致\n  name: my-mcp-server\n  # MCP 服务器配置\n  config:\n    apiKey: 您的API密钥\n  # 可选：如果配置了，则起到白名单作用 - 只有列在这里的工具才能被调用\n  allowTools:\n  - my_tool\n  - another_tool\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple MCP Tools in Go\nDESCRIPTION: Shows how to organize tool loading for better code management, enabling multiple tools to be registered with a single MCP server instance.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README_zh.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// tools/load_tools.go\npackage tools\n\nimport (\n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp\"\n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp/server\"\n)\n\nfunc LoadTools(server *mcp.MCPServer) server.Server {\n    return server.AddMCPTool(\"my_tool\", &MyTool{}).\n        AddMCPTool(\"another_tool\", &AnotherTool{})\n        // 根据需要添加更多工具\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WasmPlugin API Resource for Request Blocking\nDESCRIPTION: YAML configuration to create a WasmPlugin API resource that blocks requests containing 'swagger.html' in the URL. The plugin is loaded from an OCI registry.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: request-block\n  namespace: higress-system\nspec:\n  defaultConfig:\n    block_urls:\n    - \"swagger.html\"\n  url: oci://<your_registry_hub>/request-block:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Qwen Multimodal API Response\nDESCRIPTION: Example JSON response from Qwen multimodal API. Contains the assistant's description of the image, model information, and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"17c5955d-af9c-9f28-bbde-293a9c9a3515\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": [\n                    {\n                        \"text\": \"This photo depicts a woman and a dog on a beach. As I cannot access specific geographical information, I cannot pinpoint the exact location of this beach. However, visually, it appears to be a sandy coastline along a coastal area with waves breaking on the shore. Such scenes can be found in many beautiful seaside locations worldwide. If you need more precise information, please provide additional context or descriptive details.\"\n                    }\n                ]\n            },\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"created\": 1723949230,\n    \"model\": \"qwen-vl-plus\",\n    \"object\": \"chat.completion\",\n    \"usage\": {\n        \"prompt_tokens\": 1279,\n        \"completion_tokens\": 78\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Golang HTTP Filter in Envoy\nDESCRIPTION: YAML configuration example for setting up a Golang HTTP Filter in Envoy. Specifies the filter name, library path, plugin name, and custom configuration options.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/golang-filter/README_en.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.golang\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config\n    library_id: my-go-filter\n    library_path: \"./my-go-filter.so\"\n    plugin_name: my-go-filter\n    plugin_config:\n      \"@type\": type.googleapis.com/xds.type.v3.TypedStruct\n      value:\n          your_config_here: value\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Server Entry Point in Go\nDESCRIPTION: Shows the main entry point for an MCP server, which registers tools and resources and initializes the server to handle MCP requests.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README_zh.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// main.go\npackage main\n\nimport (\n    \"my-mcp-server/tools\"\n    \n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp\"\n)\n\nfunc main() {}\n\nfunc init() {\n    mcp.LoadMCPServer(mcp.AddMCPServer(\"my-mcp-server\",\n        tools.LoadTools(&mcp.MCPServer{})))\n    mcp.InitMCPServer()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-level WasmPlugin Rules\nDESCRIPTION: YAML configuration showing how to apply different configurations of the request-block plugin at global, ingress, and domain levels. Rules are matched in the order of configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/README_EN.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions.higress.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: request-block\n  namespace: higress-system\nspec:\n  defaultConfig:\n   # this config will take effect globally (all incoming requests not matched by rules below)\n   block_urls:\n   - \"swagger.html\"\n  matchRules:\n  # ingress-level takes effect\n  - ingress:\n    - default/foo\n    # the ingress foo in namespace default will use this config\n    config:\n      block_bodies:\n      - \"foo\"\n  - ingress:\n    - default/bar\n    # the ingress bar in namespace default will use this config\n    config:\n      block_bodies:\n      - \"bar\"\n  # domain-level takes effect\n  - domain:\n    - \"*.example.com\"\n    # if the request's domain matched, this config will be used\n    config:\n      block_bodies:\n       - \"foo\"\n       - \"bar\"\n  url: oci://<your_registry_hub>/request-block:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Qwen Text Embedding Request\nDESCRIPTION: Example JSON request for Qwen text embedding API. Uses the text-embedding-v1 model to generate vector embeddings for the input text.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"text-embedding-v1\",\n  \"input\": \"Hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Implementing MCP Server in Go\nDESCRIPTION: This snippet demonstrates how to register a new MCP server, define its configuration structure, parse configuration, and create a new server instance. It includes methods for registering the server, parsing config, and creating a new server object.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/golang-filter/mcp-server/README_en.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Register your server in the init function\n// Param 1: Server name\n// Param 2: Config struct instance\nfunc init() {\n\tinternal.GlobalRegistry.RegisterServer(\"demo\", &DemoConfig{})\n}\n\n// Server configuration struct\ntype DemoConfig struct {\n\thelloworld string\n}\n\n// Configuration parsing method\n// Parse and validate configuration items from the config map\nfunc (c *DBConfig) ParseConfig(config map[string]any) error {\n\thelloworld, ok := config[\"helloworld\"].(string)\n\tif !ok { return errors.New(\"missing helloworld\")}\n\tc.helloworld = helloworld\n\treturn nil\n}\n\n// Create a new MCP server instance\n// serverName: Server name\n// Returns: MCP server instance and possible error\nfunc (c *DBConfig) NewServer(serverName string) (*internal.MCPServer, error) {\n\tmcpServer := internal.NewMCPServer(serverName, Version)\n    \n\t// Add tool methods to server\n\t// mcpServer.AddTool()\t\n\t\n\t// Add resources to server\n\t// mcpServer.AddResource()\n\t\n\treturn mcpServer, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Building SSE Timing Proxy-Wasm Plugin\nDESCRIPTION: Command to build the SSE Timing Proxy-Wasm plugin. This step is required before using the plugin in Envoy.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-rust/example/sse-timing/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ make\n```\n\n----------------------------------------\n\nTITLE: E2E Test YAML Configuration for Request-Block Plugin\nDESCRIPTION: Example YAML file for E2E testing of the request-block WASM plugin, loading the plugin from a local file path instead of an OCI registry.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/README_EN.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\n...\n...\nspec:\n  defaultConfig:\n    block_urls:\n    - \"swagger.html\"\n  url: file:///opt/plugins/wasm-go/extensions/request-block/plugin.wasm\n```\n\n----------------------------------------\n\nTITLE: AliCloud Bailian Original Protocol Request\nDESCRIPTION: Example JSON request for AliCloud Bailian using the original protocol. Uses a simple prompt structure instead of the OpenAI message format.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"prompt\": \"What is Dubbo?\"\n  },\n  \"parameters\": {},\n  \"debug\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WASM Plugin E2E Tests in Go\nDESCRIPTION: Go code snippet showing how to add a WASM plugin test to the E2E test suite. This allows for testing the plugin functionality in an integrated environment.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/README_EN.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n...\ncSuite.Setup(t)\n\tvar higressTests []suite.ConformanceTest\n\n\tif *isWasmPluginTest {\n\t\tif strings.Compare(*wasmPluginType, \"CPP\") == 0 {\n\t\t\tm := make(map[string]suite.ConformanceTest)\n\t\t\tm[\"request_block\"] = tests.CPPWasmPluginsRequestBlock\n\t\t\tm[\"key_auth\"] = tests.CPPWasmPluginsKeyAuth\n        //Add your newly written case method name here\n\n\t\t\thigressTests = []suite.ConformanceTest{\n\t\t\t\tm[*wasmPluginName],\n\t\t\t}\n\t\t} else {\n\t\t\thigressTests = []suite.ConformanceTest{\n\t\t\t\ttests.WasmPluginsRequestBlock,\n\t\t\t}\n\t\t}\n\t} else {\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Higress Controller Sources in Kubernetes ConfigMap\nDESCRIPTION: A Kubernetes ConfigMap that defines the configuration sources for Higress Controller. It specifies both XDS and Kubernetes as config sources for the mesh configuration in the higress-system namespace.\nSOURCE: https://github.com/alibaba/higress/blob/main/docs/architecture.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: higress-config\n  namespace: higress-system\ndata:\n  mesh: |-\n    accessLogEncoding: TEXT\n    ...\n    configSources:\n    - address: xds://127.0.0.1:15051\n    - address: k8s://\n    ...\n  meshNetworks: \"networks: {}\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Go-http-client Requests in YAML\nDESCRIPTION: 这个YAML配置示例展示了如何放行原本被识别为爬虫的Go-http-client请求。这对于使用Golang标准库发起的HTTP请求很有用。\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/bot_detect/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallow:\n- \".*Go-http-client.*\"\n```\n\n----------------------------------------\n\nTITLE: AliCloud Bailian Original Protocol Response\nDESCRIPTION: Example JSON response from AliCloud Bailian using the original protocol. Contains the output text, session ID, and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README_EN.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"finish_reason\": \"stop\",\n    \"session_id\": \"677e7e8fbb874e1b84792b65042e1599\",\n    \"text\": \"Apache Dubbo is a...\"\n  },\n  \"usage\": {\n    \"models\": [\n      {\n        \"output_tokens\": 449,\n        \"model_id\": \"qwen-max\",\n        \"input_tokens\": 282\n      }\n    ]\n  },\n  \"request_id\": \"b59e45e3-5af4-91df-b7c6-9d746fd3297c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running SSE Timing Plugin with Docker Compose\nDESCRIPTION: Command to start the Envoy configuration with the SSE Timing plugin using Docker Compose. This sets up the environment for testing the plugin.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-rust/example/sse-timing/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ docker compose up\n```\n\n----------------------------------------\n\nTITLE: Displaying Higress Installation Success and Helm Commands\nDESCRIPTION: This snippet shows the success message for Higress installation and provides Helm commands for users to get more information about the release. It uses template variables for the release name and namespace.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/core/templates/NOTES.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHigress successfully installed!\n\nTo learn more about the release, try:\n  $ helm status {{ .Release.Name }} -n {{ .Release.Namespace }}\n  $ helm get all {{ .Release.Name }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Bot Detection Rules with cURL\nDESCRIPTION: Example curl commands demonstrating how requests with specific user agents would be blocked based on the custom deny rules. Shows both versioned and unversioned user agent strings.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/bot_detect/README_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://example.com -H 'User-Agent: spd-tools/1.1'\ncurl http://exmaple.com -H 'User-Agent: spd-tools'\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwen AI Service with Model Mapping in Higress\nDESCRIPTION: YAML configuration for Qwen AI service with model mapping from OpenAI model names to Qwen model variants. Includes mappings for both regular models and vision-language models.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: qwen\n  apiTokens:\n    - \"YOUR_QWEN_API_TOKEN\"\n  modelMapping:\n    'gpt-3': \"qwen-turbo\"\n    'gpt-35-turbo': \"qwen-plus\"\n    'gpt-4-turbo': \"qwen-max\"\n    'gpt-4-*': \"qwen-max\"\n    'gpt-4o': \"qwen-vl-plus\"\n    'text-embedding-v1': 'text-embedding-v1'\n    '*': \"qwen-turbo\"\n```\n\n----------------------------------------\n\nTITLE: Adding Higress Helm Repository in Console\nDESCRIPTION: Commands to add the Higress Helm repository and update the local repository cache. This is required before installing Higress components.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.zh.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add higress.io https://higress.io/helm-charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Setting up Higress Helm Repository\nDESCRIPTION: Commands to add the Higress Helm repository and update local repository cache\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add higress.io https://higress.io/helm-charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Generation in Java\nDESCRIPTION: This Java class demonstrates how to generate a JWT token using a pre-generated private key. It sets various claims including expiration time, subject, and audience, and signs the token using RSA with SHA-256.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-cpp/extensions/jwt_auth/README_EN.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nimport java.security.PrivateKey;\nimport org.jose4j.json.JsonUtil;\nimport org.jose4j.jwk.RsaJsonWebKey;\nimport org.jose4j.jwk.RsaJwkGenerator;\nimport org.jose4j.jws.AlgorithmIdentifiers;\nimport org.jose4j.jws.JsonWebSignature;\nimport org.jose4j.jwt.JwtClaims;\nimport org.jose4j.jwt.NumericDate;\nimport org.jose4j.lang.JoseException;\n\npublic class GenerateJwtDemo {\n    public static void main(String[] args) throws JoseException  {\n        String keyId = \"uniq_key\";\n        // Use the Keypair generated in section 2.1\n        String privateKeyJson = \"{\n\"            + \"  \\\"kty\\\": \\\"RSA\\\",\n\"            + \"  \\\"d\\\": \\\"O9MJSOgcjjiVMNJ4jmBAh0mRHF_TlaVva70Imghtlgwxl8BLfcf1S8ueN1PD7xV6Cnq8YenSKsfiNOhC6yZ_fjW1syn5raWfj68eR7cjHWjLOvKjwVY33GBPNOvspNhVAFzeqfWneRTBbga53Agb6jjN0SUcZdJgnelzz5JNdOGaLzhacjH6YPJKpbuzCQYPkWtoZHDqWTzCSb4mJ3n0NRTsWy7Pm8LwG_Fd3pACl7JIY38IanPQDLoighFfo-Lriv5z3IdlhwbPnx0tk9sBwQBTRdZ8JkqqYkxUiB06phwr7mAnKEpQJ6HvhZBQ1cCnYZ_nIlrX9-I7qomrlE1UoQ\\\",\n\"            + \"  \\\"e\\\": \\\"AQAB\\\",\n\"            + \"  \\\"alg\\\": \\\"RS256\\\",\n\"            + \"  \\\"n\\\": \\\"vCuB8MgwPZfziMSytEbBoOEwxsG7XI3MaVMoocziP4SjzU4IuWuE_DodbOHQwb_thUru57_Efe--sfATHEa0Odv5ny3QbByqsvjyeHk6ZE4mSAV9BsHYa6GWAgEZtnDceeeDc0y76utXK2XHhC1Pysi2KG8KAzqDa099Yh7s31AyoueoMnrYTmWfEyDsQL_OAIiwgXakkS5U8QyXmWicCwXntDzkIMh8MjfPskesyli0XQD1AmCXVV3h2Opm1Amx0ggSOOiINUR5YRD6mKo49_cN-nrJWjtwSouqDdxHYP-4c7epuTcdS6kQHiQERBd1ejdpAxV4c0t0FHF7MOy9kw\\\"\n\"            + \"}\";\n        JwtClaims claims = new JwtClaims();\n        claims.setGeneratedJwtId();\n        claims.setIssuedAtToNow();\n        // Expiration time must be set\n        NumericDate date = NumericDate.now();\n        date.addSeconds(120*60);\n        claims.setExpirationTime(date);\n        claims.setNotBeforeMinutesInThePast(1);\n        claims.setSubject(\"YOUR_SUBJECT\");\n        claims.setAudience(\"YOUR_AUDIENCE\");\n        // Add custom parameters, all values should be String type\n        claims.setClaim(\"userId\", \"1213234\");\n        claims.setClaim(\"email\", \"userEmail@youapp.com\");\n        JsonWebSignature jws = new JsonWebSignature();\n        jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n        jws.setKeyIdHeaderValue(keyId);\n        jws.setPayload(claims.toJson());\n        PrivateKey privateKey = new RsaJsonWebKey(JsonUtil.parseJson(privateKeyJson)).getPrivateKey();\n        jws.setKey(privateKey);\n        String jwtResult = jws.getCompactSerialization();\n        System.out.println(\"Generate Json Web token , result is \" + jwtResult);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Model Service Chat Response Format\nDESCRIPTION: JSON response example from GitHub model service in OpenAI format. It includes the generated content, finish reason, token usage statistics, and model information.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"The capital of France is Paris.\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1728131051,\n  \"id\": \"chatcmpl-AEy7PU2JImdsD1W6Jw8GigZSEnM2u\",\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_67802d9a6d\",\n  \"usage\": {\n    \"completion_tokens\": 7,\n    \"prompt_tokens\": 24,\n    \"total_tokens\": 31\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Higress Gateway\nDESCRIPTION: Helm command to install Higress gateway with default configuration in the higress-system namespace\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm install higress -n higress-system higress.io/higress --create-namespace --render-subchart-notes\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Golang HTTP Filter in YAML\nDESCRIPTION: YAML configuration example for setting up a Golang HTTP filter in Envoy. It specifies the filter name, library path, plugin name, and provides a structure for custom configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/golang-filter/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.golang\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config\n    library_id: my-go-filter\n    library_path: \"./my-go-filter.so\"\n    plugin_name: my-go-filter\n    plugin_config:\n      \"@type\": type.googleapis.com/xds.type.v3.TypedStruct\n      value:\n          your_config_here: value\n                  \n```\n\n----------------------------------------\n\nTITLE: Building a Golang HTTP Filter Plugin with Make\nDESCRIPTION: A bash command that demonstrates how to build a Golang HTTP filter plugin using the make build system. It sets the GO_FILTER_NAME environment variable to specify the filter name before building.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/golang-filter/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGO_FILTER_NAME=mcp-server make build\n```\n\n----------------------------------------\n\nTITLE: 360智脑 Service Chat Response Format\nDESCRIPTION: JSON response example from 360智脑 service in OpenAI format. It includes the Chinese response content, message history, and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"choices\": [\n    {\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"你好，我是360智脑，一个大型语言模型。我可以帮助回答各种问题、提供信息、进行对话等。有什么可以帮助你的吗？\"\n      },\n      \"finish_reason\": \"\",\n      \"index\": 0\n    }\n  ],\n  \"created\": 1724257207,\n  \"id\": \"5e5c94a2-d989-40b5-9965-5b971db941fe\",\n  \"model\": \"360gpt-turbo\",\n  \"object\": \"\",\n  \"usage\": {\n    \"completion_tokens\": 33,\n    \"prompt_tokens\": 24,\n    \"total_tokens\": 57\n  },\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"你是一个专业的开发人员！\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"你好，你是谁？\"\n    }\n  ],\n  \"context\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Higress Gateway\nDESCRIPTION: Helm command to remove Higress gateway and all associated Kubernetes components from the cluster\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.md#2025-04-09_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm delete higress -n higress-system\n```\n\n----------------------------------------\n\nTITLE: Running Higress Conformance Tests - Makefile Commands\nDESCRIPTION: Make commands for executing various types of conformance tests including API tests and WasmPlugin tests with different configuration options\nSOURCE: https://github.com/alibaba/higress/blob/main/test/README.md#2025-04-09_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake higress-conformance-test\nmake higress-wasmplugin-test\nPLUGIN_NAME=request-block make higress-wasmplugin-test\nPLUGIN_TYPE=CPP PLUGIN_NAME=key_auth make higress-wasmplugin-test\nTEST_SHORTNAME=WasmPluginsIPRestrictionAllow,WasmPluginsIPRestrictionDeny make higress-wasmplugin-test\n```\n\n----------------------------------------\n\nTITLE: Building a Golang HTTP Filter Plugin with Make\nDESCRIPTION: Bash command for building a golang filter plugin using the Make build system. Sets the filter name as an environment variable and invokes the make build command.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/golang-filter/README_en.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGO_FILTER_NAME=mcp-server make build\n```\n\n----------------------------------------\n\nTITLE: 360智脑 Service Embedding Response Format\nDESCRIPTION: JSON response example for text embedding from 360智脑 service, providing vector representations for Chinese input text and token usage statistics.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/ai-proxy/README.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"embedding\": [\n        -0.011237,\n        -0.015433,\n        ...,\n        -0.028946,\n        -0.052778,\n        0.003768,\n        -0.007917,\n        -0.042201\n      ],\n      \"index\": 0,\n      \"object\": \"\"\n    }\n  ],\n  \"model\": \"embedding_s1_v1.2\",\n  \"object\": \"\",\n  \"usage\": {\n    \"prompt_tokens\": 2,\n    \"total_tokens\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Git Remote Configuration for Higress\nDESCRIPTION: Shell command to verify the Git remote configuration has been properly set up with both origin (forked repository) and upstream (main Higress repository).\nSOURCE: https://github.com/alibaba/higress/blob/main/CONTRIBUTING_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git remote -v\norigin     git@github.com:<your-username>/higress.git (fetch)\norigin     git@github.com:<your-username>/higress.git (push)\nupstream   git@github.com:alibaba/higress.git (fetch)\nupstream   no-pushing (push)\n```\n\n----------------------------------------\n\nTITLE: Python Package Version Specification\nDESCRIPTION: Specifies the exact version requirement for the yamllint package, pinned to version 1.29.0. This ensures consistent YAML linting behavior across environments.\nSOURCE: https://github.com/alibaba/higress/blob/main/tools/src/yamllint/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nyamllint==1.29.0\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview in Directory Format\nDESCRIPTION: Directory structure of the MCP Server project showing the main components including configuration files, filter implementation, internal logic, server implementations, and dependency definitions.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/golang-filter/mcp-server/README.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmcp-server/\n├── config.go                # 配置解析相关代码\n├── filter.go                # 请求处理相关代码\n├── internal/                # 内部实现逻辑\n├── servers/                 # MCP 服务器实现\n├── go.mod                   # Go模块依赖定义\n└── go.sum                   # Go模块依赖校验\n```\n\n----------------------------------------\n\nTITLE: Starting OPA Service with Docker\nDESCRIPTION: Docker command to start the OPA service on port 8181 using version 0.35.0 of the openpolicyagent/opa image.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/opa/README_EN.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name opa -p 8181:8181 openpolicyagent/opa:0.35.0 run -s\n```\n\n----------------------------------------\n\nTITLE: Retrieving Memory Statistics in Bash\nDESCRIPTION: This snippet shows the response format of the gc-test plugin, which returns memory statistics. The response includes fields such as Sys, HeapSys, HeapIdle, HeapInuse, and HeapReleased, which can be used to monitor memory usage and detect potential leaks.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/gc-test/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{\"Sys\": 15073280,\"HeapSys\": 10682368,\"HeapIdle\": 139264,\"HeapInuse\": 0,\"HeapReleased\": 0}\n```\n\n----------------------------------------\n\nTITLE: Checking Git User Configuration for Higress Contributions\nDESCRIPTION: Commands to verify Git user configuration to ensure commits are associated with the correct GitHub identity when contributing to Higress.\nSOURCE: https://github.com/alibaba/higress/blob/main/CONTRIBUTING_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit config --get user.name\ngit config --get user.email\n```\n\n----------------------------------------\n\nTITLE: Tool Loading Utility in Go\nDESCRIPTION: Function to load and register multiple MCP tools with the server, promoting better code organization and facilitating integration with the all-in-one MCP server plugin.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// tools/load_tools.go\npackage tools\n\nimport (\n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp\"\n    \"github.com/alibaba/higress/plugins/wasm-go/pkg/mcp/server\"\n)\n\nfunc LoadTools(server *mcp.MCPServer) server.Server {\n    return server.AddMCPTool(\"my_tool\", &MyTool{}).\n        AddMCPTool(\"another_tool\", &AnotherTool{})\n        // Add more tools as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OPA Policy via REST API\nDESCRIPTION: cURL command to create an OPA policy that allows only GET requests using the OPA REST API.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/opa/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT '127.0.0.1:8181/v1/policies/example1' \\\n  -H 'Content-Type: text/plain' \\\n  -d 'package example1\nimport input.request\ndefault allow = false\nallow {\n    # HTTP method must GET\n    request.method == \"GET\"}'\n```\n\n----------------------------------------\n\nTITLE: Structuring an MCP Server Project Directory in Go\nDESCRIPTION: Demonstrates the typical directory structure for a Model Context Protocol server project, including configuration files, tool implementations, and entry points.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README_zh.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmy-mcp-server/\n├── go.mod                 # Go 模块定义\n├── go.sum                 # Go 模块校验和\n├── main.go                # 注册工具和资源的入口点\n└── tools/\n    └── my_tool.go         # 工具实现\n```\n\n----------------------------------------\n\nTITLE: Pre-development Setup for Higress Project\nDESCRIPTION: Commands to prepare the development environment for Higress by running prebuild tasks and updating Go module dependencies.\nSOURCE: https://github.com/alibaba/higress/blob/main/CONTRIBUTING_EN.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake prebuild && go mod tidy\n```\n\n----------------------------------------\n\nTITLE: AI Prompt Template for REST-to-MCP Configuration Generation\nDESCRIPTION: A template prompt to help AI assistants generate REST-to-MCP configurations, including server configuration, tool definitions, and request/response templates. The prompt provides guidelines and examples for proper YAML configuration.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/mcp-servers/README.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nPlease help me create a REST-to-MCP configuration for Higress that converts a REST API to an MCP tool. The configuration should follow this format:\n\n```yaml\nserver:\n  name: rest-api-server\n  config:\n    apiKey: your-api-key-here\ntools:\n- name: tool-name\n  description: \"Detailed description of what this tool does\"\n  args:\n  - name: arg1\n    description: \"Description of argument 1\"\n    required: true\n  - name: arg2\n    description: \"Description of argument 2\"\n    required: false\n    default: \"default value\"\n  requestTemplate:\n    url: \"https://api.example.com/endpoint?key={{.config.apiKey}}&param={{.args.arg1}}\"\n    method: GET\n    headers:\n    - key: x-api-key\n      value: \"{{.config.apiKey}}\"\n    - key: Content-Type\n      value: application/json\n    body: |\n      {\n        \"param1\": \"{{.args.arg1}}\",\n        \"param2\": \"{{.args.arg2}}\"\n      }\n  responseTemplate:\n    body: |\n      # Result\n      {{- range $index, $item := .items }}\n      ## Item {{add $index 1}}\n      - **Name**: {{ $item.name }}\n      - **Value**: {{ $item.value }}\n      {{- end }}\n```\n\nThe REST API I want to convert is [describe your API here, including endpoints, parameters, and response format].\n\nPlease generate a complete configuration that:\n1. Has a descriptive name and appropriate server configuration\n2. Defines all necessary arguments with clear descriptions and appropriate required/default values\n3. Creates a requestTemplate that correctly formats the API request, including headers with template values\n4. Creates a responseTemplate that transforms the API response into a readable format for AI consumption\n\nThe templates use GJSON Template syntax (https://github.com/higress-group/gjson_template), which combines Go templates with GJSON path syntax for JSON processing. The template engine supports:\n\n1. Basic dot notation for accessing fields: {{.fieldName}}\n2. The gjson function for complex queries: {{gjson \"users.#(active==true)#.name\"}}\n3. All Sprig template functions (like Helm): {{add}}, {{upper}}, {{lower}}, {{date}}, etc.\n4. Control structures: {{if}}, {{range}}, {{with}}, etc.\n5. Variable assignment: {{$var := .value}}\n\nFor complex JSON responses, consider using GJSON's powerful filtering and querying capabilities to extract and format the most relevant information.\n```\n\n----------------------------------------\n\nTITLE: Testing the DeGraphQL Plugin with curl\nDESCRIPTION: Shows how to query the configured DeGraphQL endpoint using curl, which transforms a REST request into a GraphQL query with parameters for owner and name.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/de-graphql/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"http://localhost/api?owner=alibaba&name=higress\" -H \"Authorization: Bearer some-token\"\n\n{\n\t\"data\": {\n\t\t\"repository\": {\n\t\t\t\"description\": \"Next-generation Cloud Native Gateway\",\n\t\t\t\"forkCount\": 149,\n\t\t\t\"name\": \"higress\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration YAML\nDESCRIPTION: Configuration settings for Redis deployment including persistence, service parameters, and resource allocation settings.\nSOURCE: https://github.com/alibaba/higress/blob/main/helm/higress/README.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n  redis:\n    image: \"redis-stack-server\"\n    tag: \"7.4.0-v3\"\n    replicas: 1\n    password: \"\"\n    persistence:\n      enabled: false\n      size: \"1Gi\"\n      accessModes: [\"ReadWriteOnce\"]\n    service:\n      port: 6379\n      type: \"ClusterIP\"\n```\n\n----------------------------------------\n\nTITLE: Standard GraphQL POST Request Format\nDESCRIPTION: Example JSON body structure for a standard GraphQL POST request, showing the three main components: query (required), operationName (optional), and variables (optional). This format is used when sending requests directly to GraphQL endpoints.\nSOURCE: https://github.com/alibaba/higress/blob/main/plugins/wasm-go/extensions/de-graphql/README_EN.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"{viewer{name}}\",\n  \"operationName\": \"\",\n  \"variables\": {\n    \"name\": \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Helm Release Status for Istio Base Installation in Bash\nDESCRIPTION: These Helm commands allow users to obtain detailed information about the Istio base installation. The first command displays the status of the release, while the second retrieves all information associated with the release.\nSOURCE: https://github.com/alibaba/higress/blob/main/hgctl/pkg/manifests/istiobase/templates/NOTES.txt#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm status {{ .Release.Name }}\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ helm get all {{ .Release.Name }}\n```"
  }
]