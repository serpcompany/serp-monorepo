[
  {
    "owner": "simplyhexagonal",
    "repo": "short-unique-id",
    "content": "TITLE: Generating Random UUIDs - TypeScript\nDESCRIPTION: This snippet demonstrates how to instantiate the ShortUniqueId class and generate random UUIDs of a specified length using the rnd() method.  The UUIDs are generated using the default alphanumeric dictionary. The length of the UUID is set to 10 during instantiation.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst uid = new ShortUniqueId({ length: 10 });\nuid.rnd(); // p0ZoB1FwH6\nuid.rnd(); // mSjGCTfn8w\nuid.rnd(); // yt4Xx5nHMB\n```\n\n----------------------------------------\n\nTITLE: Generating Random UUIDs with Destructuring - TypeScript\nDESCRIPTION: This snippet demonstrates how to instantiate the ShortUniqueId class and destructure the randomUUID method for generating random UUIDs of a specified length. The length of the UUID is set to 10 during instantiation.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { randomUUID } = new ShortUniqueId({ length: 10 });\nrandomUUID(); // e8Civ0HoDy\nrandomUUID(); // iPjiGoHXAK\nrandomUUID(); // n528gSMwTN\n```\n\n----------------------------------------\n\nTITLE: Validating UUIDs - JavaScript\nDESCRIPTION: This snippet demonstrates how to validate a UUID against the instance dictionary or a custom dictionary using the validate() method.  It checks if the UUID consists of characters present in the provided dictionary.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Instantiate using one of the default dictionary strings\nconst uid = new ShortUniqueId({\n  dictionary: 'hex',\n});\n\nconst uuid = uid.stamp(32); // Generate a UUID\n\n// Validate the generated UUID against the instance dictionary\nconst isValid = uid.validate(uuid);\n\nconsole.log(`Is the UUID valid? ${isValid}`);\n\n// ---\n\n// Validate the generated UUID against the provided dictionary\nconst customDictionary = ['a', 'b', /* ... */];\nconst isValid = uid.validate(uuid, customDictionary);\n\nconsole.log(`Is the UUID valid? ${isValid}`);\n```\n\n----------------------------------------\n\nTITLE: Using as Module (ES6/TypeScript) - JavaScript\nDESCRIPTION: This snippet showcases how to import the short-unique-id library as a module using ES6/TypeScript import syntax.  It also demonstrates how to instantiate and use the library to generate random and sequential UUIDs.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// ES6 / TypeScript Import\nimport ShortUniqueId from 'short-unique-id';\n\n// Instantiate\nconst uid = new ShortUniqueId();\n\n// Random UUID\nconsole.log(uid.rnd());\n\n// Sequential UUID\nconsole.log(uid.seq());\n```\n\n----------------------------------------\n\nTITLE: Using Destructuring Assignment - JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate the ShortUniqueId class and destructure the randomUUID and sequentialUUID methods for generating random and sequential UUIDs. This provides a cleaner way to access the desired methods.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Instantiate and destructure (long method name recommended for code readability)\nconst { randomUUID, sequentialUUID } = new ShortUniqueId();\n\n// Random UUID\nconsole.log(randomUUID());\n\n// Sequential UUID\nconsole.log(sequentialUUID());\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs with Timestamp - JavaScript\nDESCRIPTION: This snippet shows how to generate a UUID that includes a timestamp using the stamp() method and how to recover the timestamp from the generated UUID using the parseStamp() method. The timestamp is embedded within the UUID string.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst uid = new ShortUniqueId();\n\nconst uidWithTimestamp = uid.stamp(32);\nconsole.log(uidWithTimestamp);\n// GDa608f973aRCHLXQYPTbKDbjDeVsSb3\n\nconst recoveredTimestamp = uid.parseStamp(uidWithTimestamp);\nconsole.log(recoveredTimestamp);\n// 2021-05-03T06:24:58.000Z\n```\n\n----------------------------------------\n\nTITLE: Using Custom Formatting - JavaScript\nDESCRIPTION: This snippet shows how to use custom formatting strings to generate UUIDs using the formattedUUID() method. The formatting string can include placeholders for random UUIDs ($r), sequential UUIDs ($s), and timestamp UUIDs ($t). A timestamp can also be provided for timestamp UUIDs.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst timestamp = new Date('4-01-29T03:21:21.000Z');\nconst result = uid.formattedUUID('Time: $t0 ID: $s2-$r4', timestamp); // timestamp is optional\n\nconsole.log(result);\n// Time: 63d5e631 ID: 0b-aaab\n```\n\n----------------------------------------\n\nTITLE: Using Default Dictionaries - JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate the ShortUniqueId class with a specific default dictionary (in this case, 'hex') and how to change the dictionary after instantiation using the setDictionary() method. The available dictionaries include number, alpha, alpha_lower, alpha_upper, alphanum (default), alphanum_lower, alphanum_upper, and hex.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// instantiate using one of the default dictionary strings\nconst uid = new ShortUniqueId({\n  dictionary: 'hex',\n});\n\nconsole.log(uid.dict.join());\n// 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f\n\n// or change the dictionary after instantiation\nuid.setDictionary('alpha_upper');\n\nconsole.log(uid.dict.join());\n// A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z\n```\n\n----------------------------------------\n\nTITLE: Using as Module (Node.js) - JavaScript\nDESCRIPTION: This snippet demonstrates how to require the short-unique-id library in a Node.js environment using the require() function.  It also shows how to instantiate and use the library to generate random and sequential UUIDs.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Node.js require\nconst ShortUniqueId = require('short-unique-id');\n\n// Instantiate\nconst uid = new ShortUniqueId();\n\n// Random UUID\nconsole.log(uid.rnd());\n\n// Sequential UUID\nconsole.log(uid.seq());\n```\n\n----------------------------------------\n\nTITLE: Using as Module (Deno) - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the short-unique-id library as a web module in Deno.  It also showcases how to instantiate and use the library to generate random and sequential UUIDs.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Deno (web module) Import\nimport ShortUniqueId from 'https://esm.sh/short-unique-id';\n\n// Instantiate\nconst uid = new ShortUniqueId();\n\n// Random UUID\nconsole.log(uid.rnd());\n\n// Sequential UUID\nconsole.log(uid.seq());\n```\n\n----------------------------------------\n\nTITLE: Using in Browser - HTML/JavaScript\nDESCRIPTION: This snippet demonstrates how to include the short-unique-id library in an HTML page using a CDN and generate random and sequential UUIDs using JavaScript.  The generated UUIDs are then displayed on the webpage.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- Add source (minified 4.6kB) -->\n<script src=\"https://cdn.jsdelivr.net/npm/short-unique-id@latest/dist/short-unique-id.min.js\"></script>\n\n<!-- Usage -->\n<script>\n  // Instantiate\n  var uid = new ShortUniqueId();\n\n  // Random UUID\n  document.write(uid.rnd());\n\n  // Sequential UUID\n  document.write(uid.seq());\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs with Timestamp - CLI\nDESCRIPTION: This snippet showcases the usage of the command-line interface (CLI) to generate UUIDs with timestamps and parse timestamps from existing UUIDs. It utilizes the suid command with the -s and -p options to include and extract timestamps, respectively.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ suid -s -l 42\n\n  lW611f30a2ky4276g3l8N7nBHI5AQ5rCiwYzU47HP2\n\n$ suid -p lW611f30a2ky4276g3l8N7nBHI5AQ5rCiwYzU47HP2\n\n  2021-08-20T04:33:38.000Z\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository via HTTPS\nDESCRIPTION: This command clones the short-unique-id repository using HTTPS. It provides a method to download the repository code without requiring SSH keys.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/jeanlescure/short-unique-id.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository via SSH\nDESCRIPTION: This command clones the short-unique-id repository using SSH. It requires SSH keys to be set up for authentication with the GitHub repository.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:jeanlescure/short-unique-id.git\n```\n\n----------------------------------------\n\nTITLE: Building the Distribution Files using pnpm\nDESCRIPTION: This command builds the distribution files required to publish the latest changes using the pnpm package manager. It assumes that pnpm is installed and configured correctly.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running Tests using pnpm\nDESCRIPTION: This command executes the test suite for the project using the pnpm package manager. It assumes that pnpm is installed and configured correctly.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Releasing the Package using pnpm\nDESCRIPTION: This command runs the release script using pnpm, which handles versioning and publishing. It assumes that pnpm is installed and configured correctly, and the user has the appropriate permissions to publish the package.\nSOURCE: https://github.com/simplyhexagonal/short-unique-id/blob/main/README.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\npnpm release\n```"
  }
]